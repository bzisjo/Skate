
mpu6050.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001e58  00001eec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006b  00800104  00800104  00001ef0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e1f  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb0  00000000  00000000  00003f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001065  00000000  00000000  00004bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000060c  00000000  00000000  00005c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000781  00000000  00000000  00006228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f4c  00000000  00000000  000069a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000088f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__vector_16>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__vector_18>
      4c:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__vector_19>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	03 6e       	ori	r16, 0xE3	; 227
      6a:	db 36       	cpi	r29, 0x6B	; 107
      6c:	3d 9a       	sbi	0x07, 5	; 7
      6e:	99 99       	sbic	0x13, 1	; 19
      70:	99 3d       	cpi	r25, 0xD9	; 217
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	3e 00       	.word	0x003e	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 4a       	sbci	r16, 0xA8	; 168
      7e:	d7 3b       	cpi	r29, 0xB7	; 183
      80:	3b ce       	rjmp	.-906    	; 0xfffffcf8 <__eeprom_end+0xff7efcf8>
      82:	01 6e       	ori	r16, 0xE1	; 225
      84:	84 bc       	out	0x24, r8	; 36
      86:	bf fd       	.word	0xfdbf	; ????
      88:	c1 2f       	mov	r28, r17
      8a:	3d 6c       	ori	r19, 0xCD	; 205
      8c:	74 31       	cpi	r23, 0x14	; 20
      8e:	9a bd       	out	0x2a, r25	; 42
      90:	56 83       	std	Z+6, r21	; 0x06
      92:	3d da       	rcall	.-2950   	; 0xfffff50e <__eeprom_end+0xff7ef50e>
      94:	3d 00       	.word	0x003d	; ????
      96:	c7 7f       	andi	r28, 0xF7	; 247
      98:	11 be       	out	0x31, r1	; 49
      9a:	d9 e4       	ldi	r29, 0x49	; 73
      9c:	bb 4c       	sbci	r27, 0xCB	; 203
      9e:	3e 91       	ld	r19, -X
      a0:	6b aa       	std	Y+51, r6	; 0x33
      a2:	aa be       	out	0x3a, r10	; 58
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	3f 07       	cpc	r19, r31
      aa:	2c 7a       	andi	r18, 0xAC	; 172
      ac:	a5 ba       	out	0x15, r10	; 21
      ae:	6c c5       	rjmp	.+2776   	; 0xb88 <__stack+0x289>
      b0:	90 da       	rcall	.-2784   	; 0xfffff5d2 <__eeprom_end+0xff7ef5d2>
      b2:	3b 93       	.word	0x933b	; ????
      b4:	65 fc       	sbrc	r6, 5
      b6:	8b bc       	out	0x2b, r8	; 43
      b8:	53 f8       	bld	r5, 3
      ba:	10 fd       	sbrc	r17, 0
      bc:	3c 56       	subi	r19, 0x6C	; 108
      be:	92 83       	std	Z+2, r25	; 0x02
      c0:	4d bd       	out	0x2d, r20	; 45
      c2:	87 9d       	mul	r24, r7
      c4:	3a b6       	in	r3, 0x3a	; 58
      c6:	3d cb       	rjmp	.-2438   	; 0xfffff742 <__eeprom_end+0xff7ef742>
      c8:	c9 bf       	out	0x39, r28	; 57
      ca:	5b be       	out	0x3b, r5	; 59
      cc:	73 da       	rcall	.-2842   	; 0xfffff5b4 <__eeprom_end+0xff7ef5b4>
      ce:	0f c9       	rjmp	.-3554   	; 0xfffff2ee <__eeprom_end+0xff7ef2ee>
      d0:	3f 00       	.word	0x003f	; ????

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	11 e0       	ldi	r17, 0x01	; 1
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	e8 e5       	ldi	r30, 0x58	; 88
      e6:	fe e1       	ldi	r31, 0x1E	; 30
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a4 30       	cpi	r26, 0x04	; 4
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	21 e0       	ldi	r18, 0x01	; 1
      f6:	a4 e0       	ldi	r26, 0x04	; 4
      f8:	b1 e0       	ldi	r27, 0x01	; 1
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	af 36       	cpi	r26, 0x6F	; 111
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 39 01 	call	0x272	; 0x272 <main>
     108:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     110:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     114:	80 e2       	ldi	r24, 0x20	; 32
     116:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     11a:	08 95       	ret

0000011c <i2c_start>:
     11c:	94 ea       	ldi	r25, 0xA4	; 164
     11e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     122:	4f ef       	ldi	r20, 0xFF	; 255
     124:	50 e0       	ldi	r21, 0x00	; 0
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	ec eb       	ldi	r30, 0xBC	; 188
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	90 81       	ld	r25, Z
     130:	99 23       	and	r25, r25
     132:	34 f0       	brlt	.+12     	; 0x140 <i2c_start+0x24>
     134:	41 50       	subi	r20, 0x01	; 1
     136:	51 09       	sbc	r21, r1
     138:	61 09       	sbc	r22, r1
     13a:	71 09       	sbc	r23, r1
     13c:	c0 f7       	brcc	.-16     	; 0x12e <i2c_start+0x12>
     13e:	04 c0       	rjmp	.+8      	; 0x148 <i2c_start+0x2c>
     140:	45 2b       	or	r20, r21
     142:	46 2b       	or	r20, r22
     144:	47 2b       	or	r20, r23
     146:	41 f1       	breq	.+80     	; 0x198 <i2c_start+0x7c>
     148:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     14c:	98 7f       	andi	r25, 0xF8	; 248
     14e:	98 30       	cpi	r25, 0x08	; 8
     150:	11 f0       	breq	.+4      	; 0x156 <i2c_start+0x3a>
     152:	90 31       	cpi	r25, 0x10	; 16
     154:	19 f5       	brne	.+70     	; 0x19c <i2c_start+0x80>
     156:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     15a:	84 e8       	ldi	r24, 0x84	; 132
     15c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	a0 e0       	ldi	r26, 0x00	; 0
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	ec eb       	ldi	r30, 0xBC	; 188
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	20 81       	ld	r18, Z
     16e:	22 23       	and	r18, r18
     170:	2c f0       	brlt	.+10     	; 0x17c <i2c_start+0x60>
     172:	01 97       	sbiw	r24, 0x01	; 1
     174:	a1 09       	sbc	r26, r1
     176:	b1 09       	sbc	r27, r1
     178:	c8 f7       	brcc	.-14     	; 0x16c <i2c_start+0x50>
     17a:	04 c0       	rjmp	.+8      	; 0x184 <i2c_start+0x68>
     17c:	89 2b       	or	r24, r25
     17e:	8a 2b       	or	r24, r26
     180:	8b 2b       	or	r24, r27
     182:	71 f0       	breq	.+28     	; 0x1a0 <i2c_start+0x84>
     184:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     188:	98 7f       	andi	r25, 0xF8	; 248
     18a:	98 31       	cpi	r25, 0x18	; 24
     18c:	59 f0       	breq	.+22     	; 0x1a4 <i2c_start+0x88>
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 34       	cpi	r25, 0x40	; 64
     192:	49 f4       	brne	.+18     	; 0x1a6 <i2c_start+0x8a>
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	08 95       	ret
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	08 95       	ret
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	08 95       	ret
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	08 95       	ret
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	08 95       	ret

000001a8 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1a8:	84 e9       	ldi	r24, 0x94	; 148
     1aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	ec eb       	ldi	r30, 0xBC	; 188
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	20 81       	ld	r18, Z
     1b8:	24 ff       	sbrs	r18, 4
     1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <i2c_stop+0x1e>
     1bc:	01 96       	adiw	r24, 0x01	; 1
     1be:	81 15       	cp	r24, r1
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	92 07       	cpc	r25, r18
     1c4:	c1 f7       	brne	.-16     	; 0x1b6 <i2c_stop+0xe>
     1c6:	08 95       	ret

000001c8 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     1c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     1cc:	84 e8       	ldi	r24, 0x84	; 132
     1ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     1d2:	8f ef       	ldi	r24, 0xFF	; 255
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	a0 e0       	ldi	r26, 0x00	; 0
     1d8:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     1da:	ec eb       	ldi	r30, 0xBC	; 188
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	20 81       	ld	r18, Z
     1e0:	22 23       	and	r18, r18
     1e2:	2c f0       	brlt	.+10     	; 0x1ee <i2c_write+0x26>
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	a1 09       	sbc	r26, r1
     1e8:	b1 09       	sbc	r27, r1
     1ea:	c8 f7       	brcc	.-14     	; 0x1de <i2c_write+0x16>
     1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <i2c_write+0x2e>
	if(i2c_timer == 0)
     1ee:	89 2b       	or	r24, r25
     1f0:	8a 2b       	or	r24, r26
     1f2:	8b 2b       	or	r24, r27
     1f4:	41 f0       	breq	.+16     	; 0x206 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     1f6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1fa:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	98 32       	cpi	r25, 0x28	; 40
     200:	19 f4       	brne	.+6      	; 0x208 <i2c_write+0x40>
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     206:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     208:	08 95       	ret

0000020a <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     20a:	84 ec       	ldi	r24, 0xC4	; 196
     20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
     210:	8f ef       	ldi	r24, 0xFF	; 255
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	a0 e0       	ldi	r26, 0x00	; 0
     216:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     218:	ec eb       	ldi	r30, 0xBC	; 188
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	20 81       	ld	r18, Z
     21e:	22 23       	and	r18, r18
     220:	2c f0       	brlt	.+10     	; 0x22c <i2c_readAck+0x22>
     222:	01 97       	sbiw	r24, 0x01	; 1
     224:	a1 09       	sbc	r26, r1
     226:	b1 09       	sbc	r27, r1
     228:	c8 f7       	brcc	.-14     	; 0x21c <i2c_readAck+0x12>
     22a:	04 c0       	rjmp	.+8      	; 0x234 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     22c:	89 2b       	or	r24, r25
     22e:	8a 2b       	or	r24, r26
     230:	8b 2b       	or	r24, r27
     232:	19 f0       	breq	.+6      	; 0x23a <i2c_readAck+0x30>
		return 0;

    return TWDR;
     234:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     238:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     23a:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     23c:	08 95       	ret

0000023e <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     23e:	84 e8       	ldi	r24, 0x84	; 132
     240:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
     244:	8f ef       	ldi	r24, 0xFF	; 255
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     24c:	ec eb       	ldi	r30, 0xBC	; 188
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	20 81       	ld	r18, Z
     252:	22 23       	and	r18, r18
     254:	2c f0       	brlt	.+10     	; 0x260 <i2c_readNak+0x22>
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	a1 09       	sbc	r26, r1
     25a:	b1 09       	sbc	r27, r1
     25c:	c8 f7       	brcc	.-14     	; 0x250 <i2c_readNak+0x12>
     25e:	04 c0       	rjmp	.+8      	; 0x268 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     260:	89 2b       	or	r24, r25
     262:	8a 2b       	or	r24, r26
     264:	8b 2b       	or	r24, r27
     266:	19 f0       	breq	.+6      	; 0x26e <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     268:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     26c:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     26e:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     270:	08 95       	ret

00000272 <main>:
#include "mpu6050/mpu6050.h"

#define UART_BAUD_RATE 28800
#include "uart/uart.h"

int main(void) {
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
     27a:	6c 97       	sbiw	r28, 0x1c	; 28
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	de bf       	out	0x3e, r29	; 62
     282:	0f be       	out	0x3f, r0	; 63
     284:	cd bf       	out	0x3d, r28	; 61
    double gzds = 0;
	#endif

	#if MPU6050_GETATTITUDE == 1 || MPU6050_GETATTITUDE == 2
    long *ptr = 0;
    double qw = 1.0f;
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	a0 e8       	ldi	r26, 0x80	; 128
     28c:	bf e3       	ldi	r27, 0x3F	; 63
     28e:	89 83       	std	Y+1, r24	; 0x01
     290:	9a 83       	std	Y+2, r25	; 0x02
     292:	ab 83       	std	Y+3, r26	; 0x03
     294:	bc 83       	std	Y+4, r27	; 0x04
	double qx = 0.0f;
     296:	1d 82       	std	Y+5, r1	; 0x05
     298:	1e 82       	std	Y+6, r1	; 0x06
     29a:	1f 82       	std	Y+7, r1	; 0x07
     29c:	18 86       	std	Y+8, r1	; 0x08
	double qy = 0.0f;
     29e:	19 86       	std	Y+9, r1	; 0x09
     2a0:	1a 86       	std	Y+10, r1	; 0x0a
     2a2:	1b 86       	std	Y+11, r1	; 0x0b
     2a4:	1c 86       	std	Y+12, r1	; 0x0c
	double qz = 0.0f;
     2a6:	1d 86       	std	Y+13, r1	; 0x0d
     2a8:	1e 86       	std	Y+14, r1	; 0x0e
     2aa:	1f 86       	std	Y+15, r1	; 0x0f
     2ac:	18 8a       	std	Y+16, r1	; 0x10
	double roll = 0.0f;
     2ae:	19 8a       	std	Y+17, r1	; 0x11
     2b0:	1a 8a       	std	Y+18, r1	; 0x12
     2b2:	1b 8a       	std	Y+19, r1	; 0x13
     2b4:	1c 8a       	std	Y+20, r1	; 0x14
	double pitch = 0.0f;
     2b6:	1d 8a       	std	Y+21, r1	; 0x15
     2b8:	1e 8a       	std	Y+22, r1	; 0x16
     2ba:	1f 8a       	std	Y+23, r1	; 0x17
     2bc:	18 8e       	std	Y+24, r1	; 0x18
	double yaw = 0.0f;
     2be:	19 8e       	std	Y+25, r1	; 0x19
     2c0:	1a 8e       	std	Y+26, r1	; 0x1a
     2c2:	1b 8e       	std	Y+27, r1	; 0x1b
     2c4:	1c 8e       	std	Y+28, r1	; 0x1c
	#endif

    //init uart
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
     2c6:	80 e1       	ldi	r24, 0x10	; 16
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 aa 0b 	call	0x1754	; 0x1754 <uart_init>

	//init interrupt
	sei();
     2ce:	78 94       	sei

	//init mpu6050
	mpu6050_init();
     2d0:	0e 94 12 03 	call	0x624	; 0x624 <mpu6050_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d4:	2f e7       	ldi	r18, 0x7F	; 127
     2d6:	88 e3       	ldi	r24, 0x38	; 56
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	21 50       	subi	r18, 0x01	; 1
     2dc:	80 40       	sbci	r24, 0x00	; 0
     2de:	90 40       	sbci	r25, 0x00	; 0
     2e0:	e1 f7       	brne	.-8      	; 0x2da <main+0x68>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x72>
     2e4:	00 00       	nop
		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
		mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
		#endif

		#if MPU6050_GETATTITUDE == 1
		mpu6050_getQuaternion(&qw, &qx, &qy, &qz);
     2e6:	9e 01       	movw	r18, r28
     2e8:	23 5f       	subi	r18, 0xF3	; 243
     2ea:	3f 4f       	sbci	r19, 0xFF	; 255
     2ec:	ae 01       	movw	r20, r28
     2ee:	47 5f       	subi	r20, 0xF7	; 247
     2f0:	5f 4f       	sbci	r21, 0xFF	; 255
     2f2:	be 01       	movw	r22, r28
     2f4:	6b 5f       	subi	r22, 0xFB	; 251
     2f6:	7f 4f       	sbci	r23, 0xFF	; 255
     2f8:	ce 01       	movw	r24, r28
     2fa:	01 96       	adiw	r24, 0x01	; 1
     2fc:	0e 94 5e 09 	call	0x12bc	; 0x12bc <mpu6050_getQuaternion>
		mpu6050_getRollPitchYaw(&roll, &pitch, &yaw);
     300:	ae 01       	movw	r20, r28
     302:	47 5e       	subi	r20, 0xE7	; 231
     304:	5f 4f       	sbci	r21, 0xFF	; 255
     306:	be 01       	movw	r22, r28
     308:	6b 5e       	subi	r22, 0xEB	; 235
     30a:	7f 4f       	sbci	r23, 0xFF	; 255
     30c:	ce 01       	movw	r24, r28
     30e:	41 96       	adiw	r24, 0x11	; 17
     310:	0e 94 9b 09 	call	0x1336	; 0x1336 <mpu6050_getRollPitchYaw>
     314:	8f e1       	ldi	r24, 0x1F	; 31
     316:	9e e4       	ldi	r25, 0x4E	; 78
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <main+0xa6>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <main+0xac>
     31e:	00 00       	nop

		#if MPU6050_GETATTITUDE == 1 || MPU6050_GETATTITUDE == 2

		//quaternion
		ptr = (long *)(&qw);
		uart_putc(*ptr);
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>8);
     326:	8a 81       	ldd	r24, Y+2	; 0x02
     328:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>16);
     32c:	8b 81       	ldd	r24, Y+3	; 0x03
     32e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>24);
     332:	8c 81       	ldd	r24, Y+4	; 0x04
     334:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		ptr = (long *)(&qx);
		uart_putc(*ptr);
     338:	8d 81       	ldd	r24, Y+5	; 0x05
     33a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>8);
     33e:	8e 81       	ldd	r24, Y+6	; 0x06
     340:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>16);
     344:	8f 81       	ldd	r24, Y+7	; 0x07
     346:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>24);
     34a:	88 85       	ldd	r24, Y+8	; 0x08
     34c:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		ptr = (long *)(&qy);
		uart_putc(*ptr);
     350:	89 85       	ldd	r24, Y+9	; 0x09
     352:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>8);
     356:	8a 85       	ldd	r24, Y+10	; 0x0a
     358:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>16);
     35c:	8b 85       	ldd	r24, Y+11	; 0x0b
     35e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>24);
     362:	8c 85       	ldd	r24, Y+12	; 0x0c
     364:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		ptr = (long *)(&qz);
		uart_putc(*ptr);
     368:	8d 85       	ldd	r24, Y+13	; 0x0d
     36a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>8);
     36e:	8e 85       	ldd	r24, Y+14	; 0x0e
     370:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>16);
     374:	8f 85       	ldd	r24, Y+15	; 0x0f
     376:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>24);
     37a:	88 89       	ldd	r24, Y+16	; 0x10
     37c:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>

		//roll pitch yaw
		ptr = (long *)(&roll);
		uart_putc(*ptr);
     380:	89 89       	ldd	r24, Y+17	; 0x11
     382:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>8);
     386:	8a 89       	ldd	r24, Y+18	; 0x12
     388:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>16);
     38c:	8b 89       	ldd	r24, Y+19	; 0x13
     38e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>24);
     392:	8c 89       	ldd	r24, Y+20	; 0x14
     394:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		ptr = (long *)(&pitch);
		uart_putc(*ptr);
     398:	8d 89       	ldd	r24, Y+21	; 0x15
     39a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>8);
     39e:	8e 89       	ldd	r24, Y+22	; 0x16
     3a0:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>16);
     3a4:	8f 89       	ldd	r24, Y+23	; 0x17
     3a6:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>24);
     3aa:	88 8d       	ldd	r24, Y+24	; 0x18
     3ac:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		ptr = (long *)(&yaw);
		uart_putc(*ptr);
     3b0:	89 8d       	ldd	r24, Y+25	; 0x19
     3b2:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>8);
     3b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     3b8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>16);
     3bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3be:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		uart_putc(*ptr>>24);
     3c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3c4:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>

		uart_putc('\n');
     3c8:	8a e0       	ldi	r24, 0x0A	; 10
     3ca:	0e 94 c3 0b 	call	0x1786	; 0x1786 <uart_putc>
		#endif

	}
     3ce:	8b cf       	rjmp	.-234    	; 0x2e6 <main+0x74>

000003d0 <mpu6050_readBytes>:
    *azg = (double)(az)/MPU6050_AGAIN;
    *gxds = (double)(gx)/MPU6050_GGAIN;
	*gyds = (double)(gy)/MPU6050_GGAIN;
	*gzds = (double)(gz)/MPU6050_GGAIN;
	#endif
}
     3d0:	af 92       	push	r10
     3d2:	bf 92       	push	r11
     3d4:	df 92       	push	r13
     3d6:	ef 92       	push	r14
     3d8:	ff 92       	push	r15
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	66 23       	and	r22, r22
     3e4:	b9 f1       	breq	.+110    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     3e6:	c5 2f       	mov	r28, r21
     3e8:	d4 2f       	mov	r29, r20
     3ea:	d6 2e       	mov	r13, r22
     3ec:	18 2f       	mov	r17, r24
     3ee:	80 ed       	ldi	r24, 0xD0	; 208
     3f0:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_start>
     3f4:	81 2f       	mov	r24, r17
     3f6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <i2c_write>
     3fa:	8a e1       	ldi	r24, 0x1A	; 26
     3fc:	8a 95       	dec	r24
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <mpu6050_readBytes+0x2c>
     400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     402:	81 ed       	ldi	r24, 0xD1	; 209
     404:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_start>
     408:	0d 2f       	mov	r16, r29
     40a:	1c 2f       	mov	r17, r28
     40c:	ee 24       	eor	r14, r14
     40e:	ea 94       	dec	r14
     410:	ed 0c       	add	r14, r13
     412:	f1 2c       	mov	r15, r1
     414:	ef ef       	ldi	r30, 0xFF	; 255
     416:	ee 1a       	sub	r14, r30
     418:	fe 0a       	sbc	r15, r30
     41a:	c0 e0       	ldi	r28, 0x00	; 0
     41c:	d0 e0       	ldi	r29, 0x00	; 0
     41e:	ad 2c       	mov	r10, r13
     420:	b1 2c       	mov	r11, r1
     422:	f1 e0       	ldi	r31, 0x01	; 1
     424:	af 1a       	sub	r10, r31
     426:	b1 08       	sbc	r11, r1
     428:	ca 15       	cp	r28, r10
     42a:	db 05       	cpc	r29, r11
     42c:	29 f4       	brne	.+10     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     42e:	0e 94 1f 01 	call	0x23e	; 0x23e <i2c_readNak>
     432:	f8 01       	movw	r30, r16
     434:	80 83       	st	Z, r24
     436:	04 c0       	rjmp	.+8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     438:	0e 94 05 01 	call	0x20a	; 0x20a <i2c_readAck>
     43c:	f8 01       	movw	r30, r16
     43e:	80 83       	st	Z, r24
     440:	21 96       	adiw	r28, 0x01	; 1
     442:	0f 5f       	subi	r16, 0xFF	; 255
     444:	1f 4f       	sbci	r17, 0xFF	; 255
     446:	ce 15       	cp	r28, r14
     448:	df 05       	cpc	r29, r15
     44a:	71 f7       	brne	.-36     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     44c:	cd 2d       	mov	r28, r13
     44e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <i2c_stop>
     452:	01 c0       	rjmp	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     454:	c0 e0       	ldi	r28, 0x00	; 0
     456:	8c 2f       	mov	r24, r28
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	df 90       	pop	r13
     466:	bf 90       	pop	r11
     468:	af 90       	pop	r10
     46a:	08 95       	ret

0000046c <mpu6050_readByte>:
     46c:	ab 01       	movw	r20, r22
     46e:	61 e0       	ldi	r22, 0x01	; 1
     470:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <mpu6050_readBytes>
     474:	08 95       	ret

00000476 <mpu6050_writeBytes>:
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	66 23       	and	r22, r22
     484:	d1 f0       	breq	.+52     	; 0x4ba <mpu6050_writeBytes+0x44>
     486:	7a 01       	movw	r14, r20
     488:	16 2f       	mov	r17, r22
     48a:	c8 2f       	mov	r28, r24
     48c:	80 ed       	ldi	r24, 0xD0	; 208
     48e:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_start>
     492:	8c 2f       	mov	r24, r28
     494:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <i2c_write>
     498:	e7 01       	movw	r28, r14
     49a:	6f ef       	ldi	r22, 0xFF	; 255
     49c:	61 0f       	add	r22, r17
     49e:	06 2f       	mov	r16, r22
     4a0:	10 e0       	ldi	r17, 0x00	; 0
     4a2:	0f 5f       	subi	r16, 0xFF	; 255
     4a4:	1f 4f       	sbci	r17, 0xFF	; 255
     4a6:	0e 0d       	add	r16, r14
     4a8:	1f 1d       	adc	r17, r15
     4aa:	89 91       	ld	r24, Y+
     4ac:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <i2c_write>
     4b0:	c0 17       	cp	r28, r16
     4b2:	d1 07       	cpc	r29, r17
     4b4:	d1 f7       	brne	.-12     	; 0x4aa <mpu6050_writeBytes+0x34>
     4b6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <i2c_stop>
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	08 95       	ret

000004c8 <mpu6050_writeByte>:
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	1f 92       	push	r1
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	69 83       	std	Y+1, r22	; 0x01
     4d4:	ae 01       	movw	r20, r28
     4d6:	4f 5f       	subi	r20, 0xFF	; 255
     4d8:	5f 4f       	sbci	r21, 0xFF	; 255
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	0e 94 3b 02 	call	0x476	; 0x476 <mpu6050_writeBytes>
     4e0:	0f 90       	pop	r0
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <mpu6050_readBit>:
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	1f 92       	push	r1
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	f6 2e       	mov	r15, r22
     4fa:	8a 01       	movw	r16, r20
     4fc:	be 01       	movw	r22, r28
     4fe:	6f 5f       	subi	r22, 0xFF	; 255
     500:	7f 4f       	sbci	r23, 0xFF	; 255
     502:	0e 94 36 02 	call	0x46c	; 0x46c <mpu6050_readByte>
     506:	21 e0       	ldi	r18, 0x01	; 1
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	02 c0       	rjmp	.+4      	; 0x510 <mpu6050_readBit+0x28>
     50c:	22 0f       	add	r18, r18
     50e:	33 1f       	adc	r19, r19
     510:	fa 94       	dec	r15
     512:	e2 f7       	brpl	.-8      	; 0x50c <mpu6050_readBit+0x24>
     514:	99 81       	ldd	r25, Y+1	; 0x01
     516:	29 23       	and	r18, r25
     518:	f8 01       	movw	r30, r16
     51a:	20 83       	st	Z, r18
     51c:	0f 90       	pop	r0
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	0f 91       	pop	r16
     526:	ff 90       	pop	r15
     528:	08 95       	ret

0000052a <mpu6050_writeBits>:
     52a:	ef 92       	push	r14
     52c:	ff 92       	push	r15
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	1f 92       	push	r1
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	44 23       	and	r20, r20
     53e:	89 f1       	breq	.+98     	; 0x5a2 <mpu6050_writeBits+0x78>
     540:	f2 2e       	mov	r15, r18
     542:	14 2f       	mov	r17, r20
     544:	06 2f       	mov	r16, r22
     546:	e8 2e       	mov	r14, r24
     548:	19 82       	std	Y+1, r1	; 0x01
     54a:	be 01       	movw	r22, r28
     54c:	6f 5f       	subi	r22, 0xFF	; 255
     54e:	7f 4f       	sbci	r23, 0xFF	; 255
     550:	0e 94 36 02 	call	0x46c	; 0x46c <mpu6050_readByte>
     554:	88 23       	and	r24, r24
     556:	29 f1       	breq	.+74     	; 0x5a2 <mpu6050_writeBits+0x78>
     558:	40 2f       	mov	r20, r16
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	41 1b       	sub	r20, r17
     55e:	51 09       	sbc	r21, r1
     560:	4f 5f       	subi	r20, 0xFF	; 255
     562:	5f 4f       	sbci	r21, 0xFF	; 255
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	02 c0       	rjmp	.+4      	; 0x56e <mpu6050_writeBits+0x44>
     56a:	88 0f       	add	r24, r24
     56c:	99 1f       	adc	r25, r25
     56e:	1a 95       	dec	r17
     570:	e2 f7       	brpl	.-8      	; 0x56a <mpu6050_writeBits+0x40>
     572:	01 97       	sbiw	r24, 0x01	; 1
     574:	04 2e       	mov	r0, r20
     576:	02 c0       	rjmp	.+4      	; 0x57c <mpu6050_writeBits+0x52>
     578:	88 0f       	add	r24, r24
     57a:	99 1f       	adc	r25, r25
     57c:	0a 94       	dec	r0
     57e:	e2 f7       	brpl	.-8      	; 0x578 <mpu6050_writeBits+0x4e>
     580:	2f 2d       	mov	r18, r15
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	02 c0       	rjmp	.+4      	; 0x58a <mpu6050_writeBits+0x60>
     586:	22 0f       	add	r18, r18
     588:	33 1f       	adc	r19, r19
     58a:	4a 95       	dec	r20
     58c:	e2 f7       	brpl	.-8      	; 0x586 <mpu6050_writeBits+0x5c>
     58e:	68 2f       	mov	r22, r24
     590:	60 95       	com	r22
     592:	99 81       	ldd	r25, Y+1	; 0x01
     594:	69 23       	and	r22, r25
     596:	82 23       	and	r24, r18
     598:	68 2b       	or	r22, r24
     59a:	69 83       	std	Y+1, r22	; 0x01
     59c:	8e 2d       	mov	r24, r14
     59e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <mpu6050_writeByte>
     5a2:	0f 90       	pop	r0
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	08 95       	ret

000005b2 <mpu6050_writeBit>:
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	1f 92       	push	r1
     5be:	cd b7       	in	r28, 0x3d	; 61
     5c0:	de b7       	in	r29, 0x3e	; 62
     5c2:	18 2f       	mov	r17, r24
     5c4:	06 2f       	mov	r16, r22
     5c6:	f4 2e       	mov	r15, r20
     5c8:	be 01       	movw	r22, r28
     5ca:	6f 5f       	subi	r22, 0xFF	; 255
     5cc:	7f 4f       	sbci	r23, 0xFF	; 255
     5ce:	0e 94 36 02 	call	0x46c	; 0x46c <mpu6050_readByte>
     5d2:	ff 20       	and	r15, r15
     5d4:	59 f0       	breq	.+22     	; 0x5ec <mpu6050_writeBit+0x3a>
     5d6:	21 e0       	ldi	r18, 0x01	; 1
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	b9 01       	movw	r22, r18
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <mpu6050_writeBit+0x30>
     5de:	66 0f       	add	r22, r22
     5e0:	77 1f       	adc	r23, r23
     5e2:	0a 95       	dec	r16
     5e4:	e2 f7       	brpl	.-8      	; 0x5de <mpu6050_writeBit+0x2c>
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	68 2b       	or	r22, r24
     5ea:	0b c0       	rjmp	.+22     	; 0x602 <mpu6050_writeBit+0x50>
     5ec:	21 e0       	ldi	r18, 0x01	; 1
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	b9 01       	movw	r22, r18
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <mpu6050_writeBit+0x46>
     5f4:	66 0f       	add	r22, r22
     5f6:	77 1f       	adc	r23, r23
     5f8:	0a 95       	dec	r16
     5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <mpu6050_writeBit+0x42>
     5fc:	60 95       	com	r22
     5fe:	99 81       	ldd	r25, Y+1	; 0x01
     600:	69 23       	and	r22, r25
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	81 2f       	mov	r24, r17
     606:	0e 94 64 02 	call	0x4c8	; 0x4c8 <mpu6050_writeByte>
     60a:	0f 90       	pop	r0
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	ff 90       	pop	r15
     616:	08 95       	ret

00000618 <mpu6050_setSleepDisabled>:
     618:	40 e0       	ldi	r20, 0x00	; 0
     61a:	66 e0       	ldi	r22, 0x06	; 6
     61c:	8b e6       	ldi	r24, 0x6B	; 107
     61e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <mpu6050_writeBit>
     622:	08 95       	ret

00000624 <mpu6050_init>:
     624:	0e 94 88 00 	call	0x110	; 0x110 <i2c_init>
     628:	2a e1       	ldi	r18, 0x1A	; 26
     62a:	2a 95       	dec	r18
     62c:	f1 f7       	brne	.-4      	; 0x62a <mpu6050_init+0x6>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <mpu6050_init+0xc>
     630:	8f ef       	ldi	r24, 0xFF	; 255
     632:	90 e7       	ldi	r25, 0x70	; 112
     634:	22 e0       	ldi	r18, 0x02	; 2
     636:	81 50       	subi	r24, 0x01	; 1
     638:	90 40       	sbci	r25, 0x00	; 0
     63a:	20 40       	sbci	r18, 0x00	; 0
     63c:	e1 f7       	brne	.-8      	; 0x636 <mpu6050_init+0x12>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <mpu6050_init+0x1c>
     640:	00 00       	nop
     642:	0e 94 0c 03 	call	0x618	; 0x618 <mpu6050_setSleepDisabled>
     646:	8f e1       	ldi	r24, 0x1F	; 31
     648:	9e e4       	ldi	r25, 0x4E	; 78
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	f1 f7       	brne	.-4      	; 0x64a <mpu6050_init+0x26>
     64e:	00 c0       	rjmp	.+0      	; 0x650 <mpu6050_init+0x2c>
     650:	00 00       	nop
     652:	21 e0       	ldi	r18, 0x01	; 1
     654:	43 e0       	ldi	r20, 0x03	; 3
     656:	62 e0       	ldi	r22, 0x02	; 2
     658:	8b e6       	ldi	r24, 0x6B	; 107
     65a:	0e 94 95 02 	call	0x52a	; 0x52a <mpu6050_writeBits>
     65e:	23 e0       	ldi	r18, 0x03	; 3
     660:	43 e0       	ldi	r20, 0x03	; 3
     662:	62 e0       	ldi	r22, 0x02	; 2
     664:	8a e1       	ldi	r24, 0x1A	; 26
     666:	0e 94 95 02 	call	0x52a	; 0x52a <mpu6050_writeBits>
     66a:	64 e0       	ldi	r22, 0x04	; 4
     66c:	89 e1       	ldi	r24, 0x19	; 25
     66e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <mpu6050_writeByte>
     672:	23 e0       	ldi	r18, 0x03	; 3
     674:	42 e0       	ldi	r20, 0x02	; 2
     676:	64 e0       	ldi	r22, 0x04	; 4
     678:	8b e1       	ldi	r24, 0x1B	; 27
     67a:	0e 94 95 02 	call	0x52a	; 0x52a <mpu6050_writeBits>
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	42 e0       	ldi	r20, 0x02	; 2
     682:	64 e0       	ldi	r22, 0x04	; 4
     684:	8c e1       	ldi	r24, 0x1C	; 28
     686:	0e 94 95 02 	call	0x52a	; 0x52a <mpu6050_writeBits>
     68a:	85 b5       	in	r24, 0x25	; 37
     68c:	85 60       	ori	r24, 0x05	; 5
     68e:	85 bd       	out	0x25, r24	; 37
     690:	ee e6       	ldi	r30, 0x6E	; 110
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 81       	ld	r24, Z
     696:	81 60       	ori	r24, 0x01	; 1
     698:	80 83       	st	Z, r24
     69a:	08 95       	ret

0000069c <mpu6050_mahonyUpdate>:
volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
volatile float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
/*
 * Mahony update function (for 6DOF)
 */
void mpu6050_mahonyUpdate(float gx, float gy, float gz, float ax, float ay, float az) {
     69c:	4f 92       	push	r4
     69e:	5f 92       	push	r5
     6a0:	6f 92       	push	r6
     6a2:	7f 92       	push	r7
     6a4:	8f 92       	push	r8
     6a6:	9f 92       	push	r9
     6a8:	af 92       	push	r10
     6aa:	bf 92       	push	r11
     6ac:	cf 92       	push	r12
     6ae:	df 92       	push	r13
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	a4 97       	sbiw	r28, 0x24	; 36
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	cd bf       	out	0x3d, r28	; 61
     6cc:	6d 87       	std	Y+13, r22	; 0x0d
     6ce:	7e 87       	std	Y+14, r23	; 0x0e
     6d0:	8f 87       	std	Y+15, r24	; 0x0f
     6d2:	98 8b       	std	Y+16, r25	; 0x10
     6d4:	29 8b       	std	Y+17, r18	; 0x11
     6d6:	3a 8b       	std	Y+18, r19	; 0x12
     6d8:	4b 8b       	std	Y+19, r20	; 0x13
     6da:	5c 8b       	std	Y+20, r21	; 0x14
     6dc:	ed 8a       	std	Y+21, r14	; 0x15
     6de:	fe 8a       	std	Y+22, r15	; 0x16
     6e0:	0f 8b       	std	Y+23, r16	; 0x17
     6e2:	18 8f       	std	Y+24, r17	; 0x18
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	a9 01       	movw	r20, r18
     6ea:	c6 01       	movw	r24, r12
     6ec:	b5 01       	movw	r22, r10
     6ee:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__cmpsf2>
     6f2:	81 11       	cpse	r24, r1
     6f4:	17 c0       	rjmp	.+46     	; 0x724 <mpu6050_mahonyUpdate+0x88>
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	a9 01       	movw	r20, r18
     6fc:	6f a9       	ldd	r22, Y+55	; 0x37
     6fe:	78 ad       	ldd	r23, Y+56	; 0x38
     700:	89 ad       	ldd	r24, Y+57	; 0x39
     702:	9a ad       	ldd	r25, Y+58	; 0x3a
     704:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__cmpsf2>
     708:	81 11       	cpse	r24, r1
     70a:	0c c0       	rjmp	.+24     	; 0x724 <mpu6050_mahonyUpdate+0x88>
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	a9 01       	movw	r20, r18
     712:	6b ad       	ldd	r22, Y+59	; 0x3b
     714:	7c ad       	ldd	r23, Y+60	; 0x3c
     716:	8d ad       	ldd	r24, Y+61	; 0x3d
     718:	9e ad       	ldd	r25, Y+62	; 0x3e
     71a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__cmpsf2>
     71e:	88 23       	and	r24, r24
     720:	09 f4       	brne	.+2      	; 0x724 <mpu6050_mahonyUpdate+0x88>
     722:	1a c2       	rjmp	.+1076   	; 0xb58 <__stack+0x259>

		// Normalise accelerometer measurement
		norm = sqrt(ax * ax + ay * ay + az * az);
     724:	a6 01       	movw	r20, r12
     726:	95 01       	movw	r18, r10
     728:	c6 01       	movw	r24, r12
     72a:	b5 01       	movw	r22, r10
     72c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     730:	2b 01       	movw	r4, r22
     732:	3c 01       	movw	r6, r24
     734:	2f a9       	ldd	r18, Y+55	; 0x37
     736:	38 ad       	ldd	r19, Y+56	; 0x38
     738:	49 ad       	ldd	r20, Y+57	; 0x39
     73a:	5a ad       	ldd	r21, Y+58	; 0x3a
     73c:	ca 01       	movw	r24, r20
     73e:	b9 01       	movw	r22, r18
     740:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     744:	69 83       	std	Y+1, r22	; 0x01
     746:	7a 83       	std	Y+2, r23	; 0x02
     748:	8b 83       	std	Y+3, r24	; 0x03
     74a:	9c 83       	std	Y+4, r25	; 0x04
     74c:	9b 01       	movw	r18, r22
     74e:	ac 01       	movw	r20, r24
     750:	c3 01       	movw	r24, r6
     752:	b2 01       	movw	r22, r4
     754:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     758:	6d 8f       	std	Y+29, r22	; 0x1d
     75a:	7e 8f       	std	Y+30, r23	; 0x1e
     75c:	8f 8f       	std	Y+31, r24	; 0x1f
     75e:	98 a3       	std	Y+32, r25	; 0x20
     760:	2b ad       	ldd	r18, Y+59	; 0x3b
     762:	3c ad       	ldd	r19, Y+60	; 0x3c
     764:	4d ad       	ldd	r20, Y+61	; 0x3d
     766:	5e ad       	ldd	r21, Y+62	; 0x3e
     768:	ca 01       	movw	r24, r20
     76a:	b9 01       	movw	r22, r18
     76c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     770:	69 8f       	std	Y+25, r22	; 0x19
     772:	7a 8f       	std	Y+26, r23	; 0x1a
     774:	8b 8f       	std	Y+27, r24	; 0x1b
     776:	9c 8f       	std	Y+28, r25	; 0x1c
     778:	29 81       	ldd	r18, Y+1	; 0x01
     77a:	3a 81       	ldd	r19, Y+2	; 0x02
     77c:	4b 81       	ldd	r20, Y+3	; 0x03
     77e:	5c 81       	ldd	r21, Y+4	; 0x04
     780:	c3 01       	movw	r24, r6
     782:	b2 01       	movw	r22, r4
     784:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     788:	2b 01       	movw	r4, r22
     78a:	3c 01       	movw	r6, r24
     78c:	29 8d       	ldd	r18, Y+25	; 0x19
     78e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     790:	4b 8d       	ldd	r20, Y+27	; 0x1b
     792:	5c 8d       	ldd	r21, Y+28	; 0x1c
     794:	c3 01       	movw	r24, r6
     796:	b2 01       	movw	r22, r4
     798:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     79c:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <sqrt>
     7a0:	2b 01       	movw	r4, r22
     7a2:	3c 01       	movw	r6, r24
		ax /= norm;
     7a4:	9b 01       	movw	r18, r22
     7a6:	ac 01       	movw	r20, r24
     7a8:	c6 01       	movw	r24, r12
     7aa:	b5 01       	movw	r22, r10
     7ac:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__divsf3>
     7b0:	69 83       	std	Y+1, r22	; 0x01
     7b2:	7a 83       	std	Y+2, r23	; 0x02
     7b4:	8b 83       	std	Y+3, r24	; 0x03
     7b6:	9c 83       	std	Y+4, r25	; 0x04
		ay /= norm;
     7b8:	a3 01       	movw	r20, r6
     7ba:	92 01       	movw	r18, r4
     7bc:	6f a9       	ldd	r22, Y+55	; 0x37
     7be:	78 ad       	ldd	r23, Y+56	; 0x38
     7c0:	89 ad       	ldd	r24, Y+57	; 0x39
     7c2:	9a ad       	ldd	r25, Y+58	; 0x3a
     7c4:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__divsf3>
     7c8:	6d 83       	std	Y+5, r22	; 0x05
     7ca:	7e 83       	std	Y+6, r23	; 0x06
     7cc:	8f 83       	std	Y+7, r24	; 0x07
     7ce:	98 87       	std	Y+8, r25	; 0x08
		az /= norm;
     7d0:	a3 01       	movw	r20, r6
     7d2:	92 01       	movw	r18, r4
     7d4:	6b ad       	ldd	r22, Y+59	; 0x3b
     7d6:	7c ad       	ldd	r23, Y+60	; 0x3c
     7d8:	8d ad       	ldd	r24, Y+61	; 0x3d
     7da:	9e ad       	ldd	r25, Y+62	; 0x3e
     7dc:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__divsf3>
     7e0:	69 87       	std	Y+9, r22	; 0x09
     7e2:	7a 87       	std	Y+10, r23	; 0x0a
     7e4:	8b 87       	std	Y+11, r24	; 0x0b
     7e6:	9c 87       	std	Y+12, r25	; 0x0c

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
     7e8:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <q1>
     7ec:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <q1+0x1>
     7f0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <q1+0x2>
     7f4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <q1+0x3>
     7f8:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <q3>
     7fc:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <q3+0x1>
     800:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <q3+0x2>
     804:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <q3+0x3>
     808:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
     80c:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
     810:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
     814:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
     818:	40 90 14 01 	lds	r4, 0x0114	; 0x800114 <q2>
     81c:	50 90 15 01 	lds	r5, 0x0115	; 0x800115 <q2+0x1>
     820:	60 90 16 01 	lds	r6, 0x0116	; 0x800116 <q2+0x2>
     824:	70 90 17 01 	lds	r7, 0x0117	; 0x800117 <q2+0x3>
     828:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     82c:	6b 01       	movw	r12, r22
     82e:	7c 01       	movw	r14, r24
     830:	a3 01       	movw	r20, r6
     832:	92 01       	movw	r18, r4
     834:	c5 01       	movw	r24, r10
     836:	b4 01       	movw	r22, r8
     838:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     83c:	9b 01       	movw	r18, r22
     83e:	ac 01       	movw	r20, r24
     840:	c7 01       	movw	r24, r14
     842:	b6 01       	movw	r22, r12
     844:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__subsf3>
     848:	69 8f       	std	Y+25, r22	; 0x19
     84a:	7a 8f       	std	Y+26, r23	; 0x1a
     84c:	8b 8f       	std	Y+27, r24	; 0x1b
     84e:	9c 8f       	std	Y+28, r25	; 0x1c
		halfvy = q0 * q1 + q2 * q3;
     850:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     854:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     858:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     85c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     860:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <q1>
     864:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <q1+0x1>
     868:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <q1+0x2>
     86c:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <q1+0x3>
     870:	80 90 14 01 	lds	r8, 0x0114	; 0x800114 <q2>
     874:	90 90 15 01 	lds	r9, 0x0115	; 0x800115 <q2+0x1>
     878:	a0 90 16 01 	lds	r10, 0x0116	; 0x800116 <q2+0x2>
     87c:	b0 90 17 01 	lds	r11, 0x0117	; 0x800117 <q2+0x3>
     880:	40 90 10 01 	lds	r4, 0x0110	; 0x800110 <q3>
     884:	50 90 11 01 	lds	r5, 0x0111	; 0x800111 <q3+0x1>
     888:	60 90 12 01 	lds	r6, 0x0112	; 0x800112 <q3+0x2>
     88c:	70 90 13 01 	lds	r7, 0x0113	; 0x800113 <q3+0x3>
     890:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     894:	6b 01       	movw	r12, r22
     896:	7c 01       	movw	r14, r24
     898:	a3 01       	movw	r20, r6
     89a:	92 01       	movw	r18, r4
     89c:	c5 01       	movw	r24, r10
     89e:	b4 01       	movw	r22, r8
     8a0:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     8a4:	9b 01       	movw	r18, r22
     8a6:	ac 01       	movw	r20, r24
     8a8:	c7 01       	movw	r24, r14
     8aa:	b6 01       	movw	r22, r12
     8ac:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     8b0:	6d 8f       	std	Y+29, r22	; 0x1d
     8b2:	7e 8f       	std	Y+30, r23	; 0x1e
     8b4:	8f 8f       	std	Y+31, r24	; 0x1f
     8b6:	98 a3       	std	Y+32, r25	; 0x20
		halfvz = q0 * q0 - 0.5f + q3 * q3;
     8b8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     8bc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     8c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     8c4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     8c8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     8cc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     8d0:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
     8d4:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
     8d8:	80 90 10 01 	lds	r8, 0x0110	; 0x800110 <q3>
     8dc:	90 90 11 01 	lds	r9, 0x0111	; 0x800111 <q3+0x1>
     8e0:	a0 90 12 01 	lds	r10, 0x0112	; 0x800112 <q3+0x2>
     8e4:	b0 90 13 01 	lds	r11, 0x0113	; 0x800113 <q3+0x3>
     8e8:	40 90 10 01 	lds	r4, 0x0110	; 0x800110 <q3>
     8ec:	50 90 11 01 	lds	r5, 0x0111	; 0x800111 <q3+0x1>
     8f0:	60 90 12 01 	lds	r6, 0x0112	; 0x800112 <q3+0x2>
     8f4:	70 90 13 01 	lds	r7, 0x0113	; 0x800113 <q3+0x3>
     8f8:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	5f e3       	ldi	r21, 0x3F	; 63
     904:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__subsf3>
     908:	6b 01       	movw	r12, r22
     90a:	7c 01       	movw	r14, r24
     90c:	a3 01       	movw	r20, r6
     90e:	92 01       	movw	r18, r4
     910:	c5 01       	movw	r24, r10
     912:	b4 01       	movw	r22, r8
     914:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     918:	9b 01       	movw	r18, r22
     91a:	ac 01       	movw	r20, r24
     91c:	c7 01       	movw	r24, r14
     91e:	b6 01       	movw	r22, r12
     920:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     924:	6b 01       	movw	r12, r22
     926:	7c 01       	movw	r14, r24

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
     928:	9b 01       	movw	r18, r22
     92a:	ac 01       	movw	r20, r24
     92c:	6d 81       	ldd	r22, Y+5	; 0x05
     92e:	7e 81       	ldd	r23, Y+6	; 0x06
     930:	8f 81       	ldd	r24, Y+7	; 0x07
     932:	98 85       	ldd	r25, Y+8	; 0x08
     934:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     938:	4b 01       	movw	r8, r22
     93a:	5c 01       	movw	r10, r24
     93c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     93e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     940:	4f 8d       	ldd	r20, Y+31	; 0x1f
     942:	58 a1       	ldd	r21, Y+32	; 0x20
     944:	69 85       	ldd	r22, Y+9	; 0x09
     946:	7a 85       	ldd	r23, Y+10	; 0x0a
     948:	8b 85       	ldd	r24, Y+11	; 0x0b
     94a:	9c 85       	ldd	r25, Y+12	; 0x0c
     94c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     950:	9b 01       	movw	r18, r22
     952:	ac 01       	movw	r20, r24
     954:	c5 01       	movw	r24, r10
     956:	b4 01       	movw	r22, r8
     958:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__subsf3>
     95c:	69 a3       	std	Y+33, r22	; 0x21
     95e:	7a a3       	std	Y+34, r23	; 0x22
     960:	8b a3       	std	Y+35, r24	; 0x23
     962:	9c a3       	std	Y+36, r25	; 0x24
		halfey = (az * halfvx - ax * halfvz);
     964:	29 8d       	ldd	r18, Y+25	; 0x19
     966:	3a 8d       	ldd	r19, Y+26	; 0x1a
     968:	4b 8d       	ldd	r20, Y+27	; 0x1b
     96a:	5c 8d       	ldd	r21, Y+28	; 0x1c
     96c:	69 85       	ldd	r22, Y+9	; 0x09
     96e:	7a 85       	ldd	r23, Y+10	; 0x0a
     970:	8b 85       	ldd	r24, Y+11	; 0x0b
     972:	9c 85       	ldd	r25, Y+12	; 0x0c
     974:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     978:	4b 01       	movw	r8, r22
     97a:	5c 01       	movw	r10, r24
     97c:	a7 01       	movw	r20, r14
     97e:	96 01       	movw	r18, r12
     980:	69 81       	ldd	r22, Y+1	; 0x01
     982:	7a 81       	ldd	r23, Y+2	; 0x02
     984:	8b 81       	ldd	r24, Y+3	; 0x03
     986:	9c 81       	ldd	r25, Y+4	; 0x04
     988:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     98c:	9b 01       	movw	r18, r22
     98e:	ac 01       	movw	r20, r24
     990:	c5 01       	movw	r24, r10
     992:	b4 01       	movw	r22, r8
     994:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__subsf3>
     998:	2b 01       	movw	r4, r22
     99a:	3c 01       	movw	r6, r24
		halfez = (ax * halfvy - ay * halfvx);
     99c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     99e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     9a0:	4f 8d       	ldd	r20, Y+31	; 0x1f
     9a2:	58 a1       	ldd	r21, Y+32	; 0x20
     9a4:	69 81       	ldd	r22, Y+1	; 0x01
     9a6:	7a 81       	ldd	r23, Y+2	; 0x02
     9a8:	8b 81       	ldd	r24, Y+3	; 0x03
     9aa:	9c 81       	ldd	r25, Y+4	; 0x04
     9ac:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     9b0:	6b 01       	movw	r12, r22
     9b2:	7c 01       	movw	r14, r24
     9b4:	29 8d       	ldd	r18, Y+25	; 0x19
     9b6:	3a 8d       	ldd	r19, Y+26	; 0x1a
     9b8:	4b 8d       	ldd	r20, Y+27	; 0x1b
     9ba:	5c 8d       	ldd	r21, Y+28	; 0x1c
     9bc:	6d 81       	ldd	r22, Y+5	; 0x05
     9be:	7e 81       	ldd	r23, Y+6	; 0x06
     9c0:	8f 81       	ldd	r24, Y+7	; 0x07
     9c2:	98 85       	ldd	r25, Y+8	; 0x08
     9c4:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     9c8:	9b 01       	movw	r18, r22
     9ca:	ac 01       	movw	r20, r24
     9cc:	c7 01       	movw	r24, r14
     9ce:	b6 01       	movw	r22, r12
     9d0:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__subsf3>
     9d4:	4b 01       	movw	r8, r22
     9d6:	5c 01       	movw	r10, r24

		// Compute and apply integral feedback if enabled
		if(mpu6050_mahonytwoKiDef > 0.0f) {
			integralFBx += mpu6050_mahonytwoKiDef * halfex * (1.0f / mpu6050_mahonysampleFreq);	// integral error scaled by Ki
     9d8:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <integralFBx>
     9dc:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <integralFBx+0x1>
     9e0:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <integralFBx+0x2>
     9e4:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <integralFBx+0x3>
     9e8:	2d ec       	ldi	r18, 0xCD	; 205
     9ea:	3c ec       	ldi	r19, 0xCC	; 204
     9ec:	4c e4       	ldi	r20, 0x4C	; 76
     9ee:	5e e3       	ldi	r21, 0x3E	; 62
     9f0:	69 a1       	ldd	r22, Y+33	; 0x21
     9f2:	7a a1       	ldd	r23, Y+34	; 0x22
     9f4:	8b a1       	ldd	r24, Y+35	; 0x23
     9f6:	9c a1       	ldd	r25, Y+36	; 0x24
     9f8:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     9fc:	2a e8       	ldi	r18, 0x8A	; 138
     9fe:	3b e4       	ldi	r19, 0x4B	; 75
     a00:	46 e8       	ldi	r20, 0x86	; 134
     a02:	5c e3       	ldi	r21, 0x3C	; 60
     a04:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     a08:	a7 01       	movw	r20, r14
     a0a:	96 01       	movw	r18, r12
     a0c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     a10:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <integralFBx>
     a14:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <integralFBx+0x1>
     a18:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <integralFBx+0x2>
     a1c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <integralFBx+0x3>
			integralFBy += mpu6050_mahonytwoKiDef * halfey * (1.0f / mpu6050_mahonysampleFreq);
     a20:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <integralFBy>
     a24:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <integralFBy+0x1>
     a28:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <integralFBy+0x2>
     a2c:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <integralFBy+0x3>
     a30:	2d ec       	ldi	r18, 0xCD	; 205
     a32:	3c ec       	ldi	r19, 0xCC	; 204
     a34:	4c e4       	ldi	r20, 0x4C	; 76
     a36:	5e e3       	ldi	r21, 0x3E	; 62
     a38:	c3 01       	movw	r24, r6
     a3a:	b2 01       	movw	r22, r4
     a3c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     a40:	2a e8       	ldi	r18, 0x8A	; 138
     a42:	3b e4       	ldi	r19, 0x4B	; 75
     a44:	46 e8       	ldi	r20, 0x86	; 134
     a46:	5c e3       	ldi	r21, 0x3C	; 60
     a48:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     a4c:	a7 01       	movw	r20, r14
     a4e:	96 01       	movw	r18, r12
     a50:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     a54:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <integralFBy>
     a58:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <integralFBy+0x1>
     a5c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <integralFBy+0x2>
     a60:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <integralFBy+0x3>
			integralFBz += mpu6050_mahonytwoKiDef * halfez * (1.0f / mpu6050_mahonysampleFreq);
     a64:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <__data_end>
     a68:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <__data_end+0x1>
     a6c:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <__data_end+0x2>
     a70:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <__data_end+0x3>
     a74:	2d ec       	ldi	r18, 0xCD	; 205
     a76:	3c ec       	ldi	r19, 0xCC	; 204
     a78:	4c e4       	ldi	r20, 0x4C	; 76
     a7a:	5e e3       	ldi	r21, 0x3E	; 62
     a7c:	c5 01       	movw	r24, r10
     a7e:	b4 01       	movw	r22, r8
     a80:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     a84:	2a e8       	ldi	r18, 0x8A	; 138
     a86:	3b e4       	ldi	r19, 0x4B	; 75
     a88:	46 e8       	ldi	r20, 0x86	; 134
     a8a:	5c e3       	ldi	r21, 0x3C	; 60
     a8c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     a90:	a7 01       	movw	r20, r14
     a92:	96 01       	movw	r18, r12
     a94:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     a98:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
     a9c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
     aa0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
     aa4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
			gx += integralFBx;	// apply integral feedback
     aa8:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <integralFBx>
     aac:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <integralFBx+0x1>
     ab0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <integralFBx+0x2>
     ab4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <integralFBx+0x3>
     ab8:	2d 85       	ldd	r18, Y+13	; 0x0d
     aba:	3e 85       	ldd	r19, Y+14	; 0x0e
     abc:	4f 85       	ldd	r20, Y+15	; 0x0f
     abe:	58 89       	ldd	r21, Y+16	; 0x10
     ac0:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     ac4:	6d 83       	std	Y+5, r22	; 0x05
     ac6:	7e 83       	std	Y+6, r23	; 0x06
     ac8:	8f 83       	std	Y+7, r24	; 0x07
     aca:	98 87       	std	Y+8, r25	; 0x08
			gy += integralFBy;
     acc:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <integralFBy>
     ad0:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <integralFBy+0x1>
     ad4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <integralFBy+0x2>
     ad8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <integralFBy+0x3>
     adc:	29 89       	ldd	r18, Y+17	; 0x11
     ade:	3a 89       	ldd	r19, Y+18	; 0x12
     ae0:	4b 89       	ldd	r20, Y+19	; 0x13
     ae2:	5c 89       	ldd	r21, Y+20	; 0x14
     ae4:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     ae8:	69 87       	std	Y+9, r22	; 0x09
     aea:	7a 87       	std	Y+10, r23	; 0x0a
     aec:	8b 87       	std	Y+11, r24	; 0x0b
     aee:	9c 87       	std	Y+12, r25	; 0x0c
			gz += integralFBz;
     af0:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
     af4:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x1>
     af8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end+0x2>
     afc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x3>
     b00:	2d 89       	ldd	r18, Y+21	; 0x15
     b02:	3e 89       	ldd	r19, Y+22	; 0x16
     b04:	4f 89       	ldd	r20, Y+23	; 0x17
     b06:	58 8d       	ldd	r21, Y+24	; 0x18
     b08:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     b0c:	6b 01       	movw	r12, r22
     b0e:	7c 01       	movw	r14, r24
			integralFBy = 0.0f;
			integralFBz = 0.0f;
		}

		// Apply proportional feedback
		gx += mpu6050_mahonytwoKpDef * halfex;
     b10:	29 a1       	ldd	r18, Y+33	; 0x21
     b12:	3a a1       	ldd	r19, Y+34	; 0x22
     b14:	4b a1       	ldd	r20, Y+35	; 0x23
     b16:	5c a1       	ldd	r21, Y+36	; 0x24
     b18:	6d 81       	ldd	r22, Y+5	; 0x05
     b1a:	7e 81       	ldd	r23, Y+6	; 0x06
     b1c:	8f 81       	ldd	r24, Y+7	; 0x07
     b1e:	98 85       	ldd	r25, Y+8	; 0x08
     b20:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     b24:	6d 87       	std	Y+13, r22	; 0x0d
     b26:	7e 87       	std	Y+14, r23	; 0x0e
     b28:	8f 87       	std	Y+15, r24	; 0x0f
     b2a:	98 8b       	std	Y+16, r25	; 0x10
		gy += mpu6050_mahonytwoKpDef * halfey;
     b2c:	a3 01       	movw	r20, r6
     b2e:	92 01       	movw	r18, r4
     b30:	69 85       	ldd	r22, Y+9	; 0x09
     b32:	7a 85       	ldd	r23, Y+10	; 0x0a
     b34:	8b 85       	ldd	r24, Y+11	; 0x0b
     b36:	9c 85       	ldd	r25, Y+12	; 0x0c
     b38:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     b3c:	69 8b       	std	Y+17, r22	; 0x11
     b3e:	7a 8b       	std	Y+18, r23	; 0x12
     b40:	8b 8b       	std	Y+19, r24	; 0x13
     b42:	9c 8b       	std	Y+20, r25	; 0x14
		gz += mpu6050_mahonytwoKpDef * halfez;
     b44:	a5 01       	movw	r20, r10
     b46:	94 01       	movw	r18, r8
     b48:	c7 01       	movw	r24, r14
     b4a:	b6 01       	movw	r22, r12
     b4c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     b50:	6d 8b       	std	Y+21, r22	; 0x15
     b52:	7e 8b       	std	Y+22, r23	; 0x16
     b54:	8f 8b       	std	Y+23, r24	; 0x17
     b56:	98 8f       	std	Y+24, r25	; 0x18
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));		// pre-multiply common factors
     b58:	2a e8       	ldi	r18, 0x8A	; 138
     b5a:	3b e4       	ldi	r19, 0x4B	; 75
     b5c:	46 e0       	ldi	r20, 0x06	; 6
     b5e:	5c e3       	ldi	r21, 0x3C	; 60
     b60:	6d 85       	ldd	r22, Y+13	; 0x0d
     b62:	7e 85       	ldd	r23, Y+14	; 0x0e
     b64:	8f 85       	ldd	r24, Y+15	; 0x0f
     b66:	98 89       	ldd	r25, Y+16	; 0x10
     b68:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     b6c:	6d 83       	std	Y+5, r22	; 0x05
     b6e:	7e 83       	std	Y+6, r23	; 0x06
     b70:	8f 83       	std	Y+7, r24	; 0x07
     b72:	98 87       	std	Y+8, r25	; 0x08
	gy *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
     b74:	2a e8       	ldi	r18, 0x8A	; 138
     b76:	3b e4       	ldi	r19, 0x4B	; 75
     b78:	46 e0       	ldi	r20, 0x06	; 6
     b7a:	5c e3       	ldi	r21, 0x3C	; 60
     b7c:	69 89       	ldd	r22, Y+17	; 0x11
     b7e:	7a 89       	ldd	r23, Y+18	; 0x12
     b80:	8b 89       	ldd	r24, Y+19	; 0x13
     b82:	9c 89       	ldd	r25, Y+20	; 0x14
     b84:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     b88:	69 87       	std	Y+9, r22	; 0x09
     b8a:	7a 87       	std	Y+10, r23	; 0x0a
     b8c:	8b 87       	std	Y+11, r24	; 0x0b
     b8e:	9c 87       	std	Y+12, r25	; 0x0c
	gz *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
     b90:	2a e8       	ldi	r18, 0x8A	; 138
     b92:	3b e4       	ldi	r19, 0x4B	; 75
     b94:	46 e0       	ldi	r20, 0x06	; 6
     b96:	5c e3       	ldi	r21, 0x3C	; 60
     b98:	6d 89       	ldd	r22, Y+21	; 0x15
     b9a:	7e 89       	ldd	r23, Y+22	; 0x16
     b9c:	8f 89       	ldd	r24, Y+23	; 0x17
     b9e:	98 8d       	ldd	r25, Y+24	; 0x18
     ba0:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     ba4:	6d 87       	std	Y+13, r22	; 0x0d
     ba6:	7e 87       	std	Y+14, r23	; 0x0e
     ba8:	8f 87       	std	Y+15, r24	; 0x0f
     baa:	98 8b       	std	Y+16, r25	; 0x10
	qa = q0;
     bac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     bb0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     bb4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     bb8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     bbc:	89 8b       	std	Y+17, r24	; 0x11
     bbe:	9a 8b       	std	Y+18, r25	; 0x12
     bc0:	ab 8b       	std	Y+19, r26	; 0x13
     bc2:	bc 8b       	std	Y+20, r27	; 0x14
	qb = q1;
     bc4:	80 90 18 01 	lds	r8, 0x0118	; 0x800118 <q1>
     bc8:	90 90 19 01 	lds	r9, 0x0119	; 0x800119 <q1+0x1>
     bcc:	a0 90 1a 01 	lds	r10, 0x011A	; 0x80011a <q1+0x2>
     bd0:	b0 90 1b 01 	lds	r11, 0x011B	; 0x80011b <q1+0x3>
	qc = q2;
     bd4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <q2>
     bd8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <q2+0x1>
     bdc:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <q2+0x2>
     be0:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <q2+0x3>
     be4:	8d 8b       	std	Y+21, r24	; 0x15
     be6:	9e 8b       	std	Y+22, r25	; 0x16
     be8:	af 8b       	std	Y+23, r26	; 0x17
     bea:	b8 8f       	std	Y+24, r27	; 0x18
	q0 += (-qb * gx - qc * gy - q3 * gz);
     bec:	40 90 10 01 	lds	r4, 0x0110	; 0x800110 <q3>
     bf0:	50 90 11 01 	lds	r5, 0x0111	; 0x800111 <q3+0x1>
     bf4:	60 90 12 01 	lds	r6, 0x0112	; 0x800112 <q3+0x2>
     bf8:	70 90 13 01 	lds	r7, 0x0113	; 0x800113 <q3+0x3>
     bfc:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     c00:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     c04:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     c08:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     c0c:	c5 01       	movw	r24, r10
     c0e:	b4 01       	movw	r22, r8
     c10:	90 58       	subi	r25, 0x80	; 128
     c12:	2d 81       	ldd	r18, Y+5	; 0x05
     c14:	3e 81       	ldd	r19, Y+6	; 0x06
     c16:	4f 81       	ldd	r20, Y+7	; 0x07
     c18:	58 85       	ldd	r21, Y+8	; 0x08
     c1a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     c1e:	69 83       	std	Y+1, r22	; 0x01
     c20:	7a 83       	std	Y+2, r23	; 0x02
     c22:	8b 83       	std	Y+3, r24	; 0x03
     c24:	9c 83       	std	Y+4, r25	; 0x04
     c26:	29 85       	ldd	r18, Y+9	; 0x09
     c28:	3a 85       	ldd	r19, Y+10	; 0x0a
     c2a:	4b 85       	ldd	r20, Y+11	; 0x0b
     c2c:	5c 85       	ldd	r21, Y+12	; 0x0c
     c2e:	6d 89       	ldd	r22, Y+21	; 0x15
     c30:	7e 89       	ldd	r23, Y+22	; 0x16
     c32:	8f 89       	ldd	r24, Y+23	; 0x17
     c34:	98 8d       	ldd	r25, Y+24	; 0x18
     c36:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     c3a:	9b 01       	movw	r18, r22
     c3c:	ac 01       	movw	r20, r24
     c3e:	69 81       	ldd	r22, Y+1	; 0x01
     c40:	7a 81       	ldd	r23, Y+2	; 0x02
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	9c 81       	ldd	r25, Y+4	; 0x04
     c46:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__subsf3>
     c4a:	69 83       	std	Y+1, r22	; 0x01
     c4c:	7a 83       	std	Y+2, r23	; 0x02
     c4e:	8b 83       	std	Y+3, r24	; 0x03
     c50:	9c 83       	std	Y+4, r25	; 0x04
     c52:	2d 85       	ldd	r18, Y+13	; 0x0d
     c54:	3e 85       	ldd	r19, Y+14	; 0x0e
     c56:	4f 85       	ldd	r20, Y+15	; 0x0f
     c58:	58 89       	ldd	r21, Y+16	; 0x10
     c5a:	c3 01       	movw	r24, r6
     c5c:	b2 01       	movw	r22, r4
     c5e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     c62:	9b 01       	movw	r18, r22
     c64:	ac 01       	movw	r20, r24
     c66:	69 81       	ldd	r22, Y+1	; 0x01
     c68:	7a 81       	ldd	r23, Y+2	; 0x02
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	9c 81       	ldd	r25, Y+4	; 0x04
     c6e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__subsf3>
     c72:	a7 01       	movw	r20, r14
     c74:	96 01       	movw	r18, r12
     c76:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     c7a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     c7e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     c82:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     c86:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	q1 += (qa * gx + qc * gz - q3 * gy);
     c8a:	40 90 10 01 	lds	r4, 0x0110	; 0x800110 <q3>
     c8e:	50 90 11 01 	lds	r5, 0x0111	; 0x800111 <q3+0x1>
     c92:	60 90 12 01 	lds	r6, 0x0112	; 0x800112 <q3+0x2>
     c96:	70 90 13 01 	lds	r7, 0x0113	; 0x800113 <q3+0x3>
     c9a:	c0 90 18 01 	lds	r12, 0x0118	; 0x800118 <q1>
     c9e:	d0 90 19 01 	lds	r13, 0x0119	; 0x800119 <q1+0x1>
     ca2:	e0 90 1a 01 	lds	r14, 0x011A	; 0x80011a <q1+0x2>
     ca6:	f0 90 1b 01 	lds	r15, 0x011B	; 0x80011b <q1+0x3>
     caa:	2d 81       	ldd	r18, Y+5	; 0x05
     cac:	3e 81       	ldd	r19, Y+6	; 0x06
     cae:	4f 81       	ldd	r20, Y+7	; 0x07
     cb0:	58 85       	ldd	r21, Y+8	; 0x08
     cb2:	69 89       	ldd	r22, Y+17	; 0x11
     cb4:	7a 89       	ldd	r23, Y+18	; 0x12
     cb6:	8b 89       	ldd	r24, Y+19	; 0x13
     cb8:	9c 89       	ldd	r25, Y+20	; 0x14
     cba:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     cbe:	69 83       	std	Y+1, r22	; 0x01
     cc0:	7a 83       	std	Y+2, r23	; 0x02
     cc2:	8b 83       	std	Y+3, r24	; 0x03
     cc4:	9c 83       	std	Y+4, r25	; 0x04
     cc6:	2d 85       	ldd	r18, Y+13	; 0x0d
     cc8:	3e 85       	ldd	r19, Y+14	; 0x0e
     cca:	4f 85       	ldd	r20, Y+15	; 0x0f
     ccc:	58 89       	ldd	r21, Y+16	; 0x10
     cce:	6d 89       	ldd	r22, Y+21	; 0x15
     cd0:	7e 89       	ldd	r23, Y+22	; 0x16
     cd2:	8f 89       	ldd	r24, Y+23	; 0x17
     cd4:	98 8d       	ldd	r25, Y+24	; 0x18
     cd6:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     cda:	9b 01       	movw	r18, r22
     cdc:	ac 01       	movw	r20, r24
     cde:	69 81       	ldd	r22, Y+1	; 0x01
     ce0:	7a 81       	ldd	r23, Y+2	; 0x02
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	9c 81       	ldd	r25, Y+4	; 0x04
     ce6:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     cea:	69 83       	std	Y+1, r22	; 0x01
     cec:	7a 83       	std	Y+2, r23	; 0x02
     cee:	8b 83       	std	Y+3, r24	; 0x03
     cf0:	9c 83       	std	Y+4, r25	; 0x04
     cf2:	29 85       	ldd	r18, Y+9	; 0x09
     cf4:	3a 85       	ldd	r19, Y+10	; 0x0a
     cf6:	4b 85       	ldd	r20, Y+11	; 0x0b
     cf8:	5c 85       	ldd	r21, Y+12	; 0x0c
     cfa:	c3 01       	movw	r24, r6
     cfc:	b2 01       	movw	r22, r4
     cfe:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     d02:	9b 01       	movw	r18, r22
     d04:	ac 01       	movw	r20, r24
     d06:	69 81       	ldd	r22, Y+1	; 0x01
     d08:	7a 81       	ldd	r23, Y+2	; 0x02
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__subsf3>
     d12:	a7 01       	movw	r20, r14
     d14:	96 01       	movw	r18, r12
     d16:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     d1a:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <q1>
     d1e:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <q1+0x1>
     d22:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <q1+0x2>
     d26:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <q1+0x3>
	q2 += (qa * gy - qb * gz + q3 * gx);
     d2a:	40 90 10 01 	lds	r4, 0x0110	; 0x800110 <q3>
     d2e:	50 90 11 01 	lds	r5, 0x0111	; 0x800111 <q3+0x1>
     d32:	60 90 12 01 	lds	r6, 0x0112	; 0x800112 <q3+0x2>
     d36:	70 90 13 01 	lds	r7, 0x0113	; 0x800113 <q3+0x3>
     d3a:	c0 90 14 01 	lds	r12, 0x0114	; 0x800114 <q2>
     d3e:	d0 90 15 01 	lds	r13, 0x0115	; 0x800115 <q2+0x1>
     d42:	e0 90 16 01 	lds	r14, 0x0116	; 0x800116 <q2+0x2>
     d46:	f0 90 17 01 	lds	r15, 0x0117	; 0x800117 <q2+0x3>
     d4a:	29 85       	ldd	r18, Y+9	; 0x09
     d4c:	3a 85       	ldd	r19, Y+10	; 0x0a
     d4e:	4b 85       	ldd	r20, Y+11	; 0x0b
     d50:	5c 85       	ldd	r21, Y+12	; 0x0c
     d52:	69 89       	ldd	r22, Y+17	; 0x11
     d54:	7a 89       	ldd	r23, Y+18	; 0x12
     d56:	8b 89       	ldd	r24, Y+19	; 0x13
     d58:	9c 89       	ldd	r25, Y+20	; 0x14
     d5a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     d5e:	69 83       	std	Y+1, r22	; 0x01
     d60:	7a 83       	std	Y+2, r23	; 0x02
     d62:	8b 83       	std	Y+3, r24	; 0x03
     d64:	9c 83       	std	Y+4, r25	; 0x04
     d66:	2d 85       	ldd	r18, Y+13	; 0x0d
     d68:	3e 85       	ldd	r19, Y+14	; 0x0e
     d6a:	4f 85       	ldd	r20, Y+15	; 0x0f
     d6c:	58 89       	ldd	r21, Y+16	; 0x10
     d6e:	c5 01       	movw	r24, r10
     d70:	b4 01       	movw	r22, r8
     d72:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     d76:	9b 01       	movw	r18, r22
     d78:	ac 01       	movw	r20, r24
     d7a:	69 81       	ldd	r22, Y+1	; 0x01
     d7c:	7a 81       	ldd	r23, Y+2	; 0x02
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	9c 81       	ldd	r25, Y+4	; 0x04
     d82:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__subsf3>
     d86:	69 83       	std	Y+1, r22	; 0x01
     d88:	7a 83       	std	Y+2, r23	; 0x02
     d8a:	8b 83       	std	Y+3, r24	; 0x03
     d8c:	9c 83       	std	Y+4, r25	; 0x04
     d8e:	2d 81       	ldd	r18, Y+5	; 0x05
     d90:	3e 81       	ldd	r19, Y+6	; 0x06
     d92:	4f 81       	ldd	r20, Y+7	; 0x07
     d94:	58 85       	ldd	r21, Y+8	; 0x08
     d96:	c3 01       	movw	r24, r6
     d98:	b2 01       	movw	r22, r4
     d9a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     d9e:	9b 01       	movw	r18, r22
     da0:	ac 01       	movw	r20, r24
     da2:	69 81       	ldd	r22, Y+1	; 0x01
     da4:	7a 81       	ldd	r23, Y+2	; 0x02
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	9c 81       	ldd	r25, Y+4	; 0x04
     daa:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     dae:	a7 01       	movw	r20, r14
     db0:	96 01       	movw	r18, r12
     db2:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     db6:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <q2>
     dba:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <q2+0x1>
     dbe:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <q2+0x2>
     dc2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <q2+0x3>
	q3 += (qa * gz + qb * gy - qc * gx);
     dc6:	c0 90 10 01 	lds	r12, 0x0110	; 0x800110 <q3>
     dca:	d0 90 11 01 	lds	r13, 0x0111	; 0x800111 <q3+0x1>
     dce:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <q3+0x2>
     dd2:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <q3+0x3>
     dd6:	2d 85       	ldd	r18, Y+13	; 0x0d
     dd8:	3e 85       	ldd	r19, Y+14	; 0x0e
     dda:	4f 85       	ldd	r20, Y+15	; 0x0f
     ddc:	58 89       	ldd	r21, Y+16	; 0x10
     dde:	69 89       	ldd	r22, Y+17	; 0x11
     de0:	7a 89       	ldd	r23, Y+18	; 0x12
     de2:	8b 89       	ldd	r24, Y+19	; 0x13
     de4:	9c 89       	ldd	r25, Y+20	; 0x14
     de6:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     dea:	2b 01       	movw	r4, r22
     dec:	3c 01       	movw	r6, r24
     dee:	29 85       	ldd	r18, Y+9	; 0x09
     df0:	3a 85       	ldd	r19, Y+10	; 0x0a
     df2:	4b 85       	ldd	r20, Y+11	; 0x0b
     df4:	5c 85       	ldd	r21, Y+12	; 0x0c
     df6:	c5 01       	movw	r24, r10
     df8:	b4 01       	movw	r22, r8
     dfa:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     dfe:	9b 01       	movw	r18, r22
     e00:	ac 01       	movw	r20, r24
     e02:	c3 01       	movw	r24, r6
     e04:	b2 01       	movw	r22, r4
     e06:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     e0a:	4b 01       	movw	r8, r22
     e0c:	5c 01       	movw	r10, r24
     e0e:	2d 81       	ldd	r18, Y+5	; 0x05
     e10:	3e 81       	ldd	r19, Y+6	; 0x06
     e12:	4f 81       	ldd	r20, Y+7	; 0x07
     e14:	58 85       	ldd	r21, Y+8	; 0x08
     e16:	6d 89       	ldd	r22, Y+21	; 0x15
     e18:	7e 89       	ldd	r23, Y+22	; 0x16
     e1a:	8f 89       	ldd	r24, Y+23	; 0x17
     e1c:	98 8d       	ldd	r25, Y+24	; 0x18
     e1e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     e22:	9b 01       	movw	r18, r22
     e24:	ac 01       	movw	r20, r24
     e26:	c5 01       	movw	r24, r10
     e28:	b4 01       	movw	r22, r8
     e2a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__subsf3>
     e2e:	a7 01       	movw	r20, r14
     e30:	96 01       	movw	r18, r12
     e32:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     e36:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <q3>
     e3a:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <q3+0x1>
     e3e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <q3+0x2>
     e42:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <q3+0x3>

	// Normalise quaternion
	norm = sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
     e46:	40 90 00 01 	lds	r4, 0x0100	; 0x800100 <__data_start>
     e4a:	50 90 01 01 	lds	r5, 0x0101	; 0x800101 <__data_start+0x1>
     e4e:	60 90 02 01 	lds	r6, 0x0102	; 0x800102 <__data_start+0x2>
     e52:	70 90 03 01 	lds	r7, 0x0103	; 0x800103 <__data_start+0x3>
     e56:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     e5a:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     e5e:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     e62:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     e66:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <q1>
     e6a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <q1+0x1>
     e6e:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <q1+0x2>
     e72:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <q1+0x3>
     e76:	8d 83       	std	Y+5, r24	; 0x05
     e78:	9e 83       	std	Y+6, r25	; 0x06
     e7a:	af 83       	std	Y+7, r26	; 0x07
     e7c:	b8 87       	std	Y+8, r27	; 0x08
     e7e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <q1>
     e82:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <q1+0x1>
     e86:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <q1+0x2>
     e8a:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <q1+0x3>
     e8e:	89 87       	std	Y+9, r24	; 0x09
     e90:	9a 87       	std	Y+10, r25	; 0x0a
     e92:	ab 87       	std	Y+11, r26	; 0x0b
     e94:	bc 87       	std	Y+12, r27	; 0x0c
     e96:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <q2>
     e9a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <q2+0x1>
     e9e:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <q2+0x2>
     ea2:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <q2+0x3>
     ea6:	8d 87       	std	Y+13, r24	; 0x0d
     ea8:	9e 87       	std	Y+14, r25	; 0x0e
     eaa:	af 87       	std	Y+15, r26	; 0x0f
     eac:	b8 8b       	std	Y+16, r27	; 0x10
     eae:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <q2>
     eb2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <q2+0x1>
     eb6:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <q2+0x2>
     eba:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <q2+0x3>
     ebe:	89 8b       	std	Y+17, r24	; 0x11
     ec0:	9a 8b       	std	Y+18, r25	; 0x12
     ec2:	ab 8b       	std	Y+19, r26	; 0x13
     ec4:	bc 8b       	std	Y+20, r27	; 0x14
     ec6:	80 90 10 01 	lds	r8, 0x0110	; 0x800110 <q3>
     eca:	90 90 11 01 	lds	r9, 0x0111	; 0x800111 <q3+0x1>
     ece:	a0 90 12 01 	lds	r10, 0x0112	; 0x800112 <q3+0x2>
     ed2:	b0 90 13 01 	lds	r11, 0x0113	; 0x800113 <q3+0x3>
     ed6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <q3>
     eda:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <q3+0x1>
     ede:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <q3+0x2>
     ee2:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <q3+0x3>
     ee6:	8d 8b       	std	Y+21, r24	; 0x15
     ee8:	9e 8b       	std	Y+22, r25	; 0x16
     eea:	af 8b       	std	Y+23, r26	; 0x17
     eec:	b8 8f       	std	Y+24, r27	; 0x18
     eee:	a7 01       	movw	r20, r14
     ef0:	96 01       	movw	r18, r12
     ef2:	c3 01       	movw	r24, r6
     ef4:	b2 01       	movw	r22, r4
     ef6:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     efa:	69 83       	std	Y+1, r22	; 0x01
     efc:	7a 83       	std	Y+2, r23	; 0x02
     efe:	8b 83       	std	Y+3, r24	; 0x03
     f00:	9c 83       	std	Y+4, r25	; 0x04
     f02:	29 85       	ldd	r18, Y+9	; 0x09
     f04:	3a 85       	ldd	r19, Y+10	; 0x0a
     f06:	4b 85       	ldd	r20, Y+11	; 0x0b
     f08:	5c 85       	ldd	r21, Y+12	; 0x0c
     f0a:	6d 81       	ldd	r22, Y+5	; 0x05
     f0c:	7e 81       	ldd	r23, Y+6	; 0x06
     f0e:	8f 81       	ldd	r24, Y+7	; 0x07
     f10:	98 85       	ldd	r25, Y+8	; 0x08
     f12:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     f16:	9b 01       	movw	r18, r22
     f18:	ac 01       	movw	r20, r24
     f1a:	69 81       	ldd	r22, Y+1	; 0x01
     f1c:	7a 81       	ldd	r23, Y+2	; 0x02
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     f26:	69 83       	std	Y+1, r22	; 0x01
     f28:	7a 83       	std	Y+2, r23	; 0x02
     f2a:	8b 83       	std	Y+3, r24	; 0x03
     f2c:	9c 83       	std	Y+4, r25	; 0x04
     f2e:	29 89       	ldd	r18, Y+17	; 0x11
     f30:	3a 89       	ldd	r19, Y+18	; 0x12
     f32:	4b 89       	ldd	r20, Y+19	; 0x13
     f34:	5c 89       	ldd	r21, Y+20	; 0x14
     f36:	6d 85       	ldd	r22, Y+13	; 0x0d
     f38:	7e 85       	ldd	r23, Y+14	; 0x0e
     f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f3c:	98 89       	ldd	r25, Y+16	; 0x10
     f3e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     f42:	9b 01       	movw	r18, r22
     f44:	ac 01       	movw	r20, r24
     f46:	69 81       	ldd	r22, Y+1	; 0x01
     f48:	7a 81       	ldd	r23, Y+2	; 0x02
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	9c 81       	ldd	r25, Y+4	; 0x04
     f4e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     f52:	69 83       	std	Y+1, r22	; 0x01
     f54:	7a 83       	std	Y+2, r23	; 0x02
     f56:	8b 83       	std	Y+3, r24	; 0x03
     f58:	9c 83       	std	Y+4, r25	; 0x04
     f5a:	a7 01       	movw	r20, r14
     f5c:	96 01       	movw	r18, r12
     f5e:	c3 01       	movw	r24, r6
     f60:	b2 01       	movw	r22, r4
     f62:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     f66:	6b 01       	movw	r12, r22
     f68:	7c 01       	movw	r14, r24
     f6a:	29 85       	ldd	r18, Y+9	; 0x09
     f6c:	3a 85       	ldd	r19, Y+10	; 0x0a
     f6e:	4b 85       	ldd	r20, Y+11	; 0x0b
     f70:	5c 85       	ldd	r21, Y+12	; 0x0c
     f72:	6d 81       	ldd	r22, Y+5	; 0x05
     f74:	7e 81       	ldd	r23, Y+6	; 0x06
     f76:	8f 81       	ldd	r24, Y+7	; 0x07
     f78:	98 85       	ldd	r25, Y+8	; 0x08
     f7a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     f7e:	9b 01       	movw	r18, r22
     f80:	ac 01       	movw	r20, r24
     f82:	c7 01       	movw	r24, r14
     f84:	b6 01       	movw	r22, r12
     f86:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     f8a:	6b 01       	movw	r12, r22
     f8c:	7c 01       	movw	r14, r24
     f8e:	29 89       	ldd	r18, Y+17	; 0x11
     f90:	3a 89       	ldd	r19, Y+18	; 0x12
     f92:	4b 89       	ldd	r20, Y+19	; 0x13
     f94:	5c 89       	ldd	r21, Y+20	; 0x14
     f96:	6d 85       	ldd	r22, Y+13	; 0x0d
     f98:	7e 85       	ldd	r23, Y+14	; 0x0e
     f9a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f9c:	98 89       	ldd	r25, Y+16	; 0x10
     f9e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     fa2:	9b 01       	movw	r18, r22
     fa4:	ac 01       	movw	r20, r24
     fa6:	c7 01       	movw	r24, r14
     fa8:	b6 01       	movw	r22, r12
     faa:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     fae:	6b 01       	movw	r12, r22
     fb0:	7c 01       	movw	r14, r24
     fb2:	2d 89       	ldd	r18, Y+21	; 0x15
     fb4:	3e 89       	ldd	r19, Y+22	; 0x16
     fb6:	4f 89       	ldd	r20, Y+23	; 0x17
     fb8:	58 8d       	ldd	r21, Y+24	; 0x18
     fba:	c5 01       	movw	r24, r10
     fbc:	b4 01       	movw	r22, r8
     fbe:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c7 01       	movw	r24, r14
     fc8:	b6 01       	movw	r22, r12
     fca:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
     fce:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <sqrt>
     fd2:	6b 01       	movw	r12, r22
     fd4:	7c 01       	movw	r14, r24
	q0 /= norm;
     fd6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     fda:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     fde:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     fe2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     fe6:	a7 01       	movw	r20, r14
     fe8:	96 01       	movw	r18, r12
     fea:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__divsf3>
     fee:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     ff2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     ff6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     ffa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	q1 /= norm;
     ffe:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <q1>
    1002:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <q1+0x1>
    1006:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <q1+0x2>
    100a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <q1+0x3>
    100e:	a7 01       	movw	r20, r14
    1010:	96 01       	movw	r18, r12
    1012:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__divsf3>
    1016:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <q1>
    101a:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <q1+0x1>
    101e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <q1+0x2>
    1022:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <q1+0x3>
	q2 /= norm;
    1026:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <q2>
    102a:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <q2+0x1>
    102e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <q2+0x2>
    1032:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <q2+0x3>
    1036:	a7 01       	movw	r20, r14
    1038:	96 01       	movw	r18, r12
    103a:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__divsf3>
    103e:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <q2>
    1042:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <q2+0x1>
    1046:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <q2+0x2>
    104a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <q2+0x3>
	q3 /= norm;
    104e:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <q3>
    1052:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <q3+0x1>
    1056:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <q3+0x2>
    105a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <q3+0x3>
    105e:	a7 01       	movw	r20, r14
    1060:	96 01       	movw	r18, r12
    1062:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__divsf3>
    1066:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <q3>
    106a:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <q3+0x1>
    106e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <q3+0x2>
    1072:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <q3+0x3>
}
    1076:	a4 96       	adiw	r28, 0x24	; 36
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	ff 90       	pop	r15
    108c:	ef 90       	pop	r14
    108e:	df 90       	pop	r13
    1090:	cf 90       	pop	r12
    1092:	bf 90       	pop	r11
    1094:	af 90       	pop	r10
    1096:	9f 90       	pop	r9
    1098:	8f 90       	pop	r8
    109a:	7f 90       	pop	r7
    109c:	6f 90       	pop	r6
    109e:	5f 90       	pop	r5
    10a0:	4f 90       	pop	r4
    10a2:	08 95       	ret

000010a4 <mpu6050_updateQuaternion>:

/*
 * update quaternion
 */
void mpu6050_updateQuaternion() {
    10a4:	4f 92       	push	r4
    10a6:	5f 92       	push	r5
    10a8:	6f 92       	push	r6
    10aa:	7f 92       	push	r7
    10ac:	8f 92       	push	r8
    10ae:	9f 92       	push	r9
    10b0:	af 92       	push	r10
    10b2:	bf 92       	push	r11
    10b4:	cf 92       	push	r12
    10b6:	df 92       	push	r13
    10b8:	ef 92       	push	r14
    10ba:	ff 92       	push	r15
    10bc:	0f 93       	push	r16
    10be:	1f 93       	push	r17
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	28 97       	sbiw	r28, 0x08	; 8
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
	double gyrs = 0;
	double gzrs = 0;

	//get raw data
	while(1) {
		mpu6050_readBit(MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DATA_RDY_BIT, (uint8_t *)buffer);
    10d4:	41 e6       	ldi	r20, 0x61	; 97
    10d6:	51 e0       	ldi	r21, 0x01	; 1
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	8a e3       	ldi	r24, 0x3A	; 58
    10dc:	0e 94 74 02 	call	0x4e8	; 0x4e8 <mpu6050_readBit>
		if(buffer[0])
    10e0:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <buffer>
    10e4:	81 11       	cpse	r24, r1
    10e6:	05 c0       	rjmp	.+10     	; 0x10f2 <mpu6050_updateQuaternion+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10e8:	8a e1       	ldi	r24, 0x1A	; 26
    10ea:	8a 95       	dec	r24
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <mpu6050_updateQuaternion+0x46>
    10ee:	00 c0       	rjmp	.+0      	; 0x10f0 <mpu6050_updateQuaternion+0x4c>
    10f0:	f1 cf       	rjmp	.-30     	; 0x10d4 <mpu6050_updateQuaternion+0x30>
			break;
		_delay_us(10);
	}

	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    10f2:	41 e6       	ldi	r20, 0x61	; 97
    10f4:	51 e0       	ldi	r21, 0x01	; 1
    10f6:	6e e0       	ldi	r22, 0x0E	; 14
    10f8:	8b e3       	ldi	r24, 0x3B	; 59
    10fa:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <mpu6050_readBytes>
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    10fe:	e1 e6       	ldi	r30, 0x61	; 97
    1100:	f1 e0       	ldi	r31, 0x01	; 1
    1102:	80 81       	ld	r24, Z
    1104:	61 81       	ldd	r22, Z+1	; 0x01
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    1106:	02 81       	ldd	r16, Z+2	; 0x02
    1108:	93 80       	ldd	r9, Z+3	; 0x03
    az = (((int16_t)buffer[4]) << 8) | buffer[5];
    110a:	14 81       	ldd	r17, Z+4	; 0x04
    110c:	85 80       	ldd	r8, Z+5	; 0x05
    gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    110e:	60 84       	ldd	r6, Z+8	; 0x08
    1110:	71 84       	ldd	r7, Z+9	; 0x09
    gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    1112:	52 84       	ldd	r5, Z+10	; 0x0a
    1114:	43 84       	ldd	r4, Z+11	; 0x0b
    gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    1116:	e4 84       	ldd	r14, Z+12	; 0x0c
    1118:	f5 84       	ldd	r15, Z+13	; 0x0d
			break;
		_delay_us(10);
	}

	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	78 2b       	or	r23, r24
    gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    gz = (((int16_t)buffer[12]) << 8) | buffer[13];

	#if MPU6050_CALIBRATEDACCGYRO == 1
	axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
    111e:	07 2e       	mov	r0, r23
    1120:	00 0c       	add	r0, r0
    1122:	88 0b       	sbc	r24, r24
    1124:	99 0b       	sbc	r25, r25
    1126:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__floatsisf>
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e8       	ldi	r20, 0x80	; 128
    1130:	58 e3       	ldi	r21, 0x38	; 56
    1132:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
    1136:	5b 01       	movw	r10, r22
    1138:	6c 01       	movw	r12, r24
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    az = (((int16_t)buffer[4]) << 8) | buffer[5];
    gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    113a:	6f 2d       	mov	r22, r15
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	7e 29       	or	r23, r14
	axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
	ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
	azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
	gxrs = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN*0.01745329; //degree to radians
	gyrs = (double)(gy-MPU6050_GYOFFSET)/MPU6050_GYGAIN*0.01745329; //degree to radians
	gzrs = (double)(gz-MPU6050_GZOFFSET)/MPU6050_GZGAIN*0.01745329; //degree to radians
    1140:	63 5e       	subi	r22, 0xE3	; 227
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	07 2e       	mov	r0, r23
    1146:	00 0c       	add	r0, r0
    1148:	88 0b       	sbc	r24, r24
    114a:	99 0b       	sbc	r25, r25
    114c:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__floatsisf>
    1150:	23 e3       	ldi	r18, 0x33	; 51
    1152:	33 e3       	ldi	r19, 0x33	; 51
    1154:	43 e8       	ldi	r20, 0x83	; 131
    1156:	51 e4       	ldi	r21, 0x41	; 65
    1158:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__divsf3>
    115c:	24 e3       	ldi	r18, 0x34	; 52
    115e:	3a ef       	ldi	r19, 0xFA	; 250
    1160:	4e e8       	ldi	r20, 0x8E	; 142
    1162:	5c e3       	ldi	r21, 0x3C	; 60
    1164:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
    1168:	69 83       	std	Y+1, r22	; 0x01
    116a:	7a 83       	std	Y+2, r23	; 0x02
    116c:	8b 83       	std	Y+3, r24	; 0x03
    116e:	9c 83       	std	Y+4, r25	; 0x04
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    az = (((int16_t)buffer[4]) << 8) | buffer[5];
    gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    1170:	64 2d       	mov	r22, r4
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	75 29       	or	r23, r5
	#if MPU6050_CALIBRATEDACCGYRO == 1
	axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
	ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
	azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
	gxrs = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN*0.01745329; //degree to radians
	gyrs = (double)(gy-MPU6050_GYOFFSET)/MPU6050_GYGAIN*0.01745329; //degree to radians
    1176:	69 50       	subi	r22, 0x09	; 9
    1178:	71 09       	sbc	r23, r1
    117a:	07 2e       	mov	r0, r23
    117c:	00 0c       	add	r0, r0
    117e:	88 0b       	sbc	r24, r24
    1180:	99 0b       	sbc	r25, r25
    1182:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__floatsisf>
    1186:	23 e3       	ldi	r18, 0x33	; 51
    1188:	33 e3       	ldi	r19, 0x33	; 51
    118a:	43 e8       	ldi	r20, 0x83	; 131
    118c:	51 e4       	ldi	r21, 0x41	; 65
    118e:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__divsf3>
    1192:	24 e3       	ldi	r18, 0x34	; 52
    1194:	3a ef       	ldi	r19, 0xFA	; 250
    1196:	4e e8       	ldi	r20, 0x8E	; 142
    1198:	5c e3       	ldi	r21, 0x3C	; 60
    119a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
    119e:	6d 83       	std	Y+5, r22	; 0x05
    11a0:	7e 83       	std	Y+6, r23	; 0x06
    11a2:	8f 83       	std	Y+7, r24	; 0x07
    11a4:	98 87       	std	Y+8, r25	; 0x08

	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    az = (((int16_t)buffer[4]) << 8) | buffer[5];
    gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    11a6:	67 2d       	mov	r22, r7
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	76 29       	or	r23, r6

	#if MPU6050_CALIBRATEDACCGYRO == 1
	axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
	ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
	azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
	gxrs = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN*0.01745329; //degree to radians
    11ac:	66 5d       	subi	r22, 0xD6	; 214
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	07 2e       	mov	r0, r23
    11b2:	00 0c       	add	r0, r0
    11b4:	88 0b       	sbc	r24, r24
    11b6:	99 0b       	sbc	r25, r25
    11b8:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__floatsisf>
    11bc:	23 e3       	ldi	r18, 0x33	; 51
    11be:	33 e3       	ldi	r19, 0x33	; 51
    11c0:	43 e8       	ldi	r20, 0x83	; 131
    11c2:	51 e4       	ldi	r21, 0x41	; 65
    11c4:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__divsf3>
    11c8:	24 e3       	ldi	r18, 0x34	; 52
    11ca:	3a ef       	ldi	r19, 0xFA	; 250
    11cc:	4e e8       	ldi	r20, 0x8E	; 142
    11ce:	5c e3       	ldi	r21, 0x3C	; 60
    11d0:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
    11d4:	2b 01       	movw	r4, r22
    11d6:	3c 01       	movw	r6, r24
	}

	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    az = (((int16_t)buffer[4]) << 8) | buffer[5];
    11d8:	68 2d       	mov	r22, r8
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	71 2b       	or	r23, r17
    gz = (((int16_t)buffer[12]) << 8) | buffer[13];

	#if MPU6050_CALIBRATEDACCGYRO == 1
	axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
	ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
	azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
    11de:	07 2e       	mov	r0, r23
    11e0:	00 0c       	add	r0, r0
    11e2:	88 0b       	sbc	r24, r24
    11e4:	99 0b       	sbc	r25, r25
    11e6:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__floatsisf>
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e8       	ldi	r20, 0x80	; 128
    11f0:	58 e3       	ldi	r21, 0x38	; 56
    11f2:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
	gyrs = (double)(gy)/MPU6050_GGAIN*0.01745329; //degree to radians
	gzrs = (double)(gz)/MPU6050_GGAIN*0.01745329; //degree to radians
	#endif

    //compute data
    mpu6050_mahonyUpdate(gxrs, gyrs, gzrs, axg, ayg, azg);
    11f6:	9f 93       	push	r25
    11f8:	8f 93       	push	r24
    11fa:	7f 93       	push	r23
    11fc:	6f 93       	push	r22
		_delay_us(10);
	}

	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    11fe:	69 2d       	mov	r22, r9
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	70 2b       	or	r23, r16
    gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    gz = (((int16_t)buffer[12]) << 8) | buffer[13];

	#if MPU6050_CALIBRATEDACCGYRO == 1
	axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
	ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
    1204:	07 2e       	mov	r0, r23
    1206:	00 0c       	add	r0, r0
    1208:	88 0b       	sbc	r24, r24
    120a:	99 0b       	sbc	r25, r25
    120c:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__floatsisf>
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e8       	ldi	r20, 0x80	; 128
    1216:	58 e3       	ldi	r21, 0x38	; 56
    1218:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
	gyrs = (double)(gy)/MPU6050_GGAIN*0.01745329; //degree to radians
	gzrs = (double)(gz)/MPU6050_GGAIN*0.01745329; //degree to radians
	#endif

    //compute data
    mpu6050_mahonyUpdate(gxrs, gyrs, gzrs, axg, ayg, azg);
    121c:	9f 93       	push	r25
    121e:	8f 93       	push	r24
    1220:	7f 93       	push	r23
    1222:	6f 93       	push	r22
    1224:	e9 80       	ldd	r14, Y+1	; 0x01
    1226:	fa 80       	ldd	r15, Y+2	; 0x02
    1228:	0b 81       	ldd	r16, Y+3	; 0x03
    122a:	1c 81       	ldd	r17, Y+4	; 0x04
    122c:	2d 81       	ldd	r18, Y+5	; 0x05
    122e:	3e 81       	ldd	r19, Y+6	; 0x06
    1230:	4f 81       	ldd	r20, Y+7	; 0x07
    1232:	58 85       	ldd	r21, Y+8	; 0x08
    1234:	c3 01       	movw	r24, r6
    1236:	b2 01       	movw	r22, r4
    1238:	0e 94 4e 03 	call	0x69c	; 0x69c <mpu6050_mahonyUpdate>
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
}
    1246:	28 96       	adiw	r28, 0x08	; 8
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	df 90       	pop	r13
    1260:	cf 90       	pop	r12
    1262:	bf 90       	pop	r11
    1264:	af 90       	pop	r10
    1266:	9f 90       	pop	r9
    1268:	8f 90       	pop	r8
    126a:	7f 90       	pop	r7
    126c:	6f 90       	pop	r6
    126e:	5f 90       	pop	r5
    1270:	4f 90       	pop	r4
    1272:	08 95       	ret

00001274 <__vector_16>:

/*
 * update timer for attitude
 */
ISR(TIMER0_OVF_vect) {
    1274:	1f 92       	push	r1
    1276:	0f 92       	push	r0
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	0f 92       	push	r0
    127c:	11 24       	eor	r1, r1
    127e:	2f 93       	push	r18
    1280:	3f 93       	push	r19
    1282:	4f 93       	push	r20
    1284:	5f 93       	push	r21
    1286:	6f 93       	push	r22
    1288:	7f 93       	push	r23
    128a:	8f 93       	push	r24
    128c:	9f 93       	push	r25
    128e:	af 93       	push	r26
    1290:	bf 93       	push	r27
    1292:	ef 93       	push	r30
    1294:	ff 93       	push	r31
	mpu6050_updateQuaternion();
    1296:	0e 94 52 08 	call	0x10a4	; 0x10a4 <mpu6050_updateQuaternion>
}
    129a:	ff 91       	pop	r31
    129c:	ef 91       	pop	r30
    129e:	bf 91       	pop	r27
    12a0:	af 91       	pop	r26
    12a2:	9f 91       	pop	r25
    12a4:	8f 91       	pop	r24
    12a6:	7f 91       	pop	r23
    12a8:	6f 91       	pop	r22
    12aa:	5f 91       	pop	r21
    12ac:	4f 91       	pop	r20
    12ae:	3f 91       	pop	r19
    12b0:	2f 91       	pop	r18
    12b2:	0f 90       	pop	r0
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	0f 90       	pop	r0
    12b8:	1f 90       	pop	r1
    12ba:	18 95       	reti

000012bc <mpu6050_getQuaternion>:

/*
 * get quaternion
 */
void mpu6050_getQuaternion(double *qw, double *qx, double *qy, double *qz) {
    12bc:	cf 92       	push	r12
    12be:	df 92       	push	r13
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
	*qw = q0;
    12c4:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
    12c8:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
    12cc:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
    12d0:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
    12d4:	fc 01       	movw	r30, r24
    12d6:	c0 82       	st	Z, r12
    12d8:	d1 82       	std	Z+1, r13	; 0x01
    12da:	e2 82       	std	Z+2, r14	; 0x02
    12dc:	f3 82       	std	Z+3, r15	; 0x03
	*qx = q1;
    12de:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <q1>
    12e2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <q1+0x1>
    12e6:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <q1+0x2>
    12ea:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <q1+0x3>
    12ee:	fb 01       	movw	r30, r22
    12f0:	80 83       	st	Z, r24
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	a2 83       	std	Z+2, r26	; 0x02
    12f6:	b3 83       	std	Z+3, r27	; 0x03
	*qy = q2;
    12f8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <q2>
    12fc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <q2+0x1>
    1300:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <q2+0x2>
    1304:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <q2+0x3>
    1308:	fa 01       	movw	r30, r20
    130a:	80 83       	st	Z, r24
    130c:	91 83       	std	Z+1, r25	; 0x01
    130e:	a2 83       	std	Z+2, r26	; 0x02
    1310:	b3 83       	std	Z+3, r27	; 0x03
	*qz = q3;
    1312:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <q3>
    1316:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <q3+0x1>
    131a:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <q3+0x2>
    131e:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <q3+0x3>
    1322:	f9 01       	movw	r30, r18
    1324:	80 83       	st	Z, r24
    1326:	91 83       	std	Z+1, r25	; 0x01
    1328:	a2 83       	std	Z+2, r26	; 0x02
    132a:	b3 83       	std	Z+3, r27	; 0x03
}
    132c:	ff 90       	pop	r15
    132e:	ef 90       	pop	r14
    1330:	df 90       	pop	r13
    1332:	cf 90       	pop	r12
    1334:	08 95       	ret

00001336 <mpu6050_getRollPitchYaw>:
 * aerospace sequence, to obtain sensor attitude:
 * 1. rotate around sensor Z plane by yaw
 * 2. rotate around sensor Y plane by pitch
 * 3. rotate around sensor X plane by roll
 */
void mpu6050_getRollPitchYaw(double *roll, double *pitch, double *yaw) {
    1336:	2f 92       	push	r2
    1338:	3f 92       	push	r3
    133a:	4f 92       	push	r4
    133c:	5f 92       	push	r5
    133e:	6f 92       	push	r6
    1340:	7f 92       	push	r7
    1342:	8f 92       	push	r8
    1344:	9f 92       	push	r9
    1346:	af 92       	push	r10
    1348:	bf 92       	push	r11
    134a:	cf 92       	push	r12
    134c:	df 92       	push	r13
    134e:	ef 92       	push	r14
    1350:	ff 92       	push	r15
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	62 97       	sbiw	r28, 0x12	; 18
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	1c 01       	movw	r2, r24
    136c:	8b 01       	movw	r16, r22
    136e:	5a 8b       	std	Y+18, r21	; 0x12
    1370:	49 8b       	std	Y+17, r20	; 0x11
	*yaw = atan2(2*q1*q2 - 2*q0*q3, 2*q0*q0 + 2*q1*q1 - 1);
    1372:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1376:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    137a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    137e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    1382:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
    1386:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
    138a:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
    138e:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
    1392:	c0 90 18 01 	lds	r12, 0x0118	; 0x800118 <q1>
    1396:	d0 90 19 01 	lds	r13, 0x0119	; 0x800119 <q1+0x1>
    139a:	e0 90 1a 01 	lds	r14, 0x011A	; 0x80011a <q1+0x2>
    139e:	f0 90 1b 01 	lds	r15, 0x011B	; 0x80011b <q1+0x3>
    13a2:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <q1>
    13a6:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <q1+0x1>
    13aa:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <q1+0x2>
    13ae:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <q1+0x3>
    13b2:	2d 83       	std	Y+5, r18	; 0x05
    13b4:	3e 83       	std	Y+6, r19	; 0x06
    13b6:	4f 83       	std	Y+7, r20	; 0x07
    13b8:	58 87       	std	Y+8, r21	; 0x08
    13ba:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <q1>
    13be:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <q1+0x1>
    13c2:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <q1+0x2>
    13c6:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <q1+0x3>
    13ca:	29 83       	std	Y+1, r18	; 0x01
    13cc:	3a 83       	std	Y+2, r19	; 0x02
    13ce:	4b 83       	std	Y+3, r20	; 0x03
    13d0:	5c 83       	std	Y+4, r21	; 0x04
    13d2:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <q2>
    13d6:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <q2+0x1>
    13da:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <q2+0x2>
    13de:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <q2+0x3>
    13e2:	29 87       	std	Y+9, r18	; 0x09
    13e4:	3a 87       	std	Y+10, r19	; 0x0a
    13e6:	4b 87       	std	Y+11, r20	; 0x0b
    13e8:	5c 87       	std	Y+12, r21	; 0x0c
    13ea:	40 90 00 01 	lds	r4, 0x0100	; 0x800100 <__data_start>
    13ee:	50 90 01 01 	lds	r5, 0x0101	; 0x800101 <__data_start+0x1>
    13f2:	60 90 02 01 	lds	r6, 0x0102	; 0x800102 <__data_start+0x2>
    13f6:	70 90 03 01 	lds	r7, 0x0103	; 0x800103 <__data_start+0x3>
    13fa:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <q3>
    13fe:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <q3+0x1>
    1402:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <q3+0x2>
    1406:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <q3+0x3>
    140a:	2d 87       	std	Y+13, r18	; 0x0d
    140c:	3e 87       	std	Y+14, r19	; 0x0e
    140e:	4f 87       	std	Y+15, r20	; 0x0f
    1410:	58 8b       	std	Y+16, r21	; 0x10
    1412:	9b 01       	movw	r18, r22
    1414:	ac 01       	movw	r20, r24
    1416:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
    141a:	a5 01       	movw	r20, r10
    141c:	94 01       	movw	r18, r8
    141e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
    1422:	4b 01       	movw	r8, r22
    1424:	5c 01       	movw	r10, r24
    1426:	a7 01       	movw	r20, r14
    1428:	96 01       	movw	r18, r12
    142a:	c7 01       	movw	r24, r14
    142c:	b6 01       	movw	r22, r12
    142e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
    1432:	2d 81       	ldd	r18, Y+5	; 0x05
    1434:	3e 81       	ldd	r19, Y+6	; 0x06
    1436:	4f 81       	ldd	r20, Y+7	; 0x07
    1438:	58 85       	ldd	r21, Y+8	; 0x08
    143a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
    143e:	9b 01       	movw	r18, r22
    1440:	ac 01       	movw	r20, r24
    1442:	c5 01       	movw	r24, r10
    1444:	b4 01       	movw	r22, r8
    1446:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e8       	ldi	r20, 0x80	; 128
    1450:	5f e3       	ldi	r21, 0x3F	; 63
    1452:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__subsf3>
    1456:	6b 01       	movw	r12, r22
    1458:	7c 01       	movw	r14, r24
    145a:	29 81       	ldd	r18, Y+1	; 0x01
    145c:	3a 81       	ldd	r19, Y+2	; 0x02
    145e:	4b 81       	ldd	r20, Y+3	; 0x03
    1460:	5c 81       	ldd	r21, Y+4	; 0x04
    1462:	ca 01       	movw	r24, r20
    1464:	b9 01       	movw	r22, r18
    1466:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
    146a:	29 85       	ldd	r18, Y+9	; 0x09
    146c:	3a 85       	ldd	r19, Y+10	; 0x0a
    146e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1470:	5c 85       	ldd	r21, Y+12	; 0x0c
    1472:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
    1476:	4b 01       	movw	r8, r22
    1478:	5c 01       	movw	r10, r24
    147a:	a3 01       	movw	r20, r6
    147c:	92 01       	movw	r18, r4
    147e:	c3 01       	movw	r24, r6
    1480:	b2 01       	movw	r22, r4
    1482:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
    1486:	2d 85       	ldd	r18, Y+13	; 0x0d
    1488:	3e 85       	ldd	r19, Y+14	; 0x0e
    148a:	4f 85       	ldd	r20, Y+15	; 0x0f
    148c:	58 89       	ldd	r21, Y+16	; 0x10
    148e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
    1492:	9b 01       	movw	r18, r22
    1494:	ac 01       	movw	r20, r24
    1496:	c5 01       	movw	r24, r10
    1498:	b4 01       	movw	r22, r8
    149a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__subsf3>
    149e:	a7 01       	movw	r20, r14
    14a0:	96 01       	movw	r18, r12
    14a2:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <atan2>
    14a6:	e9 89       	ldd	r30, Y+17	; 0x11
    14a8:	fa 89       	ldd	r31, Y+18	; 0x12
    14aa:	60 83       	st	Z, r22
    14ac:	71 83       	std	Z+1, r23	; 0x01
    14ae:	82 83       	std	Z+2, r24	; 0x02
    14b0:	93 83       	std	Z+3, r25	; 0x03
	*pitch = -asin(2*q1*q3 + 2*q0*q2);
    14b2:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <q1>
    14b6:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <q1+0x1>
    14ba:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <q1+0x2>
    14be:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <q1+0x3>
    14c2:	80 90 10 01 	lds	r8, 0x0110	; 0x800110 <q3>
    14c6:	90 90 11 01 	lds	r9, 0x0111	; 0x800111 <q3+0x1>
    14ca:	a0 90 12 01 	lds	r10, 0x0112	; 0x800112 <q3+0x2>
    14ce:	b0 90 13 01 	lds	r11, 0x0113	; 0x800113 <q3+0x3>
    14d2:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
    14d6:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
    14da:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
    14de:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
    14e2:	40 90 14 01 	lds	r4, 0x0114	; 0x800114 <q2>
    14e6:	50 90 15 01 	lds	r5, 0x0115	; 0x800115 <q2+0x1>
    14ea:	60 90 16 01 	lds	r6, 0x0116	; 0x800116 <q2+0x2>
    14ee:	70 90 17 01 	lds	r7, 0x0117	; 0x800117 <q2+0x3>
    14f2:	9b 01       	movw	r18, r22
    14f4:	ac 01       	movw	r20, r24
    14f6:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
    14fa:	a5 01       	movw	r20, r10
    14fc:	94 01       	movw	r18, r8
    14fe:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
    1502:	4b 01       	movw	r8, r22
    1504:	5c 01       	movw	r10, r24
    1506:	a7 01       	movw	r20, r14
    1508:	96 01       	movw	r18, r12
    150a:	c7 01       	movw	r24, r14
    150c:	b6 01       	movw	r22, r12
    150e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
    1512:	a3 01       	movw	r20, r6
    1514:	92 01       	movw	r18, r4
    1516:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
    151a:	9b 01       	movw	r18, r22
    151c:	ac 01       	movw	r20, r24
    151e:	c5 01       	movw	r24, r10
    1520:	b4 01       	movw	r22, r8
    1522:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
    1526:	0e 94 45 0c 	call	0x188a	; 0x188a <asin>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	b0 58       	subi	r27, 0x80	; 128
    1530:	f8 01       	movw	r30, r16
    1532:	80 83       	st	Z, r24
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	a2 83       	std	Z+2, r26	; 0x02
    1538:	b3 83       	std	Z+3, r27	; 0x03
	*roll = atan2(2*q2*q3 - 2*q0*q1, 2*q0*q0 + 2*q3*q3 - 1);
    153a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    153e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1542:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    1546:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    154a:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
    154e:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
    1552:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
    1556:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
    155a:	c0 90 10 01 	lds	r12, 0x0110	; 0x800110 <q3>
    155e:	d0 90 11 01 	lds	r13, 0x0111	; 0x800111 <q3+0x1>
    1562:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <q3+0x2>
    1566:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <q3+0x3>
    156a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <q3>
    156e:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <q3+0x1>
    1572:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <q3+0x2>
    1576:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <q3+0x3>
    157a:	2d 83       	std	Y+5, r18	; 0x05
    157c:	3e 83       	std	Y+6, r19	; 0x06
    157e:	4f 83       	std	Y+7, r20	; 0x07
    1580:	58 87       	std	Y+8, r21	; 0x08
    1582:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <q2>
    1586:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <q2+0x1>
    158a:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <q2+0x2>
    158e:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <q2+0x3>
    1592:	29 83       	std	Y+1, r18	; 0x01
    1594:	3a 83       	std	Y+2, r19	; 0x02
    1596:	4b 83       	std	Y+3, r20	; 0x03
    1598:	5c 83       	std	Y+4, r21	; 0x04
    159a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <q3>
    159e:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <q3+0x1>
    15a2:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <q3+0x2>
    15a6:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <q3+0x3>
    15aa:	29 87       	std	Y+9, r18	; 0x09
    15ac:	3a 87       	std	Y+10, r19	; 0x0a
    15ae:	4b 87       	std	Y+11, r20	; 0x0b
    15b0:	5c 87       	std	Y+12, r21	; 0x0c
    15b2:	40 90 00 01 	lds	r4, 0x0100	; 0x800100 <__data_start>
    15b6:	50 90 01 01 	lds	r5, 0x0101	; 0x800101 <__data_start+0x1>
    15ba:	60 90 02 01 	lds	r6, 0x0102	; 0x800102 <__data_start+0x2>
    15be:	70 90 03 01 	lds	r7, 0x0103	; 0x800103 <__data_start+0x3>
    15c2:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <q1>
    15c6:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <q1+0x1>
    15ca:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <q1+0x2>
    15ce:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <q1+0x3>
    15d2:	2d 87       	std	Y+13, r18	; 0x0d
    15d4:	3e 87       	std	Y+14, r19	; 0x0e
    15d6:	4f 87       	std	Y+15, r20	; 0x0f
    15d8:	58 8b       	std	Y+16, r21	; 0x10
    15da:	9b 01       	movw	r18, r22
    15dc:	ac 01       	movw	r20, r24
    15de:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
    15e2:	a5 01       	movw	r20, r10
    15e4:	94 01       	movw	r18, r8
    15e6:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
    15ea:	4b 01       	movw	r8, r22
    15ec:	5c 01       	movw	r10, r24
    15ee:	a7 01       	movw	r20, r14
    15f0:	96 01       	movw	r18, r12
    15f2:	c7 01       	movw	r24, r14
    15f4:	b6 01       	movw	r22, r12
    15f6:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
    15fa:	2d 81       	ldd	r18, Y+5	; 0x05
    15fc:	3e 81       	ldd	r19, Y+6	; 0x06
    15fe:	4f 81       	ldd	r20, Y+7	; 0x07
    1600:	58 85       	ldd	r21, Y+8	; 0x08
    1602:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
    1606:	9b 01       	movw	r18, r22
    1608:	ac 01       	movw	r20, r24
    160a:	c5 01       	movw	r24, r10
    160c:	b4 01       	movw	r22, r8
    160e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e8       	ldi	r20, 0x80	; 128
    1618:	5f e3       	ldi	r21, 0x3F	; 63
    161a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__subsf3>
    161e:	6b 01       	movw	r12, r22
    1620:	7c 01       	movw	r14, r24
    1622:	29 81       	ldd	r18, Y+1	; 0x01
    1624:	3a 81       	ldd	r19, Y+2	; 0x02
    1626:	4b 81       	ldd	r20, Y+3	; 0x03
    1628:	5c 81       	ldd	r21, Y+4	; 0x04
    162a:	ca 01       	movw	r24, r20
    162c:	b9 01       	movw	r22, r18
    162e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
    1632:	29 85       	ldd	r18, Y+9	; 0x09
    1634:	3a 85       	ldd	r19, Y+10	; 0x0a
    1636:	4b 85       	ldd	r20, Y+11	; 0x0b
    1638:	5c 85       	ldd	r21, Y+12	; 0x0c
    163a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
    163e:	4b 01       	movw	r8, r22
    1640:	5c 01       	movw	r10, r24
    1642:	a3 01       	movw	r20, r6
    1644:	92 01       	movw	r18, r4
    1646:	c3 01       	movw	r24, r6
    1648:	b2 01       	movw	r22, r4
    164a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__addsf3>
    164e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1650:	3e 85       	ldd	r19, Y+14	; 0x0e
    1652:	4f 85       	ldd	r20, Y+15	; 0x0f
    1654:	58 89       	ldd	r21, Y+16	; 0x10
    1656:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
    165a:	9b 01       	movw	r18, r22
    165c:	ac 01       	movw	r20, r24
    165e:	c5 01       	movw	r24, r10
    1660:	b4 01       	movw	r22, r8
    1662:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__subsf3>
    1666:	a7 01       	movw	r20, r14
    1668:	96 01       	movw	r18, r12
    166a:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <atan2>
    166e:	f1 01       	movw	r30, r2
    1670:	60 83       	st	Z, r22
    1672:	71 83       	std	Z+1, r23	; 0x01
    1674:	82 83       	std	Z+2, r24	; 0x02
    1676:	93 83       	std	Z+3, r25	; 0x03
}
    1678:	62 96       	adiw	r28, 0x12	; 18
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	ef 90       	pop	r14
    1690:	df 90       	pop	r13
    1692:	cf 90       	pop	r12
    1694:	bf 90       	pop	r11
    1696:	af 90       	pop	r10
    1698:	9f 90       	pop	r9
    169a:	8f 90       	pop	r8
    169c:	7f 90       	pop	r7
    169e:	6f 90       	pop	r6
    16a0:	5f 90       	pop	r5
    16a2:	4f 90       	pop	r4
    16a4:	3f 90       	pop	r3
    16a6:	2f 90       	pop	r2
    16a8:	08 95       	ret

000016aa <__vector_18>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
    16aa:	1f 92       	push	r1
    16ac:	0f 92       	push	r0
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	0f 92       	push	r0
    16b2:	11 24       	eor	r1, r1
    16b4:	2f 93       	push	r18
    16b6:	8f 93       	push	r24
    16b8:	9f 93       	push	r25
    16ba:	ef 93       	push	r30
    16bc:	ff 93       	push	r31
    16be:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    16c2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    16c6:	88 71       	andi	r24, 0x18	; 24
    16c8:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UART_RxHead>
    16cc:	ef 5f       	subi	r30, 0xFF	; 255
    16ce:	ef 71       	andi	r30, 0x1F	; 31
    16d0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <UART_RxTail>
    16d4:	e9 17       	cp	r30, r25
    16d6:	39 f0       	breq	.+14     	; 0x16e6 <__vector_18+0x3c>
    16d8:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <UART_RxHead>
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	ef 5d       	subi	r30, 0xDF	; 223
    16e0:	fe 4f       	sbci	r31, 0xFE	; 254
    16e2:	20 83       	st	Z, r18
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <__vector_18+0x3e>
    16e6:	82 e0       	ldi	r24, 0x02	; 2
    16e8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <UART_LastRxError>
    16ec:	ff 91       	pop	r31
    16ee:	ef 91       	pop	r30
    16f0:	9f 91       	pop	r25
    16f2:	8f 91       	pop	r24
    16f4:	2f 91       	pop	r18
    16f6:	0f 90       	pop	r0
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	0f 90       	pop	r0
    16fc:	1f 90       	pop	r1
    16fe:	18 95       	reti

00001700 <__vector_19>:
    1700:	1f 92       	push	r1
    1702:	0f 92       	push	r0
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	0f 92       	push	r0
    1708:	11 24       	eor	r1, r1
    170a:	8f 93       	push	r24
    170c:	9f 93       	push	r25
    170e:	ef 93       	push	r30
    1710:	ff 93       	push	r31
    1712:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <UART_TxHead>
    1716:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <UART_TxTail>
    171a:	98 17       	cp	r25, r24
    171c:	69 f0       	breq	.+26     	; 0x1738 <__vector_19+0x38>
    171e:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <UART_TxTail>
    1722:	ef 5f       	subi	r30, 0xFF	; 255
    1724:	ef 71       	andi	r30, 0x1F	; 31
    1726:	e0 93 1f 01 	sts	0x011F, r30	; 0x80011f <UART_TxTail>
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	ef 5b       	subi	r30, 0xBF	; 191
    172e:	fe 4f       	sbci	r31, 0xFE	; 254
    1730:	80 81       	ld	r24, Z
    1732:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <__vector_19+0x42>
    1738:	e1 ec       	ldi	r30, 0xC1	; 193
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	8f 7d       	andi	r24, 0xDF	; 223
    1740:	80 83       	st	Z, r24
    1742:	ff 91       	pop	r31
    1744:	ef 91       	pop	r30
    1746:	9f 91       	pop	r25
    1748:	8f 91       	pop	r24
    174a:	0f 90       	pop	r0
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	0f 90       	pop	r0
    1750:	1f 90       	pop	r1
    1752:	18 95       	reti

00001754 <uart_init>:
    1754:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <UART_TxHead>
    1758:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <UART_TxTail>
    175c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <UART_RxHead>
    1760:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <UART_RxTail>
    1764:	99 23       	and	r25, r25
    1766:	24 f4       	brge	.+8      	; 0x1770 <uart_init+0x1c>
    1768:	22 e0       	ldi	r18, 0x02	; 2
    176a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    176e:	9f 77       	andi	r25, 0x7F	; 127
    1770:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1774:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1778:	88 e9       	ldi	r24, 0x98	; 152
    177a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    177e:	86 e0       	ldi	r24, 0x06	; 6
    1780:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1784:	08 95       	ret

00001786 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1786:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <UART_TxHead>
    178a:	2f 5f       	subi	r18, 0xFF	; 255
    178c:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    178e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <UART_TxTail>
    1792:	29 17       	cp	r18, r25
    1794:	e1 f3       	breq	.-8      	; 0x178e <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    1796:	e2 2f       	mov	r30, r18
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	ef 5b       	subi	r30, 0xBF	; 191
    179c:	fe 4f       	sbci	r31, 0xFE	; 254
    179e:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    17a0:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    17a4:	e1 ec       	ldi	r30, 0xC1	; 193
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	80 62       	ori	r24, 0x20	; 32
    17ac:	80 83       	st	Z, r24
    17ae:	08 95       	ret

000017b0 <__subsf3>:
    17b0:	50 58       	subi	r21, 0x80	; 128

000017b2 <__addsf3>:
    17b2:	bb 27       	eor	r27, r27
    17b4:	aa 27       	eor	r26, r26
    17b6:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__addsf3x>
    17ba:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_round>
    17be:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fp_pscA>
    17c2:	38 f0       	brcs	.+14     	; 0x17d2 <__addsf3+0x20>
    17c4:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__fp_pscB>
    17c8:	20 f0       	brcs	.+8      	; 0x17d2 <__addsf3+0x20>
    17ca:	39 f4       	brne	.+14     	; 0x17da <__addsf3+0x28>
    17cc:	9f 3f       	cpi	r25, 0xFF	; 255
    17ce:	19 f4       	brne	.+6      	; 0x17d6 <__addsf3+0x24>
    17d0:	26 f4       	brtc	.+8      	; 0x17da <__addsf3+0x28>
    17d2:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__fp_nan>
    17d6:	0e f4       	brtc	.+2      	; 0x17da <__addsf3+0x28>
    17d8:	e0 95       	com	r30
    17da:	e7 fb       	bst	r30, 7
    17dc:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__fp_inf>

000017e0 <__addsf3x>:
    17e0:	e9 2f       	mov	r30, r25
    17e2:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__fp_split3>
    17e6:	58 f3       	brcs	.-42     	; 0x17be <__addsf3+0xc>
    17e8:	ba 17       	cp	r27, r26
    17ea:	62 07       	cpc	r22, r18
    17ec:	73 07       	cpc	r23, r19
    17ee:	84 07       	cpc	r24, r20
    17f0:	95 07       	cpc	r25, r21
    17f2:	20 f0       	brcs	.+8      	; 0x17fc <__addsf3x+0x1c>
    17f4:	79 f4       	brne	.+30     	; 0x1814 <__addsf3x+0x34>
    17f6:	a6 f5       	brtc	.+104    	; 0x1860 <__addsf3x+0x80>
    17f8:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__fp_zero>
    17fc:	0e f4       	brtc	.+2      	; 0x1800 <__addsf3x+0x20>
    17fe:	e0 95       	com	r30
    1800:	0b 2e       	mov	r0, r27
    1802:	ba 2f       	mov	r27, r26
    1804:	a0 2d       	mov	r26, r0
    1806:	0b 01       	movw	r0, r22
    1808:	b9 01       	movw	r22, r18
    180a:	90 01       	movw	r18, r0
    180c:	0c 01       	movw	r0, r24
    180e:	ca 01       	movw	r24, r20
    1810:	a0 01       	movw	r20, r0
    1812:	11 24       	eor	r1, r1
    1814:	ff 27       	eor	r31, r31
    1816:	59 1b       	sub	r21, r25
    1818:	99 f0       	breq	.+38     	; 0x1840 <__addsf3x+0x60>
    181a:	59 3f       	cpi	r21, 0xF9	; 249
    181c:	50 f4       	brcc	.+20     	; 0x1832 <__addsf3x+0x52>
    181e:	50 3e       	cpi	r21, 0xE0	; 224
    1820:	68 f1       	brcs	.+90     	; 0x187c <__addsf3x+0x9c>
    1822:	1a 16       	cp	r1, r26
    1824:	f0 40       	sbci	r31, 0x00	; 0
    1826:	a2 2f       	mov	r26, r18
    1828:	23 2f       	mov	r18, r19
    182a:	34 2f       	mov	r19, r20
    182c:	44 27       	eor	r20, r20
    182e:	58 5f       	subi	r21, 0xF8	; 248
    1830:	f3 cf       	rjmp	.-26     	; 0x1818 <__addsf3x+0x38>
    1832:	46 95       	lsr	r20
    1834:	37 95       	ror	r19
    1836:	27 95       	ror	r18
    1838:	a7 95       	ror	r26
    183a:	f0 40       	sbci	r31, 0x00	; 0
    183c:	53 95       	inc	r21
    183e:	c9 f7       	brne	.-14     	; 0x1832 <__addsf3x+0x52>
    1840:	7e f4       	brtc	.+30     	; 0x1860 <__addsf3x+0x80>
    1842:	1f 16       	cp	r1, r31
    1844:	ba 0b       	sbc	r27, r26
    1846:	62 0b       	sbc	r22, r18
    1848:	73 0b       	sbc	r23, r19
    184a:	84 0b       	sbc	r24, r20
    184c:	ba f0       	brmi	.+46     	; 0x187c <__addsf3x+0x9c>
    184e:	91 50       	subi	r25, 0x01	; 1
    1850:	a1 f0       	breq	.+40     	; 0x187a <__addsf3x+0x9a>
    1852:	ff 0f       	add	r31, r31
    1854:	bb 1f       	adc	r27, r27
    1856:	66 1f       	adc	r22, r22
    1858:	77 1f       	adc	r23, r23
    185a:	88 1f       	adc	r24, r24
    185c:	c2 f7       	brpl	.-16     	; 0x184e <__addsf3x+0x6e>
    185e:	0e c0       	rjmp	.+28     	; 0x187c <__addsf3x+0x9c>
    1860:	ba 0f       	add	r27, r26
    1862:	62 1f       	adc	r22, r18
    1864:	73 1f       	adc	r23, r19
    1866:	84 1f       	adc	r24, r20
    1868:	48 f4       	brcc	.+18     	; 0x187c <__addsf3x+0x9c>
    186a:	87 95       	ror	r24
    186c:	77 95       	ror	r23
    186e:	67 95       	ror	r22
    1870:	b7 95       	ror	r27
    1872:	f7 95       	ror	r31
    1874:	9e 3f       	cpi	r25, 0xFE	; 254
    1876:	08 f0       	brcs	.+2      	; 0x187a <__addsf3x+0x9a>
    1878:	b0 cf       	rjmp	.-160    	; 0x17da <__addsf3+0x28>
    187a:	93 95       	inc	r25
    187c:	88 0f       	add	r24, r24
    187e:	08 f0       	brcs	.+2      	; 0x1882 <__addsf3x+0xa2>
    1880:	99 27       	eor	r25, r25
    1882:	ee 0f       	add	r30, r30
    1884:	97 95       	ror	r25
    1886:	87 95       	ror	r24
    1888:	08 95       	ret

0000188a <asin>:
    188a:	9f 93       	push	r25
    188c:	9f 77       	andi	r25, 0x7F	; 127
    188e:	ee e3       	ldi	r30, 0x3E	; 62
    1890:	89 37       	cpi	r24, 0x79	; 121
    1892:	9e 07       	cpc	r25, r30
    1894:	28 f4       	brcc	.+10     	; 0x18a0 <asin+0x16>
    1896:	e8 e6       	ldi	r30, 0x68	; 104
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <__fp_powsodd>
    189e:	0c c0       	rjmp	.+24     	; 0x18b8 <asin+0x2e>
    18a0:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__fp_arccos>
    18a4:	90 58       	subi	r25, 0x80	; 128
    18a6:	a2 ea       	ldi	r26, 0xA2	; 162
    18a8:	2a ed       	ldi	r18, 0xDA	; 218
    18aa:	3f e0       	ldi	r19, 0x0F	; 15
    18ac:	49 ec       	ldi	r20, 0xC9	; 201
    18ae:	5f e3       	ldi	r21, 0x3F	; 63
    18b0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__addsf3x>
    18b4:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fp_round>
    18b8:	0f 90       	pop	r0
    18ba:	07 fc       	sbrc	r0, 7
    18bc:	90 58       	subi	r25, 0x80	; 128
    18be:	08 95       	ret
    18c0:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fp_pscA>
    18c4:	60 f0       	brcs	.+24     	; 0x18de <asin+0x54>
    18c6:	80 e8       	ldi	r24, 0x80	; 128
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <asin+0x44>
    18cc:	9e ef       	ldi	r25, 0xFE	; 254
    18ce:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__fp_pscB>
    18d2:	28 f0       	brcs	.+10     	; 0x18de <asin+0x54>
    18d4:	40 e8       	ldi	r20, 0x80	; 128
    18d6:	51 e0       	ldi	r21, 0x01	; 1
    18d8:	71 f4       	brne	.+28     	; 0x18f6 <atan2+0x10>
    18da:	5e ef       	ldi	r21, 0xFE	; 254
    18dc:	0c c0       	rjmp	.+24     	; 0x18f6 <atan2+0x10>
    18de:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__fp_nan>
    18e2:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__fp_zero>

000018e6 <atan2>:
    18e6:	e9 2f       	mov	r30, r25
    18e8:	e0 78       	andi	r30, 0x80	; 128
    18ea:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__fp_split3>
    18ee:	40 f3       	brcs	.-48     	; 0x18c0 <asin+0x36>
    18f0:	09 2e       	mov	r0, r25
    18f2:	05 2a       	or	r0, r21
    18f4:	b1 f3       	breq	.-20     	; 0x18e2 <asin+0x58>
    18f6:	26 17       	cp	r18, r22
    18f8:	37 07       	cpc	r19, r23
    18fa:	48 07       	cpc	r20, r24
    18fc:	59 07       	cpc	r21, r25
    18fe:	38 f0       	brcs	.+14     	; 0x190e <atan2+0x28>
    1900:	0e 2e       	mov	r0, r30
    1902:	07 f8       	bld	r0, 7
    1904:	e0 25       	eor	r30, r0
    1906:	69 f0       	breq	.+26     	; 0x1922 <atan2+0x3c>
    1908:	e0 25       	eor	r30, r0
    190a:	e0 64       	ori	r30, 0x40	; 64
    190c:	0a c0       	rjmp	.+20     	; 0x1922 <atan2+0x3c>
    190e:	ef 63       	ori	r30, 0x3F	; 63
    1910:	07 f8       	bld	r0, 7
    1912:	00 94       	com	r0
    1914:	07 fa       	bst	r0, 7
    1916:	db 01       	movw	r26, r22
    1918:	b9 01       	movw	r22, r18
    191a:	9d 01       	movw	r18, r26
    191c:	dc 01       	movw	r26, r24
    191e:	ca 01       	movw	r24, r20
    1920:	ad 01       	movw	r20, r26
    1922:	ef 93       	push	r30
    1924:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__divsf3_pse>
    1928:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fp_round>
    192c:	0e 94 a3 0c 	call	0x1946	; 0x1946 <atan>
    1930:	5f 91       	pop	r21
    1932:	55 23       	and	r21, r21
    1934:	39 f0       	breq	.+14     	; 0x1944 <atan2+0x5e>
    1936:	2b ed       	ldi	r18, 0xDB	; 219
    1938:	3f e0       	ldi	r19, 0x0F	; 15
    193a:	49 e4       	ldi	r20, 0x49	; 73
    193c:	50 fd       	sbrc	r21, 0
    193e:	49 ec       	ldi	r20, 0xC9	; 201
    1940:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__addsf3>
    1944:	08 95       	ret

00001946 <atan>:
    1946:	df 93       	push	r29
    1948:	dd 27       	eor	r29, r29
    194a:	b9 2f       	mov	r27, r25
    194c:	bf 77       	andi	r27, 0x7F	; 127
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	16 16       	cp	r1, r22
    1954:	17 06       	cpc	r1, r23
    1956:	48 07       	cpc	r20, r24
    1958:	5b 07       	cpc	r21, r27
    195a:	18 f4       	brcc	.+6      	; 0x1962 <atan+0x1c>
    195c:	d9 2f       	mov	r29, r25
    195e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <inverse>
    1962:	9f 93       	push	r25
    1964:	8f 93       	push	r24
    1966:	7f 93       	push	r23
    1968:	6f 93       	push	r22
    196a:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <square>
    196e:	ec e7       	ldi	r30, 0x7C	; 124
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fp_powser>
    1976:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fp_round>
    197a:	2f 91       	pop	r18
    197c:	3f 91       	pop	r19
    197e:	4f 91       	pop	r20
    1980:	5f 91       	pop	r21
    1982:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__mulsf3x>
    1986:	dd 23       	and	r29, r29
    1988:	51 f0       	breq	.+20     	; 0x199e <atan+0x58>
    198a:	90 58       	subi	r25, 0x80	; 128
    198c:	a2 ea       	ldi	r26, 0xA2	; 162
    198e:	2a ed       	ldi	r18, 0xDA	; 218
    1990:	3f e0       	ldi	r19, 0x0F	; 15
    1992:	49 ec       	ldi	r20, 0xC9	; 201
    1994:	5f e3       	ldi	r21, 0x3F	; 63
    1996:	d0 78       	andi	r29, 0x80	; 128
    1998:	5d 27       	eor	r21, r29
    199a:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__addsf3x>
    199e:	df 91       	pop	r29
    19a0:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_round>

000019a4 <__cmpsf2>:
    19a4:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__fp_cmp>
    19a8:	08 f4       	brcc	.+2      	; 0x19ac <__cmpsf2+0x8>
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	08 95       	ret

000019ae <__divsf3>:
    19ae:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <__divsf3x>
    19b2:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_round>
    19b6:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__fp_pscB>
    19ba:	58 f0       	brcs	.+22     	; 0x19d2 <__divsf3+0x24>
    19bc:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fp_pscA>
    19c0:	40 f0       	brcs	.+16     	; 0x19d2 <__divsf3+0x24>
    19c2:	29 f4       	brne	.+10     	; 0x19ce <__divsf3+0x20>
    19c4:	5f 3f       	cpi	r21, 0xFF	; 255
    19c6:	29 f0       	breq	.+10     	; 0x19d2 <__divsf3+0x24>
    19c8:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__fp_inf>
    19cc:	51 11       	cpse	r21, r1
    19ce:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__fp_szero>
    19d2:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__fp_nan>

000019d6 <__divsf3x>:
    19d6:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__fp_split3>
    19da:	68 f3       	brcs	.-38     	; 0x19b6 <__divsf3+0x8>

000019dc <__divsf3_pse>:
    19dc:	99 23       	and	r25, r25
    19de:	b1 f3       	breq	.-20     	; 0x19cc <__divsf3+0x1e>
    19e0:	55 23       	and	r21, r21
    19e2:	91 f3       	breq	.-28     	; 0x19c8 <__divsf3+0x1a>
    19e4:	95 1b       	sub	r25, r21
    19e6:	55 0b       	sbc	r21, r21
    19e8:	bb 27       	eor	r27, r27
    19ea:	aa 27       	eor	r26, r26
    19ec:	62 17       	cp	r22, r18
    19ee:	73 07       	cpc	r23, r19
    19f0:	84 07       	cpc	r24, r20
    19f2:	38 f0       	brcs	.+14     	; 0x1a02 <__divsf3_pse+0x26>
    19f4:	9f 5f       	subi	r25, 0xFF	; 255
    19f6:	5f 4f       	sbci	r21, 0xFF	; 255
    19f8:	22 0f       	add	r18, r18
    19fa:	33 1f       	adc	r19, r19
    19fc:	44 1f       	adc	r20, r20
    19fe:	aa 1f       	adc	r26, r26
    1a00:	a9 f3       	breq	.-22     	; 0x19ec <__divsf3_pse+0x10>
    1a02:	35 d0       	rcall	.+106    	; 0x1a6e <__divsf3_pse+0x92>
    1a04:	0e 2e       	mov	r0, r30
    1a06:	3a f0       	brmi	.+14     	; 0x1a16 <__divsf3_pse+0x3a>
    1a08:	e0 e8       	ldi	r30, 0x80	; 128
    1a0a:	32 d0       	rcall	.+100    	; 0x1a70 <__divsf3_pse+0x94>
    1a0c:	91 50       	subi	r25, 0x01	; 1
    1a0e:	50 40       	sbci	r21, 0x00	; 0
    1a10:	e6 95       	lsr	r30
    1a12:	00 1c       	adc	r0, r0
    1a14:	ca f7       	brpl	.-14     	; 0x1a08 <__divsf3_pse+0x2c>
    1a16:	2b d0       	rcall	.+86     	; 0x1a6e <__divsf3_pse+0x92>
    1a18:	fe 2f       	mov	r31, r30
    1a1a:	29 d0       	rcall	.+82     	; 0x1a6e <__divsf3_pse+0x92>
    1a1c:	66 0f       	add	r22, r22
    1a1e:	77 1f       	adc	r23, r23
    1a20:	88 1f       	adc	r24, r24
    1a22:	bb 1f       	adc	r27, r27
    1a24:	26 17       	cp	r18, r22
    1a26:	37 07       	cpc	r19, r23
    1a28:	48 07       	cpc	r20, r24
    1a2a:	ab 07       	cpc	r26, r27
    1a2c:	b0 e8       	ldi	r27, 0x80	; 128
    1a2e:	09 f0       	breq	.+2      	; 0x1a32 <__divsf3_pse+0x56>
    1a30:	bb 0b       	sbc	r27, r27
    1a32:	80 2d       	mov	r24, r0
    1a34:	bf 01       	movw	r22, r30
    1a36:	ff 27       	eor	r31, r31
    1a38:	93 58       	subi	r25, 0x83	; 131
    1a3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3c:	3a f0       	brmi	.+14     	; 0x1a4c <__divsf3_pse+0x70>
    1a3e:	9e 3f       	cpi	r25, 0xFE	; 254
    1a40:	51 05       	cpc	r21, r1
    1a42:	78 f0       	brcs	.+30     	; 0x1a62 <__divsf3_pse+0x86>
    1a44:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__fp_inf>
    1a48:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__fp_szero>
    1a4c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a4e:	e4 f3       	brlt	.-8      	; 0x1a48 <__divsf3_pse+0x6c>
    1a50:	98 3e       	cpi	r25, 0xE8	; 232
    1a52:	d4 f3       	brlt	.-12     	; 0x1a48 <__divsf3_pse+0x6c>
    1a54:	86 95       	lsr	r24
    1a56:	77 95       	ror	r23
    1a58:	67 95       	ror	r22
    1a5a:	b7 95       	ror	r27
    1a5c:	f7 95       	ror	r31
    1a5e:	9f 5f       	subi	r25, 0xFF	; 255
    1a60:	c9 f7       	brne	.-14     	; 0x1a54 <__divsf3_pse+0x78>
    1a62:	88 0f       	add	r24, r24
    1a64:	91 1d       	adc	r25, r1
    1a66:	96 95       	lsr	r25
    1a68:	87 95       	ror	r24
    1a6a:	97 f9       	bld	r25, 7
    1a6c:	08 95       	ret
    1a6e:	e1 e0       	ldi	r30, 0x01	; 1
    1a70:	66 0f       	add	r22, r22
    1a72:	77 1f       	adc	r23, r23
    1a74:	88 1f       	adc	r24, r24
    1a76:	bb 1f       	adc	r27, r27
    1a78:	62 17       	cp	r22, r18
    1a7a:	73 07       	cpc	r23, r19
    1a7c:	84 07       	cpc	r24, r20
    1a7e:	ba 07       	cpc	r27, r26
    1a80:	20 f0       	brcs	.+8      	; 0x1a8a <__divsf3_pse+0xae>
    1a82:	62 1b       	sub	r22, r18
    1a84:	73 0b       	sbc	r23, r19
    1a86:	84 0b       	sbc	r24, r20
    1a88:	ba 0b       	sbc	r27, r26
    1a8a:	ee 1f       	adc	r30, r30
    1a8c:	88 f7       	brcc	.-30     	; 0x1a70 <__divsf3_pse+0x94>
    1a8e:	e0 95       	com	r30
    1a90:	08 95       	ret

00001a92 <__floatunsisf>:
    1a92:	e8 94       	clt
    1a94:	09 c0       	rjmp	.+18     	; 0x1aa8 <__floatsisf+0x12>

00001a96 <__floatsisf>:
    1a96:	97 fb       	bst	r25, 7
    1a98:	3e f4       	brtc	.+14     	; 0x1aa8 <__floatsisf+0x12>
    1a9a:	90 95       	com	r25
    1a9c:	80 95       	com	r24
    1a9e:	70 95       	com	r23
    1aa0:	61 95       	neg	r22
    1aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa4:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa8:	99 23       	and	r25, r25
    1aaa:	a9 f0       	breq	.+42     	; 0x1ad6 <__floatsisf+0x40>
    1aac:	f9 2f       	mov	r31, r25
    1aae:	96 e9       	ldi	r25, 0x96	; 150
    1ab0:	bb 27       	eor	r27, r27
    1ab2:	93 95       	inc	r25
    1ab4:	f6 95       	lsr	r31
    1ab6:	87 95       	ror	r24
    1ab8:	77 95       	ror	r23
    1aba:	67 95       	ror	r22
    1abc:	b7 95       	ror	r27
    1abe:	f1 11       	cpse	r31, r1
    1ac0:	f8 cf       	rjmp	.-16     	; 0x1ab2 <__floatsisf+0x1c>
    1ac2:	fa f4       	brpl	.+62     	; 0x1b02 <__floatsisf+0x6c>
    1ac4:	bb 0f       	add	r27, r27
    1ac6:	11 f4       	brne	.+4      	; 0x1acc <__floatsisf+0x36>
    1ac8:	60 ff       	sbrs	r22, 0
    1aca:	1b c0       	rjmp	.+54     	; 0x1b02 <__floatsisf+0x6c>
    1acc:	6f 5f       	subi	r22, 0xFF	; 255
    1ace:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad4:	16 c0       	rjmp	.+44     	; 0x1b02 <__floatsisf+0x6c>
    1ad6:	88 23       	and	r24, r24
    1ad8:	11 f0       	breq	.+4      	; 0x1ade <__floatsisf+0x48>
    1ada:	96 e9       	ldi	r25, 0x96	; 150
    1adc:	11 c0       	rjmp	.+34     	; 0x1b00 <__floatsisf+0x6a>
    1ade:	77 23       	and	r23, r23
    1ae0:	21 f0       	breq	.+8      	; 0x1aea <__floatsisf+0x54>
    1ae2:	9e e8       	ldi	r25, 0x8E	; 142
    1ae4:	87 2f       	mov	r24, r23
    1ae6:	76 2f       	mov	r23, r22
    1ae8:	05 c0       	rjmp	.+10     	; 0x1af4 <__floatsisf+0x5e>
    1aea:	66 23       	and	r22, r22
    1aec:	71 f0       	breq	.+28     	; 0x1b0a <__floatsisf+0x74>
    1aee:	96 e8       	ldi	r25, 0x86	; 134
    1af0:	86 2f       	mov	r24, r22
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	2a f0       	brmi	.+10     	; 0x1b02 <__floatsisf+0x6c>
    1af8:	9a 95       	dec	r25
    1afa:	66 0f       	add	r22, r22
    1afc:	77 1f       	adc	r23, r23
    1afe:	88 1f       	adc	r24, r24
    1b00:	da f7       	brpl	.-10     	; 0x1af8 <__floatsisf+0x62>
    1b02:	88 0f       	add	r24, r24
    1b04:	96 95       	lsr	r25
    1b06:	87 95       	ror	r24
    1b08:	97 f9       	bld	r25, 7
    1b0a:	08 95       	ret

00001b0c <__fp_arccos>:
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	1f 93       	push	r17
    1b12:	0f 93       	push	r16
    1b14:	8b 01       	movw	r16, r22
    1b16:	ec 01       	movw	r28, r24
    1b18:	e9 ea       	ldi	r30, 0xA9	; 169
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fp_powser>
    1b20:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fp_round>
    1b24:	98 01       	movw	r18, r16
    1b26:	ae 01       	movw	r20, r28
    1b28:	8b 01       	movw	r16, r22
    1b2a:	ec 01       	movw	r28, r24
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    1b30:	80 e8       	ldi	r24, 0x80	; 128
    1b32:	9f e3       	ldi	r25, 0x3F	; 63
    1b34:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__subsf3>
    1b38:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <sqrt>
    1b3c:	98 01       	movw	r18, r16
    1b3e:	ae 01       	movw	r20, r28
    1b40:	0f 91       	pop	r16
    1b42:	1f 91       	pop	r17
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__mulsf3x>

00001b4c <__fp_cmp>:
    1b4c:	99 0f       	add	r25, r25
    1b4e:	00 08       	sbc	r0, r0
    1b50:	55 0f       	add	r21, r21
    1b52:	aa 0b       	sbc	r26, r26
    1b54:	e0 e8       	ldi	r30, 0x80	; 128
    1b56:	fe ef       	ldi	r31, 0xFE	; 254
    1b58:	16 16       	cp	r1, r22
    1b5a:	17 06       	cpc	r1, r23
    1b5c:	e8 07       	cpc	r30, r24
    1b5e:	f9 07       	cpc	r31, r25
    1b60:	c0 f0       	brcs	.+48     	; 0x1b92 <__fp_cmp+0x46>
    1b62:	12 16       	cp	r1, r18
    1b64:	13 06       	cpc	r1, r19
    1b66:	e4 07       	cpc	r30, r20
    1b68:	f5 07       	cpc	r31, r21
    1b6a:	98 f0       	brcs	.+38     	; 0x1b92 <__fp_cmp+0x46>
    1b6c:	62 1b       	sub	r22, r18
    1b6e:	73 0b       	sbc	r23, r19
    1b70:	84 0b       	sbc	r24, r20
    1b72:	95 0b       	sbc	r25, r21
    1b74:	39 f4       	brne	.+14     	; 0x1b84 <__fp_cmp+0x38>
    1b76:	0a 26       	eor	r0, r26
    1b78:	61 f0       	breq	.+24     	; 0x1b92 <__fp_cmp+0x46>
    1b7a:	23 2b       	or	r18, r19
    1b7c:	24 2b       	or	r18, r20
    1b7e:	25 2b       	or	r18, r21
    1b80:	21 f4       	brne	.+8      	; 0x1b8a <__fp_cmp+0x3e>
    1b82:	08 95       	ret
    1b84:	0a 26       	eor	r0, r26
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <__fp_cmp+0x3e>
    1b88:	a1 40       	sbci	r26, 0x01	; 1
    1b8a:	a6 95       	lsr	r26
    1b8c:	8f ef       	ldi	r24, 0xFF	; 255
    1b8e:	81 1d       	adc	r24, r1
    1b90:	81 1d       	adc	r24, r1
    1b92:	08 95       	ret

00001b94 <__fp_inf>:
    1b94:	97 f9       	bld	r25, 7
    1b96:	9f 67       	ori	r25, 0x7F	; 127
    1b98:	80 e8       	ldi	r24, 0x80	; 128
    1b9a:	70 e0       	ldi	r23, 0x00	; 0
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	08 95       	ret

00001ba0 <__fp_nan>:
    1ba0:	9f ef       	ldi	r25, 0xFF	; 255
    1ba2:	80 ec       	ldi	r24, 0xC0	; 192
    1ba4:	08 95       	ret

00001ba6 <__fp_powser>:
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	1f 93       	push	r17
    1bac:	0f 93       	push	r16
    1bae:	ff 92       	push	r15
    1bb0:	ef 92       	push	r14
    1bb2:	df 92       	push	r13
    1bb4:	7b 01       	movw	r14, r22
    1bb6:	8c 01       	movw	r16, r24
    1bb8:	68 94       	set
    1bba:	06 c0       	rjmp	.+12     	; 0x1bc8 <__fp_powser+0x22>
    1bbc:	da 2e       	mov	r13, r26
    1bbe:	ef 01       	movw	r28, r30
    1bc0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__mulsf3x>
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	e8 94       	clt
    1bc8:	a5 91       	lpm	r26, Z+
    1bca:	25 91       	lpm	r18, Z+
    1bcc:	35 91       	lpm	r19, Z+
    1bce:	45 91       	lpm	r20, Z+
    1bd0:	55 91       	lpm	r21, Z+
    1bd2:	a6 f3       	brts	.-24     	; 0x1bbc <__fp_powser+0x16>
    1bd4:	ef 01       	movw	r28, r30
    1bd6:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__addsf3x>
    1bda:	fe 01       	movw	r30, r28
    1bdc:	97 01       	movw	r18, r14
    1bde:	a8 01       	movw	r20, r16
    1be0:	da 94       	dec	r13
    1be2:	69 f7       	brne	.-38     	; 0x1bbe <__fp_powser+0x18>
    1be4:	df 90       	pop	r13
    1be6:	ef 90       	pop	r14
    1be8:	ff 90       	pop	r15
    1bea:	0f 91       	pop	r16
    1bec:	1f 91       	pop	r17
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <__fp_powsodd>:
    1bf4:	9f 93       	push	r25
    1bf6:	8f 93       	push	r24
    1bf8:	7f 93       	push	r23
    1bfa:	6f 93       	push	r22
    1bfc:	ff 93       	push	r31
    1bfe:	ef 93       	push	r30
    1c00:	9b 01       	movw	r18, r22
    1c02:	ac 01       	movw	r20, r24
    1c04:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__mulsf3>
    1c08:	ef 91       	pop	r30
    1c0a:	ff 91       	pop	r31
    1c0c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fp_powser>
    1c10:	2f 91       	pop	r18
    1c12:	3f 91       	pop	r19
    1c14:	4f 91       	pop	r20
    1c16:	5f 91       	pop	r21
    1c18:	0c 94 5e 0e 	jmp	0x1cbc	; 0x1cbc <__mulsf3>

00001c1c <__fp_pscA>:
    1c1c:	00 24       	eor	r0, r0
    1c1e:	0a 94       	dec	r0
    1c20:	16 16       	cp	r1, r22
    1c22:	17 06       	cpc	r1, r23
    1c24:	18 06       	cpc	r1, r24
    1c26:	09 06       	cpc	r0, r25
    1c28:	08 95       	ret

00001c2a <__fp_pscB>:
    1c2a:	00 24       	eor	r0, r0
    1c2c:	0a 94       	dec	r0
    1c2e:	12 16       	cp	r1, r18
    1c30:	13 06       	cpc	r1, r19
    1c32:	14 06       	cpc	r1, r20
    1c34:	05 06       	cpc	r0, r21
    1c36:	08 95       	ret

00001c38 <__fp_round>:
    1c38:	09 2e       	mov	r0, r25
    1c3a:	03 94       	inc	r0
    1c3c:	00 0c       	add	r0, r0
    1c3e:	11 f4       	brne	.+4      	; 0x1c44 <__fp_round+0xc>
    1c40:	88 23       	and	r24, r24
    1c42:	52 f0       	brmi	.+20     	; 0x1c58 <__fp_round+0x20>
    1c44:	bb 0f       	add	r27, r27
    1c46:	40 f4       	brcc	.+16     	; 0x1c58 <__fp_round+0x20>
    1c48:	bf 2b       	or	r27, r31
    1c4a:	11 f4       	brne	.+4      	; 0x1c50 <__fp_round+0x18>
    1c4c:	60 ff       	sbrs	r22, 0
    1c4e:	04 c0       	rjmp	.+8      	; 0x1c58 <__fp_round+0x20>
    1c50:	6f 5f       	subi	r22, 0xFF	; 255
    1c52:	7f 4f       	sbci	r23, 0xFF	; 255
    1c54:	8f 4f       	sbci	r24, 0xFF	; 255
    1c56:	9f 4f       	sbci	r25, 0xFF	; 255
    1c58:	08 95       	ret

00001c5a <__fp_split3>:
    1c5a:	57 fd       	sbrc	r21, 7
    1c5c:	90 58       	subi	r25, 0x80	; 128
    1c5e:	44 0f       	add	r20, r20
    1c60:	55 1f       	adc	r21, r21
    1c62:	59 f0       	breq	.+22     	; 0x1c7a <__fp_splitA+0x10>
    1c64:	5f 3f       	cpi	r21, 0xFF	; 255
    1c66:	71 f0       	breq	.+28     	; 0x1c84 <__fp_splitA+0x1a>
    1c68:	47 95       	ror	r20

00001c6a <__fp_splitA>:
    1c6a:	88 0f       	add	r24, r24
    1c6c:	97 fb       	bst	r25, 7
    1c6e:	99 1f       	adc	r25, r25
    1c70:	61 f0       	breq	.+24     	; 0x1c8a <__fp_splitA+0x20>
    1c72:	9f 3f       	cpi	r25, 0xFF	; 255
    1c74:	79 f0       	breq	.+30     	; 0x1c94 <__fp_splitA+0x2a>
    1c76:	87 95       	ror	r24
    1c78:	08 95       	ret
    1c7a:	12 16       	cp	r1, r18
    1c7c:	13 06       	cpc	r1, r19
    1c7e:	14 06       	cpc	r1, r20
    1c80:	55 1f       	adc	r21, r21
    1c82:	f2 cf       	rjmp	.-28     	; 0x1c68 <__fp_split3+0xe>
    1c84:	46 95       	lsr	r20
    1c86:	f1 df       	rcall	.-30     	; 0x1c6a <__fp_splitA>
    1c88:	08 c0       	rjmp	.+16     	; 0x1c9a <__fp_splitA+0x30>
    1c8a:	16 16       	cp	r1, r22
    1c8c:	17 06       	cpc	r1, r23
    1c8e:	18 06       	cpc	r1, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	f1 cf       	rjmp	.-30     	; 0x1c76 <__fp_splitA+0xc>
    1c94:	86 95       	lsr	r24
    1c96:	71 05       	cpc	r23, r1
    1c98:	61 05       	cpc	r22, r1
    1c9a:	08 94       	sec
    1c9c:	08 95       	ret

00001c9e <__fp_zero>:
    1c9e:	e8 94       	clt

00001ca0 <__fp_szero>:
    1ca0:	bb 27       	eor	r27, r27
    1ca2:	66 27       	eor	r22, r22
    1ca4:	77 27       	eor	r23, r23
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	97 f9       	bld	r25, 7
    1caa:	08 95       	ret

00001cac <inverse>:
    1cac:	9b 01       	movw	r18, r22
    1cae:	ac 01       	movw	r20, r24
    1cb0:	60 e0       	ldi	r22, 0x00	; 0
    1cb2:	70 e0       	ldi	r23, 0x00	; 0
    1cb4:	80 e8       	ldi	r24, 0x80	; 128
    1cb6:	9f e3       	ldi	r25, 0x3F	; 63
    1cb8:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__divsf3>

00001cbc <__mulsf3>:
    1cbc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__mulsf3x>
    1cc0:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_round>
    1cc4:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fp_pscA>
    1cc8:	38 f0       	brcs	.+14     	; 0x1cd8 <__mulsf3+0x1c>
    1cca:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <__fp_pscB>
    1cce:	20 f0       	brcs	.+8      	; 0x1cd8 <__mulsf3+0x1c>
    1cd0:	95 23       	and	r25, r21
    1cd2:	11 f0       	breq	.+4      	; 0x1cd8 <__mulsf3+0x1c>
    1cd4:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__fp_inf>
    1cd8:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__fp_nan>
    1cdc:	11 24       	eor	r1, r1
    1cde:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__fp_szero>

00001ce2 <__mulsf3x>:
    1ce2:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__fp_split3>
    1ce6:	70 f3       	brcs	.-36     	; 0x1cc4 <__mulsf3+0x8>

00001ce8 <__mulsf3_pse>:
    1ce8:	95 9f       	mul	r25, r21
    1cea:	c1 f3       	breq	.-16     	; 0x1cdc <__mulsf3+0x20>
    1cec:	95 0f       	add	r25, r21
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	55 1f       	adc	r21, r21
    1cf2:	62 9f       	mul	r22, r18
    1cf4:	f0 01       	movw	r30, r0
    1cf6:	72 9f       	mul	r23, r18
    1cf8:	bb 27       	eor	r27, r27
    1cfa:	f0 0d       	add	r31, r0
    1cfc:	b1 1d       	adc	r27, r1
    1cfe:	63 9f       	mul	r22, r19
    1d00:	aa 27       	eor	r26, r26
    1d02:	f0 0d       	add	r31, r0
    1d04:	b1 1d       	adc	r27, r1
    1d06:	aa 1f       	adc	r26, r26
    1d08:	64 9f       	mul	r22, r20
    1d0a:	66 27       	eor	r22, r22
    1d0c:	b0 0d       	add	r27, r0
    1d0e:	a1 1d       	adc	r26, r1
    1d10:	66 1f       	adc	r22, r22
    1d12:	82 9f       	mul	r24, r18
    1d14:	22 27       	eor	r18, r18
    1d16:	b0 0d       	add	r27, r0
    1d18:	a1 1d       	adc	r26, r1
    1d1a:	62 1f       	adc	r22, r18
    1d1c:	73 9f       	mul	r23, r19
    1d1e:	b0 0d       	add	r27, r0
    1d20:	a1 1d       	adc	r26, r1
    1d22:	62 1f       	adc	r22, r18
    1d24:	83 9f       	mul	r24, r19
    1d26:	a0 0d       	add	r26, r0
    1d28:	61 1d       	adc	r22, r1
    1d2a:	22 1f       	adc	r18, r18
    1d2c:	74 9f       	mul	r23, r20
    1d2e:	33 27       	eor	r19, r19
    1d30:	a0 0d       	add	r26, r0
    1d32:	61 1d       	adc	r22, r1
    1d34:	23 1f       	adc	r18, r19
    1d36:	84 9f       	mul	r24, r20
    1d38:	60 0d       	add	r22, r0
    1d3a:	21 1d       	adc	r18, r1
    1d3c:	82 2f       	mov	r24, r18
    1d3e:	76 2f       	mov	r23, r22
    1d40:	6a 2f       	mov	r22, r26
    1d42:	11 24       	eor	r1, r1
    1d44:	9f 57       	subi	r25, 0x7F	; 127
    1d46:	50 40       	sbci	r21, 0x00	; 0
    1d48:	9a f0       	brmi	.+38     	; 0x1d70 <__mulsf3_pse+0x88>
    1d4a:	f1 f0       	breq	.+60     	; 0x1d88 <__mulsf3_pse+0xa0>
    1d4c:	88 23       	and	r24, r24
    1d4e:	4a f0       	brmi	.+18     	; 0x1d62 <__mulsf3_pse+0x7a>
    1d50:	ee 0f       	add	r30, r30
    1d52:	ff 1f       	adc	r31, r31
    1d54:	bb 1f       	adc	r27, r27
    1d56:	66 1f       	adc	r22, r22
    1d58:	77 1f       	adc	r23, r23
    1d5a:	88 1f       	adc	r24, r24
    1d5c:	91 50       	subi	r25, 0x01	; 1
    1d5e:	50 40       	sbci	r21, 0x00	; 0
    1d60:	a9 f7       	brne	.-22     	; 0x1d4c <__mulsf3_pse+0x64>
    1d62:	9e 3f       	cpi	r25, 0xFE	; 254
    1d64:	51 05       	cpc	r21, r1
    1d66:	80 f0       	brcs	.+32     	; 0x1d88 <__mulsf3_pse+0xa0>
    1d68:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__fp_inf>
    1d6c:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__fp_szero>
    1d70:	5f 3f       	cpi	r21, 0xFF	; 255
    1d72:	e4 f3       	brlt	.-8      	; 0x1d6c <__mulsf3_pse+0x84>
    1d74:	98 3e       	cpi	r25, 0xE8	; 232
    1d76:	d4 f3       	brlt	.-12     	; 0x1d6c <__mulsf3_pse+0x84>
    1d78:	86 95       	lsr	r24
    1d7a:	77 95       	ror	r23
    1d7c:	67 95       	ror	r22
    1d7e:	b7 95       	ror	r27
    1d80:	f7 95       	ror	r31
    1d82:	e7 95       	ror	r30
    1d84:	9f 5f       	subi	r25, 0xFF	; 255
    1d86:	c1 f7       	brne	.-16     	; 0x1d78 <__mulsf3_pse+0x90>
    1d88:	fe 2b       	or	r31, r30
    1d8a:	88 0f       	add	r24, r24
    1d8c:	91 1d       	adc	r25, r1
    1d8e:	96 95       	lsr	r25
    1d90:	87 95       	ror	r24
    1d92:	97 f9       	bld	r25, 7
    1d94:	08 95       	ret
    1d96:	19 f4       	brne	.+6      	; 0x1d9e <__mulsf3_pse+0xb6>
    1d98:	16 f4       	brtc	.+4      	; 0x1d9e <__mulsf3_pse+0xb6>
    1d9a:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__fp_nan>
    1d9e:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__fp_mpack>

00001da2 <sqrt>:
    1da2:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__fp_splitA>
    1da6:	b8 f3       	brcs	.-18     	; 0x1d96 <__mulsf3_pse+0xae>
    1da8:	99 23       	and	r25, r25
    1daa:	c9 f3       	breq	.-14     	; 0x1d9e <__mulsf3_pse+0xb6>
    1dac:	b6 f3       	brts	.-20     	; 0x1d9a <__mulsf3_pse+0xb2>
    1dae:	9f 57       	subi	r25, 0x7F	; 127
    1db0:	55 0b       	sbc	r21, r21
    1db2:	87 ff       	sbrs	r24, 7
    1db4:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__fp_norm2>
    1db8:	00 24       	eor	r0, r0
    1dba:	a0 e6       	ldi	r26, 0x60	; 96
    1dbc:	40 ea       	ldi	r20, 0xA0	; 160
    1dbe:	90 01       	movw	r18, r0
    1dc0:	80 58       	subi	r24, 0x80	; 128
    1dc2:	56 95       	lsr	r21
    1dc4:	97 95       	ror	r25
    1dc6:	28 f4       	brcc	.+10     	; 0x1dd2 <sqrt+0x30>
    1dc8:	80 5c       	subi	r24, 0xC0	; 192
    1dca:	66 0f       	add	r22, r22
    1dcc:	77 1f       	adc	r23, r23
    1dce:	88 1f       	adc	r24, r24
    1dd0:	20 f0       	brcs	.+8      	; 0x1dda <sqrt+0x38>
    1dd2:	26 17       	cp	r18, r22
    1dd4:	37 07       	cpc	r19, r23
    1dd6:	48 07       	cpc	r20, r24
    1dd8:	30 f4       	brcc	.+12     	; 0x1de6 <sqrt+0x44>
    1dda:	62 1b       	sub	r22, r18
    1ddc:	73 0b       	sbc	r23, r19
    1dde:	84 0b       	sbc	r24, r20
    1de0:	20 29       	or	r18, r0
    1de2:	31 29       	or	r19, r1
    1de4:	4a 2b       	or	r20, r26
    1de6:	a6 95       	lsr	r26
    1de8:	17 94       	ror	r1
    1dea:	07 94       	ror	r0
    1dec:	20 25       	eor	r18, r0
    1dee:	31 25       	eor	r19, r1
    1df0:	4a 27       	eor	r20, r26
    1df2:	58 f7       	brcc	.-42     	; 0x1dca <sqrt+0x28>
    1df4:	66 0f       	add	r22, r22
    1df6:	77 1f       	adc	r23, r23
    1df8:	88 1f       	adc	r24, r24
    1dfa:	20 f0       	brcs	.+8      	; 0x1e04 <sqrt+0x62>
    1dfc:	26 17       	cp	r18, r22
    1dfe:	37 07       	cpc	r19, r23
    1e00:	48 07       	cpc	r20, r24
    1e02:	30 f4       	brcc	.+12     	; 0x1e10 <sqrt+0x6e>
    1e04:	62 0b       	sbc	r22, r18
    1e06:	73 0b       	sbc	r23, r19
    1e08:	84 0b       	sbc	r24, r20
    1e0a:	20 0d       	add	r18, r0
    1e0c:	31 1d       	adc	r19, r1
    1e0e:	41 1d       	adc	r20, r1
    1e10:	a0 95       	com	r26
    1e12:	81 f7       	brne	.-32     	; 0x1df4 <sqrt+0x52>
    1e14:	b9 01       	movw	r22, r18
    1e16:	84 2f       	mov	r24, r20
    1e18:	91 58       	subi	r25, 0x81	; 129
    1e1a:	88 0f       	add	r24, r24
    1e1c:	96 95       	lsr	r25
    1e1e:	87 95       	ror	r24
    1e20:	08 95       	ret

00001e22 <square>:
    1e22:	9b 01       	movw	r18, r22
    1e24:	ac 01       	movw	r20, r24
    1e26:	0c 94 5e 0e 	jmp	0x1cbc	; 0x1cbc <__mulsf3>

00001e2a <__fp_mpack>:
    1e2a:	9f 3f       	cpi	r25, 0xFF	; 255
    1e2c:	31 f0       	breq	.+12     	; 0x1e3a <__fp_mpack_finite+0xc>

00001e2e <__fp_mpack_finite>:
    1e2e:	91 50       	subi	r25, 0x01	; 1
    1e30:	20 f4       	brcc	.+8      	; 0x1e3a <__fp_mpack_finite+0xc>
    1e32:	87 95       	ror	r24
    1e34:	77 95       	ror	r23
    1e36:	67 95       	ror	r22
    1e38:	b7 95       	ror	r27
    1e3a:	88 0f       	add	r24, r24
    1e3c:	91 1d       	adc	r25, r1
    1e3e:	96 95       	lsr	r25
    1e40:	87 95       	ror	r24
    1e42:	97 f9       	bld	r25, 7
    1e44:	08 95       	ret

00001e46 <__fp_norm2>:
    1e46:	91 50       	subi	r25, 0x01	; 1
    1e48:	50 40       	sbci	r21, 0x00	; 0
    1e4a:	66 0f       	add	r22, r22
    1e4c:	77 1f       	adc	r23, r23
    1e4e:	88 1f       	adc	r24, r24
    1e50:	d2 f7       	brpl	.-12     	; 0x1e46 <__fp_norm2>
    1e52:	08 95       	ret

00001e54 <_exit>:
    1e54:	f8 94       	cli

00001e56 <__stop_program>:
    1e56:	ff cf       	rjmp	.-2      	; 0x1e56 <__stop_program>
