
mpu_manual.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000287a  0000290e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000287a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006b  00800108  00800108  00002916  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002916  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002948  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00002988  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021eb  00000000  00000000  00002b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd8  00000000  00000000  00004d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fbf  00000000  00000000  000059e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006cc  00000000  00000000  000069a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084f  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025aa  00000000  00000000  000078bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00009e69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__ctors_end>
       4:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       8:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      10:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      14:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      18:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      1c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      20:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      24:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      28:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      2c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      30:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      34:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      38:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      3c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      40:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <__vector_16>
      44:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      48:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__vector_18>
      4c:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__vector_19>
      50:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      54:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      58:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      5c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      60:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      64:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      68:	03 6e       	ori	r16, 0xE3	; 227
      6a:	db 36       	cpi	r29, 0x6B	; 107
      6c:	3d 9a       	sbi	0x07, 5	; 7
      6e:	99 99       	sbic	0x13, 1	; 19
      70:	99 3d       	cpi	r25, 0xD9	; 217
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	3e 00       	.word	0x003e	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 4a       	sbci	r16, 0xA8	; 168
      7e:	d7 3b       	cpi	r29, 0xB7	; 183
      80:	3b ce       	rjmp	.-906    	; 0xfffffcf8 <__eeprom_end+0xff7efcf8>
      82:	01 6e       	ori	r16, 0xE1	; 225
      84:	84 bc       	out	0x24, r8	; 36
      86:	bf fd       	.word	0xfdbf	; ????
      88:	c1 2f       	mov	r28, r17
      8a:	3d 6c       	ori	r19, 0xCD	; 205
      8c:	74 31       	cpi	r23, 0x14	; 20
      8e:	9a bd       	out	0x2a, r25	; 42
      90:	56 83       	std	Z+6, r21	; 0x06
      92:	3d da       	rcall	.-2950   	; 0xfffff50e <__eeprom_end+0xff7ef50e>
      94:	3d 00       	.word	0x003d	; ????
      96:	c7 7f       	andi	r28, 0xF7	; 247
      98:	11 be       	out	0x31, r1	; 49
      9a:	d9 e4       	ldi	r29, 0x49	; 73
      9c:	bb 4c       	sbci	r27, 0xCB	; 203
      9e:	3e 91       	ld	r19, -X
      a0:	6b aa       	std	Y+51, r6	; 0x33
      a2:	aa be       	out	0x3a, r10	; 58
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	3f 07       	cpc	r19, r31
      aa:	2c 7a       	andi	r18, 0xAC	; 172
      ac:	a5 ba       	out	0x15, r10	; 21
      ae:	6c c5       	rjmp	.+2776   	; 0xb88 <mpu6050_mahonyUpdate>
      b0:	90 da       	rcall	.-2784   	; 0xfffff5d2 <__eeprom_end+0xff7ef5d2>
      b2:	3b 93       	.word	0x933b	; ????
      b4:	65 fc       	sbrc	r6, 5
      b6:	8b bc       	out	0x2b, r8	; 43
      b8:	53 f8       	bld	r5, 3
      ba:	10 fd       	sbrc	r17, 0
      bc:	3c 56       	subi	r19, 0x6C	; 108
      be:	92 83       	std	Z+2, r25	; 0x02
      c0:	4d bd       	out	0x2d, r20	; 45
      c2:	87 9d       	mul	r24, r7
      c4:	3a b6       	in	r3, 0x3a	; 58
      c6:	3d cb       	rjmp	.-2438   	; 0xfffff742 <__eeprom_end+0xff7ef742>
      c8:	c9 bf       	out	0x39, r28	; 57
      ca:	5b be       	out	0x3b, r5	; 59
      cc:	73 da       	rcall	.-2842   	; 0xfffff5b4 <__eeprom_end+0xff7ef5b4>
      ce:	0f c9       	rjmp	.-3554   	; 0xfffff2ee <__eeprom_end+0xff7ef2ee>
      d0:	3f 00       	.word	0x003f	; ????

000000d2 <__trampolines_end>:
      d2:	00 40       	sbci	r16, 0x00	; 0
      d4:	7a 10       	cpse	r7, r10
      d6:	f3 5a       	subi	r31, 0xA3	; 163
      d8:	00 a0       	ldd	r0, Z+32	; 0x20
      da:	72 4e       	sbci	r23, 0xE2	; 226
      dc:	18 09       	sbc	r17, r8
      de:	00 10       	cpse	r0, r0
      e0:	a5 d4       	rcall	.+2378   	; 0xa2c <mpu6050_getConvData+0x42>
      e2:	e8 00       	.word	0x00e8	; ????
      e4:	00 e8       	ldi	r16, 0x80	; 128
      e6:	76 48       	sbci	r23, 0x86	; 134
      e8:	17 00       	.word	0x0017	; ????
      ea:	00 e4       	ldi	r16, 0x40	; 64
      ec:	0b 54       	subi	r16, 0x4B	; 75
      ee:	02 00       	.word	0x0002	; ????
      f0:	00 ca       	rjmp	.-3072   	; 0xfffff4f2 <__eeprom_end+0xff7ef4f2>
      f2:	9a 3b       	cpi	r25, 0xBA	; 186
      f4:	00 00       	nop
      f6:	00 e1       	ldi	r16, 0x10	; 16
      f8:	f5 05       	cpc	r31, r5
      fa:	00 00       	nop
      fc:	80 96       	adiw	r24, 0x20	; 32
      fe:	98 00       	.word	0x0098	; ????
     100:	00 00       	nop
     102:	40 42       	sbci	r20, 0x20	; 32
     104:	0f 00       	.word	0x000f	; ????
     106:	00 00       	nop
     108:	a0 86       	std	Z+8, r10	; 0x08
     10a:	01 00       	.word	0x0001	; ????
     10c:	00 00       	nop
     10e:	10 27       	eor	r17, r16
     110:	00 00       	nop
     112:	00 00       	nop
     114:	e8 03       	fmulsu	r22, r16
     116:	00 00       	nop
     118:	00 00       	nop
     11a:	64 00       	.word	0x0064	; ????
     11c:	00 00       	nop
     11e:	00 00       	nop
     120:	0a 00       	.word	0x000a	; ????
     122:	00 00       	nop
     124:	00 00       	nop
     126:	01 00       	.word	0x0001	; ????
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	2c 76       	andi	r18, 0x6C	; 108
     12e:	d8 88       	ldd	r13, Y+16	; 0x10
     130:	dc 67       	ori	r29, 0x7C	; 124
     132:	4f 08       	sbc	r4, r15
     134:	23 df       	rcall	.-442    	; 0xffffff7c <__eeprom_end+0xff7eff7c>
     136:	c1 df       	rcall	.-126    	; 0xba <__SREG__+0x7b>
     138:	ae 59       	subi	r26, 0x9E	; 158
     13a:	e1 b1       	in	r30, 0x01	; 1
     13c:	b7 96       	adiw	r30, 0x27	; 39
     13e:	e5 e3       	ldi	r30, 0x35	; 53
     140:	e4 53       	subi	r30, 0x34	; 52
     142:	c6 3a       	cpi	r28, 0xA6	; 166
     144:	e6 51       	subi	r30, 0x16	; 22
     146:	99 76       	andi	r25, 0x69	; 105
     148:	96 e8       	ldi	r25, 0x86	; 134
     14a:	e6 c2       	rjmp	.+1484   	; 0x718 <mpu6050_readBytes+0x92>
     14c:	84 26       	eor	r8, r20
     14e:	eb 89       	ldd	r30, Y+19	; 0x13
     150:	8c 9b       	sbis	0x11, 4	; 17
     152:	62 ed       	ldi	r22, 0xD2	; 210
     154:	40 7c       	andi	r20, 0xC0	; 192
     156:	6f fc       	.word	0xfc6f	; ????
     158:	ef bc       	out	0x2f, r14	; 47
     15a:	9c 9f       	mul	r25, r28
     15c:	40 f2       	brcs	.-112    	; 0xee <__trampolines_end+0x1c>
     15e:	ba a5       	ldd	r27, Y+42	; 0x2a
     160:	6f a5       	ldd	r22, Y+47	; 0x2f
     162:	f4 90       	lpm	r15, Z
     164:	05 5a       	subi	r16, 0xA5	; 165
     166:	2a f7       	brpl	.-54     	; 0x132 <__trampolines_end+0x60>
     168:	5c 93       	st	X, r21
     16a:	6b 6c       	ori	r22, 0xCB	; 203
     16c:	f9 67       	ori	r31, 0x79	; 121
     16e:	6d c1       	rjmp	.+730    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     170:	1b fc       	.word	0xfc1b	; ????
     172:	e0 e4       	ldi	r30, 0x40	; 64
     174:	0d 47       	sbci	r16, 0x7D	; 125
     176:	fe f5       	brtc	.+126    	; 0x1f6 <.do_clear_bss_loop>
     178:	20 e6       	ldi	r18, 0x60	; 96
     17a:	b5 00       	.word	0x00b5	; ????
     17c:	d0 ed       	ldi	r29, 0xD0	; 208
     17e:	90 2e       	mov	r9, r16
     180:	03 00       	.word	0x0003	; ????
     182:	94 35       	cpi	r25, 0x54	; 84
     184:	77 05       	cpc	r23, r7
     186:	00 80       	ld	r0, Z
     188:	84 1e       	adc	r8, r20
     18a:	08 00       	.word	0x0008	; ????
     18c:	00 20       	and	r0, r0
     18e:	4e 0a       	sbc	r4, r30
     190:	00 00       	nop
     192:	00 c8       	rjmp	.-4096   	; 0xfffff194 <__eeprom_end+0xff7ef194>
     194:	0c 33       	cpi	r16, 0x3C	; 60
     196:	33 33       	cpi	r19, 0x33	; 51
     198:	33 0f       	add	r19, r19
     19a:	98 6e       	ori	r25, 0xE8	; 232
     19c:	12 83       	std	Z+2, r17	; 0x02
     19e:	11 41       	sbci	r17, 0x11	; 17
     1a0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1a2:	21 14       	cp	r2, r1
     1a4:	89 3b       	cpi	r24, 0xB9	; 185
     1a6:	e6 55       	subi	r30, 0x56	; 86
     1a8:	16 cf       	rjmp	.-468    	; 0xffffffd6 <__eeprom_end+0xff7effd6>
     1aa:	fe e6       	ldi	r31, 0x6E	; 110
     1ac:	db 18       	sub	r13, r11
     1ae:	d1 84       	ldd	r13, Z+9	; 0x09
     1b0:	4b 38       	cpi	r20, 0x8B	; 139
     1b2:	1b f7       	brvc	.-58     	; 0x17a <__trampolines_end+0xa8>
     1b4:	7c 1d       	adc	r23, r12
     1b6:	90 1d       	adc	r25, r0
     1b8:	a4 bb       	out	0x14, r26	; 20
     1ba:	e4 24       	eor	r14, r4
     1bc:	20 32       	cpi	r18, 0x20	; 32
     1be:	84 72       	andi	r24, 0x24	; 36
     1c0:	5e 22       	and	r5, r30
     1c2:	81 00       	.word	0x0081	; ????
     1c4:	c9 f1       	breq	.+114    	; 0x238 <i2c_start+0x22>
     1c6:	24 ec       	ldi	r18, 0xC4	; 196
     1c8:	a1 e5       	ldi	r26, 0x51	; 81
     1ca:	3d 27       	eor	r19, r29

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d8 e0       	ldi	r29, 0x08	; 8
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61

000001d8 <__do_copy_data>:
     1d8:	11 e0       	ldi	r17, 0x01	; 1
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b1 e0       	ldi	r27, 0x01	; 1
     1de:	ea e7       	ldi	r30, 0x7A	; 122
     1e0:	f8 e2       	ldi	r31, 0x28	; 40
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__do_copy_data+0x10>
     1e4:	05 90       	lpm	r0, Z+
     1e6:	0d 92       	st	X+, r0
     1e8:	a8 30       	cpi	r26, 0x08	; 8
     1ea:	b1 07       	cpc	r27, r17
     1ec:	d9 f7       	brne	.-10     	; 0x1e4 <__do_copy_data+0xc>

000001ee <__do_clear_bss>:
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	a8 e0       	ldi	r26, 0x08	; 8
     1f2:	b1 e0       	ldi	r27, 0x01	; 1
     1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <.do_clear_bss_start>

000001f6 <.do_clear_bss_loop>:
     1f6:	1d 92       	st	X+, r1

000001f8 <.do_clear_bss_start>:
     1f8:	a3 37       	cpi	r26, 0x73	; 115
     1fa:	b2 07       	cpc	r27, r18
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <.do_clear_bss_loop>
     1fe:	0e 94 31 02 	call	0x462	; 0x462 <main>
     202:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <_exit>

00000206 <__bad_interrupt>:
     206:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020a <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     20a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     20e:	82 e0       	ldi	r24, 0x02	; 2
     210:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     214:	08 95       	ret

00000216 <i2c_start>:
     216:	94 ea       	ldi	r25, 0xA4	; 164
     218:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     21c:	4f ef       	ldi	r20, 0xFF	; 255
     21e:	50 e0       	ldi	r21, 0x00	; 0
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	ec eb       	ldi	r30, 0xBC	; 188
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	90 81       	ld	r25, Z
     22a:	99 23       	and	r25, r25
     22c:	34 f0       	brlt	.+12     	; 0x23a <i2c_start+0x24>
     22e:	41 50       	subi	r20, 0x01	; 1
     230:	51 09       	sbc	r21, r1
     232:	61 09       	sbc	r22, r1
     234:	71 09       	sbc	r23, r1
     236:	c0 f7       	brcc	.-16     	; 0x228 <i2c_start+0x12>
     238:	04 c0       	rjmp	.+8      	; 0x242 <i2c_start+0x2c>
     23a:	45 2b       	or	r20, r21
     23c:	46 2b       	or	r20, r22
     23e:	47 2b       	or	r20, r23
     240:	41 f1       	breq	.+80     	; 0x292 <i2c_start+0x7c>
     242:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     246:	98 7f       	andi	r25, 0xF8	; 248
     248:	98 30       	cpi	r25, 0x08	; 8
     24a:	11 f0       	breq	.+4      	; 0x250 <i2c_start+0x3a>
     24c:	90 31       	cpi	r25, 0x10	; 16
     24e:	19 f5       	brne	.+70     	; 0x296 <i2c_start+0x80>
     250:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     254:	84 e8       	ldi	r24, 0x84	; 132
     256:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     25a:	8f ef       	ldi	r24, 0xFF	; 255
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	a0 e0       	ldi	r26, 0x00	; 0
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	ec eb       	ldi	r30, 0xBC	; 188
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	20 81       	ld	r18, Z
     268:	22 23       	and	r18, r18
     26a:	2c f0       	brlt	.+10     	; 0x276 <i2c_start+0x60>
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	a1 09       	sbc	r26, r1
     270:	b1 09       	sbc	r27, r1
     272:	c8 f7       	brcc	.-14     	; 0x266 <i2c_start+0x50>
     274:	04 c0       	rjmp	.+8      	; 0x27e <i2c_start+0x68>
     276:	89 2b       	or	r24, r25
     278:	8a 2b       	or	r24, r26
     27a:	8b 2b       	or	r24, r27
     27c:	71 f0       	breq	.+28     	; 0x29a <i2c_start+0x84>
     27e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     282:	98 7f       	andi	r25, 0xF8	; 248
     284:	98 31       	cpi	r25, 0x18	; 24
     286:	59 f0       	breq	.+22     	; 0x29e <i2c_start+0x88>
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 34       	cpi	r25, 0x40	; 64
     28c:	49 f4       	brne	.+18     	; 0x2a0 <i2c_start+0x8a>
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	08 95       	ret
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	08 95       	ret
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	08 95       	ret
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	08 95       	ret
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	08 95       	ret

000002a2 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2a2:	84 e9       	ldi	r24, 0x94	; 148
     2a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	ec eb       	ldi	r30, 0xBC	; 188
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	20 81       	ld	r18, Z
     2b2:	24 ff       	sbrs	r18, 4
     2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <i2c_stop+0x1e>
     2b6:	01 96       	adiw	r24, 0x01	; 1
     2b8:	81 15       	cp	r24, r1
     2ba:	21 e0       	ldi	r18, 0x01	; 1
     2bc:	92 07       	cpc	r25, r18
     2be:	c1 f7       	brne	.-16     	; 0x2b0 <i2c_stop+0xe>
     2c0:	08 95       	ret

000002c2 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     2c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     2c6:	84 e8       	ldi	r24, 0x84	; 132
     2c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	a0 e0       	ldi	r26, 0x00	; 0
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     2d4:	ec eb       	ldi	r30, 0xBC	; 188
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	20 81       	ld	r18, Z
     2da:	22 23       	and	r18, r18
     2dc:	2c f0       	brlt	.+10     	; 0x2e8 <i2c_write+0x26>
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	a1 09       	sbc	r26, r1
     2e2:	b1 09       	sbc	r27, r1
     2e4:	c8 f7       	brcc	.-14     	; 0x2d8 <i2c_write+0x16>
     2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <i2c_write+0x2e>
	if(i2c_timer == 0)
     2e8:	89 2b       	or	r24, r25
     2ea:	8a 2b       	or	r24, r26
     2ec:	8b 2b       	or	r24, r27
     2ee:	41 f0       	breq	.+16     	; 0x300 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     2f0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     2f4:	98 7f       	andi	r25, 0xF8	; 248
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	98 32       	cpi	r25, 0x28	; 40
     2fa:	19 f4       	brne	.+6      	; 0x302 <i2c_write+0x40>
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	08 95       	ret
     300:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     302:	08 95       	ret

00000304 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     304:	84 ec       	ldi	r24, 0xC4	; 196
     306:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
     30a:	8f ef       	ldi	r24, 0xFF	; 255
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	a0 e0       	ldi	r26, 0x00	; 0
     310:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     312:	ec eb       	ldi	r30, 0xBC	; 188
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	20 81       	ld	r18, Z
     318:	22 23       	and	r18, r18
     31a:	2c f0       	brlt	.+10     	; 0x326 <i2c_readAck+0x22>
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	a1 09       	sbc	r26, r1
     320:	b1 09       	sbc	r27, r1
     322:	c8 f7       	brcc	.-14     	; 0x316 <i2c_readAck+0x12>
     324:	04 c0       	rjmp	.+8      	; 0x32e <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     326:	89 2b       	or	r24, r25
     328:	8a 2b       	or	r24, r26
     32a:	8b 2b       	or	r24, r27
     32c:	19 f0       	breq	.+6      	; 0x334 <i2c_readAck+0x30>
		return 0;

    return TWDR;
     32e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     332:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     334:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     336:	08 95       	ret

00000338 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     338:	84 e8       	ldi	r24, 0x84	; 132
     33a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
     33e:	8f ef       	ldi	r24, 0xFF	; 255
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	a0 e0       	ldi	r26, 0x00	; 0
     344:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     346:	ec eb       	ldi	r30, 0xBC	; 188
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	20 81       	ld	r18, Z
     34c:	22 23       	and	r18, r18
     34e:	2c f0       	brlt	.+10     	; 0x35a <i2c_readNak+0x22>
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	a1 09       	sbc	r26, r1
     354:	b1 09       	sbc	r27, r1
     356:	c8 f7       	brcc	.-14     	; 0x34a <i2c_readNak+0x12>
     358:	04 c0       	rjmp	.+8      	; 0x362 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     35a:	89 2b       	or	r24, r25
     35c:	8a 2b       	or	r24, r26
     35e:	8b 2b       	or	r24, r27
     360:	19 f0       	breq	.+6      	; 0x368 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     362:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     366:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     368:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     36a:	08 95       	ret

0000036c <anglesFromAccel>:
/*
	filters roll pitch and yaw using complementary filter 
*/
void applyCompFilter(double * filteredAngle, double accelAngle, double gyroAngle, double alpha){
	*filteredAngle = alpha * gyroAngle + (1-alpha) * accelAngle;
}
     36c:	2f 92       	push	r2
     36e:	3f 92       	push	r3
     370:	4f 92       	push	r4
     372:	5f 92       	push	r5
     374:	6f 92       	push	r6
     376:	7f 92       	push	r7
     378:	8f 92       	push	r8
     37a:	9f 92       	push	r9
     37c:	af 92       	push	r10
     37e:	bf 92       	push	r11
     380:	cf 92       	push	r12
     382:	df 92       	push	r13
     384:	ef 92       	push	r14
     386:	ff 92       	push	r15
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	2a 97       	sbiw	r28, 0x0a	; 10
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	cd bf       	out	0x3d, r28	; 61
     3a0:	9a 87       	std	Y+10, r25	; 0x0a
     3a2:	89 87       	std	Y+9, r24	; 0x09
     3a4:	1b 01       	movw	r2, r22
     3a6:	2d 83       	std	Y+5, r18	; 0x05
     3a8:	3e 83       	std	Y+6, r19	; 0x06
     3aa:	4f 83       	std	Y+7, r20	; 0x07
     3ac:	58 87       	std	Y+8, r21	; 0x08
     3ae:	27 01       	movw	r4, r14
     3b0:	38 01       	movw	r6, r16
     3b2:	ca 01       	movw	r24, r20
     3b4:	b9 01       	movw	r22, r18
     3b6:	0e 94 99 11 	call	0x2332	; 0x2332 <square>
     3ba:	69 83       	std	Y+1, r22	; 0x01
     3bc:	7a 83       	std	Y+2, r23	; 0x02
     3be:	8b 83       	std	Y+3, r24	; 0x03
     3c0:	9c 83       	std	Y+4, r25	; 0x04
     3c2:	c6 01       	movw	r24, r12
     3c4:	b5 01       	movw	r22, r10
     3c6:	0e 94 99 11 	call	0x2332	; 0x2332 <square>
     3ca:	6b 01       	movw	r12, r22
     3cc:	7c 01       	movw	r14, r24
     3ce:	a7 01       	movw	r20, r14
     3d0:	96 01       	movw	r18, r12
     3d2:	69 81       	ldd	r22, Y+1	; 0x01
     3d4:	7a 81       	ldd	r23, Y+2	; 0x02
     3d6:	8b 81       	ldd	r24, Y+3	; 0x03
     3d8:	9c 81       	ldd	r25, Y+4	; 0x04
     3da:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
     3de:	0e 94 59 11 	call	0x22b2	; 0x22b2 <sqrt>
     3e2:	9b 01       	movw	r18, r22
     3e4:	ac 01       	movw	r20, r24
     3e6:	c3 01       	movw	r24, r6
     3e8:	b2 01       	movw	r22, r4
     3ea:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <atan2>
     3ee:	e9 85       	ldd	r30, Y+9	; 0x09
     3f0:	fa 85       	ldd	r31, Y+10	; 0x0a
     3f2:	60 83       	st	Z, r22
     3f4:	71 83       	std	Z+1, r23	; 0x01
     3f6:	82 83       	std	Z+2, r24	; 0x02
     3f8:	93 83       	std	Z+3, r25	; 0x03
     3fa:	c3 01       	movw	r24, r6
     3fc:	b2 01       	movw	r22, r4
     3fe:	0e 94 99 11 	call	0x2332	; 0x2332 <square>
     402:	4b 01       	movw	r8, r22
     404:	5c 01       	movw	r10, r24
     406:	a5 01       	movw	r20, r10
     408:	94 01       	movw	r18, r8
     40a:	c7 01       	movw	r24, r14
     40c:	b6 01       	movw	r22, r12
     40e:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
     412:	0e 94 59 11 	call	0x22b2	; 0x22b2 <sqrt>
     416:	9b 01       	movw	r18, r22
     418:	ac 01       	movw	r20, r24
     41a:	6d 81       	ldd	r22, Y+5	; 0x05
     41c:	7e 81       	ldd	r23, Y+6	; 0x06
     41e:	8f 81       	ldd	r24, Y+7	; 0x07
     420:	98 85       	ldd	r25, Y+8	; 0x08
     422:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <atan2>
     426:	f1 01       	movw	r30, r2
     428:	60 83       	st	Z, r22
     42a:	71 83       	std	Z+1, r23	; 0x01
     42c:	82 83       	std	Z+2, r24	; 0x02
     42e:	93 83       	std	Z+3, r25	; 0x03
     430:	2a 96       	adiw	r28, 0x0a	; 10
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	0f 91       	pop	r16
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	df 90       	pop	r13
     44a:	cf 90       	pop	r12
     44c:	bf 90       	pop	r11
     44e:	af 90       	pop	r10
     450:	9f 90       	pop	r9
     452:	8f 90       	pop	r8
     454:	7f 90       	pop	r7
     456:	6f 90       	pop	r6
     458:	5f 90       	pop	r5
     45a:	4f 90       	pop	r4
     45c:	3f 90       	pop	r3
     45e:	2f 90       	pop	r2
     460:	08 95       	ret

00000462 <main>:
#endif

int main(void) {
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
     46a:	c6 54       	subi	r28, 0x46	; 70
     46c:	d1 09       	sbc	r29, r1
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
	int16_t az = 0;
	int16_t gx = 0;
	int16_t gy = 0;
	int16_t gz = 0;
	*/
	double qw = 1.0f;
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	a0 e8       	ldi	r26, 0x80	; 128
     47e:	bf e3       	ldi	r27, 0x3F	; 63
     480:	89 83       	std	Y+1, r24	; 0x01
     482:	9a 83       	std	Y+2, r25	; 0x02
     484:	ab 83       	std	Y+3, r26	; 0x03
     486:	bc 83       	std	Y+4, r27	; 0x04
	double qx = 0.0f;
     488:	1d 82       	std	Y+5, r1	; 0x05
     48a:	1e 82       	std	Y+6, r1	; 0x06
     48c:	1f 82       	std	Y+7, r1	; 0x07
     48e:	18 86       	std	Y+8, r1	; 0x08
	double qy = 0.0f;
     490:	19 86       	std	Y+9, r1	; 0x09
     492:	1a 86       	std	Y+10, r1	; 0x0a
     494:	1b 86       	std	Y+11, r1	; 0x0b
     496:	1c 86       	std	Y+12, r1	; 0x0c
	double qz = 0.0f;
     498:	1d 86       	std	Y+13, r1	; 0x0d
     49a:	1e 86       	std	Y+14, r1	; 0x0e
     49c:	1f 86       	std	Y+15, r1	; 0x0f
     49e:	18 8a       	std	Y+16, r1	; 0x10
	double roll = 0.0f;		//around x axis
     4a0:	19 8a       	std	Y+17, r1	; 0x11
     4a2:	1a 8a       	std	Y+18, r1	; 0x12
     4a4:	1b 8a       	std	Y+19, r1	; 0x13
     4a6:	1c 8a       	std	Y+20, r1	; 0x14
	double pitch = 0.0f;	//around y axis
     4a8:	1d 8a       	std	Y+21, r1	; 0x15
     4aa:	1e 8a       	std	Y+22, r1	; 0x16
     4ac:	1f 8a       	std	Y+23, r1	; 0x17
     4ae:	18 8e       	std	Y+24, r1	; 0x18
	double yaw = 0.0f;		//around z axis
     4b0:	19 8e       	std	Y+25, r1	; 0x19
     4b2:	1a 8e       	std	Y+26, r1	; 0x1a
     4b4:	1b 8e       	std	Y+27, r1	; 0x1b
     4b6:	1c 8e       	std	Y+28, r1	; 0x1c
	double dt = .005;		//based on sampling frequency (200Hz)
	double alpha = tau / (tau + dt);
	double rollFilt = 0.0;	//filtered angles
	double pitchFilt = 0.0;
	//double yawFilt = 0.0;
	double rollAccel = 0.0;	//angles calculated from acceleration data
     4b8:	1d 8e       	std	Y+29, r1	; 0x1d
     4ba:	1e 8e       	std	Y+30, r1	; 0x1e
     4bc:	1f 8e       	std	Y+31, r1	; 0x1f
     4be:	18 a2       	std	Y+32, r1	; 0x20
	double pitchAccel = 0.0;
     4c0:	19 a2       	std	Y+33, r1	; 0x21
     4c2:	1a a2       	std	Y+34, r1	; 0x22
     4c4:	1b a2       	std	Y+35, r1	; 0x23
     4c6:	1c a2       	std	Y+36, r1	; 0x24
	//double yawAccel = 0,0;
	double axg = 0;
     4c8:	1d a2       	std	Y+37, r1	; 0x25
     4ca:	1e a2       	std	Y+38, r1	; 0x26
     4cc:	1f a2       	std	Y+39, r1	; 0x27
     4ce:	18 a6       	std	Y+40, r1	; 0x28
	double ayg = 0;
     4d0:	19 a6       	std	Y+41, r1	; 0x29
     4d2:	1a a6       	std	Y+42, r1	; 0x2a
     4d4:	1b a6       	std	Y+43, r1	; 0x2b
     4d6:	1c a6       	std	Y+44, r1	; 0x2c
	double azg = 0;
     4d8:	1d a6       	std	Y+45, r1	; 0x2d
     4da:	1e a6       	std	Y+46, r1	; 0x2e
     4dc:	1f a6       	std	Y+47, r1	; 0x2f
     4de:	18 aa       	std	Y+48, r1	; 0x30
	double gxds = 0;
     4e0:	19 aa       	std	Y+49, r1	; 0x31
     4e2:	1a aa       	std	Y+50, r1	; 0x32
     4e4:	1b aa       	std	Y+51, r1	; 0x33
     4e6:	1c aa       	std	Y+52, r1	; 0x34
	double gyds = 0;
     4e8:	1d aa       	std	Y+53, r1	; 0x35
     4ea:	1e aa       	std	Y+54, r1	; 0x36
     4ec:	1f aa       	std	Y+55, r1	; 0x37
     4ee:	18 ae       	std	Y+56, r1	; 0x38
	double gzds = 0;
     4f0:	19 ae       	std	Y+57, r1	; 0x39
     4f2:	1a ae       	std	Y+58, r1	; 0x3a
     4f4:	1b ae       	std	Y+59, r1	; 0x3b
     4f6:	1c ae       	std	Y+60, r1	; 0x3c
	#endif

	//init uart
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
     4f8:	83 e3       	ldi	r24, 0x33	; 51
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <uart_init>

	//init interrupt
	sei();
     500:	78 94       	sei

	//init mpu6050
	mpu6050_init();
     502:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <mpu6050_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     506:	2f e7       	ldi	r18, 0x7F	; 127
     508:	88 e3       	ldi	r24, 0x38	; 56
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	21 50       	subi	r18, 0x01	; 1
     50e:	80 40       	sbci	r24, 0x00	; 0
     510:	90 40       	sbci	r25, 0x00	; 0
     512:	e1 f7       	brne	.-8      	; 0x50c <main+0xaa>
     514:	00 c0       	rjmp	.+0      	; 0x516 <main+0xb4>
     516:	00 00       	nop
		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
		mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
		#endif
		
		#if MPU6050_GETATTITUDE == 1
		mpu6050_getQuaternion(&qw, &qx, &qy, &qz);
     518:	9e 01       	movw	r18, r28
     51a:	23 5f       	subi	r18, 0xF3	; 243
     51c:	3f 4f       	sbci	r19, 0xFF	; 255
     51e:	ae 01       	movw	r20, r28
     520:	47 5f       	subi	r20, 0xF7	; 247
     522:	5f 4f       	sbci	r21, 0xFF	; 255
     524:	be 01       	movw	r22, r28
     526:	6b 5f       	subi	r22, 0xFB	; 251
     528:	7f 4f       	sbci	r23, 0xFF	; 255
     52a:	ce 01       	movw	r24, r28
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <mpu6050_getQuaternion>
		//mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
		//uart_puts("A\r\n");
		//mpu6050_updateQuaternion();	//applies mahony filter to deal with drift?
		//uart_puts("B\r\n");
		mpu6050_getRollPitchYaw(&roll, &pitch, &yaw);
     532:	ae 01       	movw	r20, r28
     534:	47 5e       	subi	r20, 0xE7	; 231
     536:	5f 4f       	sbci	r21, 0xFF	; 255
     538:	be 01       	movw	r22, r28
     53a:	6b 5e       	subi	r22, 0xEB	; 235
     53c:	7f 4f       	sbci	r23, 0xFF	; 255
     53e:	ce 01       	movw	r24, r28
     540:	41 96       	adiw	r24, 0x11	; 17
     542:	0e 94 14 0c 	call	0x1828	; 0x1828 <mpu6050_getRollPitchYaw>
		mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
     546:	ce 01       	movw	r24, r28
     548:	c9 96       	adiw	r24, 0x39	; 57
     54a:	7c 01       	movw	r14, r24
     54c:	8e 01       	movw	r16, r28
     54e:	0b 5c       	subi	r16, 0xCB	; 203
     550:	1f 4f       	sbci	r17, 0xFF	; 255
     552:	9e 01       	movw	r18, r28
     554:	2f 5c       	subi	r18, 0xCF	; 207
     556:	3f 4f       	sbci	r19, 0xFF	; 255
     558:	ae 01       	movw	r20, r28
     55a:	43 5d       	subi	r20, 0xD3	; 211
     55c:	5f 4f       	sbci	r21, 0xFF	; 255
     55e:	be 01       	movw	r22, r28
     560:	67 5d       	subi	r22, 0xD7	; 215
     562:	7f 4f       	sbci	r23, 0xFF	; 255
     564:	44 97       	sbiw	r24, 0x14	; 20
     566:	0e 94 f5 04 	call	0x9ea	; 0x9ea <mpu6050_getConvData>
		anglesFromAccel(&rollAccel, &pitchAccel, axg, ayg, azg);
     56a:	ad a4       	ldd	r10, Y+45	; 0x2d
     56c:	be a4       	ldd	r11, Y+46	; 0x2e
     56e:	cf a4       	ldd	r12, Y+47	; 0x2f
     570:	d8 a8       	ldd	r13, Y+48	; 0x30
     572:	e9 a4       	ldd	r14, Y+41	; 0x29
     574:	fa a4       	ldd	r15, Y+42	; 0x2a
     576:	0b a5       	ldd	r16, Y+43	; 0x2b
     578:	1c a5       	ldd	r17, Y+44	; 0x2c
     57a:	2d a1       	ldd	r18, Y+37	; 0x25
     57c:	3e a1       	ldd	r19, Y+38	; 0x26
     57e:	4f a1       	ldd	r20, Y+39	; 0x27
     580:	58 a5       	ldd	r21, Y+40	; 0x28
     582:	be 01       	movw	r22, r28
     584:	6f 5d       	subi	r22, 0xDF	; 223
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	ce 01       	movw	r24, r28
     58a:	4d 96       	adiw	r24, 0x1d	; 29
     58c:	0e 94 b6 01 	call	0x36c	; 0x36c <anglesFromAccel>
		mpu6050_getRollPitchYaw(&roll, &pitch, &yaw);
     590:	ae 01       	movw	r20, r28
     592:	47 5e       	subi	r20, 0xE7	; 231
     594:	5f 4f       	sbci	r21, 0xFF	; 255
     596:	be 01       	movw	r22, r28
     598:	6b 5e       	subi	r22, 0xEB	; 235
     59a:	7f 4f       	sbci	r23, 0xFF	; 255
     59c:	ce 01       	movw	r24, r28
     59e:	41 96       	adiw	r24, 0x11	; 17
     5a0:	0e 94 14 0c 	call	0x1828	; 0x1828 <mpu6050_getRollPitchYaw>
     5a4:	8f e1       	ldi	r24, 0x1F	; 31
     5a6:	9e e4       	ldi	r25, 0x4E	; 78
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <main+0x146>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <main+0x14c>
     5ae:	00 00       	nop
		uart_putc('\n');
		*/
		
		//change values to degrees
		roll_d = roll*180/3.1415;
		pitch_d = pitch*180/3.1415;
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	44 e3       	ldi	r20, 0x34	; 52
     5b6:	53 e4       	ldi	r21, 0x43	; 67
     5b8:	6d 89       	ldd	r22, Y+21	; 0x15
     5ba:	7e 89       	ldd	r23, Y+22	; 0x16
     5bc:	8f 89       	ldd	r24, Y+23	; 0x17
     5be:	98 8d       	ldd	r25, Y+24	; 0x18
     5c0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     5c4:	26 e5       	ldi	r18, 0x56	; 86
     5c6:	3e e0       	ldi	r19, 0x0E	; 14
     5c8:	49 e4       	ldi	r20, 0x49	; 73
     5ca:	50 e4       	ldi	r21, 0x40	; 64
     5cc:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
     5d0:	4b 01       	movw	r8, r22
     5d2:	5c 01       	movw	r10, r24
		yaw_d = yaw*180/3.1415;
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	44 e3       	ldi	r20, 0x34	; 52
     5da:	53 e4       	ldi	r21, 0x43	; 67
     5dc:	69 8d       	ldd	r22, Y+25	; 0x19
     5de:	7a 8d       	ldd	r23, Y+26	; 0x1a
     5e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5e4:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     5e8:	26 e5       	ldi	r18, 0x56	; 86
     5ea:	3e e0       	ldi	r19, 0x0E	; 14
     5ec:	49 e4       	ldi	r20, 0x49	; 73
     5ee:	50 e4       	ldi	r21, 0x40	; 64
     5f0:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
     5f4:	6b 01       	movw	r12, r22
     5f6:	7c 01       	movw	r14, r24
		
		char itmp[10];
		dtostrf(roll_d, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	44 e3       	ldi	r20, 0x34	; 52
     5fe:	53 e4       	ldi	r21, 0x43	; 67
     600:	69 89       	ldd	r22, Y+17	; 0x11
     602:	7a 89       	ldd	r23, Y+18	; 0x12
     604:	8b 89       	ldd	r24, Y+19	; 0x13
     606:	9c 89       	ldd	r25, Y+20	; 0x14
     608:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     60c:	26 e5       	ldi	r18, 0x56	; 86
     60e:	3e e0       	ldi	r19, 0x0E	; 14
     610:	49 e4       	ldi	r20, 0x49	; 73
     612:	50 e4       	ldi	r21, 0x40	; 64
     614:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
     618:	8e 01       	movw	r16, r28
     61a:	03 5c       	subi	r16, 0xC3	; 195
     61c:	1f 4f       	sbci	r17, 0xFF	; 255
     61e:	25 e0       	ldi	r18, 0x05	; 5
     620:	43 e0       	ldi	r20, 0x03	; 3
     622:	0e 94 b2 11 	call	0x2364	; 0x2364 <dtostrf>
     626:	c8 01       	movw	r24, r16
     628:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <uart_puts>
     62c:	80 e2       	ldi	r24, 0x20	; 32
     62e:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <uart_putc>
		dtostrf(pitch_d, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     632:	25 e0       	ldi	r18, 0x05	; 5
     634:	43 e0       	ldi	r20, 0x03	; 3
     636:	c5 01       	movw	r24, r10
     638:	b4 01       	movw	r22, r8
     63a:	0e 94 b2 11 	call	0x2364	; 0x2364 <dtostrf>
     63e:	c8 01       	movw	r24, r16
     640:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <uart_puts>
     644:	80 e2       	ldi	r24, 0x20	; 32
     646:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <uart_putc>
		dtostrf(yaw_d, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     64a:	25 e0       	ldi	r18, 0x05	; 5
     64c:	43 e0       	ldi	r20, 0x03	; 3
     64e:	c7 01       	movw	r24, r14
     650:	b6 01       	movw	r22, r12
     652:	0e 94 b2 11 	call	0x2364	; 0x2364 <dtostrf>
     656:	c8 01       	movw	r24, r16
     658:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <uart_puts>
     65c:	80 e2       	ldi	r24, 0x20	; 32
     65e:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <uart_putc>
		uart_puts("\r\n");
     662:	84 e0       	ldi	r24, 0x04	; 4
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <uart_puts>
		
		uart_puts("\r\n");
     66a:	84 e0       	ldi	r24, 0x04	; 4
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <uart_puts>
     672:	9f ef       	ldi	r25, 0xFF	; 255
     674:	29 e6       	ldi	r18, 0x69	; 105
     676:	88 e1       	ldi	r24, 0x18	; 24
     678:	91 50       	subi	r25, 0x01	; 1
     67a:	20 40       	sbci	r18, 0x00	; 0
     67c:	80 40       	sbci	r24, 0x00	; 0
     67e:	e1 f7       	brne	.-8      	; 0x678 <main+0x216>
     680:	00 c0       	rjmp	.+0      	; 0x682 <main+0x220>
     682:	00 00       	nop
     684:	49 cf       	rjmp	.-366    	; 0x518 <main+0xb6>

00000686 <mpu6050_readBytes>:
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
	if(buffer[0] == 0x34)
		return 1;
	else
		return 0;
}
     686:	af 92       	push	r10
     688:	bf 92       	push	r11
     68a:	cf 92       	push	r12
     68c:	df 92       	push	r13
     68e:	ff 92       	push	r15
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	66 23       	and	r22, r22
     69a:	b9 f1       	breq	.+110    	; 0x70a <mpu6050_readBytes+0x84>
     69c:	c5 2f       	mov	r28, r21
     69e:	d4 2f       	mov	r29, r20
     6a0:	f6 2e       	mov	r15, r22
     6a2:	18 2f       	mov	r17, r24
     6a4:	80 ed       	ldi	r24, 0xD0	; 208
     6a6:	0e 94 0b 01 	call	0x216	; 0x216 <i2c_start>
     6aa:	81 2f       	mov	r24, r17
     6ac:	0e 94 61 01 	call	0x2c2	; 0x2c2 <i2c_write>
     6b0:	8a e1       	ldi	r24, 0x1A	; 26
     6b2:	8a 95       	dec	r24
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <mpu6050_readBytes+0x2c>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <mpu6050_readBytes+0x32>
     6b8:	81 ed       	ldi	r24, 0xD1	; 209
     6ba:	0e 94 0b 01 	call	0x216	; 0x216 <i2c_start>
     6be:	0d 2f       	mov	r16, r29
     6c0:	1c 2f       	mov	r17, r28
     6c2:	cc 24       	eor	r12, r12
     6c4:	ca 94       	dec	r12
     6c6:	cf 0c       	add	r12, r15
     6c8:	d1 2c       	mov	r13, r1
     6ca:	ef ef       	ldi	r30, 0xFF	; 255
     6cc:	ce 1a       	sub	r12, r30
     6ce:	de 0a       	sbc	r13, r30
     6d0:	c0 e0       	ldi	r28, 0x00	; 0
     6d2:	d0 e0       	ldi	r29, 0x00	; 0
     6d4:	af 2c       	mov	r10, r15
     6d6:	b1 2c       	mov	r11, r1
     6d8:	f1 e0       	ldi	r31, 0x01	; 1
     6da:	af 1a       	sub	r10, r31
     6dc:	b1 08       	sbc	r11, r1
     6de:	ac 16       	cp	r10, r28
     6e0:	bd 06       	cpc	r11, r29
     6e2:	29 f4       	brne	.+10     	; 0x6ee <mpu6050_readBytes+0x68>
     6e4:	0e 94 9c 01 	call	0x338	; 0x338 <i2c_readNak>
     6e8:	f8 01       	movw	r30, r16
     6ea:	80 83       	st	Z, r24
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <mpu6050_readBytes+0x70>
     6ee:	0e 94 82 01 	call	0x304	; 0x304 <i2c_readAck>
     6f2:	f8 01       	movw	r30, r16
     6f4:	80 83       	st	Z, r24
     6f6:	21 96       	adiw	r28, 0x01	; 1
     6f8:	0f 5f       	subi	r16, 0xFF	; 255
     6fa:	1f 4f       	sbci	r17, 0xFF	; 255
     6fc:	cc 15       	cp	r28, r12
     6fe:	dd 05       	cpc	r29, r13
     700:	71 f7       	brne	.-36     	; 0x6de <mpu6050_readBytes+0x58>
     702:	cf 2d       	mov	r28, r15
     704:	0e 94 51 01 	call	0x2a2	; 0x2a2 <i2c_stop>
     708:	01 c0       	rjmp	.+2      	; 0x70c <mpu6050_readBytes+0x86>
     70a:	c0 e0       	ldi	r28, 0x00	; 0
     70c:	8c 2f       	mov	r24, r28
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	ff 90       	pop	r15
     718:	df 90       	pop	r13
     71a:	cf 90       	pop	r12
     71c:	bf 90       	pop	r11
     71e:	af 90       	pop	r10
     720:	08 95       	ret

00000722 <mpu6050_readByte>:
     722:	ab 01       	movw	r20, r22
     724:	61 e0       	ldi	r22, 0x01	; 1
     726:	0e 94 43 03 	call	0x686	; 0x686 <mpu6050_readBytes>
     72a:	08 95       	ret

0000072c <mpu6050_writeBytes>:
     72c:	ef 92       	push	r14
     72e:	ff 92       	push	r15
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	66 23       	and	r22, r22
     73a:	d1 f0       	breq	.+52     	; 0x770 <mpu6050_writeBytes+0x44>
     73c:	7a 01       	movw	r14, r20
     73e:	16 2f       	mov	r17, r22
     740:	c8 2f       	mov	r28, r24
     742:	80 ed       	ldi	r24, 0xD0	; 208
     744:	0e 94 0b 01 	call	0x216	; 0x216 <i2c_start>
     748:	8c 2f       	mov	r24, r28
     74a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <i2c_write>
     74e:	e7 01       	movw	r28, r14
     750:	6f ef       	ldi	r22, 0xFF	; 255
     752:	61 0f       	add	r22, r17
     754:	06 2f       	mov	r16, r22
     756:	10 e0       	ldi	r17, 0x00	; 0
     758:	0f 5f       	subi	r16, 0xFF	; 255
     75a:	1f 4f       	sbci	r17, 0xFF	; 255
     75c:	0e 0d       	add	r16, r14
     75e:	1f 1d       	adc	r17, r15
     760:	89 91       	ld	r24, Y+
     762:	0e 94 61 01 	call	0x2c2	; 0x2c2 <i2c_write>
     766:	c0 17       	cp	r28, r16
     768:	d1 07       	cpc	r29, r17
     76a:	d1 f7       	brne	.-12     	; 0x760 <mpu6050_writeBytes+0x34>
     76c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <i2c_stop>
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	08 95       	ret

0000077e <mpu6050_writeByte>:
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	1f 92       	push	r1
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	69 83       	std	Y+1, r22	; 0x01
     78a:	ae 01       	movw	r20, r28
     78c:	4f 5f       	subi	r20, 0xFF	; 255
     78e:	5f 4f       	sbci	r21, 0xFF	; 255
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	0e 94 96 03 	call	0x72c	; 0x72c <mpu6050_writeBytes>
     796:	0f 90       	pop	r0
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <mpu6050_readBit>:
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	1f 92       	push	r1
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
     7ae:	f6 2e       	mov	r15, r22
     7b0:	8a 01       	movw	r16, r20
     7b2:	be 01       	movw	r22, r28
     7b4:	6f 5f       	subi	r22, 0xFF	; 255
     7b6:	7f 4f       	sbci	r23, 0xFF	; 255
     7b8:	0e 94 91 03 	call	0x722	; 0x722 <mpu6050_readByte>
     7bc:	21 e0       	ldi	r18, 0x01	; 1
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <mpu6050_readBit+0x28>
     7c2:	22 0f       	add	r18, r18
     7c4:	33 1f       	adc	r19, r19
     7c6:	fa 94       	dec	r15
     7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <mpu6050_readBit+0x24>
     7ca:	99 81       	ldd	r25, Y+1	; 0x01
     7cc:	29 23       	and	r18, r25
     7ce:	f8 01       	movw	r30, r16
     7d0:	20 83       	st	Z, r18
     7d2:	0f 90       	pop	r0
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	08 95       	ret

000007e0 <mpu6050_writeBits>:
     7e0:	ef 92       	push	r14
     7e2:	ff 92       	push	r15
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	1f 92       	push	r1
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	44 23       	and	r20, r20
     7f4:	89 f1       	breq	.+98     	; 0x858 <mpu6050_writeBits+0x78>
     7f6:	f2 2e       	mov	r15, r18
     7f8:	14 2f       	mov	r17, r20
     7fa:	06 2f       	mov	r16, r22
     7fc:	e8 2e       	mov	r14, r24
     7fe:	19 82       	std	Y+1, r1	; 0x01
     800:	be 01       	movw	r22, r28
     802:	6f 5f       	subi	r22, 0xFF	; 255
     804:	7f 4f       	sbci	r23, 0xFF	; 255
     806:	0e 94 91 03 	call	0x722	; 0x722 <mpu6050_readByte>
     80a:	88 23       	and	r24, r24
     80c:	29 f1       	breq	.+74     	; 0x858 <mpu6050_writeBits+0x78>
     80e:	40 2f       	mov	r20, r16
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	41 1b       	sub	r20, r17
     814:	51 09       	sbc	r21, r1
     816:	4f 5f       	subi	r20, 0xFF	; 255
     818:	5f 4f       	sbci	r21, 0xFF	; 255
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	02 c0       	rjmp	.+4      	; 0x824 <mpu6050_writeBits+0x44>
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	1a 95       	dec	r17
     826:	e2 f7       	brpl	.-8      	; 0x820 <mpu6050_writeBits+0x40>
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	04 2e       	mov	r0, r20
     82c:	02 c0       	rjmp	.+4      	; 0x832 <mpu6050_writeBits+0x52>
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
     832:	0a 94       	dec	r0
     834:	e2 f7       	brpl	.-8      	; 0x82e <mpu6050_writeBits+0x4e>
     836:	2f 2d       	mov	r18, r15
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	02 c0       	rjmp	.+4      	; 0x840 <mpu6050_writeBits+0x60>
     83c:	22 0f       	add	r18, r18
     83e:	33 1f       	adc	r19, r19
     840:	4a 95       	dec	r20
     842:	e2 f7       	brpl	.-8      	; 0x83c <mpu6050_writeBits+0x5c>
     844:	68 2f       	mov	r22, r24
     846:	60 95       	com	r22
     848:	99 81       	ldd	r25, Y+1	; 0x01
     84a:	69 23       	and	r22, r25
     84c:	82 23       	and	r24, r18
     84e:	68 2b       	or	r22, r24
     850:	69 83       	std	Y+1, r22	; 0x01
     852:	8e 2d       	mov	r24, r14
     854:	0e 94 bf 03 	call	0x77e	; 0x77e <mpu6050_writeByte>
     858:	0f 90       	pop	r0
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	08 95       	ret

00000868 <mpu6050_writeBit>:
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	1f 92       	push	r1
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
     878:	18 2f       	mov	r17, r24
     87a:	06 2f       	mov	r16, r22
     87c:	f4 2e       	mov	r15, r20
     87e:	be 01       	movw	r22, r28
     880:	6f 5f       	subi	r22, 0xFF	; 255
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	0e 94 91 03 	call	0x722	; 0x722 <mpu6050_readByte>
     888:	ff 20       	and	r15, r15
     88a:	51 f0       	breq	.+20     	; 0x8a0 <mpu6050_writeBit+0x38>
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	02 c0       	rjmp	.+4      	; 0x896 <mpu6050_writeBit+0x2e>
     892:	66 0f       	add	r22, r22
     894:	77 1f       	adc	r23, r23
     896:	0a 95       	dec	r16
     898:	e2 f7       	brpl	.-8      	; 0x892 <mpu6050_writeBit+0x2a>
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	68 2b       	or	r22, r24
     89e:	0a c0       	rjmp	.+20     	; 0x8b4 <mpu6050_writeBit+0x4c>
     8a0:	61 e0       	ldi	r22, 0x01	; 1
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <mpu6050_writeBit+0x42>
     8a6:	66 0f       	add	r22, r22
     8a8:	77 1f       	adc	r23, r23
     8aa:	0a 95       	dec	r16
     8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <mpu6050_writeBit+0x3e>
     8ae:	60 95       	com	r22
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	68 23       	and	r22, r24
     8b4:	69 83       	std	Y+1, r22	; 0x01
     8b6:	81 2f       	mov	r24, r17
     8b8:	0e 94 bf 03 	call	0x77e	; 0x77e <mpu6050_writeByte>
     8bc:	0f 90       	pop	r0
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	08 95       	ret

000008ca <mpu6050_setSleepDisabled>:
     8ca:	40 e0       	ldi	r20, 0x00	; 0
     8cc:	66 e0       	ldi	r22, 0x06	; 6
     8ce:	8b e6       	ldi	r24, 0x6B	; 107
     8d0:	0e 94 34 04 	call	0x868	; 0x868 <mpu6050_writeBit>
     8d4:	08 95       	ret

000008d6 <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
     8d6:	0e 94 05 01 	call	0x20a	; 0x20a <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8da:	2a e1       	ldi	r18, 0x1A	; 26
     8dc:	2a 95       	dec	r18
     8de:	f1 f7       	brne	.-4      	; 0x8dc <mpu6050_init+0x6>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <mpu6050_init+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	90 e7       	ldi	r25, 0x70	; 112
     8e6:	22 e0       	ldi	r18, 0x02	; 2
     8e8:	81 50       	subi	r24, 0x01	; 1
     8ea:	90 40       	sbci	r25, 0x00	; 0
     8ec:	20 40       	sbci	r18, 0x00	; 0
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <mpu6050_init+0x12>
     8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <mpu6050_init+0x1c>
     8f2:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
     8f4:	0e 94 65 04 	call	0x8ca	; 0x8ca <mpu6050_setSleepDisabled>
     8f8:	8f e1       	ldi	r24, 0x1F	; 31
     8fa:	9e e4       	ldi	r25, 0x4E	; 78
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	f1 f7       	brne	.-4      	; 0x8fc <mpu6050_init+0x26>
     900:	00 c0       	rjmp	.+0      	; 0x902 <__stack+0x3>
     902:	00 00       	nop
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
     904:	21 e0       	ldi	r18, 0x01	; 1
     906:	43 e0       	ldi	r20, 0x03	; 3
     908:	62 e0       	ldi	r22, 0x02	; 2
     90a:	8b e6       	ldi	r24, 0x6B	; 107
     90c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
     910:	23 e0       	ldi	r18, 0x03	; 3
     912:	43 e0       	ldi	r20, 0x03	; 3
     914:	62 e0       	ldi	r22, 0x02	; 2
     916:	8a e1       	ldi	r24, 0x1A	; 26
     918:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <mpu6050_writeBits>
    //set sample rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
     91c:	64 e0       	ldi	r22, 0x04	; 4
     91e:	89 e1       	ldi	r24, 0x19	; 25
     920:	0e 94 bf 03 	call	0x77e	; 0x77e <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
     924:	21 e0       	ldi	r18, 0x01	; 1
     926:	42 e0       	ldi	r20, 0x02	; 2
     928:	64 e0       	ldi	r22, 0x04	; 4
     92a:	8b e1       	ldi	r24, 0x1B	; 27
     92c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	42 e0       	ldi	r20, 0x02	; 2
     934:	64 e0       	ldi	r22, 0x04	; 4
     936:	8c e1       	ldi	r24, 0x1C	; 28
     938:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <mpu6050_writeBits>

	#if MPU6050_GETATTITUDE == 1
	MPU6050_TIMER0INIT
     93c:	85 b5       	in	r24, 0x25	; 37
     93e:	85 60       	ori	r24, 0x05	; 5
     940:	85 bd       	out	0x25, r24	; 37
     942:	ee e6       	ldi	r30, 0x6E	; 110
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 81       	ld	r24, Z
     948:	81 60       	ori	r24, 0x01	; 1
     94a:	80 83       	st	Z, r24
     94c:	08 95       	ret

0000094e <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     94e:	8f 92       	push	r8
     950:	9f 92       	push	r9
     952:	af 92       	push	r10
     954:	bf 92       	push	r11
     956:	cf 92       	push	r12
     958:	df 92       	push	r13
     95a:	ef 92       	push	r14
     95c:	ff 92       	push	r15
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	4c 01       	movw	r8, r24
     968:	5b 01       	movw	r10, r22
     96a:	6a 01       	movw	r12, r20
     96c:	e9 01       	movw	r28, r18
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
     96e:	45 e6       	ldi	r20, 0x65	; 101
     970:	51 e0       	ldi	r21, 0x01	; 1
     972:	6e e0       	ldi	r22, 0x0E	; 14
     974:	8b e3       	ldi	r24, 0x3B	; 59
     976:	0e 94 43 03 	call	0x686	; 0x686 <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     97a:	e5 e6       	ldi	r30, 0x65	; 101
     97c:	f1 e0       	ldi	r31, 0x01	; 1
     97e:	20 81       	ld	r18, Z
     980:	81 81       	ldd	r24, Z+1	; 0x01
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	92 2b       	or	r25, r18
     986:	d4 01       	movw	r26, r8
     988:	8d 93       	st	X+, r24
     98a:	9c 93       	st	X, r25
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     98c:	22 81       	ldd	r18, Z+2	; 0x02
     98e:	83 81       	ldd	r24, Z+3	; 0x03
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	92 2b       	or	r25, r18
     994:	d5 01       	movw	r26, r10
     996:	8d 93       	st	X+, r24
     998:	9c 93       	st	X, r25
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
     99a:	24 81       	ldd	r18, Z+4	; 0x04
     99c:	85 81       	ldd	r24, Z+5	; 0x05
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	92 2b       	or	r25, r18
     9a2:	d6 01       	movw	r26, r12
     9a4:	8d 93       	st	X+, r24
     9a6:	9c 93       	st	X, r25
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     9a8:	20 85       	ldd	r18, Z+8	; 0x08
     9aa:	81 85       	ldd	r24, Z+9	; 0x09
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	92 2b       	or	r25, r18
     9b0:	99 83       	std	Y+1, r25	; 0x01
     9b2:	88 83       	st	Y, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     9b4:	22 85       	ldd	r18, Z+10	; 0x0a
     9b6:	83 85       	ldd	r24, Z+11	; 0x0b
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	92 2b       	or	r25, r18
     9bc:	d8 01       	movw	r26, r16
     9be:	8d 93       	st	X+, r24
     9c0:	9c 93       	st	X, r25
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     9c2:	24 85       	ldd	r18, Z+12	; 0x0c
     9c4:	85 85       	ldd	r24, Z+13	; 0x0d
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	92 2b       	or	r25, r18
     9ca:	f7 01       	movw	r30, r14
     9cc:	91 83       	std	Z+1, r25	; 0x01
     9ce:	80 83       	st	Z, r24
}
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	df 90       	pop	r13
     9de:	cf 90       	pop	r12
     9e0:	bf 90       	pop	r11
     9e2:	af 90       	pop	r10
     9e4:	9f 90       	pop	r9
     9e6:	8f 90       	pop	r8
     9e8:	08 95       	ret

000009ea <mpu6050_getConvData>:

/*
 * get raw data converted to g and deg/sec values
 */
void mpu6050_getConvData(double* axg, double* ayg, double* azg, double* gxds, double* gyds, double* gzds) {
     9ea:	2f 92       	push	r2
     9ec:	3f 92       	push	r3
     9ee:	4f 92       	push	r4
     9f0:	5f 92       	push	r5
     9f2:	6f 92       	push	r6
     9f4:	7f 92       	push	r7
     9f6:	8f 92       	push	r8
     9f8:	9f 92       	push	r9
     9fa:	af 92       	push	r10
     9fc:	bf 92       	push	r11
     9fe:	cf 92       	push	r12
     a00:	df 92       	push	r13
     a02:	ef 92       	push	r14
     a04:	ff 92       	push	r15
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	cd b7       	in	r28, 0x3d	; 61
     a10:	de b7       	in	r29, 0x3e	; 62
     a12:	2c 97       	sbiw	r28, 0x0c	; 12
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	f8 94       	cli
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	cd bf       	out	0x3d, r28	; 61
     a1e:	3c 01       	movw	r6, r24
     a20:	4b 01       	movw	r8, r22
     a22:	5a 01       	movw	r10, r20
     a24:	69 01       	movw	r12, r18
     a26:	28 01       	movw	r4, r16
     a28:	17 01       	movw	r2, r14
	int16_t ax = 0;
     a2a:	1a 82       	std	Y+2, r1	; 0x02
     a2c:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
     a2e:	1c 82       	std	Y+4, r1	; 0x04
     a30:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
     a32:	1e 82       	std	Y+6, r1	; 0x06
     a34:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
     a36:	18 86       	std	Y+8, r1	; 0x08
     a38:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
     a3a:	1a 86       	std	Y+10, r1	; 0x0a
     a3c:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
     a3e:	1c 86       	std	Y+12, r1	; 0x0c
     a40:	1b 86       	std	Y+11, r1	; 0x0b
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     a42:	ce 01       	movw	r24, r28
     a44:	0b 96       	adiw	r24, 0x0b	; 11
     a46:	7c 01       	movw	r14, r24
     a48:	8e 01       	movw	r16, r28
     a4a:	07 5f       	subi	r16, 0xF7	; 247
     a4c:	1f 4f       	sbci	r17, 0xFF	; 255
     a4e:	9e 01       	movw	r18, r28
     a50:	29 5f       	subi	r18, 0xF9	; 249
     a52:	3f 4f       	sbci	r19, 0xFF	; 255
     a54:	ae 01       	movw	r20, r28
     a56:	4b 5f       	subi	r20, 0xFB	; 251
     a58:	5f 4f       	sbci	r21, 0xFF	; 255
     a5a:	be 01       	movw	r22, r28
     a5c:	6d 5f       	subi	r22, 0xFD	; 253
     a5e:	7f 4f       	sbci	r23, 0xFF	; 255
     a60:	0a 97       	sbiw	r24, 0x0a	; 10
     a62:	0e 94 a7 04 	call	0x94e	; 0x94e <mpu6050_getRawData>

	#if MPU6050_CALIBRATEDACCGYRO == 1
    *axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
     a66:	69 81       	ldd	r22, Y+1	; 0x01
     a68:	7a 81       	ldd	r23, Y+2	; 0x02
     a6a:	07 2e       	mov	r0, r23
     a6c:	00 0c       	add	r0, r0
     a6e:	88 0b       	sbc	r24, r24
     a70:	99 0b       	sbc	r25, r25
     a72:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__floatsisf>
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	40 e8       	ldi	r20, 0x80	; 128
     a7c:	58 e3       	ldi	r21, 0x38	; 56
     a7e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     a82:	f3 01       	movw	r30, r6
     a84:	60 83       	st	Z, r22
     a86:	71 83       	std	Z+1, r23	; 0x01
     a88:	82 83       	std	Z+2, r24	; 0x02
     a8a:	93 83       	std	Z+3, r25	; 0x03
    *ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
     a8c:	6b 81       	ldd	r22, Y+3	; 0x03
     a8e:	7c 81       	ldd	r23, Y+4	; 0x04
     a90:	07 2e       	mov	r0, r23
     a92:	00 0c       	add	r0, r0
     a94:	88 0b       	sbc	r24, r24
     a96:	99 0b       	sbc	r25, r25
     a98:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__floatsisf>
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	40 e8       	ldi	r20, 0x80	; 128
     aa2:	58 e3       	ldi	r21, 0x38	; 56
     aa4:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     aa8:	f4 01       	movw	r30, r8
     aaa:	60 83       	st	Z, r22
     aac:	71 83       	std	Z+1, r23	; 0x01
     aae:	82 83       	std	Z+2, r24	; 0x02
     ab0:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
     ab2:	6d 81       	ldd	r22, Y+5	; 0x05
     ab4:	7e 81       	ldd	r23, Y+6	; 0x06
     ab6:	07 2e       	mov	r0, r23
     ab8:	00 0c       	add	r0, r0
     aba:	88 0b       	sbc	r24, r24
     abc:	99 0b       	sbc	r25, r25
     abe:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__floatsisf>
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	40 e8       	ldi	r20, 0x80	; 128
     ac8:	58 e3       	ldi	r21, 0x38	; 56
     aca:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     ace:	f5 01       	movw	r30, r10
     ad0:	60 83       	st	Z, r22
     ad2:	71 83       	std	Z+1, r23	; 0x01
     ad4:	82 83       	std	Z+2, r24	; 0x02
     ad6:	93 83       	std	Z+3, r25	; 0x03
    *gxds = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN;
     ad8:	6f 81       	ldd	r22, Y+7	; 0x07
     ada:	78 85       	ldd	r23, Y+8	; 0x08
     adc:	66 5d       	subi	r22, 0xD6	; 214
     ade:	7f 4f       	sbci	r23, 0xFF	; 255
     ae0:	07 2e       	mov	r0, r23
     ae2:	00 0c       	add	r0, r0
     ae4:	88 0b       	sbc	r24, r24
     ae6:	99 0b       	sbc	r25, r25
     ae8:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__floatsisf>
     aec:	23 e3       	ldi	r18, 0x33	; 51
     aee:	33 e3       	ldi	r19, 0x33	; 51
     af0:	43 e8       	ldi	r20, 0x83	; 131
     af2:	51 e4       	ldi	r21, 0x41	; 65
     af4:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
     af8:	f6 01       	movw	r30, r12
     afa:	60 83       	st	Z, r22
     afc:	71 83       	std	Z+1, r23	; 0x01
     afe:	82 83       	std	Z+2, r24	; 0x02
     b00:	93 83       	std	Z+3, r25	; 0x03
	*gyds = (double)(gy-MPU6050_GYOFFSET)/MPU6050_GYGAIN;
     b02:	69 85       	ldd	r22, Y+9	; 0x09
     b04:	7a 85       	ldd	r23, Y+10	; 0x0a
     b06:	69 50       	subi	r22, 0x09	; 9
     b08:	71 09       	sbc	r23, r1
     b0a:	07 2e       	mov	r0, r23
     b0c:	00 0c       	add	r0, r0
     b0e:	88 0b       	sbc	r24, r24
     b10:	99 0b       	sbc	r25, r25
     b12:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__floatsisf>
     b16:	23 e3       	ldi	r18, 0x33	; 51
     b18:	33 e3       	ldi	r19, 0x33	; 51
     b1a:	43 e8       	ldi	r20, 0x83	; 131
     b1c:	51 e4       	ldi	r21, 0x41	; 65
     b1e:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
     b22:	f2 01       	movw	r30, r4
     b24:	60 83       	st	Z, r22
     b26:	71 83       	std	Z+1, r23	; 0x01
     b28:	82 83       	std	Z+2, r24	; 0x02
     b2a:	93 83       	std	Z+3, r25	; 0x03
	*gzds = (double)(gz-MPU6050_GZOFFSET)/MPU6050_GZGAIN;
     b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b30:	63 5e       	subi	r22, 0xE3	; 227
     b32:	7f 4f       	sbci	r23, 0xFF	; 255
     b34:	07 2e       	mov	r0, r23
     b36:	00 0c       	add	r0, r0
     b38:	88 0b       	sbc	r24, r24
     b3a:	99 0b       	sbc	r25, r25
     b3c:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__floatsisf>
     b40:	23 e3       	ldi	r18, 0x33	; 51
     b42:	33 e3       	ldi	r19, 0x33	; 51
     b44:	43 e8       	ldi	r20, 0x83	; 131
     b46:	51 e4       	ldi	r21, 0x41	; 65
     b48:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
     b4c:	f1 01       	movw	r30, r2
     b4e:	60 83       	st	Z, r22
     b50:	71 83       	std	Z+1, r23	; 0x01
     b52:	82 83       	std	Z+2, r24	; 0x02
     b54:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az)/MPU6050_AGAIN;
    *gxds = (double)(gx)/MPU6050_GGAIN;
	*gyds = (double)(gy)/MPU6050_GGAIN;
	*gzds = (double)(gz)/MPU6050_GGAIN;
	#endif
}
     b56:	2c 96       	adiw	r28, 0x0c	; 12
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	ef 90       	pop	r14
     b6e:	df 90       	pop	r13
     b70:	cf 90       	pop	r12
     b72:	bf 90       	pop	r11
     b74:	af 90       	pop	r10
     b76:	9f 90       	pop	r9
     b78:	8f 90       	pop	r8
     b7a:	7f 90       	pop	r7
     b7c:	6f 90       	pop	r6
     b7e:	5f 90       	pop	r5
     b80:	4f 90       	pop	r4
     b82:	3f 90       	pop	r3
     b84:	2f 90       	pop	r2
     b86:	08 95       	ret

00000b88 <mpu6050_mahonyUpdate>:
volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;
volatile float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
/*
 * Mahony update function (for 6DOF)
 */
void mpu6050_mahonyUpdate(float gx, float gy, float gz, float ax, float ay, float az) {
     b88:	4f 92       	push	r4
     b8a:	5f 92       	push	r5
     b8c:	6f 92       	push	r6
     b8e:	7f 92       	push	r7
     b90:	8f 92       	push	r8
     b92:	9f 92       	push	r9
     b94:	af 92       	push	r10
     b96:	bf 92       	push	r11
     b98:	cf 92       	push	r12
     b9a:	df 92       	push	r13
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	a4 97       	sbiw	r28, 0x24	; 36
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	6d 87       	std	Y+13, r22	; 0x0d
     bba:	7e 87       	std	Y+14, r23	; 0x0e
     bbc:	8f 87       	std	Y+15, r24	; 0x0f
     bbe:	98 8b       	std	Y+16, r25	; 0x10
     bc0:	29 8b       	std	Y+17, r18	; 0x11
     bc2:	3a 8b       	std	Y+18, r19	; 0x12
     bc4:	4b 8b       	std	Y+19, r20	; 0x13
     bc6:	5c 8b       	std	Y+20, r21	; 0x14
     bc8:	ed 8a       	std	Y+21, r14	; 0x15
     bca:	fe 8a       	std	Y+22, r15	; 0x16
     bcc:	0f 8b       	std	Y+23, r16	; 0x17
     bce:	18 8f       	std	Y+24, r17	; 0x18
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	a9 01       	movw	r20, r18
     bd6:	c6 01       	movw	r24, r12
     bd8:	b5 01       	movw	r22, r10
     bda:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__cmpsf2>
     bde:	81 11       	cpse	r24, r1
     be0:	17 c0       	rjmp	.+46     	; 0xc10 <mpu6050_mahonyUpdate+0x88>
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	a9 01       	movw	r20, r18
     be8:	6f a9       	ldd	r22, Y+55	; 0x37
     bea:	78 ad       	ldd	r23, Y+56	; 0x38
     bec:	89 ad       	ldd	r24, Y+57	; 0x39
     bee:	9a ad       	ldd	r25, Y+58	; 0x3a
     bf0:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__cmpsf2>
     bf4:	81 11       	cpse	r24, r1
     bf6:	0c c0       	rjmp	.+24     	; 0xc10 <mpu6050_mahonyUpdate+0x88>
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	a9 01       	movw	r20, r18
     bfe:	6b ad       	ldd	r22, Y+59	; 0x3b
     c00:	7c ad       	ldd	r23, Y+60	; 0x3c
     c02:	8d ad       	ldd	r24, Y+61	; 0x3d
     c04:	9e ad       	ldd	r25, Y+62	; 0x3e
     c06:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__cmpsf2>
     c0a:	88 23       	and	r24, r24
     c0c:	09 f4       	brne	.+2      	; 0xc10 <mpu6050_mahonyUpdate+0x88>
     c0e:	1a c2       	rjmp	.+1076   	; 0x1044 <mpu6050_mahonyUpdate+0x4bc>

		// Normalise accelerometer measurement
		norm = sqrt(ax * ax + ay * ay + az * az);
     c10:	a6 01       	movw	r20, r12
     c12:	95 01       	movw	r18, r10
     c14:	c6 01       	movw	r24, r12
     c16:	b5 01       	movw	r22, r10
     c18:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     c1c:	2b 01       	movw	r4, r22
     c1e:	3c 01       	movw	r6, r24
     c20:	2f a9       	ldd	r18, Y+55	; 0x37
     c22:	38 ad       	ldd	r19, Y+56	; 0x38
     c24:	49 ad       	ldd	r20, Y+57	; 0x39
     c26:	5a ad       	ldd	r21, Y+58	; 0x3a
     c28:	ca 01       	movw	r24, r20
     c2a:	b9 01       	movw	r22, r18
     c2c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     c30:	69 83       	std	Y+1, r22	; 0x01
     c32:	7a 83       	std	Y+2, r23	; 0x02
     c34:	8b 83       	std	Y+3, r24	; 0x03
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	9b 01       	movw	r18, r22
     c3a:	ac 01       	movw	r20, r24
     c3c:	c3 01       	movw	r24, r6
     c3e:	b2 01       	movw	r22, r4
     c40:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
     c44:	6d 8f       	std	Y+29, r22	; 0x1d
     c46:	7e 8f       	std	Y+30, r23	; 0x1e
     c48:	8f 8f       	std	Y+31, r24	; 0x1f
     c4a:	98 a3       	std	Y+32, r25	; 0x20
     c4c:	2b ad       	ldd	r18, Y+59	; 0x3b
     c4e:	3c ad       	ldd	r19, Y+60	; 0x3c
     c50:	4d ad       	ldd	r20, Y+61	; 0x3d
     c52:	5e ad       	ldd	r21, Y+62	; 0x3e
     c54:	ca 01       	movw	r24, r20
     c56:	b9 01       	movw	r22, r18
     c58:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     c5c:	69 8f       	std	Y+25, r22	; 0x19
     c5e:	7a 8f       	std	Y+26, r23	; 0x1a
     c60:	8b 8f       	std	Y+27, r24	; 0x1b
     c62:	9c 8f       	std	Y+28, r25	; 0x1c
     c64:	29 81       	ldd	r18, Y+1	; 0x01
     c66:	3a 81       	ldd	r19, Y+2	; 0x02
     c68:	4b 81       	ldd	r20, Y+3	; 0x03
     c6a:	5c 81       	ldd	r21, Y+4	; 0x04
     c6c:	c3 01       	movw	r24, r6
     c6e:	b2 01       	movw	r22, r4
     c70:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
     c74:	2b 01       	movw	r4, r22
     c76:	3c 01       	movw	r6, r24
     c78:	29 8d       	ldd	r18, Y+25	; 0x19
     c7a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     c7c:	4b 8d       	ldd	r20, Y+27	; 0x1b
     c7e:	5c 8d       	ldd	r21, Y+28	; 0x1c
     c80:	c3 01       	movw	r24, r6
     c82:	b2 01       	movw	r22, r4
     c84:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
     c88:	0e 94 59 11 	call	0x22b2	; 0x22b2 <sqrt>
     c8c:	2b 01       	movw	r4, r22
     c8e:	3c 01       	movw	r6, r24
		ax /= norm;
     c90:	9b 01       	movw	r18, r22
     c92:	ac 01       	movw	r20, r24
     c94:	c6 01       	movw	r24, r12
     c96:	b5 01       	movw	r22, r10
     c98:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
     c9c:	69 83       	std	Y+1, r22	; 0x01
     c9e:	7a 83       	std	Y+2, r23	; 0x02
     ca0:	8b 83       	std	Y+3, r24	; 0x03
     ca2:	9c 83       	std	Y+4, r25	; 0x04
		ay /= norm;
     ca4:	a3 01       	movw	r20, r6
     ca6:	92 01       	movw	r18, r4
     ca8:	6f a9       	ldd	r22, Y+55	; 0x37
     caa:	78 ad       	ldd	r23, Y+56	; 0x38
     cac:	89 ad       	ldd	r24, Y+57	; 0x39
     cae:	9a ad       	ldd	r25, Y+58	; 0x3a
     cb0:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
     cb4:	6d 83       	std	Y+5, r22	; 0x05
     cb6:	7e 83       	std	Y+6, r23	; 0x06
     cb8:	8f 83       	std	Y+7, r24	; 0x07
     cba:	98 87       	std	Y+8, r25	; 0x08
		az /= norm;
     cbc:	a3 01       	movw	r20, r6
     cbe:	92 01       	movw	r18, r4
     cc0:	6b ad       	ldd	r22, Y+59	; 0x3b
     cc2:	7c ad       	ldd	r23, Y+60	; 0x3c
     cc4:	8d ad       	ldd	r24, Y+61	; 0x3d
     cc6:	9e ad       	ldd	r25, Y+62	; 0x3e
     cc8:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
     ccc:	69 87       	std	Y+9, r22	; 0x09
     cce:	7a 87       	std	Y+10, r23	; 0x0a
     cd0:	8b 87       	std	Y+11, r24	; 0x0b
     cd2:	9c 87       	std	Y+12, r25	; 0x0c

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
     cd4:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <q1>
     cd8:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <q1+0x1>
     cdc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <q1+0x2>
     ce0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <q1+0x3>
     ce4:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <q3>
     ce8:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <q3+0x1>
     cec:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <q3+0x2>
     cf0:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <q3+0x3>
     cf4:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
     cf8:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
     cfc:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
     d00:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
     d04:	40 90 18 01 	lds	r4, 0x0118	; 0x800118 <q2>
     d08:	50 90 19 01 	lds	r5, 0x0119	; 0x800119 <q2+0x1>
     d0c:	60 90 1a 01 	lds	r6, 0x011A	; 0x80011a <q2+0x2>
     d10:	70 90 1b 01 	lds	r7, 0x011B	; 0x80011b <q2+0x3>
     d14:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     d18:	6b 01       	movw	r12, r22
     d1a:	7c 01       	movw	r14, r24
     d1c:	a3 01       	movw	r20, r6
     d1e:	92 01       	movw	r18, r4
     d20:	c5 01       	movw	r24, r10
     d22:	b4 01       	movw	r22, r8
     d24:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     d28:	9b 01       	movw	r18, r22
     d2a:	ac 01       	movw	r20, r24
     d2c:	c7 01       	movw	r24, r14
     d2e:	b6 01       	movw	r22, r12
     d30:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__subsf3>
     d34:	69 8f       	std	Y+25, r22	; 0x19
     d36:	7a 8f       	std	Y+26, r23	; 0x1a
     d38:	8b 8f       	std	Y+27, r24	; 0x1b
     d3a:	9c 8f       	std	Y+28, r25	; 0x1c
		halfvy = q0 * q1 + q2 * q3;
     d3c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     d40:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     d44:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     d48:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     d4c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <q1>
     d50:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <q1+0x1>
     d54:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <q1+0x2>
     d58:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <q1+0x3>
     d5c:	80 90 18 01 	lds	r8, 0x0118	; 0x800118 <q2>
     d60:	90 90 19 01 	lds	r9, 0x0119	; 0x800119 <q2+0x1>
     d64:	a0 90 1a 01 	lds	r10, 0x011A	; 0x80011a <q2+0x2>
     d68:	b0 90 1b 01 	lds	r11, 0x011B	; 0x80011b <q2+0x3>
     d6c:	40 90 14 01 	lds	r4, 0x0114	; 0x800114 <q3>
     d70:	50 90 15 01 	lds	r5, 0x0115	; 0x800115 <q3+0x1>
     d74:	60 90 16 01 	lds	r6, 0x0116	; 0x800116 <q3+0x2>
     d78:	70 90 17 01 	lds	r7, 0x0117	; 0x800117 <q3+0x3>
     d7c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     d80:	6b 01       	movw	r12, r22
     d82:	7c 01       	movw	r14, r24
     d84:	a3 01       	movw	r20, r6
     d86:	92 01       	movw	r18, r4
     d88:	c5 01       	movw	r24, r10
     d8a:	b4 01       	movw	r22, r8
     d8c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     d90:	9b 01       	movw	r18, r22
     d92:	ac 01       	movw	r20, r24
     d94:	c7 01       	movw	r24, r14
     d96:	b6 01       	movw	r22, r12
     d98:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
     d9c:	6d 8f       	std	Y+29, r22	; 0x1d
     d9e:	7e 8f       	std	Y+30, r23	; 0x1e
     da0:	8f 8f       	std	Y+31, r24	; 0x1f
     da2:	98 a3       	std	Y+32, r25	; 0x20
		halfvz = q0 * q0 - 0.5f + q3 * q3;
     da4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     da8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     dac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     db0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     db4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     db8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     dbc:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
     dc0:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
     dc4:	80 90 14 01 	lds	r8, 0x0114	; 0x800114 <q3>
     dc8:	90 90 15 01 	lds	r9, 0x0115	; 0x800115 <q3+0x1>
     dcc:	a0 90 16 01 	lds	r10, 0x0116	; 0x800116 <q3+0x2>
     dd0:	b0 90 17 01 	lds	r11, 0x0117	; 0x800117 <q3+0x3>
     dd4:	40 90 14 01 	lds	r4, 0x0114	; 0x800114 <q3>
     dd8:	50 90 15 01 	lds	r5, 0x0115	; 0x800115 <q3+0x1>
     ddc:	60 90 16 01 	lds	r6, 0x0116	; 0x800116 <q3+0x2>
     de0:	70 90 17 01 	lds	r7, 0x0117	; 0x800117 <q3+0x3>
     de4:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	40 e0       	ldi	r20, 0x00	; 0
     dee:	5f e3       	ldi	r21, 0x3F	; 63
     df0:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__subsf3>
     df4:	6b 01       	movw	r12, r22
     df6:	7c 01       	movw	r14, r24
     df8:	a3 01       	movw	r20, r6
     dfa:	92 01       	movw	r18, r4
     dfc:	c5 01       	movw	r24, r10
     dfe:	b4 01       	movw	r22, r8
     e00:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     e04:	9b 01       	movw	r18, r22
     e06:	ac 01       	movw	r20, r24
     e08:	c7 01       	movw	r24, r14
     e0a:	b6 01       	movw	r22, r12
     e0c:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
     e10:	6b 01       	movw	r12, r22
     e12:	7c 01       	movw	r14, r24

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
     e14:	9b 01       	movw	r18, r22
     e16:	ac 01       	movw	r20, r24
     e18:	6d 81       	ldd	r22, Y+5	; 0x05
     e1a:	7e 81       	ldd	r23, Y+6	; 0x06
     e1c:	8f 81       	ldd	r24, Y+7	; 0x07
     e1e:	98 85       	ldd	r25, Y+8	; 0x08
     e20:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     e24:	4b 01       	movw	r8, r22
     e26:	5c 01       	movw	r10, r24
     e28:	2d 8d       	ldd	r18, Y+29	; 0x1d
     e2a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     e2c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     e2e:	58 a1       	ldd	r21, Y+32	; 0x20
     e30:	69 85       	ldd	r22, Y+9	; 0x09
     e32:	7a 85       	ldd	r23, Y+10	; 0x0a
     e34:	8b 85       	ldd	r24, Y+11	; 0x0b
     e36:	9c 85       	ldd	r25, Y+12	; 0x0c
     e38:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     e3c:	9b 01       	movw	r18, r22
     e3e:	ac 01       	movw	r20, r24
     e40:	c5 01       	movw	r24, r10
     e42:	b4 01       	movw	r22, r8
     e44:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__subsf3>
     e48:	69 a3       	std	Y+33, r22	; 0x21
     e4a:	7a a3       	std	Y+34, r23	; 0x22
     e4c:	8b a3       	std	Y+35, r24	; 0x23
     e4e:	9c a3       	std	Y+36, r25	; 0x24
		halfey = (az * halfvx - ax * halfvz);
     e50:	29 8d       	ldd	r18, Y+25	; 0x19
     e52:	3a 8d       	ldd	r19, Y+26	; 0x1a
     e54:	4b 8d       	ldd	r20, Y+27	; 0x1b
     e56:	5c 8d       	ldd	r21, Y+28	; 0x1c
     e58:	69 85       	ldd	r22, Y+9	; 0x09
     e5a:	7a 85       	ldd	r23, Y+10	; 0x0a
     e5c:	8b 85       	ldd	r24, Y+11	; 0x0b
     e5e:	9c 85       	ldd	r25, Y+12	; 0x0c
     e60:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     e64:	4b 01       	movw	r8, r22
     e66:	5c 01       	movw	r10, r24
     e68:	a7 01       	movw	r20, r14
     e6a:	96 01       	movw	r18, r12
     e6c:	69 81       	ldd	r22, Y+1	; 0x01
     e6e:	7a 81       	ldd	r23, Y+2	; 0x02
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	9c 81       	ldd	r25, Y+4	; 0x04
     e74:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     e78:	9b 01       	movw	r18, r22
     e7a:	ac 01       	movw	r20, r24
     e7c:	c5 01       	movw	r24, r10
     e7e:	b4 01       	movw	r22, r8
     e80:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__subsf3>
     e84:	2b 01       	movw	r4, r22
     e86:	3c 01       	movw	r6, r24
		halfez = (ax * halfvy - ay * halfvx);
     e88:	2d 8d       	ldd	r18, Y+29	; 0x1d
     e8a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     e8c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     e8e:	58 a1       	ldd	r21, Y+32	; 0x20
     e90:	69 81       	ldd	r22, Y+1	; 0x01
     e92:	7a 81       	ldd	r23, Y+2	; 0x02
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     e9c:	6b 01       	movw	r12, r22
     e9e:	7c 01       	movw	r14, r24
     ea0:	29 8d       	ldd	r18, Y+25	; 0x19
     ea2:	3a 8d       	ldd	r19, Y+26	; 0x1a
     ea4:	4b 8d       	ldd	r20, Y+27	; 0x1b
     ea6:	5c 8d       	ldd	r21, Y+28	; 0x1c
     ea8:	6d 81       	ldd	r22, Y+5	; 0x05
     eaa:	7e 81       	ldd	r23, Y+6	; 0x06
     eac:	8f 81       	ldd	r24, Y+7	; 0x07
     eae:	98 85       	ldd	r25, Y+8	; 0x08
     eb0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     eb4:	9b 01       	movw	r18, r22
     eb6:	ac 01       	movw	r20, r24
     eb8:	c7 01       	movw	r24, r14
     eba:	b6 01       	movw	r22, r12
     ebc:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__subsf3>
     ec0:	4b 01       	movw	r8, r22
     ec2:	5c 01       	movw	r10, r24

		// Compute and apply integral feedback if enabled
		if(mpu6050_mahonytwoKiDef > 0.0f) {
			integralFBx += mpu6050_mahonytwoKiDef * halfex * (1.0f / mpu6050_mahonysampleFreq);	// integral error scaled by Ki
     ec4:	c0 90 10 01 	lds	r12, 0x0110	; 0x800110 <integralFBx>
     ec8:	d0 90 11 01 	lds	r13, 0x0111	; 0x800111 <integralFBx+0x1>
     ecc:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <integralFBx+0x2>
     ed0:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <integralFBx+0x3>
     ed4:	2d ec       	ldi	r18, 0xCD	; 205
     ed6:	3c ec       	ldi	r19, 0xCC	; 204
     ed8:	4c e4       	ldi	r20, 0x4C	; 76
     eda:	5e e3       	ldi	r21, 0x3E	; 62
     edc:	69 a1       	ldd	r22, Y+33	; 0x21
     ede:	7a a1       	ldd	r23, Y+34	; 0x22
     ee0:	8b a1       	ldd	r24, Y+35	; 0x23
     ee2:	9c a1       	ldd	r25, Y+36	; 0x24
     ee4:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     ee8:	2a e8       	ldi	r18, 0x8A	; 138
     eea:	3b e4       	ldi	r19, 0x4B	; 75
     eec:	46 e8       	ldi	r20, 0x86	; 134
     eee:	5c e3       	ldi	r21, 0x3C	; 60
     ef0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     ef4:	a7 01       	movw	r20, r14
     ef6:	96 01       	movw	r18, r12
     ef8:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
     efc:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <integralFBx>
     f00:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <integralFBx+0x1>
     f04:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <integralFBx+0x2>
     f08:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <integralFBx+0x3>
			integralFBy += mpu6050_mahonytwoKiDef * halfey * (1.0f / mpu6050_mahonysampleFreq);
     f0c:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <integralFBy>
     f10:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <integralFBy+0x1>
     f14:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <integralFBy+0x2>
     f18:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <integralFBy+0x3>
     f1c:	2d ec       	ldi	r18, 0xCD	; 205
     f1e:	3c ec       	ldi	r19, 0xCC	; 204
     f20:	4c e4       	ldi	r20, 0x4C	; 76
     f22:	5e e3       	ldi	r21, 0x3E	; 62
     f24:	c3 01       	movw	r24, r6
     f26:	b2 01       	movw	r22, r4
     f28:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     f2c:	2a e8       	ldi	r18, 0x8A	; 138
     f2e:	3b e4       	ldi	r19, 0x4B	; 75
     f30:	46 e8       	ldi	r20, 0x86	; 134
     f32:	5c e3       	ldi	r21, 0x3C	; 60
     f34:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     f38:	a7 01       	movw	r20, r14
     f3a:	96 01       	movw	r18, r12
     f3c:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
     f40:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <integralFBy>
     f44:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <integralFBy+0x1>
     f48:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <integralFBy+0x2>
     f4c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <integralFBy+0x3>
			integralFBz += mpu6050_mahonytwoKiDef * halfez * (1.0f / mpu6050_mahonysampleFreq);
     f50:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <__data_end>
     f54:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <__data_end+0x1>
     f58:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <__data_end+0x2>
     f5c:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <__data_end+0x3>
     f60:	2d ec       	ldi	r18, 0xCD	; 205
     f62:	3c ec       	ldi	r19, 0xCC	; 204
     f64:	4c e4       	ldi	r20, 0x4C	; 76
     f66:	5e e3       	ldi	r21, 0x3E	; 62
     f68:	c5 01       	movw	r24, r10
     f6a:	b4 01       	movw	r22, r8
     f6c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     f70:	2a e8       	ldi	r18, 0x8A	; 138
     f72:	3b e4       	ldi	r19, 0x4B	; 75
     f74:	46 e8       	ldi	r20, 0x86	; 134
     f76:	5c e3       	ldi	r21, 0x3C	; 60
     f78:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
     f7c:	a7 01       	movw	r20, r14
     f7e:	96 01       	movw	r18, r12
     f80:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
     f84:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <__data_end>
     f88:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <__data_end+0x1>
     f8c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end+0x2>
     f90:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x3>
			gx += integralFBx;	// apply integral feedback
     f94:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <integralFBx>
     f98:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <integralFBx+0x1>
     f9c:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <integralFBx+0x2>
     fa0:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <integralFBx+0x3>
     fa4:	6d 85       	ldd	r22, Y+13	; 0x0d
     fa6:	7e 85       	ldd	r23, Y+14	; 0x0e
     fa8:	8f 85       	ldd	r24, Y+15	; 0x0f
     faa:	98 89       	ldd	r25, Y+16	; 0x10
     fac:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
     fb0:	6d 83       	std	Y+5, r22	; 0x05
     fb2:	7e 83       	std	Y+6, r23	; 0x06
     fb4:	8f 83       	std	Y+7, r24	; 0x07
     fb6:	98 87       	std	Y+8, r25	; 0x08
			gy += integralFBy;
     fb8:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <integralFBy>
     fbc:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <integralFBy+0x1>
     fc0:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <integralFBy+0x2>
     fc4:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <integralFBy+0x3>
     fc8:	69 89       	ldd	r22, Y+17	; 0x11
     fca:	7a 89       	ldd	r23, Y+18	; 0x12
     fcc:	8b 89       	ldd	r24, Y+19	; 0x13
     fce:	9c 89       	ldd	r25, Y+20	; 0x14
     fd0:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
     fd4:	6b 01       	movw	r12, r22
     fd6:	7c 01       	movw	r14, r24
			gz += integralFBz;
     fd8:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     fdc:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     fe0:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__data_end+0x2>
     fe4:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__data_end+0x3>
     fe8:	6d 89       	ldd	r22, Y+21	; 0x15
     fea:	7e 89       	ldd	r23, Y+22	; 0x16
     fec:	8f 89       	ldd	r24, Y+23	; 0x17
     fee:	98 8d       	ldd	r25, Y+24	; 0x18
     ff0:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
     ff4:	69 87       	std	Y+9, r22	; 0x09
     ff6:	7a 87       	std	Y+10, r23	; 0x0a
     ff8:	8b 87       	std	Y+11, r24	; 0x0b
     ffa:	9c 87       	std	Y+12, r25	; 0x0c
			integralFBy = 0.0f;
			integralFBz = 0.0f;
		}

		// Apply proportional feedback
		gx += mpu6050_mahonytwoKpDef * halfex;
     ffc:	2d 81       	ldd	r18, Y+5	; 0x05
     ffe:	3e 81       	ldd	r19, Y+6	; 0x06
    1000:	4f 81       	ldd	r20, Y+7	; 0x07
    1002:	58 85       	ldd	r21, Y+8	; 0x08
    1004:	69 a1       	ldd	r22, Y+33	; 0x21
    1006:	7a a1       	ldd	r23, Y+34	; 0x22
    1008:	8b a1       	ldd	r24, Y+35	; 0x23
    100a:	9c a1       	ldd	r25, Y+36	; 0x24
    100c:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    1010:	6d 87       	std	Y+13, r22	; 0x0d
    1012:	7e 87       	std	Y+14, r23	; 0x0e
    1014:	8f 87       	std	Y+15, r24	; 0x0f
    1016:	98 8b       	std	Y+16, r25	; 0x10
		gy += mpu6050_mahonytwoKpDef * halfey;
    1018:	a7 01       	movw	r20, r14
    101a:	96 01       	movw	r18, r12
    101c:	c3 01       	movw	r24, r6
    101e:	b2 01       	movw	r22, r4
    1020:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    1024:	69 8b       	std	Y+17, r22	; 0x11
    1026:	7a 8b       	std	Y+18, r23	; 0x12
    1028:	8b 8b       	std	Y+19, r24	; 0x13
    102a:	9c 8b       	std	Y+20, r25	; 0x14
		gz += mpu6050_mahonytwoKpDef * halfez;
    102c:	29 85       	ldd	r18, Y+9	; 0x09
    102e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1030:	4b 85       	ldd	r20, Y+11	; 0x0b
    1032:	5c 85       	ldd	r21, Y+12	; 0x0c
    1034:	c5 01       	movw	r24, r10
    1036:	b4 01       	movw	r22, r8
    1038:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    103c:	6d 8b       	std	Y+21, r22	; 0x15
    103e:	7e 8b       	std	Y+22, r23	; 0x16
    1040:	8f 8b       	std	Y+23, r24	; 0x17
    1042:	98 8f       	std	Y+24, r25	; 0x18
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));		// pre-multiply common factors
    1044:	2a e8       	ldi	r18, 0x8A	; 138
    1046:	3b e4       	ldi	r19, 0x4B	; 75
    1048:	46 e0       	ldi	r20, 0x06	; 6
    104a:	5c e3       	ldi	r21, 0x3C	; 60
    104c:	6d 85       	ldd	r22, Y+13	; 0x0d
    104e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1050:	8f 85       	ldd	r24, Y+15	; 0x0f
    1052:	98 89       	ldd	r25, Y+16	; 0x10
    1054:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1058:	6d 83       	std	Y+5, r22	; 0x05
    105a:	7e 83       	std	Y+6, r23	; 0x06
    105c:	8f 83       	std	Y+7, r24	; 0x07
    105e:	98 87       	std	Y+8, r25	; 0x08
	gy *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
    1060:	2a e8       	ldi	r18, 0x8A	; 138
    1062:	3b e4       	ldi	r19, 0x4B	; 75
    1064:	46 e0       	ldi	r20, 0x06	; 6
    1066:	5c e3       	ldi	r21, 0x3C	; 60
    1068:	69 89       	ldd	r22, Y+17	; 0x11
    106a:	7a 89       	ldd	r23, Y+18	; 0x12
    106c:	8b 89       	ldd	r24, Y+19	; 0x13
    106e:	9c 89       	ldd	r25, Y+20	; 0x14
    1070:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1074:	69 87       	std	Y+9, r22	; 0x09
    1076:	7a 87       	std	Y+10, r23	; 0x0a
    1078:	8b 87       	std	Y+11, r24	; 0x0b
    107a:	9c 87       	std	Y+12, r25	; 0x0c
	gz *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
    107c:	2a e8       	ldi	r18, 0x8A	; 138
    107e:	3b e4       	ldi	r19, 0x4B	; 75
    1080:	46 e0       	ldi	r20, 0x06	; 6
    1082:	5c e3       	ldi	r21, 0x3C	; 60
    1084:	6d 89       	ldd	r22, Y+21	; 0x15
    1086:	7e 89       	ldd	r23, Y+22	; 0x16
    1088:	8f 89       	ldd	r24, Y+23	; 0x17
    108a:	98 8d       	ldd	r25, Y+24	; 0x18
    108c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1090:	6d 87       	std	Y+13, r22	; 0x0d
    1092:	7e 87       	std	Y+14, r23	; 0x0e
    1094:	8f 87       	std	Y+15, r24	; 0x0f
    1096:	98 8b       	std	Y+16, r25	; 0x10
	qa = q0;
    1098:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    109c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    10a0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
    10a4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
    10a8:	89 8b       	std	Y+17, r24	; 0x11
    10aa:	9a 8b       	std	Y+18, r25	; 0x12
    10ac:	ab 8b       	std	Y+19, r26	; 0x13
    10ae:	bc 8b       	std	Y+20, r27	; 0x14
	qb = q1;
    10b0:	80 90 1c 01 	lds	r8, 0x011C	; 0x80011c <q1>
    10b4:	90 90 1d 01 	lds	r9, 0x011D	; 0x80011d <q1+0x1>
    10b8:	a0 90 1e 01 	lds	r10, 0x011E	; 0x80011e <q1+0x2>
    10bc:	b0 90 1f 01 	lds	r11, 0x011F	; 0x80011f <q1+0x3>
	qc = q2;
    10c0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <q2>
    10c4:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <q2+0x1>
    10c8:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <q2+0x2>
    10cc:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <q2+0x3>
    10d0:	8d 8b       	std	Y+21, r24	; 0x15
    10d2:	9e 8b       	std	Y+22, r25	; 0x16
    10d4:	af 8b       	std	Y+23, r26	; 0x17
    10d6:	b8 8f       	std	Y+24, r27	; 0x18
	q0 += (-qb * gx - qc * gy - q3 * gz);
    10d8:	40 90 14 01 	lds	r4, 0x0114	; 0x800114 <q3>
    10dc:	50 90 15 01 	lds	r5, 0x0115	; 0x800115 <q3+0x1>
    10e0:	60 90 16 01 	lds	r6, 0x0116	; 0x800116 <q3+0x2>
    10e4:	70 90 17 01 	lds	r7, 0x0117	; 0x800117 <q3+0x3>
    10e8:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
    10ec:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
    10f0:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
    10f4:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
    10f8:	c5 01       	movw	r24, r10
    10fa:	b4 01       	movw	r22, r8
    10fc:	90 58       	subi	r25, 0x80	; 128
    10fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1100:	3e 81       	ldd	r19, Y+6	; 0x06
    1102:	4f 81       	ldd	r20, Y+7	; 0x07
    1104:	58 85       	ldd	r21, Y+8	; 0x08
    1106:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    110a:	69 83       	std	Y+1, r22	; 0x01
    110c:	7a 83       	std	Y+2, r23	; 0x02
    110e:	8b 83       	std	Y+3, r24	; 0x03
    1110:	9c 83       	std	Y+4, r25	; 0x04
    1112:	2d 89       	ldd	r18, Y+21	; 0x15
    1114:	3e 89       	ldd	r19, Y+22	; 0x16
    1116:	4f 89       	ldd	r20, Y+23	; 0x17
    1118:	58 8d       	ldd	r21, Y+24	; 0x18
    111a:	69 85       	ldd	r22, Y+9	; 0x09
    111c:	7a 85       	ldd	r23, Y+10	; 0x0a
    111e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1120:	9c 85       	ldd	r25, Y+12	; 0x0c
    1122:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1126:	9b 01       	movw	r18, r22
    1128:	ac 01       	movw	r20, r24
    112a:	69 81       	ldd	r22, Y+1	; 0x01
    112c:	7a 81       	ldd	r23, Y+2	; 0x02
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__subsf3>
    1136:	69 83       	std	Y+1, r22	; 0x01
    1138:	7a 83       	std	Y+2, r23	; 0x02
    113a:	8b 83       	std	Y+3, r24	; 0x03
    113c:	9c 83       	std	Y+4, r25	; 0x04
    113e:	a3 01       	movw	r20, r6
    1140:	92 01       	movw	r18, r4
    1142:	6d 85       	ldd	r22, Y+13	; 0x0d
    1144:	7e 85       	ldd	r23, Y+14	; 0x0e
    1146:	8f 85       	ldd	r24, Y+15	; 0x0f
    1148:	98 89       	ldd	r25, Y+16	; 0x10
    114a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    114e:	9b 01       	movw	r18, r22
    1150:	ac 01       	movw	r20, r24
    1152:	69 81       	ldd	r22, Y+1	; 0x01
    1154:	7a 81       	ldd	r23, Y+2	; 0x02
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__subsf3>
    115e:	a7 01       	movw	r20, r14
    1160:	96 01       	movw	r18, r12
    1162:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    1166:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    116a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    116e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1172:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	q1 += (qa * gx + qc * gz - q3 * gy);
    1176:	40 90 14 01 	lds	r4, 0x0114	; 0x800114 <q3>
    117a:	50 90 15 01 	lds	r5, 0x0115	; 0x800115 <q3+0x1>
    117e:	60 90 16 01 	lds	r6, 0x0116	; 0x800116 <q3+0x2>
    1182:	70 90 17 01 	lds	r7, 0x0117	; 0x800117 <q3+0x3>
    1186:	c0 90 1c 01 	lds	r12, 0x011C	; 0x80011c <q1>
    118a:	d0 90 1d 01 	lds	r13, 0x011D	; 0x80011d <q1+0x1>
    118e:	e0 90 1e 01 	lds	r14, 0x011E	; 0x80011e <q1+0x2>
    1192:	f0 90 1f 01 	lds	r15, 0x011F	; 0x80011f <q1+0x3>
    1196:	29 89       	ldd	r18, Y+17	; 0x11
    1198:	3a 89       	ldd	r19, Y+18	; 0x12
    119a:	4b 89       	ldd	r20, Y+19	; 0x13
    119c:	5c 89       	ldd	r21, Y+20	; 0x14
    119e:	6d 81       	ldd	r22, Y+5	; 0x05
    11a0:	7e 81       	ldd	r23, Y+6	; 0x06
    11a2:	8f 81       	ldd	r24, Y+7	; 0x07
    11a4:	98 85       	ldd	r25, Y+8	; 0x08
    11a6:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    11aa:	69 83       	std	Y+1, r22	; 0x01
    11ac:	7a 83       	std	Y+2, r23	; 0x02
    11ae:	8b 83       	std	Y+3, r24	; 0x03
    11b0:	9c 83       	std	Y+4, r25	; 0x04
    11b2:	2d 89       	ldd	r18, Y+21	; 0x15
    11b4:	3e 89       	ldd	r19, Y+22	; 0x16
    11b6:	4f 89       	ldd	r20, Y+23	; 0x17
    11b8:	58 8d       	ldd	r21, Y+24	; 0x18
    11ba:	6d 85       	ldd	r22, Y+13	; 0x0d
    11bc:	7e 85       	ldd	r23, Y+14	; 0x0e
    11be:	8f 85       	ldd	r24, Y+15	; 0x0f
    11c0:	98 89       	ldd	r25, Y+16	; 0x10
    11c2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    11c6:	9b 01       	movw	r18, r22
    11c8:	ac 01       	movw	r20, r24
    11ca:	69 81       	ldd	r22, Y+1	; 0x01
    11cc:	7a 81       	ldd	r23, Y+2	; 0x02
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    11d6:	69 83       	std	Y+1, r22	; 0x01
    11d8:	7a 83       	std	Y+2, r23	; 0x02
    11da:	8b 83       	std	Y+3, r24	; 0x03
    11dc:	9c 83       	std	Y+4, r25	; 0x04
    11de:	a3 01       	movw	r20, r6
    11e0:	92 01       	movw	r18, r4
    11e2:	69 85       	ldd	r22, Y+9	; 0x09
    11e4:	7a 85       	ldd	r23, Y+10	; 0x0a
    11e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    11e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ea:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    11ee:	9b 01       	movw	r18, r22
    11f0:	ac 01       	movw	r20, r24
    11f2:	69 81       	ldd	r22, Y+1	; 0x01
    11f4:	7a 81       	ldd	r23, Y+2	; 0x02
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__subsf3>
    11fe:	a7 01       	movw	r20, r14
    1200:	96 01       	movw	r18, r12
    1202:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    1206:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <q1>
    120a:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <q1+0x1>
    120e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <q1+0x2>
    1212:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <q1+0x3>
	q2 += (qa * gy - qb * gz + q3 * gx);
    1216:	40 90 14 01 	lds	r4, 0x0114	; 0x800114 <q3>
    121a:	50 90 15 01 	lds	r5, 0x0115	; 0x800115 <q3+0x1>
    121e:	60 90 16 01 	lds	r6, 0x0116	; 0x800116 <q3+0x2>
    1222:	70 90 17 01 	lds	r7, 0x0117	; 0x800117 <q3+0x3>
    1226:	c0 90 18 01 	lds	r12, 0x0118	; 0x800118 <q2>
    122a:	d0 90 19 01 	lds	r13, 0x0119	; 0x800119 <q2+0x1>
    122e:	e0 90 1a 01 	lds	r14, 0x011A	; 0x80011a <q2+0x2>
    1232:	f0 90 1b 01 	lds	r15, 0x011B	; 0x80011b <q2+0x3>
    1236:	29 89       	ldd	r18, Y+17	; 0x11
    1238:	3a 89       	ldd	r19, Y+18	; 0x12
    123a:	4b 89       	ldd	r20, Y+19	; 0x13
    123c:	5c 89       	ldd	r21, Y+20	; 0x14
    123e:	69 85       	ldd	r22, Y+9	; 0x09
    1240:	7a 85       	ldd	r23, Y+10	; 0x0a
    1242:	8b 85       	ldd	r24, Y+11	; 0x0b
    1244:	9c 85       	ldd	r25, Y+12	; 0x0c
    1246:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    124a:	69 83       	std	Y+1, r22	; 0x01
    124c:	7a 83       	std	Y+2, r23	; 0x02
    124e:	8b 83       	std	Y+3, r24	; 0x03
    1250:	9c 83       	std	Y+4, r25	; 0x04
    1252:	a5 01       	movw	r20, r10
    1254:	94 01       	movw	r18, r8
    1256:	6d 85       	ldd	r22, Y+13	; 0x0d
    1258:	7e 85       	ldd	r23, Y+14	; 0x0e
    125a:	8f 85       	ldd	r24, Y+15	; 0x0f
    125c:	98 89       	ldd	r25, Y+16	; 0x10
    125e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1262:	9b 01       	movw	r18, r22
    1264:	ac 01       	movw	r20, r24
    1266:	69 81       	ldd	r22, Y+1	; 0x01
    1268:	7a 81       	ldd	r23, Y+2	; 0x02
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__subsf3>
    1272:	69 83       	std	Y+1, r22	; 0x01
    1274:	7a 83       	std	Y+2, r23	; 0x02
    1276:	8b 83       	std	Y+3, r24	; 0x03
    1278:	9c 83       	std	Y+4, r25	; 0x04
    127a:	a3 01       	movw	r20, r6
    127c:	92 01       	movw	r18, r4
    127e:	6d 81       	ldd	r22, Y+5	; 0x05
    1280:	7e 81       	ldd	r23, Y+6	; 0x06
    1282:	8f 81       	ldd	r24, Y+7	; 0x07
    1284:	98 85       	ldd	r25, Y+8	; 0x08
    1286:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    128a:	9b 01       	movw	r18, r22
    128c:	ac 01       	movw	r20, r24
    128e:	69 81       	ldd	r22, Y+1	; 0x01
    1290:	7a 81       	ldd	r23, Y+2	; 0x02
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    129a:	a7 01       	movw	r20, r14
    129c:	96 01       	movw	r18, r12
    129e:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    12a2:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <q2>
    12a6:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <q2+0x1>
    12aa:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <q2+0x2>
    12ae:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <q2+0x3>
	q3 += (qa * gz + qb * gy - qc * gx);
    12b2:	c0 90 14 01 	lds	r12, 0x0114	; 0x800114 <q3>
    12b6:	d0 90 15 01 	lds	r13, 0x0115	; 0x800115 <q3+0x1>
    12ba:	e0 90 16 01 	lds	r14, 0x0116	; 0x800116 <q3+0x2>
    12be:	f0 90 17 01 	lds	r15, 0x0117	; 0x800117 <q3+0x3>
    12c2:	29 89       	ldd	r18, Y+17	; 0x11
    12c4:	3a 89       	ldd	r19, Y+18	; 0x12
    12c6:	4b 89       	ldd	r20, Y+19	; 0x13
    12c8:	5c 89       	ldd	r21, Y+20	; 0x14
    12ca:	6d 85       	ldd	r22, Y+13	; 0x0d
    12cc:	7e 85       	ldd	r23, Y+14	; 0x0e
    12ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    12d0:	98 89       	ldd	r25, Y+16	; 0x10
    12d2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    12d6:	2b 01       	movw	r4, r22
    12d8:	3c 01       	movw	r6, r24
    12da:	a5 01       	movw	r20, r10
    12dc:	94 01       	movw	r18, r8
    12de:	69 85       	ldd	r22, Y+9	; 0x09
    12e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    12e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12e6:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    12ea:	9b 01       	movw	r18, r22
    12ec:	ac 01       	movw	r20, r24
    12ee:	c3 01       	movw	r24, r6
    12f0:	b2 01       	movw	r22, r4
    12f2:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    12f6:	4b 01       	movw	r8, r22
    12f8:	5c 01       	movw	r10, r24
    12fa:	2d 89       	ldd	r18, Y+21	; 0x15
    12fc:	3e 89       	ldd	r19, Y+22	; 0x16
    12fe:	4f 89       	ldd	r20, Y+23	; 0x17
    1300:	58 8d       	ldd	r21, Y+24	; 0x18
    1302:	6d 81       	ldd	r22, Y+5	; 0x05
    1304:	7e 81       	ldd	r23, Y+6	; 0x06
    1306:	8f 81       	ldd	r24, Y+7	; 0x07
    1308:	98 85       	ldd	r25, Y+8	; 0x08
    130a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    130e:	9b 01       	movw	r18, r22
    1310:	ac 01       	movw	r20, r24
    1312:	c5 01       	movw	r24, r10
    1314:	b4 01       	movw	r22, r8
    1316:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__subsf3>
    131a:	a7 01       	movw	r20, r14
    131c:	96 01       	movw	r18, r12
    131e:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    1322:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <q3>
    1326:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <q3+0x1>
    132a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <q3+0x2>
    132e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <q3+0x3>

	// Normalise quaternion
	norm = sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    1332:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
    1336:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
    133a:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
    133e:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
    1342:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
    1346:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
    134a:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
    134e:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
    1352:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <q1>
    1356:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <q1+0x1>
    135a:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <q1+0x2>
    135e:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <q1+0x3>
    1362:	8d 83       	std	Y+5, r24	; 0x05
    1364:	9e 83       	std	Y+6, r25	; 0x06
    1366:	af 83       	std	Y+7, r26	; 0x07
    1368:	b8 87       	std	Y+8, r27	; 0x08
    136a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <q1>
    136e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <q1+0x1>
    1372:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <q1+0x2>
    1376:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <q1+0x3>
    137a:	89 87       	std	Y+9, r24	; 0x09
    137c:	9a 87       	std	Y+10, r25	; 0x0a
    137e:	ab 87       	std	Y+11, r26	; 0x0b
    1380:	bc 87       	std	Y+12, r27	; 0x0c
    1382:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <q2>
    1386:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <q2+0x1>
    138a:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <q2+0x2>
    138e:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <q2+0x3>
    1392:	8d 87       	std	Y+13, r24	; 0x0d
    1394:	9e 87       	std	Y+14, r25	; 0x0e
    1396:	af 87       	std	Y+15, r26	; 0x0f
    1398:	b8 8b       	std	Y+16, r27	; 0x10
    139a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <q2>
    139e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <q2+0x1>
    13a2:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <q2+0x2>
    13a6:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <q2+0x3>
    13aa:	89 8b       	std	Y+17, r24	; 0x11
    13ac:	9a 8b       	std	Y+18, r25	; 0x12
    13ae:	ab 8b       	std	Y+19, r26	; 0x13
    13b0:	bc 8b       	std	Y+20, r27	; 0x14
    13b2:	40 90 14 01 	lds	r4, 0x0114	; 0x800114 <q3>
    13b6:	50 90 15 01 	lds	r5, 0x0115	; 0x800115 <q3+0x1>
    13ba:	60 90 16 01 	lds	r6, 0x0116	; 0x800116 <q3+0x2>
    13be:	70 90 17 01 	lds	r7, 0x0117	; 0x800117 <q3+0x3>
    13c2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <q3>
    13c6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <q3+0x1>
    13ca:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <q3+0x2>
    13ce:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <q3+0x3>
    13d2:	8d 8b       	std	Y+21, r24	; 0x15
    13d4:	9e 8b       	std	Y+22, r25	; 0x16
    13d6:	af 8b       	std	Y+23, r26	; 0x17
    13d8:	b8 8f       	std	Y+24, r27	; 0x18
    13da:	a5 01       	movw	r20, r10
    13dc:	94 01       	movw	r18, r8
    13de:	c7 01       	movw	r24, r14
    13e0:	b6 01       	movw	r22, r12
    13e2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    13e6:	69 83       	std	Y+1, r22	; 0x01
    13e8:	7a 83       	std	Y+2, r23	; 0x02
    13ea:	8b 83       	std	Y+3, r24	; 0x03
    13ec:	9c 83       	std	Y+4, r25	; 0x04
    13ee:	29 85       	ldd	r18, Y+9	; 0x09
    13f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    13f2:	4b 85       	ldd	r20, Y+11	; 0x0b
    13f4:	5c 85       	ldd	r21, Y+12	; 0x0c
    13f6:	6d 81       	ldd	r22, Y+5	; 0x05
    13f8:	7e 81       	ldd	r23, Y+6	; 0x06
    13fa:	8f 81       	ldd	r24, Y+7	; 0x07
    13fc:	98 85       	ldd	r25, Y+8	; 0x08
    13fe:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1402:	9b 01       	movw	r18, r22
    1404:	ac 01       	movw	r20, r24
    1406:	69 81       	ldd	r22, Y+1	; 0x01
    1408:	7a 81       	ldd	r23, Y+2	; 0x02
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    1412:	69 83       	std	Y+1, r22	; 0x01
    1414:	7a 83       	std	Y+2, r23	; 0x02
    1416:	8b 83       	std	Y+3, r24	; 0x03
    1418:	9c 83       	std	Y+4, r25	; 0x04
    141a:	29 89       	ldd	r18, Y+17	; 0x11
    141c:	3a 89       	ldd	r19, Y+18	; 0x12
    141e:	4b 89       	ldd	r20, Y+19	; 0x13
    1420:	5c 89       	ldd	r21, Y+20	; 0x14
    1422:	6d 85       	ldd	r22, Y+13	; 0x0d
    1424:	7e 85       	ldd	r23, Y+14	; 0x0e
    1426:	8f 85       	ldd	r24, Y+15	; 0x0f
    1428:	98 89       	ldd	r25, Y+16	; 0x10
    142a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    142e:	9b 01       	movw	r18, r22
    1430:	ac 01       	movw	r20, r24
    1432:	69 81       	ldd	r22, Y+1	; 0x01
    1434:	7a 81       	ldd	r23, Y+2	; 0x02
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    143e:	69 83       	std	Y+1, r22	; 0x01
    1440:	7a 83       	std	Y+2, r23	; 0x02
    1442:	8b 83       	std	Y+3, r24	; 0x03
    1444:	9c 83       	std	Y+4, r25	; 0x04
    1446:	a5 01       	movw	r20, r10
    1448:	94 01       	movw	r18, r8
    144a:	c7 01       	movw	r24, r14
    144c:	b6 01       	movw	r22, r12
    144e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1452:	6b 01       	movw	r12, r22
    1454:	7c 01       	movw	r14, r24
    1456:	29 85       	ldd	r18, Y+9	; 0x09
    1458:	3a 85       	ldd	r19, Y+10	; 0x0a
    145a:	4b 85       	ldd	r20, Y+11	; 0x0b
    145c:	5c 85       	ldd	r21, Y+12	; 0x0c
    145e:	6d 81       	ldd	r22, Y+5	; 0x05
    1460:	7e 81       	ldd	r23, Y+6	; 0x06
    1462:	8f 81       	ldd	r24, Y+7	; 0x07
    1464:	98 85       	ldd	r25, Y+8	; 0x08
    1466:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    146a:	9b 01       	movw	r18, r22
    146c:	ac 01       	movw	r20, r24
    146e:	c7 01       	movw	r24, r14
    1470:	b6 01       	movw	r22, r12
    1472:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    1476:	6b 01       	movw	r12, r22
    1478:	7c 01       	movw	r14, r24
    147a:	29 89       	ldd	r18, Y+17	; 0x11
    147c:	3a 89       	ldd	r19, Y+18	; 0x12
    147e:	4b 89       	ldd	r20, Y+19	; 0x13
    1480:	5c 89       	ldd	r21, Y+20	; 0x14
    1482:	6d 85       	ldd	r22, Y+13	; 0x0d
    1484:	7e 85       	ldd	r23, Y+14	; 0x0e
    1486:	8f 85       	ldd	r24, Y+15	; 0x0f
    1488:	98 89       	ldd	r25, Y+16	; 0x10
    148a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    148e:	9b 01       	movw	r18, r22
    1490:	ac 01       	movw	r20, r24
    1492:	c7 01       	movw	r24, r14
    1494:	b6 01       	movw	r22, r12
    1496:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    149a:	6b 01       	movw	r12, r22
    149c:	7c 01       	movw	r14, r24
    149e:	2d 89       	ldd	r18, Y+21	; 0x15
    14a0:	3e 89       	ldd	r19, Y+22	; 0x16
    14a2:	4f 89       	ldd	r20, Y+23	; 0x17
    14a4:	58 8d       	ldd	r21, Y+24	; 0x18
    14a6:	c3 01       	movw	r24, r6
    14a8:	b2 01       	movw	r22, r4
    14aa:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    14ae:	9b 01       	movw	r18, r22
    14b0:	ac 01       	movw	r20, r24
    14b2:	c7 01       	movw	r24, r14
    14b4:	b6 01       	movw	r22, r12
    14b6:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    14ba:	0e 94 59 11 	call	0x22b2	; 0x22b2 <sqrt>
    14be:	6b 01       	movw	r12, r22
    14c0:	7c 01       	movw	r14, r24
	q0 /= norm;
    14c2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    14c6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    14ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    14ce:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    14d2:	a7 01       	movw	r20, r14
    14d4:	96 01       	movw	r18, r12
    14d6:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
    14da:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    14de:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    14e2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    14e6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	q1 /= norm;
    14ea:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <q1>
    14ee:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <q1+0x1>
    14f2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <q1+0x2>
    14f6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <q1+0x3>
    14fa:	a7 01       	movw	r20, r14
    14fc:	96 01       	movw	r18, r12
    14fe:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
    1502:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <q1>
    1506:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <q1+0x1>
    150a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <q1+0x2>
    150e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <q1+0x3>
	q2 /= norm;
    1512:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <q2>
    1516:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <q2+0x1>
    151a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <q2+0x2>
    151e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <q2+0x3>
    1522:	a7 01       	movw	r20, r14
    1524:	96 01       	movw	r18, r12
    1526:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
    152a:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <q2>
    152e:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <q2+0x1>
    1532:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <q2+0x2>
    1536:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <q2+0x3>
	q3 /= norm;
    153a:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <q3>
    153e:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <q3+0x1>
    1542:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <q3+0x2>
    1546:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <q3+0x3>
    154a:	a7 01       	movw	r20, r14
    154c:	96 01       	movw	r18, r12
    154e:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
    1552:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <q3>
    1556:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <q3+0x1>
    155a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <q3+0x2>
    155e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <q3+0x3>
}
    1562:	a4 96       	adiw	r28, 0x24	; 36
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	0f 91       	pop	r16
    1576:	ff 90       	pop	r15
    1578:	ef 90       	pop	r14
    157a:	df 90       	pop	r13
    157c:	cf 90       	pop	r12
    157e:	bf 90       	pop	r11
    1580:	af 90       	pop	r10
    1582:	9f 90       	pop	r9
    1584:	8f 90       	pop	r8
    1586:	7f 90       	pop	r7
    1588:	6f 90       	pop	r6
    158a:	5f 90       	pop	r5
    158c:	4f 90       	pop	r4
    158e:	08 95       	ret

00001590 <mpu6050_updateQuaternion>:

/*
 * update quaternion
 */
void mpu6050_updateQuaternion() {
    1590:	4f 92       	push	r4
    1592:	5f 92       	push	r5
    1594:	6f 92       	push	r6
    1596:	7f 92       	push	r7
    1598:	af 92       	push	r10
    159a:	bf 92       	push	r11
    159c:	cf 92       	push	r12
    159e:	df 92       	push	r13
    15a0:	ef 92       	push	r14
    15a2:	ff 92       	push	r15
    15a4:	0f 93       	push	r16
    15a6:	1f 93       	push	r17
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	2b 97       	sbiw	r28, 0x0b	; 11
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
	double gyrs = 0;
	double gzrs = 0;

	//get raw data
	while(1) {
		mpu6050_readBit(MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DATA_RDY_BIT, (uint8_t *)buffer);
    15bc:	45 e6       	ldi	r20, 0x65	; 101
    15be:	51 e0       	ldi	r21, 0x01	; 1
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	8a e3       	ldi	r24, 0x3A	; 58
    15c4:	0e 94 cf 03 	call	0x79e	; 0x79e <mpu6050_readBit>
		if(buffer[0])
    15c8:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <buffer>
    15cc:	81 11       	cpse	r24, r1
    15ce:	05 c0       	rjmp	.+10     	; 0x15da <mpu6050_updateQuaternion+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15d0:	2a e1       	ldi	r18, 0x1A	; 26
    15d2:	2a 95       	dec	r18
    15d4:	f1 f7       	brne	.-4      	; 0x15d2 <mpu6050_updateQuaternion+0x42>
    15d6:	00 c0       	rjmp	.+0      	; 0x15d8 <mpu6050_updateQuaternion+0x48>
    15d8:	f1 cf       	rjmp	.-30     	; 0x15bc <mpu6050_updateQuaternion+0x2c>
			break;
		_delay_us(10);
	}

	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    15da:	45 e6       	ldi	r20, 0x65	; 101
    15dc:	51 e0       	ldi	r21, 0x01	; 1
    15de:	6e e0       	ldi	r22, 0x0E	; 14
    15e0:	8b e3       	ldi	r24, 0x3B	; 59
    15e2:	0e 94 43 03 	call	0x686	; 0x686 <mpu6050_readBytes>
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    15e6:	e5 e6       	ldi	r30, 0x65	; 101
    15e8:	f1 e0       	ldi	r31, 0x01	; 1
    15ea:	80 81       	ld	r24, Z
    15ec:	61 81       	ldd	r22, Z+1	; 0x01
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    15ee:	02 81       	ldd	r16, Z+2	; 0x02
    15f0:	33 81       	ldd	r19, Z+3	; 0x03
    15f2:	39 87       	std	Y+9, r19	; 0x09
    az = (((int16_t)buffer[4]) << 8) | buffer[5];
    15f4:	14 81       	ldd	r17, Z+4	; 0x04
    15f6:	95 81       	ldd	r25, Z+5	; 0x05
    15f8:	9a 87       	std	Y+10, r25	; 0x0a
    gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    15fa:	60 84       	ldd	r6, Z+8	; 0x08
    15fc:	71 84       	ldd	r7, Z+9	; 0x09
    gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    15fe:	52 84       	ldd	r5, Z+10	; 0x0a
    1600:	43 84       	ldd	r4, Z+11	; 0x0b
    gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    1602:	e4 84       	ldd	r14, Z+12	; 0x0c
    1604:	f5 84       	ldd	r15, Z+13	; 0x0d
	gyrs = (double)(gy)/MPU6050_GGAIN*0.01745329; //degree to radians
	gzrs = (double)(gz)/MPU6050_GGAIN*0.01745329; //degree to radians
	#endif

    //compute data
    mpu6050_mahonyUpdate(gxrs, gyrs, gzrs, axg, ayg, azg);
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	78 2b       	or	r23, r24
    160a:	07 2e       	mov	r0, r23
    160c:	00 0c       	add	r0, r0
    160e:	88 0b       	sbc	r24, r24
    1610:	99 0b       	sbc	r25, r25
    1612:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__floatsisf>
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e8       	ldi	r20, 0x80	; 128
    161c:	58 e3       	ldi	r21, 0x38	; 56
    161e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1622:	5b 01       	movw	r10, r22
    1624:	6c 01       	movw	r12, r24
    1626:	6f 2d       	mov	r22, r15
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	7e 29       	or	r23, r14
    162c:	63 5e       	subi	r22, 0xE3	; 227
    162e:	7f 4f       	sbci	r23, 0xFF	; 255
    1630:	07 2e       	mov	r0, r23
    1632:	00 0c       	add	r0, r0
    1634:	88 0b       	sbc	r24, r24
    1636:	99 0b       	sbc	r25, r25
    1638:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__floatsisf>
    163c:	23 e3       	ldi	r18, 0x33	; 51
    163e:	33 e3       	ldi	r19, 0x33	; 51
    1640:	43 e8       	ldi	r20, 0x83	; 131
    1642:	51 e4       	ldi	r21, 0x41	; 65
    1644:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
    1648:	24 e3       	ldi	r18, 0x34	; 52
    164a:	3a ef       	ldi	r19, 0xFA	; 250
    164c:	4e e8       	ldi	r20, 0x8E	; 142
    164e:	5c e3       	ldi	r21, 0x3C	; 60
    1650:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1654:	69 83       	std	Y+1, r22	; 0x01
    1656:	7a 83       	std	Y+2, r23	; 0x02
    1658:	8b 83       	std	Y+3, r24	; 0x03
    165a:	9c 83       	std	Y+4, r25	; 0x04
    165c:	64 2d       	mov	r22, r4
    165e:	70 e0       	ldi	r23, 0x00	; 0
    1660:	75 29       	or	r23, r5
    1662:	69 50       	subi	r22, 0x09	; 9
    1664:	71 09       	sbc	r23, r1
    1666:	07 2e       	mov	r0, r23
    1668:	00 0c       	add	r0, r0
    166a:	88 0b       	sbc	r24, r24
    166c:	99 0b       	sbc	r25, r25
    166e:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__floatsisf>
    1672:	23 e3       	ldi	r18, 0x33	; 51
    1674:	33 e3       	ldi	r19, 0x33	; 51
    1676:	43 e8       	ldi	r20, 0x83	; 131
    1678:	51 e4       	ldi	r21, 0x41	; 65
    167a:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
    167e:	24 e3       	ldi	r18, 0x34	; 52
    1680:	3a ef       	ldi	r19, 0xFA	; 250
    1682:	4e e8       	ldi	r20, 0x8E	; 142
    1684:	5c e3       	ldi	r21, 0x3C	; 60
    1686:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    168a:	6d 83       	std	Y+5, r22	; 0x05
    168c:	7e 83       	std	Y+6, r23	; 0x06
    168e:	8f 83       	std	Y+7, r24	; 0x07
    1690:	98 87       	std	Y+8, r25	; 0x08
    1692:	67 2d       	mov	r22, r7
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	76 29       	or	r23, r6
    1698:	66 5d       	subi	r22, 0xD6	; 214
    169a:	7f 4f       	sbci	r23, 0xFF	; 255
    169c:	07 2e       	mov	r0, r23
    169e:	00 0c       	add	r0, r0
    16a0:	88 0b       	sbc	r24, r24
    16a2:	99 0b       	sbc	r25, r25
    16a4:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__floatsisf>
    16a8:	23 e3       	ldi	r18, 0x33	; 51
    16aa:	33 e3       	ldi	r19, 0x33	; 51
    16ac:	43 e8       	ldi	r20, 0x83	; 131
    16ae:	51 e4       	ldi	r21, 0x41	; 65
    16b0:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3>
    16b4:	24 e3       	ldi	r18, 0x34	; 52
    16b6:	3a ef       	ldi	r19, 0xFA	; 250
    16b8:	4e e8       	ldi	r20, 0x8E	; 142
    16ba:	5c e3       	ldi	r21, 0x3C	; 60
    16bc:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    16c0:	2b 01       	movw	r4, r22
    16c2:	3c 01       	movw	r6, r24
    16c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    16c6:	62 2f       	mov	r22, r18
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	71 2b       	or	r23, r17
    16cc:	07 2e       	mov	r0, r23
    16ce:	00 0c       	add	r0, r0
    16d0:	88 0b       	sbc	r24, r24
    16d2:	99 0b       	sbc	r25, r25
    16d4:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__floatsisf>
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	40 e8       	ldi	r20, 0x80	; 128
    16de:	58 e3       	ldi	r21, 0x38	; 56
    16e0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    16e4:	9f 93       	push	r25
    16e6:	8f 93       	push	r24
    16e8:	7f 93       	push	r23
    16ea:	6f 93       	push	r22
    16ec:	39 85       	ldd	r19, Y+9	; 0x09
    16ee:	63 2f       	mov	r22, r19
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	cb 01       	movw	r24, r22
    16f4:	90 2b       	or	r25, r16
    16f6:	9b 87       	std	Y+11, r25	; 0x0b
    16f8:	8a 87       	std	Y+10, r24	; 0x0a
    16fa:	bc 01       	movw	r22, r24
    16fc:	99 0f       	add	r25, r25
    16fe:	88 0b       	sbc	r24, r24
    1700:	99 0b       	sbc	r25, r25
    1702:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__floatsisf>
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e8       	ldi	r20, 0x80	; 128
    170c:	58 e3       	ldi	r21, 0x38	; 56
    170e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1712:	9f 93       	push	r25
    1714:	8f 93       	push	r24
    1716:	7f 93       	push	r23
    1718:	6f 93       	push	r22
    171a:	e9 80       	ldd	r14, Y+1	; 0x01
    171c:	fa 80       	ldd	r15, Y+2	; 0x02
    171e:	0b 81       	ldd	r16, Y+3	; 0x03
    1720:	1c 81       	ldd	r17, Y+4	; 0x04
    1722:	2d 81       	ldd	r18, Y+5	; 0x05
    1724:	3e 81       	ldd	r19, Y+6	; 0x06
    1726:	4f 81       	ldd	r20, Y+7	; 0x07
    1728:	58 85       	ldd	r21, Y+8	; 0x08
    172a:	c3 01       	movw	r24, r6
    172c:	b2 01       	movw	r22, r4
    172e:	0e 94 c4 05 	call	0xb88	; 0xb88 <mpu6050_mahonyUpdate>
}
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	2b 96       	adiw	r28, 0x0b	; 11
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	ff 90       	pop	r15
    1752:	ef 90       	pop	r14
    1754:	df 90       	pop	r13
    1756:	cf 90       	pop	r12
    1758:	bf 90       	pop	r11
    175a:	af 90       	pop	r10
    175c:	7f 90       	pop	r7
    175e:	6f 90       	pop	r6
    1760:	5f 90       	pop	r5
    1762:	4f 90       	pop	r4
    1764:	08 95       	ret

00001766 <__vector_16>:

/*
 * update timer for attitude
 */
ISR(TIMER0_OVF_vect) {
    1766:	1f 92       	push	r1
    1768:	0f 92       	push	r0
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	0f 92       	push	r0
    176e:	11 24       	eor	r1, r1
    1770:	2f 93       	push	r18
    1772:	3f 93       	push	r19
    1774:	4f 93       	push	r20
    1776:	5f 93       	push	r21
    1778:	6f 93       	push	r22
    177a:	7f 93       	push	r23
    177c:	8f 93       	push	r24
    177e:	9f 93       	push	r25
    1780:	af 93       	push	r26
    1782:	bf 93       	push	r27
    1784:	ef 93       	push	r30
    1786:	ff 93       	push	r31
	mpu6050_updateQuaternion();
    1788:	0e 94 c8 0a 	call	0x1590	; 0x1590 <mpu6050_updateQuaternion>
}
    178c:	ff 91       	pop	r31
    178e:	ef 91       	pop	r30
    1790:	bf 91       	pop	r27
    1792:	af 91       	pop	r26
    1794:	9f 91       	pop	r25
    1796:	8f 91       	pop	r24
    1798:	7f 91       	pop	r23
    179a:	6f 91       	pop	r22
    179c:	5f 91       	pop	r21
    179e:	4f 91       	pop	r20
    17a0:	3f 91       	pop	r19
    17a2:	2f 91       	pop	r18
    17a4:	0f 90       	pop	r0
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	0f 90       	pop	r0
    17aa:	1f 90       	pop	r1
    17ac:	18 95       	reti

000017ae <mpu6050_getQuaternion>:

/*
 * get quaternion
 */
void mpu6050_getQuaternion(double *qw, double *qx, double *qy, double *qz) {
    17ae:	cf 92       	push	r12
    17b0:	df 92       	push	r13
    17b2:	ef 92       	push	r14
    17b4:	ff 92       	push	r15
	*qw = q0;
    17b6:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
    17ba:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
    17be:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
    17c2:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
    17c6:	fc 01       	movw	r30, r24
    17c8:	c0 82       	st	Z, r12
    17ca:	d1 82       	std	Z+1, r13	; 0x01
    17cc:	e2 82       	std	Z+2, r14	; 0x02
    17ce:	f3 82       	std	Z+3, r15	; 0x03
	*qx = q1;
    17d0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <q1>
    17d4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <q1+0x1>
    17d8:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <q1+0x2>
    17dc:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <q1+0x3>
    17e0:	fb 01       	movw	r30, r22
    17e2:	80 83       	st	Z, r24
    17e4:	91 83       	std	Z+1, r25	; 0x01
    17e6:	a2 83       	std	Z+2, r26	; 0x02
    17e8:	b3 83       	std	Z+3, r27	; 0x03
	*qy = q2;
    17ea:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <q2>
    17ee:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <q2+0x1>
    17f2:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <q2+0x2>
    17f6:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <q2+0x3>
    17fa:	fa 01       	movw	r30, r20
    17fc:	80 83       	st	Z, r24
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	a2 83       	std	Z+2, r26	; 0x02
    1802:	b3 83       	std	Z+3, r27	; 0x03
	*qz = q3;
    1804:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <q3>
    1808:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <q3+0x1>
    180c:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <q3+0x2>
    1810:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <q3+0x3>
    1814:	f9 01       	movw	r30, r18
    1816:	80 83       	st	Z, r24
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	a2 83       	std	Z+2, r26	; 0x02
    181c:	b3 83       	std	Z+3, r27	; 0x03
}
    181e:	ff 90       	pop	r15
    1820:	ef 90       	pop	r14
    1822:	df 90       	pop	r13
    1824:	cf 90       	pop	r12
    1826:	08 95       	ret

00001828 <mpu6050_getRollPitchYaw>:
 * aerospace sequence, to obtain sensor attitude:
 * 1. rotate around sensor Z plane by yaw
 * 2. rotate around sensor Y plane by pitch
 * 3. rotate around sensor X plane by roll
 */
void mpu6050_getRollPitchYaw(double *roll, double *pitch, double *yaw) {
    1828:	2f 92       	push	r2
    182a:	3f 92       	push	r3
    182c:	4f 92       	push	r4
    182e:	5f 92       	push	r5
    1830:	6f 92       	push	r6
    1832:	7f 92       	push	r7
    1834:	8f 92       	push	r8
    1836:	9f 92       	push	r9
    1838:	af 92       	push	r10
    183a:	bf 92       	push	r11
    183c:	cf 92       	push	r12
    183e:	df 92       	push	r13
    1840:	ef 92       	push	r14
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	62 97       	sbiw	r28, 0x12	; 18
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	1c 01       	movw	r2, r24
    185e:	8b 01       	movw	r16, r22
    1860:	5a 8b       	std	Y+18, r21	; 0x12
    1862:	49 8b       	std	Y+17, r20	; 0x11
	*yaw = atan2(2*q1*q2 - 2*q0*q3, 2*q0*q0 + 2*q1*q1 - 1);
    1864:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1868:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    186c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    1870:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    1874:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
    1878:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
    187c:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
    1880:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
    1884:	c0 90 1c 01 	lds	r12, 0x011C	; 0x80011c <q1>
    1888:	d0 90 1d 01 	lds	r13, 0x011D	; 0x80011d <q1+0x1>
    188c:	e0 90 1e 01 	lds	r14, 0x011E	; 0x80011e <q1+0x2>
    1890:	f0 90 1f 01 	lds	r15, 0x011F	; 0x80011f <q1+0x3>
    1894:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <q1>
    1898:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <q1+0x1>
    189c:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <q1+0x2>
    18a0:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <q1+0x3>
    18a4:	2d 83       	std	Y+5, r18	; 0x05
    18a6:	3e 83       	std	Y+6, r19	; 0x06
    18a8:	4f 83       	std	Y+7, r20	; 0x07
    18aa:	58 87       	std	Y+8, r21	; 0x08
    18ac:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <q1>
    18b0:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <q1+0x1>
    18b4:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <q1+0x2>
    18b8:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <q1+0x3>
    18bc:	29 83       	std	Y+1, r18	; 0x01
    18be:	3a 83       	std	Y+2, r19	; 0x02
    18c0:	4b 83       	std	Y+3, r20	; 0x03
    18c2:	5c 83       	std	Y+4, r21	; 0x04
    18c4:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <q2>
    18c8:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <q2+0x1>
    18cc:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <q2+0x2>
    18d0:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <q2+0x3>
    18d4:	29 87       	std	Y+9, r18	; 0x09
    18d6:	3a 87       	std	Y+10, r19	; 0x0a
    18d8:	4b 87       	std	Y+11, r20	; 0x0b
    18da:	5c 87       	std	Y+12, r21	; 0x0c
    18dc:	40 90 00 01 	lds	r4, 0x0100	; 0x800100 <__data_start>
    18e0:	50 90 01 01 	lds	r5, 0x0101	; 0x800101 <__data_start+0x1>
    18e4:	60 90 02 01 	lds	r6, 0x0102	; 0x800102 <__data_start+0x2>
    18e8:	70 90 03 01 	lds	r7, 0x0103	; 0x800103 <__data_start+0x3>
    18ec:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <q3>
    18f0:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <q3+0x1>
    18f4:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <q3+0x2>
    18f8:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <q3+0x3>
    18fc:	2d 87       	std	Y+13, r18	; 0x0d
    18fe:	3e 87       	std	Y+14, r19	; 0x0e
    1900:	4f 87       	std	Y+15, r20	; 0x0f
    1902:	58 8b       	std	Y+16, r21	; 0x10
    1904:	9b 01       	movw	r18, r22
    1906:	ac 01       	movw	r20, r24
    1908:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    190c:	a5 01       	movw	r20, r10
    190e:	94 01       	movw	r18, r8
    1910:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1914:	4b 01       	movw	r8, r22
    1916:	5c 01       	movw	r10, r24
    1918:	a7 01       	movw	r20, r14
    191a:	96 01       	movw	r18, r12
    191c:	c7 01       	movw	r24, r14
    191e:	b6 01       	movw	r22, r12
    1920:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    1924:	2d 81       	ldd	r18, Y+5	; 0x05
    1926:	3e 81       	ldd	r19, Y+6	; 0x06
    1928:	4f 81       	ldd	r20, Y+7	; 0x07
    192a:	58 85       	ldd	r21, Y+8	; 0x08
    192c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1930:	9b 01       	movw	r18, r22
    1932:	ac 01       	movw	r20, r24
    1934:	c5 01       	movw	r24, r10
    1936:	b4 01       	movw	r22, r8
    1938:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e8       	ldi	r20, 0x80	; 128
    1942:	5f e3       	ldi	r21, 0x3F	; 63
    1944:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__subsf3>
    1948:	6b 01       	movw	r12, r22
    194a:	7c 01       	movw	r14, r24
    194c:	29 81       	ldd	r18, Y+1	; 0x01
    194e:	3a 81       	ldd	r19, Y+2	; 0x02
    1950:	4b 81       	ldd	r20, Y+3	; 0x03
    1952:	5c 81       	ldd	r21, Y+4	; 0x04
    1954:	ca 01       	movw	r24, r20
    1956:	b9 01       	movw	r22, r18
    1958:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    195c:	29 85       	ldd	r18, Y+9	; 0x09
    195e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1960:	4b 85       	ldd	r20, Y+11	; 0x0b
    1962:	5c 85       	ldd	r21, Y+12	; 0x0c
    1964:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1968:	4b 01       	movw	r8, r22
    196a:	5c 01       	movw	r10, r24
    196c:	a3 01       	movw	r20, r6
    196e:	92 01       	movw	r18, r4
    1970:	c3 01       	movw	r24, r6
    1972:	b2 01       	movw	r22, r4
    1974:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    1978:	2d 85       	ldd	r18, Y+13	; 0x0d
    197a:	3e 85       	ldd	r19, Y+14	; 0x0e
    197c:	4f 85       	ldd	r20, Y+15	; 0x0f
    197e:	58 89       	ldd	r21, Y+16	; 0x10
    1980:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1984:	9b 01       	movw	r18, r22
    1986:	ac 01       	movw	r20, r24
    1988:	c5 01       	movw	r24, r10
    198a:	b4 01       	movw	r22, r8
    198c:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__subsf3>
    1990:	a7 01       	movw	r20, r14
    1992:	96 01       	movw	r18, r12
    1994:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <atan2>
    1998:	e9 89       	ldd	r30, Y+17	; 0x11
    199a:	fa 89       	ldd	r31, Y+18	; 0x12
    199c:	60 83       	st	Z, r22
    199e:	71 83       	std	Z+1, r23	; 0x01
    19a0:	82 83       	std	Z+2, r24	; 0x02
    19a2:	93 83       	std	Z+3, r25	; 0x03
	*pitch = -asin(2*q1*q3 + 2*q0*q2);
    19a4:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <q1>
    19a8:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <q1+0x1>
    19ac:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <q1+0x2>
    19b0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <q1+0x3>
    19b4:	80 90 14 01 	lds	r8, 0x0114	; 0x800114 <q3>
    19b8:	90 90 15 01 	lds	r9, 0x0115	; 0x800115 <q3+0x1>
    19bc:	a0 90 16 01 	lds	r10, 0x0116	; 0x800116 <q3+0x2>
    19c0:	b0 90 17 01 	lds	r11, 0x0117	; 0x800117 <q3+0x3>
    19c4:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
    19c8:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
    19cc:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
    19d0:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
    19d4:	40 90 18 01 	lds	r4, 0x0118	; 0x800118 <q2>
    19d8:	50 90 19 01 	lds	r5, 0x0119	; 0x800119 <q2+0x1>
    19dc:	60 90 1a 01 	lds	r6, 0x011A	; 0x80011a <q2+0x2>
    19e0:	70 90 1b 01 	lds	r7, 0x011B	; 0x80011b <q2+0x3>
    19e4:	9b 01       	movw	r18, r22
    19e6:	ac 01       	movw	r20, r24
    19e8:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    19ec:	a5 01       	movw	r20, r10
    19ee:	94 01       	movw	r18, r8
    19f0:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    19f4:	4b 01       	movw	r8, r22
    19f6:	5c 01       	movw	r10, r24
    19f8:	a7 01       	movw	r20, r14
    19fa:	96 01       	movw	r18, r12
    19fc:	c7 01       	movw	r24, r14
    19fe:	b6 01       	movw	r22, r12
    1a00:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    1a04:	a3 01       	movw	r20, r6
    1a06:	92 01       	movw	r18, r4
    1a08:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1a0c:	9b 01       	movw	r18, r22
    1a0e:	ac 01       	movw	r20, r24
    1a10:	c5 01       	movw	r24, r10
    1a12:	b4 01       	movw	r22, r8
    1a14:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    1a18:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <asin>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	b0 58       	subi	r27, 0x80	; 128
    1a22:	f8 01       	movw	r30, r16
    1a24:	80 83       	st	Z, r24
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	a2 83       	std	Z+2, r26	; 0x02
    1a2a:	b3 83       	std	Z+3, r27	; 0x03
	*roll = atan2(2*q2*q3 - 2*q0*q1, 2*q0*q0 + 2*q3*q3 - 1);
    1a2c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1a30:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1a34:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    1a38:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    1a3c:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
    1a40:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
    1a44:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
    1a48:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
    1a4c:	c0 90 14 01 	lds	r12, 0x0114	; 0x800114 <q3>
    1a50:	d0 90 15 01 	lds	r13, 0x0115	; 0x800115 <q3+0x1>
    1a54:	e0 90 16 01 	lds	r14, 0x0116	; 0x800116 <q3+0x2>
    1a58:	f0 90 17 01 	lds	r15, 0x0117	; 0x800117 <q3+0x3>
    1a5c:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <q3>
    1a60:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <q3+0x1>
    1a64:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <q3+0x2>
    1a68:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <q3+0x3>
    1a6c:	2d 83       	std	Y+5, r18	; 0x05
    1a6e:	3e 83       	std	Y+6, r19	; 0x06
    1a70:	4f 83       	std	Y+7, r20	; 0x07
    1a72:	58 87       	std	Y+8, r21	; 0x08
    1a74:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <q2>
    1a78:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <q2+0x1>
    1a7c:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <q2+0x2>
    1a80:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <q2+0x3>
    1a84:	29 83       	std	Y+1, r18	; 0x01
    1a86:	3a 83       	std	Y+2, r19	; 0x02
    1a88:	4b 83       	std	Y+3, r20	; 0x03
    1a8a:	5c 83       	std	Y+4, r21	; 0x04
    1a8c:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <q3>
    1a90:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <q3+0x1>
    1a94:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <q3+0x2>
    1a98:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <q3+0x3>
    1a9c:	29 87       	std	Y+9, r18	; 0x09
    1a9e:	3a 87       	std	Y+10, r19	; 0x0a
    1aa0:	4b 87       	std	Y+11, r20	; 0x0b
    1aa2:	5c 87       	std	Y+12, r21	; 0x0c
    1aa4:	40 90 00 01 	lds	r4, 0x0100	; 0x800100 <__data_start>
    1aa8:	50 90 01 01 	lds	r5, 0x0101	; 0x800101 <__data_start+0x1>
    1aac:	60 90 02 01 	lds	r6, 0x0102	; 0x800102 <__data_start+0x2>
    1ab0:	70 90 03 01 	lds	r7, 0x0103	; 0x800103 <__data_start+0x3>
    1ab4:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <q1>
    1ab8:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <q1+0x1>
    1abc:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <q1+0x2>
    1ac0:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <q1+0x3>
    1ac4:	2d 87       	std	Y+13, r18	; 0x0d
    1ac6:	3e 87       	std	Y+14, r19	; 0x0e
    1ac8:	4f 87       	std	Y+15, r20	; 0x0f
    1aca:	58 8b       	std	Y+16, r21	; 0x10
    1acc:	9b 01       	movw	r18, r22
    1ace:	ac 01       	movw	r20, r24
    1ad0:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    1ad4:	a5 01       	movw	r20, r10
    1ad6:	94 01       	movw	r18, r8
    1ad8:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1adc:	4b 01       	movw	r8, r22
    1ade:	5c 01       	movw	r10, r24
    1ae0:	a7 01       	movw	r20, r14
    1ae2:	96 01       	movw	r18, r12
    1ae4:	c7 01       	movw	r24, r14
    1ae6:	b6 01       	movw	r22, r12
    1ae8:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    1aec:	2d 81       	ldd	r18, Y+5	; 0x05
    1aee:	3e 81       	ldd	r19, Y+6	; 0x06
    1af0:	4f 81       	ldd	r20, Y+7	; 0x07
    1af2:	58 85       	ldd	r21, Y+8	; 0x08
    1af4:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1af8:	9b 01       	movw	r18, r22
    1afa:	ac 01       	movw	r20, r24
    1afc:	c5 01       	movw	r24, r10
    1afe:	b4 01       	movw	r22, r8
    1b00:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e8       	ldi	r20, 0x80	; 128
    1b0a:	5f e3       	ldi	r21, 0x3F	; 63
    1b0c:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__subsf3>
    1b10:	6b 01       	movw	r12, r22
    1b12:	7c 01       	movw	r14, r24
    1b14:	29 81       	ldd	r18, Y+1	; 0x01
    1b16:	3a 81       	ldd	r19, Y+2	; 0x02
    1b18:	4b 81       	ldd	r20, Y+3	; 0x03
    1b1a:	5c 81       	ldd	r21, Y+4	; 0x04
    1b1c:	ca 01       	movw	r24, r20
    1b1e:	b9 01       	movw	r22, r18
    1b20:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    1b24:	29 85       	ldd	r18, Y+9	; 0x09
    1b26:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b28:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b2a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b2c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1b30:	4b 01       	movw	r8, r22
    1b32:	5c 01       	movw	r10, r24
    1b34:	a3 01       	movw	r20, r6
    1b36:	92 01       	movw	r18, r4
    1b38:	c3 01       	movw	r24, r6
    1b3a:	b2 01       	movw	r22, r4
    1b3c:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__addsf3>
    1b40:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b42:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b44:	4f 85       	ldd	r20, Y+15	; 0x0f
    1b46:	58 89       	ldd	r21, Y+16	; 0x10
    1b48:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    1b4c:	9b 01       	movw	r18, r22
    1b4e:	ac 01       	movw	r20, r24
    1b50:	c5 01       	movw	r24, r10
    1b52:	b4 01       	movw	r22, r8
    1b54:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__subsf3>
    1b58:	a7 01       	movw	r20, r14
    1b5a:	96 01       	movw	r18, r12
    1b5c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <atan2>
    1b60:	f1 01       	movw	r30, r2
    1b62:	60 83       	st	Z, r22
    1b64:	71 83       	std	Z+1, r23	; 0x01
    1b66:	82 83       	std	Z+2, r24	; 0x02
    1b68:	93 83       	std	Z+3, r25	; 0x03
}
    1b6a:	62 96       	adiw	r28, 0x12	; 18
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	df 91       	pop	r29
    1b78:	cf 91       	pop	r28
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	ff 90       	pop	r15
    1b80:	ef 90       	pop	r14
    1b82:	df 90       	pop	r13
    1b84:	cf 90       	pop	r12
    1b86:	bf 90       	pop	r11
    1b88:	af 90       	pop	r10
    1b8a:	9f 90       	pop	r9
    1b8c:	8f 90       	pop	r8
    1b8e:	7f 90       	pop	r7
    1b90:	6f 90       	pop	r6
    1b92:	5f 90       	pop	r5
    1b94:	4f 90       	pop	r4
    1b96:	3f 90       	pop	r3
    1b98:	2f 90       	pop	r2
    1b9a:	08 95       	ret

00001b9c <__vector_18>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
    1b9c:	1f 92       	push	r1
    1b9e:	0f 92       	push	r0
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	0f 92       	push	r0
    1ba4:	11 24       	eor	r1, r1
    1ba6:	2f 93       	push	r18
    1ba8:	8f 93       	push	r24
    1baa:	9f 93       	push	r25
    1bac:	ef 93       	push	r30
    1bae:	ff 93       	push	r31
    1bb0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1bb4:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1bb8:	88 71       	andi	r24, 0x18	; 24
    1bba:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <UART_RxHead>
    1bbe:	ef 5f       	subi	r30, 0xFF	; 255
    1bc0:	ef 71       	andi	r30, 0x1F	; 31
    1bc2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <UART_RxTail>
    1bc6:	e9 17       	cp	r30, r25
    1bc8:	39 f0       	breq	.+14     	; 0x1bd8 <__vector_18+0x3c>
    1bca:	e0 93 22 01 	sts	0x0122, r30	; 0x800122 <UART_RxHead>
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	eb 5d       	subi	r30, 0xDB	; 219
    1bd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd4:	20 83       	st	Z, r18
    1bd6:	01 c0       	rjmp	.+2      	; 0x1bda <__vector_18+0x3e>
    1bd8:	82 e0       	ldi	r24, 0x02	; 2
    1bda:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <UART_LastRxError>
    1bde:	ff 91       	pop	r31
    1be0:	ef 91       	pop	r30
    1be2:	9f 91       	pop	r25
    1be4:	8f 91       	pop	r24
    1be6:	2f 91       	pop	r18
    1be8:	0f 90       	pop	r0
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	0f 90       	pop	r0
    1bee:	1f 90       	pop	r1
    1bf0:	18 95       	reti

00001bf2 <__vector_19>:
    1bf2:	1f 92       	push	r1
    1bf4:	0f 92       	push	r0
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	0f 92       	push	r0
    1bfa:	11 24       	eor	r1, r1
    1bfc:	8f 93       	push	r24
    1bfe:	9f 93       	push	r25
    1c00:	ef 93       	push	r30
    1c02:	ff 93       	push	r31
    1c04:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <UART_TxHead>
    1c08:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <UART_TxTail>
    1c0c:	98 17       	cp	r25, r24
    1c0e:	69 f0       	breq	.+26     	; 0x1c2a <__vector_19+0x38>
    1c10:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <UART_TxTail>
    1c14:	ef 5f       	subi	r30, 0xFF	; 255
    1c16:	ef 71       	andi	r30, 0x1F	; 31
    1c18:	e0 93 23 01 	sts	0x0123, r30	; 0x800123 <UART_TxTail>
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	eb 5b       	subi	r30, 0xBB	; 187
    1c20:	fe 4f       	sbci	r31, 0xFE	; 254
    1c22:	80 81       	ld	r24, Z
    1c24:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1c28:	05 c0       	rjmp	.+10     	; 0x1c34 <__vector_19+0x42>
    1c2a:	e1 ec       	ldi	r30, 0xC1	; 193
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	8f 7d       	andi	r24, 0xDF	; 223
    1c32:	80 83       	st	Z, r24
    1c34:	ff 91       	pop	r31
    1c36:	ef 91       	pop	r30
    1c38:	9f 91       	pop	r25
    1c3a:	8f 91       	pop	r24
    1c3c:	0f 90       	pop	r0
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	0f 90       	pop	r0
    1c42:	1f 90       	pop	r1
    1c44:	18 95       	reti

00001c46 <uart_init>:
    1c46:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <UART_TxHead>
    1c4a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <UART_TxTail>
    1c4e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <UART_RxHead>
    1c52:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <UART_RxTail>
    1c56:	99 23       	and	r25, r25
    1c58:	24 f4       	brge	.+8      	; 0x1c62 <uart_init+0x1c>
    1c5a:	22 e0       	ldi	r18, 0x02	; 2
    1c5c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1c60:	9f 77       	andi	r25, 0x7F	; 127
    1c62:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c66:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c6a:	88 e9       	ldi	r24, 0x98	; 152
    1c6c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1c70:	86 e0       	ldi	r24, 0x06	; 6
    1c72:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1c76:	08 95       	ret

00001c78 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1c78:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <UART_TxHead>
    1c7c:	2f 5f       	subi	r18, 0xFF	; 255
    1c7e:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    1c80:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <UART_TxTail>
    1c84:	29 17       	cp	r18, r25
    1c86:	e1 f3       	breq	.-8      	; 0x1c80 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    1c88:	e2 2f       	mov	r30, r18
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	eb 5b       	subi	r30, 0xBB	; 187
    1c8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c90:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    1c92:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    1c96:	e1 ec       	ldi	r30, 0xC1	; 193
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	80 62       	ori	r24, 0x20	; 32
    1c9e:	80 83       	st	Z, r24
    1ca0:	08 95       	ret

00001ca2 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	ec 01       	movw	r28, r24
    while (*s) 
    1ca8:	88 81       	ld	r24, Y
    1caa:	88 23       	and	r24, r24
    1cac:	31 f0       	breq	.+12     	; 0x1cba <uart_puts+0x18>
    1cae:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
    1cb0:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    1cb4:	89 91       	ld	r24, Y+
    1cb6:	81 11       	cpse	r24, r1
    1cb8:	fb cf       	rjmp	.-10     	; 0x1cb0 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	08 95       	ret

00001cc0 <__subsf3>:
    1cc0:	50 58       	subi	r21, 0x80	; 128

00001cc2 <__addsf3>:
    1cc2:	bb 27       	eor	r27, r27
    1cc4:	aa 27       	eor	r26, r26
    1cc6:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__addsf3x>
    1cca:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <__fp_round>
    1cce:	0e 94 96 10 	call	0x212c	; 0x212c <__fp_pscA>
    1cd2:	38 f0       	brcs	.+14     	; 0x1ce2 <__addsf3+0x20>
    1cd4:	0e 94 9d 10 	call	0x213a	; 0x213a <__fp_pscB>
    1cd8:	20 f0       	brcs	.+8      	; 0x1ce2 <__addsf3+0x20>
    1cda:	39 f4       	brne	.+14     	; 0x1cea <__addsf3+0x28>
    1cdc:	9f 3f       	cpi	r25, 0xFF	; 255
    1cde:	19 f4       	brne	.+6      	; 0x1ce6 <__addsf3+0x24>
    1ce0:	26 f4       	brtc	.+8      	; 0x1cea <__addsf3+0x28>
    1ce2:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__fp_nan>
    1ce6:	0e f4       	brtc	.+2      	; 0x1cea <__addsf3+0x28>
    1ce8:	e0 95       	com	r30
    1cea:	e7 fb       	bst	r30, 7
    1cec:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <__fp_inf>

00001cf0 <__addsf3x>:
    1cf0:	e9 2f       	mov	r30, r25
    1cf2:	0e 94 b5 10 	call	0x216a	; 0x216a <__fp_split3>
    1cf6:	58 f3       	brcs	.-42     	; 0x1cce <__addsf3+0xc>
    1cf8:	ba 17       	cp	r27, r26
    1cfa:	62 07       	cpc	r22, r18
    1cfc:	73 07       	cpc	r23, r19
    1cfe:	84 07       	cpc	r24, r20
    1d00:	95 07       	cpc	r25, r21
    1d02:	20 f0       	brcs	.+8      	; 0x1d0c <__addsf3x+0x1c>
    1d04:	79 f4       	brne	.+30     	; 0x1d24 <__addsf3x+0x34>
    1d06:	a6 f5       	brtc	.+104    	; 0x1d70 <__addsf3x+0x80>
    1d08:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__fp_zero>
    1d0c:	0e f4       	brtc	.+2      	; 0x1d10 <__addsf3x+0x20>
    1d0e:	e0 95       	com	r30
    1d10:	0b 2e       	mov	r0, r27
    1d12:	ba 2f       	mov	r27, r26
    1d14:	a0 2d       	mov	r26, r0
    1d16:	0b 01       	movw	r0, r22
    1d18:	b9 01       	movw	r22, r18
    1d1a:	90 01       	movw	r18, r0
    1d1c:	0c 01       	movw	r0, r24
    1d1e:	ca 01       	movw	r24, r20
    1d20:	a0 01       	movw	r20, r0
    1d22:	11 24       	eor	r1, r1
    1d24:	ff 27       	eor	r31, r31
    1d26:	59 1b       	sub	r21, r25
    1d28:	99 f0       	breq	.+38     	; 0x1d50 <__addsf3x+0x60>
    1d2a:	59 3f       	cpi	r21, 0xF9	; 249
    1d2c:	50 f4       	brcc	.+20     	; 0x1d42 <__addsf3x+0x52>
    1d2e:	50 3e       	cpi	r21, 0xE0	; 224
    1d30:	68 f1       	brcs	.+90     	; 0x1d8c <__addsf3x+0x9c>
    1d32:	1a 16       	cp	r1, r26
    1d34:	f0 40       	sbci	r31, 0x00	; 0
    1d36:	a2 2f       	mov	r26, r18
    1d38:	23 2f       	mov	r18, r19
    1d3a:	34 2f       	mov	r19, r20
    1d3c:	44 27       	eor	r20, r20
    1d3e:	58 5f       	subi	r21, 0xF8	; 248
    1d40:	f3 cf       	rjmp	.-26     	; 0x1d28 <__addsf3x+0x38>
    1d42:	46 95       	lsr	r20
    1d44:	37 95       	ror	r19
    1d46:	27 95       	ror	r18
    1d48:	a7 95       	ror	r26
    1d4a:	f0 40       	sbci	r31, 0x00	; 0
    1d4c:	53 95       	inc	r21
    1d4e:	c9 f7       	brne	.-14     	; 0x1d42 <__addsf3x+0x52>
    1d50:	7e f4       	brtc	.+30     	; 0x1d70 <__addsf3x+0x80>
    1d52:	1f 16       	cp	r1, r31
    1d54:	ba 0b       	sbc	r27, r26
    1d56:	62 0b       	sbc	r22, r18
    1d58:	73 0b       	sbc	r23, r19
    1d5a:	84 0b       	sbc	r24, r20
    1d5c:	ba f0       	brmi	.+46     	; 0x1d8c <__addsf3x+0x9c>
    1d5e:	91 50       	subi	r25, 0x01	; 1
    1d60:	a1 f0       	breq	.+40     	; 0x1d8a <__addsf3x+0x9a>
    1d62:	ff 0f       	add	r31, r31
    1d64:	bb 1f       	adc	r27, r27
    1d66:	66 1f       	adc	r22, r22
    1d68:	77 1f       	adc	r23, r23
    1d6a:	88 1f       	adc	r24, r24
    1d6c:	c2 f7       	brpl	.-16     	; 0x1d5e <__addsf3x+0x6e>
    1d6e:	0e c0       	rjmp	.+28     	; 0x1d8c <__addsf3x+0x9c>
    1d70:	ba 0f       	add	r27, r26
    1d72:	62 1f       	adc	r22, r18
    1d74:	73 1f       	adc	r23, r19
    1d76:	84 1f       	adc	r24, r20
    1d78:	48 f4       	brcc	.+18     	; 0x1d8c <__addsf3x+0x9c>
    1d7a:	87 95       	ror	r24
    1d7c:	77 95       	ror	r23
    1d7e:	67 95       	ror	r22
    1d80:	b7 95       	ror	r27
    1d82:	f7 95       	ror	r31
    1d84:	9e 3f       	cpi	r25, 0xFE	; 254
    1d86:	08 f0       	brcs	.+2      	; 0x1d8a <__addsf3x+0x9a>
    1d88:	b0 cf       	rjmp	.-160    	; 0x1cea <__addsf3+0x28>
    1d8a:	93 95       	inc	r25
    1d8c:	88 0f       	add	r24, r24
    1d8e:	08 f0       	brcs	.+2      	; 0x1d92 <__addsf3x+0xa2>
    1d90:	99 27       	eor	r25, r25
    1d92:	ee 0f       	add	r30, r30
    1d94:	97 95       	ror	r25
    1d96:	87 95       	ror	r24
    1d98:	08 95       	ret

00001d9a <asin>:
    1d9a:	9f 93       	push	r25
    1d9c:	9f 77       	andi	r25, 0x7F	; 127
    1d9e:	ee e3       	ldi	r30, 0x3E	; 62
    1da0:	89 37       	cpi	r24, 0x79	; 121
    1da2:	9e 07       	cpc	r25, r30
    1da4:	28 f4       	brcc	.+10     	; 0x1db0 <asin+0x16>
    1da6:	e8 e6       	ldi	r30, 0x68	; 104
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	0e 94 82 10 	call	0x2104	; 0x2104 <__fp_powsodd>
    1dae:	0c c0       	rjmp	.+24     	; 0x1dc8 <asin+0x2e>
    1db0:	0e 94 0e 10 	call	0x201c	; 0x201c <__fp_arccos>
    1db4:	90 58       	subi	r25, 0x80	; 128
    1db6:	a2 ea       	ldi	r26, 0xA2	; 162
    1db8:	2a ed       	ldi	r18, 0xDA	; 218
    1dba:	3f e0       	ldi	r19, 0x0F	; 15
    1dbc:	49 ec       	ldi	r20, 0xC9	; 201
    1dbe:	5f e3       	ldi	r21, 0x3F	; 63
    1dc0:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__addsf3x>
    1dc4:	0e 94 a4 10 	call	0x2148	; 0x2148 <__fp_round>
    1dc8:	0f 90       	pop	r0
    1dca:	07 fc       	sbrc	r0, 7
    1dcc:	90 58       	subi	r25, 0x80	; 128
    1dce:	08 95       	ret
    1dd0:	0e 94 96 10 	call	0x212c	; 0x212c <__fp_pscA>
    1dd4:	60 f0       	brcs	.+24     	; 0x1dee <asin+0x54>
    1dd6:	80 e8       	ldi	r24, 0x80	; 128
    1dd8:	91 e0       	ldi	r25, 0x01	; 1
    1dda:	09 f4       	brne	.+2      	; 0x1dde <asin+0x44>
    1ddc:	9e ef       	ldi	r25, 0xFE	; 254
    1dde:	0e 94 9d 10 	call	0x213a	; 0x213a <__fp_pscB>
    1de2:	28 f0       	brcs	.+10     	; 0x1dee <asin+0x54>
    1de4:	40 e8       	ldi	r20, 0x80	; 128
    1de6:	51 e0       	ldi	r21, 0x01	; 1
    1de8:	71 f4       	brne	.+28     	; 0x1e06 <atan2+0x10>
    1dea:	5e ef       	ldi	r21, 0xFE	; 254
    1dec:	0c c0       	rjmp	.+24     	; 0x1e06 <atan2+0x10>
    1dee:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__fp_nan>
    1df2:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__fp_zero>

00001df6 <atan2>:
    1df6:	e9 2f       	mov	r30, r25
    1df8:	e0 78       	andi	r30, 0x80	; 128
    1dfa:	0e 94 b5 10 	call	0x216a	; 0x216a <__fp_split3>
    1dfe:	40 f3       	brcs	.-48     	; 0x1dd0 <asin+0x36>
    1e00:	09 2e       	mov	r0, r25
    1e02:	05 2a       	or	r0, r21
    1e04:	b1 f3       	breq	.-20     	; 0x1df2 <asin+0x58>
    1e06:	26 17       	cp	r18, r22
    1e08:	37 07       	cpc	r19, r23
    1e0a:	48 07       	cpc	r20, r24
    1e0c:	59 07       	cpc	r21, r25
    1e0e:	38 f0       	brcs	.+14     	; 0x1e1e <atan2+0x28>
    1e10:	0e 2e       	mov	r0, r30
    1e12:	07 f8       	bld	r0, 7
    1e14:	e0 25       	eor	r30, r0
    1e16:	69 f0       	breq	.+26     	; 0x1e32 <atan2+0x3c>
    1e18:	e0 25       	eor	r30, r0
    1e1a:	e0 64       	ori	r30, 0x40	; 64
    1e1c:	0a c0       	rjmp	.+20     	; 0x1e32 <atan2+0x3c>
    1e1e:	ef 63       	ori	r30, 0x3F	; 63
    1e20:	07 f8       	bld	r0, 7
    1e22:	00 94       	com	r0
    1e24:	07 fa       	bst	r0, 7
    1e26:	db 01       	movw	r26, r22
    1e28:	b9 01       	movw	r22, r18
    1e2a:	9d 01       	movw	r18, r26
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	ca 01       	movw	r24, r20
    1e30:	ad 01       	movw	r20, r26
    1e32:	ef 93       	push	r30
    1e34:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__divsf3_pse>
    1e38:	0e 94 a4 10 	call	0x2148	; 0x2148 <__fp_round>
    1e3c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <atan>
    1e40:	5f 91       	pop	r21
    1e42:	55 23       	and	r21, r21
    1e44:	39 f0       	breq	.+14     	; 0x1e54 <atan2+0x5e>
    1e46:	2b ed       	ldi	r18, 0xDB	; 219
    1e48:	3f e0       	ldi	r19, 0x0F	; 15
    1e4a:	49 e4       	ldi	r20, 0x49	; 73
    1e4c:	50 fd       	sbrc	r21, 0
    1e4e:	49 ec       	ldi	r20, 0xC9	; 201
    1e50:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__addsf3>
    1e54:	08 95       	ret

00001e56 <atan>:
    1e56:	df 93       	push	r29
    1e58:	dd 27       	eor	r29, r29
    1e5a:	b9 2f       	mov	r27, r25
    1e5c:	bf 77       	andi	r27, 0x7F	; 127
    1e5e:	40 e8       	ldi	r20, 0x80	; 128
    1e60:	5f e3       	ldi	r21, 0x3F	; 63
    1e62:	16 16       	cp	r1, r22
    1e64:	17 06       	cpc	r1, r23
    1e66:	48 07       	cpc	r20, r24
    1e68:	5b 07       	cpc	r21, r27
    1e6a:	18 f4       	brcc	.+6      	; 0x1e72 <atan+0x1c>
    1e6c:	d9 2f       	mov	r29, r25
    1e6e:	0e 94 de 10 	call	0x21bc	; 0x21bc <inverse>
    1e72:	9f 93       	push	r25
    1e74:	8f 93       	push	r24
    1e76:	7f 93       	push	r23
    1e78:	6f 93       	push	r22
    1e7a:	0e 94 99 11 	call	0x2332	; 0x2332 <square>
    1e7e:	ec e7       	ldi	r30, 0x7C	; 124
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__fp_powser>
    1e86:	0e 94 a4 10 	call	0x2148	; 0x2148 <__fp_round>
    1e8a:	2f 91       	pop	r18
    1e8c:	3f 91       	pop	r19
    1e8e:	4f 91       	pop	r20
    1e90:	5f 91       	pop	r21
    1e92:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__mulsf3x>
    1e96:	dd 23       	and	r29, r29
    1e98:	51 f0       	breq	.+20     	; 0x1eae <atan+0x58>
    1e9a:	90 58       	subi	r25, 0x80	; 128
    1e9c:	a2 ea       	ldi	r26, 0xA2	; 162
    1e9e:	2a ed       	ldi	r18, 0xDA	; 218
    1ea0:	3f e0       	ldi	r19, 0x0F	; 15
    1ea2:	49 ec       	ldi	r20, 0xC9	; 201
    1ea4:	5f e3       	ldi	r21, 0x3F	; 63
    1ea6:	d0 78       	andi	r29, 0x80	; 128
    1ea8:	5d 27       	eor	r21, r29
    1eaa:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__addsf3x>
    1eae:	df 91       	pop	r29
    1eb0:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <__fp_round>

00001eb4 <__cmpsf2>:
    1eb4:	0e 94 2e 10 	call	0x205c	; 0x205c <__fp_cmp>
    1eb8:	08 f4       	brcc	.+2      	; 0x1ebc <__cmpsf2+0x8>
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	08 95       	ret

00001ebe <__divsf3>:
    1ebe:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__divsf3x>
    1ec2:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <__fp_round>
    1ec6:	0e 94 9d 10 	call	0x213a	; 0x213a <__fp_pscB>
    1eca:	58 f0       	brcs	.+22     	; 0x1ee2 <__divsf3+0x24>
    1ecc:	0e 94 96 10 	call	0x212c	; 0x212c <__fp_pscA>
    1ed0:	40 f0       	brcs	.+16     	; 0x1ee2 <__divsf3+0x24>
    1ed2:	29 f4       	brne	.+10     	; 0x1ede <__divsf3+0x20>
    1ed4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ed6:	29 f0       	breq	.+10     	; 0x1ee2 <__divsf3+0x24>
    1ed8:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <__fp_inf>
    1edc:	51 11       	cpse	r21, r1
    1ede:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__fp_szero>
    1ee2:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__fp_nan>

00001ee6 <__divsf3x>:
    1ee6:	0e 94 b5 10 	call	0x216a	; 0x216a <__fp_split3>
    1eea:	68 f3       	brcs	.-38     	; 0x1ec6 <__divsf3+0x8>

00001eec <__divsf3_pse>:
    1eec:	99 23       	and	r25, r25
    1eee:	b1 f3       	breq	.-20     	; 0x1edc <__divsf3+0x1e>
    1ef0:	55 23       	and	r21, r21
    1ef2:	91 f3       	breq	.-28     	; 0x1ed8 <__divsf3+0x1a>
    1ef4:	95 1b       	sub	r25, r21
    1ef6:	55 0b       	sbc	r21, r21
    1ef8:	bb 27       	eor	r27, r27
    1efa:	aa 27       	eor	r26, r26
    1efc:	62 17       	cp	r22, r18
    1efe:	73 07       	cpc	r23, r19
    1f00:	84 07       	cpc	r24, r20
    1f02:	38 f0       	brcs	.+14     	; 0x1f12 <__divsf3_pse+0x26>
    1f04:	9f 5f       	subi	r25, 0xFF	; 255
    1f06:	5f 4f       	sbci	r21, 0xFF	; 255
    1f08:	22 0f       	add	r18, r18
    1f0a:	33 1f       	adc	r19, r19
    1f0c:	44 1f       	adc	r20, r20
    1f0e:	aa 1f       	adc	r26, r26
    1f10:	a9 f3       	breq	.-22     	; 0x1efc <__divsf3_pse+0x10>
    1f12:	35 d0       	rcall	.+106    	; 0x1f7e <__divsf3_pse+0x92>
    1f14:	0e 2e       	mov	r0, r30
    1f16:	3a f0       	brmi	.+14     	; 0x1f26 <__divsf3_pse+0x3a>
    1f18:	e0 e8       	ldi	r30, 0x80	; 128
    1f1a:	32 d0       	rcall	.+100    	; 0x1f80 <__divsf3_pse+0x94>
    1f1c:	91 50       	subi	r25, 0x01	; 1
    1f1e:	50 40       	sbci	r21, 0x00	; 0
    1f20:	e6 95       	lsr	r30
    1f22:	00 1c       	adc	r0, r0
    1f24:	ca f7       	brpl	.-14     	; 0x1f18 <__divsf3_pse+0x2c>
    1f26:	2b d0       	rcall	.+86     	; 0x1f7e <__divsf3_pse+0x92>
    1f28:	fe 2f       	mov	r31, r30
    1f2a:	29 d0       	rcall	.+82     	; 0x1f7e <__divsf3_pse+0x92>
    1f2c:	66 0f       	add	r22, r22
    1f2e:	77 1f       	adc	r23, r23
    1f30:	88 1f       	adc	r24, r24
    1f32:	bb 1f       	adc	r27, r27
    1f34:	26 17       	cp	r18, r22
    1f36:	37 07       	cpc	r19, r23
    1f38:	48 07       	cpc	r20, r24
    1f3a:	ab 07       	cpc	r26, r27
    1f3c:	b0 e8       	ldi	r27, 0x80	; 128
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <__divsf3_pse+0x56>
    1f40:	bb 0b       	sbc	r27, r27
    1f42:	80 2d       	mov	r24, r0
    1f44:	bf 01       	movw	r22, r30
    1f46:	ff 27       	eor	r31, r31
    1f48:	93 58       	subi	r25, 0x83	; 131
    1f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4c:	3a f0       	brmi	.+14     	; 0x1f5c <__divsf3_pse+0x70>
    1f4e:	9e 3f       	cpi	r25, 0xFE	; 254
    1f50:	51 05       	cpc	r21, r1
    1f52:	78 f0       	brcs	.+30     	; 0x1f72 <__divsf3_pse+0x86>
    1f54:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <__fp_inf>
    1f58:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__fp_szero>
    1f5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f5e:	e4 f3       	brlt	.-8      	; 0x1f58 <__divsf3_pse+0x6c>
    1f60:	98 3e       	cpi	r25, 0xE8	; 232
    1f62:	d4 f3       	brlt	.-12     	; 0x1f58 <__divsf3_pse+0x6c>
    1f64:	86 95       	lsr	r24
    1f66:	77 95       	ror	r23
    1f68:	67 95       	ror	r22
    1f6a:	b7 95       	ror	r27
    1f6c:	f7 95       	ror	r31
    1f6e:	9f 5f       	subi	r25, 0xFF	; 255
    1f70:	c9 f7       	brne	.-14     	; 0x1f64 <__divsf3_pse+0x78>
    1f72:	88 0f       	add	r24, r24
    1f74:	91 1d       	adc	r25, r1
    1f76:	96 95       	lsr	r25
    1f78:	87 95       	ror	r24
    1f7a:	97 f9       	bld	r25, 7
    1f7c:	08 95       	ret
    1f7e:	e1 e0       	ldi	r30, 0x01	; 1
    1f80:	66 0f       	add	r22, r22
    1f82:	77 1f       	adc	r23, r23
    1f84:	88 1f       	adc	r24, r24
    1f86:	bb 1f       	adc	r27, r27
    1f88:	62 17       	cp	r22, r18
    1f8a:	73 07       	cpc	r23, r19
    1f8c:	84 07       	cpc	r24, r20
    1f8e:	ba 07       	cpc	r27, r26
    1f90:	20 f0       	brcs	.+8      	; 0x1f9a <__divsf3_pse+0xae>
    1f92:	62 1b       	sub	r22, r18
    1f94:	73 0b       	sbc	r23, r19
    1f96:	84 0b       	sbc	r24, r20
    1f98:	ba 0b       	sbc	r27, r26
    1f9a:	ee 1f       	adc	r30, r30
    1f9c:	88 f7       	brcc	.-30     	; 0x1f80 <__divsf3_pse+0x94>
    1f9e:	e0 95       	com	r30
    1fa0:	08 95       	ret

00001fa2 <__floatunsisf>:
    1fa2:	e8 94       	clt
    1fa4:	09 c0       	rjmp	.+18     	; 0x1fb8 <__floatsisf+0x12>

00001fa6 <__floatsisf>:
    1fa6:	97 fb       	bst	r25, 7
    1fa8:	3e f4       	brtc	.+14     	; 0x1fb8 <__floatsisf+0x12>
    1faa:	90 95       	com	r25
    1fac:	80 95       	com	r24
    1fae:	70 95       	com	r23
    1fb0:	61 95       	neg	r22
    1fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb8:	99 23       	and	r25, r25
    1fba:	a9 f0       	breq	.+42     	; 0x1fe6 <__floatsisf+0x40>
    1fbc:	f9 2f       	mov	r31, r25
    1fbe:	96 e9       	ldi	r25, 0x96	; 150
    1fc0:	bb 27       	eor	r27, r27
    1fc2:	93 95       	inc	r25
    1fc4:	f6 95       	lsr	r31
    1fc6:	87 95       	ror	r24
    1fc8:	77 95       	ror	r23
    1fca:	67 95       	ror	r22
    1fcc:	b7 95       	ror	r27
    1fce:	f1 11       	cpse	r31, r1
    1fd0:	f8 cf       	rjmp	.-16     	; 0x1fc2 <__floatsisf+0x1c>
    1fd2:	fa f4       	brpl	.+62     	; 0x2012 <__floatsisf+0x6c>
    1fd4:	bb 0f       	add	r27, r27
    1fd6:	11 f4       	brne	.+4      	; 0x1fdc <__floatsisf+0x36>
    1fd8:	60 ff       	sbrs	r22, 0
    1fda:	1b c0       	rjmp	.+54     	; 0x2012 <__floatsisf+0x6c>
    1fdc:	6f 5f       	subi	r22, 0xFF	; 255
    1fde:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe4:	16 c0       	rjmp	.+44     	; 0x2012 <__floatsisf+0x6c>
    1fe6:	88 23       	and	r24, r24
    1fe8:	11 f0       	breq	.+4      	; 0x1fee <__floatsisf+0x48>
    1fea:	96 e9       	ldi	r25, 0x96	; 150
    1fec:	11 c0       	rjmp	.+34     	; 0x2010 <__floatsisf+0x6a>
    1fee:	77 23       	and	r23, r23
    1ff0:	21 f0       	breq	.+8      	; 0x1ffa <__floatsisf+0x54>
    1ff2:	9e e8       	ldi	r25, 0x8E	; 142
    1ff4:	87 2f       	mov	r24, r23
    1ff6:	76 2f       	mov	r23, r22
    1ff8:	05 c0       	rjmp	.+10     	; 0x2004 <__floatsisf+0x5e>
    1ffa:	66 23       	and	r22, r22
    1ffc:	71 f0       	breq	.+28     	; 0x201a <__floatsisf+0x74>
    1ffe:	96 e8       	ldi	r25, 0x86	; 134
    2000:	86 2f       	mov	r24, r22
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	2a f0       	brmi	.+10     	; 0x2012 <__floatsisf+0x6c>
    2008:	9a 95       	dec	r25
    200a:	66 0f       	add	r22, r22
    200c:	77 1f       	adc	r23, r23
    200e:	88 1f       	adc	r24, r24
    2010:	da f7       	brpl	.-10     	; 0x2008 <__floatsisf+0x62>
    2012:	88 0f       	add	r24, r24
    2014:	96 95       	lsr	r25
    2016:	87 95       	ror	r24
    2018:	97 f9       	bld	r25, 7
    201a:	08 95       	ret

0000201c <__fp_arccos>:
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	1f 93       	push	r17
    2022:	0f 93       	push	r16
    2024:	8b 01       	movw	r16, r22
    2026:	ec 01       	movw	r28, r24
    2028:	e9 ea       	ldi	r30, 0xA9	; 169
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__fp_powser>
    2030:	0e 94 a4 10 	call	0x2148	; 0x2148 <__fp_round>
    2034:	98 01       	movw	r18, r16
    2036:	ae 01       	movw	r20, r28
    2038:	8b 01       	movw	r16, r22
    203a:	ec 01       	movw	r28, r24
    203c:	60 e0       	ldi	r22, 0x00	; 0
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	80 e8       	ldi	r24, 0x80	; 128
    2042:	9f e3       	ldi	r25, 0x3F	; 63
    2044:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__subsf3>
    2048:	0e 94 59 11 	call	0x22b2	; 0x22b2 <sqrt>
    204c:	98 01       	movw	r18, r16
    204e:	ae 01       	movw	r20, r28
    2050:	0f 91       	pop	r16
    2052:	1f 91       	pop	r17
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	0c 94 f9 10 	jmp	0x21f2	; 0x21f2 <__mulsf3x>

0000205c <__fp_cmp>:
    205c:	99 0f       	add	r25, r25
    205e:	00 08       	sbc	r0, r0
    2060:	55 0f       	add	r21, r21
    2062:	aa 0b       	sbc	r26, r26
    2064:	e0 e8       	ldi	r30, 0x80	; 128
    2066:	fe ef       	ldi	r31, 0xFE	; 254
    2068:	16 16       	cp	r1, r22
    206a:	17 06       	cpc	r1, r23
    206c:	e8 07       	cpc	r30, r24
    206e:	f9 07       	cpc	r31, r25
    2070:	c0 f0       	brcs	.+48     	; 0x20a2 <__fp_cmp+0x46>
    2072:	12 16       	cp	r1, r18
    2074:	13 06       	cpc	r1, r19
    2076:	e4 07       	cpc	r30, r20
    2078:	f5 07       	cpc	r31, r21
    207a:	98 f0       	brcs	.+38     	; 0x20a2 <__fp_cmp+0x46>
    207c:	62 1b       	sub	r22, r18
    207e:	73 0b       	sbc	r23, r19
    2080:	84 0b       	sbc	r24, r20
    2082:	95 0b       	sbc	r25, r21
    2084:	39 f4       	brne	.+14     	; 0x2094 <__fp_cmp+0x38>
    2086:	0a 26       	eor	r0, r26
    2088:	61 f0       	breq	.+24     	; 0x20a2 <__fp_cmp+0x46>
    208a:	23 2b       	or	r18, r19
    208c:	24 2b       	or	r18, r20
    208e:	25 2b       	or	r18, r21
    2090:	21 f4       	brne	.+8      	; 0x209a <__fp_cmp+0x3e>
    2092:	08 95       	ret
    2094:	0a 26       	eor	r0, r26
    2096:	09 f4       	brne	.+2      	; 0x209a <__fp_cmp+0x3e>
    2098:	a1 40       	sbci	r26, 0x01	; 1
    209a:	a6 95       	lsr	r26
    209c:	8f ef       	ldi	r24, 0xFF	; 255
    209e:	81 1d       	adc	r24, r1
    20a0:	81 1d       	adc	r24, r1
    20a2:	08 95       	ret

000020a4 <__fp_inf>:
    20a4:	97 f9       	bld	r25, 7
    20a6:	9f 67       	ori	r25, 0x7F	; 127
    20a8:	80 e8       	ldi	r24, 0x80	; 128
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	08 95       	ret

000020b0 <__fp_nan>:
    20b0:	9f ef       	ldi	r25, 0xFF	; 255
    20b2:	80 ec       	ldi	r24, 0xC0	; 192
    20b4:	08 95       	ret

000020b6 <__fp_powser>:
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	1f 93       	push	r17
    20bc:	0f 93       	push	r16
    20be:	ff 92       	push	r15
    20c0:	ef 92       	push	r14
    20c2:	df 92       	push	r13
    20c4:	7b 01       	movw	r14, r22
    20c6:	8c 01       	movw	r16, r24
    20c8:	68 94       	set
    20ca:	06 c0       	rjmp	.+12     	; 0x20d8 <__fp_powser+0x22>
    20cc:	da 2e       	mov	r13, r26
    20ce:	ef 01       	movw	r28, r30
    20d0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__mulsf3x>
    20d4:	fe 01       	movw	r30, r28
    20d6:	e8 94       	clt
    20d8:	a5 91       	lpm	r26, Z+
    20da:	25 91       	lpm	r18, Z+
    20dc:	35 91       	lpm	r19, Z+
    20de:	45 91       	lpm	r20, Z+
    20e0:	55 91       	lpm	r21, Z+
    20e2:	a6 f3       	brts	.-24     	; 0x20cc <__fp_powser+0x16>
    20e4:	ef 01       	movw	r28, r30
    20e6:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__addsf3x>
    20ea:	fe 01       	movw	r30, r28
    20ec:	97 01       	movw	r18, r14
    20ee:	a8 01       	movw	r20, r16
    20f0:	da 94       	dec	r13
    20f2:	69 f7       	brne	.-38     	; 0x20ce <__fp_powser+0x18>
    20f4:	df 90       	pop	r13
    20f6:	ef 90       	pop	r14
    20f8:	ff 90       	pop	r15
    20fa:	0f 91       	pop	r16
    20fc:	1f 91       	pop	r17
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	08 95       	ret

00002104 <__fp_powsodd>:
    2104:	9f 93       	push	r25
    2106:	8f 93       	push	r24
    2108:	7f 93       	push	r23
    210a:	6f 93       	push	r22
    210c:	ff 93       	push	r31
    210e:	ef 93       	push	r30
    2110:	9b 01       	movw	r18, r22
    2112:	ac 01       	movw	r20, r24
    2114:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__mulsf3>
    2118:	ef 91       	pop	r30
    211a:	ff 91       	pop	r31
    211c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__fp_powser>
    2120:	2f 91       	pop	r18
    2122:	3f 91       	pop	r19
    2124:	4f 91       	pop	r20
    2126:	5f 91       	pop	r21
    2128:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__mulsf3>

0000212c <__fp_pscA>:
    212c:	00 24       	eor	r0, r0
    212e:	0a 94       	dec	r0
    2130:	16 16       	cp	r1, r22
    2132:	17 06       	cpc	r1, r23
    2134:	18 06       	cpc	r1, r24
    2136:	09 06       	cpc	r0, r25
    2138:	08 95       	ret

0000213a <__fp_pscB>:
    213a:	00 24       	eor	r0, r0
    213c:	0a 94       	dec	r0
    213e:	12 16       	cp	r1, r18
    2140:	13 06       	cpc	r1, r19
    2142:	14 06       	cpc	r1, r20
    2144:	05 06       	cpc	r0, r21
    2146:	08 95       	ret

00002148 <__fp_round>:
    2148:	09 2e       	mov	r0, r25
    214a:	03 94       	inc	r0
    214c:	00 0c       	add	r0, r0
    214e:	11 f4       	brne	.+4      	; 0x2154 <__fp_round+0xc>
    2150:	88 23       	and	r24, r24
    2152:	52 f0       	brmi	.+20     	; 0x2168 <__fp_round+0x20>
    2154:	bb 0f       	add	r27, r27
    2156:	40 f4       	brcc	.+16     	; 0x2168 <__fp_round+0x20>
    2158:	bf 2b       	or	r27, r31
    215a:	11 f4       	brne	.+4      	; 0x2160 <__fp_round+0x18>
    215c:	60 ff       	sbrs	r22, 0
    215e:	04 c0       	rjmp	.+8      	; 0x2168 <__fp_round+0x20>
    2160:	6f 5f       	subi	r22, 0xFF	; 255
    2162:	7f 4f       	sbci	r23, 0xFF	; 255
    2164:	8f 4f       	sbci	r24, 0xFF	; 255
    2166:	9f 4f       	sbci	r25, 0xFF	; 255
    2168:	08 95       	ret

0000216a <__fp_split3>:
    216a:	57 fd       	sbrc	r21, 7
    216c:	90 58       	subi	r25, 0x80	; 128
    216e:	44 0f       	add	r20, r20
    2170:	55 1f       	adc	r21, r21
    2172:	59 f0       	breq	.+22     	; 0x218a <__fp_splitA+0x10>
    2174:	5f 3f       	cpi	r21, 0xFF	; 255
    2176:	71 f0       	breq	.+28     	; 0x2194 <__fp_splitA+0x1a>
    2178:	47 95       	ror	r20

0000217a <__fp_splitA>:
    217a:	88 0f       	add	r24, r24
    217c:	97 fb       	bst	r25, 7
    217e:	99 1f       	adc	r25, r25
    2180:	61 f0       	breq	.+24     	; 0x219a <__fp_splitA+0x20>
    2182:	9f 3f       	cpi	r25, 0xFF	; 255
    2184:	79 f0       	breq	.+30     	; 0x21a4 <__fp_splitA+0x2a>
    2186:	87 95       	ror	r24
    2188:	08 95       	ret
    218a:	12 16       	cp	r1, r18
    218c:	13 06       	cpc	r1, r19
    218e:	14 06       	cpc	r1, r20
    2190:	55 1f       	adc	r21, r21
    2192:	f2 cf       	rjmp	.-28     	; 0x2178 <__fp_split3+0xe>
    2194:	46 95       	lsr	r20
    2196:	f1 df       	rcall	.-30     	; 0x217a <__fp_splitA>
    2198:	08 c0       	rjmp	.+16     	; 0x21aa <__fp_splitA+0x30>
    219a:	16 16       	cp	r1, r22
    219c:	17 06       	cpc	r1, r23
    219e:	18 06       	cpc	r1, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	f1 cf       	rjmp	.-30     	; 0x2186 <__fp_splitA+0xc>
    21a4:	86 95       	lsr	r24
    21a6:	71 05       	cpc	r23, r1
    21a8:	61 05       	cpc	r22, r1
    21aa:	08 94       	sec
    21ac:	08 95       	ret

000021ae <__fp_zero>:
    21ae:	e8 94       	clt

000021b0 <__fp_szero>:
    21b0:	bb 27       	eor	r27, r27
    21b2:	66 27       	eor	r22, r22
    21b4:	77 27       	eor	r23, r23
    21b6:	cb 01       	movw	r24, r22
    21b8:	97 f9       	bld	r25, 7
    21ba:	08 95       	ret

000021bc <inverse>:
    21bc:	9b 01       	movw	r18, r22
    21be:	ac 01       	movw	r20, r24
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	70 e0       	ldi	r23, 0x00	; 0
    21c4:	80 e8       	ldi	r24, 0x80	; 128
    21c6:	9f e3       	ldi	r25, 0x3F	; 63
    21c8:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__divsf3>

000021cc <__mulsf3>:
    21cc:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__mulsf3x>
    21d0:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <__fp_round>
    21d4:	0e 94 96 10 	call	0x212c	; 0x212c <__fp_pscA>
    21d8:	38 f0       	brcs	.+14     	; 0x21e8 <__mulsf3+0x1c>
    21da:	0e 94 9d 10 	call	0x213a	; 0x213a <__fp_pscB>
    21de:	20 f0       	brcs	.+8      	; 0x21e8 <__mulsf3+0x1c>
    21e0:	95 23       	and	r25, r21
    21e2:	11 f0       	breq	.+4      	; 0x21e8 <__mulsf3+0x1c>
    21e4:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <__fp_inf>
    21e8:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__fp_nan>
    21ec:	11 24       	eor	r1, r1
    21ee:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__fp_szero>

000021f2 <__mulsf3x>:
    21f2:	0e 94 b5 10 	call	0x216a	; 0x216a <__fp_split3>
    21f6:	70 f3       	brcs	.-36     	; 0x21d4 <__mulsf3+0x8>

000021f8 <__mulsf3_pse>:
    21f8:	95 9f       	mul	r25, r21
    21fa:	c1 f3       	breq	.-16     	; 0x21ec <__mulsf3+0x20>
    21fc:	95 0f       	add	r25, r21
    21fe:	50 e0       	ldi	r21, 0x00	; 0
    2200:	55 1f       	adc	r21, r21
    2202:	62 9f       	mul	r22, r18
    2204:	f0 01       	movw	r30, r0
    2206:	72 9f       	mul	r23, r18
    2208:	bb 27       	eor	r27, r27
    220a:	f0 0d       	add	r31, r0
    220c:	b1 1d       	adc	r27, r1
    220e:	63 9f       	mul	r22, r19
    2210:	aa 27       	eor	r26, r26
    2212:	f0 0d       	add	r31, r0
    2214:	b1 1d       	adc	r27, r1
    2216:	aa 1f       	adc	r26, r26
    2218:	64 9f       	mul	r22, r20
    221a:	66 27       	eor	r22, r22
    221c:	b0 0d       	add	r27, r0
    221e:	a1 1d       	adc	r26, r1
    2220:	66 1f       	adc	r22, r22
    2222:	82 9f       	mul	r24, r18
    2224:	22 27       	eor	r18, r18
    2226:	b0 0d       	add	r27, r0
    2228:	a1 1d       	adc	r26, r1
    222a:	62 1f       	adc	r22, r18
    222c:	73 9f       	mul	r23, r19
    222e:	b0 0d       	add	r27, r0
    2230:	a1 1d       	adc	r26, r1
    2232:	62 1f       	adc	r22, r18
    2234:	83 9f       	mul	r24, r19
    2236:	a0 0d       	add	r26, r0
    2238:	61 1d       	adc	r22, r1
    223a:	22 1f       	adc	r18, r18
    223c:	74 9f       	mul	r23, r20
    223e:	33 27       	eor	r19, r19
    2240:	a0 0d       	add	r26, r0
    2242:	61 1d       	adc	r22, r1
    2244:	23 1f       	adc	r18, r19
    2246:	84 9f       	mul	r24, r20
    2248:	60 0d       	add	r22, r0
    224a:	21 1d       	adc	r18, r1
    224c:	82 2f       	mov	r24, r18
    224e:	76 2f       	mov	r23, r22
    2250:	6a 2f       	mov	r22, r26
    2252:	11 24       	eor	r1, r1
    2254:	9f 57       	subi	r25, 0x7F	; 127
    2256:	50 40       	sbci	r21, 0x00	; 0
    2258:	9a f0       	brmi	.+38     	; 0x2280 <__mulsf3_pse+0x88>
    225a:	f1 f0       	breq	.+60     	; 0x2298 <__mulsf3_pse+0xa0>
    225c:	88 23       	and	r24, r24
    225e:	4a f0       	brmi	.+18     	; 0x2272 <__mulsf3_pse+0x7a>
    2260:	ee 0f       	add	r30, r30
    2262:	ff 1f       	adc	r31, r31
    2264:	bb 1f       	adc	r27, r27
    2266:	66 1f       	adc	r22, r22
    2268:	77 1f       	adc	r23, r23
    226a:	88 1f       	adc	r24, r24
    226c:	91 50       	subi	r25, 0x01	; 1
    226e:	50 40       	sbci	r21, 0x00	; 0
    2270:	a9 f7       	brne	.-22     	; 0x225c <__mulsf3_pse+0x64>
    2272:	9e 3f       	cpi	r25, 0xFE	; 254
    2274:	51 05       	cpc	r21, r1
    2276:	80 f0       	brcs	.+32     	; 0x2298 <__mulsf3_pse+0xa0>
    2278:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <__fp_inf>
    227c:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__fp_szero>
    2280:	5f 3f       	cpi	r21, 0xFF	; 255
    2282:	e4 f3       	brlt	.-8      	; 0x227c <__mulsf3_pse+0x84>
    2284:	98 3e       	cpi	r25, 0xE8	; 232
    2286:	d4 f3       	brlt	.-12     	; 0x227c <__mulsf3_pse+0x84>
    2288:	86 95       	lsr	r24
    228a:	77 95       	ror	r23
    228c:	67 95       	ror	r22
    228e:	b7 95       	ror	r27
    2290:	f7 95       	ror	r31
    2292:	e7 95       	ror	r30
    2294:	9f 5f       	subi	r25, 0xFF	; 255
    2296:	c1 f7       	brne	.-16     	; 0x2288 <__mulsf3_pse+0x90>
    2298:	fe 2b       	or	r31, r30
    229a:	88 0f       	add	r24, r24
    229c:	91 1d       	adc	r25, r1
    229e:	96 95       	lsr	r25
    22a0:	87 95       	ror	r24
    22a2:	97 f9       	bld	r25, 7
    22a4:	08 95       	ret
    22a6:	19 f4       	brne	.+6      	; 0x22ae <__mulsf3_pse+0xb6>
    22a8:	16 f4       	brtc	.+4      	; 0x22ae <__mulsf3_pse+0xb6>
    22aa:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__fp_nan>
    22ae:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__fp_mpack>

000022b2 <sqrt>:
    22b2:	0e 94 bd 10 	call	0x217a	; 0x217a <__fp_splitA>
    22b6:	b8 f3       	brcs	.-18     	; 0x22a6 <__mulsf3_pse+0xae>
    22b8:	99 23       	and	r25, r25
    22ba:	c9 f3       	breq	.-14     	; 0x22ae <__mulsf3_pse+0xb6>
    22bc:	b6 f3       	brts	.-20     	; 0x22aa <__mulsf3_pse+0xb2>
    22be:	9f 57       	subi	r25, 0x7F	; 127
    22c0:	55 0b       	sbc	r21, r21
    22c2:	87 ff       	sbrs	r24, 7
    22c4:	0e 94 ab 11 	call	0x2356	; 0x2356 <__fp_norm2>
    22c8:	00 24       	eor	r0, r0
    22ca:	a0 e6       	ldi	r26, 0x60	; 96
    22cc:	40 ea       	ldi	r20, 0xA0	; 160
    22ce:	90 01       	movw	r18, r0
    22d0:	80 58       	subi	r24, 0x80	; 128
    22d2:	56 95       	lsr	r21
    22d4:	97 95       	ror	r25
    22d6:	28 f4       	brcc	.+10     	; 0x22e2 <sqrt+0x30>
    22d8:	80 5c       	subi	r24, 0xC0	; 192
    22da:	66 0f       	add	r22, r22
    22dc:	77 1f       	adc	r23, r23
    22de:	88 1f       	adc	r24, r24
    22e0:	20 f0       	brcs	.+8      	; 0x22ea <sqrt+0x38>
    22e2:	26 17       	cp	r18, r22
    22e4:	37 07       	cpc	r19, r23
    22e6:	48 07       	cpc	r20, r24
    22e8:	30 f4       	brcc	.+12     	; 0x22f6 <sqrt+0x44>
    22ea:	62 1b       	sub	r22, r18
    22ec:	73 0b       	sbc	r23, r19
    22ee:	84 0b       	sbc	r24, r20
    22f0:	20 29       	or	r18, r0
    22f2:	31 29       	or	r19, r1
    22f4:	4a 2b       	or	r20, r26
    22f6:	a6 95       	lsr	r26
    22f8:	17 94       	ror	r1
    22fa:	07 94       	ror	r0
    22fc:	20 25       	eor	r18, r0
    22fe:	31 25       	eor	r19, r1
    2300:	4a 27       	eor	r20, r26
    2302:	58 f7       	brcc	.-42     	; 0x22da <sqrt+0x28>
    2304:	66 0f       	add	r22, r22
    2306:	77 1f       	adc	r23, r23
    2308:	88 1f       	adc	r24, r24
    230a:	20 f0       	brcs	.+8      	; 0x2314 <sqrt+0x62>
    230c:	26 17       	cp	r18, r22
    230e:	37 07       	cpc	r19, r23
    2310:	48 07       	cpc	r20, r24
    2312:	30 f4       	brcc	.+12     	; 0x2320 <sqrt+0x6e>
    2314:	62 0b       	sbc	r22, r18
    2316:	73 0b       	sbc	r23, r19
    2318:	84 0b       	sbc	r24, r20
    231a:	20 0d       	add	r18, r0
    231c:	31 1d       	adc	r19, r1
    231e:	41 1d       	adc	r20, r1
    2320:	a0 95       	com	r26
    2322:	81 f7       	brne	.-32     	; 0x2304 <sqrt+0x52>
    2324:	b9 01       	movw	r22, r18
    2326:	84 2f       	mov	r24, r20
    2328:	91 58       	subi	r25, 0x81	; 129
    232a:	88 0f       	add	r24, r24
    232c:	96 95       	lsr	r25
    232e:	87 95       	ror	r24
    2330:	08 95       	ret

00002332 <square>:
    2332:	9b 01       	movw	r18, r22
    2334:	ac 01       	movw	r20, r24
    2336:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__mulsf3>

0000233a <__fp_mpack>:
    233a:	9f 3f       	cpi	r25, 0xFF	; 255
    233c:	31 f0       	breq	.+12     	; 0x234a <__fp_mpack_finite+0xc>

0000233e <__fp_mpack_finite>:
    233e:	91 50       	subi	r25, 0x01	; 1
    2340:	20 f4       	brcc	.+8      	; 0x234a <__fp_mpack_finite+0xc>
    2342:	87 95       	ror	r24
    2344:	77 95       	ror	r23
    2346:	67 95       	ror	r22
    2348:	b7 95       	ror	r27
    234a:	88 0f       	add	r24, r24
    234c:	91 1d       	adc	r25, r1
    234e:	96 95       	lsr	r25
    2350:	87 95       	ror	r24
    2352:	97 f9       	bld	r25, 7
    2354:	08 95       	ret

00002356 <__fp_norm2>:
    2356:	91 50       	subi	r25, 0x01	; 1
    2358:	50 40       	sbci	r21, 0x00	; 0
    235a:	66 0f       	add	r22, r22
    235c:	77 1f       	adc	r23, r23
    235e:	88 1f       	adc	r24, r24
    2360:	d2 f7       	brpl	.-12     	; 0x2356 <__fp_norm2>
    2362:	08 95       	ret

00002364 <dtostrf>:
    2364:	ef 92       	push	r14
    2366:	0f 93       	push	r16
    2368:	1f 93       	push	r17
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	e8 01       	movw	r28, r16
    2370:	47 fd       	sbrc	r20, 7
    2372:	02 c0       	rjmp	.+4      	; 0x2378 <dtostrf+0x14>
    2374:	34 e0       	ldi	r19, 0x04	; 4
    2376:	01 c0       	rjmp	.+2      	; 0x237a <dtostrf+0x16>
    2378:	34 e1       	ldi	r19, 0x14	; 20
    237a:	04 2e       	mov	r0, r20
    237c:	00 0c       	add	r0, r0
    237e:	55 0b       	sbc	r21, r21
    2380:	57 ff       	sbrs	r21, 7
    2382:	03 c0       	rjmp	.+6      	; 0x238a <dtostrf+0x26>
    2384:	51 95       	neg	r21
    2386:	41 95       	neg	r20
    2388:	51 09       	sbc	r21, r1
    238a:	e3 2e       	mov	r14, r19
    238c:	02 2f       	mov	r16, r18
    238e:	24 2f       	mov	r18, r20
    2390:	ae 01       	movw	r20, r28
    2392:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <dtoa_prf>
    2396:	ce 01       	movw	r24, r28
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	1f 91       	pop	r17
    239e:	0f 91       	pop	r16
    23a0:	ef 90       	pop	r14
    23a2:	08 95       	ret

000023a4 <dtoa_prf>:
    23a4:	a9 e0       	ldi	r26, 0x09	; 9
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e8 ed       	ldi	r30, 0xD8	; 216
    23aa:	f1 e1       	ldi	r31, 0x11	; 17
    23ac:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__+0xc>
    23b0:	6a 01       	movw	r12, r20
    23b2:	12 2f       	mov	r17, r18
    23b4:	b0 2e       	mov	r11, r16
    23b6:	2b e3       	ldi	r18, 0x3B	; 59
    23b8:	20 17       	cp	r18, r16
    23ba:	20 f0       	brcs	.+8      	; 0x23c4 <dtoa_prf+0x20>
    23bc:	ff 24       	eor	r15, r15
    23be:	f3 94       	inc	r15
    23c0:	f0 0e       	add	r15, r16
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <dtoa_prf+0x24>
    23c4:	2c e3       	ldi	r18, 0x3C	; 60
    23c6:	f2 2e       	mov	r15, r18
    23c8:	0f 2d       	mov	r16, r15
    23ca:	27 e0       	ldi	r18, 0x07	; 7
    23cc:	ae 01       	movw	r20, r28
    23ce:	4f 5f       	subi	r20, 0xFF	; 255
    23d0:	5f 4f       	sbci	r21, 0xFF	; 255
    23d2:	0e 94 2c 13 	call	0x2658	; 0x2658 <__ftoa_engine>
    23d6:	bc 01       	movw	r22, r24
    23d8:	49 81       	ldd	r20, Y+1	; 0x01
    23da:	84 2f       	mov	r24, r20
    23dc:	89 70       	andi	r24, 0x09	; 9
    23de:	81 30       	cpi	r24, 0x01	; 1
    23e0:	31 f0       	breq	.+12     	; 0x23ee <dtoa_prf+0x4a>
    23e2:	e1 fc       	sbrc	r14, 1
    23e4:	06 c0       	rjmp	.+12     	; 0x23f2 <dtoa_prf+0x4e>
    23e6:	e0 fe       	sbrs	r14, 0
    23e8:	06 c0       	rjmp	.+12     	; 0x23f6 <dtoa_prf+0x52>
    23ea:	90 e2       	ldi	r25, 0x20	; 32
    23ec:	05 c0       	rjmp	.+10     	; 0x23f8 <dtoa_prf+0x54>
    23ee:	9d e2       	ldi	r25, 0x2D	; 45
    23f0:	03 c0       	rjmp	.+6      	; 0x23f8 <dtoa_prf+0x54>
    23f2:	9b e2       	ldi	r25, 0x2B	; 43
    23f4:	01 c0       	rjmp	.+2      	; 0x23f8 <dtoa_prf+0x54>
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	5e 2d       	mov	r21, r14
    23fa:	50 71       	andi	r21, 0x10	; 16
    23fc:	43 ff       	sbrs	r20, 3
    23fe:	3c c0       	rjmp	.+120    	; 0x2478 <dtoa_prf+0xd4>
    2400:	91 11       	cpse	r25, r1
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <dtoa_prf+0x64>
    2404:	83 e0       	ldi	r24, 0x03	; 3
    2406:	01 c0       	rjmp	.+2      	; 0x240a <dtoa_prf+0x66>
    2408:	84 e0       	ldi	r24, 0x04	; 4
    240a:	81 17       	cp	r24, r17
    240c:	18 f4       	brcc	.+6      	; 0x2414 <dtoa_prf+0x70>
    240e:	21 2f       	mov	r18, r17
    2410:	28 1b       	sub	r18, r24
    2412:	01 c0       	rjmp	.+2      	; 0x2416 <dtoa_prf+0x72>
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	51 11       	cpse	r21, r1
    2418:	0b c0       	rjmp	.+22     	; 0x2430 <dtoa_prf+0x8c>
    241a:	f6 01       	movw	r30, r12
    241c:	82 2f       	mov	r24, r18
    241e:	30 e2       	ldi	r19, 0x20	; 32
    2420:	88 23       	and	r24, r24
    2422:	19 f0       	breq	.+6      	; 0x242a <dtoa_prf+0x86>
    2424:	31 93       	st	Z+, r19
    2426:	81 50       	subi	r24, 0x01	; 1
    2428:	fb cf       	rjmp	.-10     	; 0x2420 <dtoa_prf+0x7c>
    242a:	c2 0e       	add	r12, r18
    242c:	d1 1c       	adc	r13, r1
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	99 23       	and	r25, r25
    2432:	29 f0       	breq	.+10     	; 0x243e <dtoa_prf+0x9a>
    2434:	d6 01       	movw	r26, r12
    2436:	9c 93       	st	X, r25
    2438:	f6 01       	movw	r30, r12
    243a:	31 96       	adiw	r30, 0x01	; 1
    243c:	6f 01       	movw	r12, r30
    243e:	c6 01       	movw	r24, r12
    2440:	03 96       	adiw	r24, 0x03	; 3
    2442:	e2 fe       	sbrs	r14, 2
    2444:	0a c0       	rjmp	.+20     	; 0x245a <dtoa_prf+0xb6>
    2446:	3e e4       	ldi	r19, 0x4E	; 78
    2448:	d6 01       	movw	r26, r12
    244a:	3c 93       	st	X, r19
    244c:	41 e4       	ldi	r20, 0x41	; 65
    244e:	11 96       	adiw	r26, 0x01	; 1
    2450:	4c 93       	st	X, r20
    2452:	11 97       	sbiw	r26, 0x01	; 1
    2454:	12 96       	adiw	r26, 0x02	; 2
    2456:	3c 93       	st	X, r19
    2458:	06 c0       	rjmp	.+12     	; 0x2466 <dtoa_prf+0xc2>
    245a:	3e e6       	ldi	r19, 0x6E	; 110
    245c:	f6 01       	movw	r30, r12
    245e:	30 83       	st	Z, r19
    2460:	41 e6       	ldi	r20, 0x61	; 97
    2462:	41 83       	std	Z+1, r20	; 0x01
    2464:	32 83       	std	Z+2, r19	; 0x02
    2466:	fc 01       	movw	r30, r24
    2468:	32 2f       	mov	r19, r18
    246a:	40 e2       	ldi	r20, 0x20	; 32
    246c:	33 23       	and	r19, r19
    246e:	09 f4       	brne	.+2      	; 0x2472 <dtoa_prf+0xce>
    2470:	42 c0       	rjmp	.+132    	; 0x24f6 <dtoa_prf+0x152>
    2472:	41 93       	st	Z+, r20
    2474:	31 50       	subi	r19, 0x01	; 1
    2476:	fa cf       	rjmp	.-12     	; 0x246c <dtoa_prf+0xc8>
    2478:	42 ff       	sbrs	r20, 2
    247a:	44 c0       	rjmp	.+136    	; 0x2504 <dtoa_prf+0x160>
    247c:	91 11       	cpse	r25, r1
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <dtoa_prf+0xe0>
    2480:	83 e0       	ldi	r24, 0x03	; 3
    2482:	01 c0       	rjmp	.+2      	; 0x2486 <dtoa_prf+0xe2>
    2484:	84 e0       	ldi	r24, 0x04	; 4
    2486:	81 17       	cp	r24, r17
    2488:	18 f4       	brcc	.+6      	; 0x2490 <dtoa_prf+0xec>
    248a:	21 2f       	mov	r18, r17
    248c:	28 1b       	sub	r18, r24
    248e:	01 c0       	rjmp	.+2      	; 0x2492 <dtoa_prf+0xee>
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	51 11       	cpse	r21, r1
    2494:	0b c0       	rjmp	.+22     	; 0x24ac <dtoa_prf+0x108>
    2496:	f6 01       	movw	r30, r12
    2498:	82 2f       	mov	r24, r18
    249a:	30 e2       	ldi	r19, 0x20	; 32
    249c:	88 23       	and	r24, r24
    249e:	19 f0       	breq	.+6      	; 0x24a6 <dtoa_prf+0x102>
    24a0:	31 93       	st	Z+, r19
    24a2:	81 50       	subi	r24, 0x01	; 1
    24a4:	fb cf       	rjmp	.-10     	; 0x249c <dtoa_prf+0xf8>
    24a6:	c2 0e       	add	r12, r18
    24a8:	d1 1c       	adc	r13, r1
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	99 23       	and	r25, r25
    24ae:	29 f0       	breq	.+10     	; 0x24ba <dtoa_prf+0x116>
    24b0:	d6 01       	movw	r26, r12
    24b2:	9c 93       	st	X, r25
    24b4:	f6 01       	movw	r30, r12
    24b6:	31 96       	adiw	r30, 0x01	; 1
    24b8:	6f 01       	movw	r12, r30
    24ba:	c6 01       	movw	r24, r12
    24bc:	03 96       	adiw	r24, 0x03	; 3
    24be:	e2 fe       	sbrs	r14, 2
    24c0:	0b c0       	rjmp	.+22     	; 0x24d8 <dtoa_prf+0x134>
    24c2:	39 e4       	ldi	r19, 0x49	; 73
    24c4:	d6 01       	movw	r26, r12
    24c6:	3c 93       	st	X, r19
    24c8:	3e e4       	ldi	r19, 0x4E	; 78
    24ca:	11 96       	adiw	r26, 0x01	; 1
    24cc:	3c 93       	st	X, r19
    24ce:	11 97       	sbiw	r26, 0x01	; 1
    24d0:	36 e4       	ldi	r19, 0x46	; 70
    24d2:	12 96       	adiw	r26, 0x02	; 2
    24d4:	3c 93       	st	X, r19
    24d6:	07 c0       	rjmp	.+14     	; 0x24e6 <dtoa_prf+0x142>
    24d8:	39 e6       	ldi	r19, 0x69	; 105
    24da:	f6 01       	movw	r30, r12
    24dc:	30 83       	st	Z, r19
    24de:	3e e6       	ldi	r19, 0x6E	; 110
    24e0:	31 83       	std	Z+1, r19	; 0x01
    24e2:	36 e6       	ldi	r19, 0x66	; 102
    24e4:	32 83       	std	Z+2, r19	; 0x02
    24e6:	fc 01       	movw	r30, r24
    24e8:	32 2f       	mov	r19, r18
    24ea:	40 e2       	ldi	r20, 0x20	; 32
    24ec:	33 23       	and	r19, r19
    24ee:	19 f0       	breq	.+6      	; 0x24f6 <dtoa_prf+0x152>
    24f0:	41 93       	st	Z+, r20
    24f2:	31 50       	subi	r19, 0x01	; 1
    24f4:	fb cf       	rjmp	.-10     	; 0x24ec <dtoa_prf+0x148>
    24f6:	fc 01       	movw	r30, r24
    24f8:	e2 0f       	add	r30, r18
    24fa:	f1 1d       	adc	r31, r1
    24fc:	10 82       	st	Z, r1
    24fe:	8e ef       	ldi	r24, 0xFE	; 254
    2500:	9f ef       	ldi	r25, 0xFF	; 255
    2502:	a6 c0       	rjmp	.+332    	; 0x2650 <dtoa_prf+0x2ac>
    2504:	21 e0       	ldi	r18, 0x01	; 1
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	91 11       	cpse	r25, r1
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <dtoa_prf+0x16c>
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	16 16       	cp	r1, r22
    2512:	17 06       	cpc	r1, r23
    2514:	1c f4       	brge	.+6      	; 0x251c <dtoa_prf+0x178>
    2516:	fb 01       	movw	r30, r22
    2518:	31 96       	adiw	r30, 0x01	; 1
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <dtoa_prf+0x17c>
    251c:	e1 e0       	ldi	r30, 0x01	; 1
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	2e 0f       	add	r18, r30
    2522:	3f 1f       	adc	r19, r31
    2524:	bb 20       	and	r11, r11
    2526:	21 f0       	breq	.+8      	; 0x2530 <dtoa_prf+0x18c>
    2528:	eb 2d       	mov	r30, r11
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	31 96       	adiw	r30, 0x01	; 1
    252e:	02 c0       	rjmp	.+4      	; 0x2534 <dtoa_prf+0x190>
    2530:	e0 e0       	ldi	r30, 0x00	; 0
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	2e 0f       	add	r18, r30
    2536:	3f 1f       	adc	r19, r31
    2538:	e1 2f       	mov	r30, r17
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	2e 17       	cp	r18, r30
    253e:	3f 07       	cpc	r19, r31
    2540:	1c f4       	brge	.+6      	; 0x2548 <dtoa_prf+0x1a4>
    2542:	12 1b       	sub	r17, r18
    2544:	21 2f       	mov	r18, r17
    2546:	01 c0       	rjmp	.+2      	; 0x254a <dtoa_prf+0x1a6>
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	8e 2d       	mov	r24, r14
    254c:	88 71       	andi	r24, 0x18	; 24
    254e:	59 f4       	brne	.+22     	; 0x2566 <dtoa_prf+0x1c2>
    2550:	f6 01       	movw	r30, r12
    2552:	82 2f       	mov	r24, r18
    2554:	30 e2       	ldi	r19, 0x20	; 32
    2556:	88 23       	and	r24, r24
    2558:	19 f0       	breq	.+6      	; 0x2560 <dtoa_prf+0x1bc>
    255a:	31 93       	st	Z+, r19
    255c:	81 50       	subi	r24, 0x01	; 1
    255e:	fb cf       	rjmp	.-10     	; 0x2556 <dtoa_prf+0x1b2>
    2560:	c2 0e       	add	r12, r18
    2562:	d1 1c       	adc	r13, r1
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	99 23       	and	r25, r25
    2568:	29 f0       	breq	.+10     	; 0x2574 <dtoa_prf+0x1d0>
    256a:	d6 01       	movw	r26, r12
    256c:	9c 93       	st	X, r25
    256e:	f6 01       	movw	r30, r12
    2570:	31 96       	adiw	r30, 0x01	; 1
    2572:	6f 01       	movw	r12, r30
    2574:	51 11       	cpse	r21, r1
    2576:	0b c0       	rjmp	.+22     	; 0x258e <dtoa_prf+0x1ea>
    2578:	f6 01       	movw	r30, r12
    257a:	82 2f       	mov	r24, r18
    257c:	90 e3       	ldi	r25, 0x30	; 48
    257e:	88 23       	and	r24, r24
    2580:	19 f0       	breq	.+6      	; 0x2588 <dtoa_prf+0x1e4>
    2582:	91 93       	st	Z+, r25
    2584:	81 50       	subi	r24, 0x01	; 1
    2586:	fb cf       	rjmp	.-10     	; 0x257e <dtoa_prf+0x1da>
    2588:	c2 0e       	add	r12, r18
    258a:	d1 1c       	adc	r13, r1
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	0f 2d       	mov	r16, r15
    2590:	06 0f       	add	r16, r22
    2592:	9a 81       	ldd	r25, Y+2	; 0x02
    2594:	34 2f       	mov	r19, r20
    2596:	30 71       	andi	r19, 0x10	; 16
    2598:	44 ff       	sbrs	r20, 4
    259a:	03 c0       	rjmp	.+6      	; 0x25a2 <dtoa_prf+0x1fe>
    259c:	91 33       	cpi	r25, 0x31	; 49
    259e:	09 f4       	brne	.+2      	; 0x25a2 <dtoa_prf+0x1fe>
    25a0:	01 50       	subi	r16, 0x01	; 1
    25a2:	10 16       	cp	r1, r16
    25a4:	24 f4       	brge	.+8      	; 0x25ae <dtoa_prf+0x20a>
    25a6:	09 30       	cpi	r16, 0x09	; 9
    25a8:	18 f0       	brcs	.+6      	; 0x25b0 <dtoa_prf+0x20c>
    25aa:	08 e0       	ldi	r16, 0x08	; 8
    25ac:	01 c0       	rjmp	.+2      	; 0x25b0 <dtoa_prf+0x20c>
    25ae:	01 e0       	ldi	r16, 0x01	; 1
    25b0:	ab 01       	movw	r20, r22
    25b2:	77 ff       	sbrs	r23, 7
    25b4:	02 c0       	rjmp	.+4      	; 0x25ba <dtoa_prf+0x216>
    25b6:	40 e0       	ldi	r20, 0x00	; 0
    25b8:	50 e0       	ldi	r21, 0x00	; 0
    25ba:	fb 01       	movw	r30, r22
    25bc:	e4 1b       	sub	r30, r20
    25be:	f5 0b       	sbc	r31, r21
    25c0:	a1 e0       	ldi	r26, 0x01	; 1
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	ac 0f       	add	r26, r28
    25c6:	bd 1f       	adc	r27, r29
    25c8:	ea 0f       	add	r30, r26
    25ca:	fb 1f       	adc	r31, r27
    25cc:	8e e2       	ldi	r24, 0x2E	; 46
    25ce:	a8 2e       	mov	r10, r24
    25d0:	4b 01       	movw	r8, r22
    25d2:	80 1a       	sub	r8, r16
    25d4:	91 08       	sbc	r9, r1
    25d6:	0b 2d       	mov	r16, r11
    25d8:	10 e0       	ldi	r17, 0x00	; 0
    25da:	11 95       	neg	r17
    25dc:	01 95       	neg	r16
    25de:	11 09       	sbc	r17, r1
    25e0:	4f 3f       	cpi	r20, 0xFF	; 255
    25e2:	bf ef       	ldi	r27, 0xFF	; 255
    25e4:	5b 07       	cpc	r21, r27
    25e6:	21 f4       	brne	.+8      	; 0x25f0 <dtoa_prf+0x24c>
    25e8:	d6 01       	movw	r26, r12
    25ea:	ac 92       	st	X, r10
    25ec:	11 96       	adiw	r26, 0x01	; 1
    25ee:	6d 01       	movw	r12, r26
    25f0:	64 17       	cp	r22, r20
    25f2:	75 07       	cpc	r23, r21
    25f4:	2c f0       	brlt	.+10     	; 0x2600 <dtoa_prf+0x25c>
    25f6:	84 16       	cp	r8, r20
    25f8:	95 06       	cpc	r9, r21
    25fa:	14 f4       	brge	.+4      	; 0x2600 <dtoa_prf+0x25c>
    25fc:	81 81       	ldd	r24, Z+1	; 0x01
    25fe:	01 c0       	rjmp	.+2      	; 0x2602 <dtoa_prf+0x25e>
    2600:	80 e3       	ldi	r24, 0x30	; 48
    2602:	41 50       	subi	r20, 0x01	; 1
    2604:	51 09       	sbc	r21, r1
    2606:	31 96       	adiw	r30, 0x01	; 1
    2608:	d6 01       	movw	r26, r12
    260a:	11 96       	adiw	r26, 0x01	; 1
    260c:	7d 01       	movw	r14, r26
    260e:	40 17       	cp	r20, r16
    2610:	51 07       	cpc	r21, r17
    2612:	24 f0       	brlt	.+8      	; 0x261c <dtoa_prf+0x278>
    2614:	d6 01       	movw	r26, r12
    2616:	8c 93       	st	X, r24
    2618:	67 01       	movw	r12, r14
    261a:	e2 cf       	rjmp	.-60     	; 0x25e0 <dtoa_prf+0x23c>
    261c:	64 17       	cp	r22, r20
    261e:	75 07       	cpc	r23, r21
    2620:	39 f4       	brne	.+14     	; 0x2630 <dtoa_prf+0x28c>
    2622:	96 33       	cpi	r25, 0x36	; 54
    2624:	20 f4       	brcc	.+8      	; 0x262e <dtoa_prf+0x28a>
    2626:	95 33       	cpi	r25, 0x35	; 53
    2628:	19 f4       	brne	.+6      	; 0x2630 <dtoa_prf+0x28c>
    262a:	31 11       	cpse	r19, r1
    262c:	01 c0       	rjmp	.+2      	; 0x2630 <dtoa_prf+0x28c>
    262e:	81 e3       	ldi	r24, 0x31	; 49
    2630:	f6 01       	movw	r30, r12
    2632:	80 83       	st	Z, r24
    2634:	f7 01       	movw	r30, r14
    2636:	82 2f       	mov	r24, r18
    2638:	90 e2       	ldi	r25, 0x20	; 32
    263a:	88 23       	and	r24, r24
    263c:	19 f0       	breq	.+6      	; 0x2644 <dtoa_prf+0x2a0>
    263e:	91 93       	st	Z+, r25
    2640:	81 50       	subi	r24, 0x01	; 1
    2642:	fb cf       	rjmp	.-10     	; 0x263a <dtoa_prf+0x296>
    2644:	f7 01       	movw	r30, r14
    2646:	e2 0f       	add	r30, r18
    2648:	f1 1d       	adc	r31, r1
    264a:	10 82       	st	Z, r1
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	29 96       	adiw	r28, 0x09	; 9
    2652:	ec e0       	ldi	r30, 0x0C	; 12
    2654:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__+0xc>

00002658 <__ftoa_engine>:
    2658:	28 30       	cpi	r18, 0x08	; 8
    265a:	08 f0       	brcs	.+2      	; 0x265e <__ftoa_engine+0x6>
    265c:	27 e0       	ldi	r18, 0x07	; 7
    265e:	33 27       	eor	r19, r19
    2660:	da 01       	movw	r26, r20
    2662:	99 0f       	add	r25, r25
    2664:	31 1d       	adc	r19, r1
    2666:	87 fd       	sbrc	r24, 7
    2668:	91 60       	ori	r25, 0x01	; 1
    266a:	00 96       	adiw	r24, 0x00	; 0
    266c:	61 05       	cpc	r22, r1
    266e:	71 05       	cpc	r23, r1
    2670:	39 f4       	brne	.+14     	; 0x2680 <__ftoa_engine+0x28>
    2672:	32 60       	ori	r19, 0x02	; 2
    2674:	2e 5f       	subi	r18, 0xFE	; 254
    2676:	3d 93       	st	X+, r19
    2678:	30 e3       	ldi	r19, 0x30	; 48
    267a:	2a 95       	dec	r18
    267c:	e1 f7       	brne	.-8      	; 0x2676 <__ftoa_engine+0x1e>
    267e:	08 95       	ret
    2680:	9f 3f       	cpi	r25, 0xFF	; 255
    2682:	30 f0       	brcs	.+12     	; 0x2690 <__ftoa_engine+0x38>
    2684:	80 38       	cpi	r24, 0x80	; 128
    2686:	71 05       	cpc	r23, r1
    2688:	61 05       	cpc	r22, r1
    268a:	09 f0       	breq	.+2      	; 0x268e <__ftoa_engine+0x36>
    268c:	3c 5f       	subi	r19, 0xFC	; 252
    268e:	3c 5f       	subi	r19, 0xFC	; 252
    2690:	3d 93       	st	X+, r19
    2692:	91 30       	cpi	r25, 0x01	; 1
    2694:	08 f0       	brcs	.+2      	; 0x2698 <__ftoa_engine+0x40>
    2696:	80 68       	ori	r24, 0x80	; 128
    2698:	91 1d       	adc	r25, r1
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	1f 93       	push	r17
    26a0:	0f 93       	push	r16
    26a2:	ff 92       	push	r15
    26a4:	ef 92       	push	r14
    26a6:	19 2f       	mov	r17, r25
    26a8:	98 7f       	andi	r25, 0xF8	; 248
    26aa:	96 95       	lsr	r25
    26ac:	e9 2f       	mov	r30, r25
    26ae:	96 95       	lsr	r25
    26b0:	96 95       	lsr	r25
    26b2:	e9 0f       	add	r30, r25
    26b4:	ff 27       	eor	r31, r31
    26b6:	e4 5d       	subi	r30, 0xD4	; 212
    26b8:	fe 4f       	sbci	r31, 0xFE	; 254
    26ba:	99 27       	eor	r25, r25
    26bc:	33 27       	eor	r19, r19
    26be:	ee 24       	eor	r14, r14
    26c0:	ff 24       	eor	r15, r15
    26c2:	a7 01       	movw	r20, r14
    26c4:	e7 01       	movw	r28, r14
    26c6:	05 90       	lpm	r0, Z+
    26c8:	08 94       	sec
    26ca:	07 94       	ror	r0
    26cc:	28 f4       	brcc	.+10     	; 0x26d8 <__ftoa_engine+0x80>
    26ce:	36 0f       	add	r19, r22
    26d0:	e7 1e       	adc	r14, r23
    26d2:	f8 1e       	adc	r15, r24
    26d4:	49 1f       	adc	r20, r25
    26d6:	51 1d       	adc	r21, r1
    26d8:	66 0f       	add	r22, r22
    26da:	77 1f       	adc	r23, r23
    26dc:	88 1f       	adc	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	06 94       	lsr	r0
    26e2:	a1 f7       	brne	.-24     	; 0x26cc <__ftoa_engine+0x74>
    26e4:	05 90       	lpm	r0, Z+
    26e6:	07 94       	ror	r0
    26e8:	28 f4       	brcc	.+10     	; 0x26f4 <__ftoa_engine+0x9c>
    26ea:	e7 0e       	add	r14, r23
    26ec:	f8 1e       	adc	r15, r24
    26ee:	49 1f       	adc	r20, r25
    26f0:	56 1f       	adc	r21, r22
    26f2:	c1 1d       	adc	r28, r1
    26f4:	77 0f       	add	r23, r23
    26f6:	88 1f       	adc	r24, r24
    26f8:	99 1f       	adc	r25, r25
    26fa:	66 1f       	adc	r22, r22
    26fc:	06 94       	lsr	r0
    26fe:	a1 f7       	brne	.-24     	; 0x26e8 <__ftoa_engine+0x90>
    2700:	05 90       	lpm	r0, Z+
    2702:	07 94       	ror	r0
    2704:	28 f4       	brcc	.+10     	; 0x2710 <__ftoa_engine+0xb8>
    2706:	f8 0e       	add	r15, r24
    2708:	49 1f       	adc	r20, r25
    270a:	56 1f       	adc	r21, r22
    270c:	c7 1f       	adc	r28, r23
    270e:	d1 1d       	adc	r29, r1
    2710:	88 0f       	add	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	66 1f       	adc	r22, r22
    2716:	77 1f       	adc	r23, r23
    2718:	06 94       	lsr	r0
    271a:	a1 f7       	brne	.-24     	; 0x2704 <__ftoa_engine+0xac>
    271c:	05 90       	lpm	r0, Z+
    271e:	07 94       	ror	r0
    2720:	20 f4       	brcc	.+8      	; 0x272a <__ftoa_engine+0xd2>
    2722:	49 0f       	add	r20, r25
    2724:	56 1f       	adc	r21, r22
    2726:	c7 1f       	adc	r28, r23
    2728:	d8 1f       	adc	r29, r24
    272a:	99 0f       	add	r25, r25
    272c:	66 1f       	adc	r22, r22
    272e:	77 1f       	adc	r23, r23
    2730:	88 1f       	adc	r24, r24
    2732:	06 94       	lsr	r0
    2734:	a9 f7       	brne	.-22     	; 0x2720 <__ftoa_engine+0xc8>
    2736:	84 91       	lpm	r24, Z
    2738:	10 95       	com	r17
    273a:	17 70       	andi	r17, 0x07	; 7
    273c:	41 f0       	breq	.+16     	; 0x274e <__ftoa_engine+0xf6>
    273e:	d6 95       	lsr	r29
    2740:	c7 95       	ror	r28
    2742:	57 95       	ror	r21
    2744:	47 95       	ror	r20
    2746:	f7 94       	ror	r15
    2748:	e7 94       	ror	r14
    274a:	1a 95       	dec	r17
    274c:	c1 f7       	brne	.-16     	; 0x273e <__ftoa_engine+0xe6>
    274e:	e2 ed       	ldi	r30, 0xD2	; 210
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	68 94       	set
    2754:	15 90       	lpm	r1, Z+
    2756:	15 91       	lpm	r17, Z+
    2758:	35 91       	lpm	r19, Z+
    275a:	65 91       	lpm	r22, Z+
    275c:	95 91       	lpm	r25, Z+
    275e:	05 90       	lpm	r0, Z+
    2760:	7f e2       	ldi	r23, 0x2F	; 47
    2762:	73 95       	inc	r23
    2764:	e1 18       	sub	r14, r1
    2766:	f1 0a       	sbc	r15, r17
    2768:	43 0b       	sbc	r20, r19
    276a:	56 0b       	sbc	r21, r22
    276c:	c9 0b       	sbc	r28, r25
    276e:	d0 09       	sbc	r29, r0
    2770:	c0 f7       	brcc	.-16     	; 0x2762 <__ftoa_engine+0x10a>
    2772:	e1 0c       	add	r14, r1
    2774:	f1 1e       	adc	r15, r17
    2776:	43 1f       	adc	r20, r19
    2778:	56 1f       	adc	r21, r22
    277a:	c9 1f       	adc	r28, r25
    277c:	d0 1d       	adc	r29, r0
    277e:	7e f4       	brtc	.+30     	; 0x279e <__ftoa_engine+0x146>
    2780:	70 33       	cpi	r23, 0x30	; 48
    2782:	11 f4       	brne	.+4      	; 0x2788 <__ftoa_engine+0x130>
    2784:	8a 95       	dec	r24
    2786:	e6 cf       	rjmp	.-52     	; 0x2754 <__ftoa_engine+0xfc>
    2788:	e8 94       	clt
    278a:	01 50       	subi	r16, 0x01	; 1
    278c:	30 f0       	brcs	.+12     	; 0x279a <__ftoa_engine+0x142>
    278e:	08 0f       	add	r16, r24
    2790:	0a f4       	brpl	.+2      	; 0x2794 <__ftoa_engine+0x13c>
    2792:	00 27       	eor	r16, r16
    2794:	02 17       	cp	r16, r18
    2796:	08 f4       	brcc	.+2      	; 0x279a <__ftoa_engine+0x142>
    2798:	20 2f       	mov	r18, r16
    279a:	23 95       	inc	r18
    279c:	02 2f       	mov	r16, r18
    279e:	7a 33       	cpi	r23, 0x3A	; 58
    27a0:	28 f0       	brcs	.+10     	; 0x27ac <__ftoa_engine+0x154>
    27a2:	79 e3       	ldi	r23, 0x39	; 57
    27a4:	7d 93       	st	X+, r23
    27a6:	2a 95       	dec	r18
    27a8:	e9 f7       	brne	.-6      	; 0x27a4 <__ftoa_engine+0x14c>
    27aa:	10 c0       	rjmp	.+32     	; 0x27cc <__ftoa_engine+0x174>
    27ac:	7d 93       	st	X+, r23
    27ae:	2a 95       	dec	r18
    27b0:	89 f6       	brne	.-94     	; 0x2754 <__ftoa_engine+0xfc>
    27b2:	06 94       	lsr	r0
    27b4:	97 95       	ror	r25
    27b6:	67 95       	ror	r22
    27b8:	37 95       	ror	r19
    27ba:	17 95       	ror	r17
    27bc:	17 94       	ror	r1
    27be:	e1 18       	sub	r14, r1
    27c0:	f1 0a       	sbc	r15, r17
    27c2:	43 0b       	sbc	r20, r19
    27c4:	56 0b       	sbc	r21, r22
    27c6:	c9 0b       	sbc	r28, r25
    27c8:	d0 09       	sbc	r29, r0
    27ca:	98 f0       	brcs	.+38     	; 0x27f2 <__ftoa_engine+0x19a>
    27cc:	23 95       	inc	r18
    27ce:	7e 91       	ld	r23, -X
    27d0:	73 95       	inc	r23
    27d2:	7a 33       	cpi	r23, 0x3A	; 58
    27d4:	08 f0       	brcs	.+2      	; 0x27d8 <__ftoa_engine+0x180>
    27d6:	70 e3       	ldi	r23, 0x30	; 48
    27d8:	7c 93       	st	X, r23
    27da:	20 13       	cpse	r18, r16
    27dc:	b8 f7       	brcc	.-18     	; 0x27cc <__ftoa_engine+0x174>
    27de:	7e 91       	ld	r23, -X
    27e0:	70 61       	ori	r23, 0x10	; 16
    27e2:	7d 93       	st	X+, r23
    27e4:	30 f0       	brcs	.+12     	; 0x27f2 <__ftoa_engine+0x19a>
    27e6:	83 95       	inc	r24
    27e8:	71 e3       	ldi	r23, 0x31	; 49
    27ea:	7d 93       	st	X+, r23
    27ec:	70 e3       	ldi	r23, 0x30	; 48
    27ee:	2a 95       	dec	r18
    27f0:	e1 f7       	brne	.-8      	; 0x27ea <__ftoa_engine+0x192>
    27f2:	11 24       	eor	r1, r1
    27f4:	ef 90       	pop	r14
    27f6:	ff 90       	pop	r15
    27f8:	0f 91       	pop	r16
    27fa:	1f 91       	pop	r17
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	99 27       	eor	r25, r25
    2802:	87 fd       	sbrc	r24, 7
    2804:	90 95       	com	r25
    2806:	08 95       	ret

00002808 <__prologue_saves__>:
    2808:	2f 92       	push	r2
    280a:	3f 92       	push	r3
    280c:	4f 92       	push	r4
    280e:	5f 92       	push	r5
    2810:	6f 92       	push	r6
    2812:	7f 92       	push	r7
    2814:	8f 92       	push	r8
    2816:	9f 92       	push	r9
    2818:	af 92       	push	r10
    281a:	bf 92       	push	r11
    281c:	cf 92       	push	r12
    281e:	df 92       	push	r13
    2820:	ef 92       	push	r14
    2822:	ff 92       	push	r15
    2824:	0f 93       	push	r16
    2826:	1f 93       	push	r17
    2828:	cf 93       	push	r28
    282a:	df 93       	push	r29
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	ca 1b       	sub	r28, r26
    2832:	db 0b       	sbc	r29, r27
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	de bf       	out	0x3e, r29	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	cd bf       	out	0x3d, r28	; 61
    283e:	09 94       	ijmp

00002840 <__epilogue_restores__>:
    2840:	2a 88       	ldd	r2, Y+18	; 0x12
    2842:	39 88       	ldd	r3, Y+17	; 0x11
    2844:	48 88       	ldd	r4, Y+16	; 0x10
    2846:	5f 84       	ldd	r5, Y+15	; 0x0f
    2848:	6e 84       	ldd	r6, Y+14	; 0x0e
    284a:	7d 84       	ldd	r7, Y+13	; 0x0d
    284c:	8c 84       	ldd	r8, Y+12	; 0x0c
    284e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2850:	aa 84       	ldd	r10, Y+10	; 0x0a
    2852:	b9 84       	ldd	r11, Y+9	; 0x09
    2854:	c8 84       	ldd	r12, Y+8	; 0x08
    2856:	df 80       	ldd	r13, Y+7	; 0x07
    2858:	ee 80       	ldd	r14, Y+6	; 0x06
    285a:	fd 80       	ldd	r15, Y+5	; 0x05
    285c:	0c 81       	ldd	r16, Y+4	; 0x04
    285e:	1b 81       	ldd	r17, Y+3	; 0x03
    2860:	aa 81       	ldd	r26, Y+2	; 0x02
    2862:	b9 81       	ldd	r27, Y+1	; 0x01
    2864:	ce 0f       	add	r28, r30
    2866:	d1 1d       	adc	r29, r1
    2868:	0f b6       	in	r0, 0x3f	; 63
    286a:	f8 94       	cli
    286c:	de bf       	out	0x3e, r29	; 62
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	cd bf       	out	0x3d, r28	; 61
    2872:	ed 01       	movw	r28, r26
    2874:	08 95       	ret

00002876 <_exit>:
    2876:	f8 94       	cli

00002878 <__stop_program>:
    2878:	ff cf       	rjmp	.-2      	; 0x2878 <__stop_program>
