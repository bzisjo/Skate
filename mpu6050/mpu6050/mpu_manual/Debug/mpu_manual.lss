
mpu_manual.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000289e  00002932  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000289e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000083  00800108  00800108  0000293a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000293a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000296c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000029ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000217a  00000000  00000000  00002b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000caf  00000000  00000000  00004cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f86  00000000  00000000  0000596d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c8  00000000  00000000  000068f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000887  00000000  00000000  00006fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025bd  00000000  00000000  00007843  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00009e00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__ctors_end>
       4:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       8:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
       c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      10:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      14:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      18:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      1c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      20:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      24:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      28:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      2c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      30:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      34:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      38:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      3c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      40:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__vector_16>
      44:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      48:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__vector_18>
      4c:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__vector_19>
      50:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      54:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      58:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      5c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      60:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      64:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
      68:	03 6e       	ori	r16, 0xE3	; 227
      6a:	db 36       	cpi	r29, 0x6B	; 107
      6c:	3d 9a       	sbi	0x07, 5	; 7
      6e:	99 99       	sbic	0x13, 1	; 19
      70:	99 3d       	cpi	r25, 0xD9	; 217
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	3e 00       	.word	0x003e	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 4a       	sbci	r16, 0xA8	; 168
      7e:	d7 3b       	cpi	r29, 0xB7	; 183
      80:	3b ce       	rjmp	.-906    	; 0xfffffcf8 <__eeprom_end+0xff7efcf8>
      82:	01 6e       	ori	r16, 0xE1	; 225
      84:	84 bc       	out	0x24, r8	; 36
      86:	bf fd       	.word	0xfdbf	; ????
      88:	c1 2f       	mov	r28, r17
      8a:	3d 6c       	ori	r19, 0xCD	; 205
      8c:	74 31       	cpi	r23, 0x14	; 20
      8e:	9a bd       	out	0x2a, r25	; 42
      90:	56 83       	std	Z+6, r21	; 0x06
      92:	3d da       	rcall	.-2950   	; 0xfffff50e <__eeprom_end+0xff7ef50e>
      94:	3d 00       	.word	0x003d	; ????
      96:	c7 7f       	andi	r28, 0xF7	; 247
      98:	11 be       	out	0x31, r1	; 49
      9a:	d9 e4       	ldi	r29, 0x49	; 73
      9c:	bb 4c       	sbci	r27, 0xCB	; 203
      9e:	3e 91       	ld	r19, -X
      a0:	6b aa       	std	Y+51, r6	; 0x33
      a2:	aa be       	out	0x3a, r10	; 58
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	3f 07       	cpc	r19, r31
      aa:	2c 7a       	andi	r18, 0xAC	; 172
      ac:	a5 ba       	out	0x15, r10	; 21
      ae:	6c c5       	rjmp	.+2776   	; 0xb88 <mpu6050_mahonyUpdate+0x110>
      b0:	90 da       	rcall	.-2784   	; 0xfffff5d2 <__eeprom_end+0xff7ef5d2>
      b2:	3b 93       	.word	0x933b	; ????
      b4:	65 fc       	sbrc	r6, 5
      b6:	8b bc       	out	0x2b, r8	; 43
      b8:	53 f8       	bld	r5, 3
      ba:	10 fd       	sbrc	r17, 0
      bc:	3c 56       	subi	r19, 0x6C	; 108
      be:	92 83       	std	Z+2, r25	; 0x02
      c0:	4d bd       	out	0x2d, r20	; 45
      c2:	87 9d       	mul	r24, r7
      c4:	3a b6       	in	r3, 0x3a	; 58
      c6:	3d cb       	rjmp	.-2438   	; 0xfffff742 <__eeprom_end+0xff7ef742>
      c8:	c9 bf       	out	0x39, r28	; 57
      ca:	5b be       	out	0x3b, r5	; 59
      cc:	73 da       	rcall	.-2842   	; 0xfffff5b4 <__eeprom_end+0xff7ef5b4>
      ce:	0f c9       	rjmp	.-3554   	; 0xfffff2ee <__eeprom_end+0xff7ef2ee>
      d0:	3f 00       	.word	0x003f	; ????

000000d2 <__trampolines_end>:
      d2:	00 40       	sbci	r16, 0x00	; 0
      d4:	7a 10       	cpse	r7, r10
      d6:	f3 5a       	subi	r31, 0xA3	; 163
      d8:	00 a0       	ldd	r0, Z+32	; 0x20
      da:	72 4e       	sbci	r23, 0xE2	; 226
      dc:	18 09       	sbc	r17, r8
      de:	00 10       	cpse	r0, r0
      e0:	a5 d4       	rcall	.+2378   	; 0xa2c <__stack+0x12d>
      e2:	e8 00       	.word	0x00e8	; ????
      e4:	00 e8       	ldi	r16, 0x80	; 128
      e6:	76 48       	sbci	r23, 0x86	; 134
      e8:	17 00       	.word	0x0017	; ????
      ea:	00 e4       	ldi	r16, 0x40	; 64
      ec:	0b 54       	subi	r16, 0x4B	; 75
      ee:	02 00       	.word	0x0002	; ????
      f0:	00 ca       	rjmp	.-3072   	; 0xfffff4f2 <__eeprom_end+0xff7ef4f2>
      f2:	9a 3b       	cpi	r25, 0xBA	; 186
      f4:	00 00       	nop
      f6:	00 e1       	ldi	r16, 0x10	; 16
      f8:	f5 05       	cpc	r31, r5
      fa:	00 00       	nop
      fc:	80 96       	adiw	r24, 0x20	; 32
      fe:	98 00       	.word	0x0098	; ????
     100:	00 00       	nop
     102:	40 42       	sbci	r20, 0x20	; 32
     104:	0f 00       	.word	0x000f	; ????
     106:	00 00       	nop
     108:	a0 86       	std	Z+8, r10	; 0x08
     10a:	01 00       	.word	0x0001	; ????
     10c:	00 00       	nop
     10e:	10 27       	eor	r17, r16
     110:	00 00       	nop
     112:	00 00       	nop
     114:	e8 03       	fmulsu	r22, r16
     116:	00 00       	nop
     118:	00 00       	nop
     11a:	64 00       	.word	0x0064	; ????
     11c:	00 00       	nop
     11e:	00 00       	nop
     120:	0a 00       	.word	0x000a	; ????
     122:	00 00       	nop
     124:	00 00       	nop
     126:	01 00       	.word	0x0001	; ????
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	2c 76       	andi	r18, 0x6C	; 108
     12e:	d8 88       	ldd	r13, Y+16	; 0x10
     130:	dc 67       	ori	r29, 0x7C	; 124
     132:	4f 08       	sbc	r4, r15
     134:	23 df       	rcall	.-442    	; 0xffffff7c <__eeprom_end+0xff7eff7c>
     136:	c1 df       	rcall	.-126    	; 0xba <__SREG__+0x7b>
     138:	ae 59       	subi	r26, 0x9E	; 158
     13a:	e1 b1       	in	r30, 0x01	; 1
     13c:	b7 96       	adiw	r30, 0x27	; 39
     13e:	e5 e3       	ldi	r30, 0x35	; 53
     140:	e4 53       	subi	r30, 0x34	; 52
     142:	c6 3a       	cpi	r28, 0xA6	; 166
     144:	e6 51       	subi	r30, 0x16	; 22
     146:	99 76       	andi	r25, 0x69	; 105
     148:	96 e8       	ldi	r25, 0x86	; 134
     14a:	e6 c2       	rjmp	.+1484   	; 0x718 <mpu6050_writeBits+0x48>
     14c:	84 26       	eor	r8, r20
     14e:	eb 89       	ldd	r30, Y+19	; 0x13
     150:	8c 9b       	sbis	0x11, 4	; 17
     152:	62 ed       	ldi	r22, 0xD2	; 210
     154:	40 7c       	andi	r20, 0xC0	; 192
     156:	6f fc       	.word	0xfc6f	; ????
     158:	ef bc       	out	0x2f, r14	; 47
     15a:	9c 9f       	mul	r25, r28
     15c:	40 f2       	brcs	.-112    	; 0xee <__trampolines_end+0x1c>
     15e:	ba a5       	ldd	r27, Y+42	; 0x2a
     160:	6f a5       	ldd	r22, Y+47	; 0x2f
     162:	f4 90       	lpm	r15, Z
     164:	05 5a       	subi	r16, 0xA5	; 165
     166:	2a f7       	brpl	.-54     	; 0x132 <__trampolines_end+0x60>
     168:	5c 93       	st	X, r21
     16a:	6b 6c       	ori	r22, 0xCB	; 203
     16c:	f9 67       	ori	r31, 0x79	; 121
     16e:	6d c1       	rjmp	.+730    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     170:	1b fc       	.word	0xfc1b	; ????
     172:	e0 e4       	ldi	r30, 0x40	; 64
     174:	0d 47       	sbci	r16, 0x7D	; 125
     176:	fe f5       	brtc	.+126    	; 0x1f6 <.do_clear_bss_loop>
     178:	20 e6       	ldi	r18, 0x60	; 96
     17a:	b5 00       	.word	0x00b5	; ????
     17c:	d0 ed       	ldi	r29, 0xD0	; 208
     17e:	90 2e       	mov	r9, r16
     180:	03 00       	.word	0x0003	; ????
     182:	94 35       	cpi	r25, 0x54	; 84
     184:	77 05       	cpc	r23, r7
     186:	00 80       	ld	r0, Z
     188:	84 1e       	adc	r8, r20
     18a:	08 00       	.word	0x0008	; ????
     18c:	00 20       	and	r0, r0
     18e:	4e 0a       	sbc	r4, r30
     190:	00 00       	nop
     192:	00 c8       	rjmp	.-4096   	; 0xfffff194 <__eeprom_end+0xff7ef194>
     194:	0c 33       	cpi	r16, 0x3C	; 60
     196:	33 33       	cpi	r19, 0x33	; 51
     198:	33 0f       	add	r19, r19
     19a:	98 6e       	ori	r25, 0xE8	; 232
     19c:	12 83       	std	Z+2, r17	; 0x02
     19e:	11 41       	sbci	r17, 0x11	; 17
     1a0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1a2:	21 14       	cp	r2, r1
     1a4:	89 3b       	cpi	r24, 0xB9	; 185
     1a6:	e6 55       	subi	r30, 0x56	; 86
     1a8:	16 cf       	rjmp	.-468    	; 0xffffffd6 <__eeprom_end+0xff7effd6>
     1aa:	fe e6       	ldi	r31, 0x6E	; 110
     1ac:	db 18       	sub	r13, r11
     1ae:	d1 84       	ldd	r13, Z+9	; 0x09
     1b0:	4b 38       	cpi	r20, 0x8B	; 139
     1b2:	1b f7       	brvc	.-58     	; 0x17a <__trampolines_end+0xa8>
     1b4:	7c 1d       	adc	r23, r12
     1b6:	90 1d       	adc	r25, r0
     1b8:	a4 bb       	out	0x14, r26	; 20
     1ba:	e4 24       	eor	r14, r4
     1bc:	20 32       	cpi	r18, 0x20	; 32
     1be:	84 72       	andi	r24, 0x24	; 36
     1c0:	5e 22       	and	r5, r30
     1c2:	81 00       	.word	0x0081	; ????
     1c4:	c9 f1       	breq	.+114    	; 0x238 <i2c_start+0x22>
     1c6:	24 ec       	ldi	r18, 0xC4	; 196
     1c8:	a1 e5       	ldi	r26, 0x51	; 81
     1ca:	3d 27       	eor	r19, r29

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d8 e0       	ldi	r29, 0x08	; 8
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61

000001d8 <__do_copy_data>:
     1d8:	11 e0       	ldi	r17, 0x01	; 1
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b1 e0       	ldi	r27, 0x01	; 1
     1de:	ee e9       	ldi	r30, 0x9E	; 158
     1e0:	f8 e2       	ldi	r31, 0x28	; 40
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__do_copy_data+0x10>
     1e4:	05 90       	lpm	r0, Z+
     1e6:	0d 92       	st	X+, r0
     1e8:	a8 30       	cpi	r26, 0x08	; 8
     1ea:	b1 07       	cpc	r27, r17
     1ec:	d9 f7       	brne	.-10     	; 0x1e4 <__do_copy_data+0xc>

000001ee <__do_clear_bss>:
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	a8 e0       	ldi	r26, 0x08	; 8
     1f2:	b1 e0       	ldi	r27, 0x01	; 1
     1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <.do_clear_bss_start>

000001f6 <.do_clear_bss_loop>:
     1f6:	1d 92       	st	X+, r1

000001f8 <.do_clear_bss_start>:
     1f8:	ab 38       	cpi	r26, 0x8B	; 139
     1fa:	b2 07       	cpc	r27, r18
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <.do_clear_bss_loop>
     1fe:	0e 94 b6 01 	call	0x36c	; 0x36c <main>
     202:	0c 94 4d 14 	jmp	0x289a	; 0x289a <_exit>

00000206 <__bad_interrupt>:
     206:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020a <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     20a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     20e:	82 e0       	ldi	r24, 0x02	; 2
     210:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     214:	08 95       	ret

00000216 <i2c_start>:
     216:	94 ea       	ldi	r25, 0xA4	; 164
     218:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     21c:	4f ef       	ldi	r20, 0xFF	; 255
     21e:	50 e0       	ldi	r21, 0x00	; 0
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	ec eb       	ldi	r30, 0xBC	; 188
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	90 81       	ld	r25, Z
     22a:	99 23       	and	r25, r25
     22c:	34 f0       	brlt	.+12     	; 0x23a <i2c_start+0x24>
     22e:	41 50       	subi	r20, 0x01	; 1
     230:	51 09       	sbc	r21, r1
     232:	61 09       	sbc	r22, r1
     234:	71 09       	sbc	r23, r1
     236:	c0 f7       	brcc	.-16     	; 0x228 <i2c_start+0x12>
     238:	04 c0       	rjmp	.+8      	; 0x242 <i2c_start+0x2c>
     23a:	45 2b       	or	r20, r21
     23c:	46 2b       	or	r20, r22
     23e:	47 2b       	or	r20, r23
     240:	41 f1       	breq	.+80     	; 0x292 <i2c_start+0x7c>
     242:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     246:	98 7f       	andi	r25, 0xF8	; 248
     248:	98 30       	cpi	r25, 0x08	; 8
     24a:	11 f0       	breq	.+4      	; 0x250 <i2c_start+0x3a>
     24c:	90 31       	cpi	r25, 0x10	; 16
     24e:	19 f5       	brne	.+70     	; 0x296 <i2c_start+0x80>
     250:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     254:	84 e8       	ldi	r24, 0x84	; 132
     256:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     25a:	8f ef       	ldi	r24, 0xFF	; 255
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	a0 e0       	ldi	r26, 0x00	; 0
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	ec eb       	ldi	r30, 0xBC	; 188
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	20 81       	ld	r18, Z
     268:	22 23       	and	r18, r18
     26a:	2c f0       	brlt	.+10     	; 0x276 <i2c_start+0x60>
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	a1 09       	sbc	r26, r1
     270:	b1 09       	sbc	r27, r1
     272:	c8 f7       	brcc	.-14     	; 0x266 <i2c_start+0x50>
     274:	04 c0       	rjmp	.+8      	; 0x27e <i2c_start+0x68>
     276:	89 2b       	or	r24, r25
     278:	8a 2b       	or	r24, r26
     27a:	8b 2b       	or	r24, r27
     27c:	71 f0       	breq	.+28     	; 0x29a <i2c_start+0x84>
     27e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     282:	98 7f       	andi	r25, 0xF8	; 248
     284:	98 31       	cpi	r25, 0x18	; 24
     286:	59 f0       	breq	.+22     	; 0x29e <i2c_start+0x88>
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 34       	cpi	r25, 0x40	; 64
     28c:	49 f4       	brne	.+18     	; 0x2a0 <i2c_start+0x8a>
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	08 95       	ret
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	08 95       	ret
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	08 95       	ret
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	08 95       	ret
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	08 95       	ret

000002a2 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2a2:	84 e9       	ldi	r24, 0x94	; 148
     2a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	ec eb       	ldi	r30, 0xBC	; 188
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	20 81       	ld	r18, Z
     2b2:	24 ff       	sbrs	r18, 4
     2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <i2c_stop+0x1e>
     2b6:	01 96       	adiw	r24, 0x01	; 1
     2b8:	81 15       	cp	r24, r1
     2ba:	21 e0       	ldi	r18, 0x01	; 1
     2bc:	92 07       	cpc	r25, r18
     2be:	c1 f7       	brne	.-16     	; 0x2b0 <i2c_stop+0xe>
     2c0:	08 95       	ret

000002c2 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     2c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     2c6:	84 e8       	ldi	r24, 0x84	; 132
     2c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	a0 e0       	ldi	r26, 0x00	; 0
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     2d4:	ec eb       	ldi	r30, 0xBC	; 188
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	20 81       	ld	r18, Z
     2da:	22 23       	and	r18, r18
     2dc:	2c f0       	brlt	.+10     	; 0x2e8 <i2c_write+0x26>
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	a1 09       	sbc	r26, r1
     2e2:	b1 09       	sbc	r27, r1
     2e4:	c8 f7       	brcc	.-14     	; 0x2d8 <i2c_write+0x16>
     2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <i2c_write+0x2e>
	if(i2c_timer == 0)
     2e8:	89 2b       	or	r24, r25
     2ea:	8a 2b       	or	r24, r26
     2ec:	8b 2b       	or	r24, r27
     2ee:	41 f0       	breq	.+16     	; 0x300 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     2f0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     2f4:	98 7f       	andi	r25, 0xF8	; 248
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	98 32       	cpi	r25, 0x28	; 40
     2fa:	19 f4       	brne	.+6      	; 0x302 <i2c_write+0x40>
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	08 95       	ret
     300:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     302:	08 95       	ret

00000304 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     304:	84 ec       	ldi	r24, 0xC4	; 196
     306:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
     30a:	8f ef       	ldi	r24, 0xFF	; 255
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	a0 e0       	ldi	r26, 0x00	; 0
     310:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     312:	ec eb       	ldi	r30, 0xBC	; 188
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	20 81       	ld	r18, Z
     318:	22 23       	and	r18, r18
     31a:	2c f0       	brlt	.+10     	; 0x326 <i2c_readAck+0x22>
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	a1 09       	sbc	r26, r1
     320:	b1 09       	sbc	r27, r1
     322:	c8 f7       	brcc	.-14     	; 0x316 <i2c_readAck+0x12>
     324:	04 c0       	rjmp	.+8      	; 0x32e <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     326:	89 2b       	or	r24, r25
     328:	8a 2b       	or	r24, r26
     32a:	8b 2b       	or	r24, r27
     32c:	19 f0       	breq	.+6      	; 0x334 <i2c_readAck+0x30>
		return 0;

    return TWDR;
     32e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     332:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     334:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     336:	08 95       	ret

00000338 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     338:	84 e8       	ldi	r24, 0x84	; 132
     33a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
     33e:	8f ef       	ldi	r24, 0xFF	; 255
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	a0 e0       	ldi	r26, 0x00	; 0
     344:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     346:	ec eb       	ldi	r30, 0xBC	; 188
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	20 81       	ld	r18, Z
     34c:	22 23       	and	r18, r18
     34e:	2c f0       	brlt	.+10     	; 0x35a <i2c_readNak+0x22>
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	a1 09       	sbc	r26, r1
     354:	b1 09       	sbc	r27, r1
     356:	c8 f7       	brcc	.-14     	; 0x34a <i2c_readNak+0x12>
     358:	04 c0       	rjmp	.+8      	; 0x362 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     35a:	89 2b       	or	r24, r25
     35c:	8a 2b       	or	r24, r26
     35e:	8b 2b       	or	r24, r27
     360:	19 f0       	breq	.+6      	; 0x368 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     362:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     366:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     368:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     36a:	08 95       	ret

0000036c <main>:
void applyCompFilter(double * filteredAngle, double accelAngle, double gyroAngle, double alpha){
	*filteredAngle = alpha * gyroAngle + (1-alpha) * accelAngle;
}
#endif

int main(void) {
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	ae 97       	sbiw	r28, 0x2e	; 46
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	f8 94       	cli
     37a:	de bf       	out	0x3e, r29	; 62
     37c:	0f be       	out	0x3f, r0	; 63
     37e:	cd bf       	out	0x3d, r28	; 61
	int16_t az = 0;
	int16_t gx = 0;
	int16_t gy = 0;
	int16_t gz = 0;
	*/
	double qw = 1.0f;
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	a0 e8       	ldi	r26, 0x80	; 128
     386:	bf e3       	ldi	r27, 0x3F	; 63
     388:	89 83       	std	Y+1, r24	; 0x01
     38a:	9a 83       	std	Y+2, r25	; 0x02
     38c:	ab 83       	std	Y+3, r26	; 0x03
     38e:	bc 83       	std	Y+4, r27	; 0x04
	double qx = 0.0f;
     390:	1d 82       	std	Y+5, r1	; 0x05
     392:	1e 82       	std	Y+6, r1	; 0x06
     394:	1f 82       	std	Y+7, r1	; 0x07
     396:	18 86       	std	Y+8, r1	; 0x08
	double qy = 0.0f;
     398:	19 86       	std	Y+9, r1	; 0x09
     39a:	1a 86       	std	Y+10, r1	; 0x0a
     39c:	1b 86       	std	Y+11, r1	; 0x0b
     39e:	1c 86       	std	Y+12, r1	; 0x0c
	double qz = 0.0f;
     3a0:	1d 86       	std	Y+13, r1	; 0x0d
     3a2:	1e 86       	std	Y+14, r1	; 0x0e
     3a4:	1f 86       	std	Y+15, r1	; 0x0f
     3a6:	18 8a       	std	Y+16, r1	; 0x10
	double roll = 0.0f;		//around x axis
     3a8:	19 8a       	std	Y+17, r1	; 0x11
     3aa:	1a 8a       	std	Y+18, r1	; 0x12
     3ac:	1b 8a       	std	Y+19, r1	; 0x13
     3ae:	1c 8a       	std	Y+20, r1	; 0x14
	double pitch = 0.0f;	//around y axis
     3b0:	1d 8a       	std	Y+21, r1	; 0x15
     3b2:	1e 8a       	std	Y+22, r1	; 0x16
     3b4:	1f 8a       	std	Y+23, r1	; 0x17
     3b6:	18 8e       	std	Y+24, r1	; 0x18
	double yaw = 0.0f;		//around z axis
     3b8:	19 8e       	std	Y+25, r1	; 0x19
     3ba:	1a 8e       	std	Y+26, r1	; 0x1a
     3bc:	1b 8e       	std	Y+27, r1	; 0x1b
     3be:	1c 8e       	std	Y+28, r1	; 0x1c
	double dt = .005;		//based on sampling frequency (200Hz)
	double alpha = tau / (tau + dt);
	double rollFilt = 0.0;	//filtered angles
	double pitchFilt = 0.0;
	//double yawFilt = 0.0;
	double rollAccel = 0.0;	//angles calculated from acceleration data
     3c0:	1d 8e       	std	Y+29, r1	; 0x1d
     3c2:	1e 8e       	std	Y+30, r1	; 0x1e
     3c4:	1f 8e       	std	Y+31, r1	; 0x1f
     3c6:	18 a2       	std	Y+32, r1	; 0x20
	double pitchAccel = 0.0;
     3c8:	19 a2       	std	Y+33, r1	; 0x21
     3ca:	1a a2       	std	Y+34, r1	; 0x22
     3cc:	1b a2       	std	Y+35, r1	; 0x23
     3ce:	1c a2       	std	Y+36, r1	; 0x24
	//testing freezing
	int n = 0;
	#endif

	//init uart
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
     3d0:	83 e3       	ldi	r24, 0x33	; 51
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <uart_init>

	//init interrupt
	sei();
     3d8:	78 94       	sei

	//init mpu6050
	mpu6050_init();
     3da:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <mpu6050_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3de:	2f e7       	ldi	r18, 0x7F	; 127
     3e0:	88 e3       	ldi	r24, 0x38	; 56
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	21 50       	subi	r18, 0x01	; 1
     3e6:	80 40       	sbci	r24, 0x00	; 0
     3e8:	90 40       	sbci	r25, 0x00	; 0
     3ea:	e1 f7       	brne	.-8      	; 0x3e4 <main+0x78>
     3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0x82>
     3ee:	00 00       	nop
		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
		mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
		#endif
		
		#if MPU6050_GETATTITUDE == 1
		mpu6050_getQuaternion(&qw, &qx, &qy, &qz);
     3f0:	9e 01       	movw	r18, r28
     3f2:	23 5f       	subi	r18, 0xF3	; 243
     3f4:	3f 4f       	sbci	r19, 0xFF	; 255
     3f6:	ae 01       	movw	r20, r28
     3f8:	47 5f       	subi	r20, 0xF7	; 247
     3fa:	5f 4f       	sbci	r21, 0xFF	; 255
     3fc:	be 01       	movw	r22, r28
     3fe:	6b 5f       	subi	r22, 0xFB	; 251
     400:	7f 4f       	sbci	r23, 0xFF	; 255
     402:	ce 01       	movw	r24, r28
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <mpu6050_getQuaternion>
		//mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
		//uart_puts("A\r\n");
		//uart_puts("B\r\n");
		mpu6050_getRollPitchYaw(&roll, &pitch, &yaw);
     40a:	ae 01       	movw	r20, r28
     40c:	47 5e       	subi	r20, 0xE7	; 231
     40e:	5f 4f       	sbci	r21, 0xFF	; 255
     410:	be 01       	movw	r22, r28
     412:	6b 5e       	subi	r22, 0xEB	; 235
     414:	7f 4f       	sbci	r23, 0xFF	; 255
     416:	ce 01       	movw	r24, r28
     418:	41 96       	adiw	r24, 0x11	; 17
     41a:	0e 94 26 0c 	call	0x184c	; 0x184c <mpu6050_getRollPitchYaw>
		mpu6050_getAnglesFromAccel(&rollAccel, &pitchAccel);
     41e:	be 01       	movw	r22, r28
     420:	6f 5d       	subi	r22, 0xDF	; 223
     422:	7f 4f       	sbci	r23, 0xFF	; 255
     424:	ce 01       	movw	r24, r28
     426:	4d 96       	adiw	r24, 0x1d	; 29
     428:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <mpu6050_getAnglesFromAccel>
	*/
/*
	filters roll pitch and yaw using complementary filter 
*/
void applyCompFilter(double * filteredAngle, double accelAngle, double gyroAngle, double alpha){
	*filteredAngle = alpha * gyroAngle + (1-alpha) * accelAngle;
     42c:	21 e2       	ldi	r18, 0x21	; 33
     42e:	37 e7       	ldi	r19, 0x77	; 119
     430:	4d e7       	ldi	r20, 0x7D	; 125
     432:	5f e3       	ldi	r21, 0x3F	; 63
     434:	69 89       	ldd	r22, Y+17	; 0x11
     436:	7a 89       	ldd	r23, Y+18	; 0x12
     438:	8b 89       	ldd	r24, Y+19	; 0x13
     43a:	9c 89       	ldd	r25, Y+20	; 0x14
     43c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     440:	6b 01       	movw	r12, r22
     442:	7c 01       	movw	r14, r24
     444:	20 ec       	ldi	r18, 0xC0	; 192
     446:	37 e3       	ldi	r19, 0x37	; 55
     448:	42 e2       	ldi	r20, 0x22	; 34
     44a:	5c e3       	ldi	r21, 0x3C	; 60
     44c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     44e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     450:	8f 8d       	ldd	r24, Y+31	; 0x1f
     452:	98 a1       	ldd	r25, Y+32	; 0x20
     454:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     458:	9b 01       	movw	r18, r22
     45a:	ac 01       	movw	r20, r24
     45c:	c7 01       	movw	r24, r14
     45e:	b6 01       	movw	r22, r12
     460:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
     464:	2b 01       	movw	r4, r22
     466:	3c 01       	movw	r6, r24
     468:	21 e2       	ldi	r18, 0x21	; 33
     46a:	37 e7       	ldi	r19, 0x77	; 119
     46c:	4d e7       	ldi	r20, 0x7D	; 125
     46e:	5f e3       	ldi	r21, 0x3F	; 63
     470:	6d 89       	ldd	r22, Y+21	; 0x15
     472:	7e 89       	ldd	r23, Y+22	; 0x16
     474:	8f 89       	ldd	r24, Y+23	; 0x17
     476:	98 8d       	ldd	r25, Y+24	; 0x18
     478:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     47c:	6b 01       	movw	r12, r22
     47e:	7c 01       	movw	r14, r24
     480:	20 ec       	ldi	r18, 0xC0	; 192
     482:	37 e3       	ldi	r19, 0x37	; 55
     484:	42 e2       	ldi	r20, 0x22	; 34
     486:	5c e3       	ldi	r21, 0x3C	; 60
     488:	69 a1       	ldd	r22, Y+33	; 0x21
     48a:	7a a1       	ldd	r23, Y+34	; 0x22
     48c:	8b a1       	ldd	r24, Y+35	; 0x23
     48e:	9c a1       	ldd	r25, Y+36	; 0x24
     490:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     494:	9b 01       	movw	r18, r22
     496:	ac 01       	movw	r20, r24
     498:	c7 01       	movw	r24, r14
     49a:	b6 01       	movw	r22, r12
     49c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
     4a0:	4b 01       	movw	r8, r22
     4a2:	5c 01       	movw	r10, r24
     4a4:	8f e1       	ldi	r24, 0x1F	; 31
     4a6:	9e e4       	ldi	r25, 0x4E	; 78
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4ae:	00 00       	nop
		*/
		
		//change values to degrees
		roll_d = rollFilt*180/3.1415;
		pitch_d = pitchFilt*180/3.1415;
		yaw_d = yaw*180/3.1415;
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	44 e3       	ldi	r20, 0x34	; 52
     4b6:	53 e4       	ldi	r21, 0x43	; 67
     4b8:	69 8d       	ldd	r22, Y+25	; 0x19
     4ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
     4bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4be:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4c0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     4c4:	26 e5       	ldi	r18, 0x56	; 86
     4c6:	3e e0       	ldi	r19, 0x0E	; 14
     4c8:	49 e4       	ldi	r20, 0x49	; 73
     4ca:	50 e4       	ldi	r21, 0x40	; 64
     4cc:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divsf3>
     4d0:	6b 01       	movw	r12, r22
     4d2:	7c 01       	movw	r14, r24
		
		char itmp[10];
		//dtostrf(n, 3, 5, itmp); uart_puts(itmp); uart_puts("\r\n");
		dtostrf(roll_d, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     4d4:	20 e0       	ldi	r18, 0x00	; 0
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	44 e3       	ldi	r20, 0x34	; 52
     4da:	53 e4       	ldi	r21, 0x43	; 67
     4dc:	c3 01       	movw	r24, r6
     4de:	b2 01       	movw	r22, r4
     4e0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     4e4:	26 e5       	ldi	r18, 0x56	; 86
     4e6:	3e e0       	ldi	r19, 0x0E	; 14
     4e8:	49 e4       	ldi	r20, 0x49	; 73
     4ea:	50 e4       	ldi	r21, 0x40	; 64
     4ec:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divsf3>
     4f0:	8e 01       	movw	r16, r28
     4f2:	0b 5d       	subi	r16, 0xDB	; 219
     4f4:	1f 4f       	sbci	r17, 0xFF	; 255
     4f6:	25 e0       	ldi	r18, 0x05	; 5
     4f8:	43 e0       	ldi	r20, 0x03	; 3
     4fa:	0e 94 c4 11 	call	0x2388	; 0x2388 <dtostrf>
     4fe:	c8 01       	movw	r24, r16
     500:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <uart_puts>
     504:	80 e2       	ldi	r24, 0x20	; 32
     506:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <uart_putc>
		dtostrf(pitch_d, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	44 e3       	ldi	r20, 0x34	; 52
     510:	53 e4       	ldi	r21, 0x43	; 67
     512:	c5 01       	movw	r24, r10
     514:	b4 01       	movw	r22, r8
     516:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     51a:	26 e5       	ldi	r18, 0x56	; 86
     51c:	3e e0       	ldi	r19, 0x0E	; 14
     51e:	49 e4       	ldi	r20, 0x49	; 73
     520:	50 e4       	ldi	r21, 0x40	; 64
     522:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divsf3>
     526:	25 e0       	ldi	r18, 0x05	; 5
     528:	43 e0       	ldi	r20, 0x03	; 3
     52a:	0e 94 c4 11 	call	0x2388	; 0x2388 <dtostrf>
     52e:	c8 01       	movw	r24, r16
     530:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <uart_puts>
     534:	80 e2       	ldi	r24, 0x20	; 32
     536:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <uart_putc>
		dtostrf(yaw_d, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     53a:	25 e0       	ldi	r18, 0x05	; 5
     53c:	43 e0       	ldi	r20, 0x03	; 3
     53e:	c7 01       	movw	r24, r14
     540:	b6 01       	movw	r22, r12
     542:	0e 94 c4 11 	call	0x2388	; 0x2388 <dtostrf>
     546:	c8 01       	movw	r24, r16
     548:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <uart_puts>
     54c:	80 e2       	ldi	r24, 0x20	; 32
     54e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <uart_putc>
		uart_puts("\r\n");
     552:	84 e0       	ldi	r24, 0x04	; 4
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <uart_puts>
		
		uart_puts("\r\n");
     55a:	84 e0       	ldi	r24, 0x04	; 4
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <uart_puts>
     562:	9f ef       	ldi	r25, 0xFF	; 255
     564:	29 e6       	ldi	r18, 0x69	; 105
     566:	88 e1       	ldi	r24, 0x18	; 24
     568:	91 50       	subi	r25, 0x01	; 1
     56a:	20 40       	sbci	r18, 0x00	; 0
     56c:	80 40       	sbci	r24, 0x00	; 0
     56e:	e1 f7       	brne	.-8      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
     570:	00 c0       	rjmp	.+0      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     572:	00 00       	nop
     574:	3d cf       	rjmp	.-390    	; 0x3f0 <main+0x84>

00000576 <mpu6050_readBytes>:
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
	if(buffer[0] == 0x34)
		return 1;
	else
		return 0;
}
     576:	af 92       	push	r10
     578:	bf 92       	push	r11
     57a:	cf 92       	push	r12
     57c:	df 92       	push	r13
     57e:	ff 92       	push	r15
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	66 23       	and	r22, r22
     58a:	b9 f1       	breq	.+110    	; 0x5fa <mpu6050_readBytes+0x84>
     58c:	c5 2f       	mov	r28, r21
     58e:	d4 2f       	mov	r29, r20
     590:	f6 2e       	mov	r15, r22
     592:	18 2f       	mov	r17, r24
     594:	80 ed       	ldi	r24, 0xD0	; 208
     596:	0e 94 0b 01 	call	0x216	; 0x216 <i2c_start>
     59a:	81 2f       	mov	r24, r17
     59c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <i2c_write>
     5a0:	8a e1       	ldi	r24, 0x1A	; 26
     5a2:	8a 95       	dec	r24
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <mpu6050_readBytes+0x2c>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <mpu6050_readBytes+0x32>
     5a8:	81 ed       	ldi	r24, 0xD1	; 209
     5aa:	0e 94 0b 01 	call	0x216	; 0x216 <i2c_start>
     5ae:	0d 2f       	mov	r16, r29
     5b0:	1c 2f       	mov	r17, r28
     5b2:	cc 24       	eor	r12, r12
     5b4:	ca 94       	dec	r12
     5b6:	cf 0c       	add	r12, r15
     5b8:	d1 2c       	mov	r13, r1
     5ba:	ef ef       	ldi	r30, 0xFF	; 255
     5bc:	ce 1a       	sub	r12, r30
     5be:	de 0a       	sbc	r13, r30
     5c0:	c0 e0       	ldi	r28, 0x00	; 0
     5c2:	d0 e0       	ldi	r29, 0x00	; 0
     5c4:	af 2c       	mov	r10, r15
     5c6:	b1 2c       	mov	r11, r1
     5c8:	f1 e0       	ldi	r31, 0x01	; 1
     5ca:	af 1a       	sub	r10, r31
     5cc:	b1 08       	sbc	r11, r1
     5ce:	ac 16       	cp	r10, r28
     5d0:	bd 06       	cpc	r11, r29
     5d2:	29 f4       	brne	.+10     	; 0x5de <mpu6050_readBytes+0x68>
     5d4:	0e 94 9c 01 	call	0x338	; 0x338 <i2c_readNak>
     5d8:	f8 01       	movw	r30, r16
     5da:	80 83       	st	Z, r24
     5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <mpu6050_readBytes+0x70>
     5de:	0e 94 82 01 	call	0x304	; 0x304 <i2c_readAck>
     5e2:	f8 01       	movw	r30, r16
     5e4:	80 83       	st	Z, r24
     5e6:	21 96       	adiw	r28, 0x01	; 1
     5e8:	0f 5f       	subi	r16, 0xFF	; 255
     5ea:	1f 4f       	sbci	r17, 0xFF	; 255
     5ec:	cc 15       	cp	r28, r12
     5ee:	dd 05       	cpc	r29, r13
     5f0:	71 f7       	brne	.-36     	; 0x5ce <mpu6050_readBytes+0x58>
     5f2:	cf 2d       	mov	r28, r15
     5f4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <i2c_stop>
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <mpu6050_readBytes+0x86>
     5fa:	c0 e0       	ldi	r28, 0x00	; 0
     5fc:	8c 2f       	mov	r24, r28
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	df 90       	pop	r13
     60a:	cf 90       	pop	r12
     60c:	bf 90       	pop	r11
     60e:	af 90       	pop	r10
     610:	08 95       	ret

00000612 <mpu6050_readByte>:
     612:	ab 01       	movw	r20, r22
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	0e 94 bb 02 	call	0x576	; 0x576 <mpu6050_readBytes>
     61a:	08 95       	ret

0000061c <mpu6050_writeBytes>:
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	66 23       	and	r22, r22
     62a:	d1 f0       	breq	.+52     	; 0x660 <mpu6050_writeBytes+0x44>
     62c:	7a 01       	movw	r14, r20
     62e:	16 2f       	mov	r17, r22
     630:	c8 2f       	mov	r28, r24
     632:	80 ed       	ldi	r24, 0xD0	; 208
     634:	0e 94 0b 01 	call	0x216	; 0x216 <i2c_start>
     638:	8c 2f       	mov	r24, r28
     63a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <i2c_write>
     63e:	e7 01       	movw	r28, r14
     640:	6f ef       	ldi	r22, 0xFF	; 255
     642:	61 0f       	add	r22, r17
     644:	06 2f       	mov	r16, r22
     646:	10 e0       	ldi	r17, 0x00	; 0
     648:	0f 5f       	subi	r16, 0xFF	; 255
     64a:	1f 4f       	sbci	r17, 0xFF	; 255
     64c:	0e 0d       	add	r16, r14
     64e:	1f 1d       	adc	r17, r15
     650:	89 91       	ld	r24, Y+
     652:	0e 94 61 01 	call	0x2c2	; 0x2c2 <i2c_write>
     656:	c0 17       	cp	r28, r16
     658:	d1 07       	cpc	r29, r17
     65a:	d1 f7       	brne	.-12     	; 0x650 <mpu6050_writeBytes+0x34>
     65c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <i2c_stop>
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	08 95       	ret

0000066e <mpu6050_writeByte>:
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	1f 92       	push	r1
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	69 83       	std	Y+1, r22	; 0x01
     67a:	ae 01       	movw	r20, r28
     67c:	4f 5f       	subi	r20, 0xFF	; 255
     67e:	5f 4f       	sbci	r21, 0xFF	; 255
     680:	61 e0       	ldi	r22, 0x01	; 1
     682:	0e 94 0e 03 	call	0x61c	; 0x61c <mpu6050_writeBytes>
     686:	0f 90       	pop	r0
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <mpu6050_readBit>:
     68e:	ff 92       	push	r15
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	1f 92       	push	r1
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	f6 2e       	mov	r15, r22
     6a0:	8a 01       	movw	r16, r20
     6a2:	be 01       	movw	r22, r28
     6a4:	6f 5f       	subi	r22, 0xFF	; 255
     6a6:	7f 4f       	sbci	r23, 0xFF	; 255
     6a8:	0e 94 09 03 	call	0x612	; 0x612 <mpu6050_readByte>
     6ac:	21 e0       	ldi	r18, 0x01	; 1
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <mpu6050_readBit+0x28>
     6b2:	22 0f       	add	r18, r18
     6b4:	33 1f       	adc	r19, r19
     6b6:	fa 94       	dec	r15
     6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <mpu6050_readBit+0x24>
     6ba:	99 81       	ldd	r25, Y+1	; 0x01
     6bc:	29 23       	and	r18, r25
     6be:	f8 01       	movw	r30, r16
     6c0:	20 83       	st	Z, r18
     6c2:	0f 90       	pop	r0
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	ff 90       	pop	r15
     6ce:	08 95       	ret

000006d0 <mpu6050_writeBits>:
     6d0:	ef 92       	push	r14
     6d2:	ff 92       	push	r15
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	1f 92       	push	r1
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
     6e2:	44 23       	and	r20, r20
     6e4:	89 f1       	breq	.+98     	; 0x748 <mpu6050_writeBits+0x78>
     6e6:	f2 2e       	mov	r15, r18
     6e8:	14 2f       	mov	r17, r20
     6ea:	06 2f       	mov	r16, r22
     6ec:	e8 2e       	mov	r14, r24
     6ee:	19 82       	std	Y+1, r1	; 0x01
     6f0:	be 01       	movw	r22, r28
     6f2:	6f 5f       	subi	r22, 0xFF	; 255
     6f4:	7f 4f       	sbci	r23, 0xFF	; 255
     6f6:	0e 94 09 03 	call	0x612	; 0x612 <mpu6050_readByte>
     6fa:	88 23       	and	r24, r24
     6fc:	29 f1       	breq	.+74     	; 0x748 <mpu6050_writeBits+0x78>
     6fe:	40 2f       	mov	r20, r16
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	41 1b       	sub	r20, r17
     704:	51 09       	sbc	r21, r1
     706:	4f 5f       	subi	r20, 0xFF	; 255
     708:	5f 4f       	sbci	r21, 0xFF	; 255
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	02 c0       	rjmp	.+4      	; 0x714 <mpu6050_writeBits+0x44>
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	1a 95       	dec	r17
     716:	e2 f7       	brpl	.-8      	; 0x710 <mpu6050_writeBits+0x40>
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	04 2e       	mov	r0, r20
     71c:	02 c0       	rjmp	.+4      	; 0x722 <mpu6050_writeBits+0x52>
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
     722:	0a 94       	dec	r0
     724:	e2 f7       	brpl	.-8      	; 0x71e <mpu6050_writeBits+0x4e>
     726:	2f 2d       	mov	r18, r15
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	02 c0       	rjmp	.+4      	; 0x730 <mpu6050_writeBits+0x60>
     72c:	22 0f       	add	r18, r18
     72e:	33 1f       	adc	r19, r19
     730:	4a 95       	dec	r20
     732:	e2 f7       	brpl	.-8      	; 0x72c <mpu6050_writeBits+0x5c>
     734:	68 2f       	mov	r22, r24
     736:	60 95       	com	r22
     738:	99 81       	ldd	r25, Y+1	; 0x01
     73a:	69 23       	and	r22, r25
     73c:	82 23       	and	r24, r18
     73e:	68 2b       	or	r22, r24
     740:	69 83       	std	Y+1, r22	; 0x01
     742:	8e 2d       	mov	r24, r14
     744:	0e 94 37 03 	call	0x66e	; 0x66e <mpu6050_writeByte>
     748:	0f 90       	pop	r0
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	08 95       	ret

00000758 <mpu6050_writeBit>:
     758:	ff 92       	push	r15
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	1f 92       	push	r1
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
     768:	18 2f       	mov	r17, r24
     76a:	06 2f       	mov	r16, r22
     76c:	f4 2e       	mov	r15, r20
     76e:	be 01       	movw	r22, r28
     770:	6f 5f       	subi	r22, 0xFF	; 255
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	0e 94 09 03 	call	0x612	; 0x612 <mpu6050_readByte>
     778:	ff 20       	and	r15, r15
     77a:	51 f0       	breq	.+20     	; 0x790 <mpu6050_writeBit+0x38>
     77c:	61 e0       	ldi	r22, 0x01	; 1
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	02 c0       	rjmp	.+4      	; 0x786 <mpu6050_writeBit+0x2e>
     782:	66 0f       	add	r22, r22
     784:	77 1f       	adc	r23, r23
     786:	0a 95       	dec	r16
     788:	e2 f7       	brpl	.-8      	; 0x782 <mpu6050_writeBit+0x2a>
     78a:	89 81       	ldd	r24, Y+1	; 0x01
     78c:	68 2b       	or	r22, r24
     78e:	0a c0       	rjmp	.+20     	; 0x7a4 <mpu6050_writeBit+0x4c>
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	02 c0       	rjmp	.+4      	; 0x79a <mpu6050_writeBit+0x42>
     796:	66 0f       	add	r22, r22
     798:	77 1f       	adc	r23, r23
     79a:	0a 95       	dec	r16
     79c:	e2 f7       	brpl	.-8      	; 0x796 <mpu6050_writeBit+0x3e>
     79e:	60 95       	com	r22
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	68 23       	and	r22, r24
     7a4:	69 83       	std	Y+1, r22	; 0x01
     7a6:	81 2f       	mov	r24, r17
     7a8:	0e 94 37 03 	call	0x66e	; 0x66e <mpu6050_writeByte>
     7ac:	0f 90       	pop	r0
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	1f 91       	pop	r17
     7b4:	0f 91       	pop	r16
     7b6:	ff 90       	pop	r15
     7b8:	08 95       	ret

000007ba <mpu6050_setSleepDisabled>:
     7ba:	40 e0       	ldi	r20, 0x00	; 0
     7bc:	66 e0       	ldi	r22, 0x06	; 6
     7be:	8b e6       	ldi	r24, 0x6B	; 107
     7c0:	0e 94 ac 03 	call	0x758	; 0x758 <mpu6050_writeBit>
     7c4:	08 95       	ret

000007c6 <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
     7c6:	0e 94 05 01 	call	0x20a	; 0x20a <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ca:	2a e1       	ldi	r18, 0x1A	; 26
     7cc:	2a 95       	dec	r18
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <mpu6050_init+0x6>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <mpu6050_init+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7d2:	8f ef       	ldi	r24, 0xFF	; 255
     7d4:	90 e7       	ldi	r25, 0x70	; 112
     7d6:	22 e0       	ldi	r18, 0x02	; 2
     7d8:	81 50       	subi	r24, 0x01	; 1
     7da:	90 40       	sbci	r25, 0x00	; 0
     7dc:	20 40       	sbci	r18, 0x00	; 0
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <mpu6050_init+0x12>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <mpu6050_init+0x1c>
     7e2:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
     7e4:	0e 94 dd 03 	call	0x7ba	; 0x7ba <mpu6050_setSleepDisabled>
     7e8:	8f e1       	ldi	r24, 0x1F	; 31
     7ea:	9e e4       	ldi	r25, 0x4E	; 78
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <mpu6050_init+0x26>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <mpu6050_init+0x2c>
     7f2:	00 00       	nop
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
     7f4:	21 e0       	ldi	r18, 0x01	; 1
     7f6:	43 e0       	ldi	r20, 0x03	; 3
     7f8:	62 e0       	ldi	r22, 0x02	; 2
     7fa:	8b e6       	ldi	r24, 0x6B	; 107
     7fc:	0e 94 68 03 	call	0x6d0	; 0x6d0 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
     800:	23 e0       	ldi	r18, 0x03	; 3
     802:	43 e0       	ldi	r20, 0x03	; 3
     804:	62 e0       	ldi	r22, 0x02	; 2
     806:	8a e1       	ldi	r24, 0x1A	; 26
     808:	0e 94 68 03 	call	0x6d0	; 0x6d0 <mpu6050_writeBits>
    //set sample rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
     80c:	64 e0       	ldi	r22, 0x04	; 4
     80e:	89 e1       	ldi	r24, 0x19	; 25
     810:	0e 94 37 03 	call	0x66e	; 0x66e <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
     814:	21 e0       	ldi	r18, 0x01	; 1
     816:	42 e0       	ldi	r20, 0x02	; 2
     818:	64 e0       	ldi	r22, 0x04	; 4
     81a:	8b e1       	ldi	r24, 0x1B	; 27
     81c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	42 e0       	ldi	r20, 0x02	; 2
     824:	64 e0       	ldi	r22, 0x04	; 4
     826:	8c e1       	ldi	r24, 0x1C	; 28
     828:	0e 94 68 03 	call	0x6d0	; 0x6d0 <mpu6050_writeBits>

	#if MPU6050_GETATTITUDE == 1
	MPU6050_TIMER0INIT
     82c:	85 b5       	in	r24, 0x25	; 37
     82e:	85 60       	ori	r24, 0x05	; 5
     830:	85 bd       	out	0x25, r24	; 37
     832:	ee e6       	ldi	r30, 0x6E	; 110
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	80 81       	ld	r24, Z
     838:	81 60       	ori	r24, 0x01	; 1
     83a:	80 83       	st	Z, r24
     83c:	08 95       	ret

0000083e <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     83e:	8f 92       	push	r8
     840:	9f 92       	push	r9
     842:	af 92       	push	r10
     844:	bf 92       	push	r11
     846:	cf 92       	push	r12
     848:	df 92       	push	r13
     84a:	ef 92       	push	r14
     84c:	ff 92       	push	r15
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	4c 01       	movw	r8, r24
     858:	5b 01       	movw	r10, r22
     85a:	6a 01       	movw	r12, r20
     85c:	e9 01       	movw	r28, r18
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
     85e:	4d e7       	ldi	r20, 0x7D	; 125
     860:	51 e0       	ldi	r21, 0x01	; 1
     862:	6e e0       	ldi	r22, 0x0E	; 14
     864:	8b e3       	ldi	r24, 0x3B	; 59
     866:	0e 94 bb 02 	call	0x576	; 0x576 <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     86a:	ed e7       	ldi	r30, 0x7D	; 125
     86c:	f1 e0       	ldi	r31, 0x01	; 1
     86e:	20 81       	ld	r18, Z
     870:	81 81       	ldd	r24, Z+1	; 0x01
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	92 2b       	or	r25, r18
     876:	d4 01       	movw	r26, r8
     878:	8d 93       	st	X+, r24
     87a:	9c 93       	st	X, r25
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     87c:	22 81       	ldd	r18, Z+2	; 0x02
     87e:	83 81       	ldd	r24, Z+3	; 0x03
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	92 2b       	or	r25, r18
     884:	d5 01       	movw	r26, r10
     886:	8d 93       	st	X+, r24
     888:	9c 93       	st	X, r25
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
     88a:	24 81       	ldd	r18, Z+4	; 0x04
     88c:	85 81       	ldd	r24, Z+5	; 0x05
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	92 2b       	or	r25, r18
     892:	d6 01       	movw	r26, r12
     894:	8d 93       	st	X+, r24
     896:	9c 93       	st	X, r25
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     898:	20 85       	ldd	r18, Z+8	; 0x08
     89a:	81 85       	ldd	r24, Z+9	; 0x09
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	92 2b       	or	r25, r18
     8a0:	99 83       	std	Y+1, r25	; 0x01
     8a2:	88 83       	st	Y, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     8a4:	22 85       	ldd	r18, Z+10	; 0x0a
     8a6:	83 85       	ldd	r24, Z+11	; 0x0b
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	92 2b       	or	r25, r18
     8ac:	d8 01       	movw	r26, r16
     8ae:	8d 93       	st	X+, r24
     8b0:	9c 93       	st	X, r25
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     8b2:	24 85       	ldd	r18, Z+12	; 0x0c
     8b4:	85 85       	ldd	r24, Z+13	; 0x0d
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	92 2b       	or	r25, r18
     8ba:	f7 01       	movw	r30, r14
     8bc:	91 83       	std	Z+1, r25	; 0x01
     8be:	80 83       	st	Z, r24
}
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	cf 90       	pop	r12
     8d0:	bf 90       	pop	r11
     8d2:	af 90       	pop	r10
     8d4:	9f 90       	pop	r9
     8d6:	8f 90       	pop	r8
     8d8:	08 95       	ret

000008da <mpu6050_getConvData>:

/*
 * get raw data converted to g and deg/sec values
 */
void mpu6050_getConvData(double* axg, double* ayg, double* azg, double* gxds, double* gyds, double* gzds) {
     8da:	2f 92       	push	r2
     8dc:	3f 92       	push	r3
     8de:	4f 92       	push	r4
     8e0:	5f 92       	push	r5
     8e2:	6f 92       	push	r6
     8e4:	7f 92       	push	r7
     8e6:	8f 92       	push	r8
     8e8:	9f 92       	push	r9
     8ea:	af 92       	push	r10
     8ec:	bf 92       	push	r11
     8ee:	cf 92       	push	r12
     8f0:	df 92       	push	r13
     8f2:	ef 92       	push	r14
     8f4:	ff 92       	push	r15
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
     902:	2c 97       	sbiw	r28, 0x0c	; 12
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
     90e:	3c 01       	movw	r6, r24
     910:	4b 01       	movw	r8, r22
     912:	5a 01       	movw	r10, r20
     914:	69 01       	movw	r12, r18
     916:	28 01       	movw	r4, r16
     918:	17 01       	movw	r2, r14
	int16_t ax = 0;
     91a:	1a 82       	std	Y+2, r1	; 0x02
     91c:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
     91e:	1c 82       	std	Y+4, r1	; 0x04
     920:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
     922:	1e 82       	std	Y+6, r1	; 0x06
     924:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
     926:	18 86       	std	Y+8, r1	; 0x08
     928:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
     92a:	1a 86       	std	Y+10, r1	; 0x0a
     92c:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
     92e:	1c 86       	std	Y+12, r1	; 0x0c
     930:	1b 86       	std	Y+11, r1	; 0x0b
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     932:	ce 01       	movw	r24, r28
     934:	0b 96       	adiw	r24, 0x0b	; 11
     936:	7c 01       	movw	r14, r24
     938:	8e 01       	movw	r16, r28
     93a:	07 5f       	subi	r16, 0xF7	; 247
     93c:	1f 4f       	sbci	r17, 0xFF	; 255
     93e:	9e 01       	movw	r18, r28
     940:	29 5f       	subi	r18, 0xF9	; 249
     942:	3f 4f       	sbci	r19, 0xFF	; 255
     944:	ae 01       	movw	r20, r28
     946:	4b 5f       	subi	r20, 0xFB	; 251
     948:	5f 4f       	sbci	r21, 0xFF	; 255
     94a:	be 01       	movw	r22, r28
     94c:	6d 5f       	subi	r22, 0xFD	; 253
     94e:	7f 4f       	sbci	r23, 0xFF	; 255
     950:	0a 97       	sbiw	r24, 0x0a	; 10
     952:	0e 94 1f 04 	call	0x83e	; 0x83e <mpu6050_getRawData>

	#if MPU6050_CALIBRATEDACCGYRO == 1
    *axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
     956:	69 81       	ldd	r22, Y+1	; 0x01
     958:	7a 81       	ldd	r23, Y+2	; 0x02
     95a:	07 2e       	mov	r0, r23
     95c:	00 0c       	add	r0, r0
     95e:	88 0b       	sbc	r24, r24
     960:	99 0b       	sbc	r25, r25
     962:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__floatsisf>
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	40 e8       	ldi	r20, 0x80	; 128
     96c:	58 e3       	ldi	r21, 0x38	; 56
     96e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     972:	f3 01       	movw	r30, r6
     974:	60 83       	st	Z, r22
     976:	71 83       	std	Z+1, r23	; 0x01
     978:	82 83       	std	Z+2, r24	; 0x02
     97a:	93 83       	std	Z+3, r25	; 0x03
    *ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
     97c:	6b 81       	ldd	r22, Y+3	; 0x03
     97e:	7c 81       	ldd	r23, Y+4	; 0x04
     980:	07 2e       	mov	r0, r23
     982:	00 0c       	add	r0, r0
     984:	88 0b       	sbc	r24, r24
     986:	99 0b       	sbc	r25, r25
     988:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__floatsisf>
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	40 e8       	ldi	r20, 0x80	; 128
     992:	58 e3       	ldi	r21, 0x38	; 56
     994:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     998:	f4 01       	movw	r30, r8
     99a:	60 83       	st	Z, r22
     99c:	71 83       	std	Z+1, r23	; 0x01
     99e:	82 83       	std	Z+2, r24	; 0x02
     9a0:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
     9a2:	6d 81       	ldd	r22, Y+5	; 0x05
     9a4:	7e 81       	ldd	r23, Y+6	; 0x06
     9a6:	07 2e       	mov	r0, r23
     9a8:	00 0c       	add	r0, r0
     9aa:	88 0b       	sbc	r24, r24
     9ac:	99 0b       	sbc	r25, r25
     9ae:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__floatsisf>
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	40 e8       	ldi	r20, 0x80	; 128
     9b8:	58 e3       	ldi	r21, 0x38	; 56
     9ba:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     9be:	f5 01       	movw	r30, r10
     9c0:	60 83       	st	Z, r22
     9c2:	71 83       	std	Z+1, r23	; 0x01
     9c4:	82 83       	std	Z+2, r24	; 0x02
     9c6:	93 83       	std	Z+3, r25	; 0x03
    *gxds = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN;
     9c8:	6f 81       	ldd	r22, Y+7	; 0x07
     9ca:	78 85       	ldd	r23, Y+8	; 0x08
     9cc:	66 5d       	subi	r22, 0xD6	; 214
     9ce:	7f 4f       	sbci	r23, 0xFF	; 255
     9d0:	07 2e       	mov	r0, r23
     9d2:	00 0c       	add	r0, r0
     9d4:	88 0b       	sbc	r24, r24
     9d6:	99 0b       	sbc	r25, r25
     9d8:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__floatsisf>
     9dc:	23 e3       	ldi	r18, 0x33	; 51
     9de:	33 e3       	ldi	r19, 0x33	; 51
     9e0:	43 e8       	ldi	r20, 0x83	; 131
     9e2:	51 e4       	ldi	r21, 0x41	; 65
     9e4:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divsf3>
     9e8:	f6 01       	movw	r30, r12
     9ea:	60 83       	st	Z, r22
     9ec:	71 83       	std	Z+1, r23	; 0x01
     9ee:	82 83       	std	Z+2, r24	; 0x02
     9f0:	93 83       	std	Z+3, r25	; 0x03
	*gyds = (double)(gy-MPU6050_GYOFFSET)/MPU6050_GYGAIN;
     9f2:	69 85       	ldd	r22, Y+9	; 0x09
     9f4:	7a 85       	ldd	r23, Y+10	; 0x0a
     9f6:	69 50       	subi	r22, 0x09	; 9
     9f8:	71 09       	sbc	r23, r1
     9fa:	07 2e       	mov	r0, r23
     9fc:	00 0c       	add	r0, r0
     9fe:	88 0b       	sbc	r24, r24
     a00:	99 0b       	sbc	r25, r25
     a02:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__floatsisf>
     a06:	23 e3       	ldi	r18, 0x33	; 51
     a08:	33 e3       	ldi	r19, 0x33	; 51
     a0a:	43 e8       	ldi	r20, 0x83	; 131
     a0c:	51 e4       	ldi	r21, 0x41	; 65
     a0e:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divsf3>
     a12:	f2 01       	movw	r30, r4
     a14:	60 83       	st	Z, r22
     a16:	71 83       	std	Z+1, r23	; 0x01
     a18:	82 83       	std	Z+2, r24	; 0x02
     a1a:	93 83       	std	Z+3, r25	; 0x03
	*gzds = (double)(gz-MPU6050_GZOFFSET)/MPU6050_GZGAIN;
     a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
     a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
     a20:	63 5e       	subi	r22, 0xE3	; 227
     a22:	7f 4f       	sbci	r23, 0xFF	; 255
     a24:	07 2e       	mov	r0, r23
     a26:	00 0c       	add	r0, r0
     a28:	88 0b       	sbc	r24, r24
     a2a:	99 0b       	sbc	r25, r25
     a2c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__floatsisf>
     a30:	23 e3       	ldi	r18, 0x33	; 51
     a32:	33 e3       	ldi	r19, 0x33	; 51
     a34:	43 e8       	ldi	r20, 0x83	; 131
     a36:	51 e4       	ldi	r21, 0x41	; 65
     a38:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divsf3>
     a3c:	f1 01       	movw	r30, r2
     a3e:	60 83       	st	Z, r22
     a40:	71 83       	std	Z+1, r23	; 0x01
     a42:	82 83       	std	Z+2, r24	; 0x02
     a44:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az)/MPU6050_AGAIN;
    *gxds = (double)(gx)/MPU6050_GGAIN;
	*gyds = (double)(gy)/MPU6050_GGAIN;
	*gzds = (double)(gz)/MPU6050_GGAIN;
	#endif
}
     a46:	2c 96       	adiw	r28, 0x0c	; 12
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	df 90       	pop	r13
     a60:	cf 90       	pop	r12
     a62:	bf 90       	pop	r11
     a64:	af 90       	pop	r10
     a66:	9f 90       	pop	r9
     a68:	8f 90       	pop	r8
     a6a:	7f 90       	pop	r7
     a6c:	6f 90       	pop	r6
     a6e:	5f 90       	pop	r5
     a70:	4f 90       	pop	r4
     a72:	3f 90       	pop	r3
     a74:	2f 90       	pop	r2
     a76:	08 95       	ret

00000a78 <mpu6050_mahonyUpdate>:
double gyroXds = 0.0f, gyroYds = 0.0f, gyroZds = 0.0f;
volatile float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;
/*
 * Mahony update function (for 6DOF)
 */
void mpu6050_mahonyUpdate(float gx, float gy, float gz, float ax, float ay, float az) {
     a78:	4f 92       	push	r4
     a7a:	5f 92       	push	r5
     a7c:	6f 92       	push	r6
     a7e:	7f 92       	push	r7
     a80:	8f 92       	push	r8
     a82:	9f 92       	push	r9
     a84:	af 92       	push	r10
     a86:	bf 92       	push	r11
     a88:	cf 92       	push	r12
     a8a:	df 92       	push	r13
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
     a9c:	a4 97       	sbiw	r28, 0x24	; 36
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	f8 94       	cli
     aa2:	de bf       	out	0x3e, r29	; 62
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	cd bf       	out	0x3d, r28	; 61
     aa8:	6d 87       	std	Y+13, r22	; 0x0d
     aaa:	7e 87       	std	Y+14, r23	; 0x0e
     aac:	8f 87       	std	Y+15, r24	; 0x0f
     aae:	98 8b       	std	Y+16, r25	; 0x10
     ab0:	29 8b       	std	Y+17, r18	; 0x11
     ab2:	3a 8b       	std	Y+18, r19	; 0x12
     ab4:	4b 8b       	std	Y+19, r20	; 0x13
     ab6:	5c 8b       	std	Y+20, r21	; 0x14
     ab8:	ed 8a       	std	Y+21, r14	; 0x15
     aba:	fe 8a       	std	Y+22, r15	; 0x16
     abc:	0f 8b       	std	Y+23, r16	; 0x17
     abe:	18 8f       	std	Y+24, r17	; 0x18
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	a9 01       	movw	r20, r18
     ac6:	c6 01       	movw	r24, r12
     ac8:	b5 01       	movw	r22, r10
     aca:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__cmpsf2>
     ace:	81 11       	cpse	r24, r1
     ad0:	17 c0       	rjmp	.+46     	; 0xb00 <mpu6050_mahonyUpdate+0x88>
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	a9 01       	movw	r20, r18
     ad8:	6f a9       	ldd	r22, Y+55	; 0x37
     ada:	78 ad       	ldd	r23, Y+56	; 0x38
     adc:	89 ad       	ldd	r24, Y+57	; 0x39
     ade:	9a ad       	ldd	r25, Y+58	; 0x3a
     ae0:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__cmpsf2>
     ae4:	81 11       	cpse	r24, r1
     ae6:	0c c0       	rjmp	.+24     	; 0xb00 <mpu6050_mahonyUpdate+0x88>
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	a9 01       	movw	r20, r18
     aee:	6b ad       	ldd	r22, Y+59	; 0x3b
     af0:	7c ad       	ldd	r23, Y+60	; 0x3c
     af2:	8d ad       	ldd	r24, Y+61	; 0x3d
     af4:	9e ad       	ldd	r25, Y+62	; 0x3e
     af6:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__cmpsf2>
     afa:	88 23       	and	r24, r24
     afc:	09 f4       	brne	.+2      	; 0xb00 <mpu6050_mahonyUpdate+0x88>
     afe:	1a c2       	rjmp	.+1076   	; 0xf34 <mpu6050_mahonyUpdate+0x4bc>

		// Normalise accelerometer measurement
		norm = sqrt(ax * ax + ay * ay + az * az);
     b00:	a6 01       	movw	r20, r12
     b02:	95 01       	movw	r18, r10
     b04:	c6 01       	movw	r24, r12
     b06:	b5 01       	movw	r22, r10
     b08:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     b0c:	2b 01       	movw	r4, r22
     b0e:	3c 01       	movw	r6, r24
     b10:	2f a9       	ldd	r18, Y+55	; 0x37
     b12:	38 ad       	ldd	r19, Y+56	; 0x38
     b14:	49 ad       	ldd	r20, Y+57	; 0x39
     b16:	5a ad       	ldd	r21, Y+58	; 0x3a
     b18:	ca 01       	movw	r24, r20
     b1a:	b9 01       	movw	r22, r18
     b1c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     b20:	69 83       	std	Y+1, r22	; 0x01
     b22:	7a 83       	std	Y+2, r23	; 0x02
     b24:	8b 83       	std	Y+3, r24	; 0x03
     b26:	9c 83       	std	Y+4, r25	; 0x04
     b28:	9b 01       	movw	r18, r22
     b2a:	ac 01       	movw	r20, r24
     b2c:	c3 01       	movw	r24, r6
     b2e:	b2 01       	movw	r22, r4
     b30:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
     b34:	6d 8f       	std	Y+29, r22	; 0x1d
     b36:	7e 8f       	std	Y+30, r23	; 0x1e
     b38:	8f 8f       	std	Y+31, r24	; 0x1f
     b3a:	98 a3       	std	Y+32, r25	; 0x20
     b3c:	2b ad       	ldd	r18, Y+59	; 0x3b
     b3e:	3c ad       	ldd	r19, Y+60	; 0x3c
     b40:	4d ad       	ldd	r20, Y+61	; 0x3d
     b42:	5e ad       	ldd	r21, Y+62	; 0x3e
     b44:	ca 01       	movw	r24, r20
     b46:	b9 01       	movw	r22, r18
     b48:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     b4c:	69 8f       	std	Y+25, r22	; 0x19
     b4e:	7a 8f       	std	Y+26, r23	; 0x1a
     b50:	8b 8f       	std	Y+27, r24	; 0x1b
     b52:	9c 8f       	std	Y+28, r25	; 0x1c
     b54:	29 81       	ldd	r18, Y+1	; 0x01
     b56:	3a 81       	ldd	r19, Y+2	; 0x02
     b58:	4b 81       	ldd	r20, Y+3	; 0x03
     b5a:	5c 81       	ldd	r21, Y+4	; 0x04
     b5c:	c3 01       	movw	r24, r6
     b5e:	b2 01       	movw	r22, r4
     b60:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
     b64:	2b 01       	movw	r4, r22
     b66:	3c 01       	movw	r6, r24
     b68:	29 8d       	ldd	r18, Y+25	; 0x19
     b6a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     b6c:	4b 8d       	ldd	r20, Y+27	; 0x1b
     b6e:	5c 8d       	ldd	r21, Y+28	; 0x1c
     b70:	c3 01       	movw	r24, r6
     b72:	b2 01       	movw	r22, r4
     b74:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
     b78:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <sqrt>
     b7c:	2b 01       	movw	r4, r22
     b7e:	3c 01       	movw	r6, r24
		ax /= norm;
     b80:	9b 01       	movw	r18, r22
     b82:	ac 01       	movw	r20, r24
     b84:	c6 01       	movw	r24, r12
     b86:	b5 01       	movw	r22, r10
     b88:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divsf3>
     b8c:	69 83       	std	Y+1, r22	; 0x01
     b8e:	7a 83       	std	Y+2, r23	; 0x02
     b90:	8b 83       	std	Y+3, r24	; 0x03
     b92:	9c 83       	std	Y+4, r25	; 0x04
		ay /= norm;
     b94:	a3 01       	movw	r20, r6
     b96:	92 01       	movw	r18, r4
     b98:	6f a9       	ldd	r22, Y+55	; 0x37
     b9a:	78 ad       	ldd	r23, Y+56	; 0x38
     b9c:	89 ad       	ldd	r24, Y+57	; 0x39
     b9e:	9a ad       	ldd	r25, Y+58	; 0x3a
     ba0:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divsf3>
     ba4:	6d 83       	std	Y+5, r22	; 0x05
     ba6:	7e 83       	std	Y+6, r23	; 0x06
     ba8:	8f 83       	std	Y+7, r24	; 0x07
     baa:	98 87       	std	Y+8, r25	; 0x08
		az /= norm;
     bac:	a3 01       	movw	r20, r6
     bae:	92 01       	movw	r18, r4
     bb0:	6b ad       	ldd	r22, Y+59	; 0x3b
     bb2:	7c ad       	ldd	r23, Y+60	; 0x3c
     bb4:	8d ad       	ldd	r24, Y+61	; 0x3d
     bb6:	9e ad       	ldd	r25, Y+62	; 0x3e
     bb8:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divsf3>
     bbc:	69 87       	std	Y+9, r22	; 0x09
     bbe:	7a 87       	std	Y+10, r23	; 0x0a
     bc0:	8b 87       	std	Y+11, r24	; 0x0b
     bc2:	9c 87       	std	Y+12, r25	; 0x0c

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
     bc4:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <q1>
     bc8:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <q1+0x1>
     bcc:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <q1+0x2>
     bd0:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <q1+0x3>
     bd4:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <q3>
     bd8:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <q3+0x1>
     bdc:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <q3+0x2>
     be0:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <q3+0x3>
     be4:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
     be8:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
     bec:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
     bf0:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
     bf4:	40 90 30 01 	lds	r4, 0x0130	; 0x800130 <q2>
     bf8:	50 90 31 01 	lds	r5, 0x0131	; 0x800131 <q2+0x1>
     bfc:	60 90 32 01 	lds	r6, 0x0132	; 0x800132 <q2+0x2>
     c00:	70 90 33 01 	lds	r7, 0x0133	; 0x800133 <q2+0x3>
     c04:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     c08:	6b 01       	movw	r12, r22
     c0a:	7c 01       	movw	r14, r24
     c0c:	a3 01       	movw	r20, r6
     c0e:	92 01       	movw	r18, r4
     c10:	c5 01       	movw	r24, r10
     c12:	b4 01       	movw	r22, r8
     c14:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     c18:	9b 01       	movw	r18, r22
     c1a:	ac 01       	movw	r20, r24
     c1c:	c7 01       	movw	r24, r14
     c1e:	b6 01       	movw	r22, r12
     c20:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__subsf3>
     c24:	69 8f       	std	Y+25, r22	; 0x19
     c26:	7a 8f       	std	Y+26, r23	; 0x1a
     c28:	8b 8f       	std	Y+27, r24	; 0x1b
     c2a:	9c 8f       	std	Y+28, r25	; 0x1c
		halfvy = q0 * q1 + q2 * q3;
     c2c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     c30:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     c34:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     c38:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     c3c:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <q1>
     c40:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <q1+0x1>
     c44:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <q1+0x2>
     c48:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <q1+0x3>
     c4c:	80 90 30 01 	lds	r8, 0x0130	; 0x800130 <q2>
     c50:	90 90 31 01 	lds	r9, 0x0131	; 0x800131 <q2+0x1>
     c54:	a0 90 32 01 	lds	r10, 0x0132	; 0x800132 <q2+0x2>
     c58:	b0 90 33 01 	lds	r11, 0x0133	; 0x800133 <q2+0x3>
     c5c:	40 90 2c 01 	lds	r4, 0x012C	; 0x80012c <q3>
     c60:	50 90 2d 01 	lds	r5, 0x012D	; 0x80012d <q3+0x1>
     c64:	60 90 2e 01 	lds	r6, 0x012E	; 0x80012e <q3+0x2>
     c68:	70 90 2f 01 	lds	r7, 0x012F	; 0x80012f <q3+0x3>
     c6c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     c70:	6b 01       	movw	r12, r22
     c72:	7c 01       	movw	r14, r24
     c74:	a3 01       	movw	r20, r6
     c76:	92 01       	movw	r18, r4
     c78:	c5 01       	movw	r24, r10
     c7a:	b4 01       	movw	r22, r8
     c7c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     c80:	9b 01       	movw	r18, r22
     c82:	ac 01       	movw	r20, r24
     c84:	c7 01       	movw	r24, r14
     c86:	b6 01       	movw	r22, r12
     c88:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
     c8c:	6d 8f       	std	Y+29, r22	; 0x1d
     c8e:	7e 8f       	std	Y+30, r23	; 0x1e
     c90:	8f 8f       	std	Y+31, r24	; 0x1f
     c92:	98 a3       	std	Y+32, r25	; 0x20
		halfvz = q0 * q0 - 0.5f + q3 * q3;
     c94:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     c98:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     c9c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     ca0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     ca4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     ca8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     cac:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
     cb0:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
     cb4:	80 90 2c 01 	lds	r8, 0x012C	; 0x80012c <q3>
     cb8:	90 90 2d 01 	lds	r9, 0x012D	; 0x80012d <q3+0x1>
     cbc:	a0 90 2e 01 	lds	r10, 0x012E	; 0x80012e <q3+0x2>
     cc0:	b0 90 2f 01 	lds	r11, 0x012F	; 0x80012f <q3+0x3>
     cc4:	40 90 2c 01 	lds	r4, 0x012C	; 0x80012c <q3>
     cc8:	50 90 2d 01 	lds	r5, 0x012D	; 0x80012d <q3+0x1>
     ccc:	60 90 2e 01 	lds	r6, 0x012E	; 0x80012e <q3+0x2>
     cd0:	70 90 2f 01 	lds	r7, 0x012F	; 0x80012f <q3+0x3>
     cd4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	5f e3       	ldi	r21, 0x3F	; 63
     ce0:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__subsf3>
     ce4:	6b 01       	movw	r12, r22
     ce6:	7c 01       	movw	r14, r24
     ce8:	a3 01       	movw	r20, r6
     cea:	92 01       	movw	r18, r4
     cec:	c5 01       	movw	r24, r10
     cee:	b4 01       	movw	r22, r8
     cf0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     cf4:	9b 01       	movw	r18, r22
     cf6:	ac 01       	movw	r20, r24
     cf8:	c7 01       	movw	r24, r14
     cfa:	b6 01       	movw	r22, r12
     cfc:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
     d00:	6b 01       	movw	r12, r22
     d02:	7c 01       	movw	r14, r24

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
     d04:	9b 01       	movw	r18, r22
     d06:	ac 01       	movw	r20, r24
     d08:	6d 81       	ldd	r22, Y+5	; 0x05
     d0a:	7e 81       	ldd	r23, Y+6	; 0x06
     d0c:	8f 81       	ldd	r24, Y+7	; 0x07
     d0e:	98 85       	ldd	r25, Y+8	; 0x08
     d10:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     d14:	4b 01       	movw	r8, r22
     d16:	5c 01       	movw	r10, r24
     d18:	2d 8d       	ldd	r18, Y+29	; 0x1d
     d1a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     d1c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     d1e:	58 a1       	ldd	r21, Y+32	; 0x20
     d20:	69 85       	ldd	r22, Y+9	; 0x09
     d22:	7a 85       	ldd	r23, Y+10	; 0x0a
     d24:	8b 85       	ldd	r24, Y+11	; 0x0b
     d26:	9c 85       	ldd	r25, Y+12	; 0x0c
     d28:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     d2c:	9b 01       	movw	r18, r22
     d2e:	ac 01       	movw	r20, r24
     d30:	c5 01       	movw	r24, r10
     d32:	b4 01       	movw	r22, r8
     d34:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__subsf3>
     d38:	69 a3       	std	Y+33, r22	; 0x21
     d3a:	7a a3       	std	Y+34, r23	; 0x22
     d3c:	8b a3       	std	Y+35, r24	; 0x23
     d3e:	9c a3       	std	Y+36, r25	; 0x24
		halfey = (az * halfvx - ax * halfvz);
     d40:	29 8d       	ldd	r18, Y+25	; 0x19
     d42:	3a 8d       	ldd	r19, Y+26	; 0x1a
     d44:	4b 8d       	ldd	r20, Y+27	; 0x1b
     d46:	5c 8d       	ldd	r21, Y+28	; 0x1c
     d48:	69 85       	ldd	r22, Y+9	; 0x09
     d4a:	7a 85       	ldd	r23, Y+10	; 0x0a
     d4c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d4e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d50:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     d54:	4b 01       	movw	r8, r22
     d56:	5c 01       	movw	r10, r24
     d58:	a7 01       	movw	r20, r14
     d5a:	96 01       	movw	r18, r12
     d5c:	69 81       	ldd	r22, Y+1	; 0x01
     d5e:	7a 81       	ldd	r23, Y+2	; 0x02
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	9c 81       	ldd	r25, Y+4	; 0x04
     d64:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     d68:	9b 01       	movw	r18, r22
     d6a:	ac 01       	movw	r20, r24
     d6c:	c5 01       	movw	r24, r10
     d6e:	b4 01       	movw	r22, r8
     d70:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__subsf3>
     d74:	2b 01       	movw	r4, r22
     d76:	3c 01       	movw	r6, r24
		halfez = (ax * halfvy - ay * halfvx);
     d78:	2d 8d       	ldd	r18, Y+29	; 0x1d
     d7a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     d7c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     d7e:	58 a1       	ldd	r21, Y+32	; 0x20
     d80:	69 81       	ldd	r22, Y+1	; 0x01
     d82:	7a 81       	ldd	r23, Y+2	; 0x02
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	9c 81       	ldd	r25, Y+4	; 0x04
     d88:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     d8c:	6b 01       	movw	r12, r22
     d8e:	7c 01       	movw	r14, r24
     d90:	29 8d       	ldd	r18, Y+25	; 0x19
     d92:	3a 8d       	ldd	r19, Y+26	; 0x1a
     d94:	4b 8d       	ldd	r20, Y+27	; 0x1b
     d96:	5c 8d       	ldd	r21, Y+28	; 0x1c
     d98:	6d 81       	ldd	r22, Y+5	; 0x05
     d9a:	7e 81       	ldd	r23, Y+6	; 0x06
     d9c:	8f 81       	ldd	r24, Y+7	; 0x07
     d9e:	98 85       	ldd	r25, Y+8	; 0x08
     da0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     da4:	9b 01       	movw	r18, r22
     da6:	ac 01       	movw	r20, r24
     da8:	c7 01       	movw	r24, r14
     daa:	b6 01       	movw	r22, r12
     dac:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__subsf3>
     db0:	4b 01       	movw	r8, r22
     db2:	5c 01       	movw	r10, r24

		// Compute and apply integral feedback if enabled
		if(mpu6050_mahonytwoKiDef > 0.0f) {
			integralFBx += mpu6050_mahonytwoKiDef * halfex * (1.0f / mpu6050_mahonysampleFreq);	// integral error scaled by Ki
     db4:	c0 90 10 01 	lds	r12, 0x0110	; 0x800110 <integralFBx>
     db8:	d0 90 11 01 	lds	r13, 0x0111	; 0x800111 <integralFBx+0x1>
     dbc:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <integralFBx+0x2>
     dc0:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <integralFBx+0x3>
     dc4:	2d ec       	ldi	r18, 0xCD	; 205
     dc6:	3c ec       	ldi	r19, 0xCC	; 204
     dc8:	4c e4       	ldi	r20, 0x4C	; 76
     dca:	5e e3       	ldi	r21, 0x3E	; 62
     dcc:	69 a1       	ldd	r22, Y+33	; 0x21
     dce:	7a a1       	ldd	r23, Y+34	; 0x22
     dd0:	8b a1       	ldd	r24, Y+35	; 0x23
     dd2:	9c a1       	ldd	r25, Y+36	; 0x24
     dd4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     dd8:	2a e8       	ldi	r18, 0x8A	; 138
     dda:	3b e4       	ldi	r19, 0x4B	; 75
     ddc:	46 e8       	ldi	r20, 0x86	; 134
     dde:	5c e3       	ldi	r21, 0x3C	; 60
     de0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     de4:	a7 01       	movw	r20, r14
     de6:	96 01       	movw	r18, r12
     de8:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
     dec:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <integralFBx>
     df0:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <integralFBx+0x1>
     df4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <integralFBx+0x2>
     df8:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <integralFBx+0x3>
			integralFBy += mpu6050_mahonytwoKiDef * halfey * (1.0f / mpu6050_mahonysampleFreq);
     dfc:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <integralFBy>
     e00:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <integralFBy+0x1>
     e04:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <integralFBy+0x2>
     e08:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <integralFBy+0x3>
     e0c:	2d ec       	ldi	r18, 0xCD	; 205
     e0e:	3c ec       	ldi	r19, 0xCC	; 204
     e10:	4c e4       	ldi	r20, 0x4C	; 76
     e12:	5e e3       	ldi	r21, 0x3E	; 62
     e14:	c3 01       	movw	r24, r6
     e16:	b2 01       	movw	r22, r4
     e18:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     e1c:	2a e8       	ldi	r18, 0x8A	; 138
     e1e:	3b e4       	ldi	r19, 0x4B	; 75
     e20:	46 e8       	ldi	r20, 0x86	; 134
     e22:	5c e3       	ldi	r21, 0x3C	; 60
     e24:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     e28:	a7 01       	movw	r20, r14
     e2a:	96 01       	movw	r18, r12
     e2c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
     e30:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <integralFBy>
     e34:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <integralFBy+0x1>
     e38:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <integralFBy+0x2>
     e3c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <integralFBy+0x3>
			integralFBz += mpu6050_mahonytwoKiDef * halfez * (1.0f / mpu6050_mahonysampleFreq);
     e40:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <__data_end>
     e44:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <__data_end+0x1>
     e48:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <__data_end+0x2>
     e4c:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <__data_end+0x3>
     e50:	2d ec       	ldi	r18, 0xCD	; 205
     e52:	3c ec       	ldi	r19, 0xCC	; 204
     e54:	4c e4       	ldi	r20, 0x4C	; 76
     e56:	5e e3       	ldi	r21, 0x3E	; 62
     e58:	c5 01       	movw	r24, r10
     e5a:	b4 01       	movw	r22, r8
     e5c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     e60:	2a e8       	ldi	r18, 0x8A	; 138
     e62:	3b e4       	ldi	r19, 0x4B	; 75
     e64:	46 e8       	ldi	r20, 0x86	; 134
     e66:	5c e3       	ldi	r21, 0x3C	; 60
     e68:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     e6c:	a7 01       	movw	r20, r14
     e6e:	96 01       	movw	r18, r12
     e70:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
     e74:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <__data_end>
     e78:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <__data_end+0x1>
     e7c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end+0x2>
     e80:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x3>
			gx += integralFBx;	// apply integral feedback
     e84:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <integralFBx>
     e88:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <integralFBx+0x1>
     e8c:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <integralFBx+0x2>
     e90:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <integralFBx+0x3>
     e94:	6d 85       	ldd	r22, Y+13	; 0x0d
     e96:	7e 85       	ldd	r23, Y+14	; 0x0e
     e98:	8f 85       	ldd	r24, Y+15	; 0x0f
     e9a:	98 89       	ldd	r25, Y+16	; 0x10
     e9c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
     ea0:	6d 83       	std	Y+5, r22	; 0x05
     ea2:	7e 83       	std	Y+6, r23	; 0x06
     ea4:	8f 83       	std	Y+7, r24	; 0x07
     ea6:	98 87       	std	Y+8, r25	; 0x08
			gy += integralFBy;
     ea8:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <integralFBy>
     eac:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <integralFBy+0x1>
     eb0:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <integralFBy+0x2>
     eb4:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <integralFBy+0x3>
     eb8:	69 89       	ldd	r22, Y+17	; 0x11
     eba:	7a 89       	ldd	r23, Y+18	; 0x12
     ebc:	8b 89       	ldd	r24, Y+19	; 0x13
     ebe:	9c 89       	ldd	r25, Y+20	; 0x14
     ec0:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
     ec4:	6b 01       	movw	r12, r22
     ec6:	7c 01       	movw	r14, r24
			gz += integralFBz;
     ec8:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
     ecc:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
     ed0:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__data_end+0x2>
     ed4:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__data_end+0x3>
     ed8:	6d 89       	ldd	r22, Y+21	; 0x15
     eda:	7e 89       	ldd	r23, Y+22	; 0x16
     edc:	8f 89       	ldd	r24, Y+23	; 0x17
     ede:	98 8d       	ldd	r25, Y+24	; 0x18
     ee0:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
     ee4:	69 87       	std	Y+9, r22	; 0x09
     ee6:	7a 87       	std	Y+10, r23	; 0x0a
     ee8:	8b 87       	std	Y+11, r24	; 0x0b
     eea:	9c 87       	std	Y+12, r25	; 0x0c
			integralFBy = 0.0f;
			integralFBz = 0.0f;
		}

		// Apply proportional feedback
		gx += mpu6050_mahonytwoKpDef * halfex;
     eec:	2d 81       	ldd	r18, Y+5	; 0x05
     eee:	3e 81       	ldd	r19, Y+6	; 0x06
     ef0:	4f 81       	ldd	r20, Y+7	; 0x07
     ef2:	58 85       	ldd	r21, Y+8	; 0x08
     ef4:	69 a1       	ldd	r22, Y+33	; 0x21
     ef6:	7a a1       	ldd	r23, Y+34	; 0x22
     ef8:	8b a1       	ldd	r24, Y+35	; 0x23
     efa:	9c a1       	ldd	r25, Y+36	; 0x24
     efc:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
     f00:	6d 87       	std	Y+13, r22	; 0x0d
     f02:	7e 87       	std	Y+14, r23	; 0x0e
     f04:	8f 87       	std	Y+15, r24	; 0x0f
     f06:	98 8b       	std	Y+16, r25	; 0x10
		gy += mpu6050_mahonytwoKpDef * halfey;
     f08:	a7 01       	movw	r20, r14
     f0a:	96 01       	movw	r18, r12
     f0c:	c3 01       	movw	r24, r6
     f0e:	b2 01       	movw	r22, r4
     f10:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
     f14:	69 8b       	std	Y+17, r22	; 0x11
     f16:	7a 8b       	std	Y+18, r23	; 0x12
     f18:	8b 8b       	std	Y+19, r24	; 0x13
     f1a:	9c 8b       	std	Y+20, r25	; 0x14
		gz += mpu6050_mahonytwoKpDef * halfez;
     f1c:	29 85       	ldd	r18, Y+9	; 0x09
     f1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     f20:	4b 85       	ldd	r20, Y+11	; 0x0b
     f22:	5c 85       	ldd	r21, Y+12	; 0x0c
     f24:	c5 01       	movw	r24, r10
     f26:	b4 01       	movw	r22, r8
     f28:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
     f2c:	6d 8b       	std	Y+21, r22	; 0x15
     f2e:	7e 8b       	std	Y+22, r23	; 0x16
     f30:	8f 8b       	std	Y+23, r24	; 0x17
     f32:	98 8f       	std	Y+24, r25	; 0x18
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));		// pre-multiply common factors
     f34:	2a e8       	ldi	r18, 0x8A	; 138
     f36:	3b e4       	ldi	r19, 0x4B	; 75
     f38:	46 e0       	ldi	r20, 0x06	; 6
     f3a:	5c e3       	ldi	r21, 0x3C	; 60
     f3c:	6d 85       	ldd	r22, Y+13	; 0x0d
     f3e:	7e 85       	ldd	r23, Y+14	; 0x0e
     f40:	8f 85       	ldd	r24, Y+15	; 0x0f
     f42:	98 89       	ldd	r25, Y+16	; 0x10
     f44:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     f48:	6d 83       	std	Y+5, r22	; 0x05
     f4a:	7e 83       	std	Y+6, r23	; 0x06
     f4c:	8f 83       	std	Y+7, r24	; 0x07
     f4e:	98 87       	std	Y+8, r25	; 0x08
	gy *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
     f50:	2a e8       	ldi	r18, 0x8A	; 138
     f52:	3b e4       	ldi	r19, 0x4B	; 75
     f54:	46 e0       	ldi	r20, 0x06	; 6
     f56:	5c e3       	ldi	r21, 0x3C	; 60
     f58:	69 89       	ldd	r22, Y+17	; 0x11
     f5a:	7a 89       	ldd	r23, Y+18	; 0x12
     f5c:	8b 89       	ldd	r24, Y+19	; 0x13
     f5e:	9c 89       	ldd	r25, Y+20	; 0x14
     f60:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     f64:	69 87       	std	Y+9, r22	; 0x09
     f66:	7a 87       	std	Y+10, r23	; 0x0a
     f68:	8b 87       	std	Y+11, r24	; 0x0b
     f6a:	9c 87       	std	Y+12, r25	; 0x0c
	gz *= (0.5f * (1.0f / mpu6050_mahonysampleFreq));
     f6c:	2a e8       	ldi	r18, 0x8A	; 138
     f6e:	3b e4       	ldi	r19, 0x4B	; 75
     f70:	46 e0       	ldi	r20, 0x06	; 6
     f72:	5c e3       	ldi	r21, 0x3C	; 60
     f74:	6d 89       	ldd	r22, Y+21	; 0x15
     f76:	7e 89       	ldd	r23, Y+22	; 0x16
     f78:	8f 89       	ldd	r24, Y+23	; 0x17
     f7a:	98 8d       	ldd	r25, Y+24	; 0x18
     f7c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     f80:	6d 87       	std	Y+13, r22	; 0x0d
     f82:	7e 87       	std	Y+14, r23	; 0x0e
     f84:	8f 87       	std	Y+15, r24	; 0x0f
     f86:	98 8b       	std	Y+16, r25	; 0x10
	qa = q0;
     f88:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f8c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f90:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     f94:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     f98:	89 8b       	std	Y+17, r24	; 0x11
     f9a:	9a 8b       	std	Y+18, r25	; 0x12
     f9c:	ab 8b       	std	Y+19, r26	; 0x13
     f9e:	bc 8b       	std	Y+20, r27	; 0x14
	qb = q1;
     fa0:	80 90 34 01 	lds	r8, 0x0134	; 0x800134 <q1>
     fa4:	90 90 35 01 	lds	r9, 0x0135	; 0x800135 <q1+0x1>
     fa8:	a0 90 36 01 	lds	r10, 0x0136	; 0x800136 <q1+0x2>
     fac:	b0 90 37 01 	lds	r11, 0x0137	; 0x800137 <q1+0x3>
	qc = q2;
     fb0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <q2>
     fb4:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <q2+0x1>
     fb8:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <q2+0x2>
     fbc:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <q2+0x3>
     fc0:	8d 8b       	std	Y+21, r24	; 0x15
     fc2:	9e 8b       	std	Y+22, r25	; 0x16
     fc4:	af 8b       	std	Y+23, r26	; 0x17
     fc6:	b8 8f       	std	Y+24, r27	; 0x18
	q0 += (-qb * gx - qc * gy - q3 * gz);
     fc8:	40 90 2c 01 	lds	r4, 0x012C	; 0x80012c <q3>
     fcc:	50 90 2d 01 	lds	r5, 0x012D	; 0x80012d <q3+0x1>
     fd0:	60 90 2e 01 	lds	r6, 0x012E	; 0x80012e <q3+0x2>
     fd4:	70 90 2f 01 	lds	r7, 0x012F	; 0x80012f <q3+0x3>
     fd8:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     fdc:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     fe0:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     fe4:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     fe8:	c5 01       	movw	r24, r10
     fea:	b4 01       	movw	r22, r8
     fec:	90 58       	subi	r25, 0x80	; 128
     fee:	2d 81       	ldd	r18, Y+5	; 0x05
     ff0:	3e 81       	ldd	r19, Y+6	; 0x06
     ff2:	4f 81       	ldd	r20, Y+7	; 0x07
     ff4:	58 85       	ldd	r21, Y+8	; 0x08
     ff6:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
     ffa:	69 83       	std	Y+1, r22	; 0x01
     ffc:	7a 83       	std	Y+2, r23	; 0x02
     ffe:	8b 83       	std	Y+3, r24	; 0x03
    1000:	9c 83       	std	Y+4, r25	; 0x04
    1002:	2d 89       	ldd	r18, Y+21	; 0x15
    1004:	3e 89       	ldd	r19, Y+22	; 0x16
    1006:	4f 89       	ldd	r20, Y+23	; 0x17
    1008:	58 8d       	ldd	r21, Y+24	; 0x18
    100a:	69 85       	ldd	r22, Y+9	; 0x09
    100c:	7a 85       	ldd	r23, Y+10	; 0x0a
    100e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1010:	9c 85       	ldd	r25, Y+12	; 0x0c
    1012:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    1016:	9b 01       	movw	r18, r22
    1018:	ac 01       	movw	r20, r24
    101a:	69 81       	ldd	r22, Y+1	; 0x01
    101c:	7a 81       	ldd	r23, Y+2	; 0x02
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__subsf3>
    1026:	69 83       	std	Y+1, r22	; 0x01
    1028:	7a 83       	std	Y+2, r23	; 0x02
    102a:	8b 83       	std	Y+3, r24	; 0x03
    102c:	9c 83       	std	Y+4, r25	; 0x04
    102e:	a3 01       	movw	r20, r6
    1030:	92 01       	movw	r18, r4
    1032:	6d 85       	ldd	r22, Y+13	; 0x0d
    1034:	7e 85       	ldd	r23, Y+14	; 0x0e
    1036:	8f 85       	ldd	r24, Y+15	; 0x0f
    1038:	98 89       	ldd	r25, Y+16	; 0x10
    103a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    103e:	9b 01       	movw	r18, r22
    1040:	ac 01       	movw	r20, r24
    1042:	69 81       	ldd	r22, Y+1	; 0x01
    1044:	7a 81       	ldd	r23, Y+2	; 0x02
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__subsf3>
    104e:	a7 01       	movw	r20, r14
    1050:	96 01       	movw	r18, r12
    1052:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1056:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    105a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    105e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1062:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	q1 += (qa * gx + qc * gz - q3 * gy);
    1066:	40 90 2c 01 	lds	r4, 0x012C	; 0x80012c <q3>
    106a:	50 90 2d 01 	lds	r5, 0x012D	; 0x80012d <q3+0x1>
    106e:	60 90 2e 01 	lds	r6, 0x012E	; 0x80012e <q3+0x2>
    1072:	70 90 2f 01 	lds	r7, 0x012F	; 0x80012f <q3+0x3>
    1076:	c0 90 34 01 	lds	r12, 0x0134	; 0x800134 <q1>
    107a:	d0 90 35 01 	lds	r13, 0x0135	; 0x800135 <q1+0x1>
    107e:	e0 90 36 01 	lds	r14, 0x0136	; 0x800136 <q1+0x2>
    1082:	f0 90 37 01 	lds	r15, 0x0137	; 0x800137 <q1+0x3>
    1086:	29 89       	ldd	r18, Y+17	; 0x11
    1088:	3a 89       	ldd	r19, Y+18	; 0x12
    108a:	4b 89       	ldd	r20, Y+19	; 0x13
    108c:	5c 89       	ldd	r21, Y+20	; 0x14
    108e:	6d 81       	ldd	r22, Y+5	; 0x05
    1090:	7e 81       	ldd	r23, Y+6	; 0x06
    1092:	8f 81       	ldd	r24, Y+7	; 0x07
    1094:	98 85       	ldd	r25, Y+8	; 0x08
    1096:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    109a:	69 83       	std	Y+1, r22	; 0x01
    109c:	7a 83       	std	Y+2, r23	; 0x02
    109e:	8b 83       	std	Y+3, r24	; 0x03
    10a0:	9c 83       	std	Y+4, r25	; 0x04
    10a2:	2d 89       	ldd	r18, Y+21	; 0x15
    10a4:	3e 89       	ldd	r19, Y+22	; 0x16
    10a6:	4f 89       	ldd	r20, Y+23	; 0x17
    10a8:	58 8d       	ldd	r21, Y+24	; 0x18
    10aa:	6d 85       	ldd	r22, Y+13	; 0x0d
    10ac:	7e 85       	ldd	r23, Y+14	; 0x0e
    10ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b0:	98 89       	ldd	r25, Y+16	; 0x10
    10b2:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    10b6:	9b 01       	movw	r18, r22
    10b8:	ac 01       	movw	r20, r24
    10ba:	69 81       	ldd	r22, Y+1	; 0x01
    10bc:	7a 81       	ldd	r23, Y+2	; 0x02
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	9c 81       	ldd	r25, Y+4	; 0x04
    10c2:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    10c6:	69 83       	std	Y+1, r22	; 0x01
    10c8:	7a 83       	std	Y+2, r23	; 0x02
    10ca:	8b 83       	std	Y+3, r24	; 0x03
    10cc:	9c 83       	std	Y+4, r25	; 0x04
    10ce:	a3 01       	movw	r20, r6
    10d0:	92 01       	movw	r18, r4
    10d2:	69 85       	ldd	r22, Y+9	; 0x09
    10d4:	7a 85       	ldd	r23, Y+10	; 0x0a
    10d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    10d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    10da:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    10de:	9b 01       	movw	r18, r22
    10e0:	ac 01       	movw	r20, r24
    10e2:	69 81       	ldd	r22, Y+1	; 0x01
    10e4:	7a 81       	ldd	r23, Y+2	; 0x02
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__subsf3>
    10ee:	a7 01       	movw	r20, r14
    10f0:	96 01       	movw	r18, r12
    10f2:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    10f6:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <q1>
    10fa:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <q1+0x1>
    10fe:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <q1+0x2>
    1102:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <q1+0x3>
	q2 += (qa * gy - qb * gz + q3 * gx);
    1106:	40 90 2c 01 	lds	r4, 0x012C	; 0x80012c <q3>
    110a:	50 90 2d 01 	lds	r5, 0x012D	; 0x80012d <q3+0x1>
    110e:	60 90 2e 01 	lds	r6, 0x012E	; 0x80012e <q3+0x2>
    1112:	70 90 2f 01 	lds	r7, 0x012F	; 0x80012f <q3+0x3>
    1116:	c0 90 30 01 	lds	r12, 0x0130	; 0x800130 <q2>
    111a:	d0 90 31 01 	lds	r13, 0x0131	; 0x800131 <q2+0x1>
    111e:	e0 90 32 01 	lds	r14, 0x0132	; 0x800132 <q2+0x2>
    1122:	f0 90 33 01 	lds	r15, 0x0133	; 0x800133 <q2+0x3>
    1126:	29 89       	ldd	r18, Y+17	; 0x11
    1128:	3a 89       	ldd	r19, Y+18	; 0x12
    112a:	4b 89       	ldd	r20, Y+19	; 0x13
    112c:	5c 89       	ldd	r21, Y+20	; 0x14
    112e:	69 85       	ldd	r22, Y+9	; 0x09
    1130:	7a 85       	ldd	r23, Y+10	; 0x0a
    1132:	8b 85       	ldd	r24, Y+11	; 0x0b
    1134:	9c 85       	ldd	r25, Y+12	; 0x0c
    1136:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    113a:	69 83       	std	Y+1, r22	; 0x01
    113c:	7a 83       	std	Y+2, r23	; 0x02
    113e:	8b 83       	std	Y+3, r24	; 0x03
    1140:	9c 83       	std	Y+4, r25	; 0x04
    1142:	a5 01       	movw	r20, r10
    1144:	94 01       	movw	r18, r8
    1146:	6d 85       	ldd	r22, Y+13	; 0x0d
    1148:	7e 85       	ldd	r23, Y+14	; 0x0e
    114a:	8f 85       	ldd	r24, Y+15	; 0x0f
    114c:	98 89       	ldd	r25, Y+16	; 0x10
    114e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    1152:	9b 01       	movw	r18, r22
    1154:	ac 01       	movw	r20, r24
    1156:	69 81       	ldd	r22, Y+1	; 0x01
    1158:	7a 81       	ldd	r23, Y+2	; 0x02
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	9c 81       	ldd	r25, Y+4	; 0x04
    115e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__subsf3>
    1162:	69 83       	std	Y+1, r22	; 0x01
    1164:	7a 83       	std	Y+2, r23	; 0x02
    1166:	8b 83       	std	Y+3, r24	; 0x03
    1168:	9c 83       	std	Y+4, r25	; 0x04
    116a:	a3 01       	movw	r20, r6
    116c:	92 01       	movw	r18, r4
    116e:	6d 81       	ldd	r22, Y+5	; 0x05
    1170:	7e 81       	ldd	r23, Y+6	; 0x06
    1172:	8f 81       	ldd	r24, Y+7	; 0x07
    1174:	98 85       	ldd	r25, Y+8	; 0x08
    1176:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    117a:	9b 01       	movw	r18, r22
    117c:	ac 01       	movw	r20, r24
    117e:	69 81       	ldd	r22, Y+1	; 0x01
    1180:	7a 81       	ldd	r23, Y+2	; 0x02
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    118a:	a7 01       	movw	r20, r14
    118c:	96 01       	movw	r18, r12
    118e:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1192:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <q2>
    1196:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <q2+0x1>
    119a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <q2+0x2>
    119e:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <q2+0x3>
	q3 += (qa * gz + qb * gy - qc * gx);
    11a2:	c0 90 2c 01 	lds	r12, 0x012C	; 0x80012c <q3>
    11a6:	d0 90 2d 01 	lds	r13, 0x012D	; 0x80012d <q3+0x1>
    11aa:	e0 90 2e 01 	lds	r14, 0x012E	; 0x80012e <q3+0x2>
    11ae:	f0 90 2f 01 	lds	r15, 0x012F	; 0x80012f <q3+0x3>
    11b2:	29 89       	ldd	r18, Y+17	; 0x11
    11b4:	3a 89       	ldd	r19, Y+18	; 0x12
    11b6:	4b 89       	ldd	r20, Y+19	; 0x13
    11b8:	5c 89       	ldd	r21, Y+20	; 0x14
    11ba:	6d 85       	ldd	r22, Y+13	; 0x0d
    11bc:	7e 85       	ldd	r23, Y+14	; 0x0e
    11be:	8f 85       	ldd	r24, Y+15	; 0x0f
    11c0:	98 89       	ldd	r25, Y+16	; 0x10
    11c2:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    11c6:	2b 01       	movw	r4, r22
    11c8:	3c 01       	movw	r6, r24
    11ca:	a5 01       	movw	r20, r10
    11cc:	94 01       	movw	r18, r8
    11ce:	69 85       	ldd	r22, Y+9	; 0x09
    11d0:	7a 85       	ldd	r23, Y+10	; 0x0a
    11d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    11d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    11d6:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    11da:	9b 01       	movw	r18, r22
    11dc:	ac 01       	movw	r20, r24
    11de:	c3 01       	movw	r24, r6
    11e0:	b2 01       	movw	r22, r4
    11e2:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    11e6:	4b 01       	movw	r8, r22
    11e8:	5c 01       	movw	r10, r24
    11ea:	2d 89       	ldd	r18, Y+21	; 0x15
    11ec:	3e 89       	ldd	r19, Y+22	; 0x16
    11ee:	4f 89       	ldd	r20, Y+23	; 0x17
    11f0:	58 8d       	ldd	r21, Y+24	; 0x18
    11f2:	6d 81       	ldd	r22, Y+5	; 0x05
    11f4:	7e 81       	ldd	r23, Y+6	; 0x06
    11f6:	8f 81       	ldd	r24, Y+7	; 0x07
    11f8:	98 85       	ldd	r25, Y+8	; 0x08
    11fa:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    11fe:	9b 01       	movw	r18, r22
    1200:	ac 01       	movw	r20, r24
    1202:	c5 01       	movw	r24, r10
    1204:	b4 01       	movw	r22, r8
    1206:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__subsf3>
    120a:	a7 01       	movw	r20, r14
    120c:	96 01       	movw	r18, r12
    120e:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1212:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <q3>
    1216:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <q3+0x1>
    121a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <q3+0x2>
    121e:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <q3+0x3>

	// Normalise quaternion
	norm = sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    1222:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
    1226:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
    122a:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
    122e:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
    1232:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
    1236:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
    123a:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
    123e:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
    1242:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <q1>
    1246:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <q1+0x1>
    124a:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <q1+0x2>
    124e:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <q1+0x3>
    1252:	8d 83       	std	Y+5, r24	; 0x05
    1254:	9e 83       	std	Y+6, r25	; 0x06
    1256:	af 83       	std	Y+7, r26	; 0x07
    1258:	b8 87       	std	Y+8, r27	; 0x08
    125a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <q1>
    125e:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <q1+0x1>
    1262:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <q1+0x2>
    1266:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <q1+0x3>
    126a:	89 87       	std	Y+9, r24	; 0x09
    126c:	9a 87       	std	Y+10, r25	; 0x0a
    126e:	ab 87       	std	Y+11, r26	; 0x0b
    1270:	bc 87       	std	Y+12, r27	; 0x0c
    1272:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <q2>
    1276:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <q2+0x1>
    127a:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <q2+0x2>
    127e:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <q2+0x3>
    1282:	8d 87       	std	Y+13, r24	; 0x0d
    1284:	9e 87       	std	Y+14, r25	; 0x0e
    1286:	af 87       	std	Y+15, r26	; 0x0f
    1288:	b8 8b       	std	Y+16, r27	; 0x10
    128a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <q2>
    128e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <q2+0x1>
    1292:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <q2+0x2>
    1296:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <q2+0x3>
    129a:	89 8b       	std	Y+17, r24	; 0x11
    129c:	9a 8b       	std	Y+18, r25	; 0x12
    129e:	ab 8b       	std	Y+19, r26	; 0x13
    12a0:	bc 8b       	std	Y+20, r27	; 0x14
    12a2:	40 90 2c 01 	lds	r4, 0x012C	; 0x80012c <q3>
    12a6:	50 90 2d 01 	lds	r5, 0x012D	; 0x80012d <q3+0x1>
    12aa:	60 90 2e 01 	lds	r6, 0x012E	; 0x80012e <q3+0x2>
    12ae:	70 90 2f 01 	lds	r7, 0x012F	; 0x80012f <q3+0x3>
    12b2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <q3>
    12b6:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <q3+0x1>
    12ba:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <q3+0x2>
    12be:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <q3+0x3>
    12c2:	8d 8b       	std	Y+21, r24	; 0x15
    12c4:	9e 8b       	std	Y+22, r25	; 0x16
    12c6:	af 8b       	std	Y+23, r26	; 0x17
    12c8:	b8 8f       	std	Y+24, r27	; 0x18
    12ca:	a5 01       	movw	r20, r10
    12cc:	94 01       	movw	r18, r8
    12ce:	c7 01       	movw	r24, r14
    12d0:	b6 01       	movw	r22, r12
    12d2:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    12d6:	69 83       	std	Y+1, r22	; 0x01
    12d8:	7a 83       	std	Y+2, r23	; 0x02
    12da:	8b 83       	std	Y+3, r24	; 0x03
    12dc:	9c 83       	std	Y+4, r25	; 0x04
    12de:	29 85       	ldd	r18, Y+9	; 0x09
    12e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    12e2:	4b 85       	ldd	r20, Y+11	; 0x0b
    12e4:	5c 85       	ldd	r21, Y+12	; 0x0c
    12e6:	6d 81       	ldd	r22, Y+5	; 0x05
    12e8:	7e 81       	ldd	r23, Y+6	; 0x06
    12ea:	8f 81       	ldd	r24, Y+7	; 0x07
    12ec:	98 85       	ldd	r25, Y+8	; 0x08
    12ee:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    12f2:	9b 01       	movw	r18, r22
    12f4:	ac 01       	movw	r20, r24
    12f6:	69 81       	ldd	r22, Y+1	; 0x01
    12f8:	7a 81       	ldd	r23, Y+2	; 0x02
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1302:	69 83       	std	Y+1, r22	; 0x01
    1304:	7a 83       	std	Y+2, r23	; 0x02
    1306:	8b 83       	std	Y+3, r24	; 0x03
    1308:	9c 83       	std	Y+4, r25	; 0x04
    130a:	29 89       	ldd	r18, Y+17	; 0x11
    130c:	3a 89       	ldd	r19, Y+18	; 0x12
    130e:	4b 89       	ldd	r20, Y+19	; 0x13
    1310:	5c 89       	ldd	r21, Y+20	; 0x14
    1312:	6d 85       	ldd	r22, Y+13	; 0x0d
    1314:	7e 85       	ldd	r23, Y+14	; 0x0e
    1316:	8f 85       	ldd	r24, Y+15	; 0x0f
    1318:	98 89       	ldd	r25, Y+16	; 0x10
    131a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    131e:	9b 01       	movw	r18, r22
    1320:	ac 01       	movw	r20, r24
    1322:	69 81       	ldd	r22, Y+1	; 0x01
    1324:	7a 81       	ldd	r23, Y+2	; 0x02
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    132e:	69 83       	std	Y+1, r22	; 0x01
    1330:	7a 83       	std	Y+2, r23	; 0x02
    1332:	8b 83       	std	Y+3, r24	; 0x03
    1334:	9c 83       	std	Y+4, r25	; 0x04
    1336:	a5 01       	movw	r20, r10
    1338:	94 01       	movw	r18, r8
    133a:	c7 01       	movw	r24, r14
    133c:	b6 01       	movw	r22, r12
    133e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    1342:	6b 01       	movw	r12, r22
    1344:	7c 01       	movw	r14, r24
    1346:	29 85       	ldd	r18, Y+9	; 0x09
    1348:	3a 85       	ldd	r19, Y+10	; 0x0a
    134a:	4b 85       	ldd	r20, Y+11	; 0x0b
    134c:	5c 85       	ldd	r21, Y+12	; 0x0c
    134e:	6d 81       	ldd	r22, Y+5	; 0x05
    1350:	7e 81       	ldd	r23, Y+6	; 0x06
    1352:	8f 81       	ldd	r24, Y+7	; 0x07
    1354:	98 85       	ldd	r25, Y+8	; 0x08
    1356:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    135a:	9b 01       	movw	r18, r22
    135c:	ac 01       	movw	r20, r24
    135e:	c7 01       	movw	r24, r14
    1360:	b6 01       	movw	r22, r12
    1362:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1366:	6b 01       	movw	r12, r22
    1368:	7c 01       	movw	r14, r24
    136a:	29 89       	ldd	r18, Y+17	; 0x11
    136c:	3a 89       	ldd	r19, Y+18	; 0x12
    136e:	4b 89       	ldd	r20, Y+19	; 0x13
    1370:	5c 89       	ldd	r21, Y+20	; 0x14
    1372:	6d 85       	ldd	r22, Y+13	; 0x0d
    1374:	7e 85       	ldd	r23, Y+14	; 0x0e
    1376:	8f 85       	ldd	r24, Y+15	; 0x0f
    1378:	98 89       	ldd	r25, Y+16	; 0x10
    137a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    137e:	9b 01       	movw	r18, r22
    1380:	ac 01       	movw	r20, r24
    1382:	c7 01       	movw	r24, r14
    1384:	b6 01       	movw	r22, r12
    1386:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    138a:	6b 01       	movw	r12, r22
    138c:	7c 01       	movw	r14, r24
    138e:	2d 89       	ldd	r18, Y+21	; 0x15
    1390:	3e 89       	ldd	r19, Y+22	; 0x16
    1392:	4f 89       	ldd	r20, Y+23	; 0x17
    1394:	58 8d       	ldd	r21, Y+24	; 0x18
    1396:	c3 01       	movw	r24, r6
    1398:	b2 01       	movw	r22, r4
    139a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    139e:	9b 01       	movw	r18, r22
    13a0:	ac 01       	movw	r20, r24
    13a2:	c7 01       	movw	r24, r14
    13a4:	b6 01       	movw	r22, r12
    13a6:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    13aa:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <sqrt>
    13ae:	6b 01       	movw	r12, r22
    13b0:	7c 01       	movw	r14, r24
	q0 /= norm;
    13b2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    13b6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    13ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    13be:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    13c2:	a7 01       	movw	r20, r14
    13c4:	96 01       	movw	r18, r12
    13c6:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divsf3>
    13ca:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    13ce:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    13d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    13d6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	q1 /= norm;
    13da:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <q1>
    13de:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <q1+0x1>
    13e2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <q1+0x2>
    13e6:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <q1+0x3>
    13ea:	a7 01       	movw	r20, r14
    13ec:	96 01       	movw	r18, r12
    13ee:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divsf3>
    13f2:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <q1>
    13f6:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <q1+0x1>
    13fa:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <q1+0x2>
    13fe:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <q1+0x3>
	q2 /= norm;
    1402:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <q2>
    1406:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <q2+0x1>
    140a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <q2+0x2>
    140e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <q2+0x3>
    1412:	a7 01       	movw	r20, r14
    1414:	96 01       	movw	r18, r12
    1416:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divsf3>
    141a:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <q2>
    141e:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <q2+0x1>
    1422:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <q2+0x2>
    1426:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <q2+0x3>
	q3 /= norm;
    142a:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <q3>
    142e:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <q3+0x1>
    1432:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <q3+0x2>
    1436:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <q3+0x3>
    143a:	a7 01       	movw	r20, r14
    143c:	96 01       	movw	r18, r12
    143e:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divsf3>
    1442:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <q3>
    1446:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <q3+0x1>
    144a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <q3+0x2>
    144e:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <q3+0x3>
}
    1452:	a4 96       	adiw	r28, 0x24	; 36
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	ff 90       	pop	r15
    1468:	ef 90       	pop	r14
    146a:	df 90       	pop	r13
    146c:	cf 90       	pop	r12
    146e:	bf 90       	pop	r11
    1470:	af 90       	pop	r10
    1472:	9f 90       	pop	r9
    1474:	8f 90       	pop	r8
    1476:	7f 90       	pop	r7
    1478:	6f 90       	pop	r6
    147a:	5f 90       	pop	r5
    147c:	4f 90       	pop	r4
    147e:	08 95       	ret

00001480 <mpu6050_updateQuaternion>:

/*
 * update quaternion
 */
void mpu6050_updateQuaternion() {
    1480:	4f 92       	push	r4
    1482:	5f 92       	push	r5
    1484:	6f 92       	push	r6
    1486:	7f 92       	push	r7
    1488:	af 92       	push	r10
    148a:	bf 92       	push	r11
    148c:	cf 92       	push	r12
    148e:	df 92       	push	r13
    1490:	ef 92       	push	r14
    1492:	ff 92       	push	r15
    1494:	0f 93       	push	r16
    1496:	1f 93       	push	r17
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	2b 97       	sbiw	r28, 0x0b	; 11
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
	double gyrs = 0;
	double gzrs = 0;

	//get raw data
	while(1) {
		mpu6050_readBit(MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DATA_RDY_BIT, (uint8_t *)buffer);
    14ac:	4d e7       	ldi	r20, 0x7D	; 125
    14ae:	51 e0       	ldi	r21, 0x01	; 1
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	8a e3       	ldi	r24, 0x3A	; 58
    14b4:	0e 94 47 03 	call	0x68e	; 0x68e <mpu6050_readBit>
		if(buffer[0])
    14b8:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <buffer>
    14bc:	81 11       	cpse	r24, r1
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <mpu6050_updateQuaternion+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14c0:	2a e1       	ldi	r18, 0x1A	; 26
    14c2:	2a 95       	dec	r18
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <mpu6050_updateQuaternion+0x42>
    14c6:	00 c0       	rjmp	.+0      	; 0x14c8 <mpu6050_updateQuaternion+0x48>
    14c8:	f1 cf       	rjmp	.-30     	; 0x14ac <mpu6050_updateQuaternion+0x2c>
			break;
		_delay_us(10);
	}

	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
    14ca:	4d e7       	ldi	r20, 0x7D	; 125
    14cc:	51 e0       	ldi	r21, 0x01	; 1
    14ce:	6e e0       	ldi	r22, 0x0E	; 14
    14d0:	8b e3       	ldi	r24, 0x3B	; 59
    14d2:	0e 94 bb 02 	call	0x576	; 0x576 <mpu6050_readBytes>
    ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    14d6:	ed e7       	ldi	r30, 0x7D	; 125
    14d8:	f1 e0       	ldi	r31, 0x01	; 1
    14da:	80 81       	ld	r24, Z
    14dc:	61 81       	ldd	r22, Z+1	; 0x01
    ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    14de:	02 81       	ldd	r16, Z+2	; 0x02
    14e0:	33 81       	ldd	r19, Z+3	; 0x03
    14e2:	39 87       	std	Y+9, r19	; 0x09
    az = (((int16_t)buffer[4]) << 8) | buffer[5];
    14e4:	14 81       	ldd	r17, Z+4	; 0x04
    14e6:	95 81       	ldd	r25, Z+5	; 0x05
    14e8:	9a 87       	std	Y+10, r25	; 0x0a
    gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    14ea:	60 84       	ldd	r6, Z+8	; 0x08
    14ec:	71 84       	ldd	r7, Z+9	; 0x09
    gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    14ee:	52 84       	ldd	r5, Z+10	; 0x0a
    14f0:	43 84       	ldd	r4, Z+11	; 0x0b
    gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    14f2:	e4 84       	ldd	r14, Z+12	; 0x0c
    14f4:	f5 84       	ldd	r15, Z+13	; 0x0d
	gyrs = (double)(gy)/MPU6050_GGAIN*0.01745329; //degree to radians
	gzrs = (double)(gz)/MPU6050_GGAIN*0.01745329; //degree to radians
	#endif

    //compute data
    mpu6050_mahonyUpdate(gxrs, gyrs, gzrs, axg, ayg, azg);
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	78 2b       	or	r23, r24
    14fa:	07 2e       	mov	r0, r23
    14fc:	00 0c       	add	r0, r0
    14fe:	88 0b       	sbc	r24, r24
    1500:	99 0b       	sbc	r25, r25
    1502:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__floatsisf>
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	58 e3       	ldi	r21, 0x38	; 56
    150e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    1512:	5b 01       	movw	r10, r22
    1514:	6c 01       	movw	r12, r24
    1516:	6f 2d       	mov	r22, r15
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	7e 29       	or	r23, r14
    151c:	63 5e       	subi	r22, 0xE3	; 227
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	07 2e       	mov	r0, r23
    1522:	00 0c       	add	r0, r0
    1524:	88 0b       	sbc	r24, r24
    1526:	99 0b       	sbc	r25, r25
    1528:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__floatsisf>
    152c:	23 e3       	ldi	r18, 0x33	; 51
    152e:	33 e3       	ldi	r19, 0x33	; 51
    1530:	43 e8       	ldi	r20, 0x83	; 131
    1532:	51 e4       	ldi	r21, 0x41	; 65
    1534:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divsf3>
    1538:	24 e3       	ldi	r18, 0x34	; 52
    153a:	3a ef       	ldi	r19, 0xFA	; 250
    153c:	4e e8       	ldi	r20, 0x8E	; 142
    153e:	5c e3       	ldi	r21, 0x3C	; 60
    1540:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    1544:	69 83       	std	Y+1, r22	; 0x01
    1546:	7a 83       	std	Y+2, r23	; 0x02
    1548:	8b 83       	std	Y+3, r24	; 0x03
    154a:	9c 83       	std	Y+4, r25	; 0x04
    154c:	64 2d       	mov	r22, r4
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	75 29       	or	r23, r5
    1552:	69 50       	subi	r22, 0x09	; 9
    1554:	71 09       	sbc	r23, r1
    1556:	07 2e       	mov	r0, r23
    1558:	00 0c       	add	r0, r0
    155a:	88 0b       	sbc	r24, r24
    155c:	99 0b       	sbc	r25, r25
    155e:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__floatsisf>
    1562:	23 e3       	ldi	r18, 0x33	; 51
    1564:	33 e3       	ldi	r19, 0x33	; 51
    1566:	43 e8       	ldi	r20, 0x83	; 131
    1568:	51 e4       	ldi	r21, 0x41	; 65
    156a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divsf3>
    156e:	24 e3       	ldi	r18, 0x34	; 52
    1570:	3a ef       	ldi	r19, 0xFA	; 250
    1572:	4e e8       	ldi	r20, 0x8E	; 142
    1574:	5c e3       	ldi	r21, 0x3C	; 60
    1576:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    157a:	6d 83       	std	Y+5, r22	; 0x05
    157c:	7e 83       	std	Y+6, r23	; 0x06
    157e:	8f 83       	std	Y+7, r24	; 0x07
    1580:	98 87       	std	Y+8, r25	; 0x08
    1582:	67 2d       	mov	r22, r7
    1584:	70 e0       	ldi	r23, 0x00	; 0
    1586:	76 29       	or	r23, r6
    1588:	66 5d       	subi	r22, 0xD6	; 214
    158a:	7f 4f       	sbci	r23, 0xFF	; 255
    158c:	07 2e       	mov	r0, r23
    158e:	00 0c       	add	r0, r0
    1590:	88 0b       	sbc	r24, r24
    1592:	99 0b       	sbc	r25, r25
    1594:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__floatsisf>
    1598:	23 e3       	ldi	r18, 0x33	; 51
    159a:	33 e3       	ldi	r19, 0x33	; 51
    159c:	43 e8       	ldi	r20, 0x83	; 131
    159e:	51 e4       	ldi	r21, 0x41	; 65
    15a0:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divsf3>
    15a4:	24 e3       	ldi	r18, 0x34	; 52
    15a6:	3a ef       	ldi	r19, 0xFA	; 250
    15a8:	4e e8       	ldi	r20, 0x8E	; 142
    15aa:	5c e3       	ldi	r21, 0x3C	; 60
    15ac:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    15b0:	2b 01       	movw	r4, r22
    15b2:	3c 01       	movw	r6, r24
    15b4:	2a 85       	ldd	r18, Y+10	; 0x0a
    15b6:	62 2f       	mov	r22, r18
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	71 2b       	or	r23, r17
    15bc:	07 2e       	mov	r0, r23
    15be:	00 0c       	add	r0, r0
    15c0:	88 0b       	sbc	r24, r24
    15c2:	99 0b       	sbc	r25, r25
    15c4:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__floatsisf>
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e8       	ldi	r20, 0x80	; 128
    15ce:	58 e3       	ldi	r21, 0x38	; 56
    15d0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    15d4:	9f 93       	push	r25
    15d6:	8f 93       	push	r24
    15d8:	7f 93       	push	r23
    15da:	6f 93       	push	r22
    15dc:	39 85       	ldd	r19, Y+9	; 0x09
    15de:	63 2f       	mov	r22, r19
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	cb 01       	movw	r24, r22
    15e4:	90 2b       	or	r25, r16
    15e6:	9b 87       	std	Y+11, r25	; 0x0b
    15e8:	8a 87       	std	Y+10, r24	; 0x0a
    15ea:	bc 01       	movw	r22, r24
    15ec:	99 0f       	add	r25, r25
    15ee:	88 0b       	sbc	r24, r24
    15f0:	99 0b       	sbc	r25, r25
    15f2:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__floatsisf>
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	40 e8       	ldi	r20, 0x80	; 128
    15fc:	58 e3       	ldi	r21, 0x38	; 56
    15fe:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    1602:	9f 93       	push	r25
    1604:	8f 93       	push	r24
    1606:	7f 93       	push	r23
    1608:	6f 93       	push	r22
    160a:	e9 80       	ldd	r14, Y+1	; 0x01
    160c:	fa 80       	ldd	r15, Y+2	; 0x02
    160e:	0b 81       	ldd	r16, Y+3	; 0x03
    1610:	1c 81       	ldd	r17, Y+4	; 0x04
    1612:	2d 81       	ldd	r18, Y+5	; 0x05
    1614:	3e 81       	ldd	r19, Y+6	; 0x06
    1616:	4f 81       	ldd	r20, Y+7	; 0x07
    1618:	58 85       	ldd	r21, Y+8	; 0x08
    161a:	c3 01       	movw	r24, r6
    161c:	b2 01       	movw	r22, r4
    161e:	0e 94 3c 05 	call	0xa78	; 0xa78 <mpu6050_mahonyUpdate>
}
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	2b 96       	adiw	r28, 0x0b	; 11
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	df 90       	pop	r13
    1646:	cf 90       	pop	r12
    1648:	bf 90       	pop	r11
    164a:	af 90       	pop	r10
    164c:	7f 90       	pop	r7
    164e:	6f 90       	pop	r6
    1650:	5f 90       	pop	r5
    1652:	4f 90       	pop	r4
    1654:	08 95       	ret

00001656 <__vector_16>:

/*
 * update timer for attitude
 */
ISR(TIMER0_OVF_vect) {
    1656:	1f 92       	push	r1
    1658:	0f 92       	push	r0
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	0f 92       	push	r0
    165e:	11 24       	eor	r1, r1
    1660:	ef 92       	push	r14
    1662:	ff 92       	push	r15
    1664:	0f 93       	push	r16
    1666:	1f 93       	push	r17
    1668:	2f 93       	push	r18
    166a:	3f 93       	push	r19
    166c:	4f 93       	push	r20
    166e:	5f 93       	push	r21
    1670:	6f 93       	push	r22
    1672:	7f 93       	push	r23
    1674:	8f 93       	push	r24
    1676:	9f 93       	push	r25
    1678:	af 93       	push	r26
    167a:	bf 93       	push	r27
    167c:	ef 93       	push	r30
    167e:	ff 93       	push	r31
	mpu6050_updateQuaternion();
    1680:	0e 94 40 0a 	call	0x1480	; 0x1480 <mpu6050_updateQuaternion>
	mpu6050_getConvData(&accelX, &accelY, &accelZ, &gyroXds, &gyroYds, &gyroZds);
    1684:	0f 2e       	mov	r0, r31
    1686:	f4 e1       	ldi	r31, 0x14	; 20
    1688:	ef 2e       	mov	r14, r31
    168a:	f1 e0       	ldi	r31, 0x01	; 1
    168c:	ff 2e       	mov	r15, r31
    168e:	f0 2d       	mov	r31, r0
    1690:	08 e1       	ldi	r16, 0x18	; 24
    1692:	11 e0       	ldi	r17, 0x01	; 1
    1694:	2c e1       	ldi	r18, 0x1C	; 28
    1696:	31 e0       	ldi	r19, 0x01	; 1
    1698:	40 e2       	ldi	r20, 0x20	; 32
    169a:	51 e0       	ldi	r21, 0x01	; 1
    169c:	64 e2       	ldi	r22, 0x24	; 36
    169e:	71 e0       	ldi	r23, 0x01	; 1
    16a0:	88 e2       	ldi	r24, 0x28	; 40
    16a2:	91 e0       	ldi	r25, 0x01	; 1
    16a4:	0e 94 6d 04 	call	0x8da	; 0x8da <mpu6050_getConvData>
}
    16a8:	ff 91       	pop	r31
    16aa:	ef 91       	pop	r30
    16ac:	bf 91       	pop	r27
    16ae:	af 91       	pop	r26
    16b0:	9f 91       	pop	r25
    16b2:	8f 91       	pop	r24
    16b4:	7f 91       	pop	r23
    16b6:	6f 91       	pop	r22
    16b8:	5f 91       	pop	r21
    16ba:	4f 91       	pop	r20
    16bc:	3f 91       	pop	r19
    16be:	2f 91       	pop	r18
    16c0:	1f 91       	pop	r17
    16c2:	0f 91       	pop	r16
    16c4:	ff 90       	pop	r15
    16c6:	ef 90       	pop	r14
    16c8:	0f 90       	pop	r0
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	0f 90       	pop	r0
    16ce:	1f 90       	pop	r1
    16d0:	18 95       	reti

000016d2 <mpu6050_getAnglesFromAccel>:

/*
	Gets angles calculated from acceleration
*/
void mpu6050_getAnglesFromAccel(double * rollA, double * pitchA){
    16d2:	4f 92       	push	r4
    16d4:	5f 92       	push	r5
    16d6:	6f 92       	push	r6
    16d8:	7f 92       	push	r7
    16da:	8f 92       	push	r8
    16dc:	9f 92       	push	r9
    16de:	af 92       	push	r10
    16e0:	bf 92       	push	r11
    16e2:	cf 92       	push	r12
    16e4:	df 92       	push	r13
    16e6:	ef 92       	push	r14
    16e8:	ff 92       	push	r15
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	5c 01       	movw	r10, r24
    16f0:	eb 01       	movw	r28, r22
	/*	reference
	*rollA = atan2f(ay, sqrt(square(ax) + square(az)));
	*pitchA = atan2f(ax, sqrt(square(ay) + square(az)));
	*/
	*rollA = atan2f(accelY, sqrt(square(accelX) + square(accelZ)));
    16f2:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <accelX>
    16f6:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <accelX+0x1>
    16fa:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <accelX+0x2>
    16fe:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <accelX+0x3>
    1702:	0e 94 ab 11 	call	0x2356	; 0x2356 <square>
    1706:	6b 01       	movw	r12, r22
    1708:	7c 01       	movw	r14, r24
    170a:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <accelZ>
    170e:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <accelZ+0x1>
    1712:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <accelZ+0x2>
    1716:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <accelZ+0x3>
    171a:	0e 94 ab 11 	call	0x2356	; 0x2356 <square>
    171e:	2b 01       	movw	r4, r22
    1720:	3c 01       	movw	r6, r24
    1722:	a3 01       	movw	r20, r6
    1724:	92 01       	movw	r18, r4
    1726:	c7 01       	movw	r24, r14
    1728:	b6 01       	movw	r22, r12
    172a:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    172e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <sqrt>
    1732:	9b 01       	movw	r18, r22
    1734:	ac 01       	movw	r20, r24
    1736:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <accelY>
    173a:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <accelY+0x1>
    173e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <accelY+0x2>
    1742:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <accelY+0x3>
    1746:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <atan2>
    174a:	f5 01       	movw	r30, r10
    174c:	60 83       	st	Z, r22
    174e:	71 83       	std	Z+1, r23	; 0x01
    1750:	82 83       	std	Z+2, r24	; 0x02
    1752:	93 83       	std	Z+3, r25	; 0x03
	*pitchA = atan2f(accelX, sqrt(square(accelY) + square(accelZ)));
    1754:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <accelY>
    1758:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <accelY+0x1>
    175c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <accelY+0x2>
    1760:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <accelY+0x3>
    1764:	0e 94 ab 11 	call	0x2356	; 0x2356 <square>
    1768:	6b 01       	movw	r12, r22
    176a:	7c 01       	movw	r14, r24
    176c:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <accelZ>
    1770:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <accelZ+0x1>
    1774:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <accelZ+0x2>
    1778:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <accelZ+0x3>
    177c:	0e 94 ab 11 	call	0x2356	; 0x2356 <square>
    1780:	4b 01       	movw	r8, r22
    1782:	5c 01       	movw	r10, r24
    1784:	a5 01       	movw	r20, r10
    1786:	94 01       	movw	r18, r8
    1788:	c7 01       	movw	r24, r14
    178a:	b6 01       	movw	r22, r12
    178c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1790:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <sqrt>
    1794:	9b 01       	movw	r18, r22
    1796:	ac 01       	movw	r20, r24
    1798:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <accelX>
    179c:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <accelX+0x1>
    17a0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <accelX+0x2>
    17a4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <accelX+0x3>
    17a8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <atan2>
    17ac:	68 83       	st	Y, r22
    17ae:	79 83       	std	Y+1, r23	; 0x01
    17b0:	8a 83       	std	Y+2, r24	; 0x02
    17b2:	9b 83       	std	Y+3, r25	; 0x03
}
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	ff 90       	pop	r15
    17ba:	ef 90       	pop	r14
    17bc:	df 90       	pop	r13
    17be:	cf 90       	pop	r12
    17c0:	bf 90       	pop	r11
    17c2:	af 90       	pop	r10
    17c4:	9f 90       	pop	r9
    17c6:	8f 90       	pop	r8
    17c8:	7f 90       	pop	r7
    17ca:	6f 90       	pop	r6
    17cc:	5f 90       	pop	r5
    17ce:	4f 90       	pop	r4
    17d0:	08 95       	ret

000017d2 <mpu6050_getQuaternion>:

/*
 * get quaternion
 */
void mpu6050_getQuaternion(double *qw, double *qx, double *qy, double *qz) {
    17d2:	cf 92       	push	r12
    17d4:	df 92       	push	r13
    17d6:	ef 92       	push	r14
    17d8:	ff 92       	push	r15
	*qw = q0;
    17da:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
    17de:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
    17e2:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
    17e6:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
    17ea:	fc 01       	movw	r30, r24
    17ec:	c0 82       	st	Z, r12
    17ee:	d1 82       	std	Z+1, r13	; 0x01
    17f0:	e2 82       	std	Z+2, r14	; 0x02
    17f2:	f3 82       	std	Z+3, r15	; 0x03
	*qx = q1;
    17f4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <q1>
    17f8:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <q1+0x1>
    17fc:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <q1+0x2>
    1800:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <q1+0x3>
    1804:	fb 01       	movw	r30, r22
    1806:	80 83       	st	Z, r24
    1808:	91 83       	std	Z+1, r25	; 0x01
    180a:	a2 83       	std	Z+2, r26	; 0x02
    180c:	b3 83       	std	Z+3, r27	; 0x03
	*qy = q2;
    180e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <q2>
    1812:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <q2+0x1>
    1816:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <q2+0x2>
    181a:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <q2+0x3>
    181e:	fa 01       	movw	r30, r20
    1820:	80 83       	st	Z, r24
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	a2 83       	std	Z+2, r26	; 0x02
    1826:	b3 83       	std	Z+3, r27	; 0x03
	*qz = q3;
    1828:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <q3>
    182c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <q3+0x1>
    1830:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <q3+0x2>
    1834:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <q3+0x3>
    1838:	f9 01       	movw	r30, r18
    183a:	80 83       	st	Z, r24
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	a2 83       	std	Z+2, r26	; 0x02
    1840:	b3 83       	std	Z+3, r27	; 0x03
}
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	df 90       	pop	r13
    1848:	cf 90       	pop	r12
    184a:	08 95       	ret

0000184c <mpu6050_getRollPitchYaw>:
 * aerospace sequence, to obtain sensor attitude:
 * 1. rotate around sensor Z plane by yaw
 * 2. rotate around sensor Y plane by pitch
 * 3. rotate around sensor X plane by roll
 */
void mpu6050_getRollPitchYaw(double *roll, double *pitch, double *yaw) {
    184c:	2f 92       	push	r2
    184e:	3f 92       	push	r3
    1850:	4f 92       	push	r4
    1852:	5f 92       	push	r5
    1854:	6f 92       	push	r6
    1856:	7f 92       	push	r7
    1858:	8f 92       	push	r8
    185a:	9f 92       	push	r9
    185c:	af 92       	push	r10
    185e:	bf 92       	push	r11
    1860:	cf 92       	push	r12
    1862:	df 92       	push	r13
    1864:	ef 92       	push	r14
    1866:	ff 92       	push	r15
    1868:	0f 93       	push	r16
    186a:	1f 93       	push	r17
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	62 97       	sbiw	r28, 0x12	; 18
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	1c 01       	movw	r2, r24
    1882:	8b 01       	movw	r16, r22
    1884:	5a 8b       	std	Y+18, r21	; 0x12
    1886:	49 8b       	std	Y+17, r20	; 0x11
	*yaw = atan2(2*q1*q2 - 2*q0*q3, 2*q0*q0 + 2*q1*q1 - 1);
    1888:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    188c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1890:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    1894:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    1898:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
    189c:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
    18a0:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
    18a4:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
    18a8:	c0 90 34 01 	lds	r12, 0x0134	; 0x800134 <q1>
    18ac:	d0 90 35 01 	lds	r13, 0x0135	; 0x800135 <q1+0x1>
    18b0:	e0 90 36 01 	lds	r14, 0x0136	; 0x800136 <q1+0x2>
    18b4:	f0 90 37 01 	lds	r15, 0x0137	; 0x800137 <q1+0x3>
    18b8:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <q1>
    18bc:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <q1+0x1>
    18c0:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <q1+0x2>
    18c4:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <q1+0x3>
    18c8:	2d 83       	std	Y+5, r18	; 0x05
    18ca:	3e 83       	std	Y+6, r19	; 0x06
    18cc:	4f 83       	std	Y+7, r20	; 0x07
    18ce:	58 87       	std	Y+8, r21	; 0x08
    18d0:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <q1>
    18d4:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <q1+0x1>
    18d8:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <q1+0x2>
    18dc:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <q1+0x3>
    18e0:	29 83       	std	Y+1, r18	; 0x01
    18e2:	3a 83       	std	Y+2, r19	; 0x02
    18e4:	4b 83       	std	Y+3, r20	; 0x03
    18e6:	5c 83       	std	Y+4, r21	; 0x04
    18e8:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <q2>
    18ec:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <q2+0x1>
    18f0:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <q2+0x2>
    18f4:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <q2+0x3>
    18f8:	29 87       	std	Y+9, r18	; 0x09
    18fa:	3a 87       	std	Y+10, r19	; 0x0a
    18fc:	4b 87       	std	Y+11, r20	; 0x0b
    18fe:	5c 87       	std	Y+12, r21	; 0x0c
    1900:	40 90 00 01 	lds	r4, 0x0100	; 0x800100 <__data_start>
    1904:	50 90 01 01 	lds	r5, 0x0101	; 0x800101 <__data_start+0x1>
    1908:	60 90 02 01 	lds	r6, 0x0102	; 0x800102 <__data_start+0x2>
    190c:	70 90 03 01 	lds	r7, 0x0103	; 0x800103 <__data_start+0x3>
    1910:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <q3>
    1914:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <q3+0x1>
    1918:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <q3+0x2>
    191c:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <q3+0x3>
    1920:	2d 87       	std	Y+13, r18	; 0x0d
    1922:	3e 87       	std	Y+14, r19	; 0x0e
    1924:	4f 87       	std	Y+15, r20	; 0x0f
    1926:	58 8b       	std	Y+16, r21	; 0x10
    1928:	9b 01       	movw	r18, r22
    192a:	ac 01       	movw	r20, r24
    192c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1930:	a5 01       	movw	r20, r10
    1932:	94 01       	movw	r18, r8
    1934:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    1938:	4b 01       	movw	r8, r22
    193a:	5c 01       	movw	r10, r24
    193c:	a7 01       	movw	r20, r14
    193e:	96 01       	movw	r18, r12
    1940:	c7 01       	movw	r24, r14
    1942:	b6 01       	movw	r22, r12
    1944:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1948:	2d 81       	ldd	r18, Y+5	; 0x05
    194a:	3e 81       	ldd	r19, Y+6	; 0x06
    194c:	4f 81       	ldd	r20, Y+7	; 0x07
    194e:	58 85       	ldd	r21, Y+8	; 0x08
    1950:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    1954:	9b 01       	movw	r18, r22
    1956:	ac 01       	movw	r20, r24
    1958:	c5 01       	movw	r24, r10
    195a:	b4 01       	movw	r22, r8
    195c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	40 e8       	ldi	r20, 0x80	; 128
    1966:	5f e3       	ldi	r21, 0x3F	; 63
    1968:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__subsf3>
    196c:	6b 01       	movw	r12, r22
    196e:	7c 01       	movw	r14, r24
    1970:	29 81       	ldd	r18, Y+1	; 0x01
    1972:	3a 81       	ldd	r19, Y+2	; 0x02
    1974:	4b 81       	ldd	r20, Y+3	; 0x03
    1976:	5c 81       	ldd	r21, Y+4	; 0x04
    1978:	ca 01       	movw	r24, r20
    197a:	b9 01       	movw	r22, r18
    197c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1980:	29 85       	ldd	r18, Y+9	; 0x09
    1982:	3a 85       	ldd	r19, Y+10	; 0x0a
    1984:	4b 85       	ldd	r20, Y+11	; 0x0b
    1986:	5c 85       	ldd	r21, Y+12	; 0x0c
    1988:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    198c:	4b 01       	movw	r8, r22
    198e:	5c 01       	movw	r10, r24
    1990:	a3 01       	movw	r20, r6
    1992:	92 01       	movw	r18, r4
    1994:	c3 01       	movw	r24, r6
    1996:	b2 01       	movw	r22, r4
    1998:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    199c:	2d 85       	ldd	r18, Y+13	; 0x0d
    199e:	3e 85       	ldd	r19, Y+14	; 0x0e
    19a0:	4f 85       	ldd	r20, Y+15	; 0x0f
    19a2:	58 89       	ldd	r21, Y+16	; 0x10
    19a4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    19a8:	9b 01       	movw	r18, r22
    19aa:	ac 01       	movw	r20, r24
    19ac:	c5 01       	movw	r24, r10
    19ae:	b4 01       	movw	r22, r8
    19b0:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__subsf3>
    19b4:	a7 01       	movw	r20, r14
    19b6:	96 01       	movw	r18, r12
    19b8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <atan2>
    19bc:	e9 89       	ldd	r30, Y+17	; 0x11
    19be:	fa 89       	ldd	r31, Y+18	; 0x12
    19c0:	60 83       	st	Z, r22
    19c2:	71 83       	std	Z+1, r23	; 0x01
    19c4:	82 83       	std	Z+2, r24	; 0x02
    19c6:	93 83       	std	Z+3, r25	; 0x03
	*pitch = -asin(2*q1*q3 + 2*q0*q2);
    19c8:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <q1>
    19cc:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <q1+0x1>
    19d0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <q1+0x2>
    19d4:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <q1+0x3>
    19d8:	80 90 2c 01 	lds	r8, 0x012C	; 0x80012c <q3>
    19dc:	90 90 2d 01 	lds	r9, 0x012D	; 0x80012d <q3+0x1>
    19e0:	a0 90 2e 01 	lds	r10, 0x012E	; 0x80012e <q3+0x2>
    19e4:	b0 90 2f 01 	lds	r11, 0x012F	; 0x80012f <q3+0x3>
    19e8:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
    19ec:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
    19f0:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
    19f4:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
    19f8:	40 90 30 01 	lds	r4, 0x0130	; 0x800130 <q2>
    19fc:	50 90 31 01 	lds	r5, 0x0131	; 0x800131 <q2+0x1>
    1a00:	60 90 32 01 	lds	r6, 0x0132	; 0x800132 <q2+0x2>
    1a04:	70 90 33 01 	lds	r7, 0x0133	; 0x800133 <q2+0x3>
    1a08:	9b 01       	movw	r18, r22
    1a0a:	ac 01       	movw	r20, r24
    1a0c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1a10:	a5 01       	movw	r20, r10
    1a12:	94 01       	movw	r18, r8
    1a14:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    1a18:	4b 01       	movw	r8, r22
    1a1a:	5c 01       	movw	r10, r24
    1a1c:	a7 01       	movw	r20, r14
    1a1e:	96 01       	movw	r18, r12
    1a20:	c7 01       	movw	r24, r14
    1a22:	b6 01       	movw	r22, r12
    1a24:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1a28:	a3 01       	movw	r20, r6
    1a2a:	92 01       	movw	r18, r4
    1a2c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    1a30:	9b 01       	movw	r18, r22
    1a32:	ac 01       	movw	r20, r24
    1a34:	c5 01       	movw	r24, r10
    1a36:	b4 01       	movw	r22, r8
    1a38:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1a3c:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <asin>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	b0 58       	subi	r27, 0x80	; 128
    1a46:	f8 01       	movw	r30, r16
    1a48:	80 83       	st	Z, r24
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	a2 83       	std	Z+2, r26	; 0x02
    1a4e:	b3 83       	std	Z+3, r27	; 0x03
	*roll = atan2(2*q2*q3 - 2*q0*q1, 2*q0*q0 + 2*q3*q3 - 1);
    1a50:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1a54:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1a58:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    1a5c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    1a60:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
    1a64:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
    1a68:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
    1a6c:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
    1a70:	c0 90 2c 01 	lds	r12, 0x012C	; 0x80012c <q3>
    1a74:	d0 90 2d 01 	lds	r13, 0x012D	; 0x80012d <q3+0x1>
    1a78:	e0 90 2e 01 	lds	r14, 0x012E	; 0x80012e <q3+0x2>
    1a7c:	f0 90 2f 01 	lds	r15, 0x012F	; 0x80012f <q3+0x3>
    1a80:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <q3>
    1a84:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <q3+0x1>
    1a88:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <q3+0x2>
    1a8c:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <q3+0x3>
    1a90:	2d 83       	std	Y+5, r18	; 0x05
    1a92:	3e 83       	std	Y+6, r19	; 0x06
    1a94:	4f 83       	std	Y+7, r20	; 0x07
    1a96:	58 87       	std	Y+8, r21	; 0x08
    1a98:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <q2>
    1a9c:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <q2+0x1>
    1aa0:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <q2+0x2>
    1aa4:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <q2+0x3>
    1aa8:	29 83       	std	Y+1, r18	; 0x01
    1aaa:	3a 83       	std	Y+2, r19	; 0x02
    1aac:	4b 83       	std	Y+3, r20	; 0x03
    1aae:	5c 83       	std	Y+4, r21	; 0x04
    1ab0:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <q3>
    1ab4:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <q3+0x1>
    1ab8:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <q3+0x2>
    1abc:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <q3+0x3>
    1ac0:	29 87       	std	Y+9, r18	; 0x09
    1ac2:	3a 87       	std	Y+10, r19	; 0x0a
    1ac4:	4b 87       	std	Y+11, r20	; 0x0b
    1ac6:	5c 87       	std	Y+12, r21	; 0x0c
    1ac8:	40 90 00 01 	lds	r4, 0x0100	; 0x800100 <__data_start>
    1acc:	50 90 01 01 	lds	r5, 0x0101	; 0x800101 <__data_start+0x1>
    1ad0:	60 90 02 01 	lds	r6, 0x0102	; 0x800102 <__data_start+0x2>
    1ad4:	70 90 03 01 	lds	r7, 0x0103	; 0x800103 <__data_start+0x3>
    1ad8:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <q1>
    1adc:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <q1+0x1>
    1ae0:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <q1+0x2>
    1ae4:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <q1+0x3>
    1ae8:	2d 87       	std	Y+13, r18	; 0x0d
    1aea:	3e 87       	std	Y+14, r19	; 0x0e
    1aec:	4f 87       	std	Y+15, r20	; 0x0f
    1aee:	58 8b       	std	Y+16, r21	; 0x10
    1af0:	9b 01       	movw	r18, r22
    1af2:	ac 01       	movw	r20, r24
    1af4:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1af8:	a5 01       	movw	r20, r10
    1afa:	94 01       	movw	r18, r8
    1afc:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    1b00:	4b 01       	movw	r8, r22
    1b02:	5c 01       	movw	r10, r24
    1b04:	a7 01       	movw	r20, r14
    1b06:	96 01       	movw	r18, r12
    1b08:	c7 01       	movw	r24, r14
    1b0a:	b6 01       	movw	r22, r12
    1b0c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1b10:	2d 81       	ldd	r18, Y+5	; 0x05
    1b12:	3e 81       	ldd	r19, Y+6	; 0x06
    1b14:	4f 81       	ldd	r20, Y+7	; 0x07
    1b16:	58 85       	ldd	r21, Y+8	; 0x08
    1b18:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    1b1c:	9b 01       	movw	r18, r22
    1b1e:	ac 01       	movw	r20, r24
    1b20:	c5 01       	movw	r24, r10
    1b22:	b4 01       	movw	r22, r8
    1b24:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e8       	ldi	r20, 0x80	; 128
    1b2e:	5f e3       	ldi	r21, 0x3F	; 63
    1b30:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__subsf3>
    1b34:	6b 01       	movw	r12, r22
    1b36:	7c 01       	movw	r14, r24
    1b38:	29 81       	ldd	r18, Y+1	; 0x01
    1b3a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b3c:	4b 81       	ldd	r20, Y+3	; 0x03
    1b3e:	5c 81       	ldd	r21, Y+4	; 0x04
    1b40:	ca 01       	movw	r24, r20
    1b42:	b9 01       	movw	r22, r18
    1b44:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1b48:	29 85       	ldd	r18, Y+9	; 0x09
    1b4a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b4c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b4e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b50:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    1b54:	4b 01       	movw	r8, r22
    1b56:	5c 01       	movw	r10, r24
    1b58:	a3 01       	movw	r20, r6
    1b5a:	92 01       	movw	r18, r4
    1b5c:	c3 01       	movw	r24, r6
    1b5e:	b2 01       	movw	r22, r4
    1b60:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__addsf3>
    1b64:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b66:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b68:	4f 85       	ldd	r20, Y+15	; 0x0f
    1b6a:	58 89       	ldd	r21, Y+16	; 0x10
    1b6c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    1b70:	9b 01       	movw	r18, r22
    1b72:	ac 01       	movw	r20, r24
    1b74:	c5 01       	movw	r24, r10
    1b76:	b4 01       	movw	r22, r8
    1b78:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__subsf3>
    1b7c:	a7 01       	movw	r20, r14
    1b7e:	96 01       	movw	r18, r12
    1b80:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <atan2>
    1b84:	f1 01       	movw	r30, r2
    1b86:	60 83       	st	Z, r22
    1b88:	71 83       	std	Z+1, r23	; 0x01
    1b8a:	82 83       	std	Z+2, r24	; 0x02
    1b8c:	93 83       	std	Z+3, r25	; 0x03
}
    1b8e:	62 96       	adiw	r28, 0x12	; 18
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	ff 90       	pop	r15
    1ba4:	ef 90       	pop	r14
    1ba6:	df 90       	pop	r13
    1ba8:	cf 90       	pop	r12
    1baa:	bf 90       	pop	r11
    1bac:	af 90       	pop	r10
    1bae:	9f 90       	pop	r9
    1bb0:	8f 90       	pop	r8
    1bb2:	7f 90       	pop	r7
    1bb4:	6f 90       	pop	r6
    1bb6:	5f 90       	pop	r5
    1bb8:	4f 90       	pop	r4
    1bba:	3f 90       	pop	r3
    1bbc:	2f 90       	pop	r2
    1bbe:	08 95       	ret

00001bc0 <__vector_18>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
    1bc0:	1f 92       	push	r1
    1bc2:	0f 92       	push	r0
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	0f 92       	push	r0
    1bc8:	11 24       	eor	r1, r1
    1bca:	2f 93       	push	r18
    1bcc:	8f 93       	push	r24
    1bce:	9f 93       	push	r25
    1bd0:	ef 93       	push	r30
    1bd2:	ff 93       	push	r31
    1bd4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1bd8:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1bdc:	88 71       	andi	r24, 0x18	; 24
    1bde:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <UART_RxHead>
    1be2:	ef 5f       	subi	r30, 0xFF	; 255
    1be4:	ef 71       	andi	r30, 0x1F	; 31
    1be6:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <UART_RxTail>
    1bea:	e9 17       	cp	r30, r25
    1bec:	39 f0       	breq	.+14     	; 0x1bfc <__vector_18+0x3c>
    1bee:	e0 93 3a 01 	sts	0x013A, r30	; 0x80013a <UART_RxHead>
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	e3 5c       	subi	r30, 0xC3	; 195
    1bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf8:	20 83       	st	Z, r18
    1bfa:	01 c0       	rjmp	.+2      	; 0x1bfe <__vector_18+0x3e>
    1bfc:	82 e0       	ldi	r24, 0x02	; 2
    1bfe:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <UART_LastRxError>
    1c02:	ff 91       	pop	r31
    1c04:	ef 91       	pop	r30
    1c06:	9f 91       	pop	r25
    1c08:	8f 91       	pop	r24
    1c0a:	2f 91       	pop	r18
    1c0c:	0f 90       	pop	r0
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	0f 90       	pop	r0
    1c12:	1f 90       	pop	r1
    1c14:	18 95       	reti

00001c16 <__vector_19>:
    1c16:	1f 92       	push	r1
    1c18:	0f 92       	push	r0
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	0f 92       	push	r0
    1c1e:	11 24       	eor	r1, r1
    1c20:	8f 93       	push	r24
    1c22:	9f 93       	push	r25
    1c24:	ef 93       	push	r30
    1c26:	ff 93       	push	r31
    1c28:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <UART_TxHead>
    1c2c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <UART_TxTail>
    1c30:	98 17       	cp	r25, r24
    1c32:	69 f0       	breq	.+26     	; 0x1c4e <__vector_19+0x38>
    1c34:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <UART_TxTail>
    1c38:	ef 5f       	subi	r30, 0xFF	; 255
    1c3a:	ef 71       	andi	r30, 0x1F	; 31
    1c3c:	e0 93 3b 01 	sts	0x013B, r30	; 0x80013b <UART_TxTail>
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	e3 5a       	subi	r30, 0xA3	; 163
    1c44:	fe 4f       	sbci	r31, 0xFE	; 254
    1c46:	80 81       	ld	r24, Z
    1c48:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1c4c:	05 c0       	rjmp	.+10     	; 0x1c58 <__vector_19+0x42>
    1c4e:	e1 ec       	ldi	r30, 0xC1	; 193
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	8f 7d       	andi	r24, 0xDF	; 223
    1c56:	80 83       	st	Z, r24
    1c58:	ff 91       	pop	r31
    1c5a:	ef 91       	pop	r30
    1c5c:	9f 91       	pop	r25
    1c5e:	8f 91       	pop	r24
    1c60:	0f 90       	pop	r0
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	0f 90       	pop	r0
    1c66:	1f 90       	pop	r1
    1c68:	18 95       	reti

00001c6a <uart_init>:
    1c6a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <UART_TxHead>
    1c6e:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <UART_TxTail>
    1c72:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <UART_RxHead>
    1c76:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <UART_RxTail>
    1c7a:	99 23       	and	r25, r25
    1c7c:	24 f4       	brge	.+8      	; 0x1c86 <uart_init+0x1c>
    1c7e:	22 e0       	ldi	r18, 0x02	; 2
    1c80:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1c84:	9f 77       	andi	r25, 0x7F	; 127
    1c86:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c8a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c8e:	88 e9       	ldi	r24, 0x98	; 152
    1c90:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1c94:	86 e0       	ldi	r24, 0x06	; 6
    1c96:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1c9a:	08 95       	ret

00001c9c <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1c9c:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <UART_TxHead>
    1ca0:	2f 5f       	subi	r18, 0xFF	; 255
    1ca2:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    1ca4:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <UART_TxTail>
    1ca8:	29 17       	cp	r18, r25
    1caa:	e1 f3       	breq	.-8      	; 0x1ca4 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    1cac:	e2 2f       	mov	r30, r18
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	e3 5a       	subi	r30, 0xA3	; 163
    1cb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb4:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    1cb6:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    1cba:	e1 ec       	ldi	r30, 0xC1	; 193
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	80 62       	ori	r24, 0x20	; 32
    1cc2:	80 83       	st	Z, r24
    1cc4:	08 95       	ret

00001cc6 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	ec 01       	movw	r28, r24
    while (*s) 
    1ccc:	88 81       	ld	r24, Y
    1cce:	88 23       	and	r24, r24
    1cd0:	31 f0       	breq	.+12     	; 0x1cde <uart_puts+0x18>
    1cd2:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
    1cd4:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    1cd8:	89 91       	ld	r24, Y+
    1cda:	81 11       	cpse	r24, r1
    1cdc:	fb cf       	rjmp	.-10     	; 0x1cd4 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	08 95       	ret

00001ce4 <__subsf3>:
    1ce4:	50 58       	subi	r21, 0x80	; 128

00001ce6 <__addsf3>:
    1ce6:	bb 27       	eor	r27, r27
    1ce8:	aa 27       	eor	r26, r26
    1cea:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__addsf3x>
    1cee:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__fp_round>
    1cf2:	0e 94 a8 10 	call	0x2150	; 0x2150 <__fp_pscA>
    1cf6:	38 f0       	brcs	.+14     	; 0x1d06 <__addsf3+0x20>
    1cf8:	0e 94 af 10 	call	0x215e	; 0x215e <__fp_pscB>
    1cfc:	20 f0       	brcs	.+8      	; 0x1d06 <__addsf3+0x20>
    1cfe:	39 f4       	brne	.+14     	; 0x1d0e <__addsf3+0x28>
    1d00:	9f 3f       	cpi	r25, 0xFF	; 255
    1d02:	19 f4       	brne	.+6      	; 0x1d0a <__addsf3+0x24>
    1d04:	26 f4       	brtc	.+8      	; 0x1d0e <__addsf3+0x28>
    1d06:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__fp_nan>
    1d0a:	0e f4       	brtc	.+2      	; 0x1d0e <__addsf3+0x28>
    1d0c:	e0 95       	com	r30
    1d0e:	e7 fb       	bst	r30, 7
    1d10:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__fp_inf>

00001d14 <__addsf3x>:
    1d14:	e9 2f       	mov	r30, r25
    1d16:	0e 94 c7 10 	call	0x218e	; 0x218e <__fp_split3>
    1d1a:	58 f3       	brcs	.-42     	; 0x1cf2 <__addsf3+0xc>
    1d1c:	ba 17       	cp	r27, r26
    1d1e:	62 07       	cpc	r22, r18
    1d20:	73 07       	cpc	r23, r19
    1d22:	84 07       	cpc	r24, r20
    1d24:	95 07       	cpc	r25, r21
    1d26:	20 f0       	brcs	.+8      	; 0x1d30 <__addsf3x+0x1c>
    1d28:	79 f4       	brne	.+30     	; 0x1d48 <__addsf3x+0x34>
    1d2a:	a6 f5       	brtc	.+104    	; 0x1d94 <__addsf3x+0x80>
    1d2c:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__fp_zero>
    1d30:	0e f4       	brtc	.+2      	; 0x1d34 <__addsf3x+0x20>
    1d32:	e0 95       	com	r30
    1d34:	0b 2e       	mov	r0, r27
    1d36:	ba 2f       	mov	r27, r26
    1d38:	a0 2d       	mov	r26, r0
    1d3a:	0b 01       	movw	r0, r22
    1d3c:	b9 01       	movw	r22, r18
    1d3e:	90 01       	movw	r18, r0
    1d40:	0c 01       	movw	r0, r24
    1d42:	ca 01       	movw	r24, r20
    1d44:	a0 01       	movw	r20, r0
    1d46:	11 24       	eor	r1, r1
    1d48:	ff 27       	eor	r31, r31
    1d4a:	59 1b       	sub	r21, r25
    1d4c:	99 f0       	breq	.+38     	; 0x1d74 <__addsf3x+0x60>
    1d4e:	59 3f       	cpi	r21, 0xF9	; 249
    1d50:	50 f4       	brcc	.+20     	; 0x1d66 <__addsf3x+0x52>
    1d52:	50 3e       	cpi	r21, 0xE0	; 224
    1d54:	68 f1       	brcs	.+90     	; 0x1db0 <__addsf3x+0x9c>
    1d56:	1a 16       	cp	r1, r26
    1d58:	f0 40       	sbci	r31, 0x00	; 0
    1d5a:	a2 2f       	mov	r26, r18
    1d5c:	23 2f       	mov	r18, r19
    1d5e:	34 2f       	mov	r19, r20
    1d60:	44 27       	eor	r20, r20
    1d62:	58 5f       	subi	r21, 0xF8	; 248
    1d64:	f3 cf       	rjmp	.-26     	; 0x1d4c <__addsf3x+0x38>
    1d66:	46 95       	lsr	r20
    1d68:	37 95       	ror	r19
    1d6a:	27 95       	ror	r18
    1d6c:	a7 95       	ror	r26
    1d6e:	f0 40       	sbci	r31, 0x00	; 0
    1d70:	53 95       	inc	r21
    1d72:	c9 f7       	brne	.-14     	; 0x1d66 <__addsf3x+0x52>
    1d74:	7e f4       	brtc	.+30     	; 0x1d94 <__addsf3x+0x80>
    1d76:	1f 16       	cp	r1, r31
    1d78:	ba 0b       	sbc	r27, r26
    1d7a:	62 0b       	sbc	r22, r18
    1d7c:	73 0b       	sbc	r23, r19
    1d7e:	84 0b       	sbc	r24, r20
    1d80:	ba f0       	brmi	.+46     	; 0x1db0 <__addsf3x+0x9c>
    1d82:	91 50       	subi	r25, 0x01	; 1
    1d84:	a1 f0       	breq	.+40     	; 0x1dae <__addsf3x+0x9a>
    1d86:	ff 0f       	add	r31, r31
    1d88:	bb 1f       	adc	r27, r27
    1d8a:	66 1f       	adc	r22, r22
    1d8c:	77 1f       	adc	r23, r23
    1d8e:	88 1f       	adc	r24, r24
    1d90:	c2 f7       	brpl	.-16     	; 0x1d82 <__addsf3x+0x6e>
    1d92:	0e c0       	rjmp	.+28     	; 0x1db0 <__addsf3x+0x9c>
    1d94:	ba 0f       	add	r27, r26
    1d96:	62 1f       	adc	r22, r18
    1d98:	73 1f       	adc	r23, r19
    1d9a:	84 1f       	adc	r24, r20
    1d9c:	48 f4       	brcc	.+18     	; 0x1db0 <__addsf3x+0x9c>
    1d9e:	87 95       	ror	r24
    1da0:	77 95       	ror	r23
    1da2:	67 95       	ror	r22
    1da4:	b7 95       	ror	r27
    1da6:	f7 95       	ror	r31
    1da8:	9e 3f       	cpi	r25, 0xFE	; 254
    1daa:	08 f0       	brcs	.+2      	; 0x1dae <__addsf3x+0x9a>
    1dac:	b0 cf       	rjmp	.-160    	; 0x1d0e <__addsf3+0x28>
    1dae:	93 95       	inc	r25
    1db0:	88 0f       	add	r24, r24
    1db2:	08 f0       	brcs	.+2      	; 0x1db6 <__addsf3x+0xa2>
    1db4:	99 27       	eor	r25, r25
    1db6:	ee 0f       	add	r30, r30
    1db8:	97 95       	ror	r25
    1dba:	87 95       	ror	r24
    1dbc:	08 95       	ret

00001dbe <asin>:
    1dbe:	9f 93       	push	r25
    1dc0:	9f 77       	andi	r25, 0x7F	; 127
    1dc2:	ee e3       	ldi	r30, 0x3E	; 62
    1dc4:	89 37       	cpi	r24, 0x79	; 121
    1dc6:	9e 07       	cpc	r25, r30
    1dc8:	28 f4       	brcc	.+10     	; 0x1dd4 <asin+0x16>
    1dca:	e8 e6       	ldi	r30, 0x68	; 104
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	0e 94 94 10 	call	0x2128	; 0x2128 <__fp_powsodd>
    1dd2:	0c c0       	rjmp	.+24     	; 0x1dec <asin+0x2e>
    1dd4:	0e 94 20 10 	call	0x2040	; 0x2040 <__fp_arccos>
    1dd8:	90 58       	subi	r25, 0x80	; 128
    1dda:	a2 ea       	ldi	r26, 0xA2	; 162
    1ddc:	2a ed       	ldi	r18, 0xDA	; 218
    1dde:	3f e0       	ldi	r19, 0x0F	; 15
    1de0:	49 ec       	ldi	r20, 0xC9	; 201
    1de2:	5f e3       	ldi	r21, 0x3F	; 63
    1de4:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__addsf3x>
    1de8:	0e 94 b6 10 	call	0x216c	; 0x216c <__fp_round>
    1dec:	0f 90       	pop	r0
    1dee:	07 fc       	sbrc	r0, 7
    1df0:	90 58       	subi	r25, 0x80	; 128
    1df2:	08 95       	ret
    1df4:	0e 94 a8 10 	call	0x2150	; 0x2150 <__fp_pscA>
    1df8:	60 f0       	brcs	.+24     	; 0x1e12 <asin+0x54>
    1dfa:	80 e8       	ldi	r24, 0x80	; 128
    1dfc:	91 e0       	ldi	r25, 0x01	; 1
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <asin+0x44>
    1e00:	9e ef       	ldi	r25, 0xFE	; 254
    1e02:	0e 94 af 10 	call	0x215e	; 0x215e <__fp_pscB>
    1e06:	28 f0       	brcs	.+10     	; 0x1e12 <asin+0x54>
    1e08:	40 e8       	ldi	r20, 0x80	; 128
    1e0a:	51 e0       	ldi	r21, 0x01	; 1
    1e0c:	71 f4       	brne	.+28     	; 0x1e2a <atan2+0x10>
    1e0e:	5e ef       	ldi	r21, 0xFE	; 254
    1e10:	0c c0       	rjmp	.+24     	; 0x1e2a <atan2+0x10>
    1e12:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__fp_nan>
    1e16:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__fp_zero>

00001e1a <atan2>:
    1e1a:	e9 2f       	mov	r30, r25
    1e1c:	e0 78       	andi	r30, 0x80	; 128
    1e1e:	0e 94 c7 10 	call	0x218e	; 0x218e <__fp_split3>
    1e22:	40 f3       	brcs	.-48     	; 0x1df4 <asin+0x36>
    1e24:	09 2e       	mov	r0, r25
    1e26:	05 2a       	or	r0, r21
    1e28:	b1 f3       	breq	.-20     	; 0x1e16 <asin+0x58>
    1e2a:	26 17       	cp	r18, r22
    1e2c:	37 07       	cpc	r19, r23
    1e2e:	48 07       	cpc	r20, r24
    1e30:	59 07       	cpc	r21, r25
    1e32:	38 f0       	brcs	.+14     	; 0x1e42 <atan2+0x28>
    1e34:	0e 2e       	mov	r0, r30
    1e36:	07 f8       	bld	r0, 7
    1e38:	e0 25       	eor	r30, r0
    1e3a:	69 f0       	breq	.+26     	; 0x1e56 <atan2+0x3c>
    1e3c:	e0 25       	eor	r30, r0
    1e3e:	e0 64       	ori	r30, 0x40	; 64
    1e40:	0a c0       	rjmp	.+20     	; 0x1e56 <atan2+0x3c>
    1e42:	ef 63       	ori	r30, 0x3F	; 63
    1e44:	07 f8       	bld	r0, 7
    1e46:	00 94       	com	r0
    1e48:	07 fa       	bst	r0, 7
    1e4a:	db 01       	movw	r26, r22
    1e4c:	b9 01       	movw	r22, r18
    1e4e:	9d 01       	movw	r18, r26
    1e50:	dc 01       	movw	r26, r24
    1e52:	ca 01       	movw	r24, r20
    1e54:	ad 01       	movw	r20, r26
    1e56:	ef 93       	push	r30
    1e58:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__divsf3_pse>
    1e5c:	0e 94 b6 10 	call	0x216c	; 0x216c <__fp_round>
    1e60:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <atan>
    1e64:	5f 91       	pop	r21
    1e66:	55 23       	and	r21, r21
    1e68:	39 f0       	breq	.+14     	; 0x1e78 <atan2+0x5e>
    1e6a:	2b ed       	ldi	r18, 0xDB	; 219
    1e6c:	3f e0       	ldi	r19, 0x0F	; 15
    1e6e:	49 e4       	ldi	r20, 0x49	; 73
    1e70:	50 fd       	sbrc	r21, 0
    1e72:	49 ec       	ldi	r20, 0xC9	; 201
    1e74:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <__addsf3>
    1e78:	08 95       	ret

00001e7a <atan>:
    1e7a:	df 93       	push	r29
    1e7c:	dd 27       	eor	r29, r29
    1e7e:	b9 2f       	mov	r27, r25
    1e80:	bf 77       	andi	r27, 0x7F	; 127
    1e82:	40 e8       	ldi	r20, 0x80	; 128
    1e84:	5f e3       	ldi	r21, 0x3F	; 63
    1e86:	16 16       	cp	r1, r22
    1e88:	17 06       	cpc	r1, r23
    1e8a:	48 07       	cpc	r20, r24
    1e8c:	5b 07       	cpc	r21, r27
    1e8e:	18 f4       	brcc	.+6      	; 0x1e96 <atan+0x1c>
    1e90:	d9 2f       	mov	r29, r25
    1e92:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <inverse>
    1e96:	9f 93       	push	r25
    1e98:	8f 93       	push	r24
    1e9a:	7f 93       	push	r23
    1e9c:	6f 93       	push	r22
    1e9e:	0e 94 ab 11 	call	0x2356	; 0x2356 <square>
    1ea2:	ec e7       	ldi	r30, 0x7C	; 124
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	0e 94 6d 10 	call	0x20da	; 0x20da <__fp_powser>
    1eaa:	0e 94 b6 10 	call	0x216c	; 0x216c <__fp_round>
    1eae:	2f 91       	pop	r18
    1eb0:	3f 91       	pop	r19
    1eb2:	4f 91       	pop	r20
    1eb4:	5f 91       	pop	r21
    1eb6:	0e 94 0b 11 	call	0x2216	; 0x2216 <__mulsf3x>
    1eba:	dd 23       	and	r29, r29
    1ebc:	51 f0       	breq	.+20     	; 0x1ed2 <atan+0x58>
    1ebe:	90 58       	subi	r25, 0x80	; 128
    1ec0:	a2 ea       	ldi	r26, 0xA2	; 162
    1ec2:	2a ed       	ldi	r18, 0xDA	; 218
    1ec4:	3f e0       	ldi	r19, 0x0F	; 15
    1ec6:	49 ec       	ldi	r20, 0xC9	; 201
    1ec8:	5f e3       	ldi	r21, 0x3F	; 63
    1eca:	d0 78       	andi	r29, 0x80	; 128
    1ecc:	5d 27       	eor	r21, r29
    1ece:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__addsf3x>
    1ed2:	df 91       	pop	r29
    1ed4:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__fp_round>

00001ed8 <__cmpsf2>:
    1ed8:	0e 94 40 10 	call	0x2080	; 0x2080 <__fp_cmp>
    1edc:	08 f4       	brcc	.+2      	; 0x1ee0 <__cmpsf2+0x8>
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	08 95       	ret

00001ee2 <__divsf3>:
    1ee2:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__divsf3x>
    1ee6:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__fp_round>
    1eea:	0e 94 af 10 	call	0x215e	; 0x215e <__fp_pscB>
    1eee:	58 f0       	brcs	.+22     	; 0x1f06 <__divsf3+0x24>
    1ef0:	0e 94 a8 10 	call	0x2150	; 0x2150 <__fp_pscA>
    1ef4:	40 f0       	brcs	.+16     	; 0x1f06 <__divsf3+0x24>
    1ef6:	29 f4       	brne	.+10     	; 0x1f02 <__divsf3+0x20>
    1ef8:	5f 3f       	cpi	r21, 0xFF	; 255
    1efa:	29 f0       	breq	.+10     	; 0x1f06 <__divsf3+0x24>
    1efc:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__fp_inf>
    1f00:	51 11       	cpse	r21, r1
    1f02:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__fp_szero>
    1f06:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__fp_nan>

00001f0a <__divsf3x>:
    1f0a:	0e 94 c7 10 	call	0x218e	; 0x218e <__fp_split3>
    1f0e:	68 f3       	brcs	.-38     	; 0x1eea <__divsf3+0x8>

00001f10 <__divsf3_pse>:
    1f10:	99 23       	and	r25, r25
    1f12:	b1 f3       	breq	.-20     	; 0x1f00 <__divsf3+0x1e>
    1f14:	55 23       	and	r21, r21
    1f16:	91 f3       	breq	.-28     	; 0x1efc <__divsf3+0x1a>
    1f18:	95 1b       	sub	r25, r21
    1f1a:	55 0b       	sbc	r21, r21
    1f1c:	bb 27       	eor	r27, r27
    1f1e:	aa 27       	eor	r26, r26
    1f20:	62 17       	cp	r22, r18
    1f22:	73 07       	cpc	r23, r19
    1f24:	84 07       	cpc	r24, r20
    1f26:	38 f0       	brcs	.+14     	; 0x1f36 <__divsf3_pse+0x26>
    1f28:	9f 5f       	subi	r25, 0xFF	; 255
    1f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2c:	22 0f       	add	r18, r18
    1f2e:	33 1f       	adc	r19, r19
    1f30:	44 1f       	adc	r20, r20
    1f32:	aa 1f       	adc	r26, r26
    1f34:	a9 f3       	breq	.-22     	; 0x1f20 <__divsf3_pse+0x10>
    1f36:	35 d0       	rcall	.+106    	; 0x1fa2 <__divsf3_pse+0x92>
    1f38:	0e 2e       	mov	r0, r30
    1f3a:	3a f0       	brmi	.+14     	; 0x1f4a <__divsf3_pse+0x3a>
    1f3c:	e0 e8       	ldi	r30, 0x80	; 128
    1f3e:	32 d0       	rcall	.+100    	; 0x1fa4 <__divsf3_pse+0x94>
    1f40:	91 50       	subi	r25, 0x01	; 1
    1f42:	50 40       	sbci	r21, 0x00	; 0
    1f44:	e6 95       	lsr	r30
    1f46:	00 1c       	adc	r0, r0
    1f48:	ca f7       	brpl	.-14     	; 0x1f3c <__divsf3_pse+0x2c>
    1f4a:	2b d0       	rcall	.+86     	; 0x1fa2 <__divsf3_pse+0x92>
    1f4c:	fe 2f       	mov	r31, r30
    1f4e:	29 d0       	rcall	.+82     	; 0x1fa2 <__divsf3_pse+0x92>
    1f50:	66 0f       	add	r22, r22
    1f52:	77 1f       	adc	r23, r23
    1f54:	88 1f       	adc	r24, r24
    1f56:	bb 1f       	adc	r27, r27
    1f58:	26 17       	cp	r18, r22
    1f5a:	37 07       	cpc	r19, r23
    1f5c:	48 07       	cpc	r20, r24
    1f5e:	ab 07       	cpc	r26, r27
    1f60:	b0 e8       	ldi	r27, 0x80	; 128
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <__divsf3_pse+0x56>
    1f64:	bb 0b       	sbc	r27, r27
    1f66:	80 2d       	mov	r24, r0
    1f68:	bf 01       	movw	r22, r30
    1f6a:	ff 27       	eor	r31, r31
    1f6c:	93 58       	subi	r25, 0x83	; 131
    1f6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f70:	3a f0       	brmi	.+14     	; 0x1f80 <__divsf3_pse+0x70>
    1f72:	9e 3f       	cpi	r25, 0xFE	; 254
    1f74:	51 05       	cpc	r21, r1
    1f76:	78 f0       	brcs	.+30     	; 0x1f96 <__divsf3_pse+0x86>
    1f78:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__fp_inf>
    1f7c:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__fp_szero>
    1f80:	5f 3f       	cpi	r21, 0xFF	; 255
    1f82:	e4 f3       	brlt	.-8      	; 0x1f7c <__divsf3_pse+0x6c>
    1f84:	98 3e       	cpi	r25, 0xE8	; 232
    1f86:	d4 f3       	brlt	.-12     	; 0x1f7c <__divsf3_pse+0x6c>
    1f88:	86 95       	lsr	r24
    1f8a:	77 95       	ror	r23
    1f8c:	67 95       	ror	r22
    1f8e:	b7 95       	ror	r27
    1f90:	f7 95       	ror	r31
    1f92:	9f 5f       	subi	r25, 0xFF	; 255
    1f94:	c9 f7       	brne	.-14     	; 0x1f88 <__divsf3_pse+0x78>
    1f96:	88 0f       	add	r24, r24
    1f98:	91 1d       	adc	r25, r1
    1f9a:	96 95       	lsr	r25
    1f9c:	87 95       	ror	r24
    1f9e:	97 f9       	bld	r25, 7
    1fa0:	08 95       	ret
    1fa2:	e1 e0       	ldi	r30, 0x01	; 1
    1fa4:	66 0f       	add	r22, r22
    1fa6:	77 1f       	adc	r23, r23
    1fa8:	88 1f       	adc	r24, r24
    1faa:	bb 1f       	adc	r27, r27
    1fac:	62 17       	cp	r22, r18
    1fae:	73 07       	cpc	r23, r19
    1fb0:	84 07       	cpc	r24, r20
    1fb2:	ba 07       	cpc	r27, r26
    1fb4:	20 f0       	brcs	.+8      	; 0x1fbe <__divsf3_pse+0xae>
    1fb6:	62 1b       	sub	r22, r18
    1fb8:	73 0b       	sbc	r23, r19
    1fba:	84 0b       	sbc	r24, r20
    1fbc:	ba 0b       	sbc	r27, r26
    1fbe:	ee 1f       	adc	r30, r30
    1fc0:	88 f7       	brcc	.-30     	; 0x1fa4 <__divsf3_pse+0x94>
    1fc2:	e0 95       	com	r30
    1fc4:	08 95       	ret

00001fc6 <__floatunsisf>:
    1fc6:	e8 94       	clt
    1fc8:	09 c0       	rjmp	.+18     	; 0x1fdc <__floatsisf+0x12>

00001fca <__floatsisf>:
    1fca:	97 fb       	bst	r25, 7
    1fcc:	3e f4       	brtc	.+14     	; 0x1fdc <__floatsisf+0x12>
    1fce:	90 95       	com	r25
    1fd0:	80 95       	com	r24
    1fd2:	70 95       	com	r23
    1fd4:	61 95       	neg	r22
    1fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fda:	9f 4f       	sbci	r25, 0xFF	; 255
    1fdc:	99 23       	and	r25, r25
    1fde:	a9 f0       	breq	.+42     	; 0x200a <__floatsisf+0x40>
    1fe0:	f9 2f       	mov	r31, r25
    1fe2:	96 e9       	ldi	r25, 0x96	; 150
    1fe4:	bb 27       	eor	r27, r27
    1fe6:	93 95       	inc	r25
    1fe8:	f6 95       	lsr	r31
    1fea:	87 95       	ror	r24
    1fec:	77 95       	ror	r23
    1fee:	67 95       	ror	r22
    1ff0:	b7 95       	ror	r27
    1ff2:	f1 11       	cpse	r31, r1
    1ff4:	f8 cf       	rjmp	.-16     	; 0x1fe6 <__floatsisf+0x1c>
    1ff6:	fa f4       	brpl	.+62     	; 0x2036 <__floatsisf+0x6c>
    1ff8:	bb 0f       	add	r27, r27
    1ffa:	11 f4       	brne	.+4      	; 0x2000 <__floatsisf+0x36>
    1ffc:	60 ff       	sbrs	r22, 0
    1ffe:	1b c0       	rjmp	.+54     	; 0x2036 <__floatsisf+0x6c>
    2000:	6f 5f       	subi	r22, 0xFF	; 255
    2002:	7f 4f       	sbci	r23, 0xFF	; 255
    2004:	8f 4f       	sbci	r24, 0xFF	; 255
    2006:	9f 4f       	sbci	r25, 0xFF	; 255
    2008:	16 c0       	rjmp	.+44     	; 0x2036 <__floatsisf+0x6c>
    200a:	88 23       	and	r24, r24
    200c:	11 f0       	breq	.+4      	; 0x2012 <__floatsisf+0x48>
    200e:	96 e9       	ldi	r25, 0x96	; 150
    2010:	11 c0       	rjmp	.+34     	; 0x2034 <__floatsisf+0x6a>
    2012:	77 23       	and	r23, r23
    2014:	21 f0       	breq	.+8      	; 0x201e <__floatsisf+0x54>
    2016:	9e e8       	ldi	r25, 0x8E	; 142
    2018:	87 2f       	mov	r24, r23
    201a:	76 2f       	mov	r23, r22
    201c:	05 c0       	rjmp	.+10     	; 0x2028 <__floatsisf+0x5e>
    201e:	66 23       	and	r22, r22
    2020:	71 f0       	breq	.+28     	; 0x203e <__floatsisf+0x74>
    2022:	96 e8       	ldi	r25, 0x86	; 134
    2024:	86 2f       	mov	r24, r22
    2026:	70 e0       	ldi	r23, 0x00	; 0
    2028:	60 e0       	ldi	r22, 0x00	; 0
    202a:	2a f0       	brmi	.+10     	; 0x2036 <__floatsisf+0x6c>
    202c:	9a 95       	dec	r25
    202e:	66 0f       	add	r22, r22
    2030:	77 1f       	adc	r23, r23
    2032:	88 1f       	adc	r24, r24
    2034:	da f7       	brpl	.-10     	; 0x202c <__floatsisf+0x62>
    2036:	88 0f       	add	r24, r24
    2038:	96 95       	lsr	r25
    203a:	87 95       	ror	r24
    203c:	97 f9       	bld	r25, 7
    203e:	08 95       	ret

00002040 <__fp_arccos>:
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	1f 93       	push	r17
    2046:	0f 93       	push	r16
    2048:	8b 01       	movw	r16, r22
    204a:	ec 01       	movw	r28, r24
    204c:	e9 ea       	ldi	r30, 0xA9	; 169
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	0e 94 6d 10 	call	0x20da	; 0x20da <__fp_powser>
    2054:	0e 94 b6 10 	call	0x216c	; 0x216c <__fp_round>
    2058:	98 01       	movw	r18, r16
    205a:	ae 01       	movw	r20, r28
    205c:	8b 01       	movw	r16, r22
    205e:	ec 01       	movw	r28, r24
    2060:	60 e0       	ldi	r22, 0x00	; 0
    2062:	70 e0       	ldi	r23, 0x00	; 0
    2064:	80 e8       	ldi	r24, 0x80	; 128
    2066:	9f e3       	ldi	r25, 0x3F	; 63
    2068:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__subsf3>
    206c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <sqrt>
    2070:	98 01       	movw	r18, r16
    2072:	ae 01       	movw	r20, r28
    2074:	0f 91       	pop	r16
    2076:	1f 91       	pop	r17
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <__mulsf3x>

00002080 <__fp_cmp>:
    2080:	99 0f       	add	r25, r25
    2082:	00 08       	sbc	r0, r0
    2084:	55 0f       	add	r21, r21
    2086:	aa 0b       	sbc	r26, r26
    2088:	e0 e8       	ldi	r30, 0x80	; 128
    208a:	fe ef       	ldi	r31, 0xFE	; 254
    208c:	16 16       	cp	r1, r22
    208e:	17 06       	cpc	r1, r23
    2090:	e8 07       	cpc	r30, r24
    2092:	f9 07       	cpc	r31, r25
    2094:	c0 f0       	brcs	.+48     	; 0x20c6 <__fp_cmp+0x46>
    2096:	12 16       	cp	r1, r18
    2098:	13 06       	cpc	r1, r19
    209a:	e4 07       	cpc	r30, r20
    209c:	f5 07       	cpc	r31, r21
    209e:	98 f0       	brcs	.+38     	; 0x20c6 <__fp_cmp+0x46>
    20a0:	62 1b       	sub	r22, r18
    20a2:	73 0b       	sbc	r23, r19
    20a4:	84 0b       	sbc	r24, r20
    20a6:	95 0b       	sbc	r25, r21
    20a8:	39 f4       	brne	.+14     	; 0x20b8 <__fp_cmp+0x38>
    20aa:	0a 26       	eor	r0, r26
    20ac:	61 f0       	breq	.+24     	; 0x20c6 <__fp_cmp+0x46>
    20ae:	23 2b       	or	r18, r19
    20b0:	24 2b       	or	r18, r20
    20b2:	25 2b       	or	r18, r21
    20b4:	21 f4       	brne	.+8      	; 0x20be <__fp_cmp+0x3e>
    20b6:	08 95       	ret
    20b8:	0a 26       	eor	r0, r26
    20ba:	09 f4       	brne	.+2      	; 0x20be <__fp_cmp+0x3e>
    20bc:	a1 40       	sbci	r26, 0x01	; 1
    20be:	a6 95       	lsr	r26
    20c0:	8f ef       	ldi	r24, 0xFF	; 255
    20c2:	81 1d       	adc	r24, r1
    20c4:	81 1d       	adc	r24, r1
    20c6:	08 95       	ret

000020c8 <__fp_inf>:
    20c8:	97 f9       	bld	r25, 7
    20ca:	9f 67       	ori	r25, 0x7F	; 127
    20cc:	80 e8       	ldi	r24, 0x80	; 128
    20ce:	70 e0       	ldi	r23, 0x00	; 0
    20d0:	60 e0       	ldi	r22, 0x00	; 0
    20d2:	08 95       	ret

000020d4 <__fp_nan>:
    20d4:	9f ef       	ldi	r25, 0xFF	; 255
    20d6:	80 ec       	ldi	r24, 0xC0	; 192
    20d8:	08 95       	ret

000020da <__fp_powser>:
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	1f 93       	push	r17
    20e0:	0f 93       	push	r16
    20e2:	ff 92       	push	r15
    20e4:	ef 92       	push	r14
    20e6:	df 92       	push	r13
    20e8:	7b 01       	movw	r14, r22
    20ea:	8c 01       	movw	r16, r24
    20ec:	68 94       	set
    20ee:	06 c0       	rjmp	.+12     	; 0x20fc <__fp_powser+0x22>
    20f0:	da 2e       	mov	r13, r26
    20f2:	ef 01       	movw	r28, r30
    20f4:	0e 94 0b 11 	call	0x2216	; 0x2216 <__mulsf3x>
    20f8:	fe 01       	movw	r30, r28
    20fa:	e8 94       	clt
    20fc:	a5 91       	lpm	r26, Z+
    20fe:	25 91       	lpm	r18, Z+
    2100:	35 91       	lpm	r19, Z+
    2102:	45 91       	lpm	r20, Z+
    2104:	55 91       	lpm	r21, Z+
    2106:	a6 f3       	brts	.-24     	; 0x20f0 <__fp_powser+0x16>
    2108:	ef 01       	movw	r28, r30
    210a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__addsf3x>
    210e:	fe 01       	movw	r30, r28
    2110:	97 01       	movw	r18, r14
    2112:	a8 01       	movw	r20, r16
    2114:	da 94       	dec	r13
    2116:	69 f7       	brne	.-38     	; 0x20f2 <__fp_powser+0x18>
    2118:	df 90       	pop	r13
    211a:	ef 90       	pop	r14
    211c:	ff 90       	pop	r15
    211e:	0f 91       	pop	r16
    2120:	1f 91       	pop	r17
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <__fp_powsodd>:
    2128:	9f 93       	push	r25
    212a:	8f 93       	push	r24
    212c:	7f 93       	push	r23
    212e:	6f 93       	push	r22
    2130:	ff 93       	push	r31
    2132:	ef 93       	push	r30
    2134:	9b 01       	movw	r18, r22
    2136:	ac 01       	movw	r20, r24
    2138:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__mulsf3>
    213c:	ef 91       	pop	r30
    213e:	ff 91       	pop	r31
    2140:	0e 94 6d 10 	call	0x20da	; 0x20da <__fp_powser>
    2144:	2f 91       	pop	r18
    2146:	3f 91       	pop	r19
    2148:	4f 91       	pop	r20
    214a:	5f 91       	pop	r21
    214c:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__mulsf3>

00002150 <__fp_pscA>:
    2150:	00 24       	eor	r0, r0
    2152:	0a 94       	dec	r0
    2154:	16 16       	cp	r1, r22
    2156:	17 06       	cpc	r1, r23
    2158:	18 06       	cpc	r1, r24
    215a:	09 06       	cpc	r0, r25
    215c:	08 95       	ret

0000215e <__fp_pscB>:
    215e:	00 24       	eor	r0, r0
    2160:	0a 94       	dec	r0
    2162:	12 16       	cp	r1, r18
    2164:	13 06       	cpc	r1, r19
    2166:	14 06       	cpc	r1, r20
    2168:	05 06       	cpc	r0, r21
    216a:	08 95       	ret

0000216c <__fp_round>:
    216c:	09 2e       	mov	r0, r25
    216e:	03 94       	inc	r0
    2170:	00 0c       	add	r0, r0
    2172:	11 f4       	brne	.+4      	; 0x2178 <__fp_round+0xc>
    2174:	88 23       	and	r24, r24
    2176:	52 f0       	brmi	.+20     	; 0x218c <__fp_round+0x20>
    2178:	bb 0f       	add	r27, r27
    217a:	40 f4       	brcc	.+16     	; 0x218c <__fp_round+0x20>
    217c:	bf 2b       	or	r27, r31
    217e:	11 f4       	brne	.+4      	; 0x2184 <__fp_round+0x18>
    2180:	60 ff       	sbrs	r22, 0
    2182:	04 c0       	rjmp	.+8      	; 0x218c <__fp_round+0x20>
    2184:	6f 5f       	subi	r22, 0xFF	; 255
    2186:	7f 4f       	sbci	r23, 0xFF	; 255
    2188:	8f 4f       	sbci	r24, 0xFF	; 255
    218a:	9f 4f       	sbci	r25, 0xFF	; 255
    218c:	08 95       	ret

0000218e <__fp_split3>:
    218e:	57 fd       	sbrc	r21, 7
    2190:	90 58       	subi	r25, 0x80	; 128
    2192:	44 0f       	add	r20, r20
    2194:	55 1f       	adc	r21, r21
    2196:	59 f0       	breq	.+22     	; 0x21ae <__fp_splitA+0x10>
    2198:	5f 3f       	cpi	r21, 0xFF	; 255
    219a:	71 f0       	breq	.+28     	; 0x21b8 <__fp_splitA+0x1a>
    219c:	47 95       	ror	r20

0000219e <__fp_splitA>:
    219e:	88 0f       	add	r24, r24
    21a0:	97 fb       	bst	r25, 7
    21a2:	99 1f       	adc	r25, r25
    21a4:	61 f0       	breq	.+24     	; 0x21be <__fp_splitA+0x20>
    21a6:	9f 3f       	cpi	r25, 0xFF	; 255
    21a8:	79 f0       	breq	.+30     	; 0x21c8 <__fp_splitA+0x2a>
    21aa:	87 95       	ror	r24
    21ac:	08 95       	ret
    21ae:	12 16       	cp	r1, r18
    21b0:	13 06       	cpc	r1, r19
    21b2:	14 06       	cpc	r1, r20
    21b4:	55 1f       	adc	r21, r21
    21b6:	f2 cf       	rjmp	.-28     	; 0x219c <__fp_split3+0xe>
    21b8:	46 95       	lsr	r20
    21ba:	f1 df       	rcall	.-30     	; 0x219e <__fp_splitA>
    21bc:	08 c0       	rjmp	.+16     	; 0x21ce <__fp_splitA+0x30>
    21be:	16 16       	cp	r1, r22
    21c0:	17 06       	cpc	r1, r23
    21c2:	18 06       	cpc	r1, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	f1 cf       	rjmp	.-30     	; 0x21aa <__fp_splitA+0xc>
    21c8:	86 95       	lsr	r24
    21ca:	71 05       	cpc	r23, r1
    21cc:	61 05       	cpc	r22, r1
    21ce:	08 94       	sec
    21d0:	08 95       	ret

000021d2 <__fp_zero>:
    21d2:	e8 94       	clt

000021d4 <__fp_szero>:
    21d4:	bb 27       	eor	r27, r27
    21d6:	66 27       	eor	r22, r22
    21d8:	77 27       	eor	r23, r23
    21da:	cb 01       	movw	r24, r22
    21dc:	97 f9       	bld	r25, 7
    21de:	08 95       	ret

000021e0 <inverse>:
    21e0:	9b 01       	movw	r18, r22
    21e2:	ac 01       	movw	r20, r24
    21e4:	60 e0       	ldi	r22, 0x00	; 0
    21e6:	70 e0       	ldi	r23, 0x00	; 0
    21e8:	80 e8       	ldi	r24, 0x80	; 128
    21ea:	9f e3       	ldi	r25, 0x3F	; 63
    21ec:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__divsf3>

000021f0 <__mulsf3>:
    21f0:	0e 94 0b 11 	call	0x2216	; 0x2216 <__mulsf3x>
    21f4:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__fp_round>
    21f8:	0e 94 a8 10 	call	0x2150	; 0x2150 <__fp_pscA>
    21fc:	38 f0       	brcs	.+14     	; 0x220c <__mulsf3+0x1c>
    21fe:	0e 94 af 10 	call	0x215e	; 0x215e <__fp_pscB>
    2202:	20 f0       	brcs	.+8      	; 0x220c <__mulsf3+0x1c>
    2204:	95 23       	and	r25, r21
    2206:	11 f0       	breq	.+4      	; 0x220c <__mulsf3+0x1c>
    2208:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__fp_inf>
    220c:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__fp_nan>
    2210:	11 24       	eor	r1, r1
    2212:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__fp_szero>

00002216 <__mulsf3x>:
    2216:	0e 94 c7 10 	call	0x218e	; 0x218e <__fp_split3>
    221a:	70 f3       	brcs	.-36     	; 0x21f8 <__mulsf3+0x8>

0000221c <__mulsf3_pse>:
    221c:	95 9f       	mul	r25, r21
    221e:	c1 f3       	breq	.-16     	; 0x2210 <__mulsf3+0x20>
    2220:	95 0f       	add	r25, r21
    2222:	50 e0       	ldi	r21, 0x00	; 0
    2224:	55 1f       	adc	r21, r21
    2226:	62 9f       	mul	r22, r18
    2228:	f0 01       	movw	r30, r0
    222a:	72 9f       	mul	r23, r18
    222c:	bb 27       	eor	r27, r27
    222e:	f0 0d       	add	r31, r0
    2230:	b1 1d       	adc	r27, r1
    2232:	63 9f       	mul	r22, r19
    2234:	aa 27       	eor	r26, r26
    2236:	f0 0d       	add	r31, r0
    2238:	b1 1d       	adc	r27, r1
    223a:	aa 1f       	adc	r26, r26
    223c:	64 9f       	mul	r22, r20
    223e:	66 27       	eor	r22, r22
    2240:	b0 0d       	add	r27, r0
    2242:	a1 1d       	adc	r26, r1
    2244:	66 1f       	adc	r22, r22
    2246:	82 9f       	mul	r24, r18
    2248:	22 27       	eor	r18, r18
    224a:	b0 0d       	add	r27, r0
    224c:	a1 1d       	adc	r26, r1
    224e:	62 1f       	adc	r22, r18
    2250:	73 9f       	mul	r23, r19
    2252:	b0 0d       	add	r27, r0
    2254:	a1 1d       	adc	r26, r1
    2256:	62 1f       	adc	r22, r18
    2258:	83 9f       	mul	r24, r19
    225a:	a0 0d       	add	r26, r0
    225c:	61 1d       	adc	r22, r1
    225e:	22 1f       	adc	r18, r18
    2260:	74 9f       	mul	r23, r20
    2262:	33 27       	eor	r19, r19
    2264:	a0 0d       	add	r26, r0
    2266:	61 1d       	adc	r22, r1
    2268:	23 1f       	adc	r18, r19
    226a:	84 9f       	mul	r24, r20
    226c:	60 0d       	add	r22, r0
    226e:	21 1d       	adc	r18, r1
    2270:	82 2f       	mov	r24, r18
    2272:	76 2f       	mov	r23, r22
    2274:	6a 2f       	mov	r22, r26
    2276:	11 24       	eor	r1, r1
    2278:	9f 57       	subi	r25, 0x7F	; 127
    227a:	50 40       	sbci	r21, 0x00	; 0
    227c:	9a f0       	brmi	.+38     	; 0x22a4 <__mulsf3_pse+0x88>
    227e:	f1 f0       	breq	.+60     	; 0x22bc <__mulsf3_pse+0xa0>
    2280:	88 23       	and	r24, r24
    2282:	4a f0       	brmi	.+18     	; 0x2296 <__mulsf3_pse+0x7a>
    2284:	ee 0f       	add	r30, r30
    2286:	ff 1f       	adc	r31, r31
    2288:	bb 1f       	adc	r27, r27
    228a:	66 1f       	adc	r22, r22
    228c:	77 1f       	adc	r23, r23
    228e:	88 1f       	adc	r24, r24
    2290:	91 50       	subi	r25, 0x01	; 1
    2292:	50 40       	sbci	r21, 0x00	; 0
    2294:	a9 f7       	brne	.-22     	; 0x2280 <__mulsf3_pse+0x64>
    2296:	9e 3f       	cpi	r25, 0xFE	; 254
    2298:	51 05       	cpc	r21, r1
    229a:	80 f0       	brcs	.+32     	; 0x22bc <__mulsf3_pse+0xa0>
    229c:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__fp_inf>
    22a0:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__fp_szero>
    22a4:	5f 3f       	cpi	r21, 0xFF	; 255
    22a6:	e4 f3       	brlt	.-8      	; 0x22a0 <__mulsf3_pse+0x84>
    22a8:	98 3e       	cpi	r25, 0xE8	; 232
    22aa:	d4 f3       	brlt	.-12     	; 0x22a0 <__mulsf3_pse+0x84>
    22ac:	86 95       	lsr	r24
    22ae:	77 95       	ror	r23
    22b0:	67 95       	ror	r22
    22b2:	b7 95       	ror	r27
    22b4:	f7 95       	ror	r31
    22b6:	e7 95       	ror	r30
    22b8:	9f 5f       	subi	r25, 0xFF	; 255
    22ba:	c1 f7       	brne	.-16     	; 0x22ac <__mulsf3_pse+0x90>
    22bc:	fe 2b       	or	r31, r30
    22be:	88 0f       	add	r24, r24
    22c0:	91 1d       	adc	r25, r1
    22c2:	96 95       	lsr	r25
    22c4:	87 95       	ror	r24
    22c6:	97 f9       	bld	r25, 7
    22c8:	08 95       	ret
    22ca:	19 f4       	brne	.+6      	; 0x22d2 <__mulsf3_pse+0xb6>
    22cc:	16 f4       	brtc	.+4      	; 0x22d2 <__mulsf3_pse+0xb6>
    22ce:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__fp_nan>
    22d2:	0c 94 af 11 	jmp	0x235e	; 0x235e <__fp_mpack>

000022d6 <sqrt>:
    22d6:	0e 94 cf 10 	call	0x219e	; 0x219e <__fp_splitA>
    22da:	b8 f3       	brcs	.-18     	; 0x22ca <__mulsf3_pse+0xae>
    22dc:	99 23       	and	r25, r25
    22de:	c9 f3       	breq	.-14     	; 0x22d2 <__mulsf3_pse+0xb6>
    22e0:	b6 f3       	brts	.-20     	; 0x22ce <__mulsf3_pse+0xb2>
    22e2:	9f 57       	subi	r25, 0x7F	; 127
    22e4:	55 0b       	sbc	r21, r21
    22e6:	87 ff       	sbrs	r24, 7
    22e8:	0e 94 bd 11 	call	0x237a	; 0x237a <__fp_norm2>
    22ec:	00 24       	eor	r0, r0
    22ee:	a0 e6       	ldi	r26, 0x60	; 96
    22f0:	40 ea       	ldi	r20, 0xA0	; 160
    22f2:	90 01       	movw	r18, r0
    22f4:	80 58       	subi	r24, 0x80	; 128
    22f6:	56 95       	lsr	r21
    22f8:	97 95       	ror	r25
    22fa:	28 f4       	brcc	.+10     	; 0x2306 <sqrt+0x30>
    22fc:	80 5c       	subi	r24, 0xC0	; 192
    22fe:	66 0f       	add	r22, r22
    2300:	77 1f       	adc	r23, r23
    2302:	88 1f       	adc	r24, r24
    2304:	20 f0       	brcs	.+8      	; 0x230e <sqrt+0x38>
    2306:	26 17       	cp	r18, r22
    2308:	37 07       	cpc	r19, r23
    230a:	48 07       	cpc	r20, r24
    230c:	30 f4       	brcc	.+12     	; 0x231a <sqrt+0x44>
    230e:	62 1b       	sub	r22, r18
    2310:	73 0b       	sbc	r23, r19
    2312:	84 0b       	sbc	r24, r20
    2314:	20 29       	or	r18, r0
    2316:	31 29       	or	r19, r1
    2318:	4a 2b       	or	r20, r26
    231a:	a6 95       	lsr	r26
    231c:	17 94       	ror	r1
    231e:	07 94       	ror	r0
    2320:	20 25       	eor	r18, r0
    2322:	31 25       	eor	r19, r1
    2324:	4a 27       	eor	r20, r26
    2326:	58 f7       	brcc	.-42     	; 0x22fe <sqrt+0x28>
    2328:	66 0f       	add	r22, r22
    232a:	77 1f       	adc	r23, r23
    232c:	88 1f       	adc	r24, r24
    232e:	20 f0       	brcs	.+8      	; 0x2338 <sqrt+0x62>
    2330:	26 17       	cp	r18, r22
    2332:	37 07       	cpc	r19, r23
    2334:	48 07       	cpc	r20, r24
    2336:	30 f4       	brcc	.+12     	; 0x2344 <sqrt+0x6e>
    2338:	62 0b       	sbc	r22, r18
    233a:	73 0b       	sbc	r23, r19
    233c:	84 0b       	sbc	r24, r20
    233e:	20 0d       	add	r18, r0
    2340:	31 1d       	adc	r19, r1
    2342:	41 1d       	adc	r20, r1
    2344:	a0 95       	com	r26
    2346:	81 f7       	brne	.-32     	; 0x2328 <sqrt+0x52>
    2348:	b9 01       	movw	r22, r18
    234a:	84 2f       	mov	r24, r20
    234c:	91 58       	subi	r25, 0x81	; 129
    234e:	88 0f       	add	r24, r24
    2350:	96 95       	lsr	r25
    2352:	87 95       	ror	r24
    2354:	08 95       	ret

00002356 <square>:
    2356:	9b 01       	movw	r18, r22
    2358:	ac 01       	movw	r20, r24
    235a:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__mulsf3>

0000235e <__fp_mpack>:
    235e:	9f 3f       	cpi	r25, 0xFF	; 255
    2360:	31 f0       	breq	.+12     	; 0x236e <__fp_mpack_finite+0xc>

00002362 <__fp_mpack_finite>:
    2362:	91 50       	subi	r25, 0x01	; 1
    2364:	20 f4       	brcc	.+8      	; 0x236e <__fp_mpack_finite+0xc>
    2366:	87 95       	ror	r24
    2368:	77 95       	ror	r23
    236a:	67 95       	ror	r22
    236c:	b7 95       	ror	r27
    236e:	88 0f       	add	r24, r24
    2370:	91 1d       	adc	r25, r1
    2372:	96 95       	lsr	r25
    2374:	87 95       	ror	r24
    2376:	97 f9       	bld	r25, 7
    2378:	08 95       	ret

0000237a <__fp_norm2>:
    237a:	91 50       	subi	r25, 0x01	; 1
    237c:	50 40       	sbci	r21, 0x00	; 0
    237e:	66 0f       	add	r22, r22
    2380:	77 1f       	adc	r23, r23
    2382:	88 1f       	adc	r24, r24
    2384:	d2 f7       	brpl	.-12     	; 0x237a <__fp_norm2>
    2386:	08 95       	ret

00002388 <dtostrf>:
    2388:	ef 92       	push	r14
    238a:	0f 93       	push	r16
    238c:	1f 93       	push	r17
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	e8 01       	movw	r28, r16
    2394:	47 fd       	sbrc	r20, 7
    2396:	02 c0       	rjmp	.+4      	; 0x239c <dtostrf+0x14>
    2398:	34 e0       	ldi	r19, 0x04	; 4
    239a:	01 c0       	rjmp	.+2      	; 0x239e <dtostrf+0x16>
    239c:	34 e1       	ldi	r19, 0x14	; 20
    239e:	04 2e       	mov	r0, r20
    23a0:	00 0c       	add	r0, r0
    23a2:	55 0b       	sbc	r21, r21
    23a4:	57 ff       	sbrs	r21, 7
    23a6:	03 c0       	rjmp	.+6      	; 0x23ae <dtostrf+0x26>
    23a8:	51 95       	neg	r21
    23aa:	41 95       	neg	r20
    23ac:	51 09       	sbc	r21, r1
    23ae:	e3 2e       	mov	r14, r19
    23b0:	02 2f       	mov	r16, r18
    23b2:	24 2f       	mov	r18, r20
    23b4:	ae 01       	movw	r20, r28
    23b6:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <dtoa_prf>
    23ba:	ce 01       	movw	r24, r28
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	1f 91       	pop	r17
    23c2:	0f 91       	pop	r16
    23c4:	ef 90       	pop	r14
    23c6:	08 95       	ret

000023c8 <dtoa_prf>:
    23c8:	a9 e0       	ldi	r26, 0x09	; 9
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	ea ee       	ldi	r30, 0xEA	; 234
    23ce:	f1 e1       	ldi	r31, 0x11	; 17
    23d0:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__prologue_saves__+0xc>
    23d4:	6a 01       	movw	r12, r20
    23d6:	12 2f       	mov	r17, r18
    23d8:	b0 2e       	mov	r11, r16
    23da:	2b e3       	ldi	r18, 0x3B	; 59
    23dc:	20 17       	cp	r18, r16
    23de:	20 f0       	brcs	.+8      	; 0x23e8 <dtoa_prf+0x20>
    23e0:	ff 24       	eor	r15, r15
    23e2:	f3 94       	inc	r15
    23e4:	f0 0e       	add	r15, r16
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <dtoa_prf+0x24>
    23e8:	2c e3       	ldi	r18, 0x3C	; 60
    23ea:	f2 2e       	mov	r15, r18
    23ec:	0f 2d       	mov	r16, r15
    23ee:	27 e0       	ldi	r18, 0x07	; 7
    23f0:	ae 01       	movw	r20, r28
    23f2:	4f 5f       	subi	r20, 0xFF	; 255
    23f4:	5f 4f       	sbci	r21, 0xFF	; 255
    23f6:	0e 94 3e 13 	call	0x267c	; 0x267c <__ftoa_engine>
    23fa:	bc 01       	movw	r22, r24
    23fc:	49 81       	ldd	r20, Y+1	; 0x01
    23fe:	84 2f       	mov	r24, r20
    2400:	89 70       	andi	r24, 0x09	; 9
    2402:	81 30       	cpi	r24, 0x01	; 1
    2404:	31 f0       	breq	.+12     	; 0x2412 <dtoa_prf+0x4a>
    2406:	e1 fc       	sbrc	r14, 1
    2408:	06 c0       	rjmp	.+12     	; 0x2416 <dtoa_prf+0x4e>
    240a:	e0 fe       	sbrs	r14, 0
    240c:	06 c0       	rjmp	.+12     	; 0x241a <dtoa_prf+0x52>
    240e:	90 e2       	ldi	r25, 0x20	; 32
    2410:	05 c0       	rjmp	.+10     	; 0x241c <dtoa_prf+0x54>
    2412:	9d e2       	ldi	r25, 0x2D	; 45
    2414:	03 c0       	rjmp	.+6      	; 0x241c <dtoa_prf+0x54>
    2416:	9b e2       	ldi	r25, 0x2B	; 43
    2418:	01 c0       	rjmp	.+2      	; 0x241c <dtoa_prf+0x54>
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	5e 2d       	mov	r21, r14
    241e:	50 71       	andi	r21, 0x10	; 16
    2420:	43 ff       	sbrs	r20, 3
    2422:	3c c0       	rjmp	.+120    	; 0x249c <dtoa_prf+0xd4>
    2424:	91 11       	cpse	r25, r1
    2426:	02 c0       	rjmp	.+4      	; 0x242c <dtoa_prf+0x64>
    2428:	83 e0       	ldi	r24, 0x03	; 3
    242a:	01 c0       	rjmp	.+2      	; 0x242e <dtoa_prf+0x66>
    242c:	84 e0       	ldi	r24, 0x04	; 4
    242e:	81 17       	cp	r24, r17
    2430:	18 f4       	brcc	.+6      	; 0x2438 <dtoa_prf+0x70>
    2432:	21 2f       	mov	r18, r17
    2434:	28 1b       	sub	r18, r24
    2436:	01 c0       	rjmp	.+2      	; 0x243a <dtoa_prf+0x72>
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	51 11       	cpse	r21, r1
    243c:	0b c0       	rjmp	.+22     	; 0x2454 <dtoa_prf+0x8c>
    243e:	f6 01       	movw	r30, r12
    2440:	82 2f       	mov	r24, r18
    2442:	30 e2       	ldi	r19, 0x20	; 32
    2444:	88 23       	and	r24, r24
    2446:	19 f0       	breq	.+6      	; 0x244e <dtoa_prf+0x86>
    2448:	31 93       	st	Z+, r19
    244a:	81 50       	subi	r24, 0x01	; 1
    244c:	fb cf       	rjmp	.-10     	; 0x2444 <dtoa_prf+0x7c>
    244e:	c2 0e       	add	r12, r18
    2450:	d1 1c       	adc	r13, r1
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	99 23       	and	r25, r25
    2456:	29 f0       	breq	.+10     	; 0x2462 <dtoa_prf+0x9a>
    2458:	d6 01       	movw	r26, r12
    245a:	9c 93       	st	X, r25
    245c:	f6 01       	movw	r30, r12
    245e:	31 96       	adiw	r30, 0x01	; 1
    2460:	6f 01       	movw	r12, r30
    2462:	c6 01       	movw	r24, r12
    2464:	03 96       	adiw	r24, 0x03	; 3
    2466:	e2 fe       	sbrs	r14, 2
    2468:	0a c0       	rjmp	.+20     	; 0x247e <dtoa_prf+0xb6>
    246a:	3e e4       	ldi	r19, 0x4E	; 78
    246c:	d6 01       	movw	r26, r12
    246e:	3c 93       	st	X, r19
    2470:	41 e4       	ldi	r20, 0x41	; 65
    2472:	11 96       	adiw	r26, 0x01	; 1
    2474:	4c 93       	st	X, r20
    2476:	11 97       	sbiw	r26, 0x01	; 1
    2478:	12 96       	adiw	r26, 0x02	; 2
    247a:	3c 93       	st	X, r19
    247c:	06 c0       	rjmp	.+12     	; 0x248a <dtoa_prf+0xc2>
    247e:	3e e6       	ldi	r19, 0x6E	; 110
    2480:	f6 01       	movw	r30, r12
    2482:	30 83       	st	Z, r19
    2484:	41 e6       	ldi	r20, 0x61	; 97
    2486:	41 83       	std	Z+1, r20	; 0x01
    2488:	32 83       	std	Z+2, r19	; 0x02
    248a:	fc 01       	movw	r30, r24
    248c:	32 2f       	mov	r19, r18
    248e:	40 e2       	ldi	r20, 0x20	; 32
    2490:	33 23       	and	r19, r19
    2492:	09 f4       	brne	.+2      	; 0x2496 <dtoa_prf+0xce>
    2494:	42 c0       	rjmp	.+132    	; 0x251a <dtoa_prf+0x152>
    2496:	41 93       	st	Z+, r20
    2498:	31 50       	subi	r19, 0x01	; 1
    249a:	fa cf       	rjmp	.-12     	; 0x2490 <dtoa_prf+0xc8>
    249c:	42 ff       	sbrs	r20, 2
    249e:	44 c0       	rjmp	.+136    	; 0x2528 <dtoa_prf+0x160>
    24a0:	91 11       	cpse	r25, r1
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <dtoa_prf+0xe0>
    24a4:	83 e0       	ldi	r24, 0x03	; 3
    24a6:	01 c0       	rjmp	.+2      	; 0x24aa <dtoa_prf+0xe2>
    24a8:	84 e0       	ldi	r24, 0x04	; 4
    24aa:	81 17       	cp	r24, r17
    24ac:	18 f4       	brcc	.+6      	; 0x24b4 <dtoa_prf+0xec>
    24ae:	21 2f       	mov	r18, r17
    24b0:	28 1b       	sub	r18, r24
    24b2:	01 c0       	rjmp	.+2      	; 0x24b6 <dtoa_prf+0xee>
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	51 11       	cpse	r21, r1
    24b8:	0b c0       	rjmp	.+22     	; 0x24d0 <dtoa_prf+0x108>
    24ba:	f6 01       	movw	r30, r12
    24bc:	82 2f       	mov	r24, r18
    24be:	30 e2       	ldi	r19, 0x20	; 32
    24c0:	88 23       	and	r24, r24
    24c2:	19 f0       	breq	.+6      	; 0x24ca <dtoa_prf+0x102>
    24c4:	31 93       	st	Z+, r19
    24c6:	81 50       	subi	r24, 0x01	; 1
    24c8:	fb cf       	rjmp	.-10     	; 0x24c0 <dtoa_prf+0xf8>
    24ca:	c2 0e       	add	r12, r18
    24cc:	d1 1c       	adc	r13, r1
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	99 23       	and	r25, r25
    24d2:	29 f0       	breq	.+10     	; 0x24de <dtoa_prf+0x116>
    24d4:	d6 01       	movw	r26, r12
    24d6:	9c 93       	st	X, r25
    24d8:	f6 01       	movw	r30, r12
    24da:	31 96       	adiw	r30, 0x01	; 1
    24dc:	6f 01       	movw	r12, r30
    24de:	c6 01       	movw	r24, r12
    24e0:	03 96       	adiw	r24, 0x03	; 3
    24e2:	e2 fe       	sbrs	r14, 2
    24e4:	0b c0       	rjmp	.+22     	; 0x24fc <dtoa_prf+0x134>
    24e6:	39 e4       	ldi	r19, 0x49	; 73
    24e8:	d6 01       	movw	r26, r12
    24ea:	3c 93       	st	X, r19
    24ec:	3e e4       	ldi	r19, 0x4E	; 78
    24ee:	11 96       	adiw	r26, 0x01	; 1
    24f0:	3c 93       	st	X, r19
    24f2:	11 97       	sbiw	r26, 0x01	; 1
    24f4:	36 e4       	ldi	r19, 0x46	; 70
    24f6:	12 96       	adiw	r26, 0x02	; 2
    24f8:	3c 93       	st	X, r19
    24fa:	07 c0       	rjmp	.+14     	; 0x250a <dtoa_prf+0x142>
    24fc:	39 e6       	ldi	r19, 0x69	; 105
    24fe:	f6 01       	movw	r30, r12
    2500:	30 83       	st	Z, r19
    2502:	3e e6       	ldi	r19, 0x6E	; 110
    2504:	31 83       	std	Z+1, r19	; 0x01
    2506:	36 e6       	ldi	r19, 0x66	; 102
    2508:	32 83       	std	Z+2, r19	; 0x02
    250a:	fc 01       	movw	r30, r24
    250c:	32 2f       	mov	r19, r18
    250e:	40 e2       	ldi	r20, 0x20	; 32
    2510:	33 23       	and	r19, r19
    2512:	19 f0       	breq	.+6      	; 0x251a <dtoa_prf+0x152>
    2514:	41 93       	st	Z+, r20
    2516:	31 50       	subi	r19, 0x01	; 1
    2518:	fb cf       	rjmp	.-10     	; 0x2510 <dtoa_prf+0x148>
    251a:	fc 01       	movw	r30, r24
    251c:	e2 0f       	add	r30, r18
    251e:	f1 1d       	adc	r31, r1
    2520:	10 82       	st	Z, r1
    2522:	8e ef       	ldi	r24, 0xFE	; 254
    2524:	9f ef       	ldi	r25, 0xFF	; 255
    2526:	a6 c0       	rjmp	.+332    	; 0x2674 <dtoa_prf+0x2ac>
    2528:	21 e0       	ldi	r18, 0x01	; 1
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	91 11       	cpse	r25, r1
    252e:	02 c0       	rjmp	.+4      	; 0x2534 <dtoa_prf+0x16c>
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	16 16       	cp	r1, r22
    2536:	17 06       	cpc	r1, r23
    2538:	1c f4       	brge	.+6      	; 0x2540 <dtoa_prf+0x178>
    253a:	fb 01       	movw	r30, r22
    253c:	31 96       	adiw	r30, 0x01	; 1
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <dtoa_prf+0x17c>
    2540:	e1 e0       	ldi	r30, 0x01	; 1
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	2e 0f       	add	r18, r30
    2546:	3f 1f       	adc	r19, r31
    2548:	bb 20       	and	r11, r11
    254a:	21 f0       	breq	.+8      	; 0x2554 <dtoa_prf+0x18c>
    254c:	eb 2d       	mov	r30, r11
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	31 96       	adiw	r30, 0x01	; 1
    2552:	02 c0       	rjmp	.+4      	; 0x2558 <dtoa_prf+0x190>
    2554:	e0 e0       	ldi	r30, 0x00	; 0
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	2e 0f       	add	r18, r30
    255a:	3f 1f       	adc	r19, r31
    255c:	e1 2f       	mov	r30, r17
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	2e 17       	cp	r18, r30
    2562:	3f 07       	cpc	r19, r31
    2564:	1c f4       	brge	.+6      	; 0x256c <dtoa_prf+0x1a4>
    2566:	12 1b       	sub	r17, r18
    2568:	21 2f       	mov	r18, r17
    256a:	01 c0       	rjmp	.+2      	; 0x256e <dtoa_prf+0x1a6>
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	8e 2d       	mov	r24, r14
    2570:	88 71       	andi	r24, 0x18	; 24
    2572:	59 f4       	brne	.+22     	; 0x258a <dtoa_prf+0x1c2>
    2574:	f6 01       	movw	r30, r12
    2576:	82 2f       	mov	r24, r18
    2578:	30 e2       	ldi	r19, 0x20	; 32
    257a:	88 23       	and	r24, r24
    257c:	19 f0       	breq	.+6      	; 0x2584 <dtoa_prf+0x1bc>
    257e:	31 93       	st	Z+, r19
    2580:	81 50       	subi	r24, 0x01	; 1
    2582:	fb cf       	rjmp	.-10     	; 0x257a <dtoa_prf+0x1b2>
    2584:	c2 0e       	add	r12, r18
    2586:	d1 1c       	adc	r13, r1
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	99 23       	and	r25, r25
    258c:	29 f0       	breq	.+10     	; 0x2598 <dtoa_prf+0x1d0>
    258e:	d6 01       	movw	r26, r12
    2590:	9c 93       	st	X, r25
    2592:	f6 01       	movw	r30, r12
    2594:	31 96       	adiw	r30, 0x01	; 1
    2596:	6f 01       	movw	r12, r30
    2598:	51 11       	cpse	r21, r1
    259a:	0b c0       	rjmp	.+22     	; 0x25b2 <dtoa_prf+0x1ea>
    259c:	f6 01       	movw	r30, r12
    259e:	82 2f       	mov	r24, r18
    25a0:	90 e3       	ldi	r25, 0x30	; 48
    25a2:	88 23       	and	r24, r24
    25a4:	19 f0       	breq	.+6      	; 0x25ac <dtoa_prf+0x1e4>
    25a6:	91 93       	st	Z+, r25
    25a8:	81 50       	subi	r24, 0x01	; 1
    25aa:	fb cf       	rjmp	.-10     	; 0x25a2 <dtoa_prf+0x1da>
    25ac:	c2 0e       	add	r12, r18
    25ae:	d1 1c       	adc	r13, r1
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	0f 2d       	mov	r16, r15
    25b4:	06 0f       	add	r16, r22
    25b6:	9a 81       	ldd	r25, Y+2	; 0x02
    25b8:	34 2f       	mov	r19, r20
    25ba:	30 71       	andi	r19, 0x10	; 16
    25bc:	44 ff       	sbrs	r20, 4
    25be:	03 c0       	rjmp	.+6      	; 0x25c6 <dtoa_prf+0x1fe>
    25c0:	91 33       	cpi	r25, 0x31	; 49
    25c2:	09 f4       	brne	.+2      	; 0x25c6 <dtoa_prf+0x1fe>
    25c4:	01 50       	subi	r16, 0x01	; 1
    25c6:	10 16       	cp	r1, r16
    25c8:	24 f4       	brge	.+8      	; 0x25d2 <dtoa_prf+0x20a>
    25ca:	09 30       	cpi	r16, 0x09	; 9
    25cc:	18 f0       	brcs	.+6      	; 0x25d4 <dtoa_prf+0x20c>
    25ce:	08 e0       	ldi	r16, 0x08	; 8
    25d0:	01 c0       	rjmp	.+2      	; 0x25d4 <dtoa_prf+0x20c>
    25d2:	01 e0       	ldi	r16, 0x01	; 1
    25d4:	ab 01       	movw	r20, r22
    25d6:	77 ff       	sbrs	r23, 7
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <dtoa_prf+0x216>
    25da:	40 e0       	ldi	r20, 0x00	; 0
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	fb 01       	movw	r30, r22
    25e0:	e4 1b       	sub	r30, r20
    25e2:	f5 0b       	sbc	r31, r21
    25e4:	a1 e0       	ldi	r26, 0x01	; 1
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	ac 0f       	add	r26, r28
    25ea:	bd 1f       	adc	r27, r29
    25ec:	ea 0f       	add	r30, r26
    25ee:	fb 1f       	adc	r31, r27
    25f0:	8e e2       	ldi	r24, 0x2E	; 46
    25f2:	a8 2e       	mov	r10, r24
    25f4:	4b 01       	movw	r8, r22
    25f6:	80 1a       	sub	r8, r16
    25f8:	91 08       	sbc	r9, r1
    25fa:	0b 2d       	mov	r16, r11
    25fc:	10 e0       	ldi	r17, 0x00	; 0
    25fe:	11 95       	neg	r17
    2600:	01 95       	neg	r16
    2602:	11 09       	sbc	r17, r1
    2604:	4f 3f       	cpi	r20, 0xFF	; 255
    2606:	bf ef       	ldi	r27, 0xFF	; 255
    2608:	5b 07       	cpc	r21, r27
    260a:	21 f4       	brne	.+8      	; 0x2614 <dtoa_prf+0x24c>
    260c:	d6 01       	movw	r26, r12
    260e:	ac 92       	st	X, r10
    2610:	11 96       	adiw	r26, 0x01	; 1
    2612:	6d 01       	movw	r12, r26
    2614:	64 17       	cp	r22, r20
    2616:	75 07       	cpc	r23, r21
    2618:	2c f0       	brlt	.+10     	; 0x2624 <dtoa_prf+0x25c>
    261a:	84 16       	cp	r8, r20
    261c:	95 06       	cpc	r9, r21
    261e:	14 f4       	brge	.+4      	; 0x2624 <dtoa_prf+0x25c>
    2620:	81 81       	ldd	r24, Z+1	; 0x01
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <dtoa_prf+0x25e>
    2624:	80 e3       	ldi	r24, 0x30	; 48
    2626:	41 50       	subi	r20, 0x01	; 1
    2628:	51 09       	sbc	r21, r1
    262a:	31 96       	adiw	r30, 0x01	; 1
    262c:	d6 01       	movw	r26, r12
    262e:	11 96       	adiw	r26, 0x01	; 1
    2630:	7d 01       	movw	r14, r26
    2632:	40 17       	cp	r20, r16
    2634:	51 07       	cpc	r21, r17
    2636:	24 f0       	brlt	.+8      	; 0x2640 <dtoa_prf+0x278>
    2638:	d6 01       	movw	r26, r12
    263a:	8c 93       	st	X, r24
    263c:	67 01       	movw	r12, r14
    263e:	e2 cf       	rjmp	.-60     	; 0x2604 <dtoa_prf+0x23c>
    2640:	64 17       	cp	r22, r20
    2642:	75 07       	cpc	r23, r21
    2644:	39 f4       	brne	.+14     	; 0x2654 <dtoa_prf+0x28c>
    2646:	96 33       	cpi	r25, 0x36	; 54
    2648:	20 f4       	brcc	.+8      	; 0x2652 <dtoa_prf+0x28a>
    264a:	95 33       	cpi	r25, 0x35	; 53
    264c:	19 f4       	brne	.+6      	; 0x2654 <dtoa_prf+0x28c>
    264e:	31 11       	cpse	r19, r1
    2650:	01 c0       	rjmp	.+2      	; 0x2654 <dtoa_prf+0x28c>
    2652:	81 e3       	ldi	r24, 0x31	; 49
    2654:	f6 01       	movw	r30, r12
    2656:	80 83       	st	Z, r24
    2658:	f7 01       	movw	r30, r14
    265a:	82 2f       	mov	r24, r18
    265c:	90 e2       	ldi	r25, 0x20	; 32
    265e:	88 23       	and	r24, r24
    2660:	19 f0       	breq	.+6      	; 0x2668 <dtoa_prf+0x2a0>
    2662:	91 93       	st	Z+, r25
    2664:	81 50       	subi	r24, 0x01	; 1
    2666:	fb cf       	rjmp	.-10     	; 0x265e <dtoa_prf+0x296>
    2668:	f7 01       	movw	r30, r14
    266a:	e2 0f       	add	r30, r18
    266c:	f1 1d       	adc	r31, r1
    266e:	10 82       	st	Z, r1
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	29 96       	adiw	r28, 0x09	; 9
    2676:	ec e0       	ldi	r30, 0x0C	; 12
    2678:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__epilogue_restores__+0xc>

0000267c <__ftoa_engine>:
    267c:	28 30       	cpi	r18, 0x08	; 8
    267e:	08 f0       	brcs	.+2      	; 0x2682 <__ftoa_engine+0x6>
    2680:	27 e0       	ldi	r18, 0x07	; 7
    2682:	33 27       	eor	r19, r19
    2684:	da 01       	movw	r26, r20
    2686:	99 0f       	add	r25, r25
    2688:	31 1d       	adc	r19, r1
    268a:	87 fd       	sbrc	r24, 7
    268c:	91 60       	ori	r25, 0x01	; 1
    268e:	00 96       	adiw	r24, 0x00	; 0
    2690:	61 05       	cpc	r22, r1
    2692:	71 05       	cpc	r23, r1
    2694:	39 f4       	brne	.+14     	; 0x26a4 <__ftoa_engine+0x28>
    2696:	32 60       	ori	r19, 0x02	; 2
    2698:	2e 5f       	subi	r18, 0xFE	; 254
    269a:	3d 93       	st	X+, r19
    269c:	30 e3       	ldi	r19, 0x30	; 48
    269e:	2a 95       	dec	r18
    26a0:	e1 f7       	brne	.-8      	; 0x269a <__ftoa_engine+0x1e>
    26a2:	08 95       	ret
    26a4:	9f 3f       	cpi	r25, 0xFF	; 255
    26a6:	30 f0       	brcs	.+12     	; 0x26b4 <__ftoa_engine+0x38>
    26a8:	80 38       	cpi	r24, 0x80	; 128
    26aa:	71 05       	cpc	r23, r1
    26ac:	61 05       	cpc	r22, r1
    26ae:	09 f0       	breq	.+2      	; 0x26b2 <__ftoa_engine+0x36>
    26b0:	3c 5f       	subi	r19, 0xFC	; 252
    26b2:	3c 5f       	subi	r19, 0xFC	; 252
    26b4:	3d 93       	st	X+, r19
    26b6:	91 30       	cpi	r25, 0x01	; 1
    26b8:	08 f0       	brcs	.+2      	; 0x26bc <__ftoa_engine+0x40>
    26ba:	80 68       	ori	r24, 0x80	; 128
    26bc:	91 1d       	adc	r25, r1
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	1f 93       	push	r17
    26c4:	0f 93       	push	r16
    26c6:	ff 92       	push	r15
    26c8:	ef 92       	push	r14
    26ca:	19 2f       	mov	r17, r25
    26cc:	98 7f       	andi	r25, 0xF8	; 248
    26ce:	96 95       	lsr	r25
    26d0:	e9 2f       	mov	r30, r25
    26d2:	96 95       	lsr	r25
    26d4:	96 95       	lsr	r25
    26d6:	e9 0f       	add	r30, r25
    26d8:	ff 27       	eor	r31, r31
    26da:	e4 5d       	subi	r30, 0xD4	; 212
    26dc:	fe 4f       	sbci	r31, 0xFE	; 254
    26de:	99 27       	eor	r25, r25
    26e0:	33 27       	eor	r19, r19
    26e2:	ee 24       	eor	r14, r14
    26e4:	ff 24       	eor	r15, r15
    26e6:	a7 01       	movw	r20, r14
    26e8:	e7 01       	movw	r28, r14
    26ea:	05 90       	lpm	r0, Z+
    26ec:	08 94       	sec
    26ee:	07 94       	ror	r0
    26f0:	28 f4       	brcc	.+10     	; 0x26fc <__ftoa_engine+0x80>
    26f2:	36 0f       	add	r19, r22
    26f4:	e7 1e       	adc	r14, r23
    26f6:	f8 1e       	adc	r15, r24
    26f8:	49 1f       	adc	r20, r25
    26fa:	51 1d       	adc	r21, r1
    26fc:	66 0f       	add	r22, r22
    26fe:	77 1f       	adc	r23, r23
    2700:	88 1f       	adc	r24, r24
    2702:	99 1f       	adc	r25, r25
    2704:	06 94       	lsr	r0
    2706:	a1 f7       	brne	.-24     	; 0x26f0 <__ftoa_engine+0x74>
    2708:	05 90       	lpm	r0, Z+
    270a:	07 94       	ror	r0
    270c:	28 f4       	brcc	.+10     	; 0x2718 <__ftoa_engine+0x9c>
    270e:	e7 0e       	add	r14, r23
    2710:	f8 1e       	adc	r15, r24
    2712:	49 1f       	adc	r20, r25
    2714:	56 1f       	adc	r21, r22
    2716:	c1 1d       	adc	r28, r1
    2718:	77 0f       	add	r23, r23
    271a:	88 1f       	adc	r24, r24
    271c:	99 1f       	adc	r25, r25
    271e:	66 1f       	adc	r22, r22
    2720:	06 94       	lsr	r0
    2722:	a1 f7       	brne	.-24     	; 0x270c <__ftoa_engine+0x90>
    2724:	05 90       	lpm	r0, Z+
    2726:	07 94       	ror	r0
    2728:	28 f4       	brcc	.+10     	; 0x2734 <__ftoa_engine+0xb8>
    272a:	f8 0e       	add	r15, r24
    272c:	49 1f       	adc	r20, r25
    272e:	56 1f       	adc	r21, r22
    2730:	c7 1f       	adc	r28, r23
    2732:	d1 1d       	adc	r29, r1
    2734:	88 0f       	add	r24, r24
    2736:	99 1f       	adc	r25, r25
    2738:	66 1f       	adc	r22, r22
    273a:	77 1f       	adc	r23, r23
    273c:	06 94       	lsr	r0
    273e:	a1 f7       	brne	.-24     	; 0x2728 <__ftoa_engine+0xac>
    2740:	05 90       	lpm	r0, Z+
    2742:	07 94       	ror	r0
    2744:	20 f4       	brcc	.+8      	; 0x274e <__ftoa_engine+0xd2>
    2746:	49 0f       	add	r20, r25
    2748:	56 1f       	adc	r21, r22
    274a:	c7 1f       	adc	r28, r23
    274c:	d8 1f       	adc	r29, r24
    274e:	99 0f       	add	r25, r25
    2750:	66 1f       	adc	r22, r22
    2752:	77 1f       	adc	r23, r23
    2754:	88 1f       	adc	r24, r24
    2756:	06 94       	lsr	r0
    2758:	a9 f7       	brne	.-22     	; 0x2744 <__ftoa_engine+0xc8>
    275a:	84 91       	lpm	r24, Z
    275c:	10 95       	com	r17
    275e:	17 70       	andi	r17, 0x07	; 7
    2760:	41 f0       	breq	.+16     	; 0x2772 <__ftoa_engine+0xf6>
    2762:	d6 95       	lsr	r29
    2764:	c7 95       	ror	r28
    2766:	57 95       	ror	r21
    2768:	47 95       	ror	r20
    276a:	f7 94       	ror	r15
    276c:	e7 94       	ror	r14
    276e:	1a 95       	dec	r17
    2770:	c1 f7       	brne	.-16     	; 0x2762 <__ftoa_engine+0xe6>
    2772:	e2 ed       	ldi	r30, 0xD2	; 210
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	68 94       	set
    2778:	15 90       	lpm	r1, Z+
    277a:	15 91       	lpm	r17, Z+
    277c:	35 91       	lpm	r19, Z+
    277e:	65 91       	lpm	r22, Z+
    2780:	95 91       	lpm	r25, Z+
    2782:	05 90       	lpm	r0, Z+
    2784:	7f e2       	ldi	r23, 0x2F	; 47
    2786:	73 95       	inc	r23
    2788:	e1 18       	sub	r14, r1
    278a:	f1 0a       	sbc	r15, r17
    278c:	43 0b       	sbc	r20, r19
    278e:	56 0b       	sbc	r21, r22
    2790:	c9 0b       	sbc	r28, r25
    2792:	d0 09       	sbc	r29, r0
    2794:	c0 f7       	brcc	.-16     	; 0x2786 <__ftoa_engine+0x10a>
    2796:	e1 0c       	add	r14, r1
    2798:	f1 1e       	adc	r15, r17
    279a:	43 1f       	adc	r20, r19
    279c:	56 1f       	adc	r21, r22
    279e:	c9 1f       	adc	r28, r25
    27a0:	d0 1d       	adc	r29, r0
    27a2:	7e f4       	brtc	.+30     	; 0x27c2 <__ftoa_engine+0x146>
    27a4:	70 33       	cpi	r23, 0x30	; 48
    27a6:	11 f4       	brne	.+4      	; 0x27ac <__ftoa_engine+0x130>
    27a8:	8a 95       	dec	r24
    27aa:	e6 cf       	rjmp	.-52     	; 0x2778 <__ftoa_engine+0xfc>
    27ac:	e8 94       	clt
    27ae:	01 50       	subi	r16, 0x01	; 1
    27b0:	30 f0       	brcs	.+12     	; 0x27be <__ftoa_engine+0x142>
    27b2:	08 0f       	add	r16, r24
    27b4:	0a f4       	brpl	.+2      	; 0x27b8 <__ftoa_engine+0x13c>
    27b6:	00 27       	eor	r16, r16
    27b8:	02 17       	cp	r16, r18
    27ba:	08 f4       	brcc	.+2      	; 0x27be <__ftoa_engine+0x142>
    27bc:	20 2f       	mov	r18, r16
    27be:	23 95       	inc	r18
    27c0:	02 2f       	mov	r16, r18
    27c2:	7a 33       	cpi	r23, 0x3A	; 58
    27c4:	28 f0       	brcs	.+10     	; 0x27d0 <__ftoa_engine+0x154>
    27c6:	79 e3       	ldi	r23, 0x39	; 57
    27c8:	7d 93       	st	X+, r23
    27ca:	2a 95       	dec	r18
    27cc:	e9 f7       	brne	.-6      	; 0x27c8 <__ftoa_engine+0x14c>
    27ce:	10 c0       	rjmp	.+32     	; 0x27f0 <__ftoa_engine+0x174>
    27d0:	7d 93       	st	X+, r23
    27d2:	2a 95       	dec	r18
    27d4:	89 f6       	brne	.-94     	; 0x2778 <__ftoa_engine+0xfc>
    27d6:	06 94       	lsr	r0
    27d8:	97 95       	ror	r25
    27da:	67 95       	ror	r22
    27dc:	37 95       	ror	r19
    27de:	17 95       	ror	r17
    27e0:	17 94       	ror	r1
    27e2:	e1 18       	sub	r14, r1
    27e4:	f1 0a       	sbc	r15, r17
    27e6:	43 0b       	sbc	r20, r19
    27e8:	56 0b       	sbc	r21, r22
    27ea:	c9 0b       	sbc	r28, r25
    27ec:	d0 09       	sbc	r29, r0
    27ee:	98 f0       	brcs	.+38     	; 0x2816 <__ftoa_engine+0x19a>
    27f0:	23 95       	inc	r18
    27f2:	7e 91       	ld	r23, -X
    27f4:	73 95       	inc	r23
    27f6:	7a 33       	cpi	r23, 0x3A	; 58
    27f8:	08 f0       	brcs	.+2      	; 0x27fc <__ftoa_engine+0x180>
    27fa:	70 e3       	ldi	r23, 0x30	; 48
    27fc:	7c 93       	st	X, r23
    27fe:	20 13       	cpse	r18, r16
    2800:	b8 f7       	brcc	.-18     	; 0x27f0 <__ftoa_engine+0x174>
    2802:	7e 91       	ld	r23, -X
    2804:	70 61       	ori	r23, 0x10	; 16
    2806:	7d 93       	st	X+, r23
    2808:	30 f0       	brcs	.+12     	; 0x2816 <__ftoa_engine+0x19a>
    280a:	83 95       	inc	r24
    280c:	71 e3       	ldi	r23, 0x31	; 49
    280e:	7d 93       	st	X+, r23
    2810:	70 e3       	ldi	r23, 0x30	; 48
    2812:	2a 95       	dec	r18
    2814:	e1 f7       	brne	.-8      	; 0x280e <__ftoa_engine+0x192>
    2816:	11 24       	eor	r1, r1
    2818:	ef 90       	pop	r14
    281a:	ff 90       	pop	r15
    281c:	0f 91       	pop	r16
    281e:	1f 91       	pop	r17
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	99 27       	eor	r25, r25
    2826:	87 fd       	sbrc	r24, 7
    2828:	90 95       	com	r25
    282a:	08 95       	ret

0000282c <__prologue_saves__>:
    282c:	2f 92       	push	r2
    282e:	3f 92       	push	r3
    2830:	4f 92       	push	r4
    2832:	5f 92       	push	r5
    2834:	6f 92       	push	r6
    2836:	7f 92       	push	r7
    2838:	8f 92       	push	r8
    283a:	9f 92       	push	r9
    283c:	af 92       	push	r10
    283e:	bf 92       	push	r11
    2840:	cf 92       	push	r12
    2842:	df 92       	push	r13
    2844:	ef 92       	push	r14
    2846:	ff 92       	push	r15
    2848:	0f 93       	push	r16
    284a:	1f 93       	push	r17
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	ca 1b       	sub	r28, r26
    2856:	db 0b       	sbc	r29, r27
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	09 94       	ijmp

00002864 <__epilogue_restores__>:
    2864:	2a 88       	ldd	r2, Y+18	; 0x12
    2866:	39 88       	ldd	r3, Y+17	; 0x11
    2868:	48 88       	ldd	r4, Y+16	; 0x10
    286a:	5f 84       	ldd	r5, Y+15	; 0x0f
    286c:	6e 84       	ldd	r6, Y+14	; 0x0e
    286e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2870:	8c 84       	ldd	r8, Y+12	; 0x0c
    2872:	9b 84       	ldd	r9, Y+11	; 0x0b
    2874:	aa 84       	ldd	r10, Y+10	; 0x0a
    2876:	b9 84       	ldd	r11, Y+9	; 0x09
    2878:	c8 84       	ldd	r12, Y+8	; 0x08
    287a:	df 80       	ldd	r13, Y+7	; 0x07
    287c:	ee 80       	ldd	r14, Y+6	; 0x06
    287e:	fd 80       	ldd	r15, Y+5	; 0x05
    2880:	0c 81       	ldd	r16, Y+4	; 0x04
    2882:	1b 81       	ldd	r17, Y+3	; 0x03
    2884:	aa 81       	ldd	r26, Y+2	; 0x02
    2886:	b9 81       	ldd	r27, Y+1	; 0x01
    2888:	ce 0f       	add	r28, r30
    288a:	d1 1d       	adc	r29, r1
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	f8 94       	cli
    2890:	de bf       	out	0x3e, r29	; 62
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	cd bf       	out	0x3d, r28	; 61
    2896:	ed 01       	movw	r28, r26
    2898:	08 95       	ret

0000289a <_exit>:
    289a:	f8 94       	cli

0000289c <__stop_program>:
    289c:	ff cf       	rjmp	.-2      	; 0x289c <__stop_program>
