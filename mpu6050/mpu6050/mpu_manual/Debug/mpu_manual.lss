
mpu_manual.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001960  000019f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001960  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  00800104  00800104  000019f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f61  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c70  00000000  00000000  00003b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e7c  00000000  00000000  000047b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d0  00000000  00000000  00005638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007df  00000000  00000000  00005c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001dc7  00000000  00000000  000063e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000081ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c8 00 	jmp	0x190	; 0x190 <__ctors_end>
       4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       8:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      10:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      14:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      18:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      1c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      20:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      24:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      28:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      2c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      30:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      34:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      38:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      3c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      40:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      44:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      48:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__vector_18>
      4c:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <__vector_19>
      50:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      54:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      58:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      5c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      60:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      64:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	00 40       	sbci	r16, 0x00	; 0
      98:	7a 10       	cpse	r7, r10
      9a:	f3 5a       	subi	r31, 0xA3	; 163
      9c:	00 a0       	ldd	r0, Z+32	; 0x20
      9e:	72 4e       	sbci	r23, 0xE2	; 226
      a0:	18 09       	sbc	r17, r8
      a2:	00 10       	cpse	r0, r0
      a4:	a5 d4       	rcall	.+2378   	; 0x9f0 <mpu6050_writeBits+0xa>
      a6:	e8 00       	.word	0x00e8	; ????
      a8:	00 e8       	ldi	r16, 0x80	; 128
      aa:	76 48       	sbci	r23, 0x86	; 134
      ac:	17 00       	.word	0x0017	; ????
      ae:	00 e4       	ldi	r16, 0x40	; 64
      b0:	0b 54       	subi	r16, 0x4B	; 75
      b2:	02 00       	.word	0x0002	; ????
      b4:	00 ca       	rjmp	.-3072   	; 0xfffff4b6 <__eeprom_end+0xff7ef4b6>
      b6:	9a 3b       	cpi	r25, 0xBA	; 186
      b8:	00 00       	nop
      ba:	00 e1       	ldi	r16, 0x10	; 16
      bc:	f5 05       	cpc	r31, r5
      be:	00 00       	nop
      c0:	80 96       	adiw	r24, 0x20	; 32
      c2:	98 00       	.word	0x0098	; ????
      c4:	00 00       	nop
      c6:	40 42       	sbci	r20, 0x20	; 32
      c8:	0f 00       	.word	0x000f	; ????
      ca:	00 00       	nop
      cc:	a0 86       	std	Z+8, r10	; 0x08
      ce:	01 00       	.word	0x0001	; ????
      d0:	00 00       	nop
      d2:	10 27       	eor	r17, r16
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	e8 03       	fmulsu	r22, r16
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	64 00       	.word	0x0064	; ????
      e0:	00 00       	nop
      e2:	00 00       	nop
      e4:	0a 00       	.word	0x000a	; ????
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	01 00       	.word	0x0001	; ????
      ec:	00 00       	nop
      ee:	00 00       	nop
      f0:	2c 76       	andi	r18, 0x6C	; 108
      f2:	d8 88       	ldd	r13, Y+16	; 0x10
      f4:	dc 67       	ori	r29, 0x7C	; 124
      f6:	4f 08       	sbc	r4, r15
      f8:	23 df       	rcall	.-442    	; 0xffffff40 <__eeprom_end+0xff7eff40>
      fa:	c1 df       	rcall	.-126    	; 0x7e <__SREG__+0x3f>
      fc:	ae 59       	subi	r26, 0x9E	; 158
      fe:	e1 b1       	in	r30, 0x01	; 1
     100:	b7 96       	adiw	r30, 0x27	; 39
     102:	e5 e3       	ldi	r30, 0x35	; 53
     104:	e4 53       	subi	r30, 0x34	; 52
     106:	c6 3a       	cpi	r28, 0xA6	; 166
     108:	e6 51       	subi	r30, 0x16	; 22
     10a:	99 76       	andi	r25, 0x69	; 105
     10c:	96 e8       	ldi	r25, 0x86	; 134
     10e:	e6 c2       	rjmp	.+1484   	; 0x6dc <main+0xaa>
     110:	84 26       	eor	r8, r20
     112:	eb 89       	ldd	r30, Y+19	; 0x13
     114:	8c 9b       	sbis	0x11, 4	; 17
     116:	62 ed       	ldi	r22, 0xD2	; 210
     118:	40 7c       	andi	r20, 0xC0	; 192
     11a:	6f fc       	.word	0xfc6f	; ????
     11c:	ef bc       	out	0x2f, r14	; 47
     11e:	9c 9f       	mul	r25, r28
     120:	40 f2       	brcs	.-112    	; 0xb2 <__trampolines_end+0x1c>
     122:	ba a5       	ldd	r27, Y+42	; 0x2a
     124:	6f a5       	ldd	r22, Y+47	; 0x2f
     126:	f4 90       	lpm	r15, Z
     128:	05 5a       	subi	r16, 0xA5	; 165
     12a:	2a f7       	brpl	.-54     	; 0xf6 <__trampolines_end+0x60>
     12c:	5c 93       	st	X, r21
     12e:	6b 6c       	ori	r22, 0xCB	; 203
     130:	f9 67       	ori	r31, 0x79	; 121
     132:	6d c1       	rjmp	.+730    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     134:	1b fc       	.word	0xfc1b	; ????
     136:	e0 e4       	ldi	r30, 0x40	; 64
     138:	0d 47       	sbci	r16, 0x7D	; 125
     13a:	fe f5       	brtc	.+126    	; 0x1ba <.do_clear_bss_loop>
     13c:	20 e6       	ldi	r18, 0x60	; 96
     13e:	b5 00       	.word	0x00b5	; ????
     140:	d0 ed       	ldi	r29, 0xD0	; 208
     142:	90 2e       	mov	r9, r16
     144:	03 00       	.word	0x0003	; ????
     146:	94 35       	cpi	r25, 0x54	; 84
     148:	77 05       	cpc	r23, r7
     14a:	00 80       	ld	r0, Z
     14c:	84 1e       	adc	r8, r20
     14e:	08 00       	.word	0x0008	; ????
     150:	00 20       	and	r0, r0
     152:	4e 0a       	sbc	r4, r30
     154:	00 00       	nop
     156:	00 c8       	rjmp	.-4096   	; 0xfffff158 <__eeprom_end+0xff7ef158>
     158:	0c 33       	cpi	r16, 0x3C	; 60
     15a:	33 33       	cpi	r19, 0x33	; 51
     15c:	33 0f       	add	r19, r19
     15e:	98 6e       	ori	r25, 0xE8	; 232
     160:	12 83       	std	Z+2, r17	; 0x02
     162:	11 41       	sbci	r17, 0x11	; 17
     164:	ef 8d       	ldd	r30, Y+31	; 0x1f
     166:	21 14       	cp	r2, r1
     168:	89 3b       	cpi	r24, 0xB9	; 185
     16a:	e6 55       	subi	r30, 0x56	; 86
     16c:	16 cf       	rjmp	.-468    	; 0xffffff9a <__eeprom_end+0xff7eff9a>
     16e:	fe e6       	ldi	r31, 0x6E	; 110
     170:	db 18       	sub	r13, r11
     172:	d1 84       	ldd	r13, Z+9	; 0x09
     174:	4b 38       	cpi	r20, 0x8B	; 139
     176:	1b f7       	brvc	.-58     	; 0x13e <__trampolines_end+0xa8>
     178:	7c 1d       	adc	r23, r12
     17a:	90 1d       	adc	r25, r0
     17c:	a4 bb       	out	0x14, r26	; 20
     17e:	e4 24       	eor	r14, r4
     180:	20 32       	cpi	r18, 0x20	; 32
     182:	84 72       	andi	r24, 0x24	; 36
     184:	5e 22       	and	r5, r30
     186:	81 00       	.word	0x0081	; ????
     188:	c9 f1       	breq	.+114    	; 0x1fc <i2c_start+0x22>
     18a:	24 ec       	ldi	r18, 0xC4	; 196
     18c:	a1 e5       	ldi	r26, 0x51	; 81
     18e:	3d 27       	eor	r19, r29

00000190 <__ctors_end>:
     190:	11 24       	eor	r1, r1
     192:	1f be       	out	0x3f, r1	; 63
     194:	cf ef       	ldi	r28, 0xFF	; 255
     196:	d8 e0       	ldi	r29, 0x08	; 8
     198:	de bf       	out	0x3e, r29	; 62
     19a:	cd bf       	out	0x3d, r28	; 61

0000019c <__do_copy_data>:
     19c:	11 e0       	ldi	r17, 0x01	; 1
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	e0 e6       	ldi	r30, 0x60	; 96
     1a4:	f9 e1       	ldi	r31, 0x19	; 25
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__do_copy_data+0x10>
     1a8:	05 90       	lpm	r0, Z+
     1aa:	0d 92       	st	X+, r0
     1ac:	a4 30       	cpi	r26, 0x04	; 4
     1ae:	b1 07       	cpc	r27, r17
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <__do_copy_data+0xc>

000001b2 <__do_clear_bss>:
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	a4 e0       	ldi	r26, 0x04	; 4
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <.do_clear_bss_start>

000001ba <.do_clear_bss_loop>:
     1ba:	1d 92       	st	X+, r1

000001bc <.do_clear_bss_start>:
     1bc:	a7 35       	cpi	r26, 0x57	; 87
     1be:	b2 07       	cpc	r27, r18
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <.do_clear_bss_loop>
     1c2:	0e 94 19 03 	call	0x632	; 0x632 <main>
     1c6:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <_exit>

000001ca <__bad_interrupt>:
     1ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ce <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     1ce:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1d2:	8c e0       	ldi	r24, 0x0C	; 12
     1d4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     1d8:	08 95       	ret

000001da <i2c_start>:
     1da:	94 ea       	ldi	r25, 0xA4	; 164
     1dc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1e0:	4f ef       	ldi	r20, 0xFF	; 255
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	ec eb       	ldi	r30, 0xBC	; 188
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	90 81       	ld	r25, Z
     1ee:	99 23       	and	r25, r25
     1f0:	34 f0       	brlt	.+12     	; 0x1fe <i2c_start+0x24>
     1f2:	41 50       	subi	r20, 0x01	; 1
     1f4:	51 09       	sbc	r21, r1
     1f6:	61 09       	sbc	r22, r1
     1f8:	71 09       	sbc	r23, r1
     1fa:	c0 f7       	brcc	.-16     	; 0x1ec <i2c_start+0x12>
     1fc:	04 c0       	rjmp	.+8      	; 0x206 <i2c_start+0x2c>
     1fe:	45 2b       	or	r20, r21
     200:	46 2b       	or	r20, r22
     202:	47 2b       	or	r20, r23
     204:	41 f1       	breq	.+80     	; 0x256 <i2c_start+0x7c>
     206:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     20a:	98 7f       	andi	r25, 0xF8	; 248
     20c:	98 30       	cpi	r25, 0x08	; 8
     20e:	11 f0       	breq	.+4      	; 0x214 <i2c_start+0x3a>
     210:	90 31       	cpi	r25, 0x10	; 16
     212:	19 f5       	brne	.+70     	; 0x25a <i2c_start+0x80>
     214:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     218:	84 e8       	ldi	r24, 0x84	; 132
     21a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     21e:	8f ef       	ldi	r24, 0xFF	; 255
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	a0 e0       	ldi	r26, 0x00	; 0
     224:	b0 e0       	ldi	r27, 0x00	; 0
     226:	ec eb       	ldi	r30, 0xBC	; 188
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	20 81       	ld	r18, Z
     22c:	22 23       	and	r18, r18
     22e:	2c f0       	brlt	.+10     	; 0x23a <i2c_start+0x60>
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	a1 09       	sbc	r26, r1
     234:	b1 09       	sbc	r27, r1
     236:	c8 f7       	brcc	.-14     	; 0x22a <i2c_start+0x50>
     238:	04 c0       	rjmp	.+8      	; 0x242 <i2c_start+0x68>
     23a:	89 2b       	or	r24, r25
     23c:	8a 2b       	or	r24, r26
     23e:	8b 2b       	or	r24, r27
     240:	71 f0       	breq	.+28     	; 0x25e <i2c_start+0x84>
     242:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     246:	98 7f       	andi	r25, 0xF8	; 248
     248:	98 31       	cpi	r25, 0x18	; 24
     24a:	59 f0       	breq	.+22     	; 0x262 <i2c_start+0x88>
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 34       	cpi	r25, 0x40	; 64
     250:	49 f4       	brne	.+18     	; 0x264 <i2c_start+0x8a>
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	08 95       	ret
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	08 95       	ret
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	08 95       	ret
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	08 95       	ret
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	08 95       	ret

00000266 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     266:	84 e9       	ldi	r24, 0x94	; 148
     268:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	ec eb       	ldi	r30, 0xBC	; 188
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	20 81       	ld	r18, Z
     276:	24 ff       	sbrs	r18, 4
     278:	05 c0       	rjmp	.+10     	; 0x284 <i2c_stop+0x1e>
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	81 15       	cp	r24, r1
     27e:	21 e0       	ldi	r18, 0x01	; 1
     280:	92 07       	cpc	r25, r18
     282:	c1 f7       	brne	.-16     	; 0x274 <i2c_stop+0xe>
     284:	08 95       	ret

00000286 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     286:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     28a:	84 e8       	ldi	r24, 0x84	; 132
     28c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	a0 e0       	ldi	r26, 0x00	; 0
     296:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     298:	ec eb       	ldi	r30, 0xBC	; 188
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	20 81       	ld	r18, Z
     29e:	22 23       	and	r18, r18
     2a0:	2c f0       	brlt	.+10     	; 0x2ac <i2c_write+0x26>
     2a2:	01 97       	sbiw	r24, 0x01	; 1
     2a4:	a1 09       	sbc	r26, r1
     2a6:	b1 09       	sbc	r27, r1
     2a8:	c8 f7       	brcc	.-14     	; 0x29c <i2c_write+0x16>
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <i2c_write+0x2e>
	if(i2c_timer == 0)
     2ac:	89 2b       	or	r24, r25
     2ae:	8a 2b       	or	r24, r26
     2b0:	8b 2b       	or	r24, r27
     2b2:	41 f0       	breq	.+16     	; 0x2c4 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     2b4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     2b8:	98 7f       	andi	r25, 0xF8	; 248
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	98 32       	cpi	r25, 0x28	; 40
     2be:	19 f4       	brne	.+6      	; 0x2c6 <i2c_write+0x40>
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	08 95       	ret
     2c4:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     2c6:	08 95       	ret

000002c8 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     2c8:	84 ec       	ldi	r24, 0xC4	; 196
     2ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
     2ce:	8f ef       	ldi	r24, 0xFF	; 255
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	a0 e0       	ldi	r26, 0x00	; 0
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     2d6:	ec eb       	ldi	r30, 0xBC	; 188
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	20 81       	ld	r18, Z
     2dc:	22 23       	and	r18, r18
     2de:	2c f0       	brlt	.+10     	; 0x2ea <i2c_readAck+0x22>
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	a1 09       	sbc	r26, r1
     2e4:	b1 09       	sbc	r27, r1
     2e6:	c8 f7       	brcc	.-14     	; 0x2da <i2c_readAck+0x12>
     2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     2ea:	89 2b       	or	r24, r25
     2ec:	8a 2b       	or	r24, r26
     2ee:	8b 2b       	or	r24, r27
     2f0:	19 f0       	breq	.+6      	; 0x2f8 <i2c_readAck+0x30>
		return 0;

    return TWDR;
     2f2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     2f6:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     2f8:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     2fa:	08 95       	ret

000002fc <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     2fc:	84 e8       	ldi	r24, 0x84	; 132
     2fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	a0 e0       	ldi	r26, 0x00	; 0
     308:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     30a:	ec eb       	ldi	r30, 0xBC	; 188
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	20 81       	ld	r18, Z
     310:	22 23       	and	r18, r18
     312:	2c f0       	brlt	.+10     	; 0x31e <i2c_readNak+0x22>
     314:	01 97       	sbiw	r24, 0x01	; 1
     316:	a1 09       	sbc	r26, r1
     318:	b1 09       	sbc	r27, r1
     31a:	c8 f7       	brcc	.-14     	; 0x30e <i2c_readNak+0x12>
     31c:	04 c0       	rjmp	.+8      	; 0x326 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     31e:	89 2b       	or	r24, r25
     320:	8a 2b       	or	r24, r26
     322:	8b 2b       	or	r24, r27
     324:	19 f0       	breq	.+6      	; 0x32c <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     326:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     32a:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     32c:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     32e:	08 95       	ret

00000330 <anglesFromAccel>:
/*
	filters roll pitch and yaw using complementary filter 
*/
void applyCompFilter(double * filteredAngle, double accelAngle, double gyroAngle, double alpha){
	*filteredAngle = (1-alpha) * gyroAngle + alpha * accelAngle;
}
     330:	2f 92       	push	r2
     332:	3f 92       	push	r3
     334:	4f 92       	push	r4
     336:	5f 92       	push	r5
     338:	6f 92       	push	r6
     33a:	7f 92       	push	r7
     33c:	8f 92       	push	r8
     33e:	9f 92       	push	r9
     340:	af 92       	push	r10
     342:	bf 92       	push	r11
     344:	cf 92       	push	r12
     346:	df 92       	push	r13
     348:	ef 92       	push	r14
     34a:	ff 92       	push	r15
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	2a 97       	sbiw	r28, 0x0a	; 10
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
     364:	9a 87       	std	Y+10, r25	; 0x0a
     366:	89 87       	std	Y+9, r24	; 0x09
     368:	1b 01       	movw	r2, r22
     36a:	2d 83       	std	Y+5, r18	; 0x05
     36c:	3e 83       	std	Y+6, r19	; 0x06
     36e:	4f 83       	std	Y+7, r20	; 0x07
     370:	58 87       	std	Y+8, r21	; 0x08
     372:	27 01       	movw	r4, r14
     374:	38 01       	movw	r6, r16
     376:	ca 01       	movw	r24, r20
     378:	b9 01       	movw	r22, r18
     37a:	0e 94 0c 0a 	call	0x1418	; 0x1418 <square>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	c6 01       	movw	r24, r12
     388:	b5 01       	movw	r22, r10
     38a:	0e 94 0c 0a 	call	0x1418	; 0x1418 <square>
     38e:	6b 01       	movw	r12, r22
     390:	7c 01       	movw	r14, r24
     392:	a7 01       	movw	r20, r14
     394:	96 01       	movw	r18, r12
     396:	69 81       	ldd	r22, Y+1	; 0x01
     398:	7a 81       	ldd	r23, Y+2	; 0x02
     39a:	8b 81       	ldd	r24, Y+3	; 0x03
     39c:	9c 81       	ldd	r25, Y+4	; 0x04
     39e:	0e 94 4c 07 	call	0xe98	; 0xe98 <__addsf3>
     3a2:	0e 94 cc 09 	call	0x1398	; 0x1398 <sqrt>
     3a6:	9b 01       	movw	r18, r22
     3a8:	ac 01       	movw	r20, r24
     3aa:	c3 01       	movw	r24, r6
     3ac:	b2 01       	movw	r22, r4
     3ae:	0e 94 cb 07 	call	0xf96	; 0xf96 <atan2>
     3b2:	e9 85       	ldd	r30, Y+9	; 0x09
     3b4:	fa 85       	ldd	r31, Y+10	; 0x0a
     3b6:	60 83       	st	Z, r22
     3b8:	71 83       	std	Z+1, r23	; 0x01
     3ba:	82 83       	std	Z+2, r24	; 0x02
     3bc:	93 83       	std	Z+3, r25	; 0x03
     3be:	c3 01       	movw	r24, r6
     3c0:	b2 01       	movw	r22, r4
     3c2:	0e 94 0c 0a 	call	0x1418	; 0x1418 <square>
     3c6:	4b 01       	movw	r8, r22
     3c8:	5c 01       	movw	r10, r24
     3ca:	a5 01       	movw	r20, r10
     3cc:	94 01       	movw	r18, r8
     3ce:	c7 01       	movw	r24, r14
     3d0:	b6 01       	movw	r22, r12
     3d2:	0e 94 4c 07 	call	0xe98	; 0xe98 <__addsf3>
     3d6:	0e 94 cc 09 	call	0x1398	; 0x1398 <sqrt>
     3da:	9b 01       	movw	r18, r22
     3dc:	ac 01       	movw	r20, r24
     3de:	6d 81       	ldd	r22, Y+5	; 0x05
     3e0:	7e 81       	ldd	r23, Y+6	; 0x06
     3e2:	8f 81       	ldd	r24, Y+7	; 0x07
     3e4:	98 85       	ldd	r25, Y+8	; 0x08
     3e6:	0e 94 cb 07 	call	0xf96	; 0xf96 <atan2>
     3ea:	dc 01       	movw	r26, r24
     3ec:	cb 01       	movw	r24, r22
     3ee:	b0 58       	subi	r27, 0x80	; 128
     3f0:	f1 01       	movw	r30, r2
     3f2:	80 83       	st	Z, r24
     3f4:	91 83       	std	Z+1, r25	; 0x01
     3f6:	a2 83       	std	Z+2, r26	; 0x02
     3f8:	b3 83       	std	Z+3, r27	; 0x03
     3fa:	2a 96       	adiw	r28, 0x0a	; 10
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	bf 90       	pop	r11
     418:	af 90       	pop	r10
     41a:	9f 90       	pop	r9
     41c:	8f 90       	pop	r8
     41e:	7f 90       	pop	r7
     420:	6f 90       	pop	r6
     422:	5f 90       	pop	r5
     424:	4f 90       	pop	r4
     426:	3f 90       	pop	r3
     428:	2f 90       	pop	r2
     42a:	08 95       	ret

0000042c <rk_integrator>:
     42c:	4f 92       	push	r4
     42e:	5f 92       	push	r5
     430:	6f 92       	push	r6
     432:	7f 92       	push	r7
     434:	8f 92       	push	r8
     436:	9f 92       	push	r9
     438:	af 92       	push	r10
     43a:	bf 92       	push	r11
     43c:	cf 92       	push	r12
     43e:	df 92       	push	r13
     440:	ef 92       	push	r14
     442:	ff 92       	push	r15
     444:	0f 93       	push	r16
     446:	1f 93       	push	r17
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	00 d0       	rcall	.+0      	; 0x44e <rk_integrator+0x22>
     44e:	00 d0       	rcall	.+0      	; 0x450 <rk_integrator+0x24>
     450:	00 d0       	rcall	.+0      	; 0x452 <rk_integrator+0x26>
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	8c 01       	movw	r16, r24
     458:	cb 01       	movw	r24, r22
     45a:	ba 01       	movw	r22, r20
     45c:	3e 83       	std	Y+6, r19	; 0x06
     45e:	2d 83       	std	Y+5, r18	; 0x05
     460:	f9 01       	movw	r30, r18
     462:	40 80       	ld	r4, Z
     464:	51 80       	ldd	r5, Z+1	; 0x01
     466:	62 80       	ldd	r6, Z+2	; 0x02
     468:	73 80       	ldd	r7, Z+3	; 0x03
     46a:	c4 80       	ldd	r12, Z+4	; 0x04
     46c:	d5 80       	ldd	r13, Z+5	; 0x05
     46e:	e6 80       	ldd	r14, Z+6	; 0x06
     470:	f7 80       	ldd	r15, Z+7	; 0x07
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	4e e9       	ldi	r20, 0x9E	; 158
     478:	52 e4       	ldi	r21, 0x42	; 66
     47a:	0e 94 2a 08 	call	0x1054	; 0x1054 <__divsf3>
     47e:	4b 01       	movw	r8, r22
     480:	5c 01       	movw	r10, r24
     482:	a7 01       	movw	r20, r14
     484:	96 01       	movw	r18, r12
     486:	c7 01       	movw	r24, r14
     488:	b6 01       	movw	r22, r12
     48a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__addsf3>
     48e:	ed 81       	ldd	r30, Y+5	; 0x05
     490:	fe 81       	ldd	r31, Y+6	; 0x06
     492:	20 85       	ldd	r18, Z+8	; 0x08
     494:	31 85       	ldd	r19, Z+9	; 0x09
     496:	42 85       	ldd	r20, Z+10	; 0x0a
     498:	53 85       	ldd	r21, Z+11	; 0x0b
     49a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__addsf3>
     49e:	69 83       	std	Y+1, r22	; 0x01
     4a0:	7a 83       	std	Y+2, r23	; 0x02
     4a2:	8b 83       	std	Y+3, r24	; 0x03
     4a4:	9c 83       	std	Y+4, r25	; 0x04
     4a6:	a3 01       	movw	r20, r6
     4a8:	92 01       	movw	r18, r4
     4aa:	c3 01       	movw	r24, r6
     4ac:	b2 01       	movw	r22, r4
     4ae:	0e 94 4c 07 	call	0xe98	; 0xe98 <__addsf3>
     4b2:	9b 01       	movw	r18, r22
     4b4:	ac 01       	movw	r20, r24
     4b6:	69 81       	ldd	r22, Y+1	; 0x01
     4b8:	7a 81       	ldd	r23, Y+2	; 0x02
     4ba:	8b 81       	ldd	r24, Y+3	; 0x03
     4bc:	9c 81       	ldd	r25, Y+4	; 0x04
     4be:	0e 94 4c 07 	call	0xe98	; 0xe98 <__addsf3>
     4c2:	a5 01       	movw	r20, r10
     4c4:	94 01       	movw	r18, r8
     4c6:	0e 94 4c 07 	call	0xe98	; 0xe98 <__addsf3>
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	40 ec       	ldi	r20, 0xC0	; 192
     4d0:	50 e4       	ldi	r21, 0x40	; 64
     4d2:	0e 94 2a 08 	call	0x1054	; 0x1054 <__divsf3>
     4d6:	9b 01       	movw	r18, r22
     4d8:	ac 01       	movw	r20, r24
     4da:	f8 01       	movw	r30, r16
     4dc:	60 81       	ld	r22, Z
     4de:	71 81       	ldd	r23, Z+1	; 0x01
     4e0:	82 81       	ldd	r24, Z+2	; 0x02
     4e2:	93 81       	ldd	r25, Z+3	; 0x03
     4e4:	0e 94 4c 07 	call	0xe98	; 0xe98 <__addsf3>
     4e8:	f8 01       	movw	r30, r16
     4ea:	60 83       	st	Z, r22
     4ec:	71 83       	std	Z+1, r23	; 0x01
     4ee:	82 83       	std	Z+2, r24	; 0x02
     4f0:	93 83       	std	Z+3, r25	; 0x03
     4f2:	ed 81       	ldd	r30, Y+5	; 0x05
     4f4:	fe 81       	ldd	r31, Y+6	; 0x06
     4f6:	c0 86       	std	Z+8, r12	; 0x08
     4f8:	d1 86       	std	Z+9, r13	; 0x09
     4fa:	e2 86       	std	Z+10, r14	; 0x0a
     4fc:	f3 86       	std	Z+11, r15	; 0x0b
     4fe:	44 82       	std	Z+4, r4	; 0x04
     500:	55 82       	std	Z+5, r5	; 0x05
     502:	66 82       	std	Z+6, r6	; 0x06
     504:	77 82       	std	Z+7, r7	; 0x07
     506:	80 82       	st	Z, r8
     508:	91 82       	std	Z+1, r9	; 0x01
     50a:	a2 82       	std	Z+2, r10	; 0x02
     50c:	b3 82       	std	Z+3, r11	; 0x03
     50e:	26 96       	adiw	r28, 0x06	; 6
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	1f 91       	pop	r17
     520:	0f 91       	pop	r16
     522:	ff 90       	pop	r15
     524:	ef 90       	pop	r14
     526:	df 90       	pop	r13
     528:	cf 90       	pop	r12
     52a:	bf 90       	pop	r11
     52c:	af 90       	pop	r10
     52e:	9f 90       	pop	r9
     530:	8f 90       	pop	r8
     532:	7f 90       	pop	r7
     534:	6f 90       	pop	r6
     536:	5f 90       	pop	r5
     538:	4f 90       	pop	r4
     53a:	08 95       	ret

0000053c <applyOffset>:
     53c:	8f 92       	push	r8
     53e:	9f 92       	push	r9
     540:	af 92       	push	r10
     542:	bf 92       	push	r11
     544:	cf 92       	push	r12
     546:	df 92       	push	r13
     548:	ef 92       	push	r14
     54a:	ff 92       	push	r15
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	4c 01       	movw	r8, r24
     556:	5b 01       	movw	r10, r22
     558:	6a 01       	movw	r12, r20
     55a:	e9 01       	movw	r28, r18
     55c:	26 ec       	ldi	r18, 0xC6	; 198
     55e:	3c ed       	ldi	r19, 0xDC	; 220
     560:	45 eb       	ldi	r20, 0xB5	; 181
     562:	5c e3       	ldi	r21, 0x3C	; 60
     564:	fc 01       	movw	r30, r24
     566:	60 81       	ld	r22, Z
     568:	71 81       	ldd	r23, Z+1	; 0x01
     56a:	82 81       	ldd	r24, Z+2	; 0x02
     56c:	93 81       	ldd	r25, Z+3	; 0x03
     56e:	0e 94 4b 07 	call	0xe96	; 0xe96 <__subsf3>
     572:	f4 01       	movw	r30, r8
     574:	60 83       	st	Z, r22
     576:	71 83       	std	Z+1, r23	; 0x01
     578:	82 83       	std	Z+2, r24	; 0x02
     57a:	93 83       	std	Z+3, r25	; 0x03
     57c:	2b e2       	ldi	r18, 0x2B	; 43
     57e:	36 ef       	ldi	r19, 0xF6	; 246
     580:	47 e1       	ldi	r20, 0x17	; 23
     582:	5d e3       	ldi	r21, 0x3D	; 61
     584:	f5 01       	movw	r30, r10
     586:	60 81       	ld	r22, Z
     588:	71 81       	ldd	r23, Z+1	; 0x01
     58a:	82 81       	ldd	r24, Z+2	; 0x02
     58c:	93 81       	ldd	r25, Z+3	; 0x03
     58e:	0e 94 4b 07 	call	0xe96	; 0xe96 <__subsf3>
     592:	f5 01       	movw	r30, r10
     594:	60 83       	st	Z, r22
     596:	71 83       	std	Z+1, r23	; 0x01
     598:	82 83       	std	Z+2, r24	; 0x02
     59a:	93 83       	std	Z+3, r25	; 0x03
     59c:	27 e5       	ldi	r18, 0x57	; 87
     59e:	3b e5       	ldi	r19, 0x5B	; 91
     5a0:	41 eb       	ldi	r20, 0xB1	; 177
     5a2:	5d e3       	ldi	r21, 0x3D	; 61
     5a4:	f6 01       	movw	r30, r12
     5a6:	60 81       	ld	r22, Z
     5a8:	71 81       	ldd	r23, Z+1	; 0x01
     5aa:	82 81       	ldd	r24, Z+2	; 0x02
     5ac:	93 81       	ldd	r25, Z+3	; 0x03
     5ae:	0e 94 4c 07 	call	0xe98	; 0xe98 <__addsf3>
     5b2:	f6 01       	movw	r30, r12
     5b4:	60 83       	st	Z, r22
     5b6:	71 83       	std	Z+1, r23	; 0x01
     5b8:	82 83       	std	Z+2, r24	; 0x02
     5ba:	93 83       	std	Z+3, r25	; 0x03
     5bc:	27 e2       	ldi	r18, 0x27	; 39
     5be:	30 ea       	ldi	r19, 0xA0	; 160
     5c0:	49 e0       	ldi	r20, 0x09	; 9
     5c2:	5c e3       	ldi	r21, 0x3C	; 60
     5c4:	68 81       	ld	r22, Y
     5c6:	79 81       	ldd	r23, Y+1	; 0x01
     5c8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ca:	9b 81       	ldd	r25, Y+3	; 0x03
     5cc:	0e 94 4b 07 	call	0xe96	; 0xe96 <__subsf3>
     5d0:	68 83       	st	Y, r22
     5d2:	79 83       	std	Y+1, r23	; 0x01
     5d4:	8a 83       	std	Y+2, r24	; 0x02
     5d6:	9b 83       	std	Y+3, r25	; 0x03
     5d8:	29 e2       	ldi	r18, 0x29	; 41
     5da:	3d ee       	ldi	r19, 0xED	; 237
     5dc:	45 ea       	ldi	r20, 0xA5	; 165
     5de:	5f e3       	ldi	r21, 0x3F	; 63
     5e0:	f8 01       	movw	r30, r16
     5e2:	60 81       	ld	r22, Z
     5e4:	71 81       	ldd	r23, Z+1	; 0x01
     5e6:	82 81       	ldd	r24, Z+2	; 0x02
     5e8:	93 81       	ldd	r25, Z+3	; 0x03
     5ea:	0e 94 4b 07 	call	0xe96	; 0xe96 <__subsf3>
     5ee:	f8 01       	movw	r30, r16
     5f0:	60 83       	st	Z, r22
     5f2:	71 83       	std	Z+1, r23	; 0x01
     5f4:	82 83       	std	Z+2, r24	; 0x02
     5f6:	93 83       	std	Z+3, r25	; 0x03
     5f8:	25 e7       	ldi	r18, 0x75	; 117
     5fa:	33 e9       	ldi	r19, 0x93	; 147
     5fc:	40 ea       	ldi	r20, 0xA0	; 160
     5fe:	5f e3       	ldi	r21, 0x3F	; 63
     600:	f7 01       	movw	r30, r14
     602:	60 81       	ld	r22, Z
     604:	71 81       	ldd	r23, Z+1	; 0x01
     606:	82 81       	ldd	r24, Z+2	; 0x02
     608:	93 81       	ldd	r25, Z+3	; 0x03
     60a:	0e 94 4b 07 	call	0xe96	; 0xe96 <__subsf3>
     60e:	f7 01       	movw	r30, r14
     610:	60 83       	st	Z, r22
     612:	71 83       	std	Z+1, r23	; 0x01
     614:	82 83       	std	Z+2, r24	; 0x02
     616:	93 83       	std	Z+3, r25	; 0x03
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	ff 90       	pop	r15
     622:	ef 90       	pop	r14
     624:	df 90       	pop	r13
     626:	cf 90       	pop	r12
     628:	bf 90       	pop	r11
     62a:	af 90       	pop	r10
     62c:	9f 90       	pop	r9
     62e:	8f 90       	pop	r8
     630:	08 95       	ret

00000632 <main>:

#endif

int main(void) {
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	c6 56       	subi	r28, 0x66	; 102
     63c:	d1 09       	sbc	r29, r1
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	f8 94       	cli
     642:	de bf       	out	0x3e, r29	; 62
     644:	0f be       	out	0x3f, r0	; 63
     646:	cd bf       	out	0x3d, r28	; 61

	#if MPU6050_GETATTITUDE == 0
	int16_t ax = 0;
     648:	1a 82       	std	Y+2, r1	; 0x02
     64a:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
     64c:	1c 82       	std	Y+4, r1	; 0x04
     64e:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
     650:	1e 82       	std	Y+6, r1	; 0x06
     652:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
     654:	18 86       	std	Y+8, r1	; 0x08
     656:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
     658:	1a 86       	std	Y+10, r1	; 0x0a
     65a:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
     65c:	1c 86       	std	Y+12, r1	; 0x0c
     65e:	1b 86       	std	Y+11, r1	; 0x0b
	double axg = 0;
     660:	1d 86       	std	Y+13, r1	; 0x0d
     662:	1e 86       	std	Y+14, r1	; 0x0e
     664:	1f 86       	std	Y+15, r1	; 0x0f
     666:	18 8a       	std	Y+16, r1	; 0x10
	double ayg = 0;
     668:	19 8a       	std	Y+17, r1	; 0x11
     66a:	1a 8a       	std	Y+18, r1	; 0x12
     66c:	1b 8a       	std	Y+19, r1	; 0x13
     66e:	1c 8a       	std	Y+20, r1	; 0x14
	double azg = 0;
     670:	1d 8a       	std	Y+21, r1	; 0x15
     672:	1e 8a       	std	Y+22, r1	; 0x16
     674:	1f 8a       	std	Y+23, r1	; 0x17
     676:	18 8e       	std	Y+24, r1	; 0x18
	double gxds = 0;
     678:	19 8e       	std	Y+25, r1	; 0x19
     67a:	1a 8e       	std	Y+26, r1	; 0x1a
     67c:	1b 8e       	std	Y+27, r1	; 0x1b
     67e:	1c 8e       	std	Y+28, r1	; 0x1c
	double gyds = 0;
     680:	1d 8e       	std	Y+29, r1	; 0x1d
     682:	1e 8e       	std	Y+30, r1	; 0x1e
     684:	1f 8e       	std	Y+31, r1	; 0x1f
     686:	18 a2       	std	Y+32, r1	; 0x20
	double gzds = 0; 
     688:	19 a2       	std	Y+33, r1	; 0x21
     68a:	1a a2       	std	Y+34, r1	; 0x22
     68c:	1b a2       	std	Y+35, r1	; 0x23
     68e:	1c a2       	std	Y+36, r1	; 0x24
	double azg_offset = -0.0870;
	double gxds_offset = 2.5316;
	double gyds_offset = 9.7539;
	double gzds_offset = 12.3735;*/
	//for runge-kutta integrator
	double angleX = 0.0;	//roll
     690:	1d a2       	std	Y+37, r1	; 0x25
     692:	1e a2       	std	Y+38, r1	; 0x26
     694:	1f a2       	std	Y+39, r1	; 0x27
     696:	18 a6       	std	Y+40, r1	; 0x28
	double angleY = 0.0;	//pitch
     698:	19 a6       	std	Y+41, r1	; 0x29
     69a:	1a a6       	std	Y+42, r1	; 0x2a
     69c:	1b a6       	std	Y+43, r1	; 0x2b
     69e:	1c a6       	std	Y+44, r1	; 0x2c
	double angleZ = 0.0;	//yaw
     6a0:	1d a6       	std	Y+45, r1	; 0x2d
     6a2:	1e a6       	std	Y+46, r1	; 0x2e
     6a4:	1f a6       	std	Y+47, r1	; 0x2f
     6a6:	18 aa       	std	Y+48, r1	; 0x30
	double prev_Xdps[3] = {0.0, 0.0, 0.0};	//holds last three gyro values for 
     6a8:	19 aa       	std	Y+49, r1	; 0x31
     6aa:	1a aa       	std	Y+50, r1	; 0x32
     6ac:	1b aa       	std	Y+51, r1	; 0x33
     6ae:	1c aa       	std	Y+52, r1	; 0x34
     6b0:	1d aa       	std	Y+53, r1	; 0x35
     6b2:	1e aa       	std	Y+54, r1	; 0x36
     6b4:	1f aa       	std	Y+55, r1	; 0x37
     6b6:	18 ae       	std	Y+56, r1	; 0x38
     6b8:	19 ae       	std	Y+57, r1	; 0x39
     6ba:	1a ae       	std	Y+58, r1	; 0x3a
     6bc:	1b ae       	std	Y+59, r1	; 0x3b
     6be:	1c ae       	std	Y+60, r1	; 0x3c
	double prev_Ydps[3] = {0.0, 0.0, 0.0};	// runge-kutta integrator
     6c0:	21 96       	adiw	r28, 0x01	; 1
     6c2:	1c ae       	std	Y+60, r1	; 0x3c
     6c4:	1d ae       	std	Y+61, r1	; 0x3d
     6c6:	1e ae       	std	Y+62, r1	; 0x3e
     6c8:	1f ae       	std	Y+63, r1	; 0x3f
     6ca:	21 97       	sbiw	r28, 0x01	; 1
     6cc:	25 96       	adiw	r28, 0x05	; 5
     6ce:	1c ae       	std	Y+60, r1	; 0x3c
     6d0:	1d ae       	std	Y+61, r1	; 0x3d
     6d2:	1e ae       	std	Y+62, r1	; 0x3e
     6d4:	1f ae       	std	Y+63, r1	; 0x3f
     6d6:	25 97       	sbiw	r28, 0x05	; 5
     6d8:	29 96       	adiw	r28, 0x09	; 9
     6da:	1c ae       	std	Y+60, r1	; 0x3c
     6dc:	1d ae       	std	Y+61, r1	; 0x3d
     6de:	1e ae       	std	Y+62, r1	; 0x3e
     6e0:	1f ae       	std	Y+63, r1	; 0x3f
     6e2:	29 97       	sbiw	r28, 0x09	; 9
	double prev_Zdps[3] = {0.0, 0.0, 0.0};
     6e4:	2d 96       	adiw	r28, 0x0d	; 13
     6e6:	1c ae       	std	Y+60, r1	; 0x3c
     6e8:	1d ae       	std	Y+61, r1	; 0x3d
     6ea:	1e ae       	std	Y+62, r1	; 0x3e
     6ec:	1f ae       	std	Y+63, r1	; 0x3f
     6ee:	2d 97       	sbiw	r28, 0x0d	; 13
     6f0:	61 96       	adiw	r28, 0x11	; 17
     6f2:	1c ae       	std	Y+60, r1	; 0x3c
     6f4:	1d ae       	std	Y+61, r1	; 0x3d
     6f6:	1e ae       	std	Y+62, r1	; 0x3e
     6f8:	1f ae       	std	Y+63, r1	; 0x3f
     6fa:	61 97       	sbiw	r28, 0x11	; 17
     6fc:	65 96       	adiw	r28, 0x15	; 21
     6fe:	1c ae       	std	Y+60, r1	; 0x3c
     700:	1d ae       	std	Y+61, r1	; 0x3d
     702:	1e ae       	std	Y+62, r1	; 0x3e
     704:	1f ae       	std	Y+63, r1	; 0x3f
     706:	65 97       	sbiw	r28, 0x15	; 21
	//used for complementary filter
	double tau = 1.0;		//desired time constant
	double dt = .005;		//based on sampling frequency (200Hz)
	double alpha = 0.8f; //tau / (tau + dt);
	//double yawFilt = 0.0;
	double rollAccel = 0.0;	//angles calculated from acceleration data
     708:	69 96       	adiw	r28, 0x19	; 25
     70a:	1c ae       	std	Y+60, r1	; 0x3c
     70c:	1d ae       	std	Y+61, r1	; 0x3d
     70e:	1e ae       	std	Y+62, r1	; 0x3e
     710:	1f ae       	std	Y+63, r1	; 0x3f
     712:	69 97       	sbiw	r28, 0x19	; 25
	double pitchAccel = 0.0;
     714:	6d 96       	adiw	r28, 0x1d	; 29
     716:	1c ae       	std	Y+60, r1	; 0x3c
     718:	1d ae       	std	Y+61, r1	; 0x3d
     71a:	1e ae       	std	Y+62, r1	; 0x3e
     71c:	1f ae       	std	Y+63, r1	; 0x3f
     71e:	6d 97       	sbiw	r28, 0x1d	; 29
	double gzds = 0;
	*/
	#endif

	//init uart
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
     720:	89 e1       	ldi	r24, 0x19	; 25
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 0e 07 	call	0xe1c	; 0xe1c <uart_init>

	//init interrupt
	sei();
     728:	78 94       	sei

	//init mpu6050
	mpu6050_init();
     72a:	0e 94 6e 05 	call	0xadc	; 0xadc <mpu6050_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     72e:	2f ef       	ldi	r18, 0xFF	; 255
     730:	80 e7       	ldi	r24, 0x70	; 112
     732:	92 e0       	ldi	r25, 0x02	; 2
     734:	21 50       	subi	r18, 0x01	; 1
     736:	80 40       	sbci	r24, 0x00	; 0
     738:	90 40       	sbci	r25, 0x00	; 0
     73a:	e1 f7       	brne	.-8      	; 0x734 <main+0x102>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <main+0x10c>
     73e:	00 00       	nop
/*
 *	Main Loop 
 */	
	for(;;) {
		#if MPU6050_GETATTITUDE == 0
		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     740:	ce 01       	movw	r24, r28
     742:	0b 96       	adiw	r24, 0x0b	; 11
     744:	7c 01       	movw	r14, r24
     746:	8e 01       	movw	r16, r28
     748:	07 5f       	subi	r16, 0xF7	; 247
     74a:	1f 4f       	sbci	r17, 0xFF	; 255
     74c:	9e 01       	movw	r18, r28
     74e:	29 5f       	subi	r18, 0xF9	; 249
     750:	3f 4f       	sbci	r19, 0xFF	; 255
     752:	ae 01       	movw	r20, r28
     754:	4b 5f       	subi	r20, 0xFB	; 251
     756:	5f 4f       	sbci	r21, 0xFF	; 255
     758:	be 01       	movw	r22, r28
     75a:	6d 5f       	subi	r22, 0xFD	; 253
     75c:	7f 4f       	sbci	r23, 0xFF	; 255
     75e:	0a 97       	sbiw	r24, 0x0a	; 10
     760:	0e 94 a2 05 	call	0xb44	; 0xb44 <mpu6050_getRawData>
		mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
     764:	ce 01       	movw	r24, r28
     766:	81 96       	adiw	r24, 0x21	; 33
     768:	7c 01       	movw	r14, r24
     76a:	0c 5e       	subi	r16, 0xEC	; 236
     76c:	1f 4f       	sbci	r17, 0xFF	; 255
     76e:	9e 01       	movw	r18, r28
     770:	27 5e       	subi	r18, 0xE7	; 231
     772:	3f 4f       	sbci	r19, 0xFF	; 255
     774:	ae 01       	movw	r20, r28
     776:	4b 5e       	subi	r20, 0xEB	; 235
     778:	5f 4f       	sbci	r21, 0xFF	; 255
     77a:	be 01       	movw	r22, r28
     77c:	6f 5e       	subi	r22, 0xEF	; 239
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	44 97       	sbiw	r24, 0x14	; 20
     782:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <mpu6050_getConvData>
		applyOffset(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
     786:	c7 01       	movw	r24, r14
     788:	9e 01       	movw	r18, r28
     78a:	27 5e       	subi	r18, 0xE7	; 231
     78c:	3f 4f       	sbci	r19, 0xFF	; 255
     78e:	ae 01       	movw	r20, r28
     790:	4b 5e       	subi	r20, 0xEB	; 235
     792:	5f 4f       	sbci	r21, 0xFF	; 255
     794:	be 01       	movw	r22, r28
     796:	6f 5e       	subi	r22, 0xEF	; 239
     798:	7f 4f       	sbci	r23, 0xFF	; 255
     79a:	44 97       	sbiw	r24, 0x14	; 20
     79c:	0e 94 9e 02 	call	0x53c	; 0x53c <applyOffset>

		//integrate all three axis
		rk_integrator(&angleX, gxds, prev_Xdps);
     7a0:	49 8d       	ldd	r20, Y+25	; 0x19
     7a2:	5a 8d       	ldd	r21, Y+26	; 0x1a
     7a4:	6b 8d       	ldd	r22, Y+27	; 0x1b
     7a6:	7c 8d       	ldd	r23, Y+28	; 0x1c
     7a8:	9e 01       	movw	r18, r28
     7aa:	2f 5c       	subi	r18, 0xCF	; 207
     7ac:	3f 4f       	sbci	r19, 0xFF	; 255
     7ae:	ce 01       	movw	r24, r28
     7b0:	85 96       	adiw	r24, 0x25	; 37
     7b2:	0e 94 16 02 	call	0x42c	; 0x42c <rk_integrator>
		rk_integrator(&angleY, gyds, prev_Ydps);
     7b6:	4d 8d       	ldd	r20, Y+29	; 0x1d
     7b8:	5e 8d       	ldd	r21, Y+30	; 0x1e
     7ba:	6f 8d       	ldd	r22, Y+31	; 0x1f
     7bc:	78 a1       	ldd	r23, Y+32	; 0x20
     7be:	9e 01       	movw	r18, r28
     7c0:	23 5c       	subi	r18, 0xC3	; 195
     7c2:	3f 4f       	sbci	r19, 0xFF	; 255
     7c4:	ce 01       	movw	r24, r28
     7c6:	89 96       	adiw	r24, 0x29	; 41
     7c8:	0e 94 16 02 	call	0x42c	; 0x42c <rk_integrator>
		rk_integrator(&angleZ, gzds, prev_Zdps);
     7cc:	49 a1       	ldd	r20, Y+33	; 0x21
     7ce:	5a a1       	ldd	r21, Y+34	; 0x22
     7d0:	6b a1       	ldd	r22, Y+35	; 0x23
     7d2:	7c a1       	ldd	r23, Y+36	; 0x24
     7d4:	9e 01       	movw	r18, r28
     7d6:	27 5b       	subi	r18, 0xB7	; 183
     7d8:	3f 4f       	sbci	r19, 0xFF	; 255
     7da:	ce 01       	movw	r24, r28
     7dc:	8d 96       	adiw	r24, 0x2d	; 45
     7de:	0e 94 16 02 	call	0x42c	; 0x42c <rk_integrator>
		outAngleX = angleX;
		outAngleY = angleY;
		outAngleZ = angleZ;
		*/
			
		anglesFromAccel(&rollAccel, &pitchAccel, axg, ayg, azg);
     7e2:	ad 88       	ldd	r10, Y+21	; 0x15
     7e4:	be 88       	ldd	r11, Y+22	; 0x16
     7e6:	cf 88       	ldd	r12, Y+23	; 0x17
     7e8:	d8 8c       	ldd	r13, Y+24	; 0x18
     7ea:	e9 88       	ldd	r14, Y+17	; 0x11
     7ec:	fa 88       	ldd	r15, Y+18	; 0x12
     7ee:	0b 89       	ldd	r16, Y+19	; 0x13
     7f0:	1c 89       	ldd	r17, Y+20	; 0x14
     7f2:	2d 85       	ldd	r18, Y+13	; 0x0d
     7f4:	3e 85       	ldd	r19, Y+14	; 0x0e
     7f6:	4f 85       	ldd	r20, Y+15	; 0x0f
     7f8:	58 89       	ldd	r21, Y+16	; 0x10
     7fa:	be 01       	movw	r22, r28
     7fc:	67 5a       	subi	r22, 0xA7	; 167
     7fe:	7f 4f       	sbci	r23, 0xFF	; 255
     800:	ce 01       	movw	r24, r28
     802:	8b 5a       	subi	r24, 0xAB	; 171
     804:	9f 4f       	sbci	r25, 0xFF	; 255
     806:	0e 94 98 01 	call	0x330	; 0x330 <anglesFromAccel>
		uart_puts("\r\n");
*/
		
		//uart_puts("Printing from getConvData\r\n");
		#if SERIALPRINTMODE == 0
			dtostrf(axg, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     80a:	6d 85       	ldd	r22, Y+13	; 0x0d
     80c:	7e 85       	ldd	r23, Y+14	; 0x0e
     80e:	8f 85       	ldd	r24, Y+15	; 0x0f
     810:	98 89       	ldd	r25, Y+16	; 0x10
     812:	8e 01       	movw	r16, r28
     814:	03 5a       	subi	r16, 0xA3	; 163
     816:	1f 4f       	sbci	r17, 0xFF	; 255
     818:	25 e0       	ldi	r18, 0x05	; 5
     81a:	43 e0       	ldi	r20, 0x03	; 3
     81c:	0e 94 25 0a 	call	0x144a	; 0x144a <dtostrf>
     820:	c8 01       	movw	r24, r16
     822:	0e 94 3c 07 	call	0xe78	; 0xe78 <uart_puts>
     826:	80 e2       	ldi	r24, 0x20	; 32
     828:	0e 94 27 07 	call	0xe4e	; 0xe4e <uart_putc>
			dtostrf(ayg, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     82c:	69 89       	ldd	r22, Y+17	; 0x11
     82e:	7a 89       	ldd	r23, Y+18	; 0x12
     830:	8b 89       	ldd	r24, Y+19	; 0x13
     832:	9c 89       	ldd	r25, Y+20	; 0x14
     834:	25 e0       	ldi	r18, 0x05	; 5
     836:	43 e0       	ldi	r20, 0x03	; 3
     838:	0e 94 25 0a 	call	0x144a	; 0x144a <dtostrf>
     83c:	c8 01       	movw	r24, r16
     83e:	0e 94 3c 07 	call	0xe78	; 0xe78 <uart_puts>
     842:	80 e2       	ldi	r24, 0x20	; 32
     844:	0e 94 27 07 	call	0xe4e	; 0xe4e <uart_putc>
			dtostrf(azg, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     848:	6d 89       	ldd	r22, Y+21	; 0x15
     84a:	7e 89       	ldd	r23, Y+22	; 0x16
     84c:	8f 89       	ldd	r24, Y+23	; 0x17
     84e:	98 8d       	ldd	r25, Y+24	; 0x18
     850:	25 e0       	ldi	r18, 0x05	; 5
     852:	43 e0       	ldi	r20, 0x03	; 3
     854:	0e 94 25 0a 	call	0x144a	; 0x144a <dtostrf>
     858:	c8 01       	movw	r24, r16
     85a:	0e 94 3c 07 	call	0xe78	; 0xe78 <uart_puts>
     85e:	80 e2       	ldi	r24, 0x20	; 32
     860:	0e 94 27 07 	call	0xe4e	; 0xe4e <uart_putc>
			dtostrf(gxds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     864:	69 8d       	ldd	r22, Y+25	; 0x19
     866:	7a 8d       	ldd	r23, Y+26	; 0x1a
     868:	8b 8d       	ldd	r24, Y+27	; 0x1b
     86a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     86c:	25 e0       	ldi	r18, 0x05	; 5
     86e:	43 e0       	ldi	r20, 0x03	; 3
     870:	0e 94 25 0a 	call	0x144a	; 0x144a <dtostrf>
     874:	c8 01       	movw	r24, r16
     876:	0e 94 3c 07 	call	0xe78	; 0xe78 <uart_puts>
     87a:	80 e2       	ldi	r24, 0x20	; 32
     87c:	0e 94 27 07 	call	0xe4e	; 0xe4e <uart_putc>
			dtostrf(gyds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     880:	6d 8d       	ldd	r22, Y+29	; 0x1d
     882:	7e 8d       	ldd	r23, Y+30	; 0x1e
     884:	8f 8d       	ldd	r24, Y+31	; 0x1f
     886:	98 a1       	ldd	r25, Y+32	; 0x20
     888:	25 e0       	ldi	r18, 0x05	; 5
     88a:	43 e0       	ldi	r20, 0x03	; 3
     88c:	0e 94 25 0a 	call	0x144a	; 0x144a <dtostrf>
     890:	c8 01       	movw	r24, r16
     892:	0e 94 3c 07 	call	0xe78	; 0xe78 <uart_puts>
     896:	80 e2       	ldi	r24, 0x20	; 32
     898:	0e 94 27 07 	call	0xe4e	; 0xe4e <uart_putc>
			dtostrf(gzds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     89c:	69 a1       	ldd	r22, Y+33	; 0x21
     89e:	7a a1       	ldd	r23, Y+34	; 0x22
     8a0:	8b a1       	ldd	r24, Y+35	; 0x23
     8a2:	9c a1       	ldd	r25, Y+36	; 0x24
     8a4:	25 e0       	ldi	r18, 0x05	; 5
     8a6:	43 e0       	ldi	r20, 0x03	; 3
     8a8:	0e 94 25 0a 	call	0x144a	; 0x144a <dtostrf>
     8ac:	c8 01       	movw	r24, r16
     8ae:	0e 94 3c 07 	call	0xe78	; 0xe78 <uart_puts>
     8b2:	80 e2       	ldi	r24, 0x20	; 32
     8b4:	0e 94 27 07 	call	0xe4e	; 0xe4e <uart_putc>
			dtostrf(gyds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
			dtostrf(gzds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');*/
			uart_puts("\r\n");
		#endif
		
		uart_puts("\r\n");
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	0e 94 3c 07 	call	0xe78	; 0xe78 <uart_puts>
     8c0:	8f e3       	ldi	r24, 0x3F	; 63
     8c2:	9c e9       	ldi	r25, 0x9C	; 156
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	f1 f7       	brne	.-4      	; 0x8c4 <main+0x292>
     8c8:	00 c0       	rjmp	.+0      	; 0x8ca <main+0x298>
     8ca:	00 00       	nop
     8cc:	39 cf       	rjmp	.-398    	; 0x740 <main+0x10e>

000008ce <mpu6050_readBytes>:
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
	if(buffer[0] == 0x34)
		return 1;
	else
		return 0;
}
     8ce:	af 92       	push	r10
     8d0:	bf 92       	push	r11
     8d2:	cf 92       	push	r12
     8d4:	df 92       	push	r13
     8d6:	ff 92       	push	r15
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	66 23       	and	r22, r22
     8e2:	b9 f1       	breq	.+110    	; 0x952 <__stack+0x53>
     8e4:	c5 2f       	mov	r28, r21
     8e6:	d4 2f       	mov	r29, r20
     8e8:	f6 2e       	mov	r15, r22
     8ea:	18 2f       	mov	r17, r24
     8ec:	80 ed       	ldi	r24, 0xD0	; 208
     8ee:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_start>
     8f2:	81 2f       	mov	r24, r17
     8f4:	0e 94 43 01 	call	0x286	; 0x286 <i2c_write>
     8f8:	85 e3       	ldi	r24, 0x35	; 53
     8fa:	8a 95       	dec	r24
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <mpu6050_readBytes+0x2c>
     8fe:	00 00       	nop
     900:	81 ed       	ldi	r24, 0xD1	; 209
     902:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_start>
     906:	0d 2f       	mov	r16, r29
     908:	1c 2f       	mov	r17, r28
     90a:	cc 24       	eor	r12, r12
     90c:	ca 94       	dec	r12
     90e:	cf 0c       	add	r12, r15
     910:	d1 2c       	mov	r13, r1
     912:	ef ef       	ldi	r30, 0xFF	; 255
     914:	ce 1a       	sub	r12, r30
     916:	de 0a       	sbc	r13, r30
     918:	c0 e0       	ldi	r28, 0x00	; 0
     91a:	d0 e0       	ldi	r29, 0x00	; 0
     91c:	af 2c       	mov	r10, r15
     91e:	b1 2c       	mov	r11, r1
     920:	f1 e0       	ldi	r31, 0x01	; 1
     922:	af 1a       	sub	r10, r31
     924:	b1 08       	sbc	r11, r1
     926:	ac 16       	cp	r10, r28
     928:	bd 06       	cpc	r11, r29
     92a:	29 f4       	brne	.+10     	; 0x936 <__stack+0x37>
     92c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <i2c_readNak>
     930:	f8 01       	movw	r30, r16
     932:	80 83       	st	Z, r24
     934:	04 c0       	rjmp	.+8      	; 0x93e <__stack+0x3f>
     936:	0e 94 64 01 	call	0x2c8	; 0x2c8 <i2c_readAck>
     93a:	f8 01       	movw	r30, r16
     93c:	80 83       	st	Z, r24
     93e:	21 96       	adiw	r28, 0x01	; 1
     940:	0f 5f       	subi	r16, 0xFF	; 255
     942:	1f 4f       	sbci	r17, 0xFF	; 255
     944:	cc 15       	cp	r28, r12
     946:	dd 05       	cpc	r29, r13
     948:	71 f7       	brne	.-36     	; 0x926 <__stack+0x27>
     94a:	cf 2d       	mov	r28, r15
     94c:	0e 94 33 01 	call	0x266	; 0x266 <i2c_stop>
     950:	01 c0       	rjmp	.+2      	; 0x954 <__stack+0x55>
     952:	c0 e0       	ldi	r28, 0x00	; 0
     954:	8c 2f       	mov	r24, r28
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	df 90       	pop	r13
     962:	cf 90       	pop	r12
     964:	bf 90       	pop	r11
     966:	af 90       	pop	r10
     968:	08 95       	ret

0000096a <mpu6050_readByte>:
     96a:	ab 01       	movw	r20, r22
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	0e 94 67 04 	call	0x8ce	; 0x8ce <mpu6050_readBytes>
     972:	08 95       	ret

00000974 <mpu6050_writeBytes>:
     974:	ef 92       	push	r14
     976:	ff 92       	push	r15
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	66 23       	and	r22, r22
     982:	d1 f0       	breq	.+52     	; 0x9b8 <mpu6050_writeBytes+0x44>
     984:	7a 01       	movw	r14, r20
     986:	16 2f       	mov	r17, r22
     988:	c8 2f       	mov	r28, r24
     98a:	80 ed       	ldi	r24, 0xD0	; 208
     98c:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_start>
     990:	8c 2f       	mov	r24, r28
     992:	0e 94 43 01 	call	0x286	; 0x286 <i2c_write>
     996:	e7 01       	movw	r28, r14
     998:	6f ef       	ldi	r22, 0xFF	; 255
     99a:	61 0f       	add	r22, r17
     99c:	06 2f       	mov	r16, r22
     99e:	10 e0       	ldi	r17, 0x00	; 0
     9a0:	0f 5f       	subi	r16, 0xFF	; 255
     9a2:	1f 4f       	sbci	r17, 0xFF	; 255
     9a4:	0e 0d       	add	r16, r14
     9a6:	1f 1d       	adc	r17, r15
     9a8:	89 91       	ld	r24, Y+
     9aa:	0e 94 43 01 	call	0x286	; 0x286 <i2c_write>
     9ae:	c0 17       	cp	r28, r16
     9b0:	d1 07       	cpc	r29, r17
     9b2:	d1 f7       	brne	.-12     	; 0x9a8 <mpu6050_writeBytes+0x34>
     9b4:	0e 94 33 01 	call	0x266	; 0x266 <i2c_stop>
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	08 95       	ret

000009c6 <mpu6050_writeByte>:
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	1f 92       	push	r1
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	69 83       	std	Y+1, r22	; 0x01
     9d2:	ae 01       	movw	r20, r28
     9d4:	4f 5f       	subi	r20, 0xFF	; 255
     9d6:	5f 4f       	sbci	r21, 0xFF	; 255
     9d8:	61 e0       	ldi	r22, 0x01	; 1
     9da:	0e 94 ba 04 	call	0x974	; 0x974 <mpu6050_writeBytes>
     9de:	0f 90       	pop	r0
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <mpu6050_writeBits>:
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	1f 92       	push	r1
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	44 23       	and	r20, r20
     9fa:	89 f1       	breq	.+98     	; 0xa5e <mpu6050_writeBits+0x78>
     9fc:	f2 2e       	mov	r15, r18
     9fe:	14 2f       	mov	r17, r20
     a00:	06 2f       	mov	r16, r22
     a02:	e8 2e       	mov	r14, r24
     a04:	19 82       	std	Y+1, r1	; 0x01
     a06:	be 01       	movw	r22, r28
     a08:	6f 5f       	subi	r22, 0xFF	; 255
     a0a:	7f 4f       	sbci	r23, 0xFF	; 255
     a0c:	0e 94 b5 04 	call	0x96a	; 0x96a <mpu6050_readByte>
     a10:	88 23       	and	r24, r24
     a12:	29 f1       	breq	.+74     	; 0xa5e <mpu6050_writeBits+0x78>
     a14:	40 2f       	mov	r20, r16
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	41 1b       	sub	r20, r17
     a1a:	51 09       	sbc	r21, r1
     a1c:	4f 5f       	subi	r20, 0xFF	; 255
     a1e:	5f 4f       	sbci	r21, 0xFF	; 255
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <mpu6050_writeBits+0x44>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	1a 95       	dec	r17
     a2c:	e2 f7       	brpl	.-8      	; 0xa26 <mpu6050_writeBits+0x40>
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	04 2e       	mov	r0, r20
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <mpu6050_writeBits+0x52>
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	0a 94       	dec	r0
     a3a:	e2 f7       	brpl	.-8      	; 0xa34 <mpu6050_writeBits+0x4e>
     a3c:	2f 2d       	mov	r18, r15
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <mpu6050_writeBits+0x60>
     a42:	22 0f       	add	r18, r18
     a44:	33 1f       	adc	r19, r19
     a46:	4a 95       	dec	r20
     a48:	e2 f7       	brpl	.-8      	; 0xa42 <mpu6050_writeBits+0x5c>
     a4a:	68 2f       	mov	r22, r24
     a4c:	60 95       	com	r22
     a4e:	99 81       	ldd	r25, Y+1	; 0x01
     a50:	69 23       	and	r22, r25
     a52:	82 23       	and	r24, r18
     a54:	68 2b       	or	r22, r24
     a56:	69 83       	std	Y+1, r22	; 0x01
     a58:	8e 2d       	mov	r24, r14
     a5a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <mpu6050_writeByte>
     a5e:	0f 90       	pop	r0
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	08 95       	ret

00000a6e <mpu6050_writeBit>:
     a6e:	ff 92       	push	r15
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	1f 92       	push	r1
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
     a7e:	18 2f       	mov	r17, r24
     a80:	06 2f       	mov	r16, r22
     a82:	f4 2e       	mov	r15, r20
     a84:	be 01       	movw	r22, r28
     a86:	6f 5f       	subi	r22, 0xFF	; 255
     a88:	7f 4f       	sbci	r23, 0xFF	; 255
     a8a:	0e 94 b5 04 	call	0x96a	; 0x96a <mpu6050_readByte>
     a8e:	ff 20       	and	r15, r15
     a90:	51 f0       	breq	.+20     	; 0xaa6 <mpu6050_writeBit+0x38>
     a92:	61 e0       	ldi	r22, 0x01	; 1
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <mpu6050_writeBit+0x2e>
     a98:	66 0f       	add	r22, r22
     a9a:	77 1f       	adc	r23, r23
     a9c:	0a 95       	dec	r16
     a9e:	e2 f7       	brpl	.-8      	; 0xa98 <mpu6050_writeBit+0x2a>
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	68 2b       	or	r22, r24
     aa4:	0a c0       	rjmp	.+20     	; 0xaba <mpu6050_writeBit+0x4c>
     aa6:	61 e0       	ldi	r22, 0x01	; 1
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <mpu6050_writeBit+0x42>
     aac:	66 0f       	add	r22, r22
     aae:	77 1f       	adc	r23, r23
     ab0:	0a 95       	dec	r16
     ab2:	e2 f7       	brpl	.-8      	; 0xaac <mpu6050_writeBit+0x3e>
     ab4:	60 95       	com	r22
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
     ab8:	68 23       	and	r22, r24
     aba:	69 83       	std	Y+1, r22	; 0x01
     abc:	81 2f       	mov	r24, r17
     abe:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <mpu6050_writeByte>
     ac2:	0f 90       	pop	r0
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	08 95       	ret

00000ad0 <mpu6050_setSleepDisabled>:
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	66 e0       	ldi	r22, 0x06	; 6
     ad4:	8b e6       	ldi	r24, 0x6B	; 107
     ad6:	0e 94 37 05 	call	0xa6e	; 0xa6e <mpu6050_writeBit>
     ada:	08 95       	ret

00000adc <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
     adc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae0:	25 e3       	ldi	r18, 0x35	; 53
     ae2:	2a 95       	dec	r18
     ae4:	f1 f7       	brne	.-4      	; 0xae2 <mpu6050_init+0x6>
     ae6:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
     aea:	91 ee       	ldi	r25, 0xE1	; 225
     aec:	24 e0       	ldi	r18, 0x04	; 4
     aee:	81 50       	subi	r24, 0x01	; 1
     af0:	90 40       	sbci	r25, 0x00	; 0
     af2:	20 40       	sbci	r18, 0x00	; 0
     af4:	e1 f7       	brne	.-8      	; 0xaee <mpu6050_init+0x12>
     af6:	00 c0       	rjmp	.+0      	; 0xaf8 <mpu6050_init+0x1c>
     af8:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
     afa:	0e 94 68 05 	call	0xad0	; 0xad0 <mpu6050_setSleepDisabled>
     afe:	8f e3       	ldi	r24, 0x3F	; 63
     b00:	9c e9       	ldi	r25, 0x9C	; 156
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <mpu6050_init+0x26>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <mpu6050_init+0x2c>
     b08:	00 00       	nop
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
     b0a:	21 e0       	ldi	r18, 0x01	; 1
     b0c:	43 e0       	ldi	r20, 0x03	; 3
     b0e:	62 e0       	ldi	r22, 0x02	; 2
     b10:	8b e6       	ldi	r24, 0x6B	; 107
     b12:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
     b16:	23 e0       	ldi	r18, 0x03	; 3
     b18:	43 e0       	ldi	r20, 0x03	; 3
     b1a:	62 e0       	ldi	r22, 0x02	; 2
     b1c:	8a e1       	ldi	r24, 0x1A	; 26
     b1e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <mpu6050_writeBits>
    //set sample rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
     b22:	64 e0       	ldi	r22, 0x04	; 4
     b24:	89 e1       	ldi	r24, 0x19	; 25
     b26:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	42 e0       	ldi	r20, 0x02	; 2
     b2e:	64 e0       	ldi	r22, 0x04	; 4
     b30:	8b e1       	ldi	r24, 0x1B	; 27
     b32:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	42 e0       	ldi	r20, 0x02	; 2
     b3a:	64 e0       	ldi	r22, 0x04	; 4
     b3c:	8c e1       	ldi	r24, 0x1C	; 28
     b3e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <mpu6050_writeBits>
     b42:	08 95       	ret

00000b44 <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     b44:	8f 92       	push	r8
     b46:	9f 92       	push	r9
     b48:	af 92       	push	r10
     b4a:	bf 92       	push	r11
     b4c:	cf 92       	push	r12
     b4e:	df 92       	push	r13
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	4c 01       	movw	r8, r24
     b5e:	5b 01       	movw	r10, r22
     b60:	6a 01       	movw	r12, r20
     b62:	e9 01       	movw	r28, r18
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
     b64:	49 e4       	ldi	r20, 0x49	; 73
     b66:	51 e0       	ldi	r21, 0x01	; 1
     b68:	6e e0       	ldi	r22, 0x0E	; 14
     b6a:	8b e3       	ldi	r24, 0x3B	; 59
     b6c:	0e 94 67 04 	call	0x8ce	; 0x8ce <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     b70:	e9 e4       	ldi	r30, 0x49	; 73
     b72:	f1 e0       	ldi	r31, 0x01	; 1
     b74:	20 81       	ld	r18, Z
     b76:	81 81       	ldd	r24, Z+1	; 0x01
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	92 2b       	or	r25, r18
     b7c:	d4 01       	movw	r26, r8
     b7e:	8d 93       	st	X+, r24
     b80:	9c 93       	st	X, r25
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     b82:	22 81       	ldd	r18, Z+2	; 0x02
     b84:	83 81       	ldd	r24, Z+3	; 0x03
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	92 2b       	or	r25, r18
     b8a:	d5 01       	movw	r26, r10
     b8c:	8d 93       	st	X+, r24
     b8e:	9c 93       	st	X, r25
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
     b90:	24 81       	ldd	r18, Z+4	; 0x04
     b92:	85 81       	ldd	r24, Z+5	; 0x05
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	92 2b       	or	r25, r18
     b98:	d6 01       	movw	r26, r12
     b9a:	8d 93       	st	X+, r24
     b9c:	9c 93       	st	X, r25
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     b9e:	20 85       	ldd	r18, Z+8	; 0x08
     ba0:	81 85       	ldd	r24, Z+9	; 0x09
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	92 2b       	or	r25, r18
     ba6:	99 83       	std	Y+1, r25	; 0x01
     ba8:	88 83       	st	Y, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     baa:	22 85       	ldd	r18, Z+10	; 0x0a
     bac:	83 85       	ldd	r24, Z+11	; 0x0b
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	92 2b       	or	r25, r18
     bb2:	d8 01       	movw	r26, r16
     bb4:	8d 93       	st	X+, r24
     bb6:	9c 93       	st	X, r25
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     bb8:	24 85       	ldd	r18, Z+12	; 0x0c
     bba:	85 85       	ldd	r24, Z+13	; 0x0d
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	92 2b       	or	r25, r18
     bc0:	f7 01       	movw	r30, r14
     bc2:	91 83       	std	Z+1, r25	; 0x01
     bc4:	80 83       	st	Z, r24
}
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	df 90       	pop	r13
     bd4:	cf 90       	pop	r12
     bd6:	bf 90       	pop	r11
     bd8:	af 90       	pop	r10
     bda:	9f 90       	pop	r9
     bdc:	8f 90       	pop	r8
     bde:	08 95       	ret

00000be0 <mpu6050_getConvData>:

/*
 * get raw data converted to g and deg/sec values
 */
void mpu6050_getConvData(double* axg, double* ayg, double* azg, double* gxds, double* gyds, double* gzds) {
     be0:	2f 92       	push	r2
     be2:	3f 92       	push	r3
     be4:	4f 92       	push	r4
     be6:	5f 92       	push	r5
     be8:	6f 92       	push	r6
     bea:	7f 92       	push	r7
     bec:	8f 92       	push	r8
     bee:	9f 92       	push	r9
     bf0:	af 92       	push	r10
     bf2:	bf 92       	push	r11
     bf4:	cf 92       	push	r12
     bf6:	df 92       	push	r13
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	2c 97       	sbiw	r28, 0x0c	; 12
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	3c 01       	movw	r6, r24
     c16:	4b 01       	movw	r8, r22
     c18:	5a 01       	movw	r10, r20
     c1a:	69 01       	movw	r12, r18
     c1c:	28 01       	movw	r4, r16
     c1e:	17 01       	movw	r2, r14
	int16_t ax = 0;
     c20:	1a 82       	std	Y+2, r1	; 0x02
     c22:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
     c24:	1c 82       	std	Y+4, r1	; 0x04
     c26:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
     c28:	1e 82       	std	Y+6, r1	; 0x06
     c2a:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
     c2c:	18 86       	std	Y+8, r1	; 0x08
     c2e:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
     c30:	1a 86       	std	Y+10, r1	; 0x0a
     c32:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
     c34:	1c 86       	std	Y+12, r1	; 0x0c
     c36:	1b 86       	std	Y+11, r1	; 0x0b
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     c38:	ce 01       	movw	r24, r28
     c3a:	0b 96       	adiw	r24, 0x0b	; 11
     c3c:	7c 01       	movw	r14, r24
     c3e:	8e 01       	movw	r16, r28
     c40:	07 5f       	subi	r16, 0xF7	; 247
     c42:	1f 4f       	sbci	r17, 0xFF	; 255
     c44:	9e 01       	movw	r18, r28
     c46:	29 5f       	subi	r18, 0xF9	; 249
     c48:	3f 4f       	sbci	r19, 0xFF	; 255
     c4a:	ae 01       	movw	r20, r28
     c4c:	4b 5f       	subi	r20, 0xFB	; 251
     c4e:	5f 4f       	sbci	r21, 0xFF	; 255
     c50:	be 01       	movw	r22, r28
     c52:	6d 5f       	subi	r22, 0xFD	; 253
     c54:	7f 4f       	sbci	r23, 0xFF	; 255
     c56:	0a 97       	sbiw	r24, 0x0a	; 10
     c58:	0e 94 a2 05 	call	0xb44	; 0xb44 <mpu6050_getRawData>
    *azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
    *gxds = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN;
	*gyds = (double)(gy-MPU6050_GYOFFSET)/MPU6050_GYGAIN;
	*gzds = (double)(gz-MPU6050_GZOFFSET)/MPU6050_GZGAIN;
	#else
    *axg = (double)(ax)/MPU6050_AGAIN;
     c5c:	69 81       	ldd	r22, Y+1	; 0x01
     c5e:	7a 81       	ldd	r23, Y+2	; 0x02
     c60:	07 2e       	mov	r0, r23
     c62:	00 0c       	add	r0, r0
     c64:	88 0b       	sbc	r24, r24
     c66:	99 0b       	sbc	r25, r25
     c68:	0e 94 9e 08 	call	0x113c	; 0x113c <__floatsisf>
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	59 e3       	ldi	r21, 0x39	; 57
     c74:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     c78:	f3 01       	movw	r30, r6
     c7a:	60 83       	st	Z, r22
     c7c:	71 83       	std	Z+1, r23	; 0x01
     c7e:	82 83       	std	Z+2, r24	; 0x02
     c80:	93 83       	std	Z+3, r25	; 0x03
    *ayg = (double)(ay)/MPU6050_AGAIN;
     c82:	6b 81       	ldd	r22, Y+3	; 0x03
     c84:	7c 81       	ldd	r23, Y+4	; 0x04
     c86:	07 2e       	mov	r0, r23
     c88:	00 0c       	add	r0, r0
     c8a:	88 0b       	sbc	r24, r24
     c8c:	99 0b       	sbc	r25, r25
     c8e:	0e 94 9e 08 	call	0x113c	; 0x113c <__floatsisf>
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	59 e3       	ldi	r21, 0x39	; 57
     c9a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     c9e:	f4 01       	movw	r30, r8
     ca0:	60 83       	st	Z, r22
     ca2:	71 83       	std	Z+1, r23	; 0x01
     ca4:	82 83       	std	Z+2, r24	; 0x02
     ca6:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az)/MPU6050_AGAIN;
     ca8:	6d 81       	ldd	r22, Y+5	; 0x05
     caa:	7e 81       	ldd	r23, Y+6	; 0x06
     cac:	07 2e       	mov	r0, r23
     cae:	00 0c       	add	r0, r0
     cb0:	88 0b       	sbc	r24, r24
     cb2:	99 0b       	sbc	r25, r25
     cb4:	0e 94 9e 08 	call	0x113c	; 0x113c <__floatsisf>
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	59 e3       	ldi	r21, 0x39	; 57
     cc0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__mulsf3>
     cc4:	f5 01       	movw	r30, r10
     cc6:	60 83       	st	Z, r22
     cc8:	71 83       	std	Z+1, r23	; 0x01
     cca:	82 83       	std	Z+2, r24	; 0x02
     ccc:	93 83       	std	Z+3, r25	; 0x03
    *gxds = (double)(gx)/MPU6050_GGAIN;
     cce:	6f 81       	ldd	r22, Y+7	; 0x07
     cd0:	78 85       	ldd	r23, Y+8	; 0x08
     cd2:	07 2e       	mov	r0, r23
     cd4:	00 0c       	add	r0, r0
     cd6:	88 0b       	sbc	r24, r24
     cd8:	99 0b       	sbc	r25, r25
     cda:	0e 94 9e 08 	call	0x113c	; 0x113c <__floatsisf>
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	43 e0       	ldi	r20, 0x03	; 3
     ce4:	53 e4       	ldi	r21, 0x43	; 67
     ce6:	0e 94 2a 08 	call	0x1054	; 0x1054 <__divsf3>
     cea:	f6 01       	movw	r30, r12
     cec:	60 83       	st	Z, r22
     cee:	71 83       	std	Z+1, r23	; 0x01
     cf0:	82 83       	std	Z+2, r24	; 0x02
     cf2:	93 83       	std	Z+3, r25	; 0x03
	*gyds = (double)(gy)/MPU6050_GGAIN;
     cf4:	69 85       	ldd	r22, Y+9	; 0x09
     cf6:	7a 85       	ldd	r23, Y+10	; 0x0a
     cf8:	07 2e       	mov	r0, r23
     cfa:	00 0c       	add	r0, r0
     cfc:	88 0b       	sbc	r24, r24
     cfe:	99 0b       	sbc	r25, r25
     d00:	0e 94 9e 08 	call	0x113c	; 0x113c <__floatsisf>
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	43 e0       	ldi	r20, 0x03	; 3
     d0a:	53 e4       	ldi	r21, 0x43	; 67
     d0c:	0e 94 2a 08 	call	0x1054	; 0x1054 <__divsf3>
     d10:	f2 01       	movw	r30, r4
     d12:	60 83       	st	Z, r22
     d14:	71 83       	std	Z+1, r23	; 0x01
     d16:	82 83       	std	Z+2, r24	; 0x02
     d18:	93 83       	std	Z+3, r25	; 0x03
	*gzds = (double)(gz)/MPU6050_GGAIN;
     d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1e:	07 2e       	mov	r0, r23
     d20:	00 0c       	add	r0, r0
     d22:	88 0b       	sbc	r24, r24
     d24:	99 0b       	sbc	r25, r25
     d26:	0e 94 9e 08 	call	0x113c	; 0x113c <__floatsisf>
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	43 e0       	ldi	r20, 0x03	; 3
     d30:	53 e4       	ldi	r21, 0x43	; 67
     d32:	0e 94 2a 08 	call	0x1054	; 0x1054 <__divsf3>
     d36:	f1 01       	movw	r30, r2
     d38:	60 83       	st	Z, r22
     d3a:	71 83       	std	Z+1, r23	; 0x01
     d3c:	82 83       	std	Z+2, r24	; 0x02
     d3e:	93 83       	std	Z+3, r25	; 0x03
	#endif
}
     d40:	2c 96       	adiw	r28, 0x0c	; 12
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	ff 90       	pop	r15
     d56:	ef 90       	pop	r14
     d58:	df 90       	pop	r13
     d5a:	cf 90       	pop	r12
     d5c:	bf 90       	pop	r11
     d5e:	af 90       	pop	r10
     d60:	9f 90       	pop	r9
     d62:	8f 90       	pop	r8
     d64:	7f 90       	pop	r7
     d66:	6f 90       	pop	r6
     d68:	5f 90       	pop	r5
     d6a:	4f 90       	pop	r4
     d6c:	3f 90       	pop	r3
     d6e:	2f 90       	pop	r2
     d70:	08 95       	ret

00000d72 <__vector_18>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
     d72:	1f 92       	push	r1
     d74:	0f 92       	push	r0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	0f 92       	push	r0
     d7a:	11 24       	eor	r1, r1
     d7c:	2f 93       	push	r18
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	ef 93       	push	r30
     d84:	ff 93       	push	r31
     d86:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     d8a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     d8e:	88 71       	andi	r24, 0x18	; 24
     d90:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <UART_RxHead>
     d94:	ef 5f       	subi	r30, 0xFF	; 255
     d96:	ef 71       	andi	r30, 0x1F	; 31
     d98:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <UART_RxTail>
     d9c:	e9 17       	cp	r30, r25
     d9e:	39 f0       	breq	.+14     	; 0xdae <__vector_18+0x3c>
     da0:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <UART_RxHead>
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	e7 5f       	subi	r30, 0xF7	; 247
     da8:	fe 4f       	sbci	r31, 0xFE	; 254
     daa:	20 83       	st	Z, r18
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <__vector_18+0x3e>
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
     db4:	ff 91       	pop	r31
     db6:	ef 91       	pop	r30
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	2f 91       	pop	r18
     dbe:	0f 90       	pop	r0
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	0f 90       	pop	r0
     dc4:	1f 90       	pop	r1
     dc6:	18 95       	reti

00000dc8 <__vector_19>:
     dc8:	1f 92       	push	r1
     dca:	0f 92       	push	r0
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	0f 92       	push	r0
     dd0:	11 24       	eor	r1, r1
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	ef 93       	push	r30
     dd8:	ff 93       	push	r31
     dda:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <UART_TxHead>
     dde:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <UART_TxTail>
     de2:	98 17       	cp	r25, r24
     de4:	69 f0       	breq	.+26     	; 0xe00 <__vector_19+0x38>
     de6:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <UART_TxTail>
     dea:	ef 5f       	subi	r30, 0xFF	; 255
     dec:	ef 71       	andi	r30, 0x1F	; 31
     dee:	e0 93 07 01 	sts	0x0107, r30	; 0x800107 <UART_TxTail>
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	e7 5d       	subi	r30, 0xD7	; 215
     df6:	fe 4f       	sbci	r31, 0xFE	; 254
     df8:	80 81       	ld	r24, Z
     dfa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     dfe:	05 c0       	rjmp	.+10     	; 0xe0a <__vector_19+0x42>
     e00:	e1 ec       	ldi	r30, 0xC1	; 193
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	8f 7d       	andi	r24, 0xDF	; 223
     e08:	80 83       	st	Z, r24
     e0a:	ff 91       	pop	r31
     e0c:	ef 91       	pop	r30
     e0e:	9f 91       	pop	r25
     e10:	8f 91       	pop	r24
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	0f 90       	pop	r0
     e18:	1f 90       	pop	r1
     e1a:	18 95       	reti

00000e1c <uart_init>:
     e1c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <UART_TxHead>
     e20:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <UART_TxTail>
     e24:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <UART_RxHead>
     e28:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <UART_RxTail>
     e2c:	99 23       	and	r25, r25
     e2e:	24 f4       	brge	.+8      	; 0xe38 <uart_init+0x1c>
     e30:	22 e0       	ldi	r18, 0x02	; 2
     e32:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     e36:	9f 77       	andi	r25, 0x7F	; 127
     e38:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     e3c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     e40:	88 e9       	ldi	r24, 0x98	; 152
     e42:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     e4c:	08 95       	ret

00000e4e <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     e4e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <UART_TxHead>
     e52:	2f 5f       	subi	r18, 0xFF	; 255
     e54:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
     e56:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <UART_TxTail>
     e5a:	29 17       	cp	r18, r25
     e5c:	e1 f3       	breq	.-8      	; 0xe56 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     e5e:	e2 2f       	mov	r30, r18
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	e7 5d       	subi	r30, 0xD7	; 215
     e64:	fe 4f       	sbci	r31, 0xFE	; 254
     e66:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     e68:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     e6c:	e1 ec       	ldi	r30, 0xC1	; 193
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	80 62       	ori	r24, 0x20	; 32
     e74:	80 83       	st	Z, r24
     e76:	08 95       	ret

00000e78 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	ec 01       	movw	r28, r24
    while (*s) 
     e7e:	88 81       	ld	r24, Y
     e80:	88 23       	and	r24, r24
     e82:	31 f0       	breq	.+12     	; 0xe90 <uart_puts+0x18>
     e84:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
     e86:	0e 94 27 07 	call	0xe4e	; 0xe4e <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     e8a:	89 91       	ld	r24, Y+
     e8c:	81 11       	cpse	r24, r1
     e8e:	fb cf       	rjmp	.-10     	; 0xe86 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	08 95       	ret

00000e96 <__subsf3>:
     e96:	50 58       	subi	r21, 0x80	; 128

00000e98 <__addsf3>:
     e98:	bb 27       	eor	r27, r27
     e9a:	aa 27       	eor	r26, r26
     e9c:	0e 94 63 07 	call	0xec6	; 0xec6 <__addsf3x>
     ea0:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_round>
     ea4:	0e 94 09 09 	call	0x1212	; 0x1212 <__fp_pscA>
     ea8:	38 f0       	brcs	.+14     	; 0xeb8 <__addsf3+0x20>
     eaa:	0e 94 10 09 	call	0x1220	; 0x1220 <__fp_pscB>
     eae:	20 f0       	brcs	.+8      	; 0xeb8 <__addsf3+0x20>
     eb0:	39 f4       	brne	.+14     	; 0xec0 <__addsf3+0x28>
     eb2:	9f 3f       	cpi	r25, 0xFF	; 255
     eb4:	19 f4       	brne	.+6      	; 0xebc <__addsf3+0x24>
     eb6:	26 f4       	brtc	.+8      	; 0xec0 <__addsf3+0x28>
     eb8:	0c 94 df 08 	jmp	0x11be	; 0x11be <__fp_nan>
     ebc:	0e f4       	brtc	.+2      	; 0xec0 <__addsf3+0x28>
     ebe:	e0 95       	com	r30
     ec0:	e7 fb       	bst	r30, 7
     ec2:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__fp_inf>

00000ec6 <__addsf3x>:
     ec6:	e9 2f       	mov	r30, r25
     ec8:	0e 94 28 09 	call	0x1250	; 0x1250 <__fp_split3>
     ecc:	58 f3       	brcs	.-42     	; 0xea4 <__addsf3+0xc>
     ece:	ba 17       	cp	r27, r26
     ed0:	62 07       	cpc	r22, r18
     ed2:	73 07       	cpc	r23, r19
     ed4:	84 07       	cpc	r24, r20
     ed6:	95 07       	cpc	r25, r21
     ed8:	20 f0       	brcs	.+8      	; 0xee2 <__addsf3x+0x1c>
     eda:	79 f4       	brne	.+30     	; 0xefa <__addsf3x+0x34>
     edc:	a6 f5       	brtc	.+104    	; 0xf46 <__addsf3x+0x80>
     ede:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_zero>
     ee2:	0e f4       	brtc	.+2      	; 0xee6 <__addsf3x+0x20>
     ee4:	e0 95       	com	r30
     ee6:	0b 2e       	mov	r0, r27
     ee8:	ba 2f       	mov	r27, r26
     eea:	a0 2d       	mov	r26, r0
     eec:	0b 01       	movw	r0, r22
     eee:	b9 01       	movw	r22, r18
     ef0:	90 01       	movw	r18, r0
     ef2:	0c 01       	movw	r0, r24
     ef4:	ca 01       	movw	r24, r20
     ef6:	a0 01       	movw	r20, r0
     ef8:	11 24       	eor	r1, r1
     efa:	ff 27       	eor	r31, r31
     efc:	59 1b       	sub	r21, r25
     efe:	99 f0       	breq	.+38     	; 0xf26 <__addsf3x+0x60>
     f00:	59 3f       	cpi	r21, 0xF9	; 249
     f02:	50 f4       	brcc	.+20     	; 0xf18 <__addsf3x+0x52>
     f04:	50 3e       	cpi	r21, 0xE0	; 224
     f06:	68 f1       	brcs	.+90     	; 0xf62 <__addsf3x+0x9c>
     f08:	1a 16       	cp	r1, r26
     f0a:	f0 40       	sbci	r31, 0x00	; 0
     f0c:	a2 2f       	mov	r26, r18
     f0e:	23 2f       	mov	r18, r19
     f10:	34 2f       	mov	r19, r20
     f12:	44 27       	eor	r20, r20
     f14:	58 5f       	subi	r21, 0xF8	; 248
     f16:	f3 cf       	rjmp	.-26     	; 0xefe <__addsf3x+0x38>
     f18:	46 95       	lsr	r20
     f1a:	37 95       	ror	r19
     f1c:	27 95       	ror	r18
     f1e:	a7 95       	ror	r26
     f20:	f0 40       	sbci	r31, 0x00	; 0
     f22:	53 95       	inc	r21
     f24:	c9 f7       	brne	.-14     	; 0xf18 <__addsf3x+0x52>
     f26:	7e f4       	brtc	.+30     	; 0xf46 <__addsf3x+0x80>
     f28:	1f 16       	cp	r1, r31
     f2a:	ba 0b       	sbc	r27, r26
     f2c:	62 0b       	sbc	r22, r18
     f2e:	73 0b       	sbc	r23, r19
     f30:	84 0b       	sbc	r24, r20
     f32:	ba f0       	brmi	.+46     	; 0xf62 <__addsf3x+0x9c>
     f34:	91 50       	subi	r25, 0x01	; 1
     f36:	a1 f0       	breq	.+40     	; 0xf60 <__addsf3x+0x9a>
     f38:	ff 0f       	add	r31, r31
     f3a:	bb 1f       	adc	r27, r27
     f3c:	66 1f       	adc	r22, r22
     f3e:	77 1f       	adc	r23, r23
     f40:	88 1f       	adc	r24, r24
     f42:	c2 f7       	brpl	.-16     	; 0xf34 <__addsf3x+0x6e>
     f44:	0e c0       	rjmp	.+28     	; 0xf62 <__addsf3x+0x9c>
     f46:	ba 0f       	add	r27, r26
     f48:	62 1f       	adc	r22, r18
     f4a:	73 1f       	adc	r23, r19
     f4c:	84 1f       	adc	r24, r20
     f4e:	48 f4       	brcc	.+18     	; 0xf62 <__addsf3x+0x9c>
     f50:	87 95       	ror	r24
     f52:	77 95       	ror	r23
     f54:	67 95       	ror	r22
     f56:	b7 95       	ror	r27
     f58:	f7 95       	ror	r31
     f5a:	9e 3f       	cpi	r25, 0xFE	; 254
     f5c:	08 f0       	brcs	.+2      	; 0xf60 <__addsf3x+0x9a>
     f5e:	b0 cf       	rjmp	.-160    	; 0xec0 <__addsf3+0x28>
     f60:	93 95       	inc	r25
     f62:	88 0f       	add	r24, r24
     f64:	08 f0       	brcs	.+2      	; 0xf68 <__addsf3x+0xa2>
     f66:	99 27       	eor	r25, r25
     f68:	ee 0f       	add	r30, r30
     f6a:	97 95       	ror	r25
     f6c:	87 95       	ror	r24
     f6e:	08 95       	ret
     f70:	0e 94 09 09 	call	0x1212	; 0x1212 <__fp_pscA>
     f74:	60 f0       	brcs	.+24     	; 0xf8e <__addsf3x+0xc8>
     f76:	80 e8       	ldi	r24, 0x80	; 128
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	09 f4       	brne	.+2      	; 0xf7e <__addsf3x+0xb8>
     f7c:	9e ef       	ldi	r25, 0xFE	; 254
     f7e:	0e 94 10 09 	call	0x1220	; 0x1220 <__fp_pscB>
     f82:	28 f0       	brcs	.+10     	; 0xf8e <__addsf3x+0xc8>
     f84:	40 e8       	ldi	r20, 0x80	; 128
     f86:	51 e0       	ldi	r21, 0x01	; 1
     f88:	71 f4       	brne	.+28     	; 0xfa6 <atan2+0x10>
     f8a:	5e ef       	ldi	r21, 0xFE	; 254
     f8c:	0c c0       	rjmp	.+24     	; 0xfa6 <atan2+0x10>
     f8e:	0c 94 df 08 	jmp	0x11be	; 0x11be <__fp_nan>
     f92:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__fp_zero>

00000f96 <atan2>:
     f96:	e9 2f       	mov	r30, r25
     f98:	e0 78       	andi	r30, 0x80	; 128
     f9a:	0e 94 28 09 	call	0x1250	; 0x1250 <__fp_split3>
     f9e:	40 f3       	brcs	.-48     	; 0xf70 <__addsf3x+0xaa>
     fa0:	09 2e       	mov	r0, r25
     fa2:	05 2a       	or	r0, r21
     fa4:	b1 f3       	breq	.-20     	; 0xf92 <__addsf3x+0xcc>
     fa6:	26 17       	cp	r18, r22
     fa8:	37 07       	cpc	r19, r23
     faa:	48 07       	cpc	r20, r24
     fac:	59 07       	cpc	r21, r25
     fae:	38 f0       	brcs	.+14     	; 0xfbe <atan2+0x28>
     fb0:	0e 2e       	mov	r0, r30
     fb2:	07 f8       	bld	r0, 7
     fb4:	e0 25       	eor	r30, r0
     fb6:	69 f0       	breq	.+26     	; 0xfd2 <atan2+0x3c>
     fb8:	e0 25       	eor	r30, r0
     fba:	e0 64       	ori	r30, 0x40	; 64
     fbc:	0a c0       	rjmp	.+20     	; 0xfd2 <atan2+0x3c>
     fbe:	ef 63       	ori	r30, 0x3F	; 63
     fc0:	07 f8       	bld	r0, 7
     fc2:	00 94       	com	r0
     fc4:	07 fa       	bst	r0, 7
     fc6:	db 01       	movw	r26, r22
     fc8:	b9 01       	movw	r22, r18
     fca:	9d 01       	movw	r18, r26
     fcc:	dc 01       	movw	r26, r24
     fce:	ca 01       	movw	r24, r20
     fd0:	ad 01       	movw	r20, r26
     fd2:	ef 93       	push	r30
     fd4:	0e 94 41 08 	call	0x1082	; 0x1082 <__divsf3_pse>
     fd8:	0e 94 17 09 	call	0x122e	; 0x122e <__fp_round>
     fdc:	0e 94 fb 07 	call	0xff6	; 0xff6 <atan>
     fe0:	5f 91       	pop	r21
     fe2:	55 23       	and	r21, r21
     fe4:	39 f0       	breq	.+14     	; 0xff4 <atan2+0x5e>
     fe6:	2b ed       	ldi	r18, 0xDB	; 219
     fe8:	3f e0       	ldi	r19, 0x0F	; 15
     fea:	49 e4       	ldi	r20, 0x49	; 73
     fec:	50 fd       	sbrc	r21, 0
     fee:	49 ec       	ldi	r20, 0xC9	; 201
     ff0:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__addsf3>
     ff4:	08 95       	ret

00000ff6 <atan>:
     ff6:	df 93       	push	r29
     ff8:	dd 27       	eor	r29, r29
     ffa:	b9 2f       	mov	r27, r25
     ffc:	bf 77       	andi	r27, 0x7F	; 127
     ffe:	40 e8       	ldi	r20, 0x80	; 128
    1000:	5f e3       	ldi	r21, 0x3F	; 63
    1002:	16 16       	cp	r1, r22
    1004:	17 06       	cpc	r1, r23
    1006:	48 07       	cpc	r20, r24
    1008:	5b 07       	cpc	r21, r27
    100a:	18 f4       	brcc	.+6      	; 0x1012 <atan+0x1c>
    100c:	d9 2f       	mov	r29, r25
    100e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <inverse>
    1012:	9f 93       	push	r25
    1014:	8f 93       	push	r24
    1016:	7f 93       	push	r23
    1018:	6f 93       	push	r22
    101a:	0e 94 0c 0a 	call	0x1418	; 0x1418 <square>
    101e:	e8 e6       	ldi	r30, 0x68	; 104
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__fp_powser>
    1026:	0e 94 17 09 	call	0x122e	; 0x122e <__fp_round>
    102a:	2f 91       	pop	r18
    102c:	3f 91       	pop	r19
    102e:	4f 91       	pop	r20
    1030:	5f 91       	pop	r21
    1032:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3x>
    1036:	dd 23       	and	r29, r29
    1038:	51 f0       	breq	.+20     	; 0x104e <atan+0x58>
    103a:	90 58       	subi	r25, 0x80	; 128
    103c:	a2 ea       	ldi	r26, 0xA2	; 162
    103e:	2a ed       	ldi	r18, 0xDA	; 218
    1040:	3f e0       	ldi	r19, 0x0F	; 15
    1042:	49 ec       	ldi	r20, 0xC9	; 201
    1044:	5f e3       	ldi	r21, 0x3F	; 63
    1046:	d0 78       	andi	r29, 0x80	; 128
    1048:	5d 27       	eor	r21, r29
    104a:	0e 94 63 07 	call	0xec6	; 0xec6 <__addsf3x>
    104e:	df 91       	pop	r29
    1050:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_round>

00001054 <__divsf3>:
    1054:	0e 94 3e 08 	call	0x107c	; 0x107c <__divsf3x>
    1058:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_round>
    105c:	0e 94 10 09 	call	0x1220	; 0x1220 <__fp_pscB>
    1060:	58 f0       	brcs	.+22     	; 0x1078 <__divsf3+0x24>
    1062:	0e 94 09 09 	call	0x1212	; 0x1212 <__fp_pscA>
    1066:	40 f0       	brcs	.+16     	; 0x1078 <__divsf3+0x24>
    1068:	29 f4       	brne	.+10     	; 0x1074 <__divsf3+0x20>
    106a:	5f 3f       	cpi	r21, 0xFF	; 255
    106c:	29 f0       	breq	.+10     	; 0x1078 <__divsf3+0x24>
    106e:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__fp_inf>
    1072:	51 11       	cpse	r21, r1
    1074:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_szero>
    1078:	0c 94 df 08 	jmp	0x11be	; 0x11be <__fp_nan>

0000107c <__divsf3x>:
    107c:	0e 94 28 09 	call	0x1250	; 0x1250 <__fp_split3>
    1080:	68 f3       	brcs	.-38     	; 0x105c <__divsf3+0x8>

00001082 <__divsf3_pse>:
    1082:	99 23       	and	r25, r25
    1084:	b1 f3       	breq	.-20     	; 0x1072 <__divsf3+0x1e>
    1086:	55 23       	and	r21, r21
    1088:	91 f3       	breq	.-28     	; 0x106e <__divsf3+0x1a>
    108a:	95 1b       	sub	r25, r21
    108c:	55 0b       	sbc	r21, r21
    108e:	bb 27       	eor	r27, r27
    1090:	aa 27       	eor	r26, r26
    1092:	62 17       	cp	r22, r18
    1094:	73 07       	cpc	r23, r19
    1096:	84 07       	cpc	r24, r20
    1098:	38 f0       	brcs	.+14     	; 0x10a8 <__divsf3_pse+0x26>
    109a:	9f 5f       	subi	r25, 0xFF	; 255
    109c:	5f 4f       	sbci	r21, 0xFF	; 255
    109e:	22 0f       	add	r18, r18
    10a0:	33 1f       	adc	r19, r19
    10a2:	44 1f       	adc	r20, r20
    10a4:	aa 1f       	adc	r26, r26
    10a6:	a9 f3       	breq	.-22     	; 0x1092 <__divsf3_pse+0x10>
    10a8:	35 d0       	rcall	.+106    	; 0x1114 <__divsf3_pse+0x92>
    10aa:	0e 2e       	mov	r0, r30
    10ac:	3a f0       	brmi	.+14     	; 0x10bc <__divsf3_pse+0x3a>
    10ae:	e0 e8       	ldi	r30, 0x80	; 128
    10b0:	32 d0       	rcall	.+100    	; 0x1116 <__divsf3_pse+0x94>
    10b2:	91 50       	subi	r25, 0x01	; 1
    10b4:	50 40       	sbci	r21, 0x00	; 0
    10b6:	e6 95       	lsr	r30
    10b8:	00 1c       	adc	r0, r0
    10ba:	ca f7       	brpl	.-14     	; 0x10ae <__divsf3_pse+0x2c>
    10bc:	2b d0       	rcall	.+86     	; 0x1114 <__divsf3_pse+0x92>
    10be:	fe 2f       	mov	r31, r30
    10c0:	29 d0       	rcall	.+82     	; 0x1114 <__divsf3_pse+0x92>
    10c2:	66 0f       	add	r22, r22
    10c4:	77 1f       	adc	r23, r23
    10c6:	88 1f       	adc	r24, r24
    10c8:	bb 1f       	adc	r27, r27
    10ca:	26 17       	cp	r18, r22
    10cc:	37 07       	cpc	r19, r23
    10ce:	48 07       	cpc	r20, r24
    10d0:	ab 07       	cpc	r26, r27
    10d2:	b0 e8       	ldi	r27, 0x80	; 128
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <__divsf3_pse+0x56>
    10d6:	bb 0b       	sbc	r27, r27
    10d8:	80 2d       	mov	r24, r0
    10da:	bf 01       	movw	r22, r30
    10dc:	ff 27       	eor	r31, r31
    10de:	93 58       	subi	r25, 0x83	; 131
    10e0:	5f 4f       	sbci	r21, 0xFF	; 255
    10e2:	3a f0       	brmi	.+14     	; 0x10f2 <__divsf3_pse+0x70>
    10e4:	9e 3f       	cpi	r25, 0xFE	; 254
    10e6:	51 05       	cpc	r21, r1
    10e8:	78 f0       	brcs	.+30     	; 0x1108 <__divsf3_pse+0x86>
    10ea:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__fp_inf>
    10ee:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_szero>
    10f2:	5f 3f       	cpi	r21, 0xFF	; 255
    10f4:	e4 f3       	brlt	.-8      	; 0x10ee <__divsf3_pse+0x6c>
    10f6:	98 3e       	cpi	r25, 0xE8	; 232
    10f8:	d4 f3       	brlt	.-12     	; 0x10ee <__divsf3_pse+0x6c>
    10fa:	86 95       	lsr	r24
    10fc:	77 95       	ror	r23
    10fe:	67 95       	ror	r22
    1100:	b7 95       	ror	r27
    1102:	f7 95       	ror	r31
    1104:	9f 5f       	subi	r25, 0xFF	; 255
    1106:	c9 f7       	brne	.-14     	; 0x10fa <__divsf3_pse+0x78>
    1108:	88 0f       	add	r24, r24
    110a:	91 1d       	adc	r25, r1
    110c:	96 95       	lsr	r25
    110e:	87 95       	ror	r24
    1110:	97 f9       	bld	r25, 7
    1112:	08 95       	ret
    1114:	e1 e0       	ldi	r30, 0x01	; 1
    1116:	66 0f       	add	r22, r22
    1118:	77 1f       	adc	r23, r23
    111a:	88 1f       	adc	r24, r24
    111c:	bb 1f       	adc	r27, r27
    111e:	62 17       	cp	r22, r18
    1120:	73 07       	cpc	r23, r19
    1122:	84 07       	cpc	r24, r20
    1124:	ba 07       	cpc	r27, r26
    1126:	20 f0       	brcs	.+8      	; 0x1130 <__divsf3_pse+0xae>
    1128:	62 1b       	sub	r22, r18
    112a:	73 0b       	sbc	r23, r19
    112c:	84 0b       	sbc	r24, r20
    112e:	ba 0b       	sbc	r27, r26
    1130:	ee 1f       	adc	r30, r30
    1132:	88 f7       	brcc	.-30     	; 0x1116 <__divsf3_pse+0x94>
    1134:	e0 95       	com	r30
    1136:	08 95       	ret

00001138 <__floatunsisf>:
    1138:	e8 94       	clt
    113a:	09 c0       	rjmp	.+18     	; 0x114e <__floatsisf+0x12>

0000113c <__floatsisf>:
    113c:	97 fb       	bst	r25, 7
    113e:	3e f4       	brtc	.+14     	; 0x114e <__floatsisf+0x12>
    1140:	90 95       	com	r25
    1142:	80 95       	com	r24
    1144:	70 95       	com	r23
    1146:	61 95       	neg	r22
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	8f 4f       	sbci	r24, 0xFF	; 255
    114c:	9f 4f       	sbci	r25, 0xFF	; 255
    114e:	99 23       	and	r25, r25
    1150:	a9 f0       	breq	.+42     	; 0x117c <__floatsisf+0x40>
    1152:	f9 2f       	mov	r31, r25
    1154:	96 e9       	ldi	r25, 0x96	; 150
    1156:	bb 27       	eor	r27, r27
    1158:	93 95       	inc	r25
    115a:	f6 95       	lsr	r31
    115c:	87 95       	ror	r24
    115e:	77 95       	ror	r23
    1160:	67 95       	ror	r22
    1162:	b7 95       	ror	r27
    1164:	f1 11       	cpse	r31, r1
    1166:	f8 cf       	rjmp	.-16     	; 0x1158 <__floatsisf+0x1c>
    1168:	fa f4       	brpl	.+62     	; 0x11a8 <__floatsisf+0x6c>
    116a:	bb 0f       	add	r27, r27
    116c:	11 f4       	brne	.+4      	; 0x1172 <__floatsisf+0x36>
    116e:	60 ff       	sbrs	r22, 0
    1170:	1b c0       	rjmp	.+54     	; 0x11a8 <__floatsisf+0x6c>
    1172:	6f 5f       	subi	r22, 0xFF	; 255
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	8f 4f       	sbci	r24, 0xFF	; 255
    1178:	9f 4f       	sbci	r25, 0xFF	; 255
    117a:	16 c0       	rjmp	.+44     	; 0x11a8 <__floatsisf+0x6c>
    117c:	88 23       	and	r24, r24
    117e:	11 f0       	breq	.+4      	; 0x1184 <__floatsisf+0x48>
    1180:	96 e9       	ldi	r25, 0x96	; 150
    1182:	11 c0       	rjmp	.+34     	; 0x11a6 <__floatsisf+0x6a>
    1184:	77 23       	and	r23, r23
    1186:	21 f0       	breq	.+8      	; 0x1190 <__floatsisf+0x54>
    1188:	9e e8       	ldi	r25, 0x8E	; 142
    118a:	87 2f       	mov	r24, r23
    118c:	76 2f       	mov	r23, r22
    118e:	05 c0       	rjmp	.+10     	; 0x119a <__floatsisf+0x5e>
    1190:	66 23       	and	r22, r22
    1192:	71 f0       	breq	.+28     	; 0x11b0 <__floatsisf+0x74>
    1194:	96 e8       	ldi	r25, 0x86	; 134
    1196:	86 2f       	mov	r24, r22
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	2a f0       	brmi	.+10     	; 0x11a8 <__floatsisf+0x6c>
    119e:	9a 95       	dec	r25
    11a0:	66 0f       	add	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	88 1f       	adc	r24, r24
    11a6:	da f7       	brpl	.-10     	; 0x119e <__floatsisf+0x62>
    11a8:	88 0f       	add	r24, r24
    11aa:	96 95       	lsr	r25
    11ac:	87 95       	ror	r24
    11ae:	97 f9       	bld	r25, 7
    11b0:	08 95       	ret

000011b2 <__fp_inf>:
    11b2:	97 f9       	bld	r25, 7
    11b4:	9f 67       	ori	r25, 0x7F	; 127
    11b6:	80 e8       	ldi	r24, 0x80	; 128
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	08 95       	ret

000011be <__fp_nan>:
    11be:	9f ef       	ldi	r25, 0xFF	; 255
    11c0:	80 ec       	ldi	r24, 0xC0	; 192
    11c2:	08 95       	ret

000011c4 <__fp_powser>:
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	1f 93       	push	r17
    11ca:	0f 93       	push	r16
    11cc:	ff 92       	push	r15
    11ce:	ef 92       	push	r14
    11d0:	df 92       	push	r13
    11d2:	7b 01       	movw	r14, r22
    11d4:	8c 01       	movw	r16, r24
    11d6:	68 94       	set
    11d8:	06 c0       	rjmp	.+12     	; 0x11e6 <__fp_powser+0x22>
    11da:	da 2e       	mov	r13, r26
    11dc:	ef 01       	movw	r28, r30
    11de:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3x>
    11e2:	fe 01       	movw	r30, r28
    11e4:	e8 94       	clt
    11e6:	a5 91       	lpm	r26, Z+
    11e8:	25 91       	lpm	r18, Z+
    11ea:	35 91       	lpm	r19, Z+
    11ec:	45 91       	lpm	r20, Z+
    11ee:	55 91       	lpm	r21, Z+
    11f0:	a6 f3       	brts	.-24     	; 0x11da <__fp_powser+0x16>
    11f2:	ef 01       	movw	r28, r30
    11f4:	0e 94 63 07 	call	0xec6	; 0xec6 <__addsf3x>
    11f8:	fe 01       	movw	r30, r28
    11fa:	97 01       	movw	r18, r14
    11fc:	a8 01       	movw	r20, r16
    11fe:	da 94       	dec	r13
    1200:	69 f7       	brne	.-38     	; 0x11dc <__fp_powser+0x18>
    1202:	df 90       	pop	r13
    1204:	ef 90       	pop	r14
    1206:	ff 90       	pop	r15
    1208:	0f 91       	pop	r16
    120a:	1f 91       	pop	r17
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <__fp_pscA>:
    1212:	00 24       	eor	r0, r0
    1214:	0a 94       	dec	r0
    1216:	16 16       	cp	r1, r22
    1218:	17 06       	cpc	r1, r23
    121a:	18 06       	cpc	r1, r24
    121c:	09 06       	cpc	r0, r25
    121e:	08 95       	ret

00001220 <__fp_pscB>:
    1220:	00 24       	eor	r0, r0
    1222:	0a 94       	dec	r0
    1224:	12 16       	cp	r1, r18
    1226:	13 06       	cpc	r1, r19
    1228:	14 06       	cpc	r1, r20
    122a:	05 06       	cpc	r0, r21
    122c:	08 95       	ret

0000122e <__fp_round>:
    122e:	09 2e       	mov	r0, r25
    1230:	03 94       	inc	r0
    1232:	00 0c       	add	r0, r0
    1234:	11 f4       	brne	.+4      	; 0x123a <__fp_round+0xc>
    1236:	88 23       	and	r24, r24
    1238:	52 f0       	brmi	.+20     	; 0x124e <__fp_round+0x20>
    123a:	bb 0f       	add	r27, r27
    123c:	40 f4       	brcc	.+16     	; 0x124e <__fp_round+0x20>
    123e:	bf 2b       	or	r27, r31
    1240:	11 f4       	brne	.+4      	; 0x1246 <__fp_round+0x18>
    1242:	60 ff       	sbrs	r22, 0
    1244:	04 c0       	rjmp	.+8      	; 0x124e <__fp_round+0x20>
    1246:	6f 5f       	subi	r22, 0xFF	; 255
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	8f 4f       	sbci	r24, 0xFF	; 255
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	08 95       	ret

00001250 <__fp_split3>:
    1250:	57 fd       	sbrc	r21, 7
    1252:	90 58       	subi	r25, 0x80	; 128
    1254:	44 0f       	add	r20, r20
    1256:	55 1f       	adc	r21, r21
    1258:	59 f0       	breq	.+22     	; 0x1270 <__fp_splitA+0x10>
    125a:	5f 3f       	cpi	r21, 0xFF	; 255
    125c:	71 f0       	breq	.+28     	; 0x127a <__fp_splitA+0x1a>
    125e:	47 95       	ror	r20

00001260 <__fp_splitA>:
    1260:	88 0f       	add	r24, r24
    1262:	97 fb       	bst	r25, 7
    1264:	99 1f       	adc	r25, r25
    1266:	61 f0       	breq	.+24     	; 0x1280 <__fp_splitA+0x20>
    1268:	9f 3f       	cpi	r25, 0xFF	; 255
    126a:	79 f0       	breq	.+30     	; 0x128a <__fp_splitA+0x2a>
    126c:	87 95       	ror	r24
    126e:	08 95       	ret
    1270:	12 16       	cp	r1, r18
    1272:	13 06       	cpc	r1, r19
    1274:	14 06       	cpc	r1, r20
    1276:	55 1f       	adc	r21, r21
    1278:	f2 cf       	rjmp	.-28     	; 0x125e <__fp_split3+0xe>
    127a:	46 95       	lsr	r20
    127c:	f1 df       	rcall	.-30     	; 0x1260 <__fp_splitA>
    127e:	08 c0       	rjmp	.+16     	; 0x1290 <__fp_splitA+0x30>
    1280:	16 16       	cp	r1, r22
    1282:	17 06       	cpc	r1, r23
    1284:	18 06       	cpc	r1, r24
    1286:	99 1f       	adc	r25, r25
    1288:	f1 cf       	rjmp	.-30     	; 0x126c <__fp_splitA+0xc>
    128a:	86 95       	lsr	r24
    128c:	71 05       	cpc	r23, r1
    128e:	61 05       	cpc	r22, r1
    1290:	08 94       	sec
    1292:	08 95       	ret

00001294 <__fp_zero>:
    1294:	e8 94       	clt

00001296 <__fp_szero>:
    1296:	bb 27       	eor	r27, r27
    1298:	66 27       	eor	r22, r22
    129a:	77 27       	eor	r23, r23
    129c:	cb 01       	movw	r24, r22
    129e:	97 f9       	bld	r25, 7
    12a0:	08 95       	ret

000012a2 <inverse>:
    12a2:	9b 01       	movw	r18, r22
    12a4:	ac 01       	movw	r20, r24
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	80 e8       	ldi	r24, 0x80	; 128
    12ac:	9f e3       	ldi	r25, 0x3F	; 63
    12ae:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__divsf3>

000012b2 <__mulsf3>:
    12b2:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__mulsf3x>
    12b6:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_round>
    12ba:	0e 94 09 09 	call	0x1212	; 0x1212 <__fp_pscA>
    12be:	38 f0       	brcs	.+14     	; 0x12ce <__mulsf3+0x1c>
    12c0:	0e 94 10 09 	call	0x1220	; 0x1220 <__fp_pscB>
    12c4:	20 f0       	brcs	.+8      	; 0x12ce <__mulsf3+0x1c>
    12c6:	95 23       	and	r25, r21
    12c8:	11 f0       	breq	.+4      	; 0x12ce <__mulsf3+0x1c>
    12ca:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__fp_inf>
    12ce:	0c 94 df 08 	jmp	0x11be	; 0x11be <__fp_nan>
    12d2:	11 24       	eor	r1, r1
    12d4:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_szero>

000012d8 <__mulsf3x>:
    12d8:	0e 94 28 09 	call	0x1250	; 0x1250 <__fp_split3>
    12dc:	70 f3       	brcs	.-36     	; 0x12ba <__mulsf3+0x8>

000012de <__mulsf3_pse>:
    12de:	95 9f       	mul	r25, r21
    12e0:	c1 f3       	breq	.-16     	; 0x12d2 <__mulsf3+0x20>
    12e2:	95 0f       	add	r25, r21
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	55 1f       	adc	r21, r21
    12e8:	62 9f       	mul	r22, r18
    12ea:	f0 01       	movw	r30, r0
    12ec:	72 9f       	mul	r23, r18
    12ee:	bb 27       	eor	r27, r27
    12f0:	f0 0d       	add	r31, r0
    12f2:	b1 1d       	adc	r27, r1
    12f4:	63 9f       	mul	r22, r19
    12f6:	aa 27       	eor	r26, r26
    12f8:	f0 0d       	add	r31, r0
    12fa:	b1 1d       	adc	r27, r1
    12fc:	aa 1f       	adc	r26, r26
    12fe:	64 9f       	mul	r22, r20
    1300:	66 27       	eor	r22, r22
    1302:	b0 0d       	add	r27, r0
    1304:	a1 1d       	adc	r26, r1
    1306:	66 1f       	adc	r22, r22
    1308:	82 9f       	mul	r24, r18
    130a:	22 27       	eor	r18, r18
    130c:	b0 0d       	add	r27, r0
    130e:	a1 1d       	adc	r26, r1
    1310:	62 1f       	adc	r22, r18
    1312:	73 9f       	mul	r23, r19
    1314:	b0 0d       	add	r27, r0
    1316:	a1 1d       	adc	r26, r1
    1318:	62 1f       	adc	r22, r18
    131a:	83 9f       	mul	r24, r19
    131c:	a0 0d       	add	r26, r0
    131e:	61 1d       	adc	r22, r1
    1320:	22 1f       	adc	r18, r18
    1322:	74 9f       	mul	r23, r20
    1324:	33 27       	eor	r19, r19
    1326:	a0 0d       	add	r26, r0
    1328:	61 1d       	adc	r22, r1
    132a:	23 1f       	adc	r18, r19
    132c:	84 9f       	mul	r24, r20
    132e:	60 0d       	add	r22, r0
    1330:	21 1d       	adc	r18, r1
    1332:	82 2f       	mov	r24, r18
    1334:	76 2f       	mov	r23, r22
    1336:	6a 2f       	mov	r22, r26
    1338:	11 24       	eor	r1, r1
    133a:	9f 57       	subi	r25, 0x7F	; 127
    133c:	50 40       	sbci	r21, 0x00	; 0
    133e:	9a f0       	brmi	.+38     	; 0x1366 <__mulsf3_pse+0x88>
    1340:	f1 f0       	breq	.+60     	; 0x137e <__mulsf3_pse+0xa0>
    1342:	88 23       	and	r24, r24
    1344:	4a f0       	brmi	.+18     	; 0x1358 <__mulsf3_pse+0x7a>
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	bb 1f       	adc	r27, r27
    134c:	66 1f       	adc	r22, r22
    134e:	77 1f       	adc	r23, r23
    1350:	88 1f       	adc	r24, r24
    1352:	91 50       	subi	r25, 0x01	; 1
    1354:	50 40       	sbci	r21, 0x00	; 0
    1356:	a9 f7       	brne	.-22     	; 0x1342 <__mulsf3_pse+0x64>
    1358:	9e 3f       	cpi	r25, 0xFE	; 254
    135a:	51 05       	cpc	r21, r1
    135c:	80 f0       	brcs	.+32     	; 0x137e <__mulsf3_pse+0xa0>
    135e:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__fp_inf>
    1362:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_szero>
    1366:	5f 3f       	cpi	r21, 0xFF	; 255
    1368:	e4 f3       	brlt	.-8      	; 0x1362 <__mulsf3_pse+0x84>
    136a:	98 3e       	cpi	r25, 0xE8	; 232
    136c:	d4 f3       	brlt	.-12     	; 0x1362 <__mulsf3_pse+0x84>
    136e:	86 95       	lsr	r24
    1370:	77 95       	ror	r23
    1372:	67 95       	ror	r22
    1374:	b7 95       	ror	r27
    1376:	f7 95       	ror	r31
    1378:	e7 95       	ror	r30
    137a:	9f 5f       	subi	r25, 0xFF	; 255
    137c:	c1 f7       	brne	.-16     	; 0x136e <__mulsf3_pse+0x90>
    137e:	fe 2b       	or	r31, r30
    1380:	88 0f       	add	r24, r24
    1382:	91 1d       	adc	r25, r1
    1384:	96 95       	lsr	r25
    1386:	87 95       	ror	r24
    1388:	97 f9       	bld	r25, 7
    138a:	08 95       	ret
    138c:	19 f4       	brne	.+6      	; 0x1394 <__mulsf3_pse+0xb6>
    138e:	16 f4       	brtc	.+4      	; 0x1394 <__mulsf3_pse+0xb6>
    1390:	0c 94 df 08 	jmp	0x11be	; 0x11be <__fp_nan>
    1394:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__fp_mpack>

00001398 <sqrt>:
    1398:	0e 94 30 09 	call	0x1260	; 0x1260 <__fp_splitA>
    139c:	b8 f3       	brcs	.-18     	; 0x138c <__mulsf3_pse+0xae>
    139e:	99 23       	and	r25, r25
    13a0:	c9 f3       	breq	.-14     	; 0x1394 <__mulsf3_pse+0xb6>
    13a2:	b6 f3       	brts	.-20     	; 0x1390 <__mulsf3_pse+0xb2>
    13a4:	9f 57       	subi	r25, 0x7F	; 127
    13a6:	55 0b       	sbc	r21, r21
    13a8:	87 ff       	sbrs	r24, 7
    13aa:	0e 94 1e 0a 	call	0x143c	; 0x143c <__fp_norm2>
    13ae:	00 24       	eor	r0, r0
    13b0:	a0 e6       	ldi	r26, 0x60	; 96
    13b2:	40 ea       	ldi	r20, 0xA0	; 160
    13b4:	90 01       	movw	r18, r0
    13b6:	80 58       	subi	r24, 0x80	; 128
    13b8:	56 95       	lsr	r21
    13ba:	97 95       	ror	r25
    13bc:	28 f4       	brcc	.+10     	; 0x13c8 <sqrt+0x30>
    13be:	80 5c       	subi	r24, 0xC0	; 192
    13c0:	66 0f       	add	r22, r22
    13c2:	77 1f       	adc	r23, r23
    13c4:	88 1f       	adc	r24, r24
    13c6:	20 f0       	brcs	.+8      	; 0x13d0 <sqrt+0x38>
    13c8:	26 17       	cp	r18, r22
    13ca:	37 07       	cpc	r19, r23
    13cc:	48 07       	cpc	r20, r24
    13ce:	30 f4       	brcc	.+12     	; 0x13dc <sqrt+0x44>
    13d0:	62 1b       	sub	r22, r18
    13d2:	73 0b       	sbc	r23, r19
    13d4:	84 0b       	sbc	r24, r20
    13d6:	20 29       	or	r18, r0
    13d8:	31 29       	or	r19, r1
    13da:	4a 2b       	or	r20, r26
    13dc:	a6 95       	lsr	r26
    13de:	17 94       	ror	r1
    13e0:	07 94       	ror	r0
    13e2:	20 25       	eor	r18, r0
    13e4:	31 25       	eor	r19, r1
    13e6:	4a 27       	eor	r20, r26
    13e8:	58 f7       	brcc	.-42     	; 0x13c0 <sqrt+0x28>
    13ea:	66 0f       	add	r22, r22
    13ec:	77 1f       	adc	r23, r23
    13ee:	88 1f       	adc	r24, r24
    13f0:	20 f0       	brcs	.+8      	; 0x13fa <sqrt+0x62>
    13f2:	26 17       	cp	r18, r22
    13f4:	37 07       	cpc	r19, r23
    13f6:	48 07       	cpc	r20, r24
    13f8:	30 f4       	brcc	.+12     	; 0x1406 <sqrt+0x6e>
    13fa:	62 0b       	sbc	r22, r18
    13fc:	73 0b       	sbc	r23, r19
    13fe:	84 0b       	sbc	r24, r20
    1400:	20 0d       	add	r18, r0
    1402:	31 1d       	adc	r19, r1
    1404:	41 1d       	adc	r20, r1
    1406:	a0 95       	com	r26
    1408:	81 f7       	brne	.-32     	; 0x13ea <sqrt+0x52>
    140a:	b9 01       	movw	r22, r18
    140c:	84 2f       	mov	r24, r20
    140e:	91 58       	subi	r25, 0x81	; 129
    1410:	88 0f       	add	r24, r24
    1412:	96 95       	lsr	r25
    1414:	87 95       	ror	r24
    1416:	08 95       	ret

00001418 <square>:
    1418:	9b 01       	movw	r18, r22
    141a:	ac 01       	movw	r20, r24
    141c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__mulsf3>

00001420 <__fp_mpack>:
    1420:	9f 3f       	cpi	r25, 0xFF	; 255
    1422:	31 f0       	breq	.+12     	; 0x1430 <__fp_mpack_finite+0xc>

00001424 <__fp_mpack_finite>:
    1424:	91 50       	subi	r25, 0x01	; 1
    1426:	20 f4       	brcc	.+8      	; 0x1430 <__fp_mpack_finite+0xc>
    1428:	87 95       	ror	r24
    142a:	77 95       	ror	r23
    142c:	67 95       	ror	r22
    142e:	b7 95       	ror	r27
    1430:	88 0f       	add	r24, r24
    1432:	91 1d       	adc	r25, r1
    1434:	96 95       	lsr	r25
    1436:	87 95       	ror	r24
    1438:	97 f9       	bld	r25, 7
    143a:	08 95       	ret

0000143c <__fp_norm2>:
    143c:	91 50       	subi	r25, 0x01	; 1
    143e:	50 40       	sbci	r21, 0x00	; 0
    1440:	66 0f       	add	r22, r22
    1442:	77 1f       	adc	r23, r23
    1444:	88 1f       	adc	r24, r24
    1446:	d2 f7       	brpl	.-12     	; 0x143c <__fp_norm2>
    1448:	08 95       	ret

0000144a <dtostrf>:
    144a:	ef 92       	push	r14
    144c:	0f 93       	push	r16
    144e:	1f 93       	push	r17
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	e8 01       	movw	r28, r16
    1456:	47 fd       	sbrc	r20, 7
    1458:	02 c0       	rjmp	.+4      	; 0x145e <dtostrf+0x14>
    145a:	34 e0       	ldi	r19, 0x04	; 4
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <dtostrf+0x16>
    145e:	34 e1       	ldi	r19, 0x14	; 20
    1460:	04 2e       	mov	r0, r20
    1462:	00 0c       	add	r0, r0
    1464:	55 0b       	sbc	r21, r21
    1466:	57 ff       	sbrs	r21, 7
    1468:	03 c0       	rjmp	.+6      	; 0x1470 <dtostrf+0x26>
    146a:	51 95       	neg	r21
    146c:	41 95       	neg	r20
    146e:	51 09       	sbc	r21, r1
    1470:	e3 2e       	mov	r14, r19
    1472:	02 2f       	mov	r16, r18
    1474:	24 2f       	mov	r18, r20
    1476:	ae 01       	movw	r20, r28
    1478:	0e 94 45 0a 	call	0x148a	; 0x148a <dtoa_prf>
    147c:	ce 01       	movw	r24, r28
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	ef 90       	pop	r14
    1488:	08 95       	ret

0000148a <dtoa_prf>:
    148a:	a9 e0       	ldi	r26, 0x09	; 9
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	eb e4       	ldi	r30, 0x4B	; 75
    1490:	fa e0       	ldi	r31, 0x0A	; 10
    1492:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__prologue_saves__+0xc>
    1496:	6a 01       	movw	r12, r20
    1498:	12 2f       	mov	r17, r18
    149a:	b0 2e       	mov	r11, r16
    149c:	2b e3       	ldi	r18, 0x3B	; 59
    149e:	20 17       	cp	r18, r16
    14a0:	20 f0       	brcs	.+8      	; 0x14aa <dtoa_prf+0x20>
    14a2:	ff 24       	eor	r15, r15
    14a4:	f3 94       	inc	r15
    14a6:	f0 0e       	add	r15, r16
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <dtoa_prf+0x24>
    14aa:	2c e3       	ldi	r18, 0x3C	; 60
    14ac:	f2 2e       	mov	r15, r18
    14ae:	0f 2d       	mov	r16, r15
    14b0:	27 e0       	ldi	r18, 0x07	; 7
    14b2:	ae 01       	movw	r20, r28
    14b4:	4f 5f       	subi	r20, 0xFF	; 255
    14b6:	5f 4f       	sbci	r21, 0xFF	; 255
    14b8:	0e 94 9f 0b 	call	0x173e	; 0x173e <__ftoa_engine>
    14bc:	bc 01       	movw	r22, r24
    14be:	49 81       	ldd	r20, Y+1	; 0x01
    14c0:	84 2f       	mov	r24, r20
    14c2:	89 70       	andi	r24, 0x09	; 9
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	31 f0       	breq	.+12     	; 0x14d4 <dtoa_prf+0x4a>
    14c8:	e1 fc       	sbrc	r14, 1
    14ca:	06 c0       	rjmp	.+12     	; 0x14d8 <dtoa_prf+0x4e>
    14cc:	e0 fe       	sbrs	r14, 0
    14ce:	06 c0       	rjmp	.+12     	; 0x14dc <dtoa_prf+0x52>
    14d0:	90 e2       	ldi	r25, 0x20	; 32
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <dtoa_prf+0x54>
    14d4:	9d e2       	ldi	r25, 0x2D	; 45
    14d6:	03 c0       	rjmp	.+6      	; 0x14de <dtoa_prf+0x54>
    14d8:	9b e2       	ldi	r25, 0x2B	; 43
    14da:	01 c0       	rjmp	.+2      	; 0x14de <dtoa_prf+0x54>
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	5e 2d       	mov	r21, r14
    14e0:	50 71       	andi	r21, 0x10	; 16
    14e2:	43 ff       	sbrs	r20, 3
    14e4:	3c c0       	rjmp	.+120    	; 0x155e <dtoa_prf+0xd4>
    14e6:	91 11       	cpse	r25, r1
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <dtoa_prf+0x64>
    14ea:	83 e0       	ldi	r24, 0x03	; 3
    14ec:	01 c0       	rjmp	.+2      	; 0x14f0 <dtoa_prf+0x66>
    14ee:	84 e0       	ldi	r24, 0x04	; 4
    14f0:	81 17       	cp	r24, r17
    14f2:	18 f4       	brcc	.+6      	; 0x14fa <dtoa_prf+0x70>
    14f4:	21 2f       	mov	r18, r17
    14f6:	28 1b       	sub	r18, r24
    14f8:	01 c0       	rjmp	.+2      	; 0x14fc <dtoa_prf+0x72>
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	51 11       	cpse	r21, r1
    14fe:	0b c0       	rjmp	.+22     	; 0x1516 <dtoa_prf+0x8c>
    1500:	f6 01       	movw	r30, r12
    1502:	82 2f       	mov	r24, r18
    1504:	30 e2       	ldi	r19, 0x20	; 32
    1506:	88 23       	and	r24, r24
    1508:	19 f0       	breq	.+6      	; 0x1510 <dtoa_prf+0x86>
    150a:	31 93       	st	Z+, r19
    150c:	81 50       	subi	r24, 0x01	; 1
    150e:	fb cf       	rjmp	.-10     	; 0x1506 <dtoa_prf+0x7c>
    1510:	c2 0e       	add	r12, r18
    1512:	d1 1c       	adc	r13, r1
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	99 23       	and	r25, r25
    1518:	29 f0       	breq	.+10     	; 0x1524 <dtoa_prf+0x9a>
    151a:	d6 01       	movw	r26, r12
    151c:	9c 93       	st	X, r25
    151e:	f6 01       	movw	r30, r12
    1520:	31 96       	adiw	r30, 0x01	; 1
    1522:	6f 01       	movw	r12, r30
    1524:	c6 01       	movw	r24, r12
    1526:	03 96       	adiw	r24, 0x03	; 3
    1528:	e2 fe       	sbrs	r14, 2
    152a:	0a c0       	rjmp	.+20     	; 0x1540 <dtoa_prf+0xb6>
    152c:	3e e4       	ldi	r19, 0x4E	; 78
    152e:	d6 01       	movw	r26, r12
    1530:	3c 93       	st	X, r19
    1532:	41 e4       	ldi	r20, 0x41	; 65
    1534:	11 96       	adiw	r26, 0x01	; 1
    1536:	4c 93       	st	X, r20
    1538:	11 97       	sbiw	r26, 0x01	; 1
    153a:	12 96       	adiw	r26, 0x02	; 2
    153c:	3c 93       	st	X, r19
    153e:	06 c0       	rjmp	.+12     	; 0x154c <dtoa_prf+0xc2>
    1540:	3e e6       	ldi	r19, 0x6E	; 110
    1542:	f6 01       	movw	r30, r12
    1544:	30 83       	st	Z, r19
    1546:	41 e6       	ldi	r20, 0x61	; 97
    1548:	41 83       	std	Z+1, r20	; 0x01
    154a:	32 83       	std	Z+2, r19	; 0x02
    154c:	fc 01       	movw	r30, r24
    154e:	32 2f       	mov	r19, r18
    1550:	40 e2       	ldi	r20, 0x20	; 32
    1552:	33 23       	and	r19, r19
    1554:	09 f4       	brne	.+2      	; 0x1558 <dtoa_prf+0xce>
    1556:	42 c0       	rjmp	.+132    	; 0x15dc <dtoa_prf+0x152>
    1558:	41 93       	st	Z+, r20
    155a:	31 50       	subi	r19, 0x01	; 1
    155c:	fa cf       	rjmp	.-12     	; 0x1552 <dtoa_prf+0xc8>
    155e:	42 ff       	sbrs	r20, 2
    1560:	44 c0       	rjmp	.+136    	; 0x15ea <dtoa_prf+0x160>
    1562:	91 11       	cpse	r25, r1
    1564:	02 c0       	rjmp	.+4      	; 0x156a <dtoa_prf+0xe0>
    1566:	83 e0       	ldi	r24, 0x03	; 3
    1568:	01 c0       	rjmp	.+2      	; 0x156c <dtoa_prf+0xe2>
    156a:	84 e0       	ldi	r24, 0x04	; 4
    156c:	81 17       	cp	r24, r17
    156e:	18 f4       	brcc	.+6      	; 0x1576 <dtoa_prf+0xec>
    1570:	21 2f       	mov	r18, r17
    1572:	28 1b       	sub	r18, r24
    1574:	01 c0       	rjmp	.+2      	; 0x1578 <dtoa_prf+0xee>
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	51 11       	cpse	r21, r1
    157a:	0b c0       	rjmp	.+22     	; 0x1592 <dtoa_prf+0x108>
    157c:	f6 01       	movw	r30, r12
    157e:	82 2f       	mov	r24, r18
    1580:	30 e2       	ldi	r19, 0x20	; 32
    1582:	88 23       	and	r24, r24
    1584:	19 f0       	breq	.+6      	; 0x158c <dtoa_prf+0x102>
    1586:	31 93       	st	Z+, r19
    1588:	81 50       	subi	r24, 0x01	; 1
    158a:	fb cf       	rjmp	.-10     	; 0x1582 <dtoa_prf+0xf8>
    158c:	c2 0e       	add	r12, r18
    158e:	d1 1c       	adc	r13, r1
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	99 23       	and	r25, r25
    1594:	29 f0       	breq	.+10     	; 0x15a0 <dtoa_prf+0x116>
    1596:	d6 01       	movw	r26, r12
    1598:	9c 93       	st	X, r25
    159a:	f6 01       	movw	r30, r12
    159c:	31 96       	adiw	r30, 0x01	; 1
    159e:	6f 01       	movw	r12, r30
    15a0:	c6 01       	movw	r24, r12
    15a2:	03 96       	adiw	r24, 0x03	; 3
    15a4:	e2 fe       	sbrs	r14, 2
    15a6:	0b c0       	rjmp	.+22     	; 0x15be <dtoa_prf+0x134>
    15a8:	39 e4       	ldi	r19, 0x49	; 73
    15aa:	d6 01       	movw	r26, r12
    15ac:	3c 93       	st	X, r19
    15ae:	3e e4       	ldi	r19, 0x4E	; 78
    15b0:	11 96       	adiw	r26, 0x01	; 1
    15b2:	3c 93       	st	X, r19
    15b4:	11 97       	sbiw	r26, 0x01	; 1
    15b6:	36 e4       	ldi	r19, 0x46	; 70
    15b8:	12 96       	adiw	r26, 0x02	; 2
    15ba:	3c 93       	st	X, r19
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <dtoa_prf+0x142>
    15be:	39 e6       	ldi	r19, 0x69	; 105
    15c0:	f6 01       	movw	r30, r12
    15c2:	30 83       	st	Z, r19
    15c4:	3e e6       	ldi	r19, 0x6E	; 110
    15c6:	31 83       	std	Z+1, r19	; 0x01
    15c8:	36 e6       	ldi	r19, 0x66	; 102
    15ca:	32 83       	std	Z+2, r19	; 0x02
    15cc:	fc 01       	movw	r30, r24
    15ce:	32 2f       	mov	r19, r18
    15d0:	40 e2       	ldi	r20, 0x20	; 32
    15d2:	33 23       	and	r19, r19
    15d4:	19 f0       	breq	.+6      	; 0x15dc <dtoa_prf+0x152>
    15d6:	41 93       	st	Z+, r20
    15d8:	31 50       	subi	r19, 0x01	; 1
    15da:	fb cf       	rjmp	.-10     	; 0x15d2 <dtoa_prf+0x148>
    15dc:	fc 01       	movw	r30, r24
    15de:	e2 0f       	add	r30, r18
    15e0:	f1 1d       	adc	r31, r1
    15e2:	10 82       	st	Z, r1
    15e4:	8e ef       	ldi	r24, 0xFE	; 254
    15e6:	9f ef       	ldi	r25, 0xFF	; 255
    15e8:	a6 c0       	rjmp	.+332    	; 0x1736 <dtoa_prf+0x2ac>
    15ea:	21 e0       	ldi	r18, 0x01	; 1
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	91 11       	cpse	r25, r1
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <dtoa_prf+0x16c>
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	16 16       	cp	r1, r22
    15f8:	17 06       	cpc	r1, r23
    15fa:	1c f4       	brge	.+6      	; 0x1602 <dtoa_prf+0x178>
    15fc:	fb 01       	movw	r30, r22
    15fe:	31 96       	adiw	r30, 0x01	; 1
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <dtoa_prf+0x17c>
    1602:	e1 e0       	ldi	r30, 0x01	; 1
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	2e 0f       	add	r18, r30
    1608:	3f 1f       	adc	r19, r31
    160a:	bb 20       	and	r11, r11
    160c:	21 f0       	breq	.+8      	; 0x1616 <dtoa_prf+0x18c>
    160e:	eb 2d       	mov	r30, r11
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	31 96       	adiw	r30, 0x01	; 1
    1614:	02 c0       	rjmp	.+4      	; 0x161a <dtoa_prf+0x190>
    1616:	e0 e0       	ldi	r30, 0x00	; 0
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	2e 0f       	add	r18, r30
    161c:	3f 1f       	adc	r19, r31
    161e:	e1 2f       	mov	r30, r17
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	2e 17       	cp	r18, r30
    1624:	3f 07       	cpc	r19, r31
    1626:	1c f4       	brge	.+6      	; 0x162e <dtoa_prf+0x1a4>
    1628:	12 1b       	sub	r17, r18
    162a:	21 2f       	mov	r18, r17
    162c:	01 c0       	rjmp	.+2      	; 0x1630 <dtoa_prf+0x1a6>
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	8e 2d       	mov	r24, r14
    1632:	88 71       	andi	r24, 0x18	; 24
    1634:	59 f4       	brne	.+22     	; 0x164c <dtoa_prf+0x1c2>
    1636:	f6 01       	movw	r30, r12
    1638:	82 2f       	mov	r24, r18
    163a:	30 e2       	ldi	r19, 0x20	; 32
    163c:	88 23       	and	r24, r24
    163e:	19 f0       	breq	.+6      	; 0x1646 <dtoa_prf+0x1bc>
    1640:	31 93       	st	Z+, r19
    1642:	81 50       	subi	r24, 0x01	; 1
    1644:	fb cf       	rjmp	.-10     	; 0x163c <dtoa_prf+0x1b2>
    1646:	c2 0e       	add	r12, r18
    1648:	d1 1c       	adc	r13, r1
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	99 23       	and	r25, r25
    164e:	29 f0       	breq	.+10     	; 0x165a <dtoa_prf+0x1d0>
    1650:	d6 01       	movw	r26, r12
    1652:	9c 93       	st	X, r25
    1654:	f6 01       	movw	r30, r12
    1656:	31 96       	adiw	r30, 0x01	; 1
    1658:	6f 01       	movw	r12, r30
    165a:	51 11       	cpse	r21, r1
    165c:	0b c0       	rjmp	.+22     	; 0x1674 <dtoa_prf+0x1ea>
    165e:	f6 01       	movw	r30, r12
    1660:	82 2f       	mov	r24, r18
    1662:	90 e3       	ldi	r25, 0x30	; 48
    1664:	88 23       	and	r24, r24
    1666:	19 f0       	breq	.+6      	; 0x166e <dtoa_prf+0x1e4>
    1668:	91 93       	st	Z+, r25
    166a:	81 50       	subi	r24, 0x01	; 1
    166c:	fb cf       	rjmp	.-10     	; 0x1664 <dtoa_prf+0x1da>
    166e:	c2 0e       	add	r12, r18
    1670:	d1 1c       	adc	r13, r1
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	0f 2d       	mov	r16, r15
    1676:	06 0f       	add	r16, r22
    1678:	9a 81       	ldd	r25, Y+2	; 0x02
    167a:	34 2f       	mov	r19, r20
    167c:	30 71       	andi	r19, 0x10	; 16
    167e:	44 ff       	sbrs	r20, 4
    1680:	03 c0       	rjmp	.+6      	; 0x1688 <dtoa_prf+0x1fe>
    1682:	91 33       	cpi	r25, 0x31	; 49
    1684:	09 f4       	brne	.+2      	; 0x1688 <dtoa_prf+0x1fe>
    1686:	01 50       	subi	r16, 0x01	; 1
    1688:	10 16       	cp	r1, r16
    168a:	24 f4       	brge	.+8      	; 0x1694 <dtoa_prf+0x20a>
    168c:	09 30       	cpi	r16, 0x09	; 9
    168e:	18 f0       	brcs	.+6      	; 0x1696 <dtoa_prf+0x20c>
    1690:	08 e0       	ldi	r16, 0x08	; 8
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <dtoa_prf+0x20c>
    1694:	01 e0       	ldi	r16, 0x01	; 1
    1696:	ab 01       	movw	r20, r22
    1698:	77 ff       	sbrs	r23, 7
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <dtoa_prf+0x216>
    169c:	40 e0       	ldi	r20, 0x00	; 0
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	fb 01       	movw	r30, r22
    16a2:	e4 1b       	sub	r30, r20
    16a4:	f5 0b       	sbc	r31, r21
    16a6:	a1 e0       	ldi	r26, 0x01	; 1
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	ac 0f       	add	r26, r28
    16ac:	bd 1f       	adc	r27, r29
    16ae:	ea 0f       	add	r30, r26
    16b0:	fb 1f       	adc	r31, r27
    16b2:	8e e2       	ldi	r24, 0x2E	; 46
    16b4:	a8 2e       	mov	r10, r24
    16b6:	4b 01       	movw	r8, r22
    16b8:	80 1a       	sub	r8, r16
    16ba:	91 08       	sbc	r9, r1
    16bc:	0b 2d       	mov	r16, r11
    16be:	10 e0       	ldi	r17, 0x00	; 0
    16c0:	11 95       	neg	r17
    16c2:	01 95       	neg	r16
    16c4:	11 09       	sbc	r17, r1
    16c6:	4f 3f       	cpi	r20, 0xFF	; 255
    16c8:	bf ef       	ldi	r27, 0xFF	; 255
    16ca:	5b 07       	cpc	r21, r27
    16cc:	21 f4       	brne	.+8      	; 0x16d6 <dtoa_prf+0x24c>
    16ce:	d6 01       	movw	r26, r12
    16d0:	ac 92       	st	X, r10
    16d2:	11 96       	adiw	r26, 0x01	; 1
    16d4:	6d 01       	movw	r12, r26
    16d6:	64 17       	cp	r22, r20
    16d8:	75 07       	cpc	r23, r21
    16da:	2c f0       	brlt	.+10     	; 0x16e6 <dtoa_prf+0x25c>
    16dc:	84 16       	cp	r8, r20
    16de:	95 06       	cpc	r9, r21
    16e0:	14 f4       	brge	.+4      	; 0x16e6 <dtoa_prf+0x25c>
    16e2:	81 81       	ldd	r24, Z+1	; 0x01
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <dtoa_prf+0x25e>
    16e6:	80 e3       	ldi	r24, 0x30	; 48
    16e8:	41 50       	subi	r20, 0x01	; 1
    16ea:	51 09       	sbc	r21, r1
    16ec:	31 96       	adiw	r30, 0x01	; 1
    16ee:	d6 01       	movw	r26, r12
    16f0:	11 96       	adiw	r26, 0x01	; 1
    16f2:	7d 01       	movw	r14, r26
    16f4:	40 17       	cp	r20, r16
    16f6:	51 07       	cpc	r21, r17
    16f8:	24 f0       	brlt	.+8      	; 0x1702 <dtoa_prf+0x278>
    16fa:	d6 01       	movw	r26, r12
    16fc:	8c 93       	st	X, r24
    16fe:	67 01       	movw	r12, r14
    1700:	e2 cf       	rjmp	.-60     	; 0x16c6 <dtoa_prf+0x23c>
    1702:	64 17       	cp	r22, r20
    1704:	75 07       	cpc	r23, r21
    1706:	39 f4       	brne	.+14     	; 0x1716 <dtoa_prf+0x28c>
    1708:	96 33       	cpi	r25, 0x36	; 54
    170a:	20 f4       	brcc	.+8      	; 0x1714 <dtoa_prf+0x28a>
    170c:	95 33       	cpi	r25, 0x35	; 53
    170e:	19 f4       	brne	.+6      	; 0x1716 <dtoa_prf+0x28c>
    1710:	31 11       	cpse	r19, r1
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <dtoa_prf+0x28c>
    1714:	81 e3       	ldi	r24, 0x31	; 49
    1716:	f6 01       	movw	r30, r12
    1718:	80 83       	st	Z, r24
    171a:	f7 01       	movw	r30, r14
    171c:	82 2f       	mov	r24, r18
    171e:	90 e2       	ldi	r25, 0x20	; 32
    1720:	88 23       	and	r24, r24
    1722:	19 f0       	breq	.+6      	; 0x172a <dtoa_prf+0x2a0>
    1724:	91 93       	st	Z+, r25
    1726:	81 50       	subi	r24, 0x01	; 1
    1728:	fb cf       	rjmp	.-10     	; 0x1720 <dtoa_prf+0x296>
    172a:	f7 01       	movw	r30, r14
    172c:	e2 0f       	add	r30, r18
    172e:	f1 1d       	adc	r31, r1
    1730:	10 82       	st	Z, r1
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	29 96       	adiw	r28, 0x09	; 9
    1738:	ec e0       	ldi	r30, 0x0C	; 12
    173a:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__epilogue_restores__+0xc>

0000173e <__ftoa_engine>:
    173e:	28 30       	cpi	r18, 0x08	; 8
    1740:	08 f0       	brcs	.+2      	; 0x1744 <__ftoa_engine+0x6>
    1742:	27 e0       	ldi	r18, 0x07	; 7
    1744:	33 27       	eor	r19, r19
    1746:	da 01       	movw	r26, r20
    1748:	99 0f       	add	r25, r25
    174a:	31 1d       	adc	r19, r1
    174c:	87 fd       	sbrc	r24, 7
    174e:	91 60       	ori	r25, 0x01	; 1
    1750:	00 96       	adiw	r24, 0x00	; 0
    1752:	61 05       	cpc	r22, r1
    1754:	71 05       	cpc	r23, r1
    1756:	39 f4       	brne	.+14     	; 0x1766 <__ftoa_engine+0x28>
    1758:	32 60       	ori	r19, 0x02	; 2
    175a:	2e 5f       	subi	r18, 0xFE	; 254
    175c:	3d 93       	st	X+, r19
    175e:	30 e3       	ldi	r19, 0x30	; 48
    1760:	2a 95       	dec	r18
    1762:	e1 f7       	brne	.-8      	; 0x175c <__ftoa_engine+0x1e>
    1764:	08 95       	ret
    1766:	9f 3f       	cpi	r25, 0xFF	; 255
    1768:	30 f0       	brcs	.+12     	; 0x1776 <__ftoa_engine+0x38>
    176a:	80 38       	cpi	r24, 0x80	; 128
    176c:	71 05       	cpc	r23, r1
    176e:	61 05       	cpc	r22, r1
    1770:	09 f0       	breq	.+2      	; 0x1774 <__ftoa_engine+0x36>
    1772:	3c 5f       	subi	r19, 0xFC	; 252
    1774:	3c 5f       	subi	r19, 0xFC	; 252
    1776:	3d 93       	st	X+, r19
    1778:	91 30       	cpi	r25, 0x01	; 1
    177a:	08 f0       	brcs	.+2      	; 0x177e <__ftoa_engine+0x40>
    177c:	80 68       	ori	r24, 0x80	; 128
    177e:	91 1d       	adc	r25, r1
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	1f 93       	push	r17
    1786:	0f 93       	push	r16
    1788:	ff 92       	push	r15
    178a:	ef 92       	push	r14
    178c:	19 2f       	mov	r17, r25
    178e:	98 7f       	andi	r25, 0xF8	; 248
    1790:	96 95       	lsr	r25
    1792:	e9 2f       	mov	r30, r25
    1794:	96 95       	lsr	r25
    1796:	96 95       	lsr	r25
    1798:	e9 0f       	add	r30, r25
    179a:	ff 27       	eor	r31, r31
    179c:	e0 51       	subi	r30, 0x10	; 16
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	99 27       	eor	r25, r25
    17a2:	33 27       	eor	r19, r19
    17a4:	ee 24       	eor	r14, r14
    17a6:	ff 24       	eor	r15, r15
    17a8:	a7 01       	movw	r20, r14
    17aa:	e7 01       	movw	r28, r14
    17ac:	05 90       	lpm	r0, Z+
    17ae:	08 94       	sec
    17b0:	07 94       	ror	r0
    17b2:	28 f4       	brcc	.+10     	; 0x17be <__ftoa_engine+0x80>
    17b4:	36 0f       	add	r19, r22
    17b6:	e7 1e       	adc	r14, r23
    17b8:	f8 1e       	adc	r15, r24
    17ba:	49 1f       	adc	r20, r25
    17bc:	51 1d       	adc	r21, r1
    17be:	66 0f       	add	r22, r22
    17c0:	77 1f       	adc	r23, r23
    17c2:	88 1f       	adc	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	06 94       	lsr	r0
    17c8:	a1 f7       	brne	.-24     	; 0x17b2 <__ftoa_engine+0x74>
    17ca:	05 90       	lpm	r0, Z+
    17cc:	07 94       	ror	r0
    17ce:	28 f4       	brcc	.+10     	; 0x17da <__ftoa_engine+0x9c>
    17d0:	e7 0e       	add	r14, r23
    17d2:	f8 1e       	adc	r15, r24
    17d4:	49 1f       	adc	r20, r25
    17d6:	56 1f       	adc	r21, r22
    17d8:	c1 1d       	adc	r28, r1
    17da:	77 0f       	add	r23, r23
    17dc:	88 1f       	adc	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	66 1f       	adc	r22, r22
    17e2:	06 94       	lsr	r0
    17e4:	a1 f7       	brne	.-24     	; 0x17ce <__ftoa_engine+0x90>
    17e6:	05 90       	lpm	r0, Z+
    17e8:	07 94       	ror	r0
    17ea:	28 f4       	brcc	.+10     	; 0x17f6 <__ftoa_engine+0xb8>
    17ec:	f8 0e       	add	r15, r24
    17ee:	49 1f       	adc	r20, r25
    17f0:	56 1f       	adc	r21, r22
    17f2:	c7 1f       	adc	r28, r23
    17f4:	d1 1d       	adc	r29, r1
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	66 1f       	adc	r22, r22
    17fc:	77 1f       	adc	r23, r23
    17fe:	06 94       	lsr	r0
    1800:	a1 f7       	brne	.-24     	; 0x17ea <__ftoa_engine+0xac>
    1802:	05 90       	lpm	r0, Z+
    1804:	07 94       	ror	r0
    1806:	20 f4       	brcc	.+8      	; 0x1810 <__ftoa_engine+0xd2>
    1808:	49 0f       	add	r20, r25
    180a:	56 1f       	adc	r21, r22
    180c:	c7 1f       	adc	r28, r23
    180e:	d8 1f       	adc	r29, r24
    1810:	99 0f       	add	r25, r25
    1812:	66 1f       	adc	r22, r22
    1814:	77 1f       	adc	r23, r23
    1816:	88 1f       	adc	r24, r24
    1818:	06 94       	lsr	r0
    181a:	a9 f7       	brne	.-22     	; 0x1806 <__ftoa_engine+0xc8>
    181c:	84 91       	lpm	r24, Z
    181e:	10 95       	com	r17
    1820:	17 70       	andi	r17, 0x07	; 7
    1822:	41 f0       	breq	.+16     	; 0x1834 <__ftoa_engine+0xf6>
    1824:	d6 95       	lsr	r29
    1826:	c7 95       	ror	r28
    1828:	57 95       	ror	r21
    182a:	47 95       	ror	r20
    182c:	f7 94       	ror	r15
    182e:	e7 94       	ror	r14
    1830:	1a 95       	dec	r17
    1832:	c1 f7       	brne	.-16     	; 0x1824 <__ftoa_engine+0xe6>
    1834:	e6 e9       	ldi	r30, 0x96	; 150
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	68 94       	set
    183a:	15 90       	lpm	r1, Z+
    183c:	15 91       	lpm	r17, Z+
    183e:	35 91       	lpm	r19, Z+
    1840:	65 91       	lpm	r22, Z+
    1842:	95 91       	lpm	r25, Z+
    1844:	05 90       	lpm	r0, Z+
    1846:	7f e2       	ldi	r23, 0x2F	; 47
    1848:	73 95       	inc	r23
    184a:	e1 18       	sub	r14, r1
    184c:	f1 0a       	sbc	r15, r17
    184e:	43 0b       	sbc	r20, r19
    1850:	56 0b       	sbc	r21, r22
    1852:	c9 0b       	sbc	r28, r25
    1854:	d0 09       	sbc	r29, r0
    1856:	c0 f7       	brcc	.-16     	; 0x1848 <__ftoa_engine+0x10a>
    1858:	e1 0c       	add	r14, r1
    185a:	f1 1e       	adc	r15, r17
    185c:	43 1f       	adc	r20, r19
    185e:	56 1f       	adc	r21, r22
    1860:	c9 1f       	adc	r28, r25
    1862:	d0 1d       	adc	r29, r0
    1864:	7e f4       	brtc	.+30     	; 0x1884 <__ftoa_engine+0x146>
    1866:	70 33       	cpi	r23, 0x30	; 48
    1868:	11 f4       	brne	.+4      	; 0x186e <__ftoa_engine+0x130>
    186a:	8a 95       	dec	r24
    186c:	e6 cf       	rjmp	.-52     	; 0x183a <__ftoa_engine+0xfc>
    186e:	e8 94       	clt
    1870:	01 50       	subi	r16, 0x01	; 1
    1872:	30 f0       	brcs	.+12     	; 0x1880 <__ftoa_engine+0x142>
    1874:	08 0f       	add	r16, r24
    1876:	0a f4       	brpl	.+2      	; 0x187a <__ftoa_engine+0x13c>
    1878:	00 27       	eor	r16, r16
    187a:	02 17       	cp	r16, r18
    187c:	08 f4       	brcc	.+2      	; 0x1880 <__ftoa_engine+0x142>
    187e:	20 2f       	mov	r18, r16
    1880:	23 95       	inc	r18
    1882:	02 2f       	mov	r16, r18
    1884:	7a 33       	cpi	r23, 0x3A	; 58
    1886:	28 f0       	brcs	.+10     	; 0x1892 <__ftoa_engine+0x154>
    1888:	79 e3       	ldi	r23, 0x39	; 57
    188a:	7d 93       	st	X+, r23
    188c:	2a 95       	dec	r18
    188e:	e9 f7       	brne	.-6      	; 0x188a <__ftoa_engine+0x14c>
    1890:	10 c0       	rjmp	.+32     	; 0x18b2 <__ftoa_engine+0x174>
    1892:	7d 93       	st	X+, r23
    1894:	2a 95       	dec	r18
    1896:	89 f6       	brne	.-94     	; 0x183a <__ftoa_engine+0xfc>
    1898:	06 94       	lsr	r0
    189a:	97 95       	ror	r25
    189c:	67 95       	ror	r22
    189e:	37 95       	ror	r19
    18a0:	17 95       	ror	r17
    18a2:	17 94       	ror	r1
    18a4:	e1 18       	sub	r14, r1
    18a6:	f1 0a       	sbc	r15, r17
    18a8:	43 0b       	sbc	r20, r19
    18aa:	56 0b       	sbc	r21, r22
    18ac:	c9 0b       	sbc	r28, r25
    18ae:	d0 09       	sbc	r29, r0
    18b0:	98 f0       	brcs	.+38     	; 0x18d8 <__ftoa_engine+0x19a>
    18b2:	23 95       	inc	r18
    18b4:	7e 91       	ld	r23, -X
    18b6:	73 95       	inc	r23
    18b8:	7a 33       	cpi	r23, 0x3A	; 58
    18ba:	08 f0       	brcs	.+2      	; 0x18be <__ftoa_engine+0x180>
    18bc:	70 e3       	ldi	r23, 0x30	; 48
    18be:	7c 93       	st	X, r23
    18c0:	20 13       	cpse	r18, r16
    18c2:	b8 f7       	brcc	.-18     	; 0x18b2 <__ftoa_engine+0x174>
    18c4:	7e 91       	ld	r23, -X
    18c6:	70 61       	ori	r23, 0x10	; 16
    18c8:	7d 93       	st	X+, r23
    18ca:	30 f0       	brcs	.+12     	; 0x18d8 <__ftoa_engine+0x19a>
    18cc:	83 95       	inc	r24
    18ce:	71 e3       	ldi	r23, 0x31	; 49
    18d0:	7d 93       	st	X+, r23
    18d2:	70 e3       	ldi	r23, 0x30	; 48
    18d4:	2a 95       	dec	r18
    18d6:	e1 f7       	brne	.-8      	; 0x18d0 <__ftoa_engine+0x192>
    18d8:	11 24       	eor	r1, r1
    18da:	ef 90       	pop	r14
    18dc:	ff 90       	pop	r15
    18de:	0f 91       	pop	r16
    18e0:	1f 91       	pop	r17
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	99 27       	eor	r25, r25
    18e8:	87 fd       	sbrc	r24, 7
    18ea:	90 95       	com	r25
    18ec:	08 95       	ret

000018ee <__prologue_saves__>:
    18ee:	2f 92       	push	r2
    18f0:	3f 92       	push	r3
    18f2:	4f 92       	push	r4
    18f4:	5f 92       	push	r5
    18f6:	6f 92       	push	r6
    18f8:	7f 92       	push	r7
    18fa:	8f 92       	push	r8
    18fc:	9f 92       	push	r9
    18fe:	af 92       	push	r10
    1900:	bf 92       	push	r11
    1902:	cf 92       	push	r12
    1904:	df 92       	push	r13
    1906:	ef 92       	push	r14
    1908:	ff 92       	push	r15
    190a:	0f 93       	push	r16
    190c:	1f 93       	push	r17
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	ca 1b       	sub	r28, r26
    1918:	db 0b       	sbc	r29, r27
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	09 94       	ijmp

00001926 <__epilogue_restores__>:
    1926:	2a 88       	ldd	r2, Y+18	; 0x12
    1928:	39 88       	ldd	r3, Y+17	; 0x11
    192a:	48 88       	ldd	r4, Y+16	; 0x10
    192c:	5f 84       	ldd	r5, Y+15	; 0x0f
    192e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1930:	7d 84       	ldd	r7, Y+13	; 0x0d
    1932:	8c 84       	ldd	r8, Y+12	; 0x0c
    1934:	9b 84       	ldd	r9, Y+11	; 0x0b
    1936:	aa 84       	ldd	r10, Y+10	; 0x0a
    1938:	b9 84       	ldd	r11, Y+9	; 0x09
    193a:	c8 84       	ldd	r12, Y+8	; 0x08
    193c:	df 80       	ldd	r13, Y+7	; 0x07
    193e:	ee 80       	ldd	r14, Y+6	; 0x06
    1940:	fd 80       	ldd	r15, Y+5	; 0x05
    1942:	0c 81       	ldd	r16, Y+4	; 0x04
    1944:	1b 81       	ldd	r17, Y+3	; 0x03
    1946:	aa 81       	ldd	r26, Y+2	; 0x02
    1948:	b9 81       	ldd	r27, Y+1	; 0x01
    194a:	ce 0f       	add	r28, r30
    194c:	d1 1d       	adc	r29, r1
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	ed 01       	movw	r28, r26
    195a:	08 95       	ret

0000195c <_exit>:
    195c:	f8 94       	cli

0000195e <__stop_program>:
    195e:	ff cf       	rjmp	.-2      	; 0x195e <__stop_program>
