
mpu_manual.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000014d4  00001568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  00800104  00800104  0000156c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e9d  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4b  00000000  00000000  000035f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e57  00000000  00000000  00004244  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d0  00000000  00000000  0000509c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d9  00000000  00000000  0000566c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d8f  00000000  00000000  00005e45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00007bd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__vector_18>
      4c:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__vector_19>
      50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <mpu6050_getConvData+0x6e>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <mpu6050_readBytes+0x6c>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <rk_integrator+0xde>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <i2c_start+0x22>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e4 ed       	ldi	r30, 0xD4	; 212
     176:	f4 e1       	ldi	r31, 0x14	; 20
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a4 30       	cpi	r26, 0x04	; 4
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	a4 e0       	ldi	r26, 0x04	; 4
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a7 35       	cpi	r26, 0x57	; 87
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 01 02 	call	0x402	; 0x402 <main>
     198:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     1a0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1a4:	8c e0       	ldi	r24, 0x0C	; 12
     1a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     1aa:	08 95       	ret

000001ac <i2c_start>:
     1ac:	94 ea       	ldi	r25, 0xA4	; 164
     1ae:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1b2:	4f ef       	ldi	r20, 0xFF	; 255
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	ec eb       	ldi	r30, 0xBC	; 188
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	90 81       	ld	r25, Z
     1c0:	99 23       	and	r25, r25
     1c2:	34 f0       	brlt	.+12     	; 0x1d0 <i2c_start+0x24>
     1c4:	41 50       	subi	r20, 0x01	; 1
     1c6:	51 09       	sbc	r21, r1
     1c8:	61 09       	sbc	r22, r1
     1ca:	71 09       	sbc	r23, r1
     1cc:	c0 f7       	brcc	.-16     	; 0x1be <i2c_start+0x12>
     1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <i2c_start+0x2c>
     1d0:	45 2b       	or	r20, r21
     1d2:	46 2b       	or	r20, r22
     1d4:	47 2b       	or	r20, r23
     1d6:	41 f1       	breq	.+80     	; 0x228 <i2c_start+0x7c>
     1d8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1dc:	98 7f       	andi	r25, 0xF8	; 248
     1de:	98 30       	cpi	r25, 0x08	; 8
     1e0:	11 f0       	breq	.+4      	; 0x1e6 <i2c_start+0x3a>
     1e2:	90 31       	cpi	r25, 0x10	; 16
     1e4:	19 f5       	brne	.+70     	; 0x22c <i2c_start+0x80>
     1e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     1ea:	84 e8       	ldi	r24, 0x84	; 132
     1ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1f0:	8f ef       	ldi	r24, 0xFF	; 255
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	ec eb       	ldi	r30, 0xBC	; 188
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	20 81       	ld	r18, Z
     1fe:	22 23       	and	r18, r18
     200:	2c f0       	brlt	.+10     	; 0x20c <i2c_start+0x60>
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	a1 09       	sbc	r26, r1
     206:	b1 09       	sbc	r27, r1
     208:	c8 f7       	brcc	.-14     	; 0x1fc <i2c_start+0x50>
     20a:	04 c0       	rjmp	.+8      	; 0x214 <i2c_start+0x68>
     20c:	89 2b       	or	r24, r25
     20e:	8a 2b       	or	r24, r26
     210:	8b 2b       	or	r24, r27
     212:	71 f0       	breq	.+28     	; 0x230 <i2c_start+0x84>
     214:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     218:	98 7f       	andi	r25, 0xF8	; 248
     21a:	98 31       	cpi	r25, 0x18	; 24
     21c:	59 f0       	breq	.+22     	; 0x234 <i2c_start+0x88>
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	90 34       	cpi	r25, 0x40	; 64
     222:	49 f4       	brne	.+18     	; 0x236 <i2c_start+0x8a>
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	08 95       	ret
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	08 95       	ret
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	08 95       	ret
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	08 95       	ret
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	08 95       	ret

00000238 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     238:	84 e9       	ldi	r24, 0x94	; 148
     23a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	ec eb       	ldi	r30, 0xBC	; 188
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	20 81       	ld	r18, Z
     248:	24 ff       	sbrs	r18, 4
     24a:	05 c0       	rjmp	.+10     	; 0x256 <i2c_stop+0x1e>
     24c:	01 96       	adiw	r24, 0x01	; 1
     24e:	81 15       	cp	r24, r1
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	92 07       	cpc	r25, r18
     254:	c1 f7       	brne	.-16     	; 0x246 <i2c_stop+0xe>
     256:	08 95       	ret

00000258 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     258:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     25c:	84 e8       	ldi	r24, 0x84	; 132
     25e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     262:	8f ef       	ldi	r24, 0xFF	; 255
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	a0 e0       	ldi	r26, 0x00	; 0
     268:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     26a:	ec eb       	ldi	r30, 0xBC	; 188
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	20 81       	ld	r18, Z
     270:	22 23       	and	r18, r18
     272:	2c f0       	brlt	.+10     	; 0x27e <i2c_write+0x26>
     274:	01 97       	sbiw	r24, 0x01	; 1
     276:	a1 09       	sbc	r26, r1
     278:	b1 09       	sbc	r27, r1
     27a:	c8 f7       	brcc	.-14     	; 0x26e <i2c_write+0x16>
     27c:	04 c0       	rjmp	.+8      	; 0x286 <i2c_write+0x2e>
	if(i2c_timer == 0)
     27e:	89 2b       	or	r24, r25
     280:	8a 2b       	or	r24, r26
     282:	8b 2b       	or	r24, r27
     284:	41 f0       	breq	.+16     	; 0x296 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     286:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     28a:	98 7f       	andi	r25, 0xF8	; 248
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	98 32       	cpi	r25, 0x28	; 40
     290:	19 f4       	brne	.+6      	; 0x298 <i2c_write+0x40>
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	08 95       	ret
     296:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     298:	08 95       	ret

0000029a <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     29a:	84 ec       	ldi	r24, 0xC4	; 196
     29c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
     2a0:	8f ef       	ldi	r24, 0xFF	; 255
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     2a8:	ec eb       	ldi	r30, 0xBC	; 188
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	20 81       	ld	r18, Z
     2ae:	22 23       	and	r18, r18
     2b0:	2c f0       	brlt	.+10     	; 0x2bc <i2c_readAck+0x22>
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	a1 09       	sbc	r26, r1
     2b6:	b1 09       	sbc	r27, r1
     2b8:	c8 f7       	brcc	.-14     	; 0x2ac <i2c_readAck+0x12>
     2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     2bc:	89 2b       	or	r24, r25
     2be:	8a 2b       	or	r24, r26
     2c0:	8b 2b       	or	r24, r27
     2c2:	19 f0       	breq	.+6      	; 0x2ca <i2c_readAck+0x30>
		return 0;

    return TWDR;
     2c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     2c8:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     2ca:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     2cc:	08 95       	ret

000002ce <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     2ce:	84 e8       	ldi	r24, 0x84	; 132
     2d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
     2d4:	8f ef       	ldi	r24, 0xFF	; 255
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	a0 e0       	ldi	r26, 0x00	; 0
     2da:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     2dc:	ec eb       	ldi	r30, 0xBC	; 188
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	20 81       	ld	r18, Z
     2e2:	22 23       	and	r18, r18
     2e4:	2c f0       	brlt	.+10     	; 0x2f0 <i2c_readNak+0x22>
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	a1 09       	sbc	r26, r1
     2ea:	b1 09       	sbc	r27, r1
     2ec:	c8 f7       	brcc	.-14     	; 0x2e0 <i2c_readNak+0x12>
     2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     2f0:	89 2b       	or	r24, r25
     2f2:	8a 2b       	or	r24, r26
     2f4:	8b 2b       	or	r24, r27
     2f6:	19 f0       	breq	.+6      	; 0x2fe <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     2f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     2fc:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     2fe:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     300:	08 95       	ret

00000302 <rk_integrator>:
/*
	filters roll pitch and yaw using complementary filter 
*/
void applyCompFilter(double * filteredAngle, double accelAngle, double gyroAngle, double alpha){
	*filteredAngle = alpha * gyroAngle + (1-alpha) * accelAngle;
}
     302:	4f 92       	push	r4
     304:	5f 92       	push	r5
     306:	6f 92       	push	r6
     308:	7f 92       	push	r7
     30a:	8f 92       	push	r8
     30c:	9f 92       	push	r9
     30e:	af 92       	push	r10
     310:	bf 92       	push	r11
     312:	cf 92       	push	r12
     314:	df 92       	push	r13
     316:	ef 92       	push	r14
     318:	ff 92       	push	r15
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	00 d0       	rcall	.+0      	; 0x324 <rk_integrator+0x22>
     324:	00 d0       	rcall	.+0      	; 0x326 <rk_integrator+0x24>
     326:	00 d0       	rcall	.+0      	; 0x328 <rk_integrator+0x26>
     328:	cd b7       	in	r28, 0x3d	; 61
     32a:	de b7       	in	r29, 0x3e	; 62
     32c:	8c 01       	movw	r16, r24
     32e:	4a 01       	movw	r8, r20
     330:	5b 01       	movw	r10, r22
     332:	3e 83       	std	Y+6, r19	; 0x06
     334:	2d 83       	std	Y+5, r18	; 0x05
     336:	f9 01       	movw	r30, r18
     338:	40 80       	ld	r4, Z
     33a:	51 80       	ldd	r5, Z+1	; 0x01
     33c:	62 80       	ldd	r6, Z+2	; 0x02
     33e:	73 80       	ldd	r7, Z+3	; 0x03
     340:	c4 80       	ldd	r12, Z+4	; 0x04
     342:	d5 80       	ldd	r13, Z+5	; 0x05
     344:	e6 80       	ldd	r14, Z+6	; 0x06
     346:	f7 80       	ldd	r15, Z+7	; 0x07
     348:	a7 01       	movw	r20, r14
     34a:	96 01       	movw	r18, r12
     34c:	c7 01       	movw	r24, r14
     34e:	b6 01       	movw	r22, r12
     350:	0e 94 06 06 	call	0xc0c	; 0xc0c <__addsf3>
     354:	ed 81       	ldd	r30, Y+5	; 0x05
     356:	fe 81       	ldd	r31, Y+6	; 0x06
     358:	20 85       	ldd	r18, Z+8	; 0x08
     35a:	31 85       	ldd	r19, Z+9	; 0x09
     35c:	42 85       	ldd	r20, Z+10	; 0x0a
     35e:	53 85       	ldd	r21, Z+11	; 0x0b
     360:	0e 94 06 06 	call	0xc0c	; 0xc0c <__addsf3>
     364:	69 83       	std	Y+1, r22	; 0x01
     366:	7a 83       	std	Y+2, r23	; 0x02
     368:	8b 83       	std	Y+3, r24	; 0x03
     36a:	9c 83       	std	Y+4, r25	; 0x04
     36c:	a3 01       	movw	r20, r6
     36e:	92 01       	movw	r18, r4
     370:	c3 01       	movw	r24, r6
     372:	b2 01       	movw	r22, r4
     374:	0e 94 06 06 	call	0xc0c	; 0xc0c <__addsf3>
     378:	9b 01       	movw	r18, r22
     37a:	ac 01       	movw	r20, r24
     37c:	69 81       	ldd	r22, Y+1	; 0x01
     37e:	7a 81       	ldd	r23, Y+2	; 0x02
     380:	8b 81       	ldd	r24, Y+3	; 0x03
     382:	9c 81       	ldd	r25, Y+4	; 0x04
     384:	0e 94 06 06 	call	0xc0c	; 0xc0c <__addsf3>
     388:	a5 01       	movw	r20, r10
     38a:	94 01       	movw	r18, r8
     38c:	0e 94 06 06 	call	0xc0c	; 0xc0c <__addsf3>
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	40 ec       	ldi	r20, 0xC0	; 192
     396:	50 e4       	ldi	r21, 0x40	; 64
     398:	0e 94 72 06 	call	0xce4	; 0xce4 <__divsf3>
     39c:	9b 01       	movw	r18, r22
     39e:	ac 01       	movw	r20, r24
     3a0:	f8 01       	movw	r30, r16
     3a2:	60 81       	ld	r22, Z
     3a4:	71 81       	ldd	r23, Z+1	; 0x01
     3a6:	82 81       	ldd	r24, Z+2	; 0x02
     3a8:	93 81       	ldd	r25, Z+3	; 0x03
     3aa:	0e 94 06 06 	call	0xc0c	; 0xc0c <__addsf3>
     3ae:	f8 01       	movw	r30, r16
     3b0:	60 83       	st	Z, r22
     3b2:	71 83       	std	Z+1, r23	; 0x01
     3b4:	82 83       	std	Z+2, r24	; 0x02
     3b6:	93 83       	std	Z+3, r25	; 0x03
     3b8:	ed 81       	ldd	r30, Y+5	; 0x05
     3ba:	fe 81       	ldd	r31, Y+6	; 0x06
     3bc:	c0 86       	std	Z+8, r12	; 0x08
     3be:	d1 86       	std	Z+9, r13	; 0x09
     3c0:	e2 86       	std	Z+10, r14	; 0x0a
     3c2:	f3 86       	std	Z+11, r15	; 0x0b
     3c4:	44 82       	std	Z+4, r4	; 0x04
     3c6:	55 82       	std	Z+5, r5	; 0x05
     3c8:	66 82       	std	Z+6, r6	; 0x06
     3ca:	77 82       	std	Z+7, r7	; 0x07
     3cc:	80 82       	st	Z, r8
     3ce:	91 82       	std	Z+1, r9	; 0x01
     3d0:	a2 82       	std	Z+2, r10	; 0x02
     3d2:	b3 82       	std	Z+3, r11	; 0x03
     3d4:	26 96       	adiw	r28, 0x06	; 6
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	ff 90       	pop	r15
     3ea:	ef 90       	pop	r14
     3ec:	df 90       	pop	r13
     3ee:	cf 90       	pop	r12
     3f0:	bf 90       	pop	r11
     3f2:	af 90       	pop	r10
     3f4:	9f 90       	pop	r9
     3f6:	8f 90       	pop	r8
     3f8:	7f 90       	pop	r7
     3fa:	6f 90       	pop	r6
     3fc:	5f 90       	pop	r5
     3fe:	4f 90       	pop	r4
     400:	08 95       	ret

00000402 <main>:

#endif

int main(void) {
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	ce 55       	subi	r28, 0x5E	; 94
     40c:	d1 09       	sbc	r29, r1
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61

	#if MPU6050_GETATTITUDE == 0
	int16_t ax = 0;
     418:	1a 82       	std	Y+2, r1	; 0x02
     41a:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
     41c:	1c 82       	std	Y+4, r1	; 0x04
     41e:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
     420:	1e 82       	std	Y+6, r1	; 0x06
     422:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
     424:	18 86       	std	Y+8, r1	; 0x08
     426:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
     428:	1a 86       	std	Y+10, r1	; 0x0a
     42a:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
     42c:	1c 86       	std	Y+12, r1	; 0x0c
     42e:	1b 86       	std	Y+11, r1	; 0x0b
	double axg = 0;
     430:	1d 86       	std	Y+13, r1	; 0x0d
     432:	1e 86       	std	Y+14, r1	; 0x0e
     434:	1f 86       	std	Y+15, r1	; 0x0f
     436:	18 8a       	std	Y+16, r1	; 0x10
	double ayg = 0;
     438:	19 8a       	std	Y+17, r1	; 0x11
     43a:	1a 8a       	std	Y+18, r1	; 0x12
     43c:	1b 8a       	std	Y+19, r1	; 0x13
     43e:	1c 8a       	std	Y+20, r1	; 0x14
	double azg = 0;
     440:	1d 8a       	std	Y+21, r1	; 0x15
     442:	1e 8a       	std	Y+22, r1	; 0x16
     444:	1f 8a       	std	Y+23, r1	; 0x17
     446:	18 8e       	std	Y+24, r1	; 0x18
	double gxds = 0;
     448:	19 8e       	std	Y+25, r1	; 0x19
     44a:	1a 8e       	std	Y+26, r1	; 0x1a
     44c:	1b 8e       	std	Y+27, r1	; 0x1b
     44e:	1c 8e       	std	Y+28, r1	; 0x1c
	double gyds = 0;
     450:	1d 8e       	std	Y+29, r1	; 0x1d
     452:	1e 8e       	std	Y+30, r1	; 0x1e
     454:	1f 8e       	std	Y+31, r1	; 0x1f
     456:	18 a2       	std	Y+32, r1	; 0x20
	double gzds = 0; 
     458:	19 a2       	std	Y+33, r1	; 0x21
     45a:	1a a2       	std	Y+34, r1	; 0x22
     45c:	1b a2       	std	Y+35, r1	; 0x23
     45e:	1c a2       	std	Y+36, r1	; 0x24
	double azg_offset = -0.0870;
	double gxds_offset = 2.5316;
	double gyds_offset = 9.7539;
	double gzds_offset = 12.3735;*/
	//for runge-kutta integrator
	double angleX = 0.0;	//roll
     460:	1d a2       	std	Y+37, r1	; 0x25
     462:	1e a2       	std	Y+38, r1	; 0x26
     464:	1f a2       	std	Y+39, r1	; 0x27
     466:	18 a6       	std	Y+40, r1	; 0x28
	double angleY = 0.0;	//pitch
     468:	19 a6       	std	Y+41, r1	; 0x29
     46a:	1a a6       	std	Y+42, r1	; 0x2a
     46c:	1b a6       	std	Y+43, r1	; 0x2b
     46e:	1c a6       	std	Y+44, r1	; 0x2c
	double angleZ = 0.0;	//yaw
     470:	1d a6       	std	Y+45, r1	; 0x2d
     472:	1e a6       	std	Y+46, r1	; 0x2e
     474:	1f a6       	std	Y+47, r1	; 0x2f
     476:	18 aa       	std	Y+48, r1	; 0x30
	double prev_Xdps[3] = {0.0, 0.0, 0.0};	//holds last three gyro values for 
     478:	19 aa       	std	Y+49, r1	; 0x31
     47a:	1a aa       	std	Y+50, r1	; 0x32
     47c:	1b aa       	std	Y+51, r1	; 0x33
     47e:	1c aa       	std	Y+52, r1	; 0x34
     480:	1d aa       	std	Y+53, r1	; 0x35
     482:	1e aa       	std	Y+54, r1	; 0x36
     484:	1f aa       	std	Y+55, r1	; 0x37
     486:	18 ae       	std	Y+56, r1	; 0x38
     488:	19 ae       	std	Y+57, r1	; 0x39
     48a:	1a ae       	std	Y+58, r1	; 0x3a
     48c:	1b ae       	std	Y+59, r1	; 0x3b
     48e:	1c ae       	std	Y+60, r1	; 0x3c
	double prev_Ydps[3] = {0.0, 0.0, 0.0};	// runge-kutta integrator
     490:	21 96       	adiw	r28, 0x01	; 1
     492:	1c ae       	std	Y+60, r1	; 0x3c
     494:	1d ae       	std	Y+61, r1	; 0x3d
     496:	1e ae       	std	Y+62, r1	; 0x3e
     498:	1f ae       	std	Y+63, r1	; 0x3f
     49a:	21 97       	sbiw	r28, 0x01	; 1
     49c:	25 96       	adiw	r28, 0x05	; 5
     49e:	1c ae       	std	Y+60, r1	; 0x3c
     4a0:	1d ae       	std	Y+61, r1	; 0x3d
     4a2:	1e ae       	std	Y+62, r1	; 0x3e
     4a4:	1f ae       	std	Y+63, r1	; 0x3f
     4a6:	25 97       	sbiw	r28, 0x05	; 5
     4a8:	29 96       	adiw	r28, 0x09	; 9
     4aa:	1c ae       	std	Y+60, r1	; 0x3c
     4ac:	1d ae       	std	Y+61, r1	; 0x3d
     4ae:	1e ae       	std	Y+62, r1	; 0x3e
     4b0:	1f ae       	std	Y+63, r1	; 0x3f
     4b2:	29 97       	sbiw	r28, 0x09	; 9
	double prev_Zdps[3] = {0.0, 0.0, 0.0};
     4b4:	2d 96       	adiw	r28, 0x0d	; 13
     4b6:	1c ae       	std	Y+60, r1	; 0x3c
     4b8:	1d ae       	std	Y+61, r1	; 0x3d
     4ba:	1e ae       	std	Y+62, r1	; 0x3e
     4bc:	1f ae       	std	Y+63, r1	; 0x3f
     4be:	2d 97       	sbiw	r28, 0x0d	; 13
     4c0:	61 96       	adiw	r28, 0x11	; 17
     4c2:	1c ae       	std	Y+60, r1	; 0x3c
     4c4:	1d ae       	std	Y+61, r1	; 0x3d
     4c6:	1e ae       	std	Y+62, r1	; 0x3e
     4c8:	1f ae       	std	Y+63, r1	; 0x3f
     4ca:	61 97       	sbiw	r28, 0x11	; 17
     4cc:	65 96       	adiw	r28, 0x15	; 21
     4ce:	1c ae       	std	Y+60, r1	; 0x3c
     4d0:	1d ae       	std	Y+61, r1	; 0x3d
     4d2:	1e ae       	std	Y+62, r1	; 0x3e
     4d4:	1f ae       	std	Y+63, r1	; 0x3f
     4d6:	65 97       	sbiw	r28, 0x15	; 21
	double gzds = 0;
	*/
	#endif

	//init uart
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
     4d8:	89 e1       	ldi	r24, 0x19	; 25
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 c8 05 	call	0xb90	; 0xb90 <uart_init>

	//init interrupt
	sei();
     4e0:	78 94       	sei

	//init mpu6050
	mpu6050_init();
     4e2:	0e 94 28 04 	call	0x850	; 0x850 <mpu6050_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e6:	2f ef       	ldi	r18, 0xFF	; 255
     4e8:	80 e7       	ldi	r24, 0x70	; 112
     4ea:	92 e0       	ldi	r25, 0x02	; 2
     4ec:	21 50       	subi	r18, 0x01	; 1
     4ee:	80 40       	sbci	r24, 0x00	; 0
     4f0:	90 40       	sbci	r25, 0x00	; 0
     4f2:	e1 f7       	brne	.-8      	; 0x4ec <main+0xea>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <main+0xf4>
     4f6:	00 00       	nop
/*
 *	Main Loop 
 */	
	for(;;) {
		#if MPU6050_GETATTITUDE == 0
		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     4f8:	ce 01       	movw	r24, r28
     4fa:	0b 96       	adiw	r24, 0x0b	; 11
     4fc:	7c 01       	movw	r14, r24
     4fe:	8e 01       	movw	r16, r28
     500:	07 5f       	subi	r16, 0xF7	; 247
     502:	1f 4f       	sbci	r17, 0xFF	; 255
     504:	9e 01       	movw	r18, r28
     506:	29 5f       	subi	r18, 0xF9	; 249
     508:	3f 4f       	sbci	r19, 0xFF	; 255
     50a:	ae 01       	movw	r20, r28
     50c:	4b 5f       	subi	r20, 0xFB	; 251
     50e:	5f 4f       	sbci	r21, 0xFF	; 255
     510:	be 01       	movw	r22, r28
     512:	6d 5f       	subi	r22, 0xFD	; 253
     514:	7f 4f       	sbci	r23, 0xFF	; 255
     516:	0a 97       	sbiw	r24, 0x0a	; 10
     518:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <mpu6050_getRawData>
		mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
     51c:	ce 01       	movw	r24, r28
     51e:	81 96       	adiw	r24, 0x21	; 33
     520:	7c 01       	movw	r14, r24
     522:	0c 5e       	subi	r16, 0xEC	; 236
     524:	1f 4f       	sbci	r17, 0xFF	; 255
     526:	9e 01       	movw	r18, r28
     528:	27 5e       	subi	r18, 0xE7	; 231
     52a:	3f 4f       	sbci	r19, 0xFF	; 255
     52c:	ae 01       	movw	r20, r28
     52e:	4b 5e       	subi	r20, 0xEB	; 235
     530:	5f 4f       	sbci	r21, 0xFF	; 255
     532:	be 01       	movw	r22, r28
     534:	6f 5e       	subi	r22, 0xEF	; 239
     536:	7f 4f       	sbci	r23, 0xFF	; 255
     538:	44 97       	sbiw	r24, 0x14	; 20
     53a:	0e 94 aa 04 	call	0x954	; 0x954 <mpu6050_getConvData>
		rk_integrator(&angleY, gyds, prev_Ydps);
		rk_integrator(&angleZ, gzds, prev_Zdps);*/
		
		//No tests are run
		#if DATAPROCESSINGTEST == 0
			rk_integrator(&angleX, gxds, prev_Xdps);
     53e:	49 8d       	ldd	r20, Y+25	; 0x19
     540:	5a 8d       	ldd	r21, Y+26	; 0x1a
     542:	6b 8d       	ldd	r22, Y+27	; 0x1b
     544:	7c 8d       	ldd	r23, Y+28	; 0x1c
     546:	9e 01       	movw	r18, r28
     548:	2f 5c       	subi	r18, 0xCF	; 207
     54a:	3f 4f       	sbci	r19, 0xFF	; 255
     54c:	ce 01       	movw	r24, r28
     54e:	85 96       	adiw	r24, 0x25	; 37
     550:	0e 94 81 01 	call	0x302	; 0x302 <rk_integrator>
			rk_integrator(&angleY, gyds, prev_Ydps);
     554:	4d 8d       	ldd	r20, Y+29	; 0x1d
     556:	5e 8d       	ldd	r21, Y+30	; 0x1e
     558:	6f 8d       	ldd	r22, Y+31	; 0x1f
     55a:	78 a1       	ldd	r23, Y+32	; 0x20
     55c:	9e 01       	movw	r18, r28
     55e:	23 5c       	subi	r18, 0xC3	; 195
     560:	3f 4f       	sbci	r19, 0xFF	; 255
     562:	ce 01       	movw	r24, r28
     564:	89 96       	adiw	r24, 0x29	; 41
     566:	0e 94 81 01 	call	0x302	; 0x302 <rk_integrator>
			rk_integrator(&angleZ, gzds, prev_Zdps);
     56a:	49 a1       	ldd	r20, Y+33	; 0x21
     56c:	5a a1       	ldd	r21, Y+34	; 0x22
     56e:	6b a1       	ldd	r22, Y+35	; 0x23
     570:	7c a1       	ldd	r23, Y+36	; 0x24
     572:	9e 01       	movw	r18, r28
     574:	27 5b       	subi	r18, 0xB7	; 183
     576:	3f 4f       	sbci	r19, 0xFF	; 255
     578:	ce 01       	movw	r24, r28
     57a:	8d 96       	adiw	r24, 0x2d	; 45
     57c:	0e 94 81 01 	call	0x302	; 0x302 <rk_integrator>
		uart_puts("\r\n");
*/
		
		//uart_puts("Printing from getConvData\r\n");
		#if SERIALPRINTMODE == 0
			dtostrf(axg, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     580:	6d 85       	ldd	r22, Y+13	; 0x0d
     582:	7e 85       	ldd	r23, Y+14	; 0x0e
     584:	8f 85       	ldd	r24, Y+15	; 0x0f
     586:	98 89       	ldd	r25, Y+16	; 0x10
     588:	08 5c       	subi	r16, 0xC8	; 200
     58a:	1f 4f       	sbci	r17, 0xFF	; 255
     58c:	25 e0       	ldi	r18, 0x05	; 5
     58e:	43 e0       	ldi	r20, 0x03	; 3
     590:	0e 94 df 07 	call	0xfbe	; 0xfbe <dtostrf>
     594:	c8 01       	movw	r24, r16
     596:	0e 94 f6 05 	call	0xbec	; 0xbec <uart_puts>
     59a:	80 e2       	ldi	r24, 0x20	; 32
     59c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <uart_putc>
			dtostrf(ayg, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     5a0:	69 89       	ldd	r22, Y+17	; 0x11
     5a2:	7a 89       	ldd	r23, Y+18	; 0x12
     5a4:	8b 89       	ldd	r24, Y+19	; 0x13
     5a6:	9c 89       	ldd	r25, Y+20	; 0x14
     5a8:	25 e0       	ldi	r18, 0x05	; 5
     5aa:	43 e0       	ldi	r20, 0x03	; 3
     5ac:	0e 94 df 07 	call	0xfbe	; 0xfbe <dtostrf>
     5b0:	c8 01       	movw	r24, r16
     5b2:	0e 94 f6 05 	call	0xbec	; 0xbec <uart_puts>
     5b6:	80 e2       	ldi	r24, 0x20	; 32
     5b8:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <uart_putc>
			dtostrf(azg, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     5bc:	6d 89       	ldd	r22, Y+21	; 0x15
     5be:	7e 89       	ldd	r23, Y+22	; 0x16
     5c0:	8f 89       	ldd	r24, Y+23	; 0x17
     5c2:	98 8d       	ldd	r25, Y+24	; 0x18
     5c4:	25 e0       	ldi	r18, 0x05	; 5
     5c6:	43 e0       	ldi	r20, 0x03	; 3
     5c8:	0e 94 df 07 	call	0xfbe	; 0xfbe <dtostrf>
     5cc:	c8 01       	movw	r24, r16
     5ce:	0e 94 f6 05 	call	0xbec	; 0xbec <uart_puts>
     5d2:	80 e2       	ldi	r24, 0x20	; 32
     5d4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <uart_putc>
			dtostrf(gxds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     5d8:	69 8d       	ldd	r22, Y+25	; 0x19
     5da:	7a 8d       	ldd	r23, Y+26	; 0x1a
     5dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5de:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5e0:	25 e0       	ldi	r18, 0x05	; 5
     5e2:	43 e0       	ldi	r20, 0x03	; 3
     5e4:	0e 94 df 07 	call	0xfbe	; 0xfbe <dtostrf>
     5e8:	c8 01       	movw	r24, r16
     5ea:	0e 94 f6 05 	call	0xbec	; 0xbec <uart_puts>
     5ee:	80 e2       	ldi	r24, 0x20	; 32
     5f0:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <uart_putc>
			dtostrf(gyds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     5f4:	6d 8d       	ldd	r22, Y+29	; 0x1d
     5f6:	7e 8d       	ldd	r23, Y+30	; 0x1e
     5f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     5fa:	98 a1       	ldd	r25, Y+32	; 0x20
     5fc:	25 e0       	ldi	r18, 0x05	; 5
     5fe:	43 e0       	ldi	r20, 0x03	; 3
     600:	0e 94 df 07 	call	0xfbe	; 0xfbe <dtostrf>
     604:	c8 01       	movw	r24, r16
     606:	0e 94 f6 05 	call	0xbec	; 0xbec <uart_puts>
     60a:	80 e2       	ldi	r24, 0x20	; 32
     60c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <uart_putc>
			dtostrf(gzds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     610:	69 a1       	ldd	r22, Y+33	; 0x21
     612:	7a a1       	ldd	r23, Y+34	; 0x22
     614:	8b a1       	ldd	r24, Y+35	; 0x23
     616:	9c a1       	ldd	r25, Y+36	; 0x24
     618:	25 e0       	ldi	r18, 0x05	; 5
     61a:	43 e0       	ldi	r20, 0x03	; 3
     61c:	0e 94 df 07 	call	0xfbe	; 0xfbe <dtostrf>
     620:	c8 01       	movw	r24, r16
     622:	0e 94 f6 05 	call	0xbec	; 0xbec <uart_puts>
     626:	80 e2       	ldi	r24, 0x20	; 32
     628:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <uart_putc>
			dtostrf(gyds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
			dtostrf(gzds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');*/
			uart_puts("\r\n");
		#endif
		
		uart_puts("\r\n");
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	0e 94 f6 05 	call	0xbec	; 0xbec <uart_puts>
     634:	8f e3       	ldi	r24, 0x3F	; 63
     636:	9c e9       	ldi	r25, 0x9C	; 156
     638:	01 97       	sbiw	r24, 0x01	; 1
     63a:	f1 f7       	brne	.-4      	; 0x638 <main+0x236>
     63c:	00 c0       	rjmp	.+0      	; 0x63e <main+0x23c>
     63e:	00 00       	nop
     640:	5b cf       	rjmp	.-330    	; 0x4f8 <main+0xf6>

00000642 <mpu6050_readBytes>:
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
	if(buffer[0] == 0x34)
		return 1;
	else
		return 0;
}
     642:	af 92       	push	r10
     644:	bf 92       	push	r11
     646:	cf 92       	push	r12
     648:	df 92       	push	r13
     64a:	ff 92       	push	r15
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	66 23       	and	r22, r22
     656:	b9 f1       	breq	.+110    	; 0x6c6 <mpu6050_readBytes+0x84>
     658:	c5 2f       	mov	r28, r21
     65a:	d4 2f       	mov	r29, r20
     65c:	f6 2e       	mov	r15, r22
     65e:	18 2f       	mov	r17, r24
     660:	80 ed       	ldi	r24, 0xD0	; 208
     662:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_start>
     666:	81 2f       	mov	r24, r17
     668:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_write>
     66c:	85 e3       	ldi	r24, 0x35	; 53
     66e:	8a 95       	dec	r24
     670:	f1 f7       	brne	.-4      	; 0x66e <mpu6050_readBytes+0x2c>
     672:	00 00       	nop
     674:	81 ed       	ldi	r24, 0xD1	; 209
     676:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_start>
     67a:	0d 2f       	mov	r16, r29
     67c:	1c 2f       	mov	r17, r28
     67e:	cc 24       	eor	r12, r12
     680:	ca 94       	dec	r12
     682:	cf 0c       	add	r12, r15
     684:	d1 2c       	mov	r13, r1
     686:	ef ef       	ldi	r30, 0xFF	; 255
     688:	ce 1a       	sub	r12, r30
     68a:	de 0a       	sbc	r13, r30
     68c:	c0 e0       	ldi	r28, 0x00	; 0
     68e:	d0 e0       	ldi	r29, 0x00	; 0
     690:	af 2c       	mov	r10, r15
     692:	b1 2c       	mov	r11, r1
     694:	f1 e0       	ldi	r31, 0x01	; 1
     696:	af 1a       	sub	r10, r31
     698:	b1 08       	sbc	r11, r1
     69a:	ac 16       	cp	r10, r28
     69c:	bd 06       	cpc	r11, r29
     69e:	29 f4       	brne	.+10     	; 0x6aa <mpu6050_readBytes+0x68>
     6a0:	0e 94 67 01 	call	0x2ce	; 0x2ce <i2c_readNak>
     6a4:	f8 01       	movw	r30, r16
     6a6:	80 83       	st	Z, r24
     6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <mpu6050_readBytes+0x70>
     6aa:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_readAck>
     6ae:	f8 01       	movw	r30, r16
     6b0:	80 83       	st	Z, r24
     6b2:	21 96       	adiw	r28, 0x01	; 1
     6b4:	0f 5f       	subi	r16, 0xFF	; 255
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	cc 15       	cp	r28, r12
     6ba:	dd 05       	cpc	r29, r13
     6bc:	71 f7       	brne	.-36     	; 0x69a <mpu6050_readBytes+0x58>
     6be:	cf 2d       	mov	r28, r15
     6c0:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_stop>
     6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <mpu6050_readBytes+0x86>
     6c6:	c0 e0       	ldi	r28, 0x00	; 0
     6c8:	8c 2f       	mov	r24, r28
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	df 90       	pop	r13
     6d6:	cf 90       	pop	r12
     6d8:	bf 90       	pop	r11
     6da:	af 90       	pop	r10
     6dc:	08 95       	ret

000006de <mpu6050_readByte>:
     6de:	ab 01       	movw	r20, r22
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	0e 94 21 03 	call	0x642	; 0x642 <mpu6050_readBytes>
     6e6:	08 95       	ret

000006e8 <mpu6050_writeBytes>:
     6e8:	ef 92       	push	r14
     6ea:	ff 92       	push	r15
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	66 23       	and	r22, r22
     6f6:	d1 f0       	breq	.+52     	; 0x72c <mpu6050_writeBytes+0x44>
     6f8:	7a 01       	movw	r14, r20
     6fa:	16 2f       	mov	r17, r22
     6fc:	c8 2f       	mov	r28, r24
     6fe:	80 ed       	ldi	r24, 0xD0	; 208
     700:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_start>
     704:	8c 2f       	mov	r24, r28
     706:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_write>
     70a:	e7 01       	movw	r28, r14
     70c:	6f ef       	ldi	r22, 0xFF	; 255
     70e:	61 0f       	add	r22, r17
     710:	06 2f       	mov	r16, r22
     712:	10 e0       	ldi	r17, 0x00	; 0
     714:	0f 5f       	subi	r16, 0xFF	; 255
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	0e 0d       	add	r16, r14
     71a:	1f 1d       	adc	r17, r15
     71c:	89 91       	ld	r24, Y+
     71e:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_write>
     722:	c0 17       	cp	r28, r16
     724:	d1 07       	cpc	r29, r17
     726:	d1 f7       	brne	.-12     	; 0x71c <mpu6050_writeBytes+0x34>
     728:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_stop>
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	ff 90       	pop	r15
     736:	ef 90       	pop	r14
     738:	08 95       	ret

0000073a <mpu6050_writeByte>:
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	1f 92       	push	r1
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	69 83       	std	Y+1, r22	; 0x01
     746:	ae 01       	movw	r20, r28
     748:	4f 5f       	subi	r20, 0xFF	; 255
     74a:	5f 4f       	sbci	r21, 0xFF	; 255
     74c:	61 e0       	ldi	r22, 0x01	; 1
     74e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <mpu6050_writeBytes>
     752:	0f 90       	pop	r0
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <mpu6050_writeBits>:
     75a:	ef 92       	push	r14
     75c:	ff 92       	push	r15
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	1f 92       	push	r1
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	44 23       	and	r20, r20
     76e:	89 f1       	breq	.+98     	; 0x7d2 <mpu6050_writeBits+0x78>
     770:	f2 2e       	mov	r15, r18
     772:	14 2f       	mov	r17, r20
     774:	06 2f       	mov	r16, r22
     776:	e8 2e       	mov	r14, r24
     778:	19 82       	std	Y+1, r1	; 0x01
     77a:	be 01       	movw	r22, r28
     77c:	6f 5f       	subi	r22, 0xFF	; 255
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	0e 94 6f 03 	call	0x6de	; 0x6de <mpu6050_readByte>
     784:	88 23       	and	r24, r24
     786:	29 f1       	breq	.+74     	; 0x7d2 <mpu6050_writeBits+0x78>
     788:	40 2f       	mov	r20, r16
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	41 1b       	sub	r20, r17
     78e:	51 09       	sbc	r21, r1
     790:	4f 5f       	subi	r20, 0xFF	; 255
     792:	5f 4f       	sbci	r21, 0xFF	; 255
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	02 c0       	rjmp	.+4      	; 0x79e <mpu6050_writeBits+0x44>
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	1a 95       	dec	r17
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <mpu6050_writeBits+0x40>
     7a2:	01 97       	sbiw	r24, 0x01	; 1
     7a4:	04 2e       	mov	r0, r20
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <mpu6050_writeBits+0x52>
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	0a 94       	dec	r0
     7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <mpu6050_writeBits+0x4e>
     7b0:	2f 2d       	mov	r18, r15
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <mpu6050_writeBits+0x60>
     7b6:	22 0f       	add	r18, r18
     7b8:	33 1f       	adc	r19, r19
     7ba:	4a 95       	dec	r20
     7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <mpu6050_writeBits+0x5c>
     7be:	68 2f       	mov	r22, r24
     7c0:	60 95       	com	r22
     7c2:	99 81       	ldd	r25, Y+1	; 0x01
     7c4:	69 23       	and	r22, r25
     7c6:	82 23       	and	r24, r18
     7c8:	68 2b       	or	r22, r24
     7ca:	69 83       	std	Y+1, r22	; 0x01
     7cc:	8e 2d       	mov	r24, r14
     7ce:	0e 94 9d 03 	call	0x73a	; 0x73a <mpu6050_writeByte>
     7d2:	0f 90       	pop	r0
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	08 95       	ret

000007e2 <mpu6050_writeBit>:
     7e2:	ff 92       	push	r15
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	1f 92       	push	r1
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	18 2f       	mov	r17, r24
     7f4:	06 2f       	mov	r16, r22
     7f6:	f4 2e       	mov	r15, r20
     7f8:	be 01       	movw	r22, r28
     7fa:	6f 5f       	subi	r22, 0xFF	; 255
     7fc:	7f 4f       	sbci	r23, 0xFF	; 255
     7fe:	0e 94 6f 03 	call	0x6de	; 0x6de <mpu6050_readByte>
     802:	ff 20       	and	r15, r15
     804:	51 f0       	breq	.+20     	; 0x81a <mpu6050_writeBit+0x38>
     806:	61 e0       	ldi	r22, 0x01	; 1
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	02 c0       	rjmp	.+4      	; 0x810 <mpu6050_writeBit+0x2e>
     80c:	66 0f       	add	r22, r22
     80e:	77 1f       	adc	r23, r23
     810:	0a 95       	dec	r16
     812:	e2 f7       	brpl	.-8      	; 0x80c <mpu6050_writeBit+0x2a>
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	68 2b       	or	r22, r24
     818:	0a c0       	rjmp	.+20     	; 0x82e <mpu6050_writeBit+0x4c>
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	02 c0       	rjmp	.+4      	; 0x824 <mpu6050_writeBit+0x42>
     820:	66 0f       	add	r22, r22
     822:	77 1f       	adc	r23, r23
     824:	0a 95       	dec	r16
     826:	e2 f7       	brpl	.-8      	; 0x820 <mpu6050_writeBit+0x3e>
     828:	60 95       	com	r22
     82a:	89 81       	ldd	r24, Y+1	; 0x01
     82c:	68 23       	and	r22, r24
     82e:	69 83       	std	Y+1, r22	; 0x01
     830:	81 2f       	mov	r24, r17
     832:	0e 94 9d 03 	call	0x73a	; 0x73a <mpu6050_writeByte>
     836:	0f 90       	pop	r0
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	ff 90       	pop	r15
     842:	08 95       	ret

00000844 <mpu6050_setSleepDisabled>:
     844:	40 e0       	ldi	r20, 0x00	; 0
     846:	66 e0       	ldi	r22, 0x06	; 6
     848:	8b e6       	ldi	r24, 0x6B	; 107
     84a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <mpu6050_writeBit>
     84e:	08 95       	ret

00000850 <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
     850:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     854:	25 e3       	ldi	r18, 0x35	; 53
     856:	2a 95       	dec	r18
     858:	f1 f7       	brne	.-4      	; 0x856 <mpu6050_init+0x6>
     85a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	91 ee       	ldi	r25, 0xE1	; 225
     860:	24 e0       	ldi	r18, 0x04	; 4
     862:	81 50       	subi	r24, 0x01	; 1
     864:	90 40       	sbci	r25, 0x00	; 0
     866:	20 40       	sbci	r18, 0x00	; 0
     868:	e1 f7       	brne	.-8      	; 0x862 <mpu6050_init+0x12>
     86a:	00 c0       	rjmp	.+0      	; 0x86c <mpu6050_init+0x1c>
     86c:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
     86e:	0e 94 22 04 	call	0x844	; 0x844 <mpu6050_setSleepDisabled>
     872:	8f e3       	ldi	r24, 0x3F	; 63
     874:	9c e9       	ldi	r25, 0x9C	; 156
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <mpu6050_init+0x26>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <mpu6050_init+0x2c>
     87c:	00 00       	nop
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
     87e:	21 e0       	ldi	r18, 0x01	; 1
     880:	43 e0       	ldi	r20, 0x03	; 3
     882:	62 e0       	ldi	r22, 0x02	; 2
     884:	8b e6       	ldi	r24, 0x6B	; 107
     886:	0e 94 ad 03 	call	0x75a	; 0x75a <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
     88a:	23 e0       	ldi	r18, 0x03	; 3
     88c:	43 e0       	ldi	r20, 0x03	; 3
     88e:	62 e0       	ldi	r22, 0x02	; 2
     890:	8a e1       	ldi	r24, 0x1A	; 26
     892:	0e 94 ad 03 	call	0x75a	; 0x75a <mpu6050_writeBits>
    //set sample rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
     896:	64 e0       	ldi	r22, 0x04	; 4
     898:	89 e1       	ldi	r24, 0x19	; 25
     89a:	0e 94 9d 03 	call	0x73a	; 0x73a <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	42 e0       	ldi	r20, 0x02	; 2
     8a2:	64 e0       	ldi	r22, 0x04	; 4
     8a4:	8b e1       	ldi	r24, 0x1B	; 27
     8a6:	0e 94 ad 03 	call	0x75a	; 0x75a <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
     8aa:	21 e0       	ldi	r18, 0x01	; 1
     8ac:	42 e0       	ldi	r20, 0x02	; 2
     8ae:	64 e0       	ldi	r22, 0x04	; 4
     8b0:	8c e1       	ldi	r24, 0x1C	; 28
     8b2:	0e 94 ad 03 	call	0x75a	; 0x75a <mpu6050_writeBits>
     8b6:	08 95       	ret

000008b8 <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     8b8:	8f 92       	push	r8
     8ba:	9f 92       	push	r9
     8bc:	af 92       	push	r10
     8be:	bf 92       	push	r11
     8c0:	cf 92       	push	r12
     8c2:	df 92       	push	r13
     8c4:	ef 92       	push	r14
     8c6:	ff 92       	push	r15
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	4c 01       	movw	r8, r24
     8d2:	5b 01       	movw	r10, r22
     8d4:	6a 01       	movw	r12, r20
     8d6:	e9 01       	movw	r28, r18
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
     8d8:	49 e4       	ldi	r20, 0x49	; 73
     8da:	51 e0       	ldi	r21, 0x01	; 1
     8dc:	6e e0       	ldi	r22, 0x0E	; 14
     8de:	8b e3       	ldi	r24, 0x3B	; 59
     8e0:	0e 94 21 03 	call	0x642	; 0x642 <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     8e4:	e9 e4       	ldi	r30, 0x49	; 73
     8e6:	f1 e0       	ldi	r31, 0x01	; 1
     8e8:	20 81       	ld	r18, Z
     8ea:	81 81       	ldd	r24, Z+1	; 0x01
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	92 2b       	or	r25, r18
     8f0:	d4 01       	movw	r26, r8
     8f2:	8d 93       	st	X+, r24
     8f4:	9c 93       	st	X, r25
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     8f6:	22 81       	ldd	r18, Z+2	; 0x02
     8f8:	83 81       	ldd	r24, Z+3	; 0x03
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	92 2b       	or	r25, r18
     8fe:	d5 01       	movw	r26, r10
     900:	8d 93       	st	X+, r24
     902:	9c 93       	st	X, r25
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
     904:	24 81       	ldd	r18, Z+4	; 0x04
     906:	85 81       	ldd	r24, Z+5	; 0x05
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	92 2b       	or	r25, r18
     90c:	d6 01       	movw	r26, r12
     90e:	8d 93       	st	X+, r24
     910:	9c 93       	st	X, r25
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     912:	20 85       	ldd	r18, Z+8	; 0x08
     914:	81 85       	ldd	r24, Z+9	; 0x09
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	92 2b       	or	r25, r18
     91a:	99 83       	std	Y+1, r25	; 0x01
     91c:	88 83       	st	Y, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     91e:	22 85       	ldd	r18, Z+10	; 0x0a
     920:	83 85       	ldd	r24, Z+11	; 0x0b
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	92 2b       	or	r25, r18
     926:	d8 01       	movw	r26, r16
     928:	8d 93       	st	X+, r24
     92a:	9c 93       	st	X, r25
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     92c:	24 85       	ldd	r18, Z+12	; 0x0c
     92e:	85 85       	ldd	r24, Z+13	; 0x0d
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	92 2b       	or	r25, r18
     934:	f7 01       	movw	r30, r14
     936:	91 83       	std	Z+1, r25	; 0x01
     938:	80 83       	st	Z, r24
}
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	ff 90       	pop	r15
     944:	ef 90       	pop	r14
     946:	df 90       	pop	r13
     948:	cf 90       	pop	r12
     94a:	bf 90       	pop	r11
     94c:	af 90       	pop	r10
     94e:	9f 90       	pop	r9
     950:	8f 90       	pop	r8
     952:	08 95       	ret

00000954 <mpu6050_getConvData>:

/*
 * get raw data converted to g and deg/sec values
 */
void mpu6050_getConvData(double* axg, double* ayg, double* azg, double* gxds, double* gyds, double* gzds) {
     954:	2f 92       	push	r2
     956:	3f 92       	push	r3
     958:	4f 92       	push	r4
     95a:	5f 92       	push	r5
     95c:	6f 92       	push	r6
     95e:	7f 92       	push	r7
     960:	8f 92       	push	r8
     962:	9f 92       	push	r9
     964:	af 92       	push	r10
     966:	bf 92       	push	r11
     968:	cf 92       	push	r12
     96a:	df 92       	push	r13
     96c:	ef 92       	push	r14
     96e:	ff 92       	push	r15
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	2c 97       	sbiw	r28, 0x0c	; 12
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
     988:	3c 01       	movw	r6, r24
     98a:	4b 01       	movw	r8, r22
     98c:	5a 01       	movw	r10, r20
     98e:	69 01       	movw	r12, r18
     990:	28 01       	movw	r4, r16
     992:	17 01       	movw	r2, r14
	int16_t ax = 0;
     994:	1a 82       	std	Y+2, r1	; 0x02
     996:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
     998:	1c 82       	std	Y+4, r1	; 0x04
     99a:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
     99c:	1e 82       	std	Y+6, r1	; 0x06
     99e:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
     9a0:	18 86       	std	Y+8, r1	; 0x08
     9a2:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
     9a4:	1a 86       	std	Y+10, r1	; 0x0a
     9a6:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
     9a8:	1c 86       	std	Y+12, r1	; 0x0c
     9aa:	1b 86       	std	Y+11, r1	; 0x0b
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     9ac:	ce 01       	movw	r24, r28
     9ae:	0b 96       	adiw	r24, 0x0b	; 11
     9b0:	7c 01       	movw	r14, r24
     9b2:	8e 01       	movw	r16, r28
     9b4:	07 5f       	subi	r16, 0xF7	; 247
     9b6:	1f 4f       	sbci	r17, 0xFF	; 255
     9b8:	9e 01       	movw	r18, r28
     9ba:	29 5f       	subi	r18, 0xF9	; 249
     9bc:	3f 4f       	sbci	r19, 0xFF	; 255
     9be:	ae 01       	movw	r20, r28
     9c0:	4b 5f       	subi	r20, 0xFB	; 251
     9c2:	5f 4f       	sbci	r21, 0xFF	; 255
     9c4:	be 01       	movw	r22, r28
     9c6:	6d 5f       	subi	r22, 0xFD	; 253
     9c8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ca:	0a 97       	sbiw	r24, 0x0a	; 10
     9cc:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <mpu6050_getRawData>
    *azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
    *gxds = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN;
	*gyds = (double)(gy-MPU6050_GYOFFSET)/MPU6050_GYGAIN;
	*gzds = (double)(gz-MPU6050_GZOFFSET)/MPU6050_GZGAIN;
	#else
    *axg = (double)(ax)/MPU6050_AGAIN;
     9d0:	69 81       	ldd	r22, Y+1	; 0x01
     9d2:	7a 81       	ldd	r23, Y+2	; 0x02
     9d4:	07 2e       	mov	r0, r23
     9d6:	00 0c       	add	r0, r0
     9d8:	88 0b       	sbc	r24, r24
     9da:	99 0b       	sbc	r25, r25
     9dc:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__floatsisf>
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 e0       	ldi	r20, 0x00	; 0
     9e6:	59 e3       	ldi	r21, 0x39	; 57
     9e8:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
     9ec:	f3 01       	movw	r30, r6
     9ee:	60 83       	st	Z, r22
     9f0:	71 83       	std	Z+1, r23	; 0x01
     9f2:	82 83       	std	Z+2, r24	; 0x02
     9f4:	93 83       	std	Z+3, r25	; 0x03
    *ayg = (double)(ay)/MPU6050_AGAIN;
     9f6:	6b 81       	ldd	r22, Y+3	; 0x03
     9f8:	7c 81       	ldd	r23, Y+4	; 0x04
     9fa:	07 2e       	mov	r0, r23
     9fc:	00 0c       	add	r0, r0
     9fe:	88 0b       	sbc	r24, r24
     a00:	99 0b       	sbc	r25, r25
     a02:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__floatsisf>
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	59 e3       	ldi	r21, 0x39	; 57
     a0e:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
     a12:	f4 01       	movw	r30, r8
     a14:	60 83       	st	Z, r22
     a16:	71 83       	std	Z+1, r23	; 0x01
     a18:	82 83       	std	Z+2, r24	; 0x02
     a1a:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az)/MPU6050_AGAIN;
     a1c:	6d 81       	ldd	r22, Y+5	; 0x05
     a1e:	7e 81       	ldd	r23, Y+6	; 0x06
     a20:	07 2e       	mov	r0, r23
     a22:	00 0c       	add	r0, r0
     a24:	88 0b       	sbc	r24, r24
     a26:	99 0b       	sbc	r25, r25
     a28:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__floatsisf>
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	59 e3       	ldi	r21, 0x39	; 57
     a34:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3>
     a38:	f5 01       	movw	r30, r10
     a3a:	60 83       	st	Z, r22
     a3c:	71 83       	std	Z+1, r23	; 0x01
     a3e:	82 83       	std	Z+2, r24	; 0x02
     a40:	93 83       	std	Z+3, r25	; 0x03
    *gxds = (double)(gx)/MPU6050_GGAIN;
     a42:	6f 81       	ldd	r22, Y+7	; 0x07
     a44:	78 85       	ldd	r23, Y+8	; 0x08
     a46:	07 2e       	mov	r0, r23
     a48:	00 0c       	add	r0, r0
     a4a:	88 0b       	sbc	r24, r24
     a4c:	99 0b       	sbc	r25, r25
     a4e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__floatsisf>
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	43 e0       	ldi	r20, 0x03	; 3
     a58:	53 e4       	ldi	r21, 0x43	; 67
     a5a:	0e 94 72 06 	call	0xce4	; 0xce4 <__divsf3>
     a5e:	f6 01       	movw	r30, r12
     a60:	60 83       	st	Z, r22
     a62:	71 83       	std	Z+1, r23	; 0x01
     a64:	82 83       	std	Z+2, r24	; 0x02
     a66:	93 83       	std	Z+3, r25	; 0x03
	*gyds = (double)(gy)/MPU6050_GGAIN;
     a68:	69 85       	ldd	r22, Y+9	; 0x09
     a6a:	7a 85       	ldd	r23, Y+10	; 0x0a
     a6c:	07 2e       	mov	r0, r23
     a6e:	00 0c       	add	r0, r0
     a70:	88 0b       	sbc	r24, r24
     a72:	99 0b       	sbc	r25, r25
     a74:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__floatsisf>
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	43 e0       	ldi	r20, 0x03	; 3
     a7e:	53 e4       	ldi	r21, 0x43	; 67
     a80:	0e 94 72 06 	call	0xce4	; 0xce4 <__divsf3>
     a84:	f2 01       	movw	r30, r4
     a86:	60 83       	st	Z, r22
     a88:	71 83       	std	Z+1, r23	; 0x01
     a8a:	82 83       	std	Z+2, r24	; 0x02
     a8c:	93 83       	std	Z+3, r25	; 0x03
	*gzds = (double)(gz)/MPU6050_GGAIN;
     a8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a90:	7c 85       	ldd	r23, Y+12	; 0x0c
     a92:	07 2e       	mov	r0, r23
     a94:	00 0c       	add	r0, r0
     a96:	88 0b       	sbc	r24, r24
     a98:	99 0b       	sbc	r25, r25
     a9a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__floatsisf>
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	43 e0       	ldi	r20, 0x03	; 3
     aa4:	53 e4       	ldi	r21, 0x43	; 67
     aa6:	0e 94 72 06 	call	0xce4	; 0xce4 <__divsf3>
     aaa:	f1 01       	movw	r30, r2
     aac:	60 83       	st	Z, r22
     aae:	71 83       	std	Z+1, r23	; 0x01
     ab0:	82 83       	std	Z+2, r24	; 0x02
     ab2:	93 83       	std	Z+3, r25	; 0x03
	#endif
}
     ab4:	2c 96       	adiw	r28, 0x0c	; 12
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	1f 91       	pop	r17
     ac6:	0f 91       	pop	r16
     ac8:	ff 90       	pop	r15
     aca:	ef 90       	pop	r14
     acc:	df 90       	pop	r13
     ace:	cf 90       	pop	r12
     ad0:	bf 90       	pop	r11
     ad2:	af 90       	pop	r10
     ad4:	9f 90       	pop	r9
     ad6:	8f 90       	pop	r8
     ad8:	7f 90       	pop	r7
     ada:	6f 90       	pop	r6
     adc:	5f 90       	pop	r5
     ade:	4f 90       	pop	r4
     ae0:	3f 90       	pop	r3
     ae2:	2f 90       	pop	r2
     ae4:	08 95       	ret

00000ae6 <__vector_18>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
     ae6:	1f 92       	push	r1
     ae8:	0f 92       	push	r0
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	0f 92       	push	r0
     aee:	11 24       	eor	r1, r1
     af0:	2f 93       	push	r18
     af2:	8f 93       	push	r24
     af4:	9f 93       	push	r25
     af6:	ef 93       	push	r30
     af8:	ff 93       	push	r31
     afa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     afe:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     b02:	88 71       	andi	r24, 0x18	; 24
     b04:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <UART_RxHead>
     b08:	ef 5f       	subi	r30, 0xFF	; 255
     b0a:	ef 71       	andi	r30, 0x1F	; 31
     b0c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <UART_RxTail>
     b10:	e9 17       	cp	r30, r25
     b12:	39 f0       	breq	.+14     	; 0xb22 <__vector_18+0x3c>
     b14:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <UART_RxHead>
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	e7 5f       	subi	r30, 0xF7	; 247
     b1c:	fe 4f       	sbci	r31, 0xFE	; 254
     b1e:	20 83       	st	Z, r18
     b20:	01 c0       	rjmp	.+2      	; 0xb24 <__vector_18+0x3e>
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
     b28:	ff 91       	pop	r31
     b2a:	ef 91       	pop	r30
     b2c:	9f 91       	pop	r25
     b2e:	8f 91       	pop	r24
     b30:	2f 91       	pop	r18
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	0f 90       	pop	r0
     b38:	1f 90       	pop	r1
     b3a:	18 95       	reti

00000b3c <__vector_19>:
     b3c:	1f 92       	push	r1
     b3e:	0f 92       	push	r0
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	0f 92       	push	r0
     b44:	11 24       	eor	r1, r1
     b46:	8f 93       	push	r24
     b48:	9f 93       	push	r25
     b4a:	ef 93       	push	r30
     b4c:	ff 93       	push	r31
     b4e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <UART_TxHead>
     b52:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <UART_TxTail>
     b56:	98 17       	cp	r25, r24
     b58:	69 f0       	breq	.+26     	; 0xb74 <__vector_19+0x38>
     b5a:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <UART_TxTail>
     b5e:	ef 5f       	subi	r30, 0xFF	; 255
     b60:	ef 71       	andi	r30, 0x1F	; 31
     b62:	e0 93 07 01 	sts	0x0107, r30	; 0x800107 <UART_TxTail>
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	e7 5d       	subi	r30, 0xD7	; 215
     b6a:	fe 4f       	sbci	r31, 0xFE	; 254
     b6c:	80 81       	ld	r24, Z
     b6e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     b72:	05 c0       	rjmp	.+10     	; 0xb7e <__vector_19+0x42>
     b74:	e1 ec       	ldi	r30, 0xC1	; 193
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	8f 7d       	andi	r24, 0xDF	; 223
     b7c:	80 83       	st	Z, r24
     b7e:	ff 91       	pop	r31
     b80:	ef 91       	pop	r30
     b82:	9f 91       	pop	r25
     b84:	8f 91       	pop	r24
     b86:	0f 90       	pop	r0
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	0f 90       	pop	r0
     b8c:	1f 90       	pop	r1
     b8e:	18 95       	reti

00000b90 <uart_init>:
     b90:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <UART_TxHead>
     b94:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <UART_TxTail>
     b98:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <UART_RxHead>
     b9c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <UART_RxTail>
     ba0:	99 23       	and	r25, r25
     ba2:	24 f4       	brge	.+8      	; 0xbac <uart_init+0x1c>
     ba4:	22 e0       	ldi	r18, 0x02	; 2
     ba6:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     baa:	9f 77       	andi	r25, 0x7F	; 127
     bac:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     bb0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     bb4:	88 e9       	ldi	r24, 0x98	; 152
     bb6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     bba:	86 e0       	ldi	r24, 0x06	; 6
     bbc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     bc0:	08 95       	ret

00000bc2 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     bc2:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <UART_TxHead>
     bc6:	2f 5f       	subi	r18, 0xFF	; 255
     bc8:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
     bca:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <UART_TxTail>
     bce:	29 17       	cp	r18, r25
     bd0:	e1 f3       	breq	.-8      	; 0xbca <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     bd2:	e2 2f       	mov	r30, r18
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	e7 5d       	subi	r30, 0xD7	; 215
     bd8:	fe 4f       	sbci	r31, 0xFE	; 254
     bda:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     bdc:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     be0:	e1 ec       	ldi	r30, 0xC1	; 193
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	80 62       	ori	r24, 0x20	; 32
     be8:	80 83       	st	Z, r24
     bea:	08 95       	ret

00000bec <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	ec 01       	movw	r28, r24
    while (*s) 
     bf2:	88 81       	ld	r24, Y
     bf4:	88 23       	and	r24, r24
     bf6:	31 f0       	breq	.+12     	; 0xc04 <uart_puts+0x18>
     bf8:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
     bfa:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     bfe:	89 91       	ld	r24, Y+
     c00:	81 11       	cpse	r24, r1
     c02:	fb cf       	rjmp	.-10     	; 0xbfa <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	08 95       	ret

00000c0a <__subsf3>:
     c0a:	50 58       	subi	r21, 0x80	; 128

00000c0c <__addsf3>:
     c0c:	bb 27       	eor	r27, r27
     c0e:	aa 27       	eor	r26, r26
     c10:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__addsf3x>
     c14:	0c 94 38 07 	jmp	0xe70	; 0xe70 <__fp_round>
     c18:	0e 94 2a 07 	call	0xe54	; 0xe54 <__fp_pscA>
     c1c:	38 f0       	brcs	.+14     	; 0xc2c <__addsf3+0x20>
     c1e:	0e 94 31 07 	call	0xe62	; 0xe62 <__fp_pscB>
     c22:	20 f0       	brcs	.+8      	; 0xc2c <__addsf3+0x20>
     c24:	39 f4       	brne	.+14     	; 0xc34 <__addsf3+0x28>
     c26:	9f 3f       	cpi	r25, 0xFF	; 255
     c28:	19 f4       	brne	.+6      	; 0xc30 <__addsf3+0x24>
     c2a:	26 f4       	brtc	.+8      	; 0xc34 <__addsf3+0x28>
     c2c:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_nan>
     c30:	0e f4       	brtc	.+2      	; 0xc34 <__addsf3+0x28>
     c32:	e0 95       	com	r30
     c34:	e7 fb       	bst	r30, 7
     c36:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__fp_inf>

00000c3a <__addsf3x>:
     c3a:	e9 2f       	mov	r30, r25
     c3c:	0e 94 49 07 	call	0xe92	; 0xe92 <__fp_split3>
     c40:	58 f3       	brcs	.-42     	; 0xc18 <__addsf3+0xc>
     c42:	ba 17       	cp	r27, r26
     c44:	62 07       	cpc	r22, r18
     c46:	73 07       	cpc	r23, r19
     c48:	84 07       	cpc	r24, r20
     c4a:	95 07       	cpc	r25, r21
     c4c:	20 f0       	brcs	.+8      	; 0xc56 <__addsf3x+0x1c>
     c4e:	79 f4       	brne	.+30     	; 0xc6e <__addsf3x+0x34>
     c50:	a6 f5       	brtc	.+104    	; 0xcba <__addsf3x+0x80>
     c52:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__fp_zero>
     c56:	0e f4       	brtc	.+2      	; 0xc5a <__addsf3x+0x20>
     c58:	e0 95       	com	r30
     c5a:	0b 2e       	mov	r0, r27
     c5c:	ba 2f       	mov	r27, r26
     c5e:	a0 2d       	mov	r26, r0
     c60:	0b 01       	movw	r0, r22
     c62:	b9 01       	movw	r22, r18
     c64:	90 01       	movw	r18, r0
     c66:	0c 01       	movw	r0, r24
     c68:	ca 01       	movw	r24, r20
     c6a:	a0 01       	movw	r20, r0
     c6c:	11 24       	eor	r1, r1
     c6e:	ff 27       	eor	r31, r31
     c70:	59 1b       	sub	r21, r25
     c72:	99 f0       	breq	.+38     	; 0xc9a <__addsf3x+0x60>
     c74:	59 3f       	cpi	r21, 0xF9	; 249
     c76:	50 f4       	brcc	.+20     	; 0xc8c <__addsf3x+0x52>
     c78:	50 3e       	cpi	r21, 0xE0	; 224
     c7a:	68 f1       	brcs	.+90     	; 0xcd6 <__addsf3x+0x9c>
     c7c:	1a 16       	cp	r1, r26
     c7e:	f0 40       	sbci	r31, 0x00	; 0
     c80:	a2 2f       	mov	r26, r18
     c82:	23 2f       	mov	r18, r19
     c84:	34 2f       	mov	r19, r20
     c86:	44 27       	eor	r20, r20
     c88:	58 5f       	subi	r21, 0xF8	; 248
     c8a:	f3 cf       	rjmp	.-26     	; 0xc72 <__addsf3x+0x38>
     c8c:	46 95       	lsr	r20
     c8e:	37 95       	ror	r19
     c90:	27 95       	ror	r18
     c92:	a7 95       	ror	r26
     c94:	f0 40       	sbci	r31, 0x00	; 0
     c96:	53 95       	inc	r21
     c98:	c9 f7       	brne	.-14     	; 0xc8c <__addsf3x+0x52>
     c9a:	7e f4       	brtc	.+30     	; 0xcba <__addsf3x+0x80>
     c9c:	1f 16       	cp	r1, r31
     c9e:	ba 0b       	sbc	r27, r26
     ca0:	62 0b       	sbc	r22, r18
     ca2:	73 0b       	sbc	r23, r19
     ca4:	84 0b       	sbc	r24, r20
     ca6:	ba f0       	brmi	.+46     	; 0xcd6 <__addsf3x+0x9c>
     ca8:	91 50       	subi	r25, 0x01	; 1
     caa:	a1 f0       	breq	.+40     	; 0xcd4 <__addsf3x+0x9a>
     cac:	ff 0f       	add	r31, r31
     cae:	bb 1f       	adc	r27, r27
     cb0:	66 1f       	adc	r22, r22
     cb2:	77 1f       	adc	r23, r23
     cb4:	88 1f       	adc	r24, r24
     cb6:	c2 f7       	brpl	.-16     	; 0xca8 <__addsf3x+0x6e>
     cb8:	0e c0       	rjmp	.+28     	; 0xcd6 <__addsf3x+0x9c>
     cba:	ba 0f       	add	r27, r26
     cbc:	62 1f       	adc	r22, r18
     cbe:	73 1f       	adc	r23, r19
     cc0:	84 1f       	adc	r24, r20
     cc2:	48 f4       	brcc	.+18     	; 0xcd6 <__addsf3x+0x9c>
     cc4:	87 95       	ror	r24
     cc6:	77 95       	ror	r23
     cc8:	67 95       	ror	r22
     cca:	b7 95       	ror	r27
     ccc:	f7 95       	ror	r31
     cce:	9e 3f       	cpi	r25, 0xFE	; 254
     cd0:	08 f0       	brcs	.+2      	; 0xcd4 <__addsf3x+0x9a>
     cd2:	b0 cf       	rjmp	.-160    	; 0xc34 <__addsf3+0x28>
     cd4:	93 95       	inc	r25
     cd6:	88 0f       	add	r24, r24
     cd8:	08 f0       	brcs	.+2      	; 0xcdc <__addsf3x+0xa2>
     cda:	99 27       	eor	r25, r25
     cdc:	ee 0f       	add	r30, r30
     cde:	97 95       	ror	r25
     ce0:	87 95       	ror	r24
     ce2:	08 95       	ret

00000ce4 <__divsf3>:
     ce4:	0e 94 86 06 	call	0xd0c	; 0xd0c <__divsf3x>
     ce8:	0c 94 38 07 	jmp	0xe70	; 0xe70 <__fp_round>
     cec:	0e 94 31 07 	call	0xe62	; 0xe62 <__fp_pscB>
     cf0:	58 f0       	brcs	.+22     	; 0xd08 <__divsf3+0x24>
     cf2:	0e 94 2a 07 	call	0xe54	; 0xe54 <__fp_pscA>
     cf6:	40 f0       	brcs	.+16     	; 0xd08 <__divsf3+0x24>
     cf8:	29 f4       	brne	.+10     	; 0xd04 <__divsf3+0x20>
     cfa:	5f 3f       	cpi	r21, 0xFF	; 255
     cfc:	29 f0       	breq	.+10     	; 0xd08 <__divsf3+0x24>
     cfe:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__fp_inf>
     d02:	51 11       	cpse	r21, r1
     d04:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__fp_szero>
     d08:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_nan>

00000d0c <__divsf3x>:
     d0c:	0e 94 49 07 	call	0xe92	; 0xe92 <__fp_split3>
     d10:	68 f3       	brcs	.-38     	; 0xcec <__divsf3+0x8>

00000d12 <__divsf3_pse>:
     d12:	99 23       	and	r25, r25
     d14:	b1 f3       	breq	.-20     	; 0xd02 <__divsf3+0x1e>
     d16:	55 23       	and	r21, r21
     d18:	91 f3       	breq	.-28     	; 0xcfe <__divsf3+0x1a>
     d1a:	95 1b       	sub	r25, r21
     d1c:	55 0b       	sbc	r21, r21
     d1e:	bb 27       	eor	r27, r27
     d20:	aa 27       	eor	r26, r26
     d22:	62 17       	cp	r22, r18
     d24:	73 07       	cpc	r23, r19
     d26:	84 07       	cpc	r24, r20
     d28:	38 f0       	brcs	.+14     	; 0xd38 <__divsf3_pse+0x26>
     d2a:	9f 5f       	subi	r25, 0xFF	; 255
     d2c:	5f 4f       	sbci	r21, 0xFF	; 255
     d2e:	22 0f       	add	r18, r18
     d30:	33 1f       	adc	r19, r19
     d32:	44 1f       	adc	r20, r20
     d34:	aa 1f       	adc	r26, r26
     d36:	a9 f3       	breq	.-22     	; 0xd22 <__divsf3_pse+0x10>
     d38:	35 d0       	rcall	.+106    	; 0xda4 <__divsf3_pse+0x92>
     d3a:	0e 2e       	mov	r0, r30
     d3c:	3a f0       	brmi	.+14     	; 0xd4c <__divsf3_pse+0x3a>
     d3e:	e0 e8       	ldi	r30, 0x80	; 128
     d40:	32 d0       	rcall	.+100    	; 0xda6 <__divsf3_pse+0x94>
     d42:	91 50       	subi	r25, 0x01	; 1
     d44:	50 40       	sbci	r21, 0x00	; 0
     d46:	e6 95       	lsr	r30
     d48:	00 1c       	adc	r0, r0
     d4a:	ca f7       	brpl	.-14     	; 0xd3e <__divsf3_pse+0x2c>
     d4c:	2b d0       	rcall	.+86     	; 0xda4 <__divsf3_pse+0x92>
     d4e:	fe 2f       	mov	r31, r30
     d50:	29 d0       	rcall	.+82     	; 0xda4 <__divsf3_pse+0x92>
     d52:	66 0f       	add	r22, r22
     d54:	77 1f       	adc	r23, r23
     d56:	88 1f       	adc	r24, r24
     d58:	bb 1f       	adc	r27, r27
     d5a:	26 17       	cp	r18, r22
     d5c:	37 07       	cpc	r19, r23
     d5e:	48 07       	cpc	r20, r24
     d60:	ab 07       	cpc	r26, r27
     d62:	b0 e8       	ldi	r27, 0x80	; 128
     d64:	09 f0       	breq	.+2      	; 0xd68 <__divsf3_pse+0x56>
     d66:	bb 0b       	sbc	r27, r27
     d68:	80 2d       	mov	r24, r0
     d6a:	bf 01       	movw	r22, r30
     d6c:	ff 27       	eor	r31, r31
     d6e:	93 58       	subi	r25, 0x83	; 131
     d70:	5f 4f       	sbci	r21, 0xFF	; 255
     d72:	3a f0       	brmi	.+14     	; 0xd82 <__divsf3_pse+0x70>
     d74:	9e 3f       	cpi	r25, 0xFE	; 254
     d76:	51 05       	cpc	r21, r1
     d78:	78 f0       	brcs	.+30     	; 0xd98 <__divsf3_pse+0x86>
     d7a:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__fp_inf>
     d7e:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__fp_szero>
     d82:	5f 3f       	cpi	r21, 0xFF	; 255
     d84:	e4 f3       	brlt	.-8      	; 0xd7e <__divsf3_pse+0x6c>
     d86:	98 3e       	cpi	r25, 0xE8	; 232
     d88:	d4 f3       	brlt	.-12     	; 0xd7e <__divsf3_pse+0x6c>
     d8a:	86 95       	lsr	r24
     d8c:	77 95       	ror	r23
     d8e:	67 95       	ror	r22
     d90:	b7 95       	ror	r27
     d92:	f7 95       	ror	r31
     d94:	9f 5f       	subi	r25, 0xFF	; 255
     d96:	c9 f7       	brne	.-14     	; 0xd8a <__divsf3_pse+0x78>
     d98:	88 0f       	add	r24, r24
     d9a:	91 1d       	adc	r25, r1
     d9c:	96 95       	lsr	r25
     d9e:	87 95       	ror	r24
     da0:	97 f9       	bld	r25, 7
     da2:	08 95       	ret
     da4:	e1 e0       	ldi	r30, 0x01	; 1
     da6:	66 0f       	add	r22, r22
     da8:	77 1f       	adc	r23, r23
     daa:	88 1f       	adc	r24, r24
     dac:	bb 1f       	adc	r27, r27
     dae:	62 17       	cp	r22, r18
     db0:	73 07       	cpc	r23, r19
     db2:	84 07       	cpc	r24, r20
     db4:	ba 07       	cpc	r27, r26
     db6:	20 f0       	brcs	.+8      	; 0xdc0 <__divsf3_pse+0xae>
     db8:	62 1b       	sub	r22, r18
     dba:	73 0b       	sbc	r23, r19
     dbc:	84 0b       	sbc	r24, r20
     dbe:	ba 0b       	sbc	r27, r26
     dc0:	ee 1f       	adc	r30, r30
     dc2:	88 f7       	brcc	.-30     	; 0xda6 <__divsf3_pse+0x94>
     dc4:	e0 95       	com	r30
     dc6:	08 95       	ret

00000dc8 <__floatunsisf>:
     dc8:	e8 94       	clt
     dca:	09 c0       	rjmp	.+18     	; 0xdde <__floatsisf+0x12>

00000dcc <__floatsisf>:
     dcc:	97 fb       	bst	r25, 7
     dce:	3e f4       	brtc	.+14     	; 0xdde <__floatsisf+0x12>
     dd0:	90 95       	com	r25
     dd2:	80 95       	com	r24
     dd4:	70 95       	com	r23
     dd6:	61 95       	neg	r22
     dd8:	7f 4f       	sbci	r23, 0xFF	; 255
     dda:	8f 4f       	sbci	r24, 0xFF	; 255
     ddc:	9f 4f       	sbci	r25, 0xFF	; 255
     dde:	99 23       	and	r25, r25
     de0:	a9 f0       	breq	.+42     	; 0xe0c <__floatsisf+0x40>
     de2:	f9 2f       	mov	r31, r25
     de4:	96 e9       	ldi	r25, 0x96	; 150
     de6:	bb 27       	eor	r27, r27
     de8:	93 95       	inc	r25
     dea:	f6 95       	lsr	r31
     dec:	87 95       	ror	r24
     dee:	77 95       	ror	r23
     df0:	67 95       	ror	r22
     df2:	b7 95       	ror	r27
     df4:	f1 11       	cpse	r31, r1
     df6:	f8 cf       	rjmp	.-16     	; 0xde8 <__floatsisf+0x1c>
     df8:	fa f4       	brpl	.+62     	; 0xe38 <__floatsisf+0x6c>
     dfa:	bb 0f       	add	r27, r27
     dfc:	11 f4       	brne	.+4      	; 0xe02 <__floatsisf+0x36>
     dfe:	60 ff       	sbrs	r22, 0
     e00:	1b c0       	rjmp	.+54     	; 0xe38 <__floatsisf+0x6c>
     e02:	6f 5f       	subi	r22, 0xFF	; 255
     e04:	7f 4f       	sbci	r23, 0xFF	; 255
     e06:	8f 4f       	sbci	r24, 0xFF	; 255
     e08:	9f 4f       	sbci	r25, 0xFF	; 255
     e0a:	16 c0       	rjmp	.+44     	; 0xe38 <__floatsisf+0x6c>
     e0c:	88 23       	and	r24, r24
     e0e:	11 f0       	breq	.+4      	; 0xe14 <__floatsisf+0x48>
     e10:	96 e9       	ldi	r25, 0x96	; 150
     e12:	11 c0       	rjmp	.+34     	; 0xe36 <__floatsisf+0x6a>
     e14:	77 23       	and	r23, r23
     e16:	21 f0       	breq	.+8      	; 0xe20 <__floatsisf+0x54>
     e18:	9e e8       	ldi	r25, 0x8E	; 142
     e1a:	87 2f       	mov	r24, r23
     e1c:	76 2f       	mov	r23, r22
     e1e:	05 c0       	rjmp	.+10     	; 0xe2a <__floatsisf+0x5e>
     e20:	66 23       	and	r22, r22
     e22:	71 f0       	breq	.+28     	; 0xe40 <__floatsisf+0x74>
     e24:	96 e8       	ldi	r25, 0x86	; 134
     e26:	86 2f       	mov	r24, r22
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	2a f0       	brmi	.+10     	; 0xe38 <__floatsisf+0x6c>
     e2e:	9a 95       	dec	r25
     e30:	66 0f       	add	r22, r22
     e32:	77 1f       	adc	r23, r23
     e34:	88 1f       	adc	r24, r24
     e36:	da f7       	brpl	.-10     	; 0xe2e <__floatsisf+0x62>
     e38:	88 0f       	add	r24, r24
     e3a:	96 95       	lsr	r25
     e3c:	87 95       	ror	r24
     e3e:	97 f9       	bld	r25, 7
     e40:	08 95       	ret

00000e42 <__fp_inf>:
     e42:	97 f9       	bld	r25, 7
     e44:	9f 67       	ori	r25, 0x7F	; 127
     e46:	80 e8       	ldi	r24, 0x80	; 128
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	08 95       	ret

00000e4e <__fp_nan>:
     e4e:	9f ef       	ldi	r25, 0xFF	; 255
     e50:	80 ec       	ldi	r24, 0xC0	; 192
     e52:	08 95       	ret

00000e54 <__fp_pscA>:
     e54:	00 24       	eor	r0, r0
     e56:	0a 94       	dec	r0
     e58:	16 16       	cp	r1, r22
     e5a:	17 06       	cpc	r1, r23
     e5c:	18 06       	cpc	r1, r24
     e5e:	09 06       	cpc	r0, r25
     e60:	08 95       	ret

00000e62 <__fp_pscB>:
     e62:	00 24       	eor	r0, r0
     e64:	0a 94       	dec	r0
     e66:	12 16       	cp	r1, r18
     e68:	13 06       	cpc	r1, r19
     e6a:	14 06       	cpc	r1, r20
     e6c:	05 06       	cpc	r0, r21
     e6e:	08 95       	ret

00000e70 <__fp_round>:
     e70:	09 2e       	mov	r0, r25
     e72:	03 94       	inc	r0
     e74:	00 0c       	add	r0, r0
     e76:	11 f4       	brne	.+4      	; 0xe7c <__fp_round+0xc>
     e78:	88 23       	and	r24, r24
     e7a:	52 f0       	brmi	.+20     	; 0xe90 <__fp_round+0x20>
     e7c:	bb 0f       	add	r27, r27
     e7e:	40 f4       	brcc	.+16     	; 0xe90 <__fp_round+0x20>
     e80:	bf 2b       	or	r27, r31
     e82:	11 f4       	brne	.+4      	; 0xe88 <__fp_round+0x18>
     e84:	60 ff       	sbrs	r22, 0
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <__fp_round+0x20>
     e88:	6f 5f       	subi	r22, 0xFF	; 255
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255
     e8c:	8f 4f       	sbci	r24, 0xFF	; 255
     e8e:	9f 4f       	sbci	r25, 0xFF	; 255
     e90:	08 95       	ret

00000e92 <__fp_split3>:
     e92:	57 fd       	sbrc	r21, 7
     e94:	90 58       	subi	r25, 0x80	; 128
     e96:	44 0f       	add	r20, r20
     e98:	55 1f       	adc	r21, r21
     e9a:	59 f0       	breq	.+22     	; 0xeb2 <__fp_splitA+0x10>
     e9c:	5f 3f       	cpi	r21, 0xFF	; 255
     e9e:	71 f0       	breq	.+28     	; 0xebc <__fp_splitA+0x1a>
     ea0:	47 95       	ror	r20

00000ea2 <__fp_splitA>:
     ea2:	88 0f       	add	r24, r24
     ea4:	97 fb       	bst	r25, 7
     ea6:	99 1f       	adc	r25, r25
     ea8:	61 f0       	breq	.+24     	; 0xec2 <__fp_splitA+0x20>
     eaa:	9f 3f       	cpi	r25, 0xFF	; 255
     eac:	79 f0       	breq	.+30     	; 0xecc <__fp_splitA+0x2a>
     eae:	87 95       	ror	r24
     eb0:	08 95       	ret
     eb2:	12 16       	cp	r1, r18
     eb4:	13 06       	cpc	r1, r19
     eb6:	14 06       	cpc	r1, r20
     eb8:	55 1f       	adc	r21, r21
     eba:	f2 cf       	rjmp	.-28     	; 0xea0 <__fp_split3+0xe>
     ebc:	46 95       	lsr	r20
     ebe:	f1 df       	rcall	.-30     	; 0xea2 <__fp_splitA>
     ec0:	08 c0       	rjmp	.+16     	; 0xed2 <__fp_splitA+0x30>
     ec2:	16 16       	cp	r1, r22
     ec4:	17 06       	cpc	r1, r23
     ec6:	18 06       	cpc	r1, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	f1 cf       	rjmp	.-30     	; 0xeae <__fp_splitA+0xc>
     ecc:	86 95       	lsr	r24
     ece:	71 05       	cpc	r23, r1
     ed0:	61 05       	cpc	r22, r1
     ed2:	08 94       	sec
     ed4:	08 95       	ret

00000ed6 <__fp_zero>:
     ed6:	e8 94       	clt

00000ed8 <__fp_szero>:
     ed8:	bb 27       	eor	r27, r27
     eda:	66 27       	eor	r22, r22
     edc:	77 27       	eor	r23, r23
     ede:	cb 01       	movw	r24, r22
     ee0:	97 f9       	bld	r25, 7
     ee2:	08 95       	ret

00000ee4 <__mulsf3>:
     ee4:	0e 94 85 07 	call	0xf0a	; 0xf0a <__mulsf3x>
     ee8:	0c 94 38 07 	jmp	0xe70	; 0xe70 <__fp_round>
     eec:	0e 94 2a 07 	call	0xe54	; 0xe54 <__fp_pscA>
     ef0:	38 f0       	brcs	.+14     	; 0xf00 <__mulsf3+0x1c>
     ef2:	0e 94 31 07 	call	0xe62	; 0xe62 <__fp_pscB>
     ef6:	20 f0       	brcs	.+8      	; 0xf00 <__mulsf3+0x1c>
     ef8:	95 23       	and	r25, r21
     efa:	11 f0       	breq	.+4      	; 0xf00 <__mulsf3+0x1c>
     efc:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__fp_inf>
     f00:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_nan>
     f04:	11 24       	eor	r1, r1
     f06:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__fp_szero>

00000f0a <__mulsf3x>:
     f0a:	0e 94 49 07 	call	0xe92	; 0xe92 <__fp_split3>
     f0e:	70 f3       	brcs	.-36     	; 0xeec <__mulsf3+0x8>

00000f10 <__mulsf3_pse>:
     f10:	95 9f       	mul	r25, r21
     f12:	c1 f3       	breq	.-16     	; 0xf04 <__mulsf3+0x20>
     f14:	95 0f       	add	r25, r21
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	55 1f       	adc	r21, r21
     f1a:	62 9f       	mul	r22, r18
     f1c:	f0 01       	movw	r30, r0
     f1e:	72 9f       	mul	r23, r18
     f20:	bb 27       	eor	r27, r27
     f22:	f0 0d       	add	r31, r0
     f24:	b1 1d       	adc	r27, r1
     f26:	63 9f       	mul	r22, r19
     f28:	aa 27       	eor	r26, r26
     f2a:	f0 0d       	add	r31, r0
     f2c:	b1 1d       	adc	r27, r1
     f2e:	aa 1f       	adc	r26, r26
     f30:	64 9f       	mul	r22, r20
     f32:	66 27       	eor	r22, r22
     f34:	b0 0d       	add	r27, r0
     f36:	a1 1d       	adc	r26, r1
     f38:	66 1f       	adc	r22, r22
     f3a:	82 9f       	mul	r24, r18
     f3c:	22 27       	eor	r18, r18
     f3e:	b0 0d       	add	r27, r0
     f40:	a1 1d       	adc	r26, r1
     f42:	62 1f       	adc	r22, r18
     f44:	73 9f       	mul	r23, r19
     f46:	b0 0d       	add	r27, r0
     f48:	a1 1d       	adc	r26, r1
     f4a:	62 1f       	adc	r22, r18
     f4c:	83 9f       	mul	r24, r19
     f4e:	a0 0d       	add	r26, r0
     f50:	61 1d       	adc	r22, r1
     f52:	22 1f       	adc	r18, r18
     f54:	74 9f       	mul	r23, r20
     f56:	33 27       	eor	r19, r19
     f58:	a0 0d       	add	r26, r0
     f5a:	61 1d       	adc	r22, r1
     f5c:	23 1f       	adc	r18, r19
     f5e:	84 9f       	mul	r24, r20
     f60:	60 0d       	add	r22, r0
     f62:	21 1d       	adc	r18, r1
     f64:	82 2f       	mov	r24, r18
     f66:	76 2f       	mov	r23, r22
     f68:	6a 2f       	mov	r22, r26
     f6a:	11 24       	eor	r1, r1
     f6c:	9f 57       	subi	r25, 0x7F	; 127
     f6e:	50 40       	sbci	r21, 0x00	; 0
     f70:	9a f0       	brmi	.+38     	; 0xf98 <__mulsf3_pse+0x88>
     f72:	f1 f0       	breq	.+60     	; 0xfb0 <__mulsf3_pse+0xa0>
     f74:	88 23       	and	r24, r24
     f76:	4a f0       	brmi	.+18     	; 0xf8a <__mulsf3_pse+0x7a>
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	bb 1f       	adc	r27, r27
     f7e:	66 1f       	adc	r22, r22
     f80:	77 1f       	adc	r23, r23
     f82:	88 1f       	adc	r24, r24
     f84:	91 50       	subi	r25, 0x01	; 1
     f86:	50 40       	sbci	r21, 0x00	; 0
     f88:	a9 f7       	brne	.-22     	; 0xf74 <__mulsf3_pse+0x64>
     f8a:	9e 3f       	cpi	r25, 0xFE	; 254
     f8c:	51 05       	cpc	r21, r1
     f8e:	80 f0       	brcs	.+32     	; 0xfb0 <__mulsf3_pse+0xa0>
     f90:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__fp_inf>
     f94:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__fp_szero>
     f98:	5f 3f       	cpi	r21, 0xFF	; 255
     f9a:	e4 f3       	brlt	.-8      	; 0xf94 <__mulsf3_pse+0x84>
     f9c:	98 3e       	cpi	r25, 0xE8	; 232
     f9e:	d4 f3       	brlt	.-12     	; 0xf94 <__mulsf3_pse+0x84>
     fa0:	86 95       	lsr	r24
     fa2:	77 95       	ror	r23
     fa4:	67 95       	ror	r22
     fa6:	b7 95       	ror	r27
     fa8:	f7 95       	ror	r31
     faa:	e7 95       	ror	r30
     fac:	9f 5f       	subi	r25, 0xFF	; 255
     fae:	c1 f7       	brne	.-16     	; 0xfa0 <__mulsf3_pse+0x90>
     fb0:	fe 2b       	or	r31, r30
     fb2:	88 0f       	add	r24, r24
     fb4:	91 1d       	adc	r25, r1
     fb6:	96 95       	lsr	r25
     fb8:	87 95       	ror	r24
     fba:	97 f9       	bld	r25, 7
     fbc:	08 95       	ret

00000fbe <dtostrf>:
     fbe:	ef 92       	push	r14
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	e8 01       	movw	r28, r16
     fca:	47 fd       	sbrc	r20, 7
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <dtostrf+0x14>
     fce:	34 e0       	ldi	r19, 0x04	; 4
     fd0:	01 c0       	rjmp	.+2      	; 0xfd4 <dtostrf+0x16>
     fd2:	34 e1       	ldi	r19, 0x14	; 20
     fd4:	04 2e       	mov	r0, r20
     fd6:	00 0c       	add	r0, r0
     fd8:	55 0b       	sbc	r21, r21
     fda:	57 ff       	sbrs	r21, 7
     fdc:	03 c0       	rjmp	.+6      	; 0xfe4 <dtostrf+0x26>
     fde:	51 95       	neg	r21
     fe0:	41 95       	neg	r20
     fe2:	51 09       	sbc	r21, r1
     fe4:	e3 2e       	mov	r14, r19
     fe6:	02 2f       	mov	r16, r18
     fe8:	24 2f       	mov	r18, r20
     fea:	ae 01       	movw	r20, r28
     fec:	0e 94 ff 07 	call	0xffe	; 0xffe <dtoa_prf>
     ff0:	ce 01       	movw	r24, r28
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	ef 90       	pop	r14
     ffc:	08 95       	ret

00000ffe <dtoa_prf>:
     ffe:	a9 e0       	ldi	r26, 0x09	; 9
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e5 e0       	ldi	r30, 0x05	; 5
    1004:	f8 e0       	ldi	r31, 0x08	; 8
    1006:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__prologue_saves__+0xc>
    100a:	6a 01       	movw	r12, r20
    100c:	12 2f       	mov	r17, r18
    100e:	b0 2e       	mov	r11, r16
    1010:	2b e3       	ldi	r18, 0x3B	; 59
    1012:	20 17       	cp	r18, r16
    1014:	20 f0       	brcs	.+8      	; 0x101e <dtoa_prf+0x20>
    1016:	ff 24       	eor	r15, r15
    1018:	f3 94       	inc	r15
    101a:	f0 0e       	add	r15, r16
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <dtoa_prf+0x24>
    101e:	2c e3       	ldi	r18, 0x3C	; 60
    1020:	f2 2e       	mov	r15, r18
    1022:	0f 2d       	mov	r16, r15
    1024:	27 e0       	ldi	r18, 0x07	; 7
    1026:	ae 01       	movw	r20, r28
    1028:	4f 5f       	subi	r20, 0xFF	; 255
    102a:	5f 4f       	sbci	r21, 0xFF	; 255
    102c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__ftoa_engine>
    1030:	bc 01       	movw	r22, r24
    1032:	49 81       	ldd	r20, Y+1	; 0x01
    1034:	84 2f       	mov	r24, r20
    1036:	89 70       	andi	r24, 0x09	; 9
    1038:	81 30       	cpi	r24, 0x01	; 1
    103a:	31 f0       	breq	.+12     	; 0x1048 <dtoa_prf+0x4a>
    103c:	e1 fc       	sbrc	r14, 1
    103e:	06 c0       	rjmp	.+12     	; 0x104c <dtoa_prf+0x4e>
    1040:	e0 fe       	sbrs	r14, 0
    1042:	06 c0       	rjmp	.+12     	; 0x1050 <dtoa_prf+0x52>
    1044:	90 e2       	ldi	r25, 0x20	; 32
    1046:	05 c0       	rjmp	.+10     	; 0x1052 <dtoa_prf+0x54>
    1048:	9d e2       	ldi	r25, 0x2D	; 45
    104a:	03 c0       	rjmp	.+6      	; 0x1052 <dtoa_prf+0x54>
    104c:	9b e2       	ldi	r25, 0x2B	; 43
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <dtoa_prf+0x54>
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	5e 2d       	mov	r21, r14
    1054:	50 71       	andi	r21, 0x10	; 16
    1056:	43 ff       	sbrs	r20, 3
    1058:	3c c0       	rjmp	.+120    	; 0x10d2 <dtoa_prf+0xd4>
    105a:	91 11       	cpse	r25, r1
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <dtoa_prf+0x64>
    105e:	83 e0       	ldi	r24, 0x03	; 3
    1060:	01 c0       	rjmp	.+2      	; 0x1064 <dtoa_prf+0x66>
    1062:	84 e0       	ldi	r24, 0x04	; 4
    1064:	81 17       	cp	r24, r17
    1066:	18 f4       	brcc	.+6      	; 0x106e <dtoa_prf+0x70>
    1068:	21 2f       	mov	r18, r17
    106a:	28 1b       	sub	r18, r24
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <dtoa_prf+0x72>
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	51 11       	cpse	r21, r1
    1072:	0b c0       	rjmp	.+22     	; 0x108a <dtoa_prf+0x8c>
    1074:	f6 01       	movw	r30, r12
    1076:	82 2f       	mov	r24, r18
    1078:	30 e2       	ldi	r19, 0x20	; 32
    107a:	88 23       	and	r24, r24
    107c:	19 f0       	breq	.+6      	; 0x1084 <dtoa_prf+0x86>
    107e:	31 93       	st	Z+, r19
    1080:	81 50       	subi	r24, 0x01	; 1
    1082:	fb cf       	rjmp	.-10     	; 0x107a <dtoa_prf+0x7c>
    1084:	c2 0e       	add	r12, r18
    1086:	d1 1c       	adc	r13, r1
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	99 23       	and	r25, r25
    108c:	29 f0       	breq	.+10     	; 0x1098 <dtoa_prf+0x9a>
    108e:	d6 01       	movw	r26, r12
    1090:	9c 93       	st	X, r25
    1092:	f6 01       	movw	r30, r12
    1094:	31 96       	adiw	r30, 0x01	; 1
    1096:	6f 01       	movw	r12, r30
    1098:	c6 01       	movw	r24, r12
    109a:	03 96       	adiw	r24, 0x03	; 3
    109c:	e2 fe       	sbrs	r14, 2
    109e:	0a c0       	rjmp	.+20     	; 0x10b4 <dtoa_prf+0xb6>
    10a0:	3e e4       	ldi	r19, 0x4E	; 78
    10a2:	d6 01       	movw	r26, r12
    10a4:	3c 93       	st	X, r19
    10a6:	41 e4       	ldi	r20, 0x41	; 65
    10a8:	11 96       	adiw	r26, 0x01	; 1
    10aa:	4c 93       	st	X, r20
    10ac:	11 97       	sbiw	r26, 0x01	; 1
    10ae:	12 96       	adiw	r26, 0x02	; 2
    10b0:	3c 93       	st	X, r19
    10b2:	06 c0       	rjmp	.+12     	; 0x10c0 <dtoa_prf+0xc2>
    10b4:	3e e6       	ldi	r19, 0x6E	; 110
    10b6:	f6 01       	movw	r30, r12
    10b8:	30 83       	st	Z, r19
    10ba:	41 e6       	ldi	r20, 0x61	; 97
    10bc:	41 83       	std	Z+1, r20	; 0x01
    10be:	32 83       	std	Z+2, r19	; 0x02
    10c0:	fc 01       	movw	r30, r24
    10c2:	32 2f       	mov	r19, r18
    10c4:	40 e2       	ldi	r20, 0x20	; 32
    10c6:	33 23       	and	r19, r19
    10c8:	09 f4       	brne	.+2      	; 0x10cc <dtoa_prf+0xce>
    10ca:	42 c0       	rjmp	.+132    	; 0x1150 <dtoa_prf+0x152>
    10cc:	41 93       	st	Z+, r20
    10ce:	31 50       	subi	r19, 0x01	; 1
    10d0:	fa cf       	rjmp	.-12     	; 0x10c6 <dtoa_prf+0xc8>
    10d2:	42 ff       	sbrs	r20, 2
    10d4:	44 c0       	rjmp	.+136    	; 0x115e <dtoa_prf+0x160>
    10d6:	91 11       	cpse	r25, r1
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <dtoa_prf+0xe0>
    10da:	83 e0       	ldi	r24, 0x03	; 3
    10dc:	01 c0       	rjmp	.+2      	; 0x10e0 <dtoa_prf+0xe2>
    10de:	84 e0       	ldi	r24, 0x04	; 4
    10e0:	81 17       	cp	r24, r17
    10e2:	18 f4       	brcc	.+6      	; 0x10ea <dtoa_prf+0xec>
    10e4:	21 2f       	mov	r18, r17
    10e6:	28 1b       	sub	r18, r24
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <dtoa_prf+0xee>
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	51 11       	cpse	r21, r1
    10ee:	0b c0       	rjmp	.+22     	; 0x1106 <dtoa_prf+0x108>
    10f0:	f6 01       	movw	r30, r12
    10f2:	82 2f       	mov	r24, r18
    10f4:	30 e2       	ldi	r19, 0x20	; 32
    10f6:	88 23       	and	r24, r24
    10f8:	19 f0       	breq	.+6      	; 0x1100 <dtoa_prf+0x102>
    10fa:	31 93       	st	Z+, r19
    10fc:	81 50       	subi	r24, 0x01	; 1
    10fe:	fb cf       	rjmp	.-10     	; 0x10f6 <dtoa_prf+0xf8>
    1100:	c2 0e       	add	r12, r18
    1102:	d1 1c       	adc	r13, r1
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	99 23       	and	r25, r25
    1108:	29 f0       	breq	.+10     	; 0x1114 <dtoa_prf+0x116>
    110a:	d6 01       	movw	r26, r12
    110c:	9c 93       	st	X, r25
    110e:	f6 01       	movw	r30, r12
    1110:	31 96       	adiw	r30, 0x01	; 1
    1112:	6f 01       	movw	r12, r30
    1114:	c6 01       	movw	r24, r12
    1116:	03 96       	adiw	r24, 0x03	; 3
    1118:	e2 fe       	sbrs	r14, 2
    111a:	0b c0       	rjmp	.+22     	; 0x1132 <dtoa_prf+0x134>
    111c:	39 e4       	ldi	r19, 0x49	; 73
    111e:	d6 01       	movw	r26, r12
    1120:	3c 93       	st	X, r19
    1122:	3e e4       	ldi	r19, 0x4E	; 78
    1124:	11 96       	adiw	r26, 0x01	; 1
    1126:	3c 93       	st	X, r19
    1128:	11 97       	sbiw	r26, 0x01	; 1
    112a:	36 e4       	ldi	r19, 0x46	; 70
    112c:	12 96       	adiw	r26, 0x02	; 2
    112e:	3c 93       	st	X, r19
    1130:	07 c0       	rjmp	.+14     	; 0x1140 <dtoa_prf+0x142>
    1132:	39 e6       	ldi	r19, 0x69	; 105
    1134:	f6 01       	movw	r30, r12
    1136:	30 83       	st	Z, r19
    1138:	3e e6       	ldi	r19, 0x6E	; 110
    113a:	31 83       	std	Z+1, r19	; 0x01
    113c:	36 e6       	ldi	r19, 0x66	; 102
    113e:	32 83       	std	Z+2, r19	; 0x02
    1140:	fc 01       	movw	r30, r24
    1142:	32 2f       	mov	r19, r18
    1144:	40 e2       	ldi	r20, 0x20	; 32
    1146:	33 23       	and	r19, r19
    1148:	19 f0       	breq	.+6      	; 0x1150 <dtoa_prf+0x152>
    114a:	41 93       	st	Z+, r20
    114c:	31 50       	subi	r19, 0x01	; 1
    114e:	fb cf       	rjmp	.-10     	; 0x1146 <dtoa_prf+0x148>
    1150:	fc 01       	movw	r30, r24
    1152:	e2 0f       	add	r30, r18
    1154:	f1 1d       	adc	r31, r1
    1156:	10 82       	st	Z, r1
    1158:	8e ef       	ldi	r24, 0xFE	; 254
    115a:	9f ef       	ldi	r25, 0xFF	; 255
    115c:	a6 c0       	rjmp	.+332    	; 0x12aa <dtoa_prf+0x2ac>
    115e:	21 e0       	ldi	r18, 0x01	; 1
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	91 11       	cpse	r25, r1
    1164:	02 c0       	rjmp	.+4      	; 0x116a <dtoa_prf+0x16c>
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	16 16       	cp	r1, r22
    116c:	17 06       	cpc	r1, r23
    116e:	1c f4       	brge	.+6      	; 0x1176 <dtoa_prf+0x178>
    1170:	fb 01       	movw	r30, r22
    1172:	31 96       	adiw	r30, 0x01	; 1
    1174:	02 c0       	rjmp	.+4      	; 0x117a <dtoa_prf+0x17c>
    1176:	e1 e0       	ldi	r30, 0x01	; 1
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	2e 0f       	add	r18, r30
    117c:	3f 1f       	adc	r19, r31
    117e:	bb 20       	and	r11, r11
    1180:	21 f0       	breq	.+8      	; 0x118a <dtoa_prf+0x18c>
    1182:	eb 2d       	mov	r30, r11
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	31 96       	adiw	r30, 0x01	; 1
    1188:	02 c0       	rjmp	.+4      	; 0x118e <dtoa_prf+0x190>
    118a:	e0 e0       	ldi	r30, 0x00	; 0
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	2e 0f       	add	r18, r30
    1190:	3f 1f       	adc	r19, r31
    1192:	e1 2f       	mov	r30, r17
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	2e 17       	cp	r18, r30
    1198:	3f 07       	cpc	r19, r31
    119a:	1c f4       	brge	.+6      	; 0x11a2 <dtoa_prf+0x1a4>
    119c:	12 1b       	sub	r17, r18
    119e:	21 2f       	mov	r18, r17
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <dtoa_prf+0x1a6>
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	8e 2d       	mov	r24, r14
    11a6:	88 71       	andi	r24, 0x18	; 24
    11a8:	59 f4       	brne	.+22     	; 0x11c0 <dtoa_prf+0x1c2>
    11aa:	f6 01       	movw	r30, r12
    11ac:	82 2f       	mov	r24, r18
    11ae:	30 e2       	ldi	r19, 0x20	; 32
    11b0:	88 23       	and	r24, r24
    11b2:	19 f0       	breq	.+6      	; 0x11ba <dtoa_prf+0x1bc>
    11b4:	31 93       	st	Z+, r19
    11b6:	81 50       	subi	r24, 0x01	; 1
    11b8:	fb cf       	rjmp	.-10     	; 0x11b0 <dtoa_prf+0x1b2>
    11ba:	c2 0e       	add	r12, r18
    11bc:	d1 1c       	adc	r13, r1
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	99 23       	and	r25, r25
    11c2:	29 f0       	breq	.+10     	; 0x11ce <dtoa_prf+0x1d0>
    11c4:	d6 01       	movw	r26, r12
    11c6:	9c 93       	st	X, r25
    11c8:	f6 01       	movw	r30, r12
    11ca:	31 96       	adiw	r30, 0x01	; 1
    11cc:	6f 01       	movw	r12, r30
    11ce:	51 11       	cpse	r21, r1
    11d0:	0b c0       	rjmp	.+22     	; 0x11e8 <dtoa_prf+0x1ea>
    11d2:	f6 01       	movw	r30, r12
    11d4:	82 2f       	mov	r24, r18
    11d6:	90 e3       	ldi	r25, 0x30	; 48
    11d8:	88 23       	and	r24, r24
    11da:	19 f0       	breq	.+6      	; 0x11e2 <dtoa_prf+0x1e4>
    11dc:	91 93       	st	Z+, r25
    11de:	81 50       	subi	r24, 0x01	; 1
    11e0:	fb cf       	rjmp	.-10     	; 0x11d8 <dtoa_prf+0x1da>
    11e2:	c2 0e       	add	r12, r18
    11e4:	d1 1c       	adc	r13, r1
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	0f 2d       	mov	r16, r15
    11ea:	06 0f       	add	r16, r22
    11ec:	9a 81       	ldd	r25, Y+2	; 0x02
    11ee:	34 2f       	mov	r19, r20
    11f0:	30 71       	andi	r19, 0x10	; 16
    11f2:	44 ff       	sbrs	r20, 4
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <dtoa_prf+0x1fe>
    11f6:	91 33       	cpi	r25, 0x31	; 49
    11f8:	09 f4       	brne	.+2      	; 0x11fc <dtoa_prf+0x1fe>
    11fa:	01 50       	subi	r16, 0x01	; 1
    11fc:	10 16       	cp	r1, r16
    11fe:	24 f4       	brge	.+8      	; 0x1208 <dtoa_prf+0x20a>
    1200:	09 30       	cpi	r16, 0x09	; 9
    1202:	18 f0       	brcs	.+6      	; 0x120a <dtoa_prf+0x20c>
    1204:	08 e0       	ldi	r16, 0x08	; 8
    1206:	01 c0       	rjmp	.+2      	; 0x120a <dtoa_prf+0x20c>
    1208:	01 e0       	ldi	r16, 0x01	; 1
    120a:	ab 01       	movw	r20, r22
    120c:	77 ff       	sbrs	r23, 7
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <dtoa_prf+0x216>
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	fb 01       	movw	r30, r22
    1216:	e4 1b       	sub	r30, r20
    1218:	f5 0b       	sbc	r31, r21
    121a:	a1 e0       	ldi	r26, 0x01	; 1
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	ac 0f       	add	r26, r28
    1220:	bd 1f       	adc	r27, r29
    1222:	ea 0f       	add	r30, r26
    1224:	fb 1f       	adc	r31, r27
    1226:	8e e2       	ldi	r24, 0x2E	; 46
    1228:	a8 2e       	mov	r10, r24
    122a:	4b 01       	movw	r8, r22
    122c:	80 1a       	sub	r8, r16
    122e:	91 08       	sbc	r9, r1
    1230:	0b 2d       	mov	r16, r11
    1232:	10 e0       	ldi	r17, 0x00	; 0
    1234:	11 95       	neg	r17
    1236:	01 95       	neg	r16
    1238:	11 09       	sbc	r17, r1
    123a:	4f 3f       	cpi	r20, 0xFF	; 255
    123c:	bf ef       	ldi	r27, 0xFF	; 255
    123e:	5b 07       	cpc	r21, r27
    1240:	21 f4       	brne	.+8      	; 0x124a <dtoa_prf+0x24c>
    1242:	d6 01       	movw	r26, r12
    1244:	ac 92       	st	X, r10
    1246:	11 96       	adiw	r26, 0x01	; 1
    1248:	6d 01       	movw	r12, r26
    124a:	64 17       	cp	r22, r20
    124c:	75 07       	cpc	r23, r21
    124e:	2c f0       	brlt	.+10     	; 0x125a <dtoa_prf+0x25c>
    1250:	84 16       	cp	r8, r20
    1252:	95 06       	cpc	r9, r21
    1254:	14 f4       	brge	.+4      	; 0x125a <dtoa_prf+0x25c>
    1256:	81 81       	ldd	r24, Z+1	; 0x01
    1258:	01 c0       	rjmp	.+2      	; 0x125c <dtoa_prf+0x25e>
    125a:	80 e3       	ldi	r24, 0x30	; 48
    125c:	41 50       	subi	r20, 0x01	; 1
    125e:	51 09       	sbc	r21, r1
    1260:	31 96       	adiw	r30, 0x01	; 1
    1262:	d6 01       	movw	r26, r12
    1264:	11 96       	adiw	r26, 0x01	; 1
    1266:	7d 01       	movw	r14, r26
    1268:	40 17       	cp	r20, r16
    126a:	51 07       	cpc	r21, r17
    126c:	24 f0       	brlt	.+8      	; 0x1276 <dtoa_prf+0x278>
    126e:	d6 01       	movw	r26, r12
    1270:	8c 93       	st	X, r24
    1272:	67 01       	movw	r12, r14
    1274:	e2 cf       	rjmp	.-60     	; 0x123a <dtoa_prf+0x23c>
    1276:	64 17       	cp	r22, r20
    1278:	75 07       	cpc	r23, r21
    127a:	39 f4       	brne	.+14     	; 0x128a <dtoa_prf+0x28c>
    127c:	96 33       	cpi	r25, 0x36	; 54
    127e:	20 f4       	brcc	.+8      	; 0x1288 <dtoa_prf+0x28a>
    1280:	95 33       	cpi	r25, 0x35	; 53
    1282:	19 f4       	brne	.+6      	; 0x128a <dtoa_prf+0x28c>
    1284:	31 11       	cpse	r19, r1
    1286:	01 c0       	rjmp	.+2      	; 0x128a <dtoa_prf+0x28c>
    1288:	81 e3       	ldi	r24, 0x31	; 49
    128a:	f6 01       	movw	r30, r12
    128c:	80 83       	st	Z, r24
    128e:	f7 01       	movw	r30, r14
    1290:	82 2f       	mov	r24, r18
    1292:	90 e2       	ldi	r25, 0x20	; 32
    1294:	88 23       	and	r24, r24
    1296:	19 f0       	breq	.+6      	; 0x129e <dtoa_prf+0x2a0>
    1298:	91 93       	st	Z+, r25
    129a:	81 50       	subi	r24, 0x01	; 1
    129c:	fb cf       	rjmp	.-10     	; 0x1294 <dtoa_prf+0x296>
    129e:	f7 01       	movw	r30, r14
    12a0:	e2 0f       	add	r30, r18
    12a2:	f1 1d       	adc	r31, r1
    12a4:	10 82       	st	Z, r1
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	29 96       	adiw	r28, 0x09	; 9
    12ac:	ec e0       	ldi	r30, 0x0C	; 12
    12ae:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__epilogue_restores__+0xc>

000012b2 <__ftoa_engine>:
    12b2:	28 30       	cpi	r18, 0x08	; 8
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <__ftoa_engine+0x6>
    12b6:	27 e0       	ldi	r18, 0x07	; 7
    12b8:	33 27       	eor	r19, r19
    12ba:	da 01       	movw	r26, r20
    12bc:	99 0f       	add	r25, r25
    12be:	31 1d       	adc	r19, r1
    12c0:	87 fd       	sbrc	r24, 7
    12c2:	91 60       	ori	r25, 0x01	; 1
    12c4:	00 96       	adiw	r24, 0x00	; 0
    12c6:	61 05       	cpc	r22, r1
    12c8:	71 05       	cpc	r23, r1
    12ca:	39 f4       	brne	.+14     	; 0x12da <__ftoa_engine+0x28>
    12cc:	32 60       	ori	r19, 0x02	; 2
    12ce:	2e 5f       	subi	r18, 0xFE	; 254
    12d0:	3d 93       	st	X+, r19
    12d2:	30 e3       	ldi	r19, 0x30	; 48
    12d4:	2a 95       	dec	r18
    12d6:	e1 f7       	brne	.-8      	; 0x12d0 <__ftoa_engine+0x1e>
    12d8:	08 95       	ret
    12da:	9f 3f       	cpi	r25, 0xFF	; 255
    12dc:	30 f0       	brcs	.+12     	; 0x12ea <__ftoa_engine+0x38>
    12de:	80 38       	cpi	r24, 0x80	; 128
    12e0:	71 05       	cpc	r23, r1
    12e2:	61 05       	cpc	r22, r1
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <__ftoa_engine+0x36>
    12e6:	3c 5f       	subi	r19, 0xFC	; 252
    12e8:	3c 5f       	subi	r19, 0xFC	; 252
    12ea:	3d 93       	st	X+, r19
    12ec:	91 30       	cpi	r25, 0x01	; 1
    12ee:	08 f0       	brcs	.+2      	; 0x12f2 <__ftoa_engine+0x40>
    12f0:	80 68       	ori	r24, 0x80	; 128
    12f2:	91 1d       	adc	r25, r1
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	1f 93       	push	r17
    12fa:	0f 93       	push	r16
    12fc:	ff 92       	push	r15
    12fe:	ef 92       	push	r14
    1300:	19 2f       	mov	r17, r25
    1302:	98 7f       	andi	r25, 0xF8	; 248
    1304:	96 95       	lsr	r25
    1306:	e9 2f       	mov	r30, r25
    1308:	96 95       	lsr	r25
    130a:	96 95       	lsr	r25
    130c:	e9 0f       	add	r30, r25
    130e:	ff 27       	eor	r31, r31
    1310:	ee 53       	subi	r30, 0x3E	; 62
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	99 27       	eor	r25, r25
    1316:	33 27       	eor	r19, r19
    1318:	ee 24       	eor	r14, r14
    131a:	ff 24       	eor	r15, r15
    131c:	a7 01       	movw	r20, r14
    131e:	e7 01       	movw	r28, r14
    1320:	05 90       	lpm	r0, Z+
    1322:	08 94       	sec
    1324:	07 94       	ror	r0
    1326:	28 f4       	brcc	.+10     	; 0x1332 <__ftoa_engine+0x80>
    1328:	36 0f       	add	r19, r22
    132a:	e7 1e       	adc	r14, r23
    132c:	f8 1e       	adc	r15, r24
    132e:	49 1f       	adc	r20, r25
    1330:	51 1d       	adc	r21, r1
    1332:	66 0f       	add	r22, r22
    1334:	77 1f       	adc	r23, r23
    1336:	88 1f       	adc	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	06 94       	lsr	r0
    133c:	a1 f7       	brne	.-24     	; 0x1326 <__ftoa_engine+0x74>
    133e:	05 90       	lpm	r0, Z+
    1340:	07 94       	ror	r0
    1342:	28 f4       	brcc	.+10     	; 0x134e <__ftoa_engine+0x9c>
    1344:	e7 0e       	add	r14, r23
    1346:	f8 1e       	adc	r15, r24
    1348:	49 1f       	adc	r20, r25
    134a:	56 1f       	adc	r21, r22
    134c:	c1 1d       	adc	r28, r1
    134e:	77 0f       	add	r23, r23
    1350:	88 1f       	adc	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	66 1f       	adc	r22, r22
    1356:	06 94       	lsr	r0
    1358:	a1 f7       	brne	.-24     	; 0x1342 <__ftoa_engine+0x90>
    135a:	05 90       	lpm	r0, Z+
    135c:	07 94       	ror	r0
    135e:	28 f4       	brcc	.+10     	; 0x136a <__ftoa_engine+0xb8>
    1360:	f8 0e       	add	r15, r24
    1362:	49 1f       	adc	r20, r25
    1364:	56 1f       	adc	r21, r22
    1366:	c7 1f       	adc	r28, r23
    1368:	d1 1d       	adc	r29, r1
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	66 1f       	adc	r22, r22
    1370:	77 1f       	adc	r23, r23
    1372:	06 94       	lsr	r0
    1374:	a1 f7       	brne	.-24     	; 0x135e <__ftoa_engine+0xac>
    1376:	05 90       	lpm	r0, Z+
    1378:	07 94       	ror	r0
    137a:	20 f4       	brcc	.+8      	; 0x1384 <__ftoa_engine+0xd2>
    137c:	49 0f       	add	r20, r25
    137e:	56 1f       	adc	r21, r22
    1380:	c7 1f       	adc	r28, r23
    1382:	d8 1f       	adc	r29, r24
    1384:	99 0f       	add	r25, r25
    1386:	66 1f       	adc	r22, r22
    1388:	77 1f       	adc	r23, r23
    138a:	88 1f       	adc	r24, r24
    138c:	06 94       	lsr	r0
    138e:	a9 f7       	brne	.-22     	; 0x137a <__ftoa_engine+0xc8>
    1390:	84 91       	lpm	r24, Z
    1392:	10 95       	com	r17
    1394:	17 70       	andi	r17, 0x07	; 7
    1396:	41 f0       	breq	.+16     	; 0x13a8 <__ftoa_engine+0xf6>
    1398:	d6 95       	lsr	r29
    139a:	c7 95       	ror	r28
    139c:	57 95       	ror	r21
    139e:	47 95       	ror	r20
    13a0:	f7 94       	ror	r15
    13a2:	e7 94       	ror	r14
    13a4:	1a 95       	dec	r17
    13a6:	c1 f7       	brne	.-16     	; 0x1398 <__ftoa_engine+0xe6>
    13a8:	e8 e6       	ldi	r30, 0x68	; 104
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	68 94       	set
    13ae:	15 90       	lpm	r1, Z+
    13b0:	15 91       	lpm	r17, Z+
    13b2:	35 91       	lpm	r19, Z+
    13b4:	65 91       	lpm	r22, Z+
    13b6:	95 91       	lpm	r25, Z+
    13b8:	05 90       	lpm	r0, Z+
    13ba:	7f e2       	ldi	r23, 0x2F	; 47
    13bc:	73 95       	inc	r23
    13be:	e1 18       	sub	r14, r1
    13c0:	f1 0a       	sbc	r15, r17
    13c2:	43 0b       	sbc	r20, r19
    13c4:	56 0b       	sbc	r21, r22
    13c6:	c9 0b       	sbc	r28, r25
    13c8:	d0 09       	sbc	r29, r0
    13ca:	c0 f7       	brcc	.-16     	; 0x13bc <__ftoa_engine+0x10a>
    13cc:	e1 0c       	add	r14, r1
    13ce:	f1 1e       	adc	r15, r17
    13d0:	43 1f       	adc	r20, r19
    13d2:	56 1f       	adc	r21, r22
    13d4:	c9 1f       	adc	r28, r25
    13d6:	d0 1d       	adc	r29, r0
    13d8:	7e f4       	brtc	.+30     	; 0x13f8 <__ftoa_engine+0x146>
    13da:	70 33       	cpi	r23, 0x30	; 48
    13dc:	11 f4       	brne	.+4      	; 0x13e2 <__ftoa_engine+0x130>
    13de:	8a 95       	dec	r24
    13e0:	e6 cf       	rjmp	.-52     	; 0x13ae <__ftoa_engine+0xfc>
    13e2:	e8 94       	clt
    13e4:	01 50       	subi	r16, 0x01	; 1
    13e6:	30 f0       	brcs	.+12     	; 0x13f4 <__ftoa_engine+0x142>
    13e8:	08 0f       	add	r16, r24
    13ea:	0a f4       	brpl	.+2      	; 0x13ee <__ftoa_engine+0x13c>
    13ec:	00 27       	eor	r16, r16
    13ee:	02 17       	cp	r16, r18
    13f0:	08 f4       	brcc	.+2      	; 0x13f4 <__ftoa_engine+0x142>
    13f2:	20 2f       	mov	r18, r16
    13f4:	23 95       	inc	r18
    13f6:	02 2f       	mov	r16, r18
    13f8:	7a 33       	cpi	r23, 0x3A	; 58
    13fa:	28 f0       	brcs	.+10     	; 0x1406 <__ftoa_engine+0x154>
    13fc:	79 e3       	ldi	r23, 0x39	; 57
    13fe:	7d 93       	st	X+, r23
    1400:	2a 95       	dec	r18
    1402:	e9 f7       	brne	.-6      	; 0x13fe <__ftoa_engine+0x14c>
    1404:	10 c0       	rjmp	.+32     	; 0x1426 <__ftoa_engine+0x174>
    1406:	7d 93       	st	X+, r23
    1408:	2a 95       	dec	r18
    140a:	89 f6       	brne	.-94     	; 0x13ae <__ftoa_engine+0xfc>
    140c:	06 94       	lsr	r0
    140e:	97 95       	ror	r25
    1410:	67 95       	ror	r22
    1412:	37 95       	ror	r19
    1414:	17 95       	ror	r17
    1416:	17 94       	ror	r1
    1418:	e1 18       	sub	r14, r1
    141a:	f1 0a       	sbc	r15, r17
    141c:	43 0b       	sbc	r20, r19
    141e:	56 0b       	sbc	r21, r22
    1420:	c9 0b       	sbc	r28, r25
    1422:	d0 09       	sbc	r29, r0
    1424:	98 f0       	brcs	.+38     	; 0x144c <__ftoa_engine+0x19a>
    1426:	23 95       	inc	r18
    1428:	7e 91       	ld	r23, -X
    142a:	73 95       	inc	r23
    142c:	7a 33       	cpi	r23, 0x3A	; 58
    142e:	08 f0       	brcs	.+2      	; 0x1432 <__ftoa_engine+0x180>
    1430:	70 e3       	ldi	r23, 0x30	; 48
    1432:	7c 93       	st	X, r23
    1434:	20 13       	cpse	r18, r16
    1436:	b8 f7       	brcc	.-18     	; 0x1426 <__ftoa_engine+0x174>
    1438:	7e 91       	ld	r23, -X
    143a:	70 61       	ori	r23, 0x10	; 16
    143c:	7d 93       	st	X+, r23
    143e:	30 f0       	brcs	.+12     	; 0x144c <__ftoa_engine+0x19a>
    1440:	83 95       	inc	r24
    1442:	71 e3       	ldi	r23, 0x31	; 49
    1444:	7d 93       	st	X+, r23
    1446:	70 e3       	ldi	r23, 0x30	; 48
    1448:	2a 95       	dec	r18
    144a:	e1 f7       	brne	.-8      	; 0x1444 <__ftoa_engine+0x192>
    144c:	11 24       	eor	r1, r1
    144e:	ef 90       	pop	r14
    1450:	ff 90       	pop	r15
    1452:	0f 91       	pop	r16
    1454:	1f 91       	pop	r17
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	99 27       	eor	r25, r25
    145c:	87 fd       	sbrc	r24, 7
    145e:	90 95       	com	r25
    1460:	08 95       	ret

00001462 <__prologue_saves__>:
    1462:	2f 92       	push	r2
    1464:	3f 92       	push	r3
    1466:	4f 92       	push	r4
    1468:	5f 92       	push	r5
    146a:	6f 92       	push	r6
    146c:	7f 92       	push	r7
    146e:	8f 92       	push	r8
    1470:	9f 92       	push	r9
    1472:	af 92       	push	r10
    1474:	bf 92       	push	r11
    1476:	cf 92       	push	r12
    1478:	df 92       	push	r13
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	ca 1b       	sub	r28, r26
    148c:	db 0b       	sbc	r29, r27
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	09 94       	ijmp

0000149a <__epilogue_restores__>:
    149a:	2a 88       	ldd	r2, Y+18	; 0x12
    149c:	39 88       	ldd	r3, Y+17	; 0x11
    149e:	48 88       	ldd	r4, Y+16	; 0x10
    14a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    14a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    14a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    14a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    14a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    14aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    14ac:	b9 84       	ldd	r11, Y+9	; 0x09
    14ae:	c8 84       	ldd	r12, Y+8	; 0x08
    14b0:	df 80       	ldd	r13, Y+7	; 0x07
    14b2:	ee 80       	ldd	r14, Y+6	; 0x06
    14b4:	fd 80       	ldd	r15, Y+5	; 0x05
    14b6:	0c 81       	ldd	r16, Y+4	; 0x04
    14b8:	1b 81       	ldd	r17, Y+3	; 0x03
    14ba:	aa 81       	ldd	r26, Y+2	; 0x02
    14bc:	b9 81       	ldd	r27, Y+1	; 0x01
    14be:	ce 0f       	add	r28, r30
    14c0:	d1 1d       	adc	r29, r1
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	ed 01       	movw	r28, r26
    14ce:	08 95       	ret

000014d0 <_exit>:
    14d0:	f8 94       	cli

000014d2 <__stop_program>:
    14d2:	ff cf       	rjmp	.-2      	; 0x14d2 <__stop_program>
