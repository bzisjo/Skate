
mpu_manual.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001aec  00001b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  00800104  00800104  00001b84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fe1  00000000  00000000  00001d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cca  00000000  00000000  00003d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f5a  00000000  00000000  00004a37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d0  00000000  00000000  00005994  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f1  00000000  00000000  00005f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cfa  00000000  00000000  00006755  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000844f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c8 00 	jmp	0x190	; 0x190 <__ctors_end>
       4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       8:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      10:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      14:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      18:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      1c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      20:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      24:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      28:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      2c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      30:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      34:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      38:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      3c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      40:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      44:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      48:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__vector_18>
      4c:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__vector_19>
      50:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      54:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      58:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      5c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      60:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      64:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	00 40       	sbci	r16, 0x00	; 0
      98:	7a 10       	cpse	r7, r10
      9a:	f3 5a       	subi	r31, 0xA3	; 163
      9c:	00 a0       	ldd	r0, Z+32	; 0x20
      9e:	72 4e       	sbci	r23, 0xE2	; 226
      a0:	18 09       	sbc	r17, r8
      a2:	00 10       	cpse	r0, r0
      a4:	a5 d4       	rcall	.+2378   	; 0x9f0 <applyCompFilter+0x62>
      a6:	e8 00       	.word	0x00e8	; ????
      a8:	00 e8       	ldi	r16, 0x80	; 128
      aa:	76 48       	sbci	r23, 0x86	; 134
      ac:	17 00       	.word	0x0017	; ????
      ae:	00 e4       	ldi	r16, 0x40	; 64
      b0:	0b 54       	subi	r16, 0x4B	; 75
      b2:	02 00       	.word	0x0002	; ????
      b4:	00 ca       	rjmp	.-3072   	; 0xfffff4b6 <__eeprom_end+0xff7ef4b6>
      b6:	9a 3b       	cpi	r25, 0xBA	; 186
      b8:	00 00       	nop
      ba:	00 e1       	ldi	r16, 0x10	; 16
      bc:	f5 05       	cpc	r31, r5
      be:	00 00       	nop
      c0:	80 96       	adiw	r24, 0x20	; 32
      c2:	98 00       	.word	0x0098	; ????
      c4:	00 00       	nop
      c6:	40 42       	sbci	r20, 0x20	; 32
      c8:	0f 00       	.word	0x000f	; ????
      ca:	00 00       	nop
      cc:	a0 86       	std	Z+8, r10	; 0x08
      ce:	01 00       	.word	0x0001	; ????
      d0:	00 00       	nop
      d2:	10 27       	eor	r17, r16
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	e8 03       	fmulsu	r22, r16
      da:	00 00       	nop
      dc:	00 00       	nop
      de:	64 00       	.word	0x0064	; ????
      e0:	00 00       	nop
      e2:	00 00       	nop
      e4:	0a 00       	.word	0x000a	; ????
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	01 00       	.word	0x0001	; ????
      ec:	00 00       	nop
      ee:	00 00       	nop
      f0:	2c 76       	andi	r18, 0x6C	; 108
      f2:	d8 88       	ldd	r13, Y+16	; 0x10
      f4:	dc 67       	ori	r29, 0x7C	; 124
      f6:	4f 08       	sbc	r4, r15
      f8:	23 df       	rcall	.-442    	; 0xffffff40 <__eeprom_end+0xff7eff40>
      fa:	c1 df       	rcall	.-126    	; 0x7e <__SREG__+0x3f>
      fc:	ae 59       	subi	r26, 0x9E	; 158
      fe:	e1 b1       	in	r30, 0x01	; 1
     100:	b7 96       	adiw	r30, 0x27	; 39
     102:	e5 e3       	ldi	r30, 0x35	; 53
     104:	e4 53       	subi	r30, 0x34	; 52
     106:	c6 3a       	cpi	r28, 0xA6	; 166
     108:	e6 51       	subi	r30, 0x16	; 22
     10a:	99 76       	andi	r25, 0x69	; 105
     10c:	96 e8       	ldi	r25, 0x86	; 134
     10e:	e6 c2       	rjmp	.+1484   	; 0x6dc <anglesFromAccel+0xc4>
     110:	84 26       	eor	r8, r20
     112:	eb 89       	ldd	r30, Y+19	; 0x13
     114:	8c 9b       	sbis	0x11, 4	; 17
     116:	62 ed       	ldi	r22, 0xD2	; 210
     118:	40 7c       	andi	r20, 0xC0	; 192
     11a:	6f fc       	.word	0xfc6f	; ????
     11c:	ef bc       	out	0x2f, r14	; 47
     11e:	9c 9f       	mul	r25, r28
     120:	40 f2       	brcs	.-112    	; 0xb2 <__trampolines_end+0x1c>
     122:	ba a5       	ldd	r27, Y+42	; 0x2a
     124:	6f a5       	ldd	r22, Y+47	; 0x2f
     126:	f4 90       	lpm	r15, Z
     128:	05 5a       	subi	r16, 0xA5	; 165
     12a:	2a f7       	brpl	.-54     	; 0xf6 <__trampolines_end+0x60>
     12c:	5c 93       	st	X, r21
     12e:	6b 6c       	ori	r22, 0xCB	; 203
     130:	f9 67       	ori	r31, 0x79	; 121
     132:	6d c1       	rjmp	.+730    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     134:	1b fc       	.word	0xfc1b	; ????
     136:	e0 e4       	ldi	r30, 0x40	; 64
     138:	0d 47       	sbci	r16, 0x7D	; 125
     13a:	fe f5       	brtc	.+126    	; 0x1ba <.do_clear_bss_loop>
     13c:	20 e6       	ldi	r18, 0x60	; 96
     13e:	b5 00       	.word	0x00b5	; ????
     140:	d0 ed       	ldi	r29, 0xD0	; 208
     142:	90 2e       	mov	r9, r16
     144:	03 00       	.word	0x0003	; ????
     146:	94 35       	cpi	r25, 0x54	; 84
     148:	77 05       	cpc	r23, r7
     14a:	00 80       	ld	r0, Z
     14c:	84 1e       	adc	r8, r20
     14e:	08 00       	.word	0x0008	; ????
     150:	00 20       	and	r0, r0
     152:	4e 0a       	sbc	r4, r30
     154:	00 00       	nop
     156:	00 c8       	rjmp	.-4096   	; 0xfffff158 <__eeprom_end+0xff7ef158>
     158:	0c 33       	cpi	r16, 0x3C	; 60
     15a:	33 33       	cpi	r19, 0x33	; 51
     15c:	33 0f       	add	r19, r19
     15e:	98 6e       	ori	r25, 0xE8	; 232
     160:	12 83       	std	Z+2, r17	; 0x02
     162:	11 41       	sbci	r17, 0x11	; 17
     164:	ef 8d       	ldd	r30, Y+31	; 0x1f
     166:	21 14       	cp	r2, r1
     168:	89 3b       	cpi	r24, 0xB9	; 185
     16a:	e6 55       	subi	r30, 0x56	; 86
     16c:	16 cf       	rjmp	.-468    	; 0xffffff9a <__eeprom_end+0xff7eff9a>
     16e:	fe e6       	ldi	r31, 0x6E	; 110
     170:	db 18       	sub	r13, r11
     172:	d1 84       	ldd	r13, Z+9	; 0x09
     174:	4b 38       	cpi	r20, 0x8B	; 139
     176:	1b f7       	brvc	.-58     	; 0x13e <__trampolines_end+0xa8>
     178:	7c 1d       	adc	r23, r12
     17a:	90 1d       	adc	r25, r0
     17c:	a4 bb       	out	0x14, r26	; 20
     17e:	e4 24       	eor	r14, r4
     180:	20 32       	cpi	r18, 0x20	; 32
     182:	84 72       	andi	r24, 0x24	; 36
     184:	5e 22       	and	r5, r30
     186:	81 00       	.word	0x0081	; ????
     188:	c9 f1       	breq	.+114    	; 0x1fc <i2c_start+0x22>
     18a:	24 ec       	ldi	r18, 0xC4	; 196
     18c:	a1 e5       	ldi	r26, 0x51	; 81
     18e:	3d 27       	eor	r19, r29

00000190 <__ctors_end>:
     190:	11 24       	eor	r1, r1
     192:	1f be       	out	0x3f, r1	; 63
     194:	cf ef       	ldi	r28, 0xFF	; 255
     196:	d8 e0       	ldi	r29, 0x08	; 8
     198:	de bf       	out	0x3e, r29	; 62
     19a:	cd bf       	out	0x3d, r28	; 61

0000019c <__do_copy_data>:
     19c:	11 e0       	ldi	r17, 0x01	; 1
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	ec ee       	ldi	r30, 0xEC	; 236
     1a4:	fa e1       	ldi	r31, 0x1A	; 26
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__do_copy_data+0x10>
     1a8:	05 90       	lpm	r0, Z+
     1aa:	0d 92       	st	X+, r0
     1ac:	a4 30       	cpi	r26, 0x04	; 4
     1ae:	b1 07       	cpc	r27, r17
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <__do_copy_data+0xc>

000001b2 <__do_clear_bss>:
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	a4 e0       	ldi	r26, 0x04	; 4
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <.do_clear_bss_start>

000001ba <.do_clear_bss_loop>:
     1ba:	1d 92       	st	X+, r1

000001bc <.do_clear_bss_start>:
     1bc:	a7 35       	cpi	r26, 0x57	; 87
     1be:	b2 07       	cpc	r27, r18
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <.do_clear_bss_loop>
     1c2:	0e 94 98 01 	call	0x330	; 0x330 <main>
     1c6:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <_exit>

000001ca <__bad_interrupt>:
     1ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ce <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     1ce:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1d2:	8c e0       	ldi	r24, 0x0C	; 12
     1d4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     1d8:	08 95       	ret

000001da <i2c_start>:
     1da:	94 ea       	ldi	r25, 0xA4	; 164
     1dc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1e0:	4f ef       	ldi	r20, 0xFF	; 255
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	ec eb       	ldi	r30, 0xBC	; 188
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	90 81       	ld	r25, Z
     1ee:	99 23       	and	r25, r25
     1f0:	34 f0       	brlt	.+12     	; 0x1fe <i2c_start+0x24>
     1f2:	41 50       	subi	r20, 0x01	; 1
     1f4:	51 09       	sbc	r21, r1
     1f6:	61 09       	sbc	r22, r1
     1f8:	71 09       	sbc	r23, r1
     1fa:	c0 f7       	brcc	.-16     	; 0x1ec <i2c_start+0x12>
     1fc:	04 c0       	rjmp	.+8      	; 0x206 <i2c_start+0x2c>
     1fe:	45 2b       	or	r20, r21
     200:	46 2b       	or	r20, r22
     202:	47 2b       	or	r20, r23
     204:	41 f1       	breq	.+80     	; 0x256 <i2c_start+0x7c>
     206:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     20a:	98 7f       	andi	r25, 0xF8	; 248
     20c:	98 30       	cpi	r25, 0x08	; 8
     20e:	11 f0       	breq	.+4      	; 0x214 <i2c_start+0x3a>
     210:	90 31       	cpi	r25, 0x10	; 16
     212:	19 f5       	brne	.+70     	; 0x25a <i2c_start+0x80>
     214:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     218:	84 e8       	ldi	r24, 0x84	; 132
     21a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     21e:	8f ef       	ldi	r24, 0xFF	; 255
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	a0 e0       	ldi	r26, 0x00	; 0
     224:	b0 e0       	ldi	r27, 0x00	; 0
     226:	ec eb       	ldi	r30, 0xBC	; 188
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	20 81       	ld	r18, Z
     22c:	22 23       	and	r18, r18
     22e:	2c f0       	brlt	.+10     	; 0x23a <i2c_start+0x60>
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	a1 09       	sbc	r26, r1
     234:	b1 09       	sbc	r27, r1
     236:	c8 f7       	brcc	.-14     	; 0x22a <i2c_start+0x50>
     238:	04 c0       	rjmp	.+8      	; 0x242 <i2c_start+0x68>
     23a:	89 2b       	or	r24, r25
     23c:	8a 2b       	or	r24, r26
     23e:	8b 2b       	or	r24, r27
     240:	71 f0       	breq	.+28     	; 0x25e <i2c_start+0x84>
     242:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     246:	98 7f       	andi	r25, 0xF8	; 248
     248:	98 31       	cpi	r25, 0x18	; 24
     24a:	59 f0       	breq	.+22     	; 0x262 <i2c_start+0x88>
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 34       	cpi	r25, 0x40	; 64
     250:	49 f4       	brne	.+18     	; 0x264 <i2c_start+0x8a>
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	08 95       	ret
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	08 95       	ret
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	08 95       	ret
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	08 95       	ret
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	08 95       	ret

00000266 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     266:	84 e9       	ldi	r24, 0x94	; 148
     268:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	ec eb       	ldi	r30, 0xBC	; 188
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	20 81       	ld	r18, Z
     276:	24 ff       	sbrs	r18, 4
     278:	05 c0       	rjmp	.+10     	; 0x284 <i2c_stop+0x1e>
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	81 15       	cp	r24, r1
     27e:	21 e0       	ldi	r18, 0x01	; 1
     280:	92 07       	cpc	r25, r18
     282:	c1 f7       	brne	.-16     	; 0x274 <i2c_stop+0xe>
     284:	08 95       	ret

00000286 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     286:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     28a:	84 e8       	ldi	r24, 0x84	; 132
     28c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	a0 e0       	ldi	r26, 0x00	; 0
     296:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     298:	ec eb       	ldi	r30, 0xBC	; 188
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	20 81       	ld	r18, Z
     29e:	22 23       	and	r18, r18
     2a0:	2c f0       	brlt	.+10     	; 0x2ac <i2c_write+0x26>
     2a2:	01 97       	sbiw	r24, 0x01	; 1
     2a4:	a1 09       	sbc	r26, r1
     2a6:	b1 09       	sbc	r27, r1
     2a8:	c8 f7       	brcc	.-14     	; 0x29c <i2c_write+0x16>
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <i2c_write+0x2e>
	if(i2c_timer == 0)
     2ac:	89 2b       	or	r24, r25
     2ae:	8a 2b       	or	r24, r26
     2b0:	8b 2b       	or	r24, r27
     2b2:	41 f0       	breq	.+16     	; 0x2c4 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     2b4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     2b8:	98 7f       	andi	r25, 0xF8	; 248
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	98 32       	cpi	r25, 0x28	; 40
     2be:	19 f4       	brne	.+6      	; 0x2c6 <i2c_write+0x40>
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	08 95       	ret
     2c4:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     2c6:	08 95       	ret

000002c8 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     2c8:	84 ec       	ldi	r24, 0xC4	; 196
     2ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
     2ce:	8f ef       	ldi	r24, 0xFF	; 255
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	a0 e0       	ldi	r26, 0x00	; 0
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     2d6:	ec eb       	ldi	r30, 0xBC	; 188
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	20 81       	ld	r18, Z
     2dc:	22 23       	and	r18, r18
     2de:	2c f0       	brlt	.+10     	; 0x2ea <i2c_readAck+0x22>
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	a1 09       	sbc	r26, r1
     2e4:	b1 09       	sbc	r27, r1
     2e6:	c8 f7       	brcc	.-14     	; 0x2da <i2c_readAck+0x12>
     2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     2ea:	89 2b       	or	r24, r25
     2ec:	8a 2b       	or	r24, r26
     2ee:	8b 2b       	or	r24, r27
     2f0:	19 f0       	breq	.+6      	; 0x2f8 <i2c_readAck+0x30>
		return 0;

    return TWDR;
     2f2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     2f6:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     2f8:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     2fa:	08 95       	ret

000002fc <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     2fc:	84 e8       	ldi	r24, 0x84	; 132
     2fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	a0 e0       	ldi	r26, 0x00	; 0
     308:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     30a:	ec eb       	ldi	r30, 0xBC	; 188
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	20 81       	ld	r18, Z
     310:	22 23       	and	r18, r18
     312:	2c f0       	brlt	.+10     	; 0x31e <i2c_readNak+0x22>
     314:	01 97       	sbiw	r24, 0x01	; 1
     316:	a1 09       	sbc	r26, r1
     318:	b1 09       	sbc	r27, r1
     31a:	c8 f7       	brcc	.-14     	; 0x30e <i2c_readNak+0x12>
     31c:	04 c0       	rjmp	.+8      	; 0x326 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     31e:	89 2b       	or	r24, r25
     320:	8a 2b       	or	r24, r26
     322:	8b 2b       	or	r24, r27
     324:	19 f0       	breq	.+6      	; 0x32c <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     326:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     32a:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     32c:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     32e:	08 95       	ret

00000330 <main>:
	*filteredAngle = (1-alpha) * gyroAngle + alpha * accelAngle;
}*/

#endif

int main(void) {
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	ce 56       	subi	r28, 0x6E	; 110
     33a:	d1 09       	sbc	r29, r1
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	de bf       	out	0x3e, r29	; 62
     342:	0f be       	out	0x3f, r0	; 63
     344:	cd bf       	out	0x3d, r28	; 61

	#if MPU6050_GETATTITUDE == 0
	int16_t ax = 0;
     346:	1a 82       	std	Y+2, r1	; 0x02
     348:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
     34a:	1c 82       	std	Y+4, r1	; 0x04
     34c:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
     34e:	1e 82       	std	Y+6, r1	; 0x06
     350:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
     352:	18 86       	std	Y+8, r1	; 0x08
     354:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
     356:	1a 86       	std	Y+10, r1	; 0x0a
     358:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
     35a:	1c 86       	std	Y+12, r1	; 0x0c
     35c:	1b 86       	std	Y+11, r1	; 0x0b
	double axg = 0;
     35e:	1d 86       	std	Y+13, r1	; 0x0d
     360:	1e 86       	std	Y+14, r1	; 0x0e
     362:	1f 86       	std	Y+15, r1	; 0x0f
     364:	18 8a       	std	Y+16, r1	; 0x10
	double ayg = 0;
     366:	19 8a       	std	Y+17, r1	; 0x11
     368:	1a 8a       	std	Y+18, r1	; 0x12
     36a:	1b 8a       	std	Y+19, r1	; 0x13
     36c:	1c 8a       	std	Y+20, r1	; 0x14
	double azg = 0;
     36e:	1d 8a       	std	Y+21, r1	; 0x15
     370:	1e 8a       	std	Y+22, r1	; 0x16
     372:	1f 8a       	std	Y+23, r1	; 0x17
     374:	18 8e       	std	Y+24, r1	; 0x18
	double gxds = 0;
     376:	19 8e       	std	Y+25, r1	; 0x19
     378:	1a 8e       	std	Y+26, r1	; 0x1a
     37a:	1b 8e       	std	Y+27, r1	; 0x1b
     37c:	1c 8e       	std	Y+28, r1	; 0x1c
	double gyds = 0;
     37e:	1d 8e       	std	Y+29, r1	; 0x1d
     380:	1e 8e       	std	Y+30, r1	; 0x1e
     382:	1f 8e       	std	Y+31, r1	; 0x1f
     384:	18 a2       	std	Y+32, r1	; 0x20
	double gzds = 0; 
     386:	19 a2       	std	Y+33, r1	; 0x21
     388:	1a a2       	std	Y+34, r1	; 0x22
     38a:	1b a2       	std	Y+35, r1	; 0x23
     38c:	1c a2       	std	Y+36, r1	; 0x24
	
	//for runge-kutta integrator
	double angleX = 0.0;	//roll
     38e:	1d a2       	std	Y+37, r1	; 0x25
     390:	1e a2       	std	Y+38, r1	; 0x26
     392:	1f a2       	std	Y+39, r1	; 0x27
     394:	18 a6       	std	Y+40, r1	; 0x28
	double angleY = 0.0;	//pitch
     396:	19 a6       	std	Y+41, r1	; 0x29
     398:	1a a6       	std	Y+42, r1	; 0x2a
     39a:	1b a6       	std	Y+43, r1	; 0x2b
     39c:	1c a6       	std	Y+44, r1	; 0x2c
	double angleZ = 0.0;	//yaw
     39e:	1d a6       	std	Y+45, r1	; 0x2d
     3a0:	1e a6       	std	Y+46, r1	; 0x2e
     3a2:	1f a6       	std	Y+47, r1	; 0x2f
     3a4:	18 aa       	std	Y+48, r1	; 0x30
	// Buffers to hold previous values needed for the runge kutta integrator
	double prev_Xdps[3] = {0.0, 0.0, 0.0};	
     3a6:	19 aa       	std	Y+49, r1	; 0x31
     3a8:	1a aa       	std	Y+50, r1	; 0x32
     3aa:	1b aa       	std	Y+51, r1	; 0x33
     3ac:	1c aa       	std	Y+52, r1	; 0x34
     3ae:	1d aa       	std	Y+53, r1	; 0x35
     3b0:	1e aa       	std	Y+54, r1	; 0x36
     3b2:	1f aa       	std	Y+55, r1	; 0x37
     3b4:	18 ae       	std	Y+56, r1	; 0x38
     3b6:	19 ae       	std	Y+57, r1	; 0x39
     3b8:	1a ae       	std	Y+58, r1	; 0x3a
     3ba:	1b ae       	std	Y+59, r1	; 0x3b
     3bc:	1c ae       	std	Y+60, r1	; 0x3c
	double prev_Ydps[3] = {0.0, 0.0, 0.0};	
     3be:	21 96       	adiw	r28, 0x01	; 1
     3c0:	1c ae       	std	Y+60, r1	; 0x3c
     3c2:	1d ae       	std	Y+61, r1	; 0x3d
     3c4:	1e ae       	std	Y+62, r1	; 0x3e
     3c6:	1f ae       	std	Y+63, r1	; 0x3f
     3c8:	21 97       	sbiw	r28, 0x01	; 1
     3ca:	25 96       	adiw	r28, 0x05	; 5
     3cc:	1c ae       	std	Y+60, r1	; 0x3c
     3ce:	1d ae       	std	Y+61, r1	; 0x3d
     3d0:	1e ae       	std	Y+62, r1	; 0x3e
     3d2:	1f ae       	std	Y+63, r1	; 0x3f
     3d4:	25 97       	sbiw	r28, 0x05	; 5
     3d6:	29 96       	adiw	r28, 0x09	; 9
     3d8:	1c ae       	std	Y+60, r1	; 0x3c
     3da:	1d ae       	std	Y+61, r1	; 0x3d
     3dc:	1e ae       	std	Y+62, r1	; 0x3e
     3de:	1f ae       	std	Y+63, r1	; 0x3f
     3e0:	29 97       	sbiw	r28, 0x09	; 9
	double prev_Zdps[3] = {0.0, 0.0, 0.0};
     3e2:	2d 96       	adiw	r28, 0x0d	; 13
     3e4:	1c ae       	std	Y+60, r1	; 0x3c
     3e6:	1d ae       	std	Y+61, r1	; 0x3d
     3e8:	1e ae       	std	Y+62, r1	; 0x3e
     3ea:	1f ae       	std	Y+63, r1	; 0x3f
     3ec:	2d 97       	sbiw	r28, 0x0d	; 13
     3ee:	61 96       	adiw	r28, 0x11	; 17
     3f0:	1c ae       	std	Y+60, r1	; 0x3c
     3f2:	1d ae       	std	Y+61, r1	; 0x3d
     3f4:	1e ae       	std	Y+62, r1	; 0x3e
     3f6:	1f ae       	std	Y+63, r1	; 0x3f
     3f8:	61 97       	sbiw	r28, 0x11	; 17
     3fa:	65 96       	adiw	r28, 0x15	; 21
     3fc:	1c ae       	std	Y+60, r1	; 0x3c
     3fe:	1d ae       	std	Y+61, r1	; 0x3d
     400:	1e ae       	std	Y+62, r1	; 0x3e
     402:	1f ae       	std	Y+63, r1	; 0x3f
     404:	65 97       	sbiw	r28, 0x15	; 21
	double outAngleX = 0.0;		//angles that are outputted to serial port
     406:	69 96       	adiw	r28, 0x19	; 25
     408:	1c ae       	std	Y+60, r1	; 0x3c
     40a:	1d ae       	std	Y+61, r1	; 0x3d
     40c:	1e ae       	std	Y+62, r1	; 0x3e
     40e:	1f ae       	std	Y+63, r1	; 0x3f
     410:	69 97       	sbiw	r28, 0x19	; 25
	double outAngleY = 0.0;
     412:	6d 96       	adiw	r28, 0x1d	; 29
     414:	1c ae       	std	Y+60, r1	; 0x3c
     416:	1d ae       	std	Y+61, r1	; 0x3d
     418:	1e ae       	std	Y+62, r1	; 0x3e
     41a:	1f ae       	std	Y+63, r1	; 0x3f
     41c:	6d 97       	sbiw	r28, 0x1d	; 29
	//used for complementary filter
	double tau = 1.0;		//desired time constant
	double dt = .005;		//based on sampling frequency (200Hz)
	//double alpha = 0.65f; //tau / (tau + dt);
	//double yawFilt = 0.0;
	double rollAccel = 0.0;	//angles calculated from acceleration data
     41e:	a1 96       	adiw	r28, 0x21	; 33
     420:	1c ae       	std	Y+60, r1	; 0x3c
     422:	1d ae       	std	Y+61, r1	; 0x3d
     424:	1e ae       	std	Y+62, r1	; 0x3e
     426:	1f ae       	std	Y+63, r1	; 0x3f
     428:	a1 97       	sbiw	r28, 0x21	; 33
	double pitchAccel = 0.0;
     42a:	a5 96       	adiw	r28, 0x25	; 37
     42c:	1c ae       	std	Y+60, r1	; 0x3c
     42e:	1d ae       	std	Y+61, r1	; 0x3d
     430:	1e ae       	std	Y+62, r1	; 0x3e
     432:	1f ae       	std	Y+63, r1	; 0x3f
     434:	a5 97       	sbiw	r28, 0x25	; 37
	double gzds = 0;
	*/
	#endif

	//init uart
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
     436:	89 e1       	ldi	r24, 0x19	; 25
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <uart_init>

	//init interrupt
	sei();
     43e:	78 94       	sei

	//init mpu6050
	mpu6050_init();
     440:	0e 94 06 06 	call	0xc0c	; 0xc0c <mpu6050_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     444:	2f ef       	ldi	r18, 0xFF	; 255
     446:	80 e7       	ldi	r24, 0x70	; 112
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	21 50       	subi	r18, 0x01	; 1
     44c:	80 40       	sbci	r24, 0x00	; 0
     44e:	90 40       	sbci	r25, 0x00	; 0
     450:	e1 f7       	brne	.-8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     452:	00 c0       	rjmp	.+0      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     454:	00 00       	nop
/*
 *	Main Loop 
 */	
	for(;;) {
		#if MPU6050_GETATTITUDE == 0
		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     456:	ce 01       	movw	r24, r28
     458:	0b 96       	adiw	r24, 0x0b	; 11
     45a:	7c 01       	movw	r14, r24
     45c:	8e 01       	movw	r16, r28
     45e:	07 5f       	subi	r16, 0xF7	; 247
     460:	1f 4f       	sbci	r17, 0xFF	; 255
     462:	9e 01       	movw	r18, r28
     464:	29 5f       	subi	r18, 0xF9	; 249
     466:	3f 4f       	sbci	r19, 0xFF	; 255
     468:	ae 01       	movw	r20, r28
     46a:	4b 5f       	subi	r20, 0xFB	; 251
     46c:	5f 4f       	sbci	r21, 0xFF	; 255
     46e:	be 01       	movw	r22, r28
     470:	6d 5f       	subi	r22, 0xFD	; 253
     472:	7f 4f       	sbci	r23, 0xFF	; 255
     474:	0a 97       	sbiw	r24, 0x0a	; 10
     476:	0e 94 3a 06 	call	0xc74	; 0xc74 <mpu6050_getRawData>
		mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
     47a:	ce 01       	movw	r24, r28
     47c:	81 96       	adiw	r24, 0x21	; 33
     47e:	7c 01       	movw	r14, r24
     480:	0c 5e       	subi	r16, 0xEC	; 236
     482:	1f 4f       	sbci	r17, 0xFF	; 255
     484:	9e 01       	movw	r18, r28
     486:	27 5e       	subi	r18, 0xE7	; 231
     488:	3f 4f       	sbci	r19, 0xFF	; 255
     48a:	ae 01       	movw	r20, r28
     48c:	4b 5e       	subi	r20, 0xEB	; 235
     48e:	5f 4f       	sbci	r21, 0xFF	; 255
     490:	be 01       	movw	r22, r28
     492:	6f 5e       	subi	r22, 0xEF	; 239
     494:	7f 4f       	sbci	r23, 0xFF	; 255
     496:	44 97       	sbiw	r24, 0x14	; 20
     498:	0e 94 88 06 	call	0xd10	; 0xd10 <mpu6050_getConvData>
		applyOffset(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
     49c:	c7 01       	movw	r24, r14
     49e:	9e 01       	movw	r18, r28
     4a0:	27 5e       	subi	r18, 0xE7	; 231
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	ae 01       	movw	r20, r28
     4a6:	4b 5e       	subi	r20, 0xEB	; 235
     4a8:	5f 4f       	sbci	r21, 0xFF	; 255
     4aa:	be 01       	movw	r22, r28
     4ac:	6f 5e       	subi	r22, 0xEF	; 239
     4ae:	7f 4f       	sbci	r23, 0xFF	; 255
     4b0:	44 97       	sbiw	r24, 0x14	; 20
     4b2:	0e 94 4c 04 	call	0x898	; 0x898 <applyOffset>

		//integrate all three axis
		rk_integrator(&angleX, gxds, prev_Xdps);
     4b6:	49 8d       	ldd	r20, Y+25	; 0x19
     4b8:	5a 8d       	ldd	r21, Y+26	; 0x1a
     4ba:	6b 8d       	ldd	r22, Y+27	; 0x1b
     4bc:	7c 8d       	ldd	r23, Y+28	; 0x1c
     4be:	9e 01       	movw	r18, r28
     4c0:	2f 5c       	subi	r18, 0xCF	; 207
     4c2:	3f 4f       	sbci	r19, 0xFF	; 255
     4c4:	ce 01       	movw	r24, r28
     4c6:	85 96       	adiw	r24, 0x25	; 37
     4c8:	0e 94 a0 03 	call	0x740	; 0x740 <rk_integrator>
		rk_integrator(&angleY, gyds, prev_Ydps);
     4cc:	4d 8d       	ldd	r20, Y+29	; 0x1d
     4ce:	5e 8d       	ldd	r21, Y+30	; 0x1e
     4d0:	6f 8d       	ldd	r22, Y+31	; 0x1f
     4d2:	78 a1       	ldd	r23, Y+32	; 0x20
     4d4:	9e 01       	movw	r18, r28
     4d6:	23 5c       	subi	r18, 0xC3	; 195
     4d8:	3f 4f       	sbci	r19, 0xFF	; 255
     4da:	ce 01       	movw	r24, r28
     4dc:	89 96       	adiw	r24, 0x29	; 41
     4de:	0e 94 a0 03 	call	0x740	; 0x740 <rk_integrator>
		rk_integrator(&angleZ, gzds, prev_Zdps);
     4e2:	49 a1       	ldd	r20, Y+33	; 0x21
     4e4:	5a a1       	ldd	r21, Y+34	; 0x22
     4e6:	6b a1       	ldd	r22, Y+35	; 0x23
     4e8:	7c a1       	ldd	r23, Y+36	; 0x24
     4ea:	9e 01       	movw	r18, r28
     4ec:	27 5b       	subi	r18, 0xB7	; 183
     4ee:	3f 4f       	sbci	r19, 0xFF	; 255
     4f0:	ce 01       	movw	r24, r28
     4f2:	8d 96       	adiw	r24, 0x2d	; 45
     4f4:	0e 94 a0 03 	call	0x740	; 0x740 <rk_integrator>
		outAngleX = angleX;
		outAngleY = angleY;
		outAngleZ = angleZ;
		*/
			
		anglesFromAccel(&rollAccel, &pitchAccel, axg, ayg, azg);
     4f8:	ad 88       	ldd	r10, Y+21	; 0x15
     4fa:	be 88       	ldd	r11, Y+22	; 0x16
     4fc:	cf 88       	ldd	r12, Y+23	; 0x17
     4fe:	d8 8c       	ldd	r13, Y+24	; 0x18
     500:	e9 88       	ldd	r14, Y+17	; 0x11
     502:	fa 88       	ldd	r15, Y+18	; 0x12
     504:	0b 89       	ldd	r16, Y+19	; 0x13
     506:	1c 89       	ldd	r17, Y+20	; 0x14
     508:	2d 85       	ldd	r18, Y+13	; 0x0d
     50a:	3e 85       	ldd	r19, Y+14	; 0x0e
     50c:	4f 85       	ldd	r20, Y+15	; 0x0f
     50e:	58 89       	ldd	r21, Y+16	; 0x10
     510:	be 01       	movw	r22, r28
     512:	6f 59       	subi	r22, 0x9F	; 159
     514:	7f 4f       	sbci	r23, 0xFF	; 255
     516:	ce 01       	movw	r24, r28
     518:	83 5a       	subi	r24, 0xA3	; 163
     51a:	9f 4f       	sbci	r25, 0xFF	; 255
     51c:	0e 94 0c 03 	call	0x618	; 0x618 <anglesFromAccel>
		applyCompFilter(&outAngleX, rollAccel, angleX);
     520:	0d a1       	ldd	r16, Y+37	; 0x25
     522:	1e a1       	ldd	r17, Y+38	; 0x26
     524:	2f a1       	ldd	r18, Y+39	; 0x27
     526:	38 a5       	ldd	r19, Y+40	; 0x28
     528:	a1 96       	adiw	r28, 0x21	; 33
     52a:	4c ad       	ldd	r20, Y+60	; 0x3c
     52c:	5d ad       	ldd	r21, Y+61	; 0x3d
     52e:	6e ad       	ldd	r22, Y+62	; 0x3e
     530:	7f ad       	ldd	r23, Y+63	; 0x3f
     532:	a1 97       	sbiw	r28, 0x21	; 33
     534:	ce 01       	movw	r24, r28
     536:	8b 5a       	subi	r24, 0xAB	; 171
     538:	9f 4f       	sbci	r25, 0xFF	; 255
     53a:	0e 94 c7 04 	call	0x98e	; 0x98e <applyCompFilter>
		applyCompFilter(&outAngleY, pitchAccel, angleY);
     53e:	09 a5       	ldd	r16, Y+41	; 0x29
     540:	1a a5       	ldd	r17, Y+42	; 0x2a
     542:	2b a5       	ldd	r18, Y+43	; 0x2b
     544:	3c a5       	ldd	r19, Y+44	; 0x2c
     546:	a5 96       	adiw	r28, 0x25	; 37
     548:	4c ad       	ldd	r20, Y+60	; 0x3c
     54a:	5d ad       	ldd	r21, Y+61	; 0x3d
     54c:	6e ad       	ldd	r22, Y+62	; 0x3e
     54e:	7f ad       	ldd	r23, Y+63	; 0x3f
     550:	a5 97       	sbiw	r28, 0x25	; 37
     552:	ce 01       	movw	r24, r28
     554:	87 5a       	subi	r24, 0xA7	; 167
     556:	9f 4f       	sbci	r25, 0xFF	; 255
     558:	0e 94 c7 04 	call	0x98e	; 0x98e <applyCompFilter>
		outAngleZ = angleZ; 
     55c:	cd a4       	ldd	r12, Y+45	; 0x2d
     55e:	de a4       	ldd	r13, Y+46	; 0x2e
     560:	ef a4       	ldd	r14, Y+47	; 0x2f
     562:	f8 a8       	ldd	r15, Y+48	; 0x30
		dtostrf(*(prev_Xdps+2), 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
		uart_puts("\r\n");
			*/
		//uart_puts("Angles:");
		#if SERIALPRINTMODE == 1
			dtostrf(outAngleX, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     564:	69 96       	adiw	r28, 0x19	; 25
     566:	6c ad       	ldd	r22, Y+60	; 0x3c
     568:	7d ad       	ldd	r23, Y+61	; 0x3d
     56a:	8e ad       	ldd	r24, Y+62	; 0x3e
     56c:	9f ad       	ldd	r25, Y+63	; 0x3f
     56e:	69 97       	sbiw	r28, 0x19	; 25
     570:	8e 01       	movw	r16, r28
     572:	0b 59       	subi	r16, 0x9B	; 155
     574:	1f 4f       	sbci	r17, 0xFF	; 255
     576:	25 e0       	ldi	r18, 0x05	; 5
     578:	43 e0       	ldi	r20, 0x03	; 3
     57a:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <dtostrf>
     57e:	c8 01       	movw	r24, r16
     580:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
     584:	80 e2       	ldi	r24, 0x20	; 32
     586:	0e 94 bf 07 	call	0xf7e	; 0xf7e <uart_putc>
			dtostrf(outAngleY, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     58a:	6d 96       	adiw	r28, 0x1d	; 29
     58c:	6c ad       	ldd	r22, Y+60	; 0x3c
     58e:	7d ad       	ldd	r23, Y+61	; 0x3d
     590:	8e ad       	ldd	r24, Y+62	; 0x3e
     592:	9f ad       	ldd	r25, Y+63	; 0x3f
     594:	6d 97       	sbiw	r28, 0x1d	; 29
     596:	25 e0       	ldi	r18, 0x05	; 5
     598:	43 e0       	ldi	r20, 0x03	; 3
     59a:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <dtostrf>
     59e:	c8 01       	movw	r24, r16
     5a0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
     5a4:	80 e2       	ldi	r24, 0x20	; 32
     5a6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <uart_putc>
			dtostrf(outAngleZ, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     5aa:	25 e0       	ldi	r18, 0x05	; 5
     5ac:	43 e0       	ldi	r20, 0x03	; 3
     5ae:	c7 01       	movw	r24, r14
     5b0:	b6 01       	movw	r22, r12
     5b2:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <dtostrf>
     5b6:	c8 01       	movw	r24, r16
     5b8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
     5bc:	80 e2       	ldi	r24, 0x20	; 32
     5be:	0e 94 bf 07 	call	0xf7e	; 0xf7e <uart_putc>
			dtostrf(rollAccel, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     5c2:	a1 96       	adiw	r28, 0x21	; 33
     5c4:	6c ad       	ldd	r22, Y+60	; 0x3c
     5c6:	7d ad       	ldd	r23, Y+61	; 0x3d
     5c8:	8e ad       	ldd	r24, Y+62	; 0x3e
     5ca:	9f ad       	ldd	r25, Y+63	; 0x3f
     5cc:	a1 97       	sbiw	r28, 0x21	; 33
     5ce:	25 e0       	ldi	r18, 0x05	; 5
     5d0:	43 e0       	ldi	r20, 0x03	; 3
     5d2:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <dtostrf>
     5d6:	c8 01       	movw	r24, r16
     5d8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
     5dc:	80 e2       	ldi	r24, 0x20	; 32
     5de:	0e 94 bf 07 	call	0xf7e	; 0xf7e <uart_putc>
			dtostrf(pitchAccel, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     5e2:	a5 96       	adiw	r28, 0x25	; 37
     5e4:	6c ad       	ldd	r22, Y+60	; 0x3c
     5e6:	7d ad       	ldd	r23, Y+61	; 0x3d
     5e8:	8e ad       	ldd	r24, Y+62	; 0x3e
     5ea:	9f ad       	ldd	r25, Y+63	; 0x3f
     5ec:	a5 97       	sbiw	r28, 0x25	; 37
     5ee:	25 e0       	ldi	r18, 0x05	; 5
     5f0:	43 e0       	ldi	r20, 0x03	; 3
     5f2:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <dtostrf>
     5f6:	c8 01       	movw	r24, r16
     5f8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
     5fc:	80 e2       	ldi	r24, 0x20	; 32
     5fe:	0e 94 bf 07 	call	0xf7e	; 0xf7e <uart_putc>
			dtostrf(gyds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
			dtostrf(gzds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');*/
			//uart_puts("\r\n");
		#endif
		
		uart_puts("\r\n");
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_puts>
     60a:	8f e3       	ldi	r24, 0x3F	; 63
     60c:	9c e9       	ldi	r25, 0x9C	; 156
     60e:	01 97       	sbiw	r24, 0x01	; 1
     610:	f1 f7       	brne	.-4      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
     612:	00 c0       	rjmp	.+0      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
     614:	00 00       	nop
     616:	1f cf       	rjmp	.-450    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>

00000618 <anglesFromAccel>:

/*
	Calculates the roll and pitch based on acceleration data
	Outputs calculated angle in degrees (rollA and pitchA)
*/
void anglesFromAccel(double * rollA, double * pitchA, double ax, double ay, double az){
     618:	2f 92       	push	r2
     61a:	3f 92       	push	r3
     61c:	4f 92       	push	r4
     61e:	5f 92       	push	r5
     620:	6f 92       	push	r6
     622:	7f 92       	push	r7
     624:	8f 92       	push	r8
     626:	9f 92       	push	r9
     628:	af 92       	push	r10
     62a:	bf 92       	push	r11
     62c:	cf 92       	push	r12
     62e:	df 92       	push	r13
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	2a 97       	sbiw	r28, 0x0a	; 10
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
     64c:	9a 87       	std	Y+10, r25	; 0x0a
     64e:	89 87       	std	Y+9, r24	; 0x09
     650:	1b 01       	movw	r2, r22
     652:	2d 83       	std	Y+5, r18	; 0x05
     654:	3e 83       	std	Y+6, r19	; 0x06
     656:	4f 83       	std	Y+7, r20	; 0x07
     658:	58 87       	std	Y+8, r21	; 0x08
     65a:	27 01       	movw	r4, r14
     65c:	38 01       	movw	r6, r16
	*rollA = atan2f(ay, sqrt(square(ax) + square(az)))*180/3.1416;
     65e:	ca 01       	movw	r24, r20
     660:	b9 01       	movw	r22, r18
     662:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <square>
     666:	69 83       	std	Y+1, r22	; 0x01
     668:	7a 83       	std	Y+2, r23	; 0x02
     66a:	8b 83       	std	Y+3, r24	; 0x03
     66c:	9c 83       	std	Y+4, r25	; 0x04
     66e:	c6 01       	movw	r24, r12
     670:	b5 01       	movw	r22, r10
     672:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <square>
     676:	6b 01       	movw	r12, r22
     678:	7c 01       	movw	r14, r24
     67a:	a7 01       	movw	r20, r14
     67c:	96 01       	movw	r18, r12
     67e:	69 81       	ldd	r22, Y+1	; 0x01
     680:	7a 81       	ldd	r23, Y+2	; 0x02
     682:	8b 81       	ldd	r24, Y+3	; 0x03
     684:	9c 81       	ldd	r25, Y+4	; 0x04
     686:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__addsf3>
     68a:	0e 94 92 0a 	call	0x1524	; 0x1524 <sqrt>
     68e:	9b 01       	movw	r18, r22
     690:	ac 01       	movw	r20, r24
     692:	c3 01       	movw	r24, r6
     694:	b2 01       	movw	r22, r4
     696:	0e 94 63 08 	call	0x10c6	; 0x10c6 <atan2>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	44 e3       	ldi	r20, 0x34	; 52
     6a0:	53 e4       	ldi	r21, 0x43	; 67
     6a2:	0e 94 1f 0a 	call	0x143e	; 0x143e <__mulsf3>
     6a6:	29 ef       	ldi	r18, 0xF9	; 249
     6a8:	3f e0       	ldi	r19, 0x0F	; 15
     6aa:	49 e4       	ldi	r20, 0x49	; 73
     6ac:	50 e4       	ldi	r21, 0x40	; 64
     6ae:	0e 94 c7 08 	call	0x118e	; 0x118e <__divsf3>
     6b2:	e9 85       	ldd	r30, Y+9	; 0x09
     6b4:	fa 85       	ldd	r31, Y+10	; 0x0a
     6b6:	60 83       	st	Z, r22
     6b8:	71 83       	std	Z+1, r23	; 0x01
     6ba:	82 83       	std	Z+2, r24	; 0x02
     6bc:	93 83       	std	Z+3, r25	; 0x03
	*pitchA = - atan2f(ax, sqrt(square(ay) + square(az)))*180/3.1416;
     6be:	c3 01       	movw	r24, r6
     6c0:	b2 01       	movw	r22, r4
     6c2:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <square>
     6c6:	4b 01       	movw	r8, r22
     6c8:	5c 01       	movw	r10, r24
     6ca:	a5 01       	movw	r20, r10
     6cc:	94 01       	movw	r18, r8
     6ce:	c7 01       	movw	r24, r14
     6d0:	b6 01       	movw	r22, r12
     6d2:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__addsf3>
     6d6:	0e 94 92 0a 	call	0x1524	; 0x1524 <sqrt>
     6da:	9b 01       	movw	r18, r22
     6dc:	ac 01       	movw	r20, r24
     6de:	6d 81       	ldd	r22, Y+5	; 0x05
     6e0:	7e 81       	ldd	r23, Y+6	; 0x06
     6e2:	8f 81       	ldd	r24, Y+7	; 0x07
     6e4:	98 85       	ldd	r25, Y+8	; 0x08
     6e6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <atan2>
     6ea:	90 58       	subi	r25, 0x80	; 128
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	44 e3       	ldi	r20, 0x34	; 52
     6f2:	53 e4       	ldi	r21, 0x43	; 67
     6f4:	0e 94 1f 0a 	call	0x143e	; 0x143e <__mulsf3>
     6f8:	29 ef       	ldi	r18, 0xF9	; 249
     6fa:	3f e0       	ldi	r19, 0x0F	; 15
     6fc:	49 e4       	ldi	r20, 0x49	; 73
     6fe:	50 e4       	ldi	r21, 0x40	; 64
     700:	0e 94 c7 08 	call	0x118e	; 0x118e <__divsf3>
     704:	f1 01       	movw	r30, r2
     706:	60 83       	st	Z, r22
     708:	71 83       	std	Z+1, r23	; 0x01
     70a:	82 83       	std	Z+2, r24	; 0x02
     70c:	93 83       	std	Z+3, r25	; 0x03
	//theta = atan2f(az/(sqrt(square(ax) + square(ay))));
}
     70e:	2a 96       	adiw	r28, 0x0a	; 10
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	df 90       	pop	r13
     728:	cf 90       	pop	r12
     72a:	bf 90       	pop	r11
     72c:	af 90       	pop	r10
     72e:	9f 90       	pop	r9
     730:	8f 90       	pop	r8
     732:	7f 90       	pop	r7
     734:	6f 90       	pop	r6
     736:	5f 90       	pop	r5
     738:	4f 90       	pop	r4
     73a:	3f 90       	pop	r3
     73c:	2f 90       	pop	r2
     73e:	08 95       	ret

00000740 <rk_integrator>:
	Function needs an input of a buffer of type double that is three values in size.
	The buffer is used to hold previous values due to the nature of the rk integrator
	Reference of rk integrator can be found here: http://tom.pycke.be/mav/70/gyroscope-to-roll-pitch-and-yaw
	Equation of rk integrator: integration(i) = integration(i-1) + 1?6 ( vali-3 + 2 vali-2 + 2 vali-1 + vali)
*/
void rk_integrator(double* angle, double dps, double* prev_dps){
     740:	4f 92       	push	r4
     742:	5f 92       	push	r5
     744:	6f 92       	push	r6
     746:	7f 92       	push	r7
     748:	8f 92       	push	r8
     74a:	9f 92       	push	r9
     74c:	af 92       	push	r10
     74e:	bf 92       	push	r11
     750:	cf 92       	push	r12
     752:	df 92       	push	r13
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	00 d0       	rcall	.+0      	; 0x762 <rk_integrator+0x22>
     762:	00 d0       	rcall	.+0      	; 0x764 <rk_integrator+0x24>
     764:	00 d0       	rcall	.+0      	; 0x766 <rk_integrator+0x26>
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
     76a:	8c 01       	movw	r16, r24
     76c:	cb 01       	movw	r24, r22
     76e:	ba 01       	movw	r22, r20
     770:	3e 83       	std	Y+6, r19	; 0x06
     772:	2d 83       	std	Y+5, r18	; 0x05
	double dps_1 = *prev_dps;
     774:	d9 01       	movw	r26, r18
     776:	4d 90       	ld	r4, X+
     778:	5d 90       	ld	r5, X+
     77a:	6d 90       	ld	r6, X+
     77c:	7c 90       	ld	r7, X
     77e:	13 97       	sbiw	r26, 0x03	; 3
	double dps_2 = *(prev_dps + 1);
     780:	14 96       	adiw	r26, 0x04	; 4
     782:	cd 90       	ld	r12, X+
     784:	dd 90       	ld	r13, X+
     786:	ed 90       	ld	r14, X+
     788:	fc 90       	ld	r15, X
     78a:	17 97       	sbiw	r26, 0x07	; 7
	double dps_3 = *(prev_dps + 2);
	double input = dps/60;		//runs around 60 Hz about
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	40 e7       	ldi	r20, 0x70	; 112
     792:	52 e4       	ldi	r21, 0x42	; 66
     794:	0e 94 c7 08 	call	0x118e	; 0x118e <__divsf3>
     798:	4b 01       	movw	r8, r22
     79a:	5c 01       	movw	r10, r24
	*angle = *angle + (dps_3 + 2 * dps_2 + 2 * dps_1 + input) / 6;
     79c:	a7 01       	movw	r20, r14
     79e:	96 01       	movw	r18, r12
     7a0:	c7 01       	movw	r24, r14
     7a2:	b6 01       	movw	r22, r12
     7a4:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__addsf3>
     7a8:	ed 81       	ldd	r30, Y+5	; 0x05
     7aa:	fe 81       	ldd	r31, Y+6	; 0x06
     7ac:	20 85       	ldd	r18, Z+8	; 0x08
     7ae:	31 85       	ldd	r19, Z+9	; 0x09
     7b0:	42 85       	ldd	r20, Z+10	; 0x0a
     7b2:	53 85       	ldd	r21, Z+11	; 0x0b
     7b4:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__addsf3>
     7b8:	69 83       	std	Y+1, r22	; 0x01
     7ba:	7a 83       	std	Y+2, r23	; 0x02
     7bc:	8b 83       	std	Y+3, r24	; 0x03
     7be:	9c 83       	std	Y+4, r25	; 0x04
     7c0:	a3 01       	movw	r20, r6
     7c2:	92 01       	movw	r18, r4
     7c4:	c3 01       	movw	r24, r6
     7c6:	b2 01       	movw	r22, r4
     7c8:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__addsf3>
     7cc:	9b 01       	movw	r18, r22
     7ce:	ac 01       	movw	r20, r24
     7d0:	69 81       	ldd	r22, Y+1	; 0x01
     7d2:	7a 81       	ldd	r23, Y+2	; 0x02
     7d4:	8b 81       	ldd	r24, Y+3	; 0x03
     7d6:	9c 81       	ldd	r25, Y+4	; 0x04
     7d8:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__addsf3>
     7dc:	a5 01       	movw	r20, r10
     7de:	94 01       	movw	r18, r8
     7e0:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__addsf3>
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	40 ec       	ldi	r20, 0xC0	; 192
     7ea:	50 e4       	ldi	r21, 0x40	; 64
     7ec:	0e 94 c7 08 	call	0x118e	; 0x118e <__divsf3>
     7f0:	d8 01       	movw	r26, r16
     7f2:	2d 91       	ld	r18, X+
     7f4:	3d 91       	ld	r19, X+
     7f6:	4d 91       	ld	r20, X+
     7f8:	5c 91       	ld	r21, X
     7fa:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__addsf3>
     7fe:	69 83       	std	Y+1, r22	; 0x01
     800:	7a 83       	std	Y+2, r23	; 0x02
     802:	8b 83       	std	Y+3, r24	; 0x03
     804:	9c 83       	std	Y+4, r25	; 0x04
	//check to make sure not greater than -360 and 360
	if ((*angle > 360) || (*angle < -360)){
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	44 eb       	ldi	r20, 0xB4	; 180
     80c:	53 e4       	ldi	r21, 0x43	; 67
     80e:	0e 94 12 0a 	call	0x1424	; 0x1424 <__gesf2>
     812:	18 16       	cp	r1, r24
     814:	b4 f0       	brlt	.+44     	; 0x842 <rk_integrator+0x102>
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	44 eb       	ldi	r20, 0xB4	; 180
     81c:	53 ec       	ldi	r21, 0xC3	; 195
     81e:	69 81       	ldd	r22, Y+1	; 0x01
     820:	7a 81       	ldd	r23, Y+2	; 0x02
     822:	8b 81       	ldd	r24, Y+3	; 0x03
     824:	9c 81       	ldd	r25, Y+4	; 0x04
     826:	0e 94 c2 08 	call	0x1184	; 0x1184 <__cmpsf2>
     82a:	88 23       	and	r24, r24
     82c:	54 f0       	brlt	.+20     	; 0x842 <rk_integrator+0x102>
void rk_integrator(double* angle, double dps, double* prev_dps){
	double dps_1 = *prev_dps;
	double dps_2 = *(prev_dps + 1);
	double dps_3 = *(prev_dps + 2);
	double input = dps/60;		//runs around 60 Hz about
	*angle = *angle + (dps_3 + 2 * dps_2 + 2 * dps_1 + input) / 6;
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	9a 81       	ldd	r25, Y+2	; 0x02
     832:	ab 81       	ldd	r26, Y+3	; 0x03
     834:	bc 81       	ldd	r27, Y+4	; 0x04
     836:	f8 01       	movw	r30, r16
     838:	80 83       	st	Z, r24
     83a:	91 83       	std	Z+1, r25	; 0x01
     83c:	a2 83       	std	Z+2, r26	; 0x02
     83e:	b3 83       	std	Z+3, r27	; 0x03
     840:	06 c0       	rjmp	.+12     	; 0x84e <rk_integrator+0x10e>
	//check to make sure not greater than -360 and 360
	if ((*angle > 360) || (*angle < -360)){
		*angle = 0.0;
     842:	d8 01       	movw	r26, r16
     844:	1d 92       	st	X+, r1
     846:	1d 92       	st	X+, r1
     848:	1d 92       	st	X+, r1
     84a:	1c 92       	st	X, r1
     84c:	13 97       	sbiw	r26, 0x03	; 3
	}
	// updating previous angular velocity array
	*(prev_dps + 2) = dps_2;
     84e:	ed 81       	ldd	r30, Y+5	; 0x05
     850:	fe 81       	ldd	r31, Y+6	; 0x06
     852:	c0 86       	std	Z+8, r12	; 0x08
     854:	d1 86       	std	Z+9, r13	; 0x09
     856:	e2 86       	std	Z+10, r14	; 0x0a
     858:	f3 86       	std	Z+11, r15	; 0x0b
	*(prev_dps + 1) = dps_1;
     85a:	44 82       	std	Z+4, r4	; 0x04
     85c:	55 82       	std	Z+5, r5	; 0x05
     85e:	66 82       	std	Z+6, r6	; 0x06
     860:	77 82       	std	Z+7, r7	; 0x07
	*prev_dps = input;
     862:	80 82       	st	Z, r8
     864:	91 82       	std	Z+1, r9	; 0x01
     866:	a2 82       	std	Z+2, r10	; 0x02
     868:	b3 82       	std	Z+3, r11	; 0x03
}
     86a:	26 96       	adiw	r28, 0x06	; 6
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	cf 90       	pop	r12
     886:	bf 90       	pop	r11
     888:	af 90       	pop	r10
     88a:	9f 90       	pop	r9
     88c:	8f 90       	pop	r8
     88e:	7f 90       	pop	r7
     890:	6f 90       	pop	r6
     892:	5f 90       	pop	r5
     894:	4f 90       	pop	r4
     896:	08 95       	ret

00000898 <applyOffset>:

/*
	Applies offset calibration values to raw converted data
*/
void applyOffset(double* axg, double* ayg, double* azg, double* gxds, double* gyds, double* gzds){
     898:	8f 92       	push	r8
     89a:	9f 92       	push	r9
     89c:	af 92       	push	r10
     89e:	bf 92       	push	r11
     8a0:	cf 92       	push	r12
     8a2:	df 92       	push	r13
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	4c 01       	movw	r8, r24
     8b2:	5b 01       	movw	r10, r22
     8b4:	6a 01       	movw	r12, r20
     8b6:	e9 01       	movw	r28, r18
	*axg = *axg - ACCEL_X_OFFSET;
     8b8:	26 ec       	ldi	r18, 0xC6	; 198
     8ba:	3c ed       	ldi	r19, 0xDC	; 220
     8bc:	45 eb       	ldi	r20, 0xB5	; 181
     8be:	5c e3       	ldi	r21, 0x3C	; 60
     8c0:	fc 01       	movw	r30, r24
     8c2:	60 81       	ld	r22, Z
     8c4:	71 81       	ldd	r23, Z+1	; 0x01
     8c6:	82 81       	ldd	r24, Z+2	; 0x02
     8c8:	93 81       	ldd	r25, Z+3	; 0x03
     8ca:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__subsf3>
     8ce:	f4 01       	movw	r30, r8
     8d0:	60 83       	st	Z, r22
     8d2:	71 83       	std	Z+1, r23	; 0x01
     8d4:	82 83       	std	Z+2, r24	; 0x02
     8d6:	93 83       	std	Z+3, r25	; 0x03
	*ayg = *ayg - ACCEL_Y_OFFSET;
     8d8:	2b e2       	ldi	r18, 0x2B	; 43
     8da:	36 ef       	ldi	r19, 0xF6	; 246
     8dc:	47 e1       	ldi	r20, 0x17	; 23
     8de:	5d e3       	ldi	r21, 0x3D	; 61
     8e0:	f5 01       	movw	r30, r10
     8e2:	60 81       	ld	r22, Z
     8e4:	71 81       	ldd	r23, Z+1	; 0x01
     8e6:	82 81       	ldd	r24, Z+2	; 0x02
     8e8:	93 81       	ldd	r25, Z+3	; 0x03
     8ea:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__subsf3>
     8ee:	f5 01       	movw	r30, r10
     8f0:	60 83       	st	Z, r22
     8f2:	71 83       	std	Z+1, r23	; 0x01
     8f4:	82 83       	std	Z+2, r24	; 0x02
     8f6:	93 83       	std	Z+3, r25	; 0x03
	*azg = *azg - ACCEL_Z_OFFSET;
     8f8:	27 e5       	ldi	r18, 0x57	; 87
     8fa:	3b e5       	ldi	r19, 0x5B	; 91
     8fc:	41 eb       	ldi	r20, 0xB1	; 177
     8fe:	5d e3       	ldi	r21, 0x3D	; 61
     900:	f6 01       	movw	r30, r12
     902:	60 81       	ld	r22, Z
     904:	71 81       	ldd	r23, Z+1	; 0x01
     906:	82 81       	ldd	r24, Z+2	; 0x02
     908:	93 81       	ldd	r25, Z+3	; 0x03
     90a:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__addsf3>
     90e:	f6 01       	movw	r30, r12
     910:	60 83       	st	Z, r22
     912:	71 83       	std	Z+1, r23	; 0x01
     914:	82 83       	std	Z+2, r24	; 0x02
     916:	93 83       	std	Z+3, r25	; 0x03
	*gxds = *gxds - GYRO_X_OFFSET;
     918:	2c e6       	ldi	r18, 0x6C	; 108
     91a:	39 e0       	ldi	r19, 0x09	; 9
     91c:	49 ef       	ldi	r20, 0xF9	; 249
     91e:	5b e3       	ldi	r21, 0x3B	; 59
     920:	68 81       	ld	r22, Y
     922:	79 81       	ldd	r23, Y+1	; 0x01
     924:	8a 81       	ldd	r24, Y+2	; 0x02
     926:	9b 81       	ldd	r25, Y+3	; 0x03
     928:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__subsf3>
     92c:	68 83       	st	Y, r22
     92e:	79 83       	std	Y+1, r23	; 0x01
     930:	8a 83       	std	Y+2, r24	; 0x02
     932:	9b 83       	std	Y+3, r25	; 0x03
	*gyds = *gyds - GYRO_Y_OFFSET;
     934:	29 e0       	ldi	r18, 0x09	; 9
     936:	3b e1       	ldi	r19, 0x1B	; 27
     938:	46 ea       	ldi	r20, 0xA6	; 166
     93a:	5f e3       	ldi	r21, 0x3F	; 63
     93c:	f8 01       	movw	r30, r16
     93e:	60 81       	ld	r22, Z
     940:	71 81       	ldd	r23, Z+1	; 0x01
     942:	82 81       	ldd	r24, Z+2	; 0x02
     944:	93 81       	ldd	r25, Z+3	; 0x03
     946:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__subsf3>
     94a:	f8 01       	movw	r30, r16
     94c:	60 83       	st	Z, r22
     94e:	71 83       	std	Z+1, r23	; 0x01
     950:	82 83       	std	Z+2, r24	; 0x02
     952:	93 83       	std	Z+3, r25	; 0x03
	*gzds = *gzds - GYRO_Z_OFFSET;	
     954:	22 e4       	ldi	r18, 0x42	; 66
     956:	3e e3       	ldi	r19, 0x3E	; 62
     958:	40 ea       	ldi	r20, 0xA0	; 160
     95a:	5f e3       	ldi	r21, 0x3F	; 63
     95c:	f7 01       	movw	r30, r14
     95e:	60 81       	ld	r22, Z
     960:	71 81       	ldd	r23, Z+1	; 0x01
     962:	82 81       	ldd	r24, Z+2	; 0x02
     964:	93 81       	ldd	r25, Z+3	; 0x03
     966:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__subsf3>
     96a:	f7 01       	movw	r30, r14
     96c:	60 83       	st	Z, r22
     96e:	71 83       	std	Z+1, r23	; 0x01
     970:	82 83       	std	Z+2, r24	; 0x02
     972:	93 83       	std	Z+3, r25	; 0x03
}
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	ff 90       	pop	r15
     97e:	ef 90       	pop	r14
     980:	df 90       	pop	r13
     982:	cf 90       	pop	r12
     984:	bf 90       	pop	r11
     986:	af 90       	pop	r10
     988:	9f 90       	pop	r9
     98a:	8f 90       	pop	r8
     98c:	08 95       	ret

0000098e <applyCompFilter>:

/*
	Applies complimentary filter to an angle 
*/
void applyCompFilter(double * filteredAngle, double accelAngle, double gyroAngle){
     98e:	8f 92       	push	r8
     990:	9f 92       	push	r9
     992:	af 92       	push	r10
     994:	bf 92       	push	r11
     996:	cf 92       	push	r12
     998:	df 92       	push	r13
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	ec 01       	movw	r28, r24
     9a8:	4a 01       	movw	r8, r20
     9aa:	5b 01       	movw	r10, r22
     9ac:	c9 01       	movw	r24, r18
     9ae:	b8 01       	movw	r22, r16
	*filteredAngle = (1-ALPHA) * gyroAngle + ALPHA * accelAngle;
     9b0:	24 e3       	ldi	r18, 0x34	; 52
     9b2:	33 e3       	ldi	r19, 0x33	; 51
     9b4:	43 eb       	ldi	r20, 0xB3	; 179
     9b6:	5e e3       	ldi	r21, 0x3E	; 62
     9b8:	0e 94 1f 0a 	call	0x143e	; 0x143e <__mulsf3>
     9bc:	6b 01       	movw	r12, r22
     9be:	7c 01       	movw	r14, r24
     9c0:	26 e6       	ldi	r18, 0x66	; 102
     9c2:	36 e6       	ldi	r19, 0x66	; 102
     9c4:	46 e2       	ldi	r20, 0x26	; 38
     9c6:	5f e3       	ldi	r21, 0x3F	; 63
     9c8:	c5 01       	movw	r24, r10
     9ca:	b4 01       	movw	r22, r8
     9cc:	0e 94 1f 0a 	call	0x143e	; 0x143e <__mulsf3>
     9d0:	9b 01       	movw	r18, r22
     9d2:	ac 01       	movw	r20, r24
     9d4:	c7 01       	movw	r24, r14
     9d6:	b6 01       	movw	r22, r12
     9d8:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__addsf3>
     9dc:	68 83       	st	Y, r22
     9de:	79 83       	std	Y+1, r23	; 0x01
     9e0:	8a 83       	std	Y+2, r24	; 0x02
     9e2:	9b 83       	std	Y+3, r25	; 0x03
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	ff 90       	pop	r15
     9ee:	ef 90       	pop	r14
     9f0:	df 90       	pop	r13
     9f2:	cf 90       	pop	r12
     9f4:	bf 90       	pop	r11
     9f6:	af 90       	pop	r10
     9f8:	9f 90       	pop	r9
     9fa:	8f 90       	pop	r8
     9fc:	08 95       	ret

000009fe <mpu6050_readBytes>:
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
	if(buffer[0] == 0x34)
		return 1;
	else
		return 0;
}
     9fe:	af 92       	push	r10
     a00:	bf 92       	push	r11
     a02:	cf 92       	push	r12
     a04:	df 92       	push	r13
     a06:	ff 92       	push	r15
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	66 23       	and	r22, r22
     a12:	b9 f1       	breq	.+110    	; 0xa82 <mpu6050_readBytes+0x84>
     a14:	c5 2f       	mov	r28, r21
     a16:	d4 2f       	mov	r29, r20
     a18:	f6 2e       	mov	r15, r22
     a1a:	18 2f       	mov	r17, r24
     a1c:	80 ed       	ldi	r24, 0xD0	; 208
     a1e:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_start>
     a22:	81 2f       	mov	r24, r17
     a24:	0e 94 43 01 	call	0x286	; 0x286 <i2c_write>
     a28:	85 e3       	ldi	r24, 0x35	; 53
     a2a:	8a 95       	dec	r24
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <mpu6050_readBytes+0x2c>
     a2e:	00 00       	nop
     a30:	81 ed       	ldi	r24, 0xD1	; 209
     a32:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_start>
     a36:	0d 2f       	mov	r16, r29
     a38:	1c 2f       	mov	r17, r28
     a3a:	cc 24       	eor	r12, r12
     a3c:	ca 94       	dec	r12
     a3e:	cf 0c       	add	r12, r15
     a40:	d1 2c       	mov	r13, r1
     a42:	ef ef       	ldi	r30, 0xFF	; 255
     a44:	ce 1a       	sub	r12, r30
     a46:	de 0a       	sbc	r13, r30
     a48:	c0 e0       	ldi	r28, 0x00	; 0
     a4a:	d0 e0       	ldi	r29, 0x00	; 0
     a4c:	af 2c       	mov	r10, r15
     a4e:	b1 2c       	mov	r11, r1
     a50:	f1 e0       	ldi	r31, 0x01	; 1
     a52:	af 1a       	sub	r10, r31
     a54:	b1 08       	sbc	r11, r1
     a56:	ac 16       	cp	r10, r28
     a58:	bd 06       	cpc	r11, r29
     a5a:	29 f4       	brne	.+10     	; 0xa66 <mpu6050_readBytes+0x68>
     a5c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <i2c_readNak>
     a60:	f8 01       	movw	r30, r16
     a62:	80 83       	st	Z, r24
     a64:	04 c0       	rjmp	.+8      	; 0xa6e <mpu6050_readBytes+0x70>
     a66:	0e 94 64 01 	call	0x2c8	; 0x2c8 <i2c_readAck>
     a6a:	f8 01       	movw	r30, r16
     a6c:	80 83       	st	Z, r24
     a6e:	21 96       	adiw	r28, 0x01	; 1
     a70:	0f 5f       	subi	r16, 0xFF	; 255
     a72:	1f 4f       	sbci	r17, 0xFF	; 255
     a74:	cc 15       	cp	r28, r12
     a76:	dd 05       	cpc	r29, r13
     a78:	71 f7       	brne	.-36     	; 0xa56 <mpu6050_readBytes+0x58>
     a7a:	cf 2d       	mov	r28, r15
     a7c:	0e 94 33 01 	call	0x266	; 0x266 <i2c_stop>
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <mpu6050_readBytes+0x86>
     a82:	c0 e0       	ldi	r28, 0x00	; 0
     a84:	8c 2f       	mov	r24, r28
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	df 90       	pop	r13
     a92:	cf 90       	pop	r12
     a94:	bf 90       	pop	r11
     a96:	af 90       	pop	r10
     a98:	08 95       	ret

00000a9a <mpu6050_readByte>:
     a9a:	ab 01       	movw	r20, r22
     a9c:	61 e0       	ldi	r22, 0x01	; 1
     a9e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <mpu6050_readBytes>
     aa2:	08 95       	ret

00000aa4 <mpu6050_writeBytes>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	66 23       	and	r22, r22
     ab2:	d1 f0       	breq	.+52     	; 0xae8 <mpu6050_writeBytes+0x44>
     ab4:	7a 01       	movw	r14, r20
     ab6:	16 2f       	mov	r17, r22
     ab8:	c8 2f       	mov	r28, r24
     aba:	80 ed       	ldi	r24, 0xD0	; 208
     abc:	0e 94 ed 00 	call	0x1da	; 0x1da <i2c_start>
     ac0:	8c 2f       	mov	r24, r28
     ac2:	0e 94 43 01 	call	0x286	; 0x286 <i2c_write>
     ac6:	e7 01       	movw	r28, r14
     ac8:	6f ef       	ldi	r22, 0xFF	; 255
     aca:	61 0f       	add	r22, r17
     acc:	06 2f       	mov	r16, r22
     ace:	10 e0       	ldi	r17, 0x00	; 0
     ad0:	0f 5f       	subi	r16, 0xFF	; 255
     ad2:	1f 4f       	sbci	r17, 0xFF	; 255
     ad4:	0e 0d       	add	r16, r14
     ad6:	1f 1d       	adc	r17, r15
     ad8:	89 91       	ld	r24, Y+
     ada:	0e 94 43 01 	call	0x286	; 0x286 <i2c_write>
     ade:	c0 17       	cp	r28, r16
     ae0:	d1 07       	cpc	r29, r17
     ae2:	d1 f7       	brne	.-12     	; 0xad8 <mpu6050_writeBytes+0x34>
     ae4:	0e 94 33 01 	call	0x266	; 0x266 <i2c_stop>
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	ff 90       	pop	r15
     af2:	ef 90       	pop	r14
     af4:	08 95       	ret

00000af6 <mpu6050_writeByte>:
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	1f 92       	push	r1
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	69 83       	std	Y+1, r22	; 0x01
     b02:	ae 01       	movw	r20, r28
     b04:	4f 5f       	subi	r20, 0xFF	; 255
     b06:	5f 4f       	sbci	r21, 0xFF	; 255
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <mpu6050_writeBytes>
     b0e:	0f 90       	pop	r0
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <mpu6050_writeBits>:
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	1f 92       	push	r1
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	44 23       	and	r20, r20
     b2a:	89 f1       	breq	.+98     	; 0xb8e <mpu6050_writeBits+0x78>
     b2c:	f2 2e       	mov	r15, r18
     b2e:	14 2f       	mov	r17, r20
     b30:	06 2f       	mov	r16, r22
     b32:	e8 2e       	mov	r14, r24
     b34:	19 82       	std	Y+1, r1	; 0x01
     b36:	be 01       	movw	r22, r28
     b38:	6f 5f       	subi	r22, 0xFF	; 255
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	0e 94 4d 05 	call	0xa9a	; 0xa9a <mpu6050_readByte>
     b40:	88 23       	and	r24, r24
     b42:	29 f1       	breq	.+74     	; 0xb8e <mpu6050_writeBits+0x78>
     b44:	40 2f       	mov	r20, r16
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	41 1b       	sub	r20, r17
     b4a:	51 09       	sbc	r21, r1
     b4c:	4f 5f       	subi	r20, 0xFF	; 255
     b4e:	5f 4f       	sbci	r21, 0xFF	; 255
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <mpu6050_writeBits+0x44>
     b56:	88 0f       	add	r24, r24
     b58:	99 1f       	adc	r25, r25
     b5a:	1a 95       	dec	r17
     b5c:	e2 f7       	brpl	.-8      	; 0xb56 <mpu6050_writeBits+0x40>
     b5e:	01 97       	sbiw	r24, 0x01	; 1
     b60:	04 2e       	mov	r0, r20
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <mpu6050_writeBits+0x52>
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	0a 94       	dec	r0
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <mpu6050_writeBits+0x4e>
     b6c:	2f 2d       	mov	r18, r15
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <mpu6050_writeBits+0x60>
     b72:	22 0f       	add	r18, r18
     b74:	33 1f       	adc	r19, r19
     b76:	4a 95       	dec	r20
     b78:	e2 f7       	brpl	.-8      	; 0xb72 <mpu6050_writeBits+0x5c>
     b7a:	68 2f       	mov	r22, r24
     b7c:	60 95       	com	r22
     b7e:	99 81       	ldd	r25, Y+1	; 0x01
     b80:	69 23       	and	r22, r25
     b82:	82 23       	and	r24, r18
     b84:	68 2b       	or	r22, r24
     b86:	69 83       	std	Y+1, r22	; 0x01
     b88:	8e 2d       	mov	r24, r14
     b8a:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <mpu6050_writeByte>
     b8e:	0f 90       	pop	r0
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <mpu6050_writeBit>:
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	1f 92       	push	r1
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	18 2f       	mov	r17, r24
     bb0:	06 2f       	mov	r16, r22
     bb2:	f4 2e       	mov	r15, r20
     bb4:	be 01       	movw	r22, r28
     bb6:	6f 5f       	subi	r22, 0xFF	; 255
     bb8:	7f 4f       	sbci	r23, 0xFF	; 255
     bba:	0e 94 4d 05 	call	0xa9a	; 0xa9a <mpu6050_readByte>
     bbe:	ff 20       	and	r15, r15
     bc0:	51 f0       	breq	.+20     	; 0xbd6 <mpu6050_writeBit+0x38>
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <mpu6050_writeBit+0x2e>
     bc8:	66 0f       	add	r22, r22
     bca:	77 1f       	adc	r23, r23
     bcc:	0a 95       	dec	r16
     bce:	e2 f7       	brpl	.-8      	; 0xbc8 <mpu6050_writeBit+0x2a>
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	68 2b       	or	r22, r24
     bd4:	0a c0       	rjmp	.+20     	; 0xbea <mpu6050_writeBit+0x4c>
     bd6:	61 e0       	ldi	r22, 0x01	; 1
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <mpu6050_writeBit+0x42>
     bdc:	66 0f       	add	r22, r22
     bde:	77 1f       	adc	r23, r23
     be0:	0a 95       	dec	r16
     be2:	e2 f7       	brpl	.-8      	; 0xbdc <mpu6050_writeBit+0x3e>
     be4:	60 95       	com	r22
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	68 23       	and	r22, r24
     bea:	69 83       	std	Y+1, r22	; 0x01
     bec:	81 2f       	mov	r24, r17
     bee:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <mpu6050_writeByte>
     bf2:	0f 90       	pop	r0
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	08 95       	ret

00000c00 <mpu6050_setSleepDisabled>:
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	66 e0       	ldi	r22, 0x06	; 6
     c04:	8b e6       	ldi	r24, 0x6B	; 107
     c06:	0e 94 cf 05 	call	0xb9e	; 0xb9e <mpu6050_writeBit>
     c0a:	08 95       	ret

00000c0c <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
     c0c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c10:	25 e3       	ldi	r18, 0x35	; 53
     c12:	2a 95       	dec	r18
     c14:	f1 f7       	brne	.-4      	; 0xc12 <mpu6050_init+0x6>
     c16:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	91 ee       	ldi	r25, 0xE1	; 225
     c1c:	24 e0       	ldi	r18, 0x04	; 4
     c1e:	81 50       	subi	r24, 0x01	; 1
     c20:	90 40       	sbci	r25, 0x00	; 0
     c22:	20 40       	sbci	r18, 0x00	; 0
     c24:	e1 f7       	brne	.-8      	; 0xc1e <mpu6050_init+0x12>
     c26:	00 c0       	rjmp	.+0      	; 0xc28 <mpu6050_init+0x1c>
     c28:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
     c2a:	0e 94 00 06 	call	0xc00	; 0xc00 <mpu6050_setSleepDisabled>
     c2e:	8f e3       	ldi	r24, 0x3F	; 63
     c30:	9c e9       	ldi	r25, 0x9C	; 156
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <mpu6050_init+0x26>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <mpu6050_init+0x2c>
     c38:	00 00       	nop
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
     c3a:	21 e0       	ldi	r18, 0x01	; 1
     c3c:	43 e0       	ldi	r20, 0x03	; 3
     c3e:	62 e0       	ldi	r22, 0x02	; 2
     c40:	8b e6       	ldi	r24, 0x6B	; 107
     c42:	0e 94 8b 05 	call	0xb16	; 0xb16 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
     c46:	23 e0       	ldi	r18, 0x03	; 3
     c48:	43 e0       	ldi	r20, 0x03	; 3
     c4a:	62 e0       	ldi	r22, 0x02	; 2
     c4c:	8a e1       	ldi	r24, 0x1A	; 26
     c4e:	0e 94 8b 05 	call	0xb16	; 0xb16 <mpu6050_writeBits>
    //set sample rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
     c52:	64 e0       	ldi	r22, 0x04	; 4
     c54:	89 e1       	ldi	r24, 0x19	; 25
     c56:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	42 e0       	ldi	r20, 0x02	; 2
     c5e:	64 e0       	ldi	r22, 0x04	; 4
     c60:	8b e1       	ldi	r24, 0x1B	; 27
     c62:	0e 94 8b 05 	call	0xb16	; 0xb16 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
     c66:	21 e0       	ldi	r18, 0x01	; 1
     c68:	42 e0       	ldi	r20, 0x02	; 2
     c6a:	64 e0       	ldi	r22, 0x04	; 4
     c6c:	8c e1       	ldi	r24, 0x1C	; 28
     c6e:	0e 94 8b 05 	call	0xb16	; 0xb16 <mpu6050_writeBits>
     c72:	08 95       	ret

00000c74 <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     c74:	8f 92       	push	r8
     c76:	9f 92       	push	r9
     c78:	af 92       	push	r10
     c7a:	bf 92       	push	r11
     c7c:	cf 92       	push	r12
     c7e:	df 92       	push	r13
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	4c 01       	movw	r8, r24
     c8e:	5b 01       	movw	r10, r22
     c90:	6a 01       	movw	r12, r20
     c92:	e9 01       	movw	r28, r18
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
     c94:	49 e4       	ldi	r20, 0x49	; 73
     c96:	51 e0       	ldi	r21, 0x01	; 1
     c98:	6e e0       	ldi	r22, 0x0E	; 14
     c9a:	8b e3       	ldi	r24, 0x3B	; 59
     c9c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     ca0:	e9 e4       	ldi	r30, 0x49	; 73
     ca2:	f1 e0       	ldi	r31, 0x01	; 1
     ca4:	20 81       	ld	r18, Z
     ca6:	81 81       	ldd	r24, Z+1	; 0x01
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	92 2b       	or	r25, r18
     cac:	d4 01       	movw	r26, r8
     cae:	8d 93       	st	X+, r24
     cb0:	9c 93       	st	X, r25
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     cb2:	22 81       	ldd	r18, Z+2	; 0x02
     cb4:	83 81       	ldd	r24, Z+3	; 0x03
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	92 2b       	or	r25, r18
     cba:	d5 01       	movw	r26, r10
     cbc:	8d 93       	st	X+, r24
     cbe:	9c 93       	st	X, r25
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
     cc0:	24 81       	ldd	r18, Z+4	; 0x04
     cc2:	85 81       	ldd	r24, Z+5	; 0x05
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	92 2b       	or	r25, r18
     cc8:	d6 01       	movw	r26, r12
     cca:	8d 93       	st	X+, r24
     ccc:	9c 93       	st	X, r25
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     cce:	20 85       	ldd	r18, Z+8	; 0x08
     cd0:	81 85       	ldd	r24, Z+9	; 0x09
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	92 2b       	or	r25, r18
     cd6:	99 83       	std	Y+1, r25	; 0x01
     cd8:	88 83       	st	Y, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     cda:	22 85       	ldd	r18, Z+10	; 0x0a
     cdc:	83 85       	ldd	r24, Z+11	; 0x0b
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	92 2b       	or	r25, r18
     ce2:	d8 01       	movw	r26, r16
     ce4:	8d 93       	st	X+, r24
     ce6:	9c 93       	st	X, r25
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     ce8:	24 85       	ldd	r18, Z+12	; 0x0c
     cea:	85 85       	ldd	r24, Z+13	; 0x0d
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	92 2b       	or	r25, r18
     cf0:	f7 01       	movw	r30, r14
     cf2:	91 83       	std	Z+1, r25	; 0x01
     cf4:	80 83       	st	Z, r24
}
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	df 90       	pop	r13
     d04:	cf 90       	pop	r12
     d06:	bf 90       	pop	r11
     d08:	af 90       	pop	r10
     d0a:	9f 90       	pop	r9
     d0c:	8f 90       	pop	r8
     d0e:	08 95       	ret

00000d10 <mpu6050_getConvData>:

/*
 * get raw data converted to g and deg/sec values
 */
void mpu6050_getConvData(double* axg, double* ayg, double* azg, double* gxds, double* gyds, double* gzds) {
     d10:	2f 92       	push	r2
     d12:	3f 92       	push	r3
     d14:	4f 92       	push	r4
     d16:	5f 92       	push	r5
     d18:	6f 92       	push	r6
     d1a:	7f 92       	push	r7
     d1c:	8f 92       	push	r8
     d1e:	9f 92       	push	r9
     d20:	af 92       	push	r10
     d22:	bf 92       	push	r11
     d24:	cf 92       	push	r12
     d26:	df 92       	push	r13
     d28:	ef 92       	push	r14
     d2a:	ff 92       	push	r15
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	2c 97       	sbiw	r28, 0x0c	; 12
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	3c 01       	movw	r6, r24
     d46:	4b 01       	movw	r8, r22
     d48:	5a 01       	movw	r10, r20
     d4a:	69 01       	movw	r12, r18
     d4c:	28 01       	movw	r4, r16
     d4e:	17 01       	movw	r2, r14
	int16_t ax = 0;
     d50:	1a 82       	std	Y+2, r1	; 0x02
     d52:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
     d54:	1c 82       	std	Y+4, r1	; 0x04
     d56:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
     d58:	1e 82       	std	Y+6, r1	; 0x06
     d5a:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
     d5c:	18 86       	std	Y+8, r1	; 0x08
     d5e:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
     d60:	1a 86       	std	Y+10, r1	; 0x0a
     d62:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
     d64:	1c 86       	std	Y+12, r1	; 0x0c
     d66:	1b 86       	std	Y+11, r1	; 0x0b
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     d68:	ce 01       	movw	r24, r28
     d6a:	0b 96       	adiw	r24, 0x0b	; 11
     d6c:	7c 01       	movw	r14, r24
     d6e:	8e 01       	movw	r16, r28
     d70:	07 5f       	subi	r16, 0xF7	; 247
     d72:	1f 4f       	sbci	r17, 0xFF	; 255
     d74:	9e 01       	movw	r18, r28
     d76:	29 5f       	subi	r18, 0xF9	; 249
     d78:	3f 4f       	sbci	r19, 0xFF	; 255
     d7a:	ae 01       	movw	r20, r28
     d7c:	4b 5f       	subi	r20, 0xFB	; 251
     d7e:	5f 4f       	sbci	r21, 0xFF	; 255
     d80:	be 01       	movw	r22, r28
     d82:	6d 5f       	subi	r22, 0xFD	; 253
     d84:	7f 4f       	sbci	r23, 0xFF	; 255
     d86:	0a 97       	sbiw	r24, 0x0a	; 10
     d88:	0e 94 3a 06 	call	0xc74	; 0xc74 <mpu6050_getRawData>
    *azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
    *gxds = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN;
	*gyds = (double)(gy-MPU6050_GYOFFSET)/MPU6050_GYGAIN;
	*gzds = (double)(gz-MPU6050_GZOFFSET)/MPU6050_GZGAIN;
	#else
    *axg = (double)(ax)/MPU6050_AGAIN;
     d8c:	69 81       	ldd	r22, Y+1	; 0x01
     d8e:	7a 81       	ldd	r23, Y+2	; 0x02
     d90:	07 2e       	mov	r0, r23
     d92:	00 0c       	add	r0, r0
     d94:	88 0b       	sbc	r24, r24
     d96:	99 0b       	sbc	r25, r25
     d98:	0e 94 3b 09 	call	0x1276	; 0x1276 <__floatsisf>
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	59 e3       	ldi	r21, 0x39	; 57
     da4:	0e 94 1f 0a 	call	0x143e	; 0x143e <__mulsf3>
     da8:	f3 01       	movw	r30, r6
     daa:	60 83       	st	Z, r22
     dac:	71 83       	std	Z+1, r23	; 0x01
     dae:	82 83       	std	Z+2, r24	; 0x02
     db0:	93 83       	std	Z+3, r25	; 0x03
    *ayg = (double)(ay)/MPU6050_AGAIN;
     db2:	6b 81       	ldd	r22, Y+3	; 0x03
     db4:	7c 81       	ldd	r23, Y+4	; 0x04
     db6:	07 2e       	mov	r0, r23
     db8:	00 0c       	add	r0, r0
     dba:	88 0b       	sbc	r24, r24
     dbc:	99 0b       	sbc	r25, r25
     dbe:	0e 94 3b 09 	call	0x1276	; 0x1276 <__floatsisf>
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	59 e3       	ldi	r21, 0x39	; 57
     dca:	0e 94 1f 0a 	call	0x143e	; 0x143e <__mulsf3>
     dce:	f4 01       	movw	r30, r8
     dd0:	60 83       	st	Z, r22
     dd2:	71 83       	std	Z+1, r23	; 0x01
     dd4:	82 83       	std	Z+2, r24	; 0x02
     dd6:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az)/MPU6050_AGAIN;
     dd8:	6d 81       	ldd	r22, Y+5	; 0x05
     dda:	7e 81       	ldd	r23, Y+6	; 0x06
     ddc:	07 2e       	mov	r0, r23
     dde:	00 0c       	add	r0, r0
     de0:	88 0b       	sbc	r24, r24
     de2:	99 0b       	sbc	r25, r25
     de4:	0e 94 3b 09 	call	0x1276	; 0x1276 <__floatsisf>
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	40 e0       	ldi	r20, 0x00	; 0
     dee:	59 e3       	ldi	r21, 0x39	; 57
     df0:	0e 94 1f 0a 	call	0x143e	; 0x143e <__mulsf3>
     df4:	f5 01       	movw	r30, r10
     df6:	60 83       	st	Z, r22
     df8:	71 83       	std	Z+1, r23	; 0x01
     dfa:	82 83       	std	Z+2, r24	; 0x02
     dfc:	93 83       	std	Z+3, r25	; 0x03
    *gxds = (double)(gx)/MPU6050_GGAIN;
     dfe:	6f 81       	ldd	r22, Y+7	; 0x07
     e00:	78 85       	ldd	r23, Y+8	; 0x08
     e02:	07 2e       	mov	r0, r23
     e04:	00 0c       	add	r0, r0
     e06:	88 0b       	sbc	r24, r24
     e08:	99 0b       	sbc	r25, r25
     e0a:	0e 94 3b 09 	call	0x1276	; 0x1276 <__floatsisf>
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	43 e0       	ldi	r20, 0x03	; 3
     e14:	53 e4       	ldi	r21, 0x43	; 67
     e16:	0e 94 c7 08 	call	0x118e	; 0x118e <__divsf3>
     e1a:	f6 01       	movw	r30, r12
     e1c:	60 83       	st	Z, r22
     e1e:	71 83       	std	Z+1, r23	; 0x01
     e20:	82 83       	std	Z+2, r24	; 0x02
     e22:	93 83       	std	Z+3, r25	; 0x03
	*gyds = (double)(gy)/MPU6050_GGAIN;
     e24:	69 85       	ldd	r22, Y+9	; 0x09
     e26:	7a 85       	ldd	r23, Y+10	; 0x0a
     e28:	07 2e       	mov	r0, r23
     e2a:	00 0c       	add	r0, r0
     e2c:	88 0b       	sbc	r24, r24
     e2e:	99 0b       	sbc	r25, r25
     e30:	0e 94 3b 09 	call	0x1276	; 0x1276 <__floatsisf>
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	43 e0       	ldi	r20, 0x03	; 3
     e3a:	53 e4       	ldi	r21, 0x43	; 67
     e3c:	0e 94 c7 08 	call	0x118e	; 0x118e <__divsf3>
     e40:	f2 01       	movw	r30, r4
     e42:	60 83       	st	Z, r22
     e44:	71 83       	std	Z+1, r23	; 0x01
     e46:	82 83       	std	Z+2, r24	; 0x02
     e48:	93 83       	std	Z+3, r25	; 0x03
	*gzds = (double)(gz)/MPU6050_GGAIN;
     e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e4e:	07 2e       	mov	r0, r23
     e50:	00 0c       	add	r0, r0
     e52:	88 0b       	sbc	r24, r24
     e54:	99 0b       	sbc	r25, r25
     e56:	0e 94 3b 09 	call	0x1276	; 0x1276 <__floatsisf>
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	43 e0       	ldi	r20, 0x03	; 3
     e60:	53 e4       	ldi	r21, 0x43	; 67
     e62:	0e 94 c7 08 	call	0x118e	; 0x118e <__divsf3>
     e66:	f1 01       	movw	r30, r2
     e68:	60 83       	st	Z, r22
     e6a:	71 83       	std	Z+1, r23	; 0x01
     e6c:	82 83       	std	Z+2, r24	; 0x02
     e6e:	93 83       	std	Z+3, r25	; 0x03
	#endif
}
     e70:	2c 96       	adiw	r28, 0x0c	; 12
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	bf 90       	pop	r11
     e8e:	af 90       	pop	r10
     e90:	9f 90       	pop	r9
     e92:	8f 90       	pop	r8
     e94:	7f 90       	pop	r7
     e96:	6f 90       	pop	r6
     e98:	5f 90       	pop	r5
     e9a:	4f 90       	pop	r4
     e9c:	3f 90       	pop	r3
     e9e:	2f 90       	pop	r2
     ea0:	08 95       	ret

00000ea2 <__vector_18>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
     ea2:	1f 92       	push	r1
     ea4:	0f 92       	push	r0
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	0f 92       	push	r0
     eaa:	11 24       	eor	r1, r1
     eac:	2f 93       	push	r18
     eae:	8f 93       	push	r24
     eb0:	9f 93       	push	r25
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
     eb6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     eba:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     ebe:	88 71       	andi	r24, 0x18	; 24
     ec0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <UART_RxHead>
     ec4:	ef 5f       	subi	r30, 0xFF	; 255
     ec6:	ef 71       	andi	r30, 0x1F	; 31
     ec8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <UART_RxTail>
     ecc:	e9 17       	cp	r30, r25
     ece:	39 f0       	breq	.+14     	; 0xede <__vector_18+0x3c>
     ed0:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <UART_RxHead>
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	e7 5f       	subi	r30, 0xF7	; 247
     ed8:	fe 4f       	sbci	r31, 0xFE	; 254
     eda:	20 83       	st	Z, r18
     edc:	01 c0       	rjmp	.+2      	; 0xee0 <__vector_18+0x3e>
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
     ee4:	ff 91       	pop	r31
     ee6:	ef 91       	pop	r30
     ee8:	9f 91       	pop	r25
     eea:	8f 91       	pop	r24
     eec:	2f 91       	pop	r18
     eee:	0f 90       	pop	r0
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	0f 90       	pop	r0
     ef4:	1f 90       	pop	r1
     ef6:	18 95       	reti

00000ef8 <__vector_19>:
     ef8:	1f 92       	push	r1
     efa:	0f 92       	push	r0
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	0f 92       	push	r0
     f00:	11 24       	eor	r1, r1
     f02:	8f 93       	push	r24
     f04:	9f 93       	push	r25
     f06:	ef 93       	push	r30
     f08:	ff 93       	push	r31
     f0a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <UART_TxHead>
     f0e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <UART_TxTail>
     f12:	98 17       	cp	r25, r24
     f14:	69 f0       	breq	.+26     	; 0xf30 <__vector_19+0x38>
     f16:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <UART_TxTail>
     f1a:	ef 5f       	subi	r30, 0xFF	; 255
     f1c:	ef 71       	andi	r30, 0x1F	; 31
     f1e:	e0 93 07 01 	sts	0x0107, r30	; 0x800107 <UART_TxTail>
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	e7 5d       	subi	r30, 0xD7	; 215
     f26:	fe 4f       	sbci	r31, 0xFE	; 254
     f28:	80 81       	ld	r24, Z
     f2a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     f2e:	05 c0       	rjmp	.+10     	; 0xf3a <__vector_19+0x42>
     f30:	e1 ec       	ldi	r30, 0xC1	; 193
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	8f 7d       	andi	r24, 0xDF	; 223
     f38:	80 83       	st	Z, r24
     f3a:	ff 91       	pop	r31
     f3c:	ef 91       	pop	r30
     f3e:	9f 91       	pop	r25
     f40:	8f 91       	pop	r24
     f42:	0f 90       	pop	r0
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	0f 90       	pop	r0
     f48:	1f 90       	pop	r1
     f4a:	18 95       	reti

00000f4c <uart_init>:
     f4c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <UART_TxHead>
     f50:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <UART_TxTail>
     f54:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <UART_RxHead>
     f58:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <UART_RxTail>
     f5c:	99 23       	and	r25, r25
     f5e:	24 f4       	brge	.+8      	; 0xf68 <uart_init+0x1c>
     f60:	22 e0       	ldi	r18, 0x02	; 2
     f62:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     f66:	9f 77       	andi	r25, 0x7F	; 127
     f68:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     f6c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     f70:	88 e9       	ldi	r24, 0x98	; 152
     f72:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f76:	86 e0       	ldi	r24, 0x06	; 6
     f78:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     f7c:	08 95       	ret

00000f7e <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     f7e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <UART_TxHead>
     f82:	2f 5f       	subi	r18, 0xFF	; 255
     f84:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
     f86:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <UART_TxTail>
     f8a:	29 17       	cp	r18, r25
     f8c:	e1 f3       	breq	.-8      	; 0xf86 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     f8e:	e2 2f       	mov	r30, r18
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	e7 5d       	subi	r30, 0xD7	; 215
     f94:	fe 4f       	sbci	r31, 0xFE	; 254
     f96:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     f98:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     f9c:	e1 ec       	ldi	r30, 0xC1	; 193
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	80 62       	ori	r24, 0x20	; 32
     fa4:	80 83       	st	Z, r24
     fa6:	08 95       	ret

00000fa8 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	ec 01       	movw	r28, r24
    while (*s) 
     fae:	88 81       	ld	r24, Y
     fb0:	88 23       	and	r24, r24
     fb2:	31 f0       	breq	.+12     	; 0xfc0 <uart_puts+0x18>
     fb4:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
     fb6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     fba:	89 91       	ld	r24, Y+
     fbc:	81 11       	cpse	r24, r1
     fbe:	fb cf       	rjmp	.-10     	; 0xfb6 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <__subsf3>:
     fc6:	50 58       	subi	r21, 0x80	; 128

00000fc8 <__addsf3>:
     fc8:	bb 27       	eor	r27, r27
     fca:	aa 27       	eor	r26, r26
     fcc:	0e 94 fb 07 	call	0xff6	; 0xff6 <__addsf3x>
     fd0:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__fp_round>
     fd4:	0e 94 ca 09 	call	0x1394	; 0x1394 <__fp_pscA>
     fd8:	38 f0       	brcs	.+14     	; 0xfe8 <__addsf3+0x20>
     fda:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__fp_pscB>
     fde:	20 f0       	brcs	.+8      	; 0xfe8 <__addsf3+0x20>
     fe0:	39 f4       	brne	.+14     	; 0xff0 <__addsf3+0x28>
     fe2:	9f 3f       	cpi	r25, 0xFF	; 255
     fe4:	19 f4       	brne	.+6      	; 0xfec <__addsf3+0x24>
     fe6:	26 f4       	brtc	.+8      	; 0xff0 <__addsf3+0x28>
     fe8:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__fp_nan>
     fec:	0e f4       	brtc	.+2      	; 0xff0 <__addsf3+0x28>
     fee:	e0 95       	com	r30
     ff0:	e7 fb       	bst	r30, 7
     ff2:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_inf>

00000ff6 <__addsf3x>:
     ff6:	e9 2f       	mov	r30, r25
     ff8:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_split3>
     ffc:	58 f3       	brcs	.-42     	; 0xfd4 <__addsf3+0xc>
     ffe:	ba 17       	cp	r27, r26
    1000:	62 07       	cpc	r22, r18
    1002:	73 07       	cpc	r23, r19
    1004:	84 07       	cpc	r24, r20
    1006:	95 07       	cpc	r25, r21
    1008:	20 f0       	brcs	.+8      	; 0x1012 <__addsf3x+0x1c>
    100a:	79 f4       	brne	.+30     	; 0x102a <__addsf3x+0x34>
    100c:	a6 f5       	brtc	.+104    	; 0x1076 <__addsf3x+0x80>
    100e:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__fp_zero>
    1012:	0e f4       	brtc	.+2      	; 0x1016 <__addsf3x+0x20>
    1014:	e0 95       	com	r30
    1016:	0b 2e       	mov	r0, r27
    1018:	ba 2f       	mov	r27, r26
    101a:	a0 2d       	mov	r26, r0
    101c:	0b 01       	movw	r0, r22
    101e:	b9 01       	movw	r22, r18
    1020:	90 01       	movw	r18, r0
    1022:	0c 01       	movw	r0, r24
    1024:	ca 01       	movw	r24, r20
    1026:	a0 01       	movw	r20, r0
    1028:	11 24       	eor	r1, r1
    102a:	ff 27       	eor	r31, r31
    102c:	59 1b       	sub	r21, r25
    102e:	99 f0       	breq	.+38     	; 0x1056 <__addsf3x+0x60>
    1030:	59 3f       	cpi	r21, 0xF9	; 249
    1032:	50 f4       	brcc	.+20     	; 0x1048 <__addsf3x+0x52>
    1034:	50 3e       	cpi	r21, 0xE0	; 224
    1036:	68 f1       	brcs	.+90     	; 0x1092 <__addsf3x+0x9c>
    1038:	1a 16       	cp	r1, r26
    103a:	f0 40       	sbci	r31, 0x00	; 0
    103c:	a2 2f       	mov	r26, r18
    103e:	23 2f       	mov	r18, r19
    1040:	34 2f       	mov	r19, r20
    1042:	44 27       	eor	r20, r20
    1044:	58 5f       	subi	r21, 0xF8	; 248
    1046:	f3 cf       	rjmp	.-26     	; 0x102e <__addsf3x+0x38>
    1048:	46 95       	lsr	r20
    104a:	37 95       	ror	r19
    104c:	27 95       	ror	r18
    104e:	a7 95       	ror	r26
    1050:	f0 40       	sbci	r31, 0x00	; 0
    1052:	53 95       	inc	r21
    1054:	c9 f7       	brne	.-14     	; 0x1048 <__addsf3x+0x52>
    1056:	7e f4       	brtc	.+30     	; 0x1076 <__addsf3x+0x80>
    1058:	1f 16       	cp	r1, r31
    105a:	ba 0b       	sbc	r27, r26
    105c:	62 0b       	sbc	r22, r18
    105e:	73 0b       	sbc	r23, r19
    1060:	84 0b       	sbc	r24, r20
    1062:	ba f0       	brmi	.+46     	; 0x1092 <__addsf3x+0x9c>
    1064:	91 50       	subi	r25, 0x01	; 1
    1066:	a1 f0       	breq	.+40     	; 0x1090 <__addsf3x+0x9a>
    1068:	ff 0f       	add	r31, r31
    106a:	bb 1f       	adc	r27, r27
    106c:	66 1f       	adc	r22, r22
    106e:	77 1f       	adc	r23, r23
    1070:	88 1f       	adc	r24, r24
    1072:	c2 f7       	brpl	.-16     	; 0x1064 <__addsf3x+0x6e>
    1074:	0e c0       	rjmp	.+28     	; 0x1092 <__addsf3x+0x9c>
    1076:	ba 0f       	add	r27, r26
    1078:	62 1f       	adc	r22, r18
    107a:	73 1f       	adc	r23, r19
    107c:	84 1f       	adc	r24, r20
    107e:	48 f4       	brcc	.+18     	; 0x1092 <__addsf3x+0x9c>
    1080:	87 95       	ror	r24
    1082:	77 95       	ror	r23
    1084:	67 95       	ror	r22
    1086:	b7 95       	ror	r27
    1088:	f7 95       	ror	r31
    108a:	9e 3f       	cpi	r25, 0xFE	; 254
    108c:	08 f0       	brcs	.+2      	; 0x1090 <__addsf3x+0x9a>
    108e:	b0 cf       	rjmp	.-160    	; 0xff0 <__addsf3+0x28>
    1090:	93 95       	inc	r25
    1092:	88 0f       	add	r24, r24
    1094:	08 f0       	brcs	.+2      	; 0x1098 <__addsf3x+0xa2>
    1096:	99 27       	eor	r25, r25
    1098:	ee 0f       	add	r30, r30
    109a:	97 95       	ror	r25
    109c:	87 95       	ror	r24
    109e:	08 95       	ret
    10a0:	0e 94 ca 09 	call	0x1394	; 0x1394 <__fp_pscA>
    10a4:	60 f0       	brcs	.+24     	; 0x10be <__addsf3x+0xc8>
    10a6:	80 e8       	ldi	r24, 0x80	; 128
    10a8:	91 e0       	ldi	r25, 0x01	; 1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <__addsf3x+0xb8>
    10ac:	9e ef       	ldi	r25, 0xFE	; 254
    10ae:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__fp_pscB>
    10b2:	28 f0       	brcs	.+10     	; 0x10be <__addsf3x+0xc8>
    10b4:	40 e8       	ldi	r20, 0x80	; 128
    10b6:	51 e0       	ldi	r21, 0x01	; 1
    10b8:	71 f4       	brne	.+28     	; 0x10d6 <atan2+0x10>
    10ba:	5e ef       	ldi	r21, 0xFE	; 254
    10bc:	0c c0       	rjmp	.+24     	; 0x10d6 <atan2+0x10>
    10be:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__fp_nan>
    10c2:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__fp_zero>

000010c6 <atan2>:
    10c6:	e9 2f       	mov	r30, r25
    10c8:	e0 78       	andi	r30, 0x80	; 128
    10ca:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_split3>
    10ce:	40 f3       	brcs	.-48     	; 0x10a0 <__addsf3x+0xaa>
    10d0:	09 2e       	mov	r0, r25
    10d2:	05 2a       	or	r0, r21
    10d4:	b1 f3       	breq	.-20     	; 0x10c2 <__addsf3x+0xcc>
    10d6:	26 17       	cp	r18, r22
    10d8:	37 07       	cpc	r19, r23
    10da:	48 07       	cpc	r20, r24
    10dc:	59 07       	cpc	r21, r25
    10de:	38 f0       	brcs	.+14     	; 0x10ee <atan2+0x28>
    10e0:	0e 2e       	mov	r0, r30
    10e2:	07 f8       	bld	r0, 7
    10e4:	e0 25       	eor	r30, r0
    10e6:	69 f0       	breq	.+26     	; 0x1102 <atan2+0x3c>
    10e8:	e0 25       	eor	r30, r0
    10ea:	e0 64       	ori	r30, 0x40	; 64
    10ec:	0a c0       	rjmp	.+20     	; 0x1102 <atan2+0x3c>
    10ee:	ef 63       	ori	r30, 0x3F	; 63
    10f0:	07 f8       	bld	r0, 7
    10f2:	00 94       	com	r0
    10f4:	07 fa       	bst	r0, 7
    10f6:	db 01       	movw	r26, r22
    10f8:	b9 01       	movw	r22, r18
    10fa:	9d 01       	movw	r18, r26
    10fc:	dc 01       	movw	r26, r24
    10fe:	ca 01       	movw	r24, r20
    1100:	ad 01       	movw	r20, r26
    1102:	ef 93       	push	r30
    1104:	0e 94 de 08 	call	0x11bc	; 0x11bc <__divsf3_pse>
    1108:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__fp_round>
    110c:	0e 94 93 08 	call	0x1126	; 0x1126 <atan>
    1110:	5f 91       	pop	r21
    1112:	55 23       	and	r21, r21
    1114:	39 f0       	breq	.+14     	; 0x1124 <atan2+0x5e>
    1116:	2b ed       	ldi	r18, 0xDB	; 219
    1118:	3f e0       	ldi	r19, 0x0F	; 15
    111a:	49 e4       	ldi	r20, 0x49	; 73
    111c:	50 fd       	sbrc	r21, 0
    111e:	49 ec       	ldi	r20, 0xC9	; 201
    1120:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__addsf3>
    1124:	08 95       	ret

00001126 <atan>:
    1126:	df 93       	push	r29
    1128:	dd 27       	eor	r29, r29
    112a:	b9 2f       	mov	r27, r25
    112c:	bf 77       	andi	r27, 0x7F	; 127
    112e:	40 e8       	ldi	r20, 0x80	; 128
    1130:	5f e3       	ldi	r21, 0x3F	; 63
    1132:	16 16       	cp	r1, r22
    1134:	17 06       	cpc	r1, r23
    1136:	48 07       	cpc	r20, r24
    1138:	5b 07       	cpc	r21, r27
    113a:	18 f4       	brcc	.+6      	; 0x1142 <atan+0x1c>
    113c:	d9 2f       	mov	r29, r25
    113e:	0e 94 17 0a 	call	0x142e	; 0x142e <inverse>
    1142:	9f 93       	push	r25
    1144:	8f 93       	push	r24
    1146:	7f 93       	push	r23
    1148:	6f 93       	push	r22
    114a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <square>
    114e:	e8 e6       	ldi	r30, 0x68	; 104
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	0e 94 a3 09 	call	0x1346	; 0x1346 <__fp_powser>
    1156:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__fp_round>
    115a:	2f 91       	pop	r18
    115c:	3f 91       	pop	r19
    115e:	4f 91       	pop	r20
    1160:	5f 91       	pop	r21
    1162:	0e 94 32 0a 	call	0x1464	; 0x1464 <__mulsf3x>
    1166:	dd 23       	and	r29, r29
    1168:	51 f0       	breq	.+20     	; 0x117e <atan+0x58>
    116a:	90 58       	subi	r25, 0x80	; 128
    116c:	a2 ea       	ldi	r26, 0xA2	; 162
    116e:	2a ed       	ldi	r18, 0xDA	; 218
    1170:	3f e0       	ldi	r19, 0x0F	; 15
    1172:	49 ec       	ldi	r20, 0xC9	; 201
    1174:	5f e3       	ldi	r21, 0x3F	; 63
    1176:	d0 78       	andi	r29, 0x80	; 128
    1178:	5d 27       	eor	r21, r29
    117a:	0e 94 fb 07 	call	0xff6	; 0xff6 <__addsf3x>
    117e:	df 91       	pop	r29
    1180:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__fp_round>

00001184 <__cmpsf2>:
    1184:	0e 94 76 09 	call	0x12ec	; 0x12ec <__fp_cmp>
    1188:	08 f4       	brcc	.+2      	; 0x118c <__cmpsf2+0x8>
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	08 95       	ret

0000118e <__divsf3>:
    118e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__divsf3x>
    1192:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__fp_round>
    1196:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__fp_pscB>
    119a:	58 f0       	brcs	.+22     	; 0x11b2 <__divsf3+0x24>
    119c:	0e 94 ca 09 	call	0x1394	; 0x1394 <__fp_pscA>
    11a0:	40 f0       	brcs	.+16     	; 0x11b2 <__divsf3+0x24>
    11a2:	29 f4       	brne	.+10     	; 0x11ae <__divsf3+0x20>
    11a4:	5f 3f       	cpi	r21, 0xFF	; 255
    11a6:	29 f0       	breq	.+10     	; 0x11b2 <__divsf3+0x24>
    11a8:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_inf>
    11ac:	51 11       	cpse	r21, r1
    11ae:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_szero>
    11b2:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__fp_nan>

000011b6 <__divsf3x>:
    11b6:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_split3>
    11ba:	68 f3       	brcs	.-38     	; 0x1196 <__divsf3+0x8>

000011bc <__divsf3_pse>:
    11bc:	99 23       	and	r25, r25
    11be:	b1 f3       	breq	.-20     	; 0x11ac <__divsf3+0x1e>
    11c0:	55 23       	and	r21, r21
    11c2:	91 f3       	breq	.-28     	; 0x11a8 <__divsf3+0x1a>
    11c4:	95 1b       	sub	r25, r21
    11c6:	55 0b       	sbc	r21, r21
    11c8:	bb 27       	eor	r27, r27
    11ca:	aa 27       	eor	r26, r26
    11cc:	62 17       	cp	r22, r18
    11ce:	73 07       	cpc	r23, r19
    11d0:	84 07       	cpc	r24, r20
    11d2:	38 f0       	brcs	.+14     	; 0x11e2 <__divsf3_pse+0x26>
    11d4:	9f 5f       	subi	r25, 0xFF	; 255
    11d6:	5f 4f       	sbci	r21, 0xFF	; 255
    11d8:	22 0f       	add	r18, r18
    11da:	33 1f       	adc	r19, r19
    11dc:	44 1f       	adc	r20, r20
    11de:	aa 1f       	adc	r26, r26
    11e0:	a9 f3       	breq	.-22     	; 0x11cc <__divsf3_pse+0x10>
    11e2:	35 d0       	rcall	.+106    	; 0x124e <__divsf3_pse+0x92>
    11e4:	0e 2e       	mov	r0, r30
    11e6:	3a f0       	brmi	.+14     	; 0x11f6 <__divsf3_pse+0x3a>
    11e8:	e0 e8       	ldi	r30, 0x80	; 128
    11ea:	32 d0       	rcall	.+100    	; 0x1250 <__divsf3_pse+0x94>
    11ec:	91 50       	subi	r25, 0x01	; 1
    11ee:	50 40       	sbci	r21, 0x00	; 0
    11f0:	e6 95       	lsr	r30
    11f2:	00 1c       	adc	r0, r0
    11f4:	ca f7       	brpl	.-14     	; 0x11e8 <__divsf3_pse+0x2c>
    11f6:	2b d0       	rcall	.+86     	; 0x124e <__divsf3_pse+0x92>
    11f8:	fe 2f       	mov	r31, r30
    11fa:	29 d0       	rcall	.+82     	; 0x124e <__divsf3_pse+0x92>
    11fc:	66 0f       	add	r22, r22
    11fe:	77 1f       	adc	r23, r23
    1200:	88 1f       	adc	r24, r24
    1202:	bb 1f       	adc	r27, r27
    1204:	26 17       	cp	r18, r22
    1206:	37 07       	cpc	r19, r23
    1208:	48 07       	cpc	r20, r24
    120a:	ab 07       	cpc	r26, r27
    120c:	b0 e8       	ldi	r27, 0x80	; 128
    120e:	09 f0       	breq	.+2      	; 0x1212 <__divsf3_pse+0x56>
    1210:	bb 0b       	sbc	r27, r27
    1212:	80 2d       	mov	r24, r0
    1214:	bf 01       	movw	r22, r30
    1216:	ff 27       	eor	r31, r31
    1218:	93 58       	subi	r25, 0x83	; 131
    121a:	5f 4f       	sbci	r21, 0xFF	; 255
    121c:	3a f0       	brmi	.+14     	; 0x122c <__divsf3_pse+0x70>
    121e:	9e 3f       	cpi	r25, 0xFE	; 254
    1220:	51 05       	cpc	r21, r1
    1222:	78 f0       	brcs	.+30     	; 0x1242 <__divsf3_pse+0x86>
    1224:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_inf>
    1228:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_szero>
    122c:	5f 3f       	cpi	r21, 0xFF	; 255
    122e:	e4 f3       	brlt	.-8      	; 0x1228 <__divsf3_pse+0x6c>
    1230:	98 3e       	cpi	r25, 0xE8	; 232
    1232:	d4 f3       	brlt	.-12     	; 0x1228 <__divsf3_pse+0x6c>
    1234:	86 95       	lsr	r24
    1236:	77 95       	ror	r23
    1238:	67 95       	ror	r22
    123a:	b7 95       	ror	r27
    123c:	f7 95       	ror	r31
    123e:	9f 5f       	subi	r25, 0xFF	; 255
    1240:	c9 f7       	brne	.-14     	; 0x1234 <__divsf3_pse+0x78>
    1242:	88 0f       	add	r24, r24
    1244:	91 1d       	adc	r25, r1
    1246:	96 95       	lsr	r25
    1248:	87 95       	ror	r24
    124a:	97 f9       	bld	r25, 7
    124c:	08 95       	ret
    124e:	e1 e0       	ldi	r30, 0x01	; 1
    1250:	66 0f       	add	r22, r22
    1252:	77 1f       	adc	r23, r23
    1254:	88 1f       	adc	r24, r24
    1256:	bb 1f       	adc	r27, r27
    1258:	62 17       	cp	r22, r18
    125a:	73 07       	cpc	r23, r19
    125c:	84 07       	cpc	r24, r20
    125e:	ba 07       	cpc	r27, r26
    1260:	20 f0       	brcs	.+8      	; 0x126a <__divsf3_pse+0xae>
    1262:	62 1b       	sub	r22, r18
    1264:	73 0b       	sbc	r23, r19
    1266:	84 0b       	sbc	r24, r20
    1268:	ba 0b       	sbc	r27, r26
    126a:	ee 1f       	adc	r30, r30
    126c:	88 f7       	brcc	.-30     	; 0x1250 <__divsf3_pse+0x94>
    126e:	e0 95       	com	r30
    1270:	08 95       	ret

00001272 <__floatunsisf>:
    1272:	e8 94       	clt
    1274:	09 c0       	rjmp	.+18     	; 0x1288 <__floatsisf+0x12>

00001276 <__floatsisf>:
    1276:	97 fb       	bst	r25, 7
    1278:	3e f4       	brtc	.+14     	; 0x1288 <__floatsisf+0x12>
    127a:	90 95       	com	r25
    127c:	80 95       	com	r24
    127e:	70 95       	com	r23
    1280:	61 95       	neg	r22
    1282:	7f 4f       	sbci	r23, 0xFF	; 255
    1284:	8f 4f       	sbci	r24, 0xFF	; 255
    1286:	9f 4f       	sbci	r25, 0xFF	; 255
    1288:	99 23       	and	r25, r25
    128a:	a9 f0       	breq	.+42     	; 0x12b6 <__floatsisf+0x40>
    128c:	f9 2f       	mov	r31, r25
    128e:	96 e9       	ldi	r25, 0x96	; 150
    1290:	bb 27       	eor	r27, r27
    1292:	93 95       	inc	r25
    1294:	f6 95       	lsr	r31
    1296:	87 95       	ror	r24
    1298:	77 95       	ror	r23
    129a:	67 95       	ror	r22
    129c:	b7 95       	ror	r27
    129e:	f1 11       	cpse	r31, r1
    12a0:	f8 cf       	rjmp	.-16     	; 0x1292 <__floatsisf+0x1c>
    12a2:	fa f4       	brpl	.+62     	; 0x12e2 <__floatsisf+0x6c>
    12a4:	bb 0f       	add	r27, r27
    12a6:	11 f4       	brne	.+4      	; 0x12ac <__floatsisf+0x36>
    12a8:	60 ff       	sbrs	r22, 0
    12aa:	1b c0       	rjmp	.+54     	; 0x12e2 <__floatsisf+0x6c>
    12ac:	6f 5f       	subi	r22, 0xFF	; 255
    12ae:	7f 4f       	sbci	r23, 0xFF	; 255
    12b0:	8f 4f       	sbci	r24, 0xFF	; 255
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	16 c0       	rjmp	.+44     	; 0x12e2 <__floatsisf+0x6c>
    12b6:	88 23       	and	r24, r24
    12b8:	11 f0       	breq	.+4      	; 0x12be <__floatsisf+0x48>
    12ba:	96 e9       	ldi	r25, 0x96	; 150
    12bc:	11 c0       	rjmp	.+34     	; 0x12e0 <__floatsisf+0x6a>
    12be:	77 23       	and	r23, r23
    12c0:	21 f0       	breq	.+8      	; 0x12ca <__floatsisf+0x54>
    12c2:	9e e8       	ldi	r25, 0x8E	; 142
    12c4:	87 2f       	mov	r24, r23
    12c6:	76 2f       	mov	r23, r22
    12c8:	05 c0       	rjmp	.+10     	; 0x12d4 <__floatsisf+0x5e>
    12ca:	66 23       	and	r22, r22
    12cc:	71 f0       	breq	.+28     	; 0x12ea <__floatsisf+0x74>
    12ce:	96 e8       	ldi	r25, 0x86	; 134
    12d0:	86 2f       	mov	r24, r22
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	2a f0       	brmi	.+10     	; 0x12e2 <__floatsisf+0x6c>
    12d8:	9a 95       	dec	r25
    12da:	66 0f       	add	r22, r22
    12dc:	77 1f       	adc	r23, r23
    12de:	88 1f       	adc	r24, r24
    12e0:	da f7       	brpl	.-10     	; 0x12d8 <__floatsisf+0x62>
    12e2:	88 0f       	add	r24, r24
    12e4:	96 95       	lsr	r25
    12e6:	87 95       	ror	r24
    12e8:	97 f9       	bld	r25, 7
    12ea:	08 95       	ret

000012ec <__fp_cmp>:
    12ec:	99 0f       	add	r25, r25
    12ee:	00 08       	sbc	r0, r0
    12f0:	55 0f       	add	r21, r21
    12f2:	aa 0b       	sbc	r26, r26
    12f4:	e0 e8       	ldi	r30, 0x80	; 128
    12f6:	fe ef       	ldi	r31, 0xFE	; 254
    12f8:	16 16       	cp	r1, r22
    12fa:	17 06       	cpc	r1, r23
    12fc:	e8 07       	cpc	r30, r24
    12fe:	f9 07       	cpc	r31, r25
    1300:	c0 f0       	brcs	.+48     	; 0x1332 <__fp_cmp+0x46>
    1302:	12 16       	cp	r1, r18
    1304:	13 06       	cpc	r1, r19
    1306:	e4 07       	cpc	r30, r20
    1308:	f5 07       	cpc	r31, r21
    130a:	98 f0       	brcs	.+38     	; 0x1332 <__fp_cmp+0x46>
    130c:	62 1b       	sub	r22, r18
    130e:	73 0b       	sbc	r23, r19
    1310:	84 0b       	sbc	r24, r20
    1312:	95 0b       	sbc	r25, r21
    1314:	39 f4       	brne	.+14     	; 0x1324 <__fp_cmp+0x38>
    1316:	0a 26       	eor	r0, r26
    1318:	61 f0       	breq	.+24     	; 0x1332 <__fp_cmp+0x46>
    131a:	23 2b       	or	r18, r19
    131c:	24 2b       	or	r18, r20
    131e:	25 2b       	or	r18, r21
    1320:	21 f4       	brne	.+8      	; 0x132a <__fp_cmp+0x3e>
    1322:	08 95       	ret
    1324:	0a 26       	eor	r0, r26
    1326:	09 f4       	brne	.+2      	; 0x132a <__fp_cmp+0x3e>
    1328:	a1 40       	sbci	r26, 0x01	; 1
    132a:	a6 95       	lsr	r26
    132c:	8f ef       	ldi	r24, 0xFF	; 255
    132e:	81 1d       	adc	r24, r1
    1330:	81 1d       	adc	r24, r1
    1332:	08 95       	ret

00001334 <__fp_inf>:
    1334:	97 f9       	bld	r25, 7
    1336:	9f 67       	ori	r25, 0x7F	; 127
    1338:	80 e8       	ldi	r24, 0x80	; 128
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	08 95       	ret

00001340 <__fp_nan>:
    1340:	9f ef       	ldi	r25, 0xFF	; 255
    1342:	80 ec       	ldi	r24, 0xC0	; 192
    1344:	08 95       	ret

00001346 <__fp_powser>:
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	1f 93       	push	r17
    134c:	0f 93       	push	r16
    134e:	ff 92       	push	r15
    1350:	ef 92       	push	r14
    1352:	df 92       	push	r13
    1354:	7b 01       	movw	r14, r22
    1356:	8c 01       	movw	r16, r24
    1358:	68 94       	set
    135a:	06 c0       	rjmp	.+12     	; 0x1368 <__fp_powser+0x22>
    135c:	da 2e       	mov	r13, r26
    135e:	ef 01       	movw	r28, r30
    1360:	0e 94 32 0a 	call	0x1464	; 0x1464 <__mulsf3x>
    1364:	fe 01       	movw	r30, r28
    1366:	e8 94       	clt
    1368:	a5 91       	lpm	r26, Z+
    136a:	25 91       	lpm	r18, Z+
    136c:	35 91       	lpm	r19, Z+
    136e:	45 91       	lpm	r20, Z+
    1370:	55 91       	lpm	r21, Z+
    1372:	a6 f3       	brts	.-24     	; 0x135c <__fp_powser+0x16>
    1374:	ef 01       	movw	r28, r30
    1376:	0e 94 fb 07 	call	0xff6	; 0xff6 <__addsf3x>
    137a:	fe 01       	movw	r30, r28
    137c:	97 01       	movw	r18, r14
    137e:	a8 01       	movw	r20, r16
    1380:	da 94       	dec	r13
    1382:	69 f7       	brne	.-38     	; 0x135e <__fp_powser+0x18>
    1384:	df 90       	pop	r13
    1386:	ef 90       	pop	r14
    1388:	ff 90       	pop	r15
    138a:	0f 91       	pop	r16
    138c:	1f 91       	pop	r17
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <__fp_pscA>:
    1394:	00 24       	eor	r0, r0
    1396:	0a 94       	dec	r0
    1398:	16 16       	cp	r1, r22
    139a:	17 06       	cpc	r1, r23
    139c:	18 06       	cpc	r1, r24
    139e:	09 06       	cpc	r0, r25
    13a0:	08 95       	ret

000013a2 <__fp_pscB>:
    13a2:	00 24       	eor	r0, r0
    13a4:	0a 94       	dec	r0
    13a6:	12 16       	cp	r1, r18
    13a8:	13 06       	cpc	r1, r19
    13aa:	14 06       	cpc	r1, r20
    13ac:	05 06       	cpc	r0, r21
    13ae:	08 95       	ret

000013b0 <__fp_round>:
    13b0:	09 2e       	mov	r0, r25
    13b2:	03 94       	inc	r0
    13b4:	00 0c       	add	r0, r0
    13b6:	11 f4       	brne	.+4      	; 0x13bc <__fp_round+0xc>
    13b8:	88 23       	and	r24, r24
    13ba:	52 f0       	brmi	.+20     	; 0x13d0 <__fp_round+0x20>
    13bc:	bb 0f       	add	r27, r27
    13be:	40 f4       	brcc	.+16     	; 0x13d0 <__fp_round+0x20>
    13c0:	bf 2b       	or	r27, r31
    13c2:	11 f4       	brne	.+4      	; 0x13c8 <__fp_round+0x18>
    13c4:	60 ff       	sbrs	r22, 0
    13c6:	04 c0       	rjmp	.+8      	; 0x13d0 <__fp_round+0x20>
    13c8:	6f 5f       	subi	r22, 0xFF	; 255
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	8f 4f       	sbci	r24, 0xFF	; 255
    13ce:	9f 4f       	sbci	r25, 0xFF	; 255
    13d0:	08 95       	ret

000013d2 <__fp_split3>:
    13d2:	57 fd       	sbrc	r21, 7
    13d4:	90 58       	subi	r25, 0x80	; 128
    13d6:	44 0f       	add	r20, r20
    13d8:	55 1f       	adc	r21, r21
    13da:	59 f0       	breq	.+22     	; 0x13f2 <__fp_splitA+0x10>
    13dc:	5f 3f       	cpi	r21, 0xFF	; 255
    13de:	71 f0       	breq	.+28     	; 0x13fc <__fp_splitA+0x1a>
    13e0:	47 95       	ror	r20

000013e2 <__fp_splitA>:
    13e2:	88 0f       	add	r24, r24
    13e4:	97 fb       	bst	r25, 7
    13e6:	99 1f       	adc	r25, r25
    13e8:	61 f0       	breq	.+24     	; 0x1402 <__fp_splitA+0x20>
    13ea:	9f 3f       	cpi	r25, 0xFF	; 255
    13ec:	79 f0       	breq	.+30     	; 0x140c <__fp_splitA+0x2a>
    13ee:	87 95       	ror	r24
    13f0:	08 95       	ret
    13f2:	12 16       	cp	r1, r18
    13f4:	13 06       	cpc	r1, r19
    13f6:	14 06       	cpc	r1, r20
    13f8:	55 1f       	adc	r21, r21
    13fa:	f2 cf       	rjmp	.-28     	; 0x13e0 <__fp_split3+0xe>
    13fc:	46 95       	lsr	r20
    13fe:	f1 df       	rcall	.-30     	; 0x13e2 <__fp_splitA>
    1400:	08 c0       	rjmp	.+16     	; 0x1412 <__fp_splitA+0x30>
    1402:	16 16       	cp	r1, r22
    1404:	17 06       	cpc	r1, r23
    1406:	18 06       	cpc	r1, r24
    1408:	99 1f       	adc	r25, r25
    140a:	f1 cf       	rjmp	.-30     	; 0x13ee <__fp_splitA+0xc>
    140c:	86 95       	lsr	r24
    140e:	71 05       	cpc	r23, r1
    1410:	61 05       	cpc	r22, r1
    1412:	08 94       	sec
    1414:	08 95       	ret

00001416 <__fp_zero>:
    1416:	e8 94       	clt

00001418 <__fp_szero>:
    1418:	bb 27       	eor	r27, r27
    141a:	66 27       	eor	r22, r22
    141c:	77 27       	eor	r23, r23
    141e:	cb 01       	movw	r24, r22
    1420:	97 f9       	bld	r25, 7
    1422:	08 95       	ret

00001424 <__gesf2>:
    1424:	0e 94 76 09 	call	0x12ec	; 0x12ec <__fp_cmp>
    1428:	08 f4       	brcc	.+2      	; 0x142c <__gesf2+0x8>
    142a:	8f ef       	ldi	r24, 0xFF	; 255
    142c:	08 95       	ret

0000142e <inverse>:
    142e:	9b 01       	movw	r18, r22
    1430:	ac 01       	movw	r20, r24
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	80 e8       	ldi	r24, 0x80	; 128
    1438:	9f e3       	ldi	r25, 0x3F	; 63
    143a:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__divsf3>

0000143e <__mulsf3>:
    143e:	0e 94 32 0a 	call	0x1464	; 0x1464 <__mulsf3x>
    1442:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__fp_round>
    1446:	0e 94 ca 09 	call	0x1394	; 0x1394 <__fp_pscA>
    144a:	38 f0       	brcs	.+14     	; 0x145a <__mulsf3+0x1c>
    144c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__fp_pscB>
    1450:	20 f0       	brcs	.+8      	; 0x145a <__mulsf3+0x1c>
    1452:	95 23       	and	r25, r21
    1454:	11 f0       	breq	.+4      	; 0x145a <__mulsf3+0x1c>
    1456:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_inf>
    145a:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__fp_nan>
    145e:	11 24       	eor	r1, r1
    1460:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_szero>

00001464 <__mulsf3x>:
    1464:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_split3>
    1468:	70 f3       	brcs	.-36     	; 0x1446 <__mulsf3+0x8>

0000146a <__mulsf3_pse>:
    146a:	95 9f       	mul	r25, r21
    146c:	c1 f3       	breq	.-16     	; 0x145e <__mulsf3+0x20>
    146e:	95 0f       	add	r25, r21
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	55 1f       	adc	r21, r21
    1474:	62 9f       	mul	r22, r18
    1476:	f0 01       	movw	r30, r0
    1478:	72 9f       	mul	r23, r18
    147a:	bb 27       	eor	r27, r27
    147c:	f0 0d       	add	r31, r0
    147e:	b1 1d       	adc	r27, r1
    1480:	63 9f       	mul	r22, r19
    1482:	aa 27       	eor	r26, r26
    1484:	f0 0d       	add	r31, r0
    1486:	b1 1d       	adc	r27, r1
    1488:	aa 1f       	adc	r26, r26
    148a:	64 9f       	mul	r22, r20
    148c:	66 27       	eor	r22, r22
    148e:	b0 0d       	add	r27, r0
    1490:	a1 1d       	adc	r26, r1
    1492:	66 1f       	adc	r22, r22
    1494:	82 9f       	mul	r24, r18
    1496:	22 27       	eor	r18, r18
    1498:	b0 0d       	add	r27, r0
    149a:	a1 1d       	adc	r26, r1
    149c:	62 1f       	adc	r22, r18
    149e:	73 9f       	mul	r23, r19
    14a0:	b0 0d       	add	r27, r0
    14a2:	a1 1d       	adc	r26, r1
    14a4:	62 1f       	adc	r22, r18
    14a6:	83 9f       	mul	r24, r19
    14a8:	a0 0d       	add	r26, r0
    14aa:	61 1d       	adc	r22, r1
    14ac:	22 1f       	adc	r18, r18
    14ae:	74 9f       	mul	r23, r20
    14b0:	33 27       	eor	r19, r19
    14b2:	a0 0d       	add	r26, r0
    14b4:	61 1d       	adc	r22, r1
    14b6:	23 1f       	adc	r18, r19
    14b8:	84 9f       	mul	r24, r20
    14ba:	60 0d       	add	r22, r0
    14bc:	21 1d       	adc	r18, r1
    14be:	82 2f       	mov	r24, r18
    14c0:	76 2f       	mov	r23, r22
    14c2:	6a 2f       	mov	r22, r26
    14c4:	11 24       	eor	r1, r1
    14c6:	9f 57       	subi	r25, 0x7F	; 127
    14c8:	50 40       	sbci	r21, 0x00	; 0
    14ca:	9a f0       	brmi	.+38     	; 0x14f2 <__mulsf3_pse+0x88>
    14cc:	f1 f0       	breq	.+60     	; 0x150a <__mulsf3_pse+0xa0>
    14ce:	88 23       	and	r24, r24
    14d0:	4a f0       	brmi	.+18     	; 0x14e4 <__mulsf3_pse+0x7a>
    14d2:	ee 0f       	add	r30, r30
    14d4:	ff 1f       	adc	r31, r31
    14d6:	bb 1f       	adc	r27, r27
    14d8:	66 1f       	adc	r22, r22
    14da:	77 1f       	adc	r23, r23
    14dc:	88 1f       	adc	r24, r24
    14de:	91 50       	subi	r25, 0x01	; 1
    14e0:	50 40       	sbci	r21, 0x00	; 0
    14e2:	a9 f7       	brne	.-22     	; 0x14ce <__mulsf3_pse+0x64>
    14e4:	9e 3f       	cpi	r25, 0xFE	; 254
    14e6:	51 05       	cpc	r21, r1
    14e8:	80 f0       	brcs	.+32     	; 0x150a <__mulsf3_pse+0xa0>
    14ea:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_inf>
    14ee:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_szero>
    14f2:	5f 3f       	cpi	r21, 0xFF	; 255
    14f4:	e4 f3       	brlt	.-8      	; 0x14ee <__mulsf3_pse+0x84>
    14f6:	98 3e       	cpi	r25, 0xE8	; 232
    14f8:	d4 f3       	brlt	.-12     	; 0x14ee <__mulsf3_pse+0x84>
    14fa:	86 95       	lsr	r24
    14fc:	77 95       	ror	r23
    14fe:	67 95       	ror	r22
    1500:	b7 95       	ror	r27
    1502:	f7 95       	ror	r31
    1504:	e7 95       	ror	r30
    1506:	9f 5f       	subi	r25, 0xFF	; 255
    1508:	c1 f7       	brne	.-16     	; 0x14fa <__mulsf3_pse+0x90>
    150a:	fe 2b       	or	r31, r30
    150c:	88 0f       	add	r24, r24
    150e:	91 1d       	adc	r25, r1
    1510:	96 95       	lsr	r25
    1512:	87 95       	ror	r24
    1514:	97 f9       	bld	r25, 7
    1516:	08 95       	ret
    1518:	19 f4       	brne	.+6      	; 0x1520 <__mulsf3_pse+0xb6>
    151a:	16 f4       	brtc	.+4      	; 0x1520 <__mulsf3_pse+0xb6>
    151c:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__fp_nan>
    1520:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__fp_mpack>

00001524 <sqrt>:
    1524:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_splitA>
    1528:	b8 f3       	brcs	.-18     	; 0x1518 <__mulsf3_pse+0xae>
    152a:	99 23       	and	r25, r25
    152c:	c9 f3       	breq	.-14     	; 0x1520 <__mulsf3_pse+0xb6>
    152e:	b6 f3       	brts	.-20     	; 0x151c <__mulsf3_pse+0xb2>
    1530:	9f 57       	subi	r25, 0x7F	; 127
    1532:	55 0b       	sbc	r21, r21
    1534:	87 ff       	sbrs	r24, 7
    1536:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__fp_norm2>
    153a:	00 24       	eor	r0, r0
    153c:	a0 e6       	ldi	r26, 0x60	; 96
    153e:	40 ea       	ldi	r20, 0xA0	; 160
    1540:	90 01       	movw	r18, r0
    1542:	80 58       	subi	r24, 0x80	; 128
    1544:	56 95       	lsr	r21
    1546:	97 95       	ror	r25
    1548:	28 f4       	brcc	.+10     	; 0x1554 <sqrt+0x30>
    154a:	80 5c       	subi	r24, 0xC0	; 192
    154c:	66 0f       	add	r22, r22
    154e:	77 1f       	adc	r23, r23
    1550:	88 1f       	adc	r24, r24
    1552:	20 f0       	brcs	.+8      	; 0x155c <sqrt+0x38>
    1554:	26 17       	cp	r18, r22
    1556:	37 07       	cpc	r19, r23
    1558:	48 07       	cpc	r20, r24
    155a:	30 f4       	brcc	.+12     	; 0x1568 <sqrt+0x44>
    155c:	62 1b       	sub	r22, r18
    155e:	73 0b       	sbc	r23, r19
    1560:	84 0b       	sbc	r24, r20
    1562:	20 29       	or	r18, r0
    1564:	31 29       	or	r19, r1
    1566:	4a 2b       	or	r20, r26
    1568:	a6 95       	lsr	r26
    156a:	17 94       	ror	r1
    156c:	07 94       	ror	r0
    156e:	20 25       	eor	r18, r0
    1570:	31 25       	eor	r19, r1
    1572:	4a 27       	eor	r20, r26
    1574:	58 f7       	brcc	.-42     	; 0x154c <sqrt+0x28>
    1576:	66 0f       	add	r22, r22
    1578:	77 1f       	adc	r23, r23
    157a:	88 1f       	adc	r24, r24
    157c:	20 f0       	brcs	.+8      	; 0x1586 <sqrt+0x62>
    157e:	26 17       	cp	r18, r22
    1580:	37 07       	cpc	r19, r23
    1582:	48 07       	cpc	r20, r24
    1584:	30 f4       	brcc	.+12     	; 0x1592 <sqrt+0x6e>
    1586:	62 0b       	sbc	r22, r18
    1588:	73 0b       	sbc	r23, r19
    158a:	84 0b       	sbc	r24, r20
    158c:	20 0d       	add	r18, r0
    158e:	31 1d       	adc	r19, r1
    1590:	41 1d       	adc	r20, r1
    1592:	a0 95       	com	r26
    1594:	81 f7       	brne	.-32     	; 0x1576 <sqrt+0x52>
    1596:	b9 01       	movw	r22, r18
    1598:	84 2f       	mov	r24, r20
    159a:	91 58       	subi	r25, 0x81	; 129
    159c:	88 0f       	add	r24, r24
    159e:	96 95       	lsr	r25
    15a0:	87 95       	ror	r24
    15a2:	08 95       	ret

000015a4 <square>:
    15a4:	9b 01       	movw	r18, r22
    15a6:	ac 01       	movw	r20, r24
    15a8:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__mulsf3>

000015ac <__fp_mpack>:
    15ac:	9f 3f       	cpi	r25, 0xFF	; 255
    15ae:	31 f0       	breq	.+12     	; 0x15bc <__fp_mpack_finite+0xc>

000015b0 <__fp_mpack_finite>:
    15b0:	91 50       	subi	r25, 0x01	; 1
    15b2:	20 f4       	brcc	.+8      	; 0x15bc <__fp_mpack_finite+0xc>
    15b4:	87 95       	ror	r24
    15b6:	77 95       	ror	r23
    15b8:	67 95       	ror	r22
    15ba:	b7 95       	ror	r27
    15bc:	88 0f       	add	r24, r24
    15be:	91 1d       	adc	r25, r1
    15c0:	96 95       	lsr	r25
    15c2:	87 95       	ror	r24
    15c4:	97 f9       	bld	r25, 7
    15c6:	08 95       	ret

000015c8 <__fp_norm2>:
    15c8:	91 50       	subi	r25, 0x01	; 1
    15ca:	50 40       	sbci	r21, 0x00	; 0
    15cc:	66 0f       	add	r22, r22
    15ce:	77 1f       	adc	r23, r23
    15d0:	88 1f       	adc	r24, r24
    15d2:	d2 f7       	brpl	.-12     	; 0x15c8 <__fp_norm2>
    15d4:	08 95       	ret

000015d6 <dtostrf>:
    15d6:	ef 92       	push	r14
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	e8 01       	movw	r28, r16
    15e2:	47 fd       	sbrc	r20, 7
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <dtostrf+0x14>
    15e6:	34 e0       	ldi	r19, 0x04	; 4
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <dtostrf+0x16>
    15ea:	34 e1       	ldi	r19, 0x14	; 20
    15ec:	04 2e       	mov	r0, r20
    15ee:	00 0c       	add	r0, r0
    15f0:	55 0b       	sbc	r21, r21
    15f2:	57 ff       	sbrs	r21, 7
    15f4:	03 c0       	rjmp	.+6      	; 0x15fc <dtostrf+0x26>
    15f6:	51 95       	neg	r21
    15f8:	41 95       	neg	r20
    15fa:	51 09       	sbc	r21, r1
    15fc:	e3 2e       	mov	r14, r19
    15fe:	02 2f       	mov	r16, r18
    1600:	24 2f       	mov	r18, r20
    1602:	ae 01       	movw	r20, r28
    1604:	0e 94 0b 0b 	call	0x1616	; 0x1616 <dtoa_prf>
    1608:	ce 01       	movw	r24, r28
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	ef 90       	pop	r14
    1614:	08 95       	ret

00001616 <dtoa_prf>:
    1616:	a9 e0       	ldi	r26, 0x09	; 9
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e1 e1       	ldi	r30, 0x11	; 17
    161c:	fb e0       	ldi	r31, 0x0B	; 11
    161e:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__prologue_saves__+0xc>
    1622:	6a 01       	movw	r12, r20
    1624:	12 2f       	mov	r17, r18
    1626:	b0 2e       	mov	r11, r16
    1628:	2b e3       	ldi	r18, 0x3B	; 59
    162a:	20 17       	cp	r18, r16
    162c:	20 f0       	brcs	.+8      	; 0x1636 <dtoa_prf+0x20>
    162e:	ff 24       	eor	r15, r15
    1630:	f3 94       	inc	r15
    1632:	f0 0e       	add	r15, r16
    1634:	02 c0       	rjmp	.+4      	; 0x163a <dtoa_prf+0x24>
    1636:	2c e3       	ldi	r18, 0x3C	; 60
    1638:	f2 2e       	mov	r15, r18
    163a:	0f 2d       	mov	r16, r15
    163c:	27 e0       	ldi	r18, 0x07	; 7
    163e:	ae 01       	movw	r20, r28
    1640:	4f 5f       	subi	r20, 0xFF	; 255
    1642:	5f 4f       	sbci	r21, 0xFF	; 255
    1644:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__ftoa_engine>
    1648:	bc 01       	movw	r22, r24
    164a:	49 81       	ldd	r20, Y+1	; 0x01
    164c:	84 2f       	mov	r24, r20
    164e:	89 70       	andi	r24, 0x09	; 9
    1650:	81 30       	cpi	r24, 0x01	; 1
    1652:	31 f0       	breq	.+12     	; 0x1660 <dtoa_prf+0x4a>
    1654:	e1 fc       	sbrc	r14, 1
    1656:	06 c0       	rjmp	.+12     	; 0x1664 <dtoa_prf+0x4e>
    1658:	e0 fe       	sbrs	r14, 0
    165a:	06 c0       	rjmp	.+12     	; 0x1668 <dtoa_prf+0x52>
    165c:	90 e2       	ldi	r25, 0x20	; 32
    165e:	05 c0       	rjmp	.+10     	; 0x166a <dtoa_prf+0x54>
    1660:	9d e2       	ldi	r25, 0x2D	; 45
    1662:	03 c0       	rjmp	.+6      	; 0x166a <dtoa_prf+0x54>
    1664:	9b e2       	ldi	r25, 0x2B	; 43
    1666:	01 c0       	rjmp	.+2      	; 0x166a <dtoa_prf+0x54>
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	5e 2d       	mov	r21, r14
    166c:	50 71       	andi	r21, 0x10	; 16
    166e:	43 ff       	sbrs	r20, 3
    1670:	3c c0       	rjmp	.+120    	; 0x16ea <dtoa_prf+0xd4>
    1672:	91 11       	cpse	r25, r1
    1674:	02 c0       	rjmp	.+4      	; 0x167a <dtoa_prf+0x64>
    1676:	83 e0       	ldi	r24, 0x03	; 3
    1678:	01 c0       	rjmp	.+2      	; 0x167c <dtoa_prf+0x66>
    167a:	84 e0       	ldi	r24, 0x04	; 4
    167c:	81 17       	cp	r24, r17
    167e:	18 f4       	brcc	.+6      	; 0x1686 <dtoa_prf+0x70>
    1680:	21 2f       	mov	r18, r17
    1682:	28 1b       	sub	r18, r24
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <dtoa_prf+0x72>
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	51 11       	cpse	r21, r1
    168a:	0b c0       	rjmp	.+22     	; 0x16a2 <dtoa_prf+0x8c>
    168c:	f6 01       	movw	r30, r12
    168e:	82 2f       	mov	r24, r18
    1690:	30 e2       	ldi	r19, 0x20	; 32
    1692:	88 23       	and	r24, r24
    1694:	19 f0       	breq	.+6      	; 0x169c <dtoa_prf+0x86>
    1696:	31 93       	st	Z+, r19
    1698:	81 50       	subi	r24, 0x01	; 1
    169a:	fb cf       	rjmp	.-10     	; 0x1692 <dtoa_prf+0x7c>
    169c:	c2 0e       	add	r12, r18
    169e:	d1 1c       	adc	r13, r1
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	99 23       	and	r25, r25
    16a4:	29 f0       	breq	.+10     	; 0x16b0 <dtoa_prf+0x9a>
    16a6:	d6 01       	movw	r26, r12
    16a8:	9c 93       	st	X, r25
    16aa:	f6 01       	movw	r30, r12
    16ac:	31 96       	adiw	r30, 0x01	; 1
    16ae:	6f 01       	movw	r12, r30
    16b0:	c6 01       	movw	r24, r12
    16b2:	03 96       	adiw	r24, 0x03	; 3
    16b4:	e2 fe       	sbrs	r14, 2
    16b6:	0a c0       	rjmp	.+20     	; 0x16cc <dtoa_prf+0xb6>
    16b8:	3e e4       	ldi	r19, 0x4E	; 78
    16ba:	d6 01       	movw	r26, r12
    16bc:	3c 93       	st	X, r19
    16be:	41 e4       	ldi	r20, 0x41	; 65
    16c0:	11 96       	adiw	r26, 0x01	; 1
    16c2:	4c 93       	st	X, r20
    16c4:	11 97       	sbiw	r26, 0x01	; 1
    16c6:	12 96       	adiw	r26, 0x02	; 2
    16c8:	3c 93       	st	X, r19
    16ca:	06 c0       	rjmp	.+12     	; 0x16d8 <dtoa_prf+0xc2>
    16cc:	3e e6       	ldi	r19, 0x6E	; 110
    16ce:	f6 01       	movw	r30, r12
    16d0:	30 83       	st	Z, r19
    16d2:	41 e6       	ldi	r20, 0x61	; 97
    16d4:	41 83       	std	Z+1, r20	; 0x01
    16d6:	32 83       	std	Z+2, r19	; 0x02
    16d8:	fc 01       	movw	r30, r24
    16da:	32 2f       	mov	r19, r18
    16dc:	40 e2       	ldi	r20, 0x20	; 32
    16de:	33 23       	and	r19, r19
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <dtoa_prf+0xce>
    16e2:	42 c0       	rjmp	.+132    	; 0x1768 <dtoa_prf+0x152>
    16e4:	41 93       	st	Z+, r20
    16e6:	31 50       	subi	r19, 0x01	; 1
    16e8:	fa cf       	rjmp	.-12     	; 0x16de <dtoa_prf+0xc8>
    16ea:	42 ff       	sbrs	r20, 2
    16ec:	44 c0       	rjmp	.+136    	; 0x1776 <dtoa_prf+0x160>
    16ee:	91 11       	cpse	r25, r1
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <dtoa_prf+0xe0>
    16f2:	83 e0       	ldi	r24, 0x03	; 3
    16f4:	01 c0       	rjmp	.+2      	; 0x16f8 <dtoa_prf+0xe2>
    16f6:	84 e0       	ldi	r24, 0x04	; 4
    16f8:	81 17       	cp	r24, r17
    16fa:	18 f4       	brcc	.+6      	; 0x1702 <dtoa_prf+0xec>
    16fc:	21 2f       	mov	r18, r17
    16fe:	28 1b       	sub	r18, r24
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <dtoa_prf+0xee>
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	51 11       	cpse	r21, r1
    1706:	0b c0       	rjmp	.+22     	; 0x171e <dtoa_prf+0x108>
    1708:	f6 01       	movw	r30, r12
    170a:	82 2f       	mov	r24, r18
    170c:	30 e2       	ldi	r19, 0x20	; 32
    170e:	88 23       	and	r24, r24
    1710:	19 f0       	breq	.+6      	; 0x1718 <dtoa_prf+0x102>
    1712:	31 93       	st	Z+, r19
    1714:	81 50       	subi	r24, 0x01	; 1
    1716:	fb cf       	rjmp	.-10     	; 0x170e <dtoa_prf+0xf8>
    1718:	c2 0e       	add	r12, r18
    171a:	d1 1c       	adc	r13, r1
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	99 23       	and	r25, r25
    1720:	29 f0       	breq	.+10     	; 0x172c <dtoa_prf+0x116>
    1722:	d6 01       	movw	r26, r12
    1724:	9c 93       	st	X, r25
    1726:	f6 01       	movw	r30, r12
    1728:	31 96       	adiw	r30, 0x01	; 1
    172a:	6f 01       	movw	r12, r30
    172c:	c6 01       	movw	r24, r12
    172e:	03 96       	adiw	r24, 0x03	; 3
    1730:	e2 fe       	sbrs	r14, 2
    1732:	0b c0       	rjmp	.+22     	; 0x174a <dtoa_prf+0x134>
    1734:	39 e4       	ldi	r19, 0x49	; 73
    1736:	d6 01       	movw	r26, r12
    1738:	3c 93       	st	X, r19
    173a:	3e e4       	ldi	r19, 0x4E	; 78
    173c:	11 96       	adiw	r26, 0x01	; 1
    173e:	3c 93       	st	X, r19
    1740:	11 97       	sbiw	r26, 0x01	; 1
    1742:	36 e4       	ldi	r19, 0x46	; 70
    1744:	12 96       	adiw	r26, 0x02	; 2
    1746:	3c 93       	st	X, r19
    1748:	07 c0       	rjmp	.+14     	; 0x1758 <dtoa_prf+0x142>
    174a:	39 e6       	ldi	r19, 0x69	; 105
    174c:	f6 01       	movw	r30, r12
    174e:	30 83       	st	Z, r19
    1750:	3e e6       	ldi	r19, 0x6E	; 110
    1752:	31 83       	std	Z+1, r19	; 0x01
    1754:	36 e6       	ldi	r19, 0x66	; 102
    1756:	32 83       	std	Z+2, r19	; 0x02
    1758:	fc 01       	movw	r30, r24
    175a:	32 2f       	mov	r19, r18
    175c:	40 e2       	ldi	r20, 0x20	; 32
    175e:	33 23       	and	r19, r19
    1760:	19 f0       	breq	.+6      	; 0x1768 <dtoa_prf+0x152>
    1762:	41 93       	st	Z+, r20
    1764:	31 50       	subi	r19, 0x01	; 1
    1766:	fb cf       	rjmp	.-10     	; 0x175e <dtoa_prf+0x148>
    1768:	fc 01       	movw	r30, r24
    176a:	e2 0f       	add	r30, r18
    176c:	f1 1d       	adc	r31, r1
    176e:	10 82       	st	Z, r1
    1770:	8e ef       	ldi	r24, 0xFE	; 254
    1772:	9f ef       	ldi	r25, 0xFF	; 255
    1774:	a6 c0       	rjmp	.+332    	; 0x18c2 <dtoa_prf+0x2ac>
    1776:	21 e0       	ldi	r18, 0x01	; 1
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	91 11       	cpse	r25, r1
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <dtoa_prf+0x16c>
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	16 16       	cp	r1, r22
    1784:	17 06       	cpc	r1, r23
    1786:	1c f4       	brge	.+6      	; 0x178e <dtoa_prf+0x178>
    1788:	fb 01       	movw	r30, r22
    178a:	31 96       	adiw	r30, 0x01	; 1
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <dtoa_prf+0x17c>
    178e:	e1 e0       	ldi	r30, 0x01	; 1
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	2e 0f       	add	r18, r30
    1794:	3f 1f       	adc	r19, r31
    1796:	bb 20       	and	r11, r11
    1798:	21 f0       	breq	.+8      	; 0x17a2 <dtoa_prf+0x18c>
    179a:	eb 2d       	mov	r30, r11
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	31 96       	adiw	r30, 0x01	; 1
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <dtoa_prf+0x190>
    17a2:	e0 e0       	ldi	r30, 0x00	; 0
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	2e 0f       	add	r18, r30
    17a8:	3f 1f       	adc	r19, r31
    17aa:	e1 2f       	mov	r30, r17
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	2e 17       	cp	r18, r30
    17b0:	3f 07       	cpc	r19, r31
    17b2:	1c f4       	brge	.+6      	; 0x17ba <dtoa_prf+0x1a4>
    17b4:	12 1b       	sub	r17, r18
    17b6:	21 2f       	mov	r18, r17
    17b8:	01 c0       	rjmp	.+2      	; 0x17bc <dtoa_prf+0x1a6>
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	8e 2d       	mov	r24, r14
    17be:	88 71       	andi	r24, 0x18	; 24
    17c0:	59 f4       	brne	.+22     	; 0x17d8 <dtoa_prf+0x1c2>
    17c2:	f6 01       	movw	r30, r12
    17c4:	82 2f       	mov	r24, r18
    17c6:	30 e2       	ldi	r19, 0x20	; 32
    17c8:	88 23       	and	r24, r24
    17ca:	19 f0       	breq	.+6      	; 0x17d2 <dtoa_prf+0x1bc>
    17cc:	31 93       	st	Z+, r19
    17ce:	81 50       	subi	r24, 0x01	; 1
    17d0:	fb cf       	rjmp	.-10     	; 0x17c8 <dtoa_prf+0x1b2>
    17d2:	c2 0e       	add	r12, r18
    17d4:	d1 1c       	adc	r13, r1
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	99 23       	and	r25, r25
    17da:	29 f0       	breq	.+10     	; 0x17e6 <dtoa_prf+0x1d0>
    17dc:	d6 01       	movw	r26, r12
    17de:	9c 93       	st	X, r25
    17e0:	f6 01       	movw	r30, r12
    17e2:	31 96       	adiw	r30, 0x01	; 1
    17e4:	6f 01       	movw	r12, r30
    17e6:	51 11       	cpse	r21, r1
    17e8:	0b c0       	rjmp	.+22     	; 0x1800 <dtoa_prf+0x1ea>
    17ea:	f6 01       	movw	r30, r12
    17ec:	82 2f       	mov	r24, r18
    17ee:	90 e3       	ldi	r25, 0x30	; 48
    17f0:	88 23       	and	r24, r24
    17f2:	19 f0       	breq	.+6      	; 0x17fa <dtoa_prf+0x1e4>
    17f4:	91 93       	st	Z+, r25
    17f6:	81 50       	subi	r24, 0x01	; 1
    17f8:	fb cf       	rjmp	.-10     	; 0x17f0 <dtoa_prf+0x1da>
    17fa:	c2 0e       	add	r12, r18
    17fc:	d1 1c       	adc	r13, r1
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	0f 2d       	mov	r16, r15
    1802:	06 0f       	add	r16, r22
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	34 2f       	mov	r19, r20
    1808:	30 71       	andi	r19, 0x10	; 16
    180a:	44 ff       	sbrs	r20, 4
    180c:	03 c0       	rjmp	.+6      	; 0x1814 <dtoa_prf+0x1fe>
    180e:	91 33       	cpi	r25, 0x31	; 49
    1810:	09 f4       	brne	.+2      	; 0x1814 <dtoa_prf+0x1fe>
    1812:	01 50       	subi	r16, 0x01	; 1
    1814:	10 16       	cp	r1, r16
    1816:	24 f4       	brge	.+8      	; 0x1820 <dtoa_prf+0x20a>
    1818:	09 30       	cpi	r16, 0x09	; 9
    181a:	18 f0       	brcs	.+6      	; 0x1822 <dtoa_prf+0x20c>
    181c:	08 e0       	ldi	r16, 0x08	; 8
    181e:	01 c0       	rjmp	.+2      	; 0x1822 <dtoa_prf+0x20c>
    1820:	01 e0       	ldi	r16, 0x01	; 1
    1822:	ab 01       	movw	r20, r22
    1824:	77 ff       	sbrs	r23, 7
    1826:	02 c0       	rjmp	.+4      	; 0x182c <dtoa_prf+0x216>
    1828:	40 e0       	ldi	r20, 0x00	; 0
    182a:	50 e0       	ldi	r21, 0x00	; 0
    182c:	fb 01       	movw	r30, r22
    182e:	e4 1b       	sub	r30, r20
    1830:	f5 0b       	sbc	r31, r21
    1832:	a1 e0       	ldi	r26, 0x01	; 1
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ac 0f       	add	r26, r28
    1838:	bd 1f       	adc	r27, r29
    183a:	ea 0f       	add	r30, r26
    183c:	fb 1f       	adc	r31, r27
    183e:	8e e2       	ldi	r24, 0x2E	; 46
    1840:	a8 2e       	mov	r10, r24
    1842:	4b 01       	movw	r8, r22
    1844:	80 1a       	sub	r8, r16
    1846:	91 08       	sbc	r9, r1
    1848:	0b 2d       	mov	r16, r11
    184a:	10 e0       	ldi	r17, 0x00	; 0
    184c:	11 95       	neg	r17
    184e:	01 95       	neg	r16
    1850:	11 09       	sbc	r17, r1
    1852:	4f 3f       	cpi	r20, 0xFF	; 255
    1854:	bf ef       	ldi	r27, 0xFF	; 255
    1856:	5b 07       	cpc	r21, r27
    1858:	21 f4       	brne	.+8      	; 0x1862 <dtoa_prf+0x24c>
    185a:	d6 01       	movw	r26, r12
    185c:	ac 92       	st	X, r10
    185e:	11 96       	adiw	r26, 0x01	; 1
    1860:	6d 01       	movw	r12, r26
    1862:	64 17       	cp	r22, r20
    1864:	75 07       	cpc	r23, r21
    1866:	2c f0       	brlt	.+10     	; 0x1872 <dtoa_prf+0x25c>
    1868:	84 16       	cp	r8, r20
    186a:	95 06       	cpc	r9, r21
    186c:	14 f4       	brge	.+4      	; 0x1872 <dtoa_prf+0x25c>
    186e:	81 81       	ldd	r24, Z+1	; 0x01
    1870:	01 c0       	rjmp	.+2      	; 0x1874 <dtoa_prf+0x25e>
    1872:	80 e3       	ldi	r24, 0x30	; 48
    1874:	41 50       	subi	r20, 0x01	; 1
    1876:	51 09       	sbc	r21, r1
    1878:	31 96       	adiw	r30, 0x01	; 1
    187a:	d6 01       	movw	r26, r12
    187c:	11 96       	adiw	r26, 0x01	; 1
    187e:	7d 01       	movw	r14, r26
    1880:	40 17       	cp	r20, r16
    1882:	51 07       	cpc	r21, r17
    1884:	24 f0       	brlt	.+8      	; 0x188e <dtoa_prf+0x278>
    1886:	d6 01       	movw	r26, r12
    1888:	8c 93       	st	X, r24
    188a:	67 01       	movw	r12, r14
    188c:	e2 cf       	rjmp	.-60     	; 0x1852 <dtoa_prf+0x23c>
    188e:	64 17       	cp	r22, r20
    1890:	75 07       	cpc	r23, r21
    1892:	39 f4       	brne	.+14     	; 0x18a2 <dtoa_prf+0x28c>
    1894:	96 33       	cpi	r25, 0x36	; 54
    1896:	20 f4       	brcc	.+8      	; 0x18a0 <dtoa_prf+0x28a>
    1898:	95 33       	cpi	r25, 0x35	; 53
    189a:	19 f4       	brne	.+6      	; 0x18a2 <dtoa_prf+0x28c>
    189c:	31 11       	cpse	r19, r1
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <dtoa_prf+0x28c>
    18a0:	81 e3       	ldi	r24, 0x31	; 49
    18a2:	f6 01       	movw	r30, r12
    18a4:	80 83       	st	Z, r24
    18a6:	f7 01       	movw	r30, r14
    18a8:	82 2f       	mov	r24, r18
    18aa:	90 e2       	ldi	r25, 0x20	; 32
    18ac:	88 23       	and	r24, r24
    18ae:	19 f0       	breq	.+6      	; 0x18b6 <dtoa_prf+0x2a0>
    18b0:	91 93       	st	Z+, r25
    18b2:	81 50       	subi	r24, 0x01	; 1
    18b4:	fb cf       	rjmp	.-10     	; 0x18ac <dtoa_prf+0x296>
    18b6:	f7 01       	movw	r30, r14
    18b8:	e2 0f       	add	r30, r18
    18ba:	f1 1d       	adc	r31, r1
    18bc:	10 82       	st	Z, r1
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	29 96       	adiw	r28, 0x09	; 9
    18c4:	ec e0       	ldi	r30, 0x0C	; 12
    18c6:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__epilogue_restores__+0xc>

000018ca <__ftoa_engine>:
    18ca:	28 30       	cpi	r18, 0x08	; 8
    18cc:	08 f0       	brcs	.+2      	; 0x18d0 <__ftoa_engine+0x6>
    18ce:	27 e0       	ldi	r18, 0x07	; 7
    18d0:	33 27       	eor	r19, r19
    18d2:	da 01       	movw	r26, r20
    18d4:	99 0f       	add	r25, r25
    18d6:	31 1d       	adc	r19, r1
    18d8:	87 fd       	sbrc	r24, 7
    18da:	91 60       	ori	r25, 0x01	; 1
    18dc:	00 96       	adiw	r24, 0x00	; 0
    18de:	61 05       	cpc	r22, r1
    18e0:	71 05       	cpc	r23, r1
    18e2:	39 f4       	brne	.+14     	; 0x18f2 <__ftoa_engine+0x28>
    18e4:	32 60       	ori	r19, 0x02	; 2
    18e6:	2e 5f       	subi	r18, 0xFE	; 254
    18e8:	3d 93       	st	X+, r19
    18ea:	30 e3       	ldi	r19, 0x30	; 48
    18ec:	2a 95       	dec	r18
    18ee:	e1 f7       	brne	.-8      	; 0x18e8 <__ftoa_engine+0x1e>
    18f0:	08 95       	ret
    18f2:	9f 3f       	cpi	r25, 0xFF	; 255
    18f4:	30 f0       	brcs	.+12     	; 0x1902 <__ftoa_engine+0x38>
    18f6:	80 38       	cpi	r24, 0x80	; 128
    18f8:	71 05       	cpc	r23, r1
    18fa:	61 05       	cpc	r22, r1
    18fc:	09 f0       	breq	.+2      	; 0x1900 <__ftoa_engine+0x36>
    18fe:	3c 5f       	subi	r19, 0xFC	; 252
    1900:	3c 5f       	subi	r19, 0xFC	; 252
    1902:	3d 93       	st	X+, r19
    1904:	91 30       	cpi	r25, 0x01	; 1
    1906:	08 f0       	brcs	.+2      	; 0x190a <__ftoa_engine+0x40>
    1908:	80 68       	ori	r24, 0x80	; 128
    190a:	91 1d       	adc	r25, r1
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	1f 93       	push	r17
    1912:	0f 93       	push	r16
    1914:	ff 92       	push	r15
    1916:	ef 92       	push	r14
    1918:	19 2f       	mov	r17, r25
    191a:	98 7f       	andi	r25, 0xF8	; 248
    191c:	96 95       	lsr	r25
    191e:	e9 2f       	mov	r30, r25
    1920:	96 95       	lsr	r25
    1922:	96 95       	lsr	r25
    1924:	e9 0f       	add	r30, r25
    1926:	ff 27       	eor	r31, r31
    1928:	e0 51       	subi	r30, 0x10	; 16
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	99 27       	eor	r25, r25
    192e:	33 27       	eor	r19, r19
    1930:	ee 24       	eor	r14, r14
    1932:	ff 24       	eor	r15, r15
    1934:	a7 01       	movw	r20, r14
    1936:	e7 01       	movw	r28, r14
    1938:	05 90       	lpm	r0, Z+
    193a:	08 94       	sec
    193c:	07 94       	ror	r0
    193e:	28 f4       	brcc	.+10     	; 0x194a <__ftoa_engine+0x80>
    1940:	36 0f       	add	r19, r22
    1942:	e7 1e       	adc	r14, r23
    1944:	f8 1e       	adc	r15, r24
    1946:	49 1f       	adc	r20, r25
    1948:	51 1d       	adc	r21, r1
    194a:	66 0f       	add	r22, r22
    194c:	77 1f       	adc	r23, r23
    194e:	88 1f       	adc	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	06 94       	lsr	r0
    1954:	a1 f7       	brne	.-24     	; 0x193e <__ftoa_engine+0x74>
    1956:	05 90       	lpm	r0, Z+
    1958:	07 94       	ror	r0
    195a:	28 f4       	brcc	.+10     	; 0x1966 <__ftoa_engine+0x9c>
    195c:	e7 0e       	add	r14, r23
    195e:	f8 1e       	adc	r15, r24
    1960:	49 1f       	adc	r20, r25
    1962:	56 1f       	adc	r21, r22
    1964:	c1 1d       	adc	r28, r1
    1966:	77 0f       	add	r23, r23
    1968:	88 1f       	adc	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	66 1f       	adc	r22, r22
    196e:	06 94       	lsr	r0
    1970:	a1 f7       	brne	.-24     	; 0x195a <__ftoa_engine+0x90>
    1972:	05 90       	lpm	r0, Z+
    1974:	07 94       	ror	r0
    1976:	28 f4       	brcc	.+10     	; 0x1982 <__ftoa_engine+0xb8>
    1978:	f8 0e       	add	r15, r24
    197a:	49 1f       	adc	r20, r25
    197c:	56 1f       	adc	r21, r22
    197e:	c7 1f       	adc	r28, r23
    1980:	d1 1d       	adc	r29, r1
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	66 1f       	adc	r22, r22
    1988:	77 1f       	adc	r23, r23
    198a:	06 94       	lsr	r0
    198c:	a1 f7       	brne	.-24     	; 0x1976 <__ftoa_engine+0xac>
    198e:	05 90       	lpm	r0, Z+
    1990:	07 94       	ror	r0
    1992:	20 f4       	brcc	.+8      	; 0x199c <__ftoa_engine+0xd2>
    1994:	49 0f       	add	r20, r25
    1996:	56 1f       	adc	r21, r22
    1998:	c7 1f       	adc	r28, r23
    199a:	d8 1f       	adc	r29, r24
    199c:	99 0f       	add	r25, r25
    199e:	66 1f       	adc	r22, r22
    19a0:	77 1f       	adc	r23, r23
    19a2:	88 1f       	adc	r24, r24
    19a4:	06 94       	lsr	r0
    19a6:	a9 f7       	brne	.-22     	; 0x1992 <__ftoa_engine+0xc8>
    19a8:	84 91       	lpm	r24, Z
    19aa:	10 95       	com	r17
    19ac:	17 70       	andi	r17, 0x07	; 7
    19ae:	41 f0       	breq	.+16     	; 0x19c0 <__ftoa_engine+0xf6>
    19b0:	d6 95       	lsr	r29
    19b2:	c7 95       	ror	r28
    19b4:	57 95       	ror	r21
    19b6:	47 95       	ror	r20
    19b8:	f7 94       	ror	r15
    19ba:	e7 94       	ror	r14
    19bc:	1a 95       	dec	r17
    19be:	c1 f7       	brne	.-16     	; 0x19b0 <__ftoa_engine+0xe6>
    19c0:	e6 e9       	ldi	r30, 0x96	; 150
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	68 94       	set
    19c6:	15 90       	lpm	r1, Z+
    19c8:	15 91       	lpm	r17, Z+
    19ca:	35 91       	lpm	r19, Z+
    19cc:	65 91       	lpm	r22, Z+
    19ce:	95 91       	lpm	r25, Z+
    19d0:	05 90       	lpm	r0, Z+
    19d2:	7f e2       	ldi	r23, 0x2F	; 47
    19d4:	73 95       	inc	r23
    19d6:	e1 18       	sub	r14, r1
    19d8:	f1 0a       	sbc	r15, r17
    19da:	43 0b       	sbc	r20, r19
    19dc:	56 0b       	sbc	r21, r22
    19de:	c9 0b       	sbc	r28, r25
    19e0:	d0 09       	sbc	r29, r0
    19e2:	c0 f7       	brcc	.-16     	; 0x19d4 <__ftoa_engine+0x10a>
    19e4:	e1 0c       	add	r14, r1
    19e6:	f1 1e       	adc	r15, r17
    19e8:	43 1f       	adc	r20, r19
    19ea:	56 1f       	adc	r21, r22
    19ec:	c9 1f       	adc	r28, r25
    19ee:	d0 1d       	adc	r29, r0
    19f0:	7e f4       	brtc	.+30     	; 0x1a10 <__ftoa_engine+0x146>
    19f2:	70 33       	cpi	r23, 0x30	; 48
    19f4:	11 f4       	brne	.+4      	; 0x19fa <__ftoa_engine+0x130>
    19f6:	8a 95       	dec	r24
    19f8:	e6 cf       	rjmp	.-52     	; 0x19c6 <__ftoa_engine+0xfc>
    19fa:	e8 94       	clt
    19fc:	01 50       	subi	r16, 0x01	; 1
    19fe:	30 f0       	brcs	.+12     	; 0x1a0c <__ftoa_engine+0x142>
    1a00:	08 0f       	add	r16, r24
    1a02:	0a f4       	brpl	.+2      	; 0x1a06 <__ftoa_engine+0x13c>
    1a04:	00 27       	eor	r16, r16
    1a06:	02 17       	cp	r16, r18
    1a08:	08 f4       	brcc	.+2      	; 0x1a0c <__ftoa_engine+0x142>
    1a0a:	20 2f       	mov	r18, r16
    1a0c:	23 95       	inc	r18
    1a0e:	02 2f       	mov	r16, r18
    1a10:	7a 33       	cpi	r23, 0x3A	; 58
    1a12:	28 f0       	brcs	.+10     	; 0x1a1e <__ftoa_engine+0x154>
    1a14:	79 e3       	ldi	r23, 0x39	; 57
    1a16:	7d 93       	st	X+, r23
    1a18:	2a 95       	dec	r18
    1a1a:	e9 f7       	brne	.-6      	; 0x1a16 <__ftoa_engine+0x14c>
    1a1c:	10 c0       	rjmp	.+32     	; 0x1a3e <__ftoa_engine+0x174>
    1a1e:	7d 93       	st	X+, r23
    1a20:	2a 95       	dec	r18
    1a22:	89 f6       	brne	.-94     	; 0x19c6 <__ftoa_engine+0xfc>
    1a24:	06 94       	lsr	r0
    1a26:	97 95       	ror	r25
    1a28:	67 95       	ror	r22
    1a2a:	37 95       	ror	r19
    1a2c:	17 95       	ror	r17
    1a2e:	17 94       	ror	r1
    1a30:	e1 18       	sub	r14, r1
    1a32:	f1 0a       	sbc	r15, r17
    1a34:	43 0b       	sbc	r20, r19
    1a36:	56 0b       	sbc	r21, r22
    1a38:	c9 0b       	sbc	r28, r25
    1a3a:	d0 09       	sbc	r29, r0
    1a3c:	98 f0       	brcs	.+38     	; 0x1a64 <__ftoa_engine+0x19a>
    1a3e:	23 95       	inc	r18
    1a40:	7e 91       	ld	r23, -X
    1a42:	73 95       	inc	r23
    1a44:	7a 33       	cpi	r23, 0x3A	; 58
    1a46:	08 f0       	brcs	.+2      	; 0x1a4a <__ftoa_engine+0x180>
    1a48:	70 e3       	ldi	r23, 0x30	; 48
    1a4a:	7c 93       	st	X, r23
    1a4c:	20 13       	cpse	r18, r16
    1a4e:	b8 f7       	brcc	.-18     	; 0x1a3e <__ftoa_engine+0x174>
    1a50:	7e 91       	ld	r23, -X
    1a52:	70 61       	ori	r23, 0x10	; 16
    1a54:	7d 93       	st	X+, r23
    1a56:	30 f0       	brcs	.+12     	; 0x1a64 <__ftoa_engine+0x19a>
    1a58:	83 95       	inc	r24
    1a5a:	71 e3       	ldi	r23, 0x31	; 49
    1a5c:	7d 93       	st	X+, r23
    1a5e:	70 e3       	ldi	r23, 0x30	; 48
    1a60:	2a 95       	dec	r18
    1a62:	e1 f7       	brne	.-8      	; 0x1a5c <__ftoa_engine+0x192>
    1a64:	11 24       	eor	r1, r1
    1a66:	ef 90       	pop	r14
    1a68:	ff 90       	pop	r15
    1a6a:	0f 91       	pop	r16
    1a6c:	1f 91       	pop	r17
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	99 27       	eor	r25, r25
    1a74:	87 fd       	sbrc	r24, 7
    1a76:	90 95       	com	r25
    1a78:	08 95       	ret

00001a7a <__prologue_saves__>:
    1a7a:	2f 92       	push	r2
    1a7c:	3f 92       	push	r3
    1a7e:	4f 92       	push	r4
    1a80:	5f 92       	push	r5
    1a82:	6f 92       	push	r6
    1a84:	7f 92       	push	r7
    1a86:	8f 92       	push	r8
    1a88:	9f 92       	push	r9
    1a8a:	af 92       	push	r10
    1a8c:	bf 92       	push	r11
    1a8e:	cf 92       	push	r12
    1a90:	df 92       	push	r13
    1a92:	ef 92       	push	r14
    1a94:	ff 92       	push	r15
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	ca 1b       	sub	r28, r26
    1aa4:	db 0b       	sbc	r29, r27
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
    1ab0:	09 94       	ijmp

00001ab2 <__epilogue_restores__>:
    1ab2:	2a 88       	ldd	r2, Y+18	; 0x12
    1ab4:	39 88       	ldd	r3, Y+17	; 0x11
    1ab6:	48 88       	ldd	r4, Y+16	; 0x10
    1ab8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1aba:	6e 84       	ldd	r6, Y+14	; 0x0e
    1abc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1abe:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ac0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ac2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ac4:	b9 84       	ldd	r11, Y+9	; 0x09
    1ac6:	c8 84       	ldd	r12, Y+8	; 0x08
    1ac8:	df 80       	ldd	r13, Y+7	; 0x07
    1aca:	ee 80       	ldd	r14, Y+6	; 0x06
    1acc:	fd 80       	ldd	r15, Y+5	; 0x05
    1ace:	0c 81       	ldd	r16, Y+4	; 0x04
    1ad0:	1b 81       	ldd	r17, Y+3	; 0x03
    1ad2:	aa 81       	ldd	r26, Y+2	; 0x02
    1ad4:	b9 81       	ldd	r27, Y+1	; 0x01
    1ad6:	ce 0f       	add	r28, r30
    1ad8:	d1 1d       	adc	r29, r1
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	ed 01       	movw	r28, r26
    1ae6:	08 95       	ret

00001ae8 <_exit>:
    1ae8:	f8 94       	cli

00001aea <__stop_program>:
    1aea:	ff cf       	rjmp	.-2      	; 0x1aea <__stop_program>
