
mpu_manual.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000015f0  00001684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  00800104  00800104  00001688  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eed  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4b  00000000  00000000  00003765  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e61  00000000  00000000  000043b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d0  00000000  00000000  00005214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d9  00000000  00000000  000057e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d8f  00000000  00000000  00005fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00007d4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__vector_18>
      4c:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__vector_19>
      50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <mpu6050_init+0x62>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <main+0x1b6>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <rk_integrator+0xde>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <i2c_start+0x22>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e0 ef       	ldi	r30, 0xF0	; 240
     176:	f5 e1       	ldi	r31, 0x15	; 21
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a4 30       	cpi	r26, 0x04	; 4
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	a4 e0       	ldi	r26, 0x04	; 4
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a7 35       	cpi	r26, 0x57	; 87
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <main>
     198:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     1a0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1a4:	8c e0       	ldi	r24, 0x0C	; 12
     1a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     1aa:	08 95       	ret

000001ac <i2c_start>:
     1ac:	94 ea       	ldi	r25, 0xA4	; 164
     1ae:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1b2:	4f ef       	ldi	r20, 0xFF	; 255
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	ec eb       	ldi	r30, 0xBC	; 188
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	90 81       	ld	r25, Z
     1c0:	99 23       	and	r25, r25
     1c2:	34 f0       	brlt	.+12     	; 0x1d0 <i2c_start+0x24>
     1c4:	41 50       	subi	r20, 0x01	; 1
     1c6:	51 09       	sbc	r21, r1
     1c8:	61 09       	sbc	r22, r1
     1ca:	71 09       	sbc	r23, r1
     1cc:	c0 f7       	brcc	.-16     	; 0x1be <i2c_start+0x12>
     1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <i2c_start+0x2c>
     1d0:	45 2b       	or	r20, r21
     1d2:	46 2b       	or	r20, r22
     1d4:	47 2b       	or	r20, r23
     1d6:	41 f1       	breq	.+80     	; 0x228 <i2c_start+0x7c>
     1d8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1dc:	98 7f       	andi	r25, 0xF8	; 248
     1de:	98 30       	cpi	r25, 0x08	; 8
     1e0:	11 f0       	breq	.+4      	; 0x1e6 <i2c_start+0x3a>
     1e2:	90 31       	cpi	r25, 0x10	; 16
     1e4:	19 f5       	brne	.+70     	; 0x22c <i2c_start+0x80>
     1e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     1ea:	84 e8       	ldi	r24, 0x84	; 132
     1ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1f0:	8f ef       	ldi	r24, 0xFF	; 255
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	ec eb       	ldi	r30, 0xBC	; 188
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	20 81       	ld	r18, Z
     1fe:	22 23       	and	r18, r18
     200:	2c f0       	brlt	.+10     	; 0x20c <i2c_start+0x60>
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	a1 09       	sbc	r26, r1
     206:	b1 09       	sbc	r27, r1
     208:	c8 f7       	brcc	.-14     	; 0x1fc <i2c_start+0x50>
     20a:	04 c0       	rjmp	.+8      	; 0x214 <i2c_start+0x68>
     20c:	89 2b       	or	r24, r25
     20e:	8a 2b       	or	r24, r26
     210:	8b 2b       	or	r24, r27
     212:	71 f0       	breq	.+28     	; 0x230 <i2c_start+0x84>
     214:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     218:	98 7f       	andi	r25, 0xF8	; 248
     21a:	98 31       	cpi	r25, 0x18	; 24
     21c:	59 f0       	breq	.+22     	; 0x234 <i2c_start+0x88>
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	90 34       	cpi	r25, 0x40	; 64
     222:	49 f4       	brne	.+18     	; 0x236 <i2c_start+0x8a>
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	08 95       	ret
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	08 95       	ret
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	08 95       	ret
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	08 95       	ret
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	08 95       	ret

00000238 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     238:	84 e9       	ldi	r24, 0x94	; 148
     23a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	ec eb       	ldi	r30, 0xBC	; 188
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	20 81       	ld	r18, Z
     248:	24 ff       	sbrs	r18, 4
     24a:	05 c0       	rjmp	.+10     	; 0x256 <i2c_stop+0x1e>
     24c:	01 96       	adiw	r24, 0x01	; 1
     24e:	81 15       	cp	r24, r1
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	92 07       	cpc	r25, r18
     254:	c1 f7       	brne	.-16     	; 0x246 <i2c_stop+0xe>
     256:	08 95       	ret

00000258 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     258:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     25c:	84 e8       	ldi	r24, 0x84	; 132
     25e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     262:	8f ef       	ldi	r24, 0xFF	; 255
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	a0 e0       	ldi	r26, 0x00	; 0
     268:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     26a:	ec eb       	ldi	r30, 0xBC	; 188
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	20 81       	ld	r18, Z
     270:	22 23       	and	r18, r18
     272:	2c f0       	brlt	.+10     	; 0x27e <i2c_write+0x26>
     274:	01 97       	sbiw	r24, 0x01	; 1
     276:	a1 09       	sbc	r26, r1
     278:	b1 09       	sbc	r27, r1
     27a:	c8 f7       	brcc	.-14     	; 0x26e <i2c_write+0x16>
     27c:	04 c0       	rjmp	.+8      	; 0x286 <i2c_write+0x2e>
	if(i2c_timer == 0)
     27e:	89 2b       	or	r24, r25
     280:	8a 2b       	or	r24, r26
     282:	8b 2b       	or	r24, r27
     284:	41 f0       	breq	.+16     	; 0x296 <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     286:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     28a:	98 7f       	andi	r25, 0xF8	; 248
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	98 32       	cpi	r25, 0x28	; 40
     290:	19 f4       	brne	.+6      	; 0x298 <i2c_write+0x40>
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	08 95       	ret
     296:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     298:	08 95       	ret

0000029a <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     29a:	84 ec       	ldi	r24, 0xC4	; 196
     29c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
     2a0:	8f ef       	ldi	r24, 0xFF	; 255
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     2a8:	ec eb       	ldi	r30, 0xBC	; 188
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	20 81       	ld	r18, Z
     2ae:	22 23       	and	r18, r18
     2b0:	2c f0       	brlt	.+10     	; 0x2bc <i2c_readAck+0x22>
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	a1 09       	sbc	r26, r1
     2b6:	b1 09       	sbc	r27, r1
     2b8:	c8 f7       	brcc	.-14     	; 0x2ac <i2c_readAck+0x12>
     2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     2bc:	89 2b       	or	r24, r25
     2be:	8a 2b       	or	r24, r26
     2c0:	8b 2b       	or	r24, r27
     2c2:	19 f0       	breq	.+6      	; 0x2ca <i2c_readAck+0x30>
		return 0;

    return TWDR;
     2c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     2c8:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     2ca:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     2cc:	08 95       	ret

000002ce <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     2ce:	84 e8       	ldi	r24, 0x84	; 132
     2d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_timer = I2C_TIMER_DELAY;
     2d4:	8f ef       	ldi	r24, 0xFF	; 255
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	a0 e0       	ldi	r26, 0x00	; 0
     2da:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     2dc:	ec eb       	ldi	r30, 0xBC	; 188
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	20 81       	ld	r18, Z
     2e2:	22 23       	and	r18, r18
     2e4:	2c f0       	brlt	.+10     	; 0x2f0 <i2c_readNak+0x22>
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	a1 09       	sbc	r26, r1
     2ea:	b1 09       	sbc	r27, r1
     2ec:	c8 f7       	brcc	.-14     	; 0x2e0 <i2c_readNak+0x12>
     2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     2f0:	89 2b       	or	r24, r25
     2f2:	8a 2b       	or	r24, r26
     2f4:	8b 2b       	or	r24, r27
     2f6:	19 f0       	breq	.+6      	; 0x2fe <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     2f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     2fc:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     2fe:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     300:	08 95       	ret

00000302 <rk_integrator>:
/*
	filters roll pitch and yaw using complementary filter 
*/
void applyCompFilter(double * filteredAngle, double accelAngle, double gyroAngle, double alpha){
	*filteredAngle = alpha * gyroAngle + (1-alpha) * accelAngle;
}
     302:	4f 92       	push	r4
     304:	5f 92       	push	r5
     306:	6f 92       	push	r6
     308:	7f 92       	push	r7
     30a:	8f 92       	push	r8
     30c:	9f 92       	push	r9
     30e:	af 92       	push	r10
     310:	bf 92       	push	r11
     312:	cf 92       	push	r12
     314:	df 92       	push	r13
     316:	ef 92       	push	r14
     318:	ff 92       	push	r15
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	00 d0       	rcall	.+0      	; 0x324 <rk_integrator+0x22>
     324:	00 d0       	rcall	.+0      	; 0x326 <rk_integrator+0x24>
     326:	00 d0       	rcall	.+0      	; 0x328 <rk_integrator+0x26>
     328:	cd b7       	in	r28, 0x3d	; 61
     32a:	de b7       	in	r29, 0x3e	; 62
     32c:	8c 01       	movw	r16, r24
     32e:	4a 01       	movw	r8, r20
     330:	5b 01       	movw	r10, r22
     332:	3e 83       	std	Y+6, r19	; 0x06
     334:	2d 83       	std	Y+5, r18	; 0x05
     336:	f9 01       	movw	r30, r18
     338:	40 80       	ld	r4, Z
     33a:	51 80       	ldd	r5, Z+1	; 0x01
     33c:	62 80       	ldd	r6, Z+2	; 0x02
     33e:	73 80       	ldd	r7, Z+3	; 0x03
     340:	c4 80       	ldd	r12, Z+4	; 0x04
     342:	d5 80       	ldd	r13, Z+5	; 0x05
     344:	e6 80       	ldd	r14, Z+6	; 0x06
     346:	f7 80       	ldd	r15, Z+7	; 0x07
     348:	a7 01       	movw	r20, r14
     34a:	96 01       	movw	r18, r12
     34c:	c7 01       	movw	r24, r14
     34e:	b6 01       	movw	r22, r12
     350:	0e 94 94 06 	call	0xd28	; 0xd28 <__addsf3>
     354:	ed 81       	ldd	r30, Y+5	; 0x05
     356:	fe 81       	ldd	r31, Y+6	; 0x06
     358:	20 85       	ldd	r18, Z+8	; 0x08
     35a:	31 85       	ldd	r19, Z+9	; 0x09
     35c:	42 85       	ldd	r20, Z+10	; 0x0a
     35e:	53 85       	ldd	r21, Z+11	; 0x0b
     360:	0e 94 94 06 	call	0xd28	; 0xd28 <__addsf3>
     364:	69 83       	std	Y+1, r22	; 0x01
     366:	7a 83       	std	Y+2, r23	; 0x02
     368:	8b 83       	std	Y+3, r24	; 0x03
     36a:	9c 83       	std	Y+4, r25	; 0x04
     36c:	a3 01       	movw	r20, r6
     36e:	92 01       	movw	r18, r4
     370:	c3 01       	movw	r24, r6
     372:	b2 01       	movw	r22, r4
     374:	0e 94 94 06 	call	0xd28	; 0xd28 <__addsf3>
     378:	9b 01       	movw	r18, r22
     37a:	ac 01       	movw	r20, r24
     37c:	69 81       	ldd	r22, Y+1	; 0x01
     37e:	7a 81       	ldd	r23, Y+2	; 0x02
     380:	8b 81       	ldd	r24, Y+3	; 0x03
     382:	9c 81       	ldd	r25, Y+4	; 0x04
     384:	0e 94 94 06 	call	0xd28	; 0xd28 <__addsf3>
     388:	a5 01       	movw	r20, r10
     38a:	94 01       	movw	r18, r8
     38c:	0e 94 94 06 	call	0xd28	; 0xd28 <__addsf3>
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	40 ec       	ldi	r20, 0xC0	; 192
     396:	50 e4       	ldi	r21, 0x40	; 64
     398:	0e 94 00 07 	call	0xe00	; 0xe00 <__divsf3>
     39c:	9b 01       	movw	r18, r22
     39e:	ac 01       	movw	r20, r24
     3a0:	f8 01       	movw	r30, r16
     3a2:	60 81       	ld	r22, Z
     3a4:	71 81       	ldd	r23, Z+1	; 0x01
     3a6:	82 81       	ldd	r24, Z+2	; 0x02
     3a8:	93 81       	ldd	r25, Z+3	; 0x03
     3aa:	0e 94 94 06 	call	0xd28	; 0xd28 <__addsf3>
     3ae:	f8 01       	movw	r30, r16
     3b0:	60 83       	st	Z, r22
     3b2:	71 83       	std	Z+1, r23	; 0x01
     3b4:	82 83       	std	Z+2, r24	; 0x02
     3b6:	93 83       	std	Z+3, r25	; 0x03
     3b8:	ed 81       	ldd	r30, Y+5	; 0x05
     3ba:	fe 81       	ldd	r31, Y+6	; 0x06
     3bc:	c0 86       	std	Z+8, r12	; 0x08
     3be:	d1 86       	std	Z+9, r13	; 0x09
     3c0:	e2 86       	std	Z+10, r14	; 0x0a
     3c2:	f3 86       	std	Z+11, r15	; 0x0b
     3c4:	44 82       	std	Z+4, r4	; 0x04
     3c6:	55 82       	std	Z+5, r5	; 0x05
     3c8:	66 82       	std	Z+6, r6	; 0x06
     3ca:	77 82       	std	Z+7, r7	; 0x07
     3cc:	80 82       	st	Z, r8
     3ce:	91 82       	std	Z+1, r9	; 0x01
     3d0:	a2 82       	std	Z+2, r10	; 0x02
     3d2:	b3 82       	std	Z+3, r11	; 0x03
     3d4:	26 96       	adiw	r28, 0x06	; 6
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	ff 90       	pop	r15
     3ea:	ef 90       	pop	r14
     3ec:	df 90       	pop	r13
     3ee:	cf 90       	pop	r12
     3f0:	bf 90       	pop	r11
     3f2:	af 90       	pop	r10
     3f4:	9f 90       	pop	r9
     3f6:	8f 90       	pop	r8
     3f8:	7f 90       	pop	r7
     3fa:	6f 90       	pop	r6
     3fc:	5f 90       	pop	r5
     3fe:	4f 90       	pop	r4
     400:	08 95       	ret

00000402 <applyOffset>:
     402:	8f 92       	push	r8
     404:	9f 92       	push	r9
     406:	af 92       	push	r10
     408:	bf 92       	push	r11
     40a:	cf 92       	push	r12
     40c:	df 92       	push	r13
     40e:	ef 92       	push	r14
     410:	ff 92       	push	r15
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	4c 01       	movw	r8, r24
     41c:	5b 01       	movw	r10, r22
     41e:	6a 01       	movw	r12, r20
     420:	e9 01       	movw	r28, r18
     422:	25 e5       	ldi	r18, 0x55	; 85
     424:	31 ec       	ldi	r19, 0xC1	; 193
     426:	48 ea       	ldi	r20, 0xA8	; 168
     428:	5c e3       	ldi	r21, 0x3C	; 60
     42a:	fc 01       	movw	r30, r24
     42c:	60 81       	ld	r22, Z
     42e:	71 81       	ldd	r23, Z+1	; 0x01
     430:	82 81       	ldd	r24, Z+2	; 0x02
     432:	93 81       	ldd	r25, Z+3	; 0x03
     434:	0e 94 93 06 	call	0xd26	; 0xd26 <__subsf3>
     438:	f4 01       	movw	r30, r8
     43a:	60 83       	st	Z, r22
     43c:	71 83       	std	Z+1, r23	; 0x01
     43e:	82 83       	std	Z+2, r24	; 0x02
     440:	93 83       	std	Z+3, r25	; 0x03
     442:	2c e7       	ldi	r18, 0x7C	; 124
     444:	32 ef       	ldi	r19, 0xF2	; 242
     446:	40 eb       	ldi	r20, 0xB0	; 176
     448:	5c e3       	ldi	r21, 0x3C	; 60
     44a:	f5 01       	movw	r30, r10
     44c:	60 81       	ld	r22, Z
     44e:	71 81       	ldd	r23, Z+1	; 0x01
     450:	82 81       	ldd	r24, Z+2	; 0x02
     452:	93 81       	ldd	r25, Z+3	; 0x03
     454:	0e 94 93 06 	call	0xd26	; 0xd26 <__subsf3>
     458:	f5 01       	movw	r30, r10
     45a:	60 83       	st	Z, r22
     45c:	71 83       	std	Z+1, r23	; 0x01
     45e:	82 83       	std	Z+2, r24	; 0x02
     460:	93 83       	std	Z+3, r25	; 0x03
     462:	2e e0       	ldi	r18, 0x0E	; 14
     464:	3d e2       	ldi	r19, 0x2D	; 45
     466:	42 eb       	ldi	r20, 0xB2	; 178
     468:	5d e3       	ldi	r21, 0x3D	; 61
     46a:	f6 01       	movw	r30, r12
     46c:	60 81       	ld	r22, Z
     46e:	71 81       	ldd	r23, Z+1	; 0x01
     470:	82 81       	ldd	r24, Z+2	; 0x02
     472:	93 81       	ldd	r25, Z+3	; 0x03
     474:	0e 94 94 06 	call	0xd28	; 0xd28 <__addsf3>
     478:	f6 01       	movw	r30, r12
     47a:	60 83       	st	Z, r22
     47c:	71 83       	std	Z+1, r23	; 0x01
     47e:	82 83       	std	Z+2, r24	; 0x02
     480:	93 83       	std	Z+3, r25	; 0x03
     482:	2c eb       	ldi	r18, 0xBC	; 188
     484:	35 e0       	ldi	r19, 0x05	; 5
     486:	42 e2       	ldi	r20, 0x22	; 34
     488:	50 e4       	ldi	r21, 0x40	; 64
     48a:	68 81       	ld	r22, Y
     48c:	79 81       	ldd	r23, Y+1	; 0x01
     48e:	8a 81       	ldd	r24, Y+2	; 0x02
     490:	9b 81       	ldd	r25, Y+3	; 0x03
     492:	0e 94 93 06 	call	0xd26	; 0xd26 <__subsf3>
     496:	68 83       	st	Y, r22
     498:	79 83       	std	Y+1, r23	; 0x01
     49a:	8a 83       	std	Y+2, r24	; 0x02
     49c:	9b 83       	std	Y+3, r25	; 0x03
     49e:	29 ef       	ldi	r18, 0xF9	; 249
     4a0:	3f e0       	ldi	r19, 0x0F	; 15
     4a2:	4c e1       	ldi	r20, 0x1C	; 28
     4a4:	51 e4       	ldi	r21, 0x41	; 65
     4a6:	f8 01       	movw	r30, r16
     4a8:	60 81       	ld	r22, Z
     4aa:	71 81       	ldd	r23, Z+1	; 0x01
     4ac:	82 81       	ldd	r24, Z+2	; 0x02
     4ae:	93 81       	ldd	r25, Z+3	; 0x03
     4b0:	0e 94 93 06 	call	0xd26	; 0xd26 <__subsf3>
     4b4:	f8 01       	movw	r30, r16
     4b6:	60 83       	st	Z, r22
     4b8:	71 83       	std	Z+1, r23	; 0x01
     4ba:	82 83       	std	Z+2, r24	; 0x02
     4bc:	93 83       	std	Z+3, r25	; 0x03
     4be:	2b ed       	ldi	r18, 0xDB	; 219
     4c0:	39 ef       	ldi	r19, 0xF9	; 249
     4c2:	45 e4       	ldi	r20, 0x45	; 69
     4c4:	51 e4       	ldi	r21, 0x41	; 65
     4c6:	f7 01       	movw	r30, r14
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	0e 94 93 06 	call	0xd26	; 0xd26 <__subsf3>
     4d4:	f7 01       	movw	r30, r14
     4d6:	60 83       	st	Z, r22
     4d8:	71 83       	std	Z+1, r23	; 0x01
     4da:	82 83       	std	Z+2, r24	; 0x02
     4dc:	93 83       	std	Z+3, r25	; 0x03
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	ff 90       	pop	r15
     4e8:	ef 90       	pop	r14
     4ea:	df 90       	pop	r13
     4ec:	cf 90       	pop	r12
     4ee:	bf 90       	pop	r11
     4f0:	af 90       	pop	r10
     4f2:	9f 90       	pop	r9
     4f4:	8f 90       	pop	r8
     4f6:	08 95       	ret

000004f8 <main>:

#endif

int main(void) {
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	ce 55       	subi	r28, 0x5E	; 94
     502:	d1 09       	sbc	r29, r1
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	de bf       	out	0x3e, r29	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	cd bf       	out	0x3d, r28	; 61

	#if MPU6050_GETATTITUDE == 0
	int16_t ax = 0;
     50e:	1a 82       	std	Y+2, r1	; 0x02
     510:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
     512:	1c 82       	std	Y+4, r1	; 0x04
     514:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
     516:	1e 82       	std	Y+6, r1	; 0x06
     518:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
     51a:	18 86       	std	Y+8, r1	; 0x08
     51c:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
     51e:	1a 86       	std	Y+10, r1	; 0x0a
     520:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
     522:	1c 86       	std	Y+12, r1	; 0x0c
     524:	1b 86       	std	Y+11, r1	; 0x0b
	double axg = 0;
     526:	1d 86       	std	Y+13, r1	; 0x0d
     528:	1e 86       	std	Y+14, r1	; 0x0e
     52a:	1f 86       	std	Y+15, r1	; 0x0f
     52c:	18 8a       	std	Y+16, r1	; 0x10
	double ayg = 0;
     52e:	19 8a       	std	Y+17, r1	; 0x11
     530:	1a 8a       	std	Y+18, r1	; 0x12
     532:	1b 8a       	std	Y+19, r1	; 0x13
     534:	1c 8a       	std	Y+20, r1	; 0x14
	double azg = 0;
     536:	1d 8a       	std	Y+21, r1	; 0x15
     538:	1e 8a       	std	Y+22, r1	; 0x16
     53a:	1f 8a       	std	Y+23, r1	; 0x17
     53c:	18 8e       	std	Y+24, r1	; 0x18
	double gxds = 0;
     53e:	19 8e       	std	Y+25, r1	; 0x19
     540:	1a 8e       	std	Y+26, r1	; 0x1a
     542:	1b 8e       	std	Y+27, r1	; 0x1b
     544:	1c 8e       	std	Y+28, r1	; 0x1c
	double gyds = 0;
     546:	1d 8e       	std	Y+29, r1	; 0x1d
     548:	1e 8e       	std	Y+30, r1	; 0x1e
     54a:	1f 8e       	std	Y+31, r1	; 0x1f
     54c:	18 a2       	std	Y+32, r1	; 0x20
	double gzds = 0; 
     54e:	19 a2       	std	Y+33, r1	; 0x21
     550:	1a a2       	std	Y+34, r1	; 0x22
     552:	1b a2       	std	Y+35, r1	; 0x23
     554:	1c a2       	std	Y+36, r1	; 0x24
	double azg_offset = -0.0870;
	double gxds_offset = 2.5316;
	double gyds_offset = 9.7539;
	double gzds_offset = 12.3735;*/
	//for runge-kutta integrator
	double angleX = 0.0;	//roll
     556:	1d a2       	std	Y+37, r1	; 0x25
     558:	1e a2       	std	Y+38, r1	; 0x26
     55a:	1f a2       	std	Y+39, r1	; 0x27
     55c:	18 a6       	std	Y+40, r1	; 0x28
	double angleY = 0.0;	//pitch
     55e:	19 a6       	std	Y+41, r1	; 0x29
     560:	1a a6       	std	Y+42, r1	; 0x2a
     562:	1b a6       	std	Y+43, r1	; 0x2b
     564:	1c a6       	std	Y+44, r1	; 0x2c
	double angleZ = 0.0;	//yaw
     566:	1d a6       	std	Y+45, r1	; 0x2d
     568:	1e a6       	std	Y+46, r1	; 0x2e
     56a:	1f a6       	std	Y+47, r1	; 0x2f
     56c:	18 aa       	std	Y+48, r1	; 0x30
	double prev_Xdps[3] = {0.0, 0.0, 0.0};	//holds last three gyro values for 
     56e:	19 aa       	std	Y+49, r1	; 0x31
     570:	1a aa       	std	Y+50, r1	; 0x32
     572:	1b aa       	std	Y+51, r1	; 0x33
     574:	1c aa       	std	Y+52, r1	; 0x34
     576:	1d aa       	std	Y+53, r1	; 0x35
     578:	1e aa       	std	Y+54, r1	; 0x36
     57a:	1f aa       	std	Y+55, r1	; 0x37
     57c:	18 ae       	std	Y+56, r1	; 0x38
     57e:	19 ae       	std	Y+57, r1	; 0x39
     580:	1a ae       	std	Y+58, r1	; 0x3a
     582:	1b ae       	std	Y+59, r1	; 0x3b
     584:	1c ae       	std	Y+60, r1	; 0x3c
	double prev_Ydps[3] = {0.0, 0.0, 0.0};	// runge-kutta integrator
     586:	21 96       	adiw	r28, 0x01	; 1
     588:	1c ae       	std	Y+60, r1	; 0x3c
     58a:	1d ae       	std	Y+61, r1	; 0x3d
     58c:	1e ae       	std	Y+62, r1	; 0x3e
     58e:	1f ae       	std	Y+63, r1	; 0x3f
     590:	21 97       	sbiw	r28, 0x01	; 1
     592:	25 96       	adiw	r28, 0x05	; 5
     594:	1c ae       	std	Y+60, r1	; 0x3c
     596:	1d ae       	std	Y+61, r1	; 0x3d
     598:	1e ae       	std	Y+62, r1	; 0x3e
     59a:	1f ae       	std	Y+63, r1	; 0x3f
     59c:	25 97       	sbiw	r28, 0x05	; 5
     59e:	29 96       	adiw	r28, 0x09	; 9
     5a0:	1c ae       	std	Y+60, r1	; 0x3c
     5a2:	1d ae       	std	Y+61, r1	; 0x3d
     5a4:	1e ae       	std	Y+62, r1	; 0x3e
     5a6:	1f ae       	std	Y+63, r1	; 0x3f
     5a8:	29 97       	sbiw	r28, 0x09	; 9
	double prev_Zdps[3] = {0.0, 0.0, 0.0};
     5aa:	2d 96       	adiw	r28, 0x0d	; 13
     5ac:	1c ae       	std	Y+60, r1	; 0x3c
     5ae:	1d ae       	std	Y+61, r1	; 0x3d
     5b0:	1e ae       	std	Y+62, r1	; 0x3e
     5b2:	1f ae       	std	Y+63, r1	; 0x3f
     5b4:	2d 97       	sbiw	r28, 0x0d	; 13
     5b6:	61 96       	adiw	r28, 0x11	; 17
     5b8:	1c ae       	std	Y+60, r1	; 0x3c
     5ba:	1d ae       	std	Y+61, r1	; 0x3d
     5bc:	1e ae       	std	Y+62, r1	; 0x3e
     5be:	1f ae       	std	Y+63, r1	; 0x3f
     5c0:	61 97       	sbiw	r28, 0x11	; 17
     5c2:	65 96       	adiw	r28, 0x15	; 21
     5c4:	1c ae       	std	Y+60, r1	; 0x3c
     5c6:	1d ae       	std	Y+61, r1	; 0x3d
     5c8:	1e ae       	std	Y+62, r1	; 0x3e
     5ca:	1f ae       	std	Y+63, r1	; 0x3f
     5cc:	65 97       	sbiw	r28, 0x15	; 21
	double gzds = 0;
	*/
	#endif

	//init uart
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
     5ce:	89 e1       	ldi	r24, 0x19	; 25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 56 06 	call	0xcac	; 0xcac <uart_init>

	//init interrupt
	sei();
     5d6:	78 94       	sei

	//init mpu6050
	mpu6050_init();
     5d8:	0e 94 b0 04 	call	0x960	; 0x960 <mpu6050_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5dc:	2f ef       	ldi	r18, 0xFF	; 255
     5de:	80 e7       	ldi	r24, 0x70	; 112
     5e0:	92 e0       	ldi	r25, 0x02	; 2
     5e2:	21 50       	subi	r18, 0x01	; 1
     5e4:	80 40       	sbci	r24, 0x00	; 0
     5e6:	90 40       	sbci	r25, 0x00	; 0
     5e8:	e1 f7       	brne	.-8      	; 0x5e2 <main+0xea>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <main+0xf4>
     5ec:	00 00       	nop
/*
 *	Main Loop 
 */	
	for(;;) {
		#if MPU6050_GETATTITUDE == 0
		mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     5ee:	ce 01       	movw	r24, r28
     5f0:	0b 96       	adiw	r24, 0x0b	; 11
     5f2:	7c 01       	movw	r14, r24
     5f4:	8e 01       	movw	r16, r28
     5f6:	07 5f       	subi	r16, 0xF7	; 247
     5f8:	1f 4f       	sbci	r17, 0xFF	; 255
     5fa:	9e 01       	movw	r18, r28
     5fc:	29 5f       	subi	r18, 0xF9	; 249
     5fe:	3f 4f       	sbci	r19, 0xFF	; 255
     600:	ae 01       	movw	r20, r28
     602:	4b 5f       	subi	r20, 0xFB	; 251
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	be 01       	movw	r22, r28
     608:	6d 5f       	subi	r22, 0xFD	; 253
     60a:	7f 4f       	sbci	r23, 0xFF	; 255
     60c:	0a 97       	sbiw	r24, 0x0a	; 10
     60e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <mpu6050_getRawData>
		mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
     612:	ce 01       	movw	r24, r28
     614:	81 96       	adiw	r24, 0x21	; 33
     616:	7c 01       	movw	r14, r24
     618:	0c 5e       	subi	r16, 0xEC	; 236
     61a:	1f 4f       	sbci	r17, 0xFF	; 255
     61c:	9e 01       	movw	r18, r28
     61e:	27 5e       	subi	r18, 0xE7	; 231
     620:	3f 4f       	sbci	r19, 0xFF	; 255
     622:	ae 01       	movw	r20, r28
     624:	4b 5e       	subi	r20, 0xEB	; 235
     626:	5f 4f       	sbci	r21, 0xFF	; 255
     628:	be 01       	movw	r22, r28
     62a:	6f 5e       	subi	r22, 0xEF	; 239
     62c:	7f 4f       	sbci	r23, 0xFF	; 255
     62e:	44 97       	sbiw	r24, 0x14	; 20
     630:	0e 94 32 05 	call	0xa64	; 0xa64 <mpu6050_getConvData>
		applyOffset(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
     634:	c7 01       	movw	r24, r14
     636:	9e 01       	movw	r18, r28
     638:	27 5e       	subi	r18, 0xE7	; 231
     63a:	3f 4f       	sbci	r19, 0xFF	; 255
     63c:	ae 01       	movw	r20, r28
     63e:	4b 5e       	subi	r20, 0xEB	; 235
     640:	5f 4f       	sbci	r21, 0xFF	; 255
     642:	be 01       	movw	r22, r28
     644:	6f 5e       	subi	r22, 0xEF	; 239
     646:	7f 4f       	sbci	r23, 0xFF	; 255
     648:	44 97       	sbiw	r24, 0x14	; 20
     64a:	0e 94 01 02 	call	0x402	; 0x402 <applyOffset>
		rk_integrator(&angleY, gyds, prev_Ydps);
		rk_integrator(&angleZ, gzds, prev_Zdps);*/
		
		//No tests are run
		#if DATAPROCESSINGTEST == 0
			rk_integrator(&angleX, gxds, prev_Xdps);
     64e:	49 8d       	ldd	r20, Y+25	; 0x19
     650:	5a 8d       	ldd	r21, Y+26	; 0x1a
     652:	6b 8d       	ldd	r22, Y+27	; 0x1b
     654:	7c 8d       	ldd	r23, Y+28	; 0x1c
     656:	9e 01       	movw	r18, r28
     658:	2f 5c       	subi	r18, 0xCF	; 207
     65a:	3f 4f       	sbci	r19, 0xFF	; 255
     65c:	ce 01       	movw	r24, r28
     65e:	85 96       	adiw	r24, 0x25	; 37
     660:	0e 94 81 01 	call	0x302	; 0x302 <rk_integrator>
			rk_integrator(&angleY, gyds, prev_Ydps);
     664:	4d 8d       	ldd	r20, Y+29	; 0x1d
     666:	5e 8d       	ldd	r21, Y+30	; 0x1e
     668:	6f 8d       	ldd	r22, Y+31	; 0x1f
     66a:	78 a1       	ldd	r23, Y+32	; 0x20
     66c:	9e 01       	movw	r18, r28
     66e:	23 5c       	subi	r18, 0xC3	; 195
     670:	3f 4f       	sbci	r19, 0xFF	; 255
     672:	ce 01       	movw	r24, r28
     674:	89 96       	adiw	r24, 0x29	; 41
     676:	0e 94 81 01 	call	0x302	; 0x302 <rk_integrator>
			rk_integrator(&angleZ, gzds, prev_Zdps);
     67a:	49 a1       	ldd	r20, Y+33	; 0x21
     67c:	5a a1       	ldd	r21, Y+34	; 0x22
     67e:	6b a1       	ldd	r22, Y+35	; 0x23
     680:	7c a1       	ldd	r23, Y+36	; 0x24
     682:	9e 01       	movw	r18, r28
     684:	27 5b       	subi	r18, 0xB7	; 183
     686:	3f 4f       	sbci	r19, 0xFF	; 255
     688:	ce 01       	movw	r24, r28
     68a:	8d 96       	adiw	r24, 0x2d	; 45
     68c:	0e 94 81 01 	call	0x302	; 0x302 <rk_integrator>
		uart_puts("\r\n");
*/
		
		//uart_puts("Printing from getConvData\r\n");
		#if SERIALPRINTMODE == 0
			dtostrf(axg, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     690:	6d 85       	ldd	r22, Y+13	; 0x0d
     692:	7e 85       	ldd	r23, Y+14	; 0x0e
     694:	8f 85       	ldd	r24, Y+15	; 0x0f
     696:	98 89       	ldd	r25, Y+16	; 0x10
     698:	08 5c       	subi	r16, 0xC8	; 200
     69a:	1f 4f       	sbci	r17, 0xFF	; 255
     69c:	25 e0       	ldi	r18, 0x05	; 5
     69e:	43 e0       	ldi	r20, 0x03	; 3
     6a0:	0e 94 6d 08 	call	0x10da	; 0x10da <dtostrf>
     6a4:	c8 01       	movw	r24, r16
     6a6:	0e 94 84 06 	call	0xd08	; 0xd08 <uart_puts>
     6aa:	80 e2       	ldi	r24, 0x20	; 32
     6ac:	0e 94 6f 06 	call	0xcde	; 0xcde <uart_putc>
			dtostrf(ayg, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     6b0:	69 89       	ldd	r22, Y+17	; 0x11
     6b2:	7a 89       	ldd	r23, Y+18	; 0x12
     6b4:	8b 89       	ldd	r24, Y+19	; 0x13
     6b6:	9c 89       	ldd	r25, Y+20	; 0x14
     6b8:	25 e0       	ldi	r18, 0x05	; 5
     6ba:	43 e0       	ldi	r20, 0x03	; 3
     6bc:	0e 94 6d 08 	call	0x10da	; 0x10da <dtostrf>
     6c0:	c8 01       	movw	r24, r16
     6c2:	0e 94 84 06 	call	0xd08	; 0xd08 <uart_puts>
     6c6:	80 e2       	ldi	r24, 0x20	; 32
     6c8:	0e 94 6f 06 	call	0xcde	; 0xcde <uart_putc>
			dtostrf(azg, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     6cc:	6d 89       	ldd	r22, Y+21	; 0x15
     6ce:	7e 89       	ldd	r23, Y+22	; 0x16
     6d0:	8f 89       	ldd	r24, Y+23	; 0x17
     6d2:	98 8d       	ldd	r25, Y+24	; 0x18
     6d4:	25 e0       	ldi	r18, 0x05	; 5
     6d6:	43 e0       	ldi	r20, 0x03	; 3
     6d8:	0e 94 6d 08 	call	0x10da	; 0x10da <dtostrf>
     6dc:	c8 01       	movw	r24, r16
     6de:	0e 94 84 06 	call	0xd08	; 0xd08 <uart_puts>
     6e2:	80 e2       	ldi	r24, 0x20	; 32
     6e4:	0e 94 6f 06 	call	0xcde	; 0xcde <uart_putc>
			dtostrf(gxds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     6e8:	69 8d       	ldd	r22, Y+25	; 0x19
     6ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
     6ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6f0:	25 e0       	ldi	r18, 0x05	; 5
     6f2:	43 e0       	ldi	r20, 0x03	; 3
     6f4:	0e 94 6d 08 	call	0x10da	; 0x10da <dtostrf>
     6f8:	c8 01       	movw	r24, r16
     6fa:	0e 94 84 06 	call	0xd08	; 0xd08 <uart_puts>
     6fe:	80 e2       	ldi	r24, 0x20	; 32
     700:	0e 94 6f 06 	call	0xcde	; 0xcde <uart_putc>
			dtostrf(gyds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     704:	6d 8d       	ldd	r22, Y+29	; 0x1d
     706:	7e 8d       	ldd	r23, Y+30	; 0x1e
     708:	8f 8d       	ldd	r24, Y+31	; 0x1f
     70a:	98 a1       	ldd	r25, Y+32	; 0x20
     70c:	25 e0       	ldi	r18, 0x05	; 5
     70e:	43 e0       	ldi	r20, 0x03	; 3
     710:	0e 94 6d 08 	call	0x10da	; 0x10da <dtostrf>
     714:	c8 01       	movw	r24, r16
     716:	0e 94 84 06 	call	0xd08	; 0xd08 <uart_puts>
     71a:	80 e2       	ldi	r24, 0x20	; 32
     71c:	0e 94 6f 06 	call	0xcde	; 0xcde <uart_putc>
			dtostrf(gzds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
     720:	69 a1       	ldd	r22, Y+33	; 0x21
     722:	7a a1       	ldd	r23, Y+34	; 0x22
     724:	8b a1       	ldd	r24, Y+35	; 0x23
     726:	9c a1       	ldd	r25, Y+36	; 0x24
     728:	25 e0       	ldi	r18, 0x05	; 5
     72a:	43 e0       	ldi	r20, 0x03	; 3
     72c:	0e 94 6d 08 	call	0x10da	; 0x10da <dtostrf>
     730:	c8 01       	movw	r24, r16
     732:	0e 94 84 06 	call	0xd08	; 0xd08 <uart_puts>
     736:	80 e2       	ldi	r24, 0x20	; 32
     738:	0e 94 6f 06 	call	0xcde	; 0xcde <uart_putc>
			dtostrf(gyds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');
			dtostrf(gzds, 3, 5, itmp); uart_puts(itmp); uart_putc(' ');*/
			uart_puts("\r\n");
		#endif
		
		uart_puts("\r\n");
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	0e 94 84 06 	call	0xd08	; 0xd08 <uart_puts>
     744:	8f e3       	ldi	r24, 0x3F	; 63
     746:	9c e9       	ldi	r25, 0x9C	; 156
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	f1 f7       	brne	.-4      	; 0x748 <main+0x250>
     74c:	00 c0       	rjmp	.+0      	; 0x74e <main+0x256>
     74e:	00 00       	nop
     750:	4e cf       	rjmp	.-356    	; 0x5ee <main+0xf6>

00000752 <mpu6050_readBytes>:
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
	if(buffer[0] == 0x34)
		return 1;
	else
		return 0;
}
     752:	af 92       	push	r10
     754:	bf 92       	push	r11
     756:	cf 92       	push	r12
     758:	df 92       	push	r13
     75a:	ff 92       	push	r15
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	66 23       	and	r22, r22
     766:	b9 f1       	breq	.+110    	; 0x7d6 <mpu6050_readBytes+0x84>
     768:	c5 2f       	mov	r28, r21
     76a:	d4 2f       	mov	r29, r20
     76c:	f6 2e       	mov	r15, r22
     76e:	18 2f       	mov	r17, r24
     770:	80 ed       	ldi	r24, 0xD0	; 208
     772:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_start>
     776:	81 2f       	mov	r24, r17
     778:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_write>
     77c:	85 e3       	ldi	r24, 0x35	; 53
     77e:	8a 95       	dec	r24
     780:	f1 f7       	brne	.-4      	; 0x77e <mpu6050_readBytes+0x2c>
     782:	00 00       	nop
     784:	81 ed       	ldi	r24, 0xD1	; 209
     786:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_start>
     78a:	0d 2f       	mov	r16, r29
     78c:	1c 2f       	mov	r17, r28
     78e:	cc 24       	eor	r12, r12
     790:	ca 94       	dec	r12
     792:	cf 0c       	add	r12, r15
     794:	d1 2c       	mov	r13, r1
     796:	ef ef       	ldi	r30, 0xFF	; 255
     798:	ce 1a       	sub	r12, r30
     79a:	de 0a       	sbc	r13, r30
     79c:	c0 e0       	ldi	r28, 0x00	; 0
     79e:	d0 e0       	ldi	r29, 0x00	; 0
     7a0:	af 2c       	mov	r10, r15
     7a2:	b1 2c       	mov	r11, r1
     7a4:	f1 e0       	ldi	r31, 0x01	; 1
     7a6:	af 1a       	sub	r10, r31
     7a8:	b1 08       	sbc	r11, r1
     7aa:	ac 16       	cp	r10, r28
     7ac:	bd 06       	cpc	r11, r29
     7ae:	29 f4       	brne	.+10     	; 0x7ba <mpu6050_readBytes+0x68>
     7b0:	0e 94 67 01 	call	0x2ce	; 0x2ce <i2c_readNak>
     7b4:	f8 01       	movw	r30, r16
     7b6:	80 83       	st	Z, r24
     7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <mpu6050_readBytes+0x70>
     7ba:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_readAck>
     7be:	f8 01       	movw	r30, r16
     7c0:	80 83       	st	Z, r24
     7c2:	21 96       	adiw	r28, 0x01	; 1
     7c4:	0f 5f       	subi	r16, 0xFF	; 255
     7c6:	1f 4f       	sbci	r17, 0xFF	; 255
     7c8:	cc 15       	cp	r28, r12
     7ca:	dd 05       	cpc	r29, r13
     7cc:	71 f7       	brne	.-36     	; 0x7aa <mpu6050_readBytes+0x58>
     7ce:	cf 2d       	mov	r28, r15
     7d0:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_stop>
     7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <mpu6050_readBytes+0x86>
     7d6:	c0 e0       	ldi	r28, 0x00	; 0
     7d8:	8c 2f       	mov	r24, r28
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	ff 90       	pop	r15
     7e4:	df 90       	pop	r13
     7e6:	cf 90       	pop	r12
     7e8:	bf 90       	pop	r11
     7ea:	af 90       	pop	r10
     7ec:	08 95       	ret

000007ee <mpu6050_readByte>:
     7ee:	ab 01       	movw	r20, r22
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	0e 94 a9 03 	call	0x752	; 0x752 <mpu6050_readBytes>
     7f6:	08 95       	ret

000007f8 <mpu6050_writeBytes>:
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	66 23       	and	r22, r22
     806:	d1 f0       	breq	.+52     	; 0x83c <mpu6050_writeBytes+0x44>
     808:	7a 01       	movw	r14, r20
     80a:	16 2f       	mov	r17, r22
     80c:	c8 2f       	mov	r28, r24
     80e:	80 ed       	ldi	r24, 0xD0	; 208
     810:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_start>
     814:	8c 2f       	mov	r24, r28
     816:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_write>
     81a:	e7 01       	movw	r28, r14
     81c:	6f ef       	ldi	r22, 0xFF	; 255
     81e:	61 0f       	add	r22, r17
     820:	06 2f       	mov	r16, r22
     822:	10 e0       	ldi	r17, 0x00	; 0
     824:	0f 5f       	subi	r16, 0xFF	; 255
     826:	1f 4f       	sbci	r17, 0xFF	; 255
     828:	0e 0d       	add	r16, r14
     82a:	1f 1d       	adc	r17, r15
     82c:	89 91       	ld	r24, Y+
     82e:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_write>
     832:	c0 17       	cp	r28, r16
     834:	d1 07       	cpc	r29, r17
     836:	d1 f7       	brne	.-12     	; 0x82c <mpu6050_writeBytes+0x34>
     838:	0e 94 1c 01 	call	0x238	; 0x238 <i2c_stop>
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	08 95       	ret

0000084a <mpu6050_writeByte>:
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	1f 92       	push	r1
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	69 83       	std	Y+1, r22	; 0x01
     856:	ae 01       	movw	r20, r28
     858:	4f 5f       	subi	r20, 0xFF	; 255
     85a:	5f 4f       	sbci	r21, 0xFF	; 255
     85c:	61 e0       	ldi	r22, 0x01	; 1
     85e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <mpu6050_writeBytes>
     862:	0f 90       	pop	r0
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <mpu6050_writeBits>:
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	1f 92       	push	r1
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
     87c:	44 23       	and	r20, r20
     87e:	89 f1       	breq	.+98     	; 0x8e2 <mpu6050_writeBits+0x78>
     880:	f2 2e       	mov	r15, r18
     882:	14 2f       	mov	r17, r20
     884:	06 2f       	mov	r16, r22
     886:	e8 2e       	mov	r14, r24
     888:	19 82       	std	Y+1, r1	; 0x01
     88a:	be 01       	movw	r22, r28
     88c:	6f 5f       	subi	r22, 0xFF	; 255
     88e:	7f 4f       	sbci	r23, 0xFF	; 255
     890:	0e 94 f7 03 	call	0x7ee	; 0x7ee <mpu6050_readByte>
     894:	88 23       	and	r24, r24
     896:	29 f1       	breq	.+74     	; 0x8e2 <mpu6050_writeBits+0x78>
     898:	40 2f       	mov	r20, r16
     89a:	50 e0       	ldi	r21, 0x00	; 0
     89c:	41 1b       	sub	r20, r17
     89e:	51 09       	sbc	r21, r1
     8a0:	4f 5f       	subi	r20, 0xFF	; 255
     8a2:	5f 4f       	sbci	r21, 0xFF	; 255
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <mpu6050_writeBits+0x44>
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	1a 95       	dec	r17
     8b0:	e2 f7       	brpl	.-8      	; 0x8aa <mpu6050_writeBits+0x40>
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	04 2e       	mov	r0, r20
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <mpu6050_writeBits+0x52>
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	0a 94       	dec	r0
     8be:	e2 f7       	brpl	.-8      	; 0x8b8 <mpu6050_writeBits+0x4e>
     8c0:	2f 2d       	mov	r18, r15
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <mpu6050_writeBits+0x60>
     8c6:	22 0f       	add	r18, r18
     8c8:	33 1f       	adc	r19, r19
     8ca:	4a 95       	dec	r20
     8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <mpu6050_writeBits+0x5c>
     8ce:	68 2f       	mov	r22, r24
     8d0:	60 95       	com	r22
     8d2:	99 81       	ldd	r25, Y+1	; 0x01
     8d4:	69 23       	and	r22, r25
     8d6:	82 23       	and	r24, r18
     8d8:	68 2b       	or	r22, r24
     8da:	69 83       	std	Y+1, r22	; 0x01
     8dc:	8e 2d       	mov	r24, r14
     8de:	0e 94 25 04 	call	0x84a	; 0x84a <mpu6050_writeByte>
     8e2:	0f 90       	pop	r0
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	ff 90       	pop	r15
     8ee:	ef 90       	pop	r14
     8f0:	08 95       	ret

000008f2 <mpu6050_writeBit>:
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	1f 92       	push	r1
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
     902:	18 2f       	mov	r17, r24
     904:	06 2f       	mov	r16, r22
     906:	f4 2e       	mov	r15, r20
     908:	be 01       	movw	r22, r28
     90a:	6f 5f       	subi	r22, 0xFF	; 255
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
     90e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <mpu6050_readByte>
     912:	ff 20       	and	r15, r15
     914:	51 f0       	breq	.+20     	; 0x92a <__stack+0x2b>
     916:	61 e0       	ldi	r22, 0x01	; 1
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0x21>
     91c:	66 0f       	add	r22, r22
     91e:	77 1f       	adc	r23, r23
     920:	0a 95       	dec	r16
     922:	e2 f7       	brpl	.-8      	; 0x91c <__stack+0x1d>
     924:	89 81       	ldd	r24, Y+1	; 0x01
     926:	68 2b       	or	r22, r24
     928:	0a c0       	rjmp	.+20     	; 0x93e <__stack+0x3f>
     92a:	61 e0       	ldi	r22, 0x01	; 1
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0x35>
     930:	66 0f       	add	r22, r22
     932:	77 1f       	adc	r23, r23
     934:	0a 95       	dec	r16
     936:	e2 f7       	brpl	.-8      	; 0x930 <__stack+0x31>
     938:	60 95       	com	r22
     93a:	89 81       	ldd	r24, Y+1	; 0x01
     93c:	68 23       	and	r22, r24
     93e:	69 83       	std	Y+1, r22	; 0x01
     940:	81 2f       	mov	r24, r17
     942:	0e 94 25 04 	call	0x84a	; 0x84a <mpu6050_writeByte>
     946:	0f 90       	pop	r0
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	ff 90       	pop	r15
     952:	08 95       	ret

00000954 <mpu6050_setSleepDisabled>:
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	66 e0       	ldi	r22, 0x06	; 6
     958:	8b e6       	ldi	r24, 0x6B	; 107
     95a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <mpu6050_writeBit>
     95e:	08 95       	ret

00000960 <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
     960:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     964:	25 e3       	ldi	r18, 0x35	; 53
     966:	2a 95       	dec	r18
     968:	f1 f7       	brne	.-4      	; 0x966 <mpu6050_init+0x6>
     96a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	91 ee       	ldi	r25, 0xE1	; 225
     970:	24 e0       	ldi	r18, 0x04	; 4
     972:	81 50       	subi	r24, 0x01	; 1
     974:	90 40       	sbci	r25, 0x00	; 0
     976:	20 40       	sbci	r18, 0x00	; 0
     978:	e1 f7       	brne	.-8      	; 0x972 <mpu6050_init+0x12>
     97a:	00 c0       	rjmp	.+0      	; 0x97c <mpu6050_init+0x1c>
     97c:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
     97e:	0e 94 aa 04 	call	0x954	; 0x954 <mpu6050_setSleepDisabled>
     982:	8f e3       	ldi	r24, 0x3F	; 63
     984:	9c e9       	ldi	r25, 0x9C	; 156
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	f1 f7       	brne	.-4      	; 0x986 <mpu6050_init+0x26>
     98a:	00 c0       	rjmp	.+0      	; 0x98c <mpu6050_init+0x2c>
     98c:	00 00       	nop
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
     98e:	21 e0       	ldi	r18, 0x01	; 1
     990:	43 e0       	ldi	r20, 0x03	; 3
     992:	62 e0       	ldi	r22, 0x02	; 2
     994:	8b e6       	ldi	r24, 0x6B	; 107
     996:	0e 94 35 04 	call	0x86a	; 0x86a <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
     99a:	23 e0       	ldi	r18, 0x03	; 3
     99c:	43 e0       	ldi	r20, 0x03	; 3
     99e:	62 e0       	ldi	r22, 0x02	; 2
     9a0:	8a e1       	ldi	r24, 0x1A	; 26
     9a2:	0e 94 35 04 	call	0x86a	; 0x86a <mpu6050_writeBits>
    //set sample rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
     9a6:	64 e0       	ldi	r22, 0x04	; 4
     9a8:	89 e1       	ldi	r24, 0x19	; 25
     9aa:	0e 94 25 04 	call	0x84a	; 0x84a <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	42 e0       	ldi	r20, 0x02	; 2
     9b2:	64 e0       	ldi	r22, 0x04	; 4
     9b4:	8b e1       	ldi	r24, 0x1B	; 27
     9b6:	0e 94 35 04 	call	0x86a	; 0x86a <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	42 e0       	ldi	r20, 0x02	; 2
     9be:	64 e0       	ldi	r22, 0x04	; 4
     9c0:	8c e1       	ldi	r24, 0x1C	; 28
     9c2:	0e 94 35 04 	call	0x86a	; 0x86a <mpu6050_writeBits>
     9c6:	08 95       	ret

000009c8 <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     9c8:	8f 92       	push	r8
     9ca:	9f 92       	push	r9
     9cc:	af 92       	push	r10
     9ce:	bf 92       	push	r11
     9d0:	cf 92       	push	r12
     9d2:	df 92       	push	r13
     9d4:	ef 92       	push	r14
     9d6:	ff 92       	push	r15
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	4c 01       	movw	r8, r24
     9e2:	5b 01       	movw	r10, r22
     9e4:	6a 01       	movw	r12, r20
     9e6:	e9 01       	movw	r28, r18
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
     9e8:	49 e4       	ldi	r20, 0x49	; 73
     9ea:	51 e0       	ldi	r21, 0x01	; 1
     9ec:	6e e0       	ldi	r22, 0x0E	; 14
     9ee:	8b e3       	ldi	r24, 0x3B	; 59
     9f0:	0e 94 a9 03 	call	0x752	; 0x752 <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     9f4:	e9 e4       	ldi	r30, 0x49	; 73
     9f6:	f1 e0       	ldi	r31, 0x01	; 1
     9f8:	20 81       	ld	r18, Z
     9fa:	81 81       	ldd	r24, Z+1	; 0x01
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	92 2b       	or	r25, r18
     a00:	d4 01       	movw	r26, r8
     a02:	8d 93       	st	X+, r24
     a04:	9c 93       	st	X, r25
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     a06:	22 81       	ldd	r18, Z+2	; 0x02
     a08:	83 81       	ldd	r24, Z+3	; 0x03
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	92 2b       	or	r25, r18
     a0e:	d5 01       	movw	r26, r10
     a10:	8d 93       	st	X+, r24
     a12:	9c 93       	st	X, r25
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
     a14:	24 81       	ldd	r18, Z+4	; 0x04
     a16:	85 81       	ldd	r24, Z+5	; 0x05
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	92 2b       	or	r25, r18
     a1c:	d6 01       	movw	r26, r12
     a1e:	8d 93       	st	X+, r24
     a20:	9c 93       	st	X, r25
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     a22:	20 85       	ldd	r18, Z+8	; 0x08
     a24:	81 85       	ldd	r24, Z+9	; 0x09
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	92 2b       	or	r25, r18
     a2a:	99 83       	std	Y+1, r25	; 0x01
     a2c:	88 83       	st	Y, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     a2e:	22 85       	ldd	r18, Z+10	; 0x0a
     a30:	83 85       	ldd	r24, Z+11	; 0x0b
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	92 2b       	or	r25, r18
     a36:	d8 01       	movw	r26, r16
     a38:	8d 93       	st	X+, r24
     a3a:	9c 93       	st	X, r25
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     a3c:	24 85       	ldd	r18, Z+12	; 0x0c
     a3e:	85 85       	ldd	r24, Z+13	; 0x0d
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	92 2b       	or	r25, r18
     a44:	f7 01       	movw	r30, r14
     a46:	91 83       	std	Z+1, r25	; 0x01
     a48:	80 83       	st	Z, r24
}
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	df 90       	pop	r13
     a58:	cf 90       	pop	r12
     a5a:	bf 90       	pop	r11
     a5c:	af 90       	pop	r10
     a5e:	9f 90       	pop	r9
     a60:	8f 90       	pop	r8
     a62:	08 95       	ret

00000a64 <mpu6050_getConvData>:

/*
 * get raw data converted to g and deg/sec values
 */
void mpu6050_getConvData(double* axg, double* ayg, double* azg, double* gxds, double* gyds, double* gzds) {
     a64:	2f 92       	push	r2
     a66:	3f 92       	push	r3
     a68:	4f 92       	push	r4
     a6a:	5f 92       	push	r5
     a6c:	6f 92       	push	r6
     a6e:	7f 92       	push	r7
     a70:	8f 92       	push	r8
     a72:	9f 92       	push	r9
     a74:	af 92       	push	r10
     a76:	bf 92       	push	r11
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
     a8c:	2c 97       	sbiw	r28, 0x0c	; 12
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	f8 94       	cli
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	cd bf       	out	0x3d, r28	; 61
     a98:	3c 01       	movw	r6, r24
     a9a:	4b 01       	movw	r8, r22
     a9c:	5a 01       	movw	r10, r20
     a9e:	69 01       	movw	r12, r18
     aa0:	28 01       	movw	r4, r16
     aa2:	17 01       	movw	r2, r14
	int16_t ax = 0;
     aa4:	1a 82       	std	Y+2, r1	; 0x02
     aa6:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
     aa8:	1c 82       	std	Y+4, r1	; 0x04
     aaa:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
     aac:	1e 82       	std	Y+6, r1	; 0x06
     aae:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
     ab0:	18 86       	std	Y+8, r1	; 0x08
     ab2:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
     ab4:	1a 86       	std	Y+10, r1	; 0x0a
     ab6:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
     ab8:	1c 86       	std	Y+12, r1	; 0x0c
     aba:	1b 86       	std	Y+11, r1	; 0x0b
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
     abc:	ce 01       	movw	r24, r28
     abe:	0b 96       	adiw	r24, 0x0b	; 11
     ac0:	7c 01       	movw	r14, r24
     ac2:	8e 01       	movw	r16, r28
     ac4:	07 5f       	subi	r16, 0xF7	; 247
     ac6:	1f 4f       	sbci	r17, 0xFF	; 255
     ac8:	9e 01       	movw	r18, r28
     aca:	29 5f       	subi	r18, 0xF9	; 249
     acc:	3f 4f       	sbci	r19, 0xFF	; 255
     ace:	ae 01       	movw	r20, r28
     ad0:	4b 5f       	subi	r20, 0xFB	; 251
     ad2:	5f 4f       	sbci	r21, 0xFF	; 255
     ad4:	be 01       	movw	r22, r28
     ad6:	6d 5f       	subi	r22, 0xFD	; 253
     ad8:	7f 4f       	sbci	r23, 0xFF	; 255
     ada:	0a 97       	sbiw	r24, 0x0a	; 10
     adc:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <mpu6050_getRawData>

	#if MPU6050_CALIBRATEDACCGYRO == 1
    *axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
     ae0:	69 81       	ldd	r22, Y+1	; 0x01
     ae2:	7a 81       	ldd	r23, Y+2	; 0x02
     ae4:	07 2e       	mov	r0, r23
     ae6:	00 0c       	add	r0, r0
     ae8:	88 0b       	sbc	r24, r24
     aea:	99 0b       	sbc	r25, r25
     aec:	0e 94 74 07 	call	0xee8	; 0xee8 <__floatsisf>
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	40 e8       	ldi	r20, 0x80	; 128
     af6:	58 e3       	ldi	r21, 0x38	; 56
     af8:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     afc:	f3 01       	movw	r30, r6
     afe:	60 83       	st	Z, r22
     b00:	71 83       	std	Z+1, r23	; 0x01
     b02:	82 83       	std	Z+2, r24	; 0x02
     b04:	93 83       	std	Z+3, r25	; 0x03
    *ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
     b06:	6b 81       	ldd	r22, Y+3	; 0x03
     b08:	7c 81       	ldd	r23, Y+4	; 0x04
     b0a:	07 2e       	mov	r0, r23
     b0c:	00 0c       	add	r0, r0
     b0e:	88 0b       	sbc	r24, r24
     b10:	99 0b       	sbc	r25, r25
     b12:	0e 94 74 07 	call	0xee8	; 0xee8 <__floatsisf>
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e8       	ldi	r20, 0x80	; 128
     b1c:	58 e3       	ldi	r21, 0x38	; 56
     b1e:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     b22:	f4 01       	movw	r30, r8
     b24:	60 83       	st	Z, r22
     b26:	71 83       	std	Z+1, r23	; 0x01
     b28:	82 83       	std	Z+2, r24	; 0x02
     b2a:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
     b2c:	6d 81       	ldd	r22, Y+5	; 0x05
     b2e:	7e 81       	ldd	r23, Y+6	; 0x06
     b30:	07 2e       	mov	r0, r23
     b32:	00 0c       	add	r0, r0
     b34:	88 0b       	sbc	r24, r24
     b36:	99 0b       	sbc	r25, r25
     b38:	0e 94 74 07 	call	0xee8	; 0xee8 <__floatsisf>
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	40 e8       	ldi	r20, 0x80	; 128
     b42:	58 e3       	ldi	r21, 0x38	; 56
     b44:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     b48:	f5 01       	movw	r30, r10
     b4a:	60 83       	st	Z, r22
     b4c:	71 83       	std	Z+1, r23	; 0x01
     b4e:	82 83       	std	Z+2, r24	; 0x02
     b50:	93 83       	std	Z+3, r25	; 0x03
    *gxds = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN;
     b52:	6f 81       	ldd	r22, Y+7	; 0x07
     b54:	78 85       	ldd	r23, Y+8	; 0x08
     b56:	66 5d       	subi	r22, 0xD6	; 214
     b58:	7f 4f       	sbci	r23, 0xFF	; 255
     b5a:	07 2e       	mov	r0, r23
     b5c:	00 0c       	add	r0, r0
     b5e:	88 0b       	sbc	r24, r24
     b60:	99 0b       	sbc	r25, r25
     b62:	0e 94 74 07 	call	0xee8	; 0xee8 <__floatsisf>
     b66:	23 e3       	ldi	r18, 0x33	; 51
     b68:	33 e3       	ldi	r19, 0x33	; 51
     b6a:	43 e8       	ldi	r20, 0x83	; 131
     b6c:	51 e4       	ldi	r21, 0x41	; 65
     b6e:	0e 94 00 07 	call	0xe00	; 0xe00 <__divsf3>
     b72:	f6 01       	movw	r30, r12
     b74:	60 83       	st	Z, r22
     b76:	71 83       	std	Z+1, r23	; 0x01
     b78:	82 83       	std	Z+2, r24	; 0x02
     b7a:	93 83       	std	Z+3, r25	; 0x03
	*gyds = (double)(gy-MPU6050_GYOFFSET)/MPU6050_GYGAIN;
     b7c:	69 85       	ldd	r22, Y+9	; 0x09
     b7e:	7a 85       	ldd	r23, Y+10	; 0x0a
     b80:	69 50       	subi	r22, 0x09	; 9
     b82:	71 09       	sbc	r23, r1
     b84:	07 2e       	mov	r0, r23
     b86:	00 0c       	add	r0, r0
     b88:	88 0b       	sbc	r24, r24
     b8a:	99 0b       	sbc	r25, r25
     b8c:	0e 94 74 07 	call	0xee8	; 0xee8 <__floatsisf>
     b90:	23 e3       	ldi	r18, 0x33	; 51
     b92:	33 e3       	ldi	r19, 0x33	; 51
     b94:	43 e8       	ldi	r20, 0x83	; 131
     b96:	51 e4       	ldi	r21, 0x41	; 65
     b98:	0e 94 00 07 	call	0xe00	; 0xe00 <__divsf3>
     b9c:	f2 01       	movw	r30, r4
     b9e:	60 83       	st	Z, r22
     ba0:	71 83       	std	Z+1, r23	; 0x01
     ba2:	82 83       	std	Z+2, r24	; 0x02
     ba4:	93 83       	std	Z+3, r25	; 0x03
	*gzds = (double)(gz-MPU6050_GZOFFSET)/MPU6050_GZGAIN;
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	63 5e       	subi	r22, 0xE3	; 227
     bac:	7f 4f       	sbci	r23, 0xFF	; 255
     bae:	07 2e       	mov	r0, r23
     bb0:	00 0c       	add	r0, r0
     bb2:	88 0b       	sbc	r24, r24
     bb4:	99 0b       	sbc	r25, r25
     bb6:	0e 94 74 07 	call	0xee8	; 0xee8 <__floatsisf>
     bba:	23 e3       	ldi	r18, 0x33	; 51
     bbc:	33 e3       	ldi	r19, 0x33	; 51
     bbe:	43 e8       	ldi	r20, 0x83	; 131
     bc0:	51 e4       	ldi	r21, 0x41	; 65
     bc2:	0e 94 00 07 	call	0xe00	; 0xe00 <__divsf3>
     bc6:	f1 01       	movw	r30, r2
     bc8:	60 83       	st	Z, r22
     bca:	71 83       	std	Z+1, r23	; 0x01
     bcc:	82 83       	std	Z+2, r24	; 0x02
     bce:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az)/MPU6050_AGAIN;
    *gxds = (double)(gx)/MPU6050_GGAIN;
	*gyds = (double)(gy)/MPU6050_GGAIN;
	*gzds = (double)(gz)/MPU6050_GGAIN;
	#endif
}
     bd0:	2c 96       	adiw	r28, 0x0c	; 12
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	df 90       	pop	r13
     bea:	cf 90       	pop	r12
     bec:	bf 90       	pop	r11
     bee:	af 90       	pop	r10
     bf0:	9f 90       	pop	r9
     bf2:	8f 90       	pop	r8
     bf4:	7f 90       	pop	r7
     bf6:	6f 90       	pop	r6
     bf8:	5f 90       	pop	r5
     bfa:	4f 90       	pop	r4
     bfc:	3f 90       	pop	r3
     bfe:	2f 90       	pop	r2
     c00:	08 95       	ret

00000c02 <__vector_18>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
     c0c:	2f 93       	push	r18
     c0e:	8f 93       	push	r24
     c10:	9f 93       	push	r25
     c12:	ef 93       	push	r30
     c14:	ff 93       	push	r31
     c16:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     c1a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     c1e:	88 71       	andi	r24, 0x18	; 24
     c20:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <UART_RxHead>
     c24:	ef 5f       	subi	r30, 0xFF	; 255
     c26:	ef 71       	andi	r30, 0x1F	; 31
     c28:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <UART_RxTail>
     c2c:	e9 17       	cp	r30, r25
     c2e:	39 f0       	breq	.+14     	; 0xc3e <__vector_18+0x3c>
     c30:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <UART_RxHead>
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	e7 5f       	subi	r30, 0xF7	; 247
     c38:	fe 4f       	sbci	r31, 0xFE	; 254
     c3a:	20 83       	st	Z, r18
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <__vector_18+0x3e>
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
     c44:	ff 91       	pop	r31
     c46:	ef 91       	pop	r30
     c48:	9f 91       	pop	r25
     c4a:	8f 91       	pop	r24
     c4c:	2f 91       	pop	r18
     c4e:	0f 90       	pop	r0
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	0f 90       	pop	r0
     c54:	1f 90       	pop	r1
     c56:	18 95       	reti

00000c58 <__vector_19>:
     c58:	1f 92       	push	r1
     c5a:	0f 92       	push	r0
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	0f 92       	push	r0
     c60:	11 24       	eor	r1, r1
     c62:	8f 93       	push	r24
     c64:	9f 93       	push	r25
     c66:	ef 93       	push	r30
     c68:	ff 93       	push	r31
     c6a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <UART_TxHead>
     c6e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <UART_TxTail>
     c72:	98 17       	cp	r25, r24
     c74:	69 f0       	breq	.+26     	; 0xc90 <__vector_19+0x38>
     c76:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <UART_TxTail>
     c7a:	ef 5f       	subi	r30, 0xFF	; 255
     c7c:	ef 71       	andi	r30, 0x1F	; 31
     c7e:	e0 93 07 01 	sts	0x0107, r30	; 0x800107 <UART_TxTail>
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	e7 5d       	subi	r30, 0xD7	; 215
     c86:	fe 4f       	sbci	r31, 0xFE	; 254
     c88:	80 81       	ld	r24, Z
     c8a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__vector_19+0x42>
     c90:	e1 ec       	ldi	r30, 0xC1	; 193
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	8f 7d       	andi	r24, 0xDF	; 223
     c98:	80 83       	st	Z, r24
     c9a:	ff 91       	pop	r31
     c9c:	ef 91       	pop	r30
     c9e:	9f 91       	pop	r25
     ca0:	8f 91       	pop	r24
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	0f 90       	pop	r0
     ca8:	1f 90       	pop	r1
     caa:	18 95       	reti

00000cac <uart_init>:
     cac:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <UART_TxHead>
     cb0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <UART_TxTail>
     cb4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <UART_RxHead>
     cb8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <UART_RxTail>
     cbc:	99 23       	and	r25, r25
     cbe:	24 f4       	brge	.+8      	; 0xcc8 <uart_init+0x1c>
     cc0:	22 e0       	ldi	r18, 0x02	; 2
     cc2:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     cc6:	9f 77       	andi	r25, 0x7F	; 127
     cc8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     ccc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     cd0:	88 e9       	ldi	r24, 0x98	; 152
     cd2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     cd6:	86 e0       	ldi	r24, 0x06	; 6
     cd8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     cdc:	08 95       	ret

00000cde <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     cde:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <UART_TxHead>
     ce2:	2f 5f       	subi	r18, 0xFF	; 255
     ce4:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
     ce6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <UART_TxTail>
     cea:	29 17       	cp	r18, r25
     cec:	e1 f3       	breq	.-8      	; 0xce6 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     cee:	e2 2f       	mov	r30, r18
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	e7 5d       	subi	r30, 0xD7	; 215
     cf4:	fe 4f       	sbci	r31, 0xFE	; 254
     cf6:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     cf8:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     cfc:	e1 ec       	ldi	r30, 0xC1	; 193
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	80 62       	ori	r24, 0x20	; 32
     d04:	80 83       	st	Z, r24
     d06:	08 95       	ret

00000d08 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	ec 01       	movw	r28, r24
    while (*s) 
     d0e:	88 81       	ld	r24, Y
     d10:	88 23       	and	r24, r24
     d12:	31 f0       	breq	.+12     	; 0xd20 <uart_puts+0x18>
     d14:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
     d16:	0e 94 6f 06 	call	0xcde	; 0xcde <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     d1a:	89 91       	ld	r24, Y+
     d1c:	81 11       	cpse	r24, r1
     d1e:	fb cf       	rjmp	.-10     	; 0xd16 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <__subsf3>:
     d26:	50 58       	subi	r21, 0x80	; 128

00000d28 <__addsf3>:
     d28:	bb 27       	eor	r27, r27
     d2a:	aa 27       	eor	r26, r26
     d2c:	0e 94 ab 06 	call	0xd56	; 0xd56 <__addsf3x>
     d30:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__fp_round>
     d34:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_pscA>
     d38:	38 f0       	brcs	.+14     	; 0xd48 <__addsf3+0x20>
     d3a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_pscB>
     d3e:	20 f0       	brcs	.+8      	; 0xd48 <__addsf3+0x20>
     d40:	39 f4       	brne	.+14     	; 0xd50 <__addsf3+0x28>
     d42:	9f 3f       	cpi	r25, 0xFF	; 255
     d44:	19 f4       	brne	.+6      	; 0xd4c <__addsf3+0x24>
     d46:	26 f4       	brtc	.+8      	; 0xd50 <__addsf3+0x28>
     d48:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_nan>
     d4c:	0e f4       	brtc	.+2      	; 0xd50 <__addsf3+0x28>
     d4e:	e0 95       	com	r30
     d50:	e7 fb       	bst	r30, 7
     d52:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__fp_inf>

00000d56 <__addsf3x>:
     d56:	e9 2f       	mov	r30, r25
     d58:	0e 94 d7 07 	call	0xfae	; 0xfae <__fp_split3>
     d5c:	58 f3       	brcs	.-42     	; 0xd34 <__addsf3+0xc>
     d5e:	ba 17       	cp	r27, r26
     d60:	62 07       	cpc	r22, r18
     d62:	73 07       	cpc	r23, r19
     d64:	84 07       	cpc	r24, r20
     d66:	95 07       	cpc	r25, r21
     d68:	20 f0       	brcs	.+8      	; 0xd72 <__addsf3x+0x1c>
     d6a:	79 f4       	brne	.+30     	; 0xd8a <__addsf3x+0x34>
     d6c:	a6 f5       	brtc	.+104    	; 0xdd6 <__addsf3x+0x80>
     d6e:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__fp_zero>
     d72:	0e f4       	brtc	.+2      	; 0xd76 <__addsf3x+0x20>
     d74:	e0 95       	com	r30
     d76:	0b 2e       	mov	r0, r27
     d78:	ba 2f       	mov	r27, r26
     d7a:	a0 2d       	mov	r26, r0
     d7c:	0b 01       	movw	r0, r22
     d7e:	b9 01       	movw	r22, r18
     d80:	90 01       	movw	r18, r0
     d82:	0c 01       	movw	r0, r24
     d84:	ca 01       	movw	r24, r20
     d86:	a0 01       	movw	r20, r0
     d88:	11 24       	eor	r1, r1
     d8a:	ff 27       	eor	r31, r31
     d8c:	59 1b       	sub	r21, r25
     d8e:	99 f0       	breq	.+38     	; 0xdb6 <__addsf3x+0x60>
     d90:	59 3f       	cpi	r21, 0xF9	; 249
     d92:	50 f4       	brcc	.+20     	; 0xda8 <__addsf3x+0x52>
     d94:	50 3e       	cpi	r21, 0xE0	; 224
     d96:	68 f1       	brcs	.+90     	; 0xdf2 <__addsf3x+0x9c>
     d98:	1a 16       	cp	r1, r26
     d9a:	f0 40       	sbci	r31, 0x00	; 0
     d9c:	a2 2f       	mov	r26, r18
     d9e:	23 2f       	mov	r18, r19
     da0:	34 2f       	mov	r19, r20
     da2:	44 27       	eor	r20, r20
     da4:	58 5f       	subi	r21, 0xF8	; 248
     da6:	f3 cf       	rjmp	.-26     	; 0xd8e <__addsf3x+0x38>
     da8:	46 95       	lsr	r20
     daa:	37 95       	ror	r19
     dac:	27 95       	ror	r18
     dae:	a7 95       	ror	r26
     db0:	f0 40       	sbci	r31, 0x00	; 0
     db2:	53 95       	inc	r21
     db4:	c9 f7       	brne	.-14     	; 0xda8 <__addsf3x+0x52>
     db6:	7e f4       	brtc	.+30     	; 0xdd6 <__addsf3x+0x80>
     db8:	1f 16       	cp	r1, r31
     dba:	ba 0b       	sbc	r27, r26
     dbc:	62 0b       	sbc	r22, r18
     dbe:	73 0b       	sbc	r23, r19
     dc0:	84 0b       	sbc	r24, r20
     dc2:	ba f0       	brmi	.+46     	; 0xdf2 <__addsf3x+0x9c>
     dc4:	91 50       	subi	r25, 0x01	; 1
     dc6:	a1 f0       	breq	.+40     	; 0xdf0 <__addsf3x+0x9a>
     dc8:	ff 0f       	add	r31, r31
     dca:	bb 1f       	adc	r27, r27
     dcc:	66 1f       	adc	r22, r22
     dce:	77 1f       	adc	r23, r23
     dd0:	88 1f       	adc	r24, r24
     dd2:	c2 f7       	brpl	.-16     	; 0xdc4 <__addsf3x+0x6e>
     dd4:	0e c0       	rjmp	.+28     	; 0xdf2 <__addsf3x+0x9c>
     dd6:	ba 0f       	add	r27, r26
     dd8:	62 1f       	adc	r22, r18
     dda:	73 1f       	adc	r23, r19
     ddc:	84 1f       	adc	r24, r20
     dde:	48 f4       	brcc	.+18     	; 0xdf2 <__addsf3x+0x9c>
     de0:	87 95       	ror	r24
     de2:	77 95       	ror	r23
     de4:	67 95       	ror	r22
     de6:	b7 95       	ror	r27
     de8:	f7 95       	ror	r31
     dea:	9e 3f       	cpi	r25, 0xFE	; 254
     dec:	08 f0       	brcs	.+2      	; 0xdf0 <__addsf3x+0x9a>
     dee:	b0 cf       	rjmp	.-160    	; 0xd50 <__addsf3+0x28>
     df0:	93 95       	inc	r25
     df2:	88 0f       	add	r24, r24
     df4:	08 f0       	brcs	.+2      	; 0xdf8 <__addsf3x+0xa2>
     df6:	99 27       	eor	r25, r25
     df8:	ee 0f       	add	r30, r30
     dfa:	97 95       	ror	r25
     dfc:	87 95       	ror	r24
     dfe:	08 95       	ret

00000e00 <__divsf3>:
     e00:	0e 94 14 07 	call	0xe28	; 0xe28 <__divsf3x>
     e04:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__fp_round>
     e08:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_pscB>
     e0c:	58 f0       	brcs	.+22     	; 0xe24 <__divsf3+0x24>
     e0e:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_pscA>
     e12:	40 f0       	brcs	.+16     	; 0xe24 <__divsf3+0x24>
     e14:	29 f4       	brne	.+10     	; 0xe20 <__divsf3+0x20>
     e16:	5f 3f       	cpi	r21, 0xFF	; 255
     e18:	29 f0       	breq	.+10     	; 0xe24 <__divsf3+0x24>
     e1a:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__fp_inf>
     e1e:	51 11       	cpse	r21, r1
     e20:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__fp_szero>
     e24:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_nan>

00000e28 <__divsf3x>:
     e28:	0e 94 d7 07 	call	0xfae	; 0xfae <__fp_split3>
     e2c:	68 f3       	brcs	.-38     	; 0xe08 <__divsf3+0x8>

00000e2e <__divsf3_pse>:
     e2e:	99 23       	and	r25, r25
     e30:	b1 f3       	breq	.-20     	; 0xe1e <__divsf3+0x1e>
     e32:	55 23       	and	r21, r21
     e34:	91 f3       	breq	.-28     	; 0xe1a <__divsf3+0x1a>
     e36:	95 1b       	sub	r25, r21
     e38:	55 0b       	sbc	r21, r21
     e3a:	bb 27       	eor	r27, r27
     e3c:	aa 27       	eor	r26, r26
     e3e:	62 17       	cp	r22, r18
     e40:	73 07       	cpc	r23, r19
     e42:	84 07       	cpc	r24, r20
     e44:	38 f0       	brcs	.+14     	; 0xe54 <__divsf3_pse+0x26>
     e46:	9f 5f       	subi	r25, 0xFF	; 255
     e48:	5f 4f       	sbci	r21, 0xFF	; 255
     e4a:	22 0f       	add	r18, r18
     e4c:	33 1f       	adc	r19, r19
     e4e:	44 1f       	adc	r20, r20
     e50:	aa 1f       	adc	r26, r26
     e52:	a9 f3       	breq	.-22     	; 0xe3e <__divsf3_pse+0x10>
     e54:	35 d0       	rcall	.+106    	; 0xec0 <__divsf3_pse+0x92>
     e56:	0e 2e       	mov	r0, r30
     e58:	3a f0       	brmi	.+14     	; 0xe68 <__divsf3_pse+0x3a>
     e5a:	e0 e8       	ldi	r30, 0x80	; 128
     e5c:	32 d0       	rcall	.+100    	; 0xec2 <__divsf3_pse+0x94>
     e5e:	91 50       	subi	r25, 0x01	; 1
     e60:	50 40       	sbci	r21, 0x00	; 0
     e62:	e6 95       	lsr	r30
     e64:	00 1c       	adc	r0, r0
     e66:	ca f7       	brpl	.-14     	; 0xe5a <__divsf3_pse+0x2c>
     e68:	2b d0       	rcall	.+86     	; 0xec0 <__divsf3_pse+0x92>
     e6a:	fe 2f       	mov	r31, r30
     e6c:	29 d0       	rcall	.+82     	; 0xec0 <__divsf3_pse+0x92>
     e6e:	66 0f       	add	r22, r22
     e70:	77 1f       	adc	r23, r23
     e72:	88 1f       	adc	r24, r24
     e74:	bb 1f       	adc	r27, r27
     e76:	26 17       	cp	r18, r22
     e78:	37 07       	cpc	r19, r23
     e7a:	48 07       	cpc	r20, r24
     e7c:	ab 07       	cpc	r26, r27
     e7e:	b0 e8       	ldi	r27, 0x80	; 128
     e80:	09 f0       	breq	.+2      	; 0xe84 <__divsf3_pse+0x56>
     e82:	bb 0b       	sbc	r27, r27
     e84:	80 2d       	mov	r24, r0
     e86:	bf 01       	movw	r22, r30
     e88:	ff 27       	eor	r31, r31
     e8a:	93 58       	subi	r25, 0x83	; 131
     e8c:	5f 4f       	sbci	r21, 0xFF	; 255
     e8e:	3a f0       	brmi	.+14     	; 0xe9e <__divsf3_pse+0x70>
     e90:	9e 3f       	cpi	r25, 0xFE	; 254
     e92:	51 05       	cpc	r21, r1
     e94:	78 f0       	brcs	.+30     	; 0xeb4 <__divsf3_pse+0x86>
     e96:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__fp_inf>
     e9a:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__fp_szero>
     e9e:	5f 3f       	cpi	r21, 0xFF	; 255
     ea0:	e4 f3       	brlt	.-8      	; 0xe9a <__divsf3_pse+0x6c>
     ea2:	98 3e       	cpi	r25, 0xE8	; 232
     ea4:	d4 f3       	brlt	.-12     	; 0xe9a <__divsf3_pse+0x6c>
     ea6:	86 95       	lsr	r24
     ea8:	77 95       	ror	r23
     eaa:	67 95       	ror	r22
     eac:	b7 95       	ror	r27
     eae:	f7 95       	ror	r31
     eb0:	9f 5f       	subi	r25, 0xFF	; 255
     eb2:	c9 f7       	brne	.-14     	; 0xea6 <__divsf3_pse+0x78>
     eb4:	88 0f       	add	r24, r24
     eb6:	91 1d       	adc	r25, r1
     eb8:	96 95       	lsr	r25
     eba:	87 95       	ror	r24
     ebc:	97 f9       	bld	r25, 7
     ebe:	08 95       	ret
     ec0:	e1 e0       	ldi	r30, 0x01	; 1
     ec2:	66 0f       	add	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	88 1f       	adc	r24, r24
     ec8:	bb 1f       	adc	r27, r27
     eca:	62 17       	cp	r22, r18
     ecc:	73 07       	cpc	r23, r19
     ece:	84 07       	cpc	r24, r20
     ed0:	ba 07       	cpc	r27, r26
     ed2:	20 f0       	brcs	.+8      	; 0xedc <__divsf3_pse+0xae>
     ed4:	62 1b       	sub	r22, r18
     ed6:	73 0b       	sbc	r23, r19
     ed8:	84 0b       	sbc	r24, r20
     eda:	ba 0b       	sbc	r27, r26
     edc:	ee 1f       	adc	r30, r30
     ede:	88 f7       	brcc	.-30     	; 0xec2 <__divsf3_pse+0x94>
     ee0:	e0 95       	com	r30
     ee2:	08 95       	ret

00000ee4 <__floatunsisf>:
     ee4:	e8 94       	clt
     ee6:	09 c0       	rjmp	.+18     	; 0xefa <__floatsisf+0x12>

00000ee8 <__floatsisf>:
     ee8:	97 fb       	bst	r25, 7
     eea:	3e f4       	brtc	.+14     	; 0xefa <__floatsisf+0x12>
     eec:	90 95       	com	r25
     eee:	80 95       	com	r24
     ef0:	70 95       	com	r23
     ef2:	61 95       	neg	r22
     ef4:	7f 4f       	sbci	r23, 0xFF	; 255
     ef6:	8f 4f       	sbci	r24, 0xFF	; 255
     ef8:	9f 4f       	sbci	r25, 0xFF	; 255
     efa:	99 23       	and	r25, r25
     efc:	a9 f0       	breq	.+42     	; 0xf28 <__floatsisf+0x40>
     efe:	f9 2f       	mov	r31, r25
     f00:	96 e9       	ldi	r25, 0x96	; 150
     f02:	bb 27       	eor	r27, r27
     f04:	93 95       	inc	r25
     f06:	f6 95       	lsr	r31
     f08:	87 95       	ror	r24
     f0a:	77 95       	ror	r23
     f0c:	67 95       	ror	r22
     f0e:	b7 95       	ror	r27
     f10:	f1 11       	cpse	r31, r1
     f12:	f8 cf       	rjmp	.-16     	; 0xf04 <__floatsisf+0x1c>
     f14:	fa f4       	brpl	.+62     	; 0xf54 <__floatsisf+0x6c>
     f16:	bb 0f       	add	r27, r27
     f18:	11 f4       	brne	.+4      	; 0xf1e <__floatsisf+0x36>
     f1a:	60 ff       	sbrs	r22, 0
     f1c:	1b c0       	rjmp	.+54     	; 0xf54 <__floatsisf+0x6c>
     f1e:	6f 5f       	subi	r22, 0xFF	; 255
     f20:	7f 4f       	sbci	r23, 0xFF	; 255
     f22:	8f 4f       	sbci	r24, 0xFF	; 255
     f24:	9f 4f       	sbci	r25, 0xFF	; 255
     f26:	16 c0       	rjmp	.+44     	; 0xf54 <__floatsisf+0x6c>
     f28:	88 23       	and	r24, r24
     f2a:	11 f0       	breq	.+4      	; 0xf30 <__floatsisf+0x48>
     f2c:	96 e9       	ldi	r25, 0x96	; 150
     f2e:	11 c0       	rjmp	.+34     	; 0xf52 <__floatsisf+0x6a>
     f30:	77 23       	and	r23, r23
     f32:	21 f0       	breq	.+8      	; 0xf3c <__floatsisf+0x54>
     f34:	9e e8       	ldi	r25, 0x8E	; 142
     f36:	87 2f       	mov	r24, r23
     f38:	76 2f       	mov	r23, r22
     f3a:	05 c0       	rjmp	.+10     	; 0xf46 <__floatsisf+0x5e>
     f3c:	66 23       	and	r22, r22
     f3e:	71 f0       	breq	.+28     	; 0xf5c <__floatsisf+0x74>
     f40:	96 e8       	ldi	r25, 0x86	; 134
     f42:	86 2f       	mov	r24, r22
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	2a f0       	brmi	.+10     	; 0xf54 <__floatsisf+0x6c>
     f4a:	9a 95       	dec	r25
     f4c:	66 0f       	add	r22, r22
     f4e:	77 1f       	adc	r23, r23
     f50:	88 1f       	adc	r24, r24
     f52:	da f7       	brpl	.-10     	; 0xf4a <__floatsisf+0x62>
     f54:	88 0f       	add	r24, r24
     f56:	96 95       	lsr	r25
     f58:	87 95       	ror	r24
     f5a:	97 f9       	bld	r25, 7
     f5c:	08 95       	ret

00000f5e <__fp_inf>:
     f5e:	97 f9       	bld	r25, 7
     f60:	9f 67       	ori	r25, 0x7F	; 127
     f62:	80 e8       	ldi	r24, 0x80	; 128
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	08 95       	ret

00000f6a <__fp_nan>:
     f6a:	9f ef       	ldi	r25, 0xFF	; 255
     f6c:	80 ec       	ldi	r24, 0xC0	; 192
     f6e:	08 95       	ret

00000f70 <__fp_pscA>:
     f70:	00 24       	eor	r0, r0
     f72:	0a 94       	dec	r0
     f74:	16 16       	cp	r1, r22
     f76:	17 06       	cpc	r1, r23
     f78:	18 06       	cpc	r1, r24
     f7a:	09 06       	cpc	r0, r25
     f7c:	08 95       	ret

00000f7e <__fp_pscB>:
     f7e:	00 24       	eor	r0, r0
     f80:	0a 94       	dec	r0
     f82:	12 16       	cp	r1, r18
     f84:	13 06       	cpc	r1, r19
     f86:	14 06       	cpc	r1, r20
     f88:	05 06       	cpc	r0, r21
     f8a:	08 95       	ret

00000f8c <__fp_round>:
     f8c:	09 2e       	mov	r0, r25
     f8e:	03 94       	inc	r0
     f90:	00 0c       	add	r0, r0
     f92:	11 f4       	brne	.+4      	; 0xf98 <__fp_round+0xc>
     f94:	88 23       	and	r24, r24
     f96:	52 f0       	brmi	.+20     	; 0xfac <__fp_round+0x20>
     f98:	bb 0f       	add	r27, r27
     f9a:	40 f4       	brcc	.+16     	; 0xfac <__fp_round+0x20>
     f9c:	bf 2b       	or	r27, r31
     f9e:	11 f4       	brne	.+4      	; 0xfa4 <__fp_round+0x18>
     fa0:	60 ff       	sbrs	r22, 0
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <__fp_round+0x20>
     fa4:	6f 5f       	subi	r22, 0xFF	; 255
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	8f 4f       	sbci	r24, 0xFF	; 255
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
     fac:	08 95       	ret

00000fae <__fp_split3>:
     fae:	57 fd       	sbrc	r21, 7
     fb0:	90 58       	subi	r25, 0x80	; 128
     fb2:	44 0f       	add	r20, r20
     fb4:	55 1f       	adc	r21, r21
     fb6:	59 f0       	breq	.+22     	; 0xfce <__fp_splitA+0x10>
     fb8:	5f 3f       	cpi	r21, 0xFF	; 255
     fba:	71 f0       	breq	.+28     	; 0xfd8 <__fp_splitA+0x1a>
     fbc:	47 95       	ror	r20

00000fbe <__fp_splitA>:
     fbe:	88 0f       	add	r24, r24
     fc0:	97 fb       	bst	r25, 7
     fc2:	99 1f       	adc	r25, r25
     fc4:	61 f0       	breq	.+24     	; 0xfde <__fp_splitA+0x20>
     fc6:	9f 3f       	cpi	r25, 0xFF	; 255
     fc8:	79 f0       	breq	.+30     	; 0xfe8 <__fp_splitA+0x2a>
     fca:	87 95       	ror	r24
     fcc:	08 95       	ret
     fce:	12 16       	cp	r1, r18
     fd0:	13 06       	cpc	r1, r19
     fd2:	14 06       	cpc	r1, r20
     fd4:	55 1f       	adc	r21, r21
     fd6:	f2 cf       	rjmp	.-28     	; 0xfbc <__fp_split3+0xe>
     fd8:	46 95       	lsr	r20
     fda:	f1 df       	rcall	.-30     	; 0xfbe <__fp_splitA>
     fdc:	08 c0       	rjmp	.+16     	; 0xfee <__fp_splitA+0x30>
     fde:	16 16       	cp	r1, r22
     fe0:	17 06       	cpc	r1, r23
     fe2:	18 06       	cpc	r1, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	f1 cf       	rjmp	.-30     	; 0xfca <__fp_splitA+0xc>
     fe8:	86 95       	lsr	r24
     fea:	71 05       	cpc	r23, r1
     fec:	61 05       	cpc	r22, r1
     fee:	08 94       	sec
     ff0:	08 95       	ret

00000ff2 <__fp_zero>:
     ff2:	e8 94       	clt

00000ff4 <__fp_szero>:
     ff4:	bb 27       	eor	r27, r27
     ff6:	66 27       	eor	r22, r22
     ff8:	77 27       	eor	r23, r23
     ffa:	cb 01       	movw	r24, r22
     ffc:	97 f9       	bld	r25, 7
     ffe:	08 95       	ret

00001000 <__mulsf3>:
    1000:	0e 94 13 08 	call	0x1026	; 0x1026 <__mulsf3x>
    1004:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__fp_round>
    1008:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_pscA>
    100c:	38 f0       	brcs	.+14     	; 0x101c <__mulsf3+0x1c>
    100e:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_pscB>
    1012:	20 f0       	brcs	.+8      	; 0x101c <__mulsf3+0x1c>
    1014:	95 23       	and	r25, r21
    1016:	11 f0       	breq	.+4      	; 0x101c <__mulsf3+0x1c>
    1018:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__fp_inf>
    101c:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_nan>
    1020:	11 24       	eor	r1, r1
    1022:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__fp_szero>

00001026 <__mulsf3x>:
    1026:	0e 94 d7 07 	call	0xfae	; 0xfae <__fp_split3>
    102a:	70 f3       	brcs	.-36     	; 0x1008 <__mulsf3+0x8>

0000102c <__mulsf3_pse>:
    102c:	95 9f       	mul	r25, r21
    102e:	c1 f3       	breq	.-16     	; 0x1020 <__mulsf3+0x20>
    1030:	95 0f       	add	r25, r21
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	55 1f       	adc	r21, r21
    1036:	62 9f       	mul	r22, r18
    1038:	f0 01       	movw	r30, r0
    103a:	72 9f       	mul	r23, r18
    103c:	bb 27       	eor	r27, r27
    103e:	f0 0d       	add	r31, r0
    1040:	b1 1d       	adc	r27, r1
    1042:	63 9f       	mul	r22, r19
    1044:	aa 27       	eor	r26, r26
    1046:	f0 0d       	add	r31, r0
    1048:	b1 1d       	adc	r27, r1
    104a:	aa 1f       	adc	r26, r26
    104c:	64 9f       	mul	r22, r20
    104e:	66 27       	eor	r22, r22
    1050:	b0 0d       	add	r27, r0
    1052:	a1 1d       	adc	r26, r1
    1054:	66 1f       	adc	r22, r22
    1056:	82 9f       	mul	r24, r18
    1058:	22 27       	eor	r18, r18
    105a:	b0 0d       	add	r27, r0
    105c:	a1 1d       	adc	r26, r1
    105e:	62 1f       	adc	r22, r18
    1060:	73 9f       	mul	r23, r19
    1062:	b0 0d       	add	r27, r0
    1064:	a1 1d       	adc	r26, r1
    1066:	62 1f       	adc	r22, r18
    1068:	83 9f       	mul	r24, r19
    106a:	a0 0d       	add	r26, r0
    106c:	61 1d       	adc	r22, r1
    106e:	22 1f       	adc	r18, r18
    1070:	74 9f       	mul	r23, r20
    1072:	33 27       	eor	r19, r19
    1074:	a0 0d       	add	r26, r0
    1076:	61 1d       	adc	r22, r1
    1078:	23 1f       	adc	r18, r19
    107a:	84 9f       	mul	r24, r20
    107c:	60 0d       	add	r22, r0
    107e:	21 1d       	adc	r18, r1
    1080:	82 2f       	mov	r24, r18
    1082:	76 2f       	mov	r23, r22
    1084:	6a 2f       	mov	r22, r26
    1086:	11 24       	eor	r1, r1
    1088:	9f 57       	subi	r25, 0x7F	; 127
    108a:	50 40       	sbci	r21, 0x00	; 0
    108c:	9a f0       	brmi	.+38     	; 0x10b4 <__mulsf3_pse+0x88>
    108e:	f1 f0       	breq	.+60     	; 0x10cc <__mulsf3_pse+0xa0>
    1090:	88 23       	and	r24, r24
    1092:	4a f0       	brmi	.+18     	; 0x10a6 <__mulsf3_pse+0x7a>
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	bb 1f       	adc	r27, r27
    109a:	66 1f       	adc	r22, r22
    109c:	77 1f       	adc	r23, r23
    109e:	88 1f       	adc	r24, r24
    10a0:	91 50       	subi	r25, 0x01	; 1
    10a2:	50 40       	sbci	r21, 0x00	; 0
    10a4:	a9 f7       	brne	.-22     	; 0x1090 <__mulsf3_pse+0x64>
    10a6:	9e 3f       	cpi	r25, 0xFE	; 254
    10a8:	51 05       	cpc	r21, r1
    10aa:	80 f0       	brcs	.+32     	; 0x10cc <__mulsf3_pse+0xa0>
    10ac:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__fp_inf>
    10b0:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__fp_szero>
    10b4:	5f 3f       	cpi	r21, 0xFF	; 255
    10b6:	e4 f3       	brlt	.-8      	; 0x10b0 <__mulsf3_pse+0x84>
    10b8:	98 3e       	cpi	r25, 0xE8	; 232
    10ba:	d4 f3       	brlt	.-12     	; 0x10b0 <__mulsf3_pse+0x84>
    10bc:	86 95       	lsr	r24
    10be:	77 95       	ror	r23
    10c0:	67 95       	ror	r22
    10c2:	b7 95       	ror	r27
    10c4:	f7 95       	ror	r31
    10c6:	e7 95       	ror	r30
    10c8:	9f 5f       	subi	r25, 0xFF	; 255
    10ca:	c1 f7       	brne	.-16     	; 0x10bc <__mulsf3_pse+0x90>
    10cc:	fe 2b       	or	r31, r30
    10ce:	88 0f       	add	r24, r24
    10d0:	91 1d       	adc	r25, r1
    10d2:	96 95       	lsr	r25
    10d4:	87 95       	ror	r24
    10d6:	97 f9       	bld	r25, 7
    10d8:	08 95       	ret

000010da <dtostrf>:
    10da:	ef 92       	push	r14
    10dc:	0f 93       	push	r16
    10de:	1f 93       	push	r17
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	e8 01       	movw	r28, r16
    10e6:	47 fd       	sbrc	r20, 7
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <dtostrf+0x14>
    10ea:	34 e0       	ldi	r19, 0x04	; 4
    10ec:	01 c0       	rjmp	.+2      	; 0x10f0 <dtostrf+0x16>
    10ee:	34 e1       	ldi	r19, 0x14	; 20
    10f0:	04 2e       	mov	r0, r20
    10f2:	00 0c       	add	r0, r0
    10f4:	55 0b       	sbc	r21, r21
    10f6:	57 ff       	sbrs	r21, 7
    10f8:	03 c0       	rjmp	.+6      	; 0x1100 <dtostrf+0x26>
    10fa:	51 95       	neg	r21
    10fc:	41 95       	neg	r20
    10fe:	51 09       	sbc	r21, r1
    1100:	e3 2e       	mov	r14, r19
    1102:	02 2f       	mov	r16, r18
    1104:	24 2f       	mov	r18, r20
    1106:	ae 01       	movw	r20, r28
    1108:	0e 94 8d 08 	call	0x111a	; 0x111a <dtoa_prf>
    110c:	ce 01       	movw	r24, r28
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	ef 90       	pop	r14
    1118:	08 95       	ret

0000111a <dtoa_prf>:
    111a:	a9 e0       	ldi	r26, 0x09	; 9
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e3 e9       	ldi	r30, 0x93	; 147
    1120:	f8 e0       	ldi	r31, 0x08	; 8
    1122:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__prologue_saves__+0xc>
    1126:	6a 01       	movw	r12, r20
    1128:	12 2f       	mov	r17, r18
    112a:	b0 2e       	mov	r11, r16
    112c:	2b e3       	ldi	r18, 0x3B	; 59
    112e:	20 17       	cp	r18, r16
    1130:	20 f0       	brcs	.+8      	; 0x113a <dtoa_prf+0x20>
    1132:	ff 24       	eor	r15, r15
    1134:	f3 94       	inc	r15
    1136:	f0 0e       	add	r15, r16
    1138:	02 c0       	rjmp	.+4      	; 0x113e <dtoa_prf+0x24>
    113a:	2c e3       	ldi	r18, 0x3C	; 60
    113c:	f2 2e       	mov	r15, r18
    113e:	0f 2d       	mov	r16, r15
    1140:	27 e0       	ldi	r18, 0x07	; 7
    1142:	ae 01       	movw	r20, r28
    1144:	4f 5f       	subi	r20, 0xFF	; 255
    1146:	5f 4f       	sbci	r21, 0xFF	; 255
    1148:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__ftoa_engine>
    114c:	bc 01       	movw	r22, r24
    114e:	49 81       	ldd	r20, Y+1	; 0x01
    1150:	84 2f       	mov	r24, r20
    1152:	89 70       	andi	r24, 0x09	; 9
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	31 f0       	breq	.+12     	; 0x1164 <dtoa_prf+0x4a>
    1158:	e1 fc       	sbrc	r14, 1
    115a:	06 c0       	rjmp	.+12     	; 0x1168 <dtoa_prf+0x4e>
    115c:	e0 fe       	sbrs	r14, 0
    115e:	06 c0       	rjmp	.+12     	; 0x116c <dtoa_prf+0x52>
    1160:	90 e2       	ldi	r25, 0x20	; 32
    1162:	05 c0       	rjmp	.+10     	; 0x116e <dtoa_prf+0x54>
    1164:	9d e2       	ldi	r25, 0x2D	; 45
    1166:	03 c0       	rjmp	.+6      	; 0x116e <dtoa_prf+0x54>
    1168:	9b e2       	ldi	r25, 0x2B	; 43
    116a:	01 c0       	rjmp	.+2      	; 0x116e <dtoa_prf+0x54>
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	5e 2d       	mov	r21, r14
    1170:	50 71       	andi	r21, 0x10	; 16
    1172:	43 ff       	sbrs	r20, 3
    1174:	3c c0       	rjmp	.+120    	; 0x11ee <dtoa_prf+0xd4>
    1176:	91 11       	cpse	r25, r1
    1178:	02 c0       	rjmp	.+4      	; 0x117e <dtoa_prf+0x64>
    117a:	83 e0       	ldi	r24, 0x03	; 3
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <dtoa_prf+0x66>
    117e:	84 e0       	ldi	r24, 0x04	; 4
    1180:	81 17       	cp	r24, r17
    1182:	18 f4       	brcc	.+6      	; 0x118a <dtoa_prf+0x70>
    1184:	21 2f       	mov	r18, r17
    1186:	28 1b       	sub	r18, r24
    1188:	01 c0       	rjmp	.+2      	; 0x118c <dtoa_prf+0x72>
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	51 11       	cpse	r21, r1
    118e:	0b c0       	rjmp	.+22     	; 0x11a6 <dtoa_prf+0x8c>
    1190:	f6 01       	movw	r30, r12
    1192:	82 2f       	mov	r24, r18
    1194:	30 e2       	ldi	r19, 0x20	; 32
    1196:	88 23       	and	r24, r24
    1198:	19 f0       	breq	.+6      	; 0x11a0 <dtoa_prf+0x86>
    119a:	31 93       	st	Z+, r19
    119c:	81 50       	subi	r24, 0x01	; 1
    119e:	fb cf       	rjmp	.-10     	; 0x1196 <dtoa_prf+0x7c>
    11a0:	c2 0e       	add	r12, r18
    11a2:	d1 1c       	adc	r13, r1
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	99 23       	and	r25, r25
    11a8:	29 f0       	breq	.+10     	; 0x11b4 <dtoa_prf+0x9a>
    11aa:	d6 01       	movw	r26, r12
    11ac:	9c 93       	st	X, r25
    11ae:	f6 01       	movw	r30, r12
    11b0:	31 96       	adiw	r30, 0x01	; 1
    11b2:	6f 01       	movw	r12, r30
    11b4:	c6 01       	movw	r24, r12
    11b6:	03 96       	adiw	r24, 0x03	; 3
    11b8:	e2 fe       	sbrs	r14, 2
    11ba:	0a c0       	rjmp	.+20     	; 0x11d0 <dtoa_prf+0xb6>
    11bc:	3e e4       	ldi	r19, 0x4E	; 78
    11be:	d6 01       	movw	r26, r12
    11c0:	3c 93       	st	X, r19
    11c2:	41 e4       	ldi	r20, 0x41	; 65
    11c4:	11 96       	adiw	r26, 0x01	; 1
    11c6:	4c 93       	st	X, r20
    11c8:	11 97       	sbiw	r26, 0x01	; 1
    11ca:	12 96       	adiw	r26, 0x02	; 2
    11cc:	3c 93       	st	X, r19
    11ce:	06 c0       	rjmp	.+12     	; 0x11dc <dtoa_prf+0xc2>
    11d0:	3e e6       	ldi	r19, 0x6E	; 110
    11d2:	f6 01       	movw	r30, r12
    11d4:	30 83       	st	Z, r19
    11d6:	41 e6       	ldi	r20, 0x61	; 97
    11d8:	41 83       	std	Z+1, r20	; 0x01
    11da:	32 83       	std	Z+2, r19	; 0x02
    11dc:	fc 01       	movw	r30, r24
    11de:	32 2f       	mov	r19, r18
    11e0:	40 e2       	ldi	r20, 0x20	; 32
    11e2:	33 23       	and	r19, r19
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <dtoa_prf+0xce>
    11e6:	42 c0       	rjmp	.+132    	; 0x126c <dtoa_prf+0x152>
    11e8:	41 93       	st	Z+, r20
    11ea:	31 50       	subi	r19, 0x01	; 1
    11ec:	fa cf       	rjmp	.-12     	; 0x11e2 <dtoa_prf+0xc8>
    11ee:	42 ff       	sbrs	r20, 2
    11f0:	44 c0       	rjmp	.+136    	; 0x127a <dtoa_prf+0x160>
    11f2:	91 11       	cpse	r25, r1
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <dtoa_prf+0xe0>
    11f6:	83 e0       	ldi	r24, 0x03	; 3
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <dtoa_prf+0xe2>
    11fa:	84 e0       	ldi	r24, 0x04	; 4
    11fc:	81 17       	cp	r24, r17
    11fe:	18 f4       	brcc	.+6      	; 0x1206 <dtoa_prf+0xec>
    1200:	21 2f       	mov	r18, r17
    1202:	28 1b       	sub	r18, r24
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <dtoa_prf+0xee>
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	51 11       	cpse	r21, r1
    120a:	0b c0       	rjmp	.+22     	; 0x1222 <dtoa_prf+0x108>
    120c:	f6 01       	movw	r30, r12
    120e:	82 2f       	mov	r24, r18
    1210:	30 e2       	ldi	r19, 0x20	; 32
    1212:	88 23       	and	r24, r24
    1214:	19 f0       	breq	.+6      	; 0x121c <dtoa_prf+0x102>
    1216:	31 93       	st	Z+, r19
    1218:	81 50       	subi	r24, 0x01	; 1
    121a:	fb cf       	rjmp	.-10     	; 0x1212 <dtoa_prf+0xf8>
    121c:	c2 0e       	add	r12, r18
    121e:	d1 1c       	adc	r13, r1
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	99 23       	and	r25, r25
    1224:	29 f0       	breq	.+10     	; 0x1230 <dtoa_prf+0x116>
    1226:	d6 01       	movw	r26, r12
    1228:	9c 93       	st	X, r25
    122a:	f6 01       	movw	r30, r12
    122c:	31 96       	adiw	r30, 0x01	; 1
    122e:	6f 01       	movw	r12, r30
    1230:	c6 01       	movw	r24, r12
    1232:	03 96       	adiw	r24, 0x03	; 3
    1234:	e2 fe       	sbrs	r14, 2
    1236:	0b c0       	rjmp	.+22     	; 0x124e <dtoa_prf+0x134>
    1238:	39 e4       	ldi	r19, 0x49	; 73
    123a:	d6 01       	movw	r26, r12
    123c:	3c 93       	st	X, r19
    123e:	3e e4       	ldi	r19, 0x4E	; 78
    1240:	11 96       	adiw	r26, 0x01	; 1
    1242:	3c 93       	st	X, r19
    1244:	11 97       	sbiw	r26, 0x01	; 1
    1246:	36 e4       	ldi	r19, 0x46	; 70
    1248:	12 96       	adiw	r26, 0x02	; 2
    124a:	3c 93       	st	X, r19
    124c:	07 c0       	rjmp	.+14     	; 0x125c <dtoa_prf+0x142>
    124e:	39 e6       	ldi	r19, 0x69	; 105
    1250:	f6 01       	movw	r30, r12
    1252:	30 83       	st	Z, r19
    1254:	3e e6       	ldi	r19, 0x6E	; 110
    1256:	31 83       	std	Z+1, r19	; 0x01
    1258:	36 e6       	ldi	r19, 0x66	; 102
    125a:	32 83       	std	Z+2, r19	; 0x02
    125c:	fc 01       	movw	r30, r24
    125e:	32 2f       	mov	r19, r18
    1260:	40 e2       	ldi	r20, 0x20	; 32
    1262:	33 23       	and	r19, r19
    1264:	19 f0       	breq	.+6      	; 0x126c <dtoa_prf+0x152>
    1266:	41 93       	st	Z+, r20
    1268:	31 50       	subi	r19, 0x01	; 1
    126a:	fb cf       	rjmp	.-10     	; 0x1262 <dtoa_prf+0x148>
    126c:	fc 01       	movw	r30, r24
    126e:	e2 0f       	add	r30, r18
    1270:	f1 1d       	adc	r31, r1
    1272:	10 82       	st	Z, r1
    1274:	8e ef       	ldi	r24, 0xFE	; 254
    1276:	9f ef       	ldi	r25, 0xFF	; 255
    1278:	a6 c0       	rjmp	.+332    	; 0x13c6 <dtoa_prf+0x2ac>
    127a:	21 e0       	ldi	r18, 0x01	; 1
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	91 11       	cpse	r25, r1
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <dtoa_prf+0x16c>
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	16 16       	cp	r1, r22
    1288:	17 06       	cpc	r1, r23
    128a:	1c f4       	brge	.+6      	; 0x1292 <dtoa_prf+0x178>
    128c:	fb 01       	movw	r30, r22
    128e:	31 96       	adiw	r30, 0x01	; 1
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <dtoa_prf+0x17c>
    1292:	e1 e0       	ldi	r30, 0x01	; 1
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	2e 0f       	add	r18, r30
    1298:	3f 1f       	adc	r19, r31
    129a:	bb 20       	and	r11, r11
    129c:	21 f0       	breq	.+8      	; 0x12a6 <dtoa_prf+0x18c>
    129e:	eb 2d       	mov	r30, r11
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	31 96       	adiw	r30, 0x01	; 1
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <dtoa_prf+0x190>
    12a6:	e0 e0       	ldi	r30, 0x00	; 0
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	2e 0f       	add	r18, r30
    12ac:	3f 1f       	adc	r19, r31
    12ae:	e1 2f       	mov	r30, r17
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	2e 17       	cp	r18, r30
    12b4:	3f 07       	cpc	r19, r31
    12b6:	1c f4       	brge	.+6      	; 0x12be <dtoa_prf+0x1a4>
    12b8:	12 1b       	sub	r17, r18
    12ba:	21 2f       	mov	r18, r17
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <dtoa_prf+0x1a6>
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	8e 2d       	mov	r24, r14
    12c2:	88 71       	andi	r24, 0x18	; 24
    12c4:	59 f4       	brne	.+22     	; 0x12dc <dtoa_prf+0x1c2>
    12c6:	f6 01       	movw	r30, r12
    12c8:	82 2f       	mov	r24, r18
    12ca:	30 e2       	ldi	r19, 0x20	; 32
    12cc:	88 23       	and	r24, r24
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <dtoa_prf+0x1bc>
    12d0:	31 93       	st	Z+, r19
    12d2:	81 50       	subi	r24, 0x01	; 1
    12d4:	fb cf       	rjmp	.-10     	; 0x12cc <dtoa_prf+0x1b2>
    12d6:	c2 0e       	add	r12, r18
    12d8:	d1 1c       	adc	r13, r1
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	99 23       	and	r25, r25
    12de:	29 f0       	breq	.+10     	; 0x12ea <dtoa_prf+0x1d0>
    12e0:	d6 01       	movw	r26, r12
    12e2:	9c 93       	st	X, r25
    12e4:	f6 01       	movw	r30, r12
    12e6:	31 96       	adiw	r30, 0x01	; 1
    12e8:	6f 01       	movw	r12, r30
    12ea:	51 11       	cpse	r21, r1
    12ec:	0b c0       	rjmp	.+22     	; 0x1304 <dtoa_prf+0x1ea>
    12ee:	f6 01       	movw	r30, r12
    12f0:	82 2f       	mov	r24, r18
    12f2:	90 e3       	ldi	r25, 0x30	; 48
    12f4:	88 23       	and	r24, r24
    12f6:	19 f0       	breq	.+6      	; 0x12fe <dtoa_prf+0x1e4>
    12f8:	91 93       	st	Z+, r25
    12fa:	81 50       	subi	r24, 0x01	; 1
    12fc:	fb cf       	rjmp	.-10     	; 0x12f4 <dtoa_prf+0x1da>
    12fe:	c2 0e       	add	r12, r18
    1300:	d1 1c       	adc	r13, r1
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	0f 2d       	mov	r16, r15
    1306:	06 0f       	add	r16, r22
    1308:	9a 81       	ldd	r25, Y+2	; 0x02
    130a:	34 2f       	mov	r19, r20
    130c:	30 71       	andi	r19, 0x10	; 16
    130e:	44 ff       	sbrs	r20, 4
    1310:	03 c0       	rjmp	.+6      	; 0x1318 <dtoa_prf+0x1fe>
    1312:	91 33       	cpi	r25, 0x31	; 49
    1314:	09 f4       	brne	.+2      	; 0x1318 <dtoa_prf+0x1fe>
    1316:	01 50       	subi	r16, 0x01	; 1
    1318:	10 16       	cp	r1, r16
    131a:	24 f4       	brge	.+8      	; 0x1324 <dtoa_prf+0x20a>
    131c:	09 30       	cpi	r16, 0x09	; 9
    131e:	18 f0       	brcs	.+6      	; 0x1326 <dtoa_prf+0x20c>
    1320:	08 e0       	ldi	r16, 0x08	; 8
    1322:	01 c0       	rjmp	.+2      	; 0x1326 <dtoa_prf+0x20c>
    1324:	01 e0       	ldi	r16, 0x01	; 1
    1326:	ab 01       	movw	r20, r22
    1328:	77 ff       	sbrs	r23, 7
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <dtoa_prf+0x216>
    132c:	40 e0       	ldi	r20, 0x00	; 0
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	fb 01       	movw	r30, r22
    1332:	e4 1b       	sub	r30, r20
    1334:	f5 0b       	sbc	r31, r21
    1336:	a1 e0       	ldi	r26, 0x01	; 1
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	ac 0f       	add	r26, r28
    133c:	bd 1f       	adc	r27, r29
    133e:	ea 0f       	add	r30, r26
    1340:	fb 1f       	adc	r31, r27
    1342:	8e e2       	ldi	r24, 0x2E	; 46
    1344:	a8 2e       	mov	r10, r24
    1346:	4b 01       	movw	r8, r22
    1348:	80 1a       	sub	r8, r16
    134a:	91 08       	sbc	r9, r1
    134c:	0b 2d       	mov	r16, r11
    134e:	10 e0       	ldi	r17, 0x00	; 0
    1350:	11 95       	neg	r17
    1352:	01 95       	neg	r16
    1354:	11 09       	sbc	r17, r1
    1356:	4f 3f       	cpi	r20, 0xFF	; 255
    1358:	bf ef       	ldi	r27, 0xFF	; 255
    135a:	5b 07       	cpc	r21, r27
    135c:	21 f4       	brne	.+8      	; 0x1366 <dtoa_prf+0x24c>
    135e:	d6 01       	movw	r26, r12
    1360:	ac 92       	st	X, r10
    1362:	11 96       	adiw	r26, 0x01	; 1
    1364:	6d 01       	movw	r12, r26
    1366:	64 17       	cp	r22, r20
    1368:	75 07       	cpc	r23, r21
    136a:	2c f0       	brlt	.+10     	; 0x1376 <dtoa_prf+0x25c>
    136c:	84 16       	cp	r8, r20
    136e:	95 06       	cpc	r9, r21
    1370:	14 f4       	brge	.+4      	; 0x1376 <dtoa_prf+0x25c>
    1372:	81 81       	ldd	r24, Z+1	; 0x01
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <dtoa_prf+0x25e>
    1376:	80 e3       	ldi	r24, 0x30	; 48
    1378:	41 50       	subi	r20, 0x01	; 1
    137a:	51 09       	sbc	r21, r1
    137c:	31 96       	adiw	r30, 0x01	; 1
    137e:	d6 01       	movw	r26, r12
    1380:	11 96       	adiw	r26, 0x01	; 1
    1382:	7d 01       	movw	r14, r26
    1384:	40 17       	cp	r20, r16
    1386:	51 07       	cpc	r21, r17
    1388:	24 f0       	brlt	.+8      	; 0x1392 <dtoa_prf+0x278>
    138a:	d6 01       	movw	r26, r12
    138c:	8c 93       	st	X, r24
    138e:	67 01       	movw	r12, r14
    1390:	e2 cf       	rjmp	.-60     	; 0x1356 <dtoa_prf+0x23c>
    1392:	64 17       	cp	r22, r20
    1394:	75 07       	cpc	r23, r21
    1396:	39 f4       	brne	.+14     	; 0x13a6 <dtoa_prf+0x28c>
    1398:	96 33       	cpi	r25, 0x36	; 54
    139a:	20 f4       	brcc	.+8      	; 0x13a4 <dtoa_prf+0x28a>
    139c:	95 33       	cpi	r25, 0x35	; 53
    139e:	19 f4       	brne	.+6      	; 0x13a6 <dtoa_prf+0x28c>
    13a0:	31 11       	cpse	r19, r1
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <dtoa_prf+0x28c>
    13a4:	81 e3       	ldi	r24, 0x31	; 49
    13a6:	f6 01       	movw	r30, r12
    13a8:	80 83       	st	Z, r24
    13aa:	f7 01       	movw	r30, r14
    13ac:	82 2f       	mov	r24, r18
    13ae:	90 e2       	ldi	r25, 0x20	; 32
    13b0:	88 23       	and	r24, r24
    13b2:	19 f0       	breq	.+6      	; 0x13ba <dtoa_prf+0x2a0>
    13b4:	91 93       	st	Z+, r25
    13b6:	81 50       	subi	r24, 0x01	; 1
    13b8:	fb cf       	rjmp	.-10     	; 0x13b0 <dtoa_prf+0x296>
    13ba:	f7 01       	movw	r30, r14
    13bc:	e2 0f       	add	r30, r18
    13be:	f1 1d       	adc	r31, r1
    13c0:	10 82       	st	Z, r1
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	29 96       	adiw	r28, 0x09	; 9
    13c8:	ec e0       	ldi	r30, 0x0C	; 12
    13ca:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__epilogue_restores__+0xc>

000013ce <__ftoa_engine>:
    13ce:	28 30       	cpi	r18, 0x08	; 8
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <__ftoa_engine+0x6>
    13d2:	27 e0       	ldi	r18, 0x07	; 7
    13d4:	33 27       	eor	r19, r19
    13d6:	da 01       	movw	r26, r20
    13d8:	99 0f       	add	r25, r25
    13da:	31 1d       	adc	r19, r1
    13dc:	87 fd       	sbrc	r24, 7
    13de:	91 60       	ori	r25, 0x01	; 1
    13e0:	00 96       	adiw	r24, 0x00	; 0
    13e2:	61 05       	cpc	r22, r1
    13e4:	71 05       	cpc	r23, r1
    13e6:	39 f4       	brne	.+14     	; 0x13f6 <__ftoa_engine+0x28>
    13e8:	32 60       	ori	r19, 0x02	; 2
    13ea:	2e 5f       	subi	r18, 0xFE	; 254
    13ec:	3d 93       	st	X+, r19
    13ee:	30 e3       	ldi	r19, 0x30	; 48
    13f0:	2a 95       	dec	r18
    13f2:	e1 f7       	brne	.-8      	; 0x13ec <__ftoa_engine+0x1e>
    13f4:	08 95       	ret
    13f6:	9f 3f       	cpi	r25, 0xFF	; 255
    13f8:	30 f0       	brcs	.+12     	; 0x1406 <__ftoa_engine+0x38>
    13fa:	80 38       	cpi	r24, 0x80	; 128
    13fc:	71 05       	cpc	r23, r1
    13fe:	61 05       	cpc	r22, r1
    1400:	09 f0       	breq	.+2      	; 0x1404 <__ftoa_engine+0x36>
    1402:	3c 5f       	subi	r19, 0xFC	; 252
    1404:	3c 5f       	subi	r19, 0xFC	; 252
    1406:	3d 93       	st	X+, r19
    1408:	91 30       	cpi	r25, 0x01	; 1
    140a:	08 f0       	brcs	.+2      	; 0x140e <__ftoa_engine+0x40>
    140c:	80 68       	ori	r24, 0x80	; 128
    140e:	91 1d       	adc	r25, r1
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	1f 93       	push	r17
    1416:	0f 93       	push	r16
    1418:	ff 92       	push	r15
    141a:	ef 92       	push	r14
    141c:	19 2f       	mov	r17, r25
    141e:	98 7f       	andi	r25, 0xF8	; 248
    1420:	96 95       	lsr	r25
    1422:	e9 2f       	mov	r30, r25
    1424:	96 95       	lsr	r25
    1426:	96 95       	lsr	r25
    1428:	e9 0f       	add	r30, r25
    142a:	ff 27       	eor	r31, r31
    142c:	ee 53       	subi	r30, 0x3E	; 62
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	99 27       	eor	r25, r25
    1432:	33 27       	eor	r19, r19
    1434:	ee 24       	eor	r14, r14
    1436:	ff 24       	eor	r15, r15
    1438:	a7 01       	movw	r20, r14
    143a:	e7 01       	movw	r28, r14
    143c:	05 90       	lpm	r0, Z+
    143e:	08 94       	sec
    1440:	07 94       	ror	r0
    1442:	28 f4       	brcc	.+10     	; 0x144e <__ftoa_engine+0x80>
    1444:	36 0f       	add	r19, r22
    1446:	e7 1e       	adc	r14, r23
    1448:	f8 1e       	adc	r15, r24
    144a:	49 1f       	adc	r20, r25
    144c:	51 1d       	adc	r21, r1
    144e:	66 0f       	add	r22, r22
    1450:	77 1f       	adc	r23, r23
    1452:	88 1f       	adc	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	06 94       	lsr	r0
    1458:	a1 f7       	brne	.-24     	; 0x1442 <__ftoa_engine+0x74>
    145a:	05 90       	lpm	r0, Z+
    145c:	07 94       	ror	r0
    145e:	28 f4       	brcc	.+10     	; 0x146a <__ftoa_engine+0x9c>
    1460:	e7 0e       	add	r14, r23
    1462:	f8 1e       	adc	r15, r24
    1464:	49 1f       	adc	r20, r25
    1466:	56 1f       	adc	r21, r22
    1468:	c1 1d       	adc	r28, r1
    146a:	77 0f       	add	r23, r23
    146c:	88 1f       	adc	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	66 1f       	adc	r22, r22
    1472:	06 94       	lsr	r0
    1474:	a1 f7       	brne	.-24     	; 0x145e <__ftoa_engine+0x90>
    1476:	05 90       	lpm	r0, Z+
    1478:	07 94       	ror	r0
    147a:	28 f4       	brcc	.+10     	; 0x1486 <__ftoa_engine+0xb8>
    147c:	f8 0e       	add	r15, r24
    147e:	49 1f       	adc	r20, r25
    1480:	56 1f       	adc	r21, r22
    1482:	c7 1f       	adc	r28, r23
    1484:	d1 1d       	adc	r29, r1
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	66 1f       	adc	r22, r22
    148c:	77 1f       	adc	r23, r23
    148e:	06 94       	lsr	r0
    1490:	a1 f7       	brne	.-24     	; 0x147a <__ftoa_engine+0xac>
    1492:	05 90       	lpm	r0, Z+
    1494:	07 94       	ror	r0
    1496:	20 f4       	brcc	.+8      	; 0x14a0 <__ftoa_engine+0xd2>
    1498:	49 0f       	add	r20, r25
    149a:	56 1f       	adc	r21, r22
    149c:	c7 1f       	adc	r28, r23
    149e:	d8 1f       	adc	r29, r24
    14a0:	99 0f       	add	r25, r25
    14a2:	66 1f       	adc	r22, r22
    14a4:	77 1f       	adc	r23, r23
    14a6:	88 1f       	adc	r24, r24
    14a8:	06 94       	lsr	r0
    14aa:	a9 f7       	brne	.-22     	; 0x1496 <__ftoa_engine+0xc8>
    14ac:	84 91       	lpm	r24, Z
    14ae:	10 95       	com	r17
    14b0:	17 70       	andi	r17, 0x07	; 7
    14b2:	41 f0       	breq	.+16     	; 0x14c4 <__ftoa_engine+0xf6>
    14b4:	d6 95       	lsr	r29
    14b6:	c7 95       	ror	r28
    14b8:	57 95       	ror	r21
    14ba:	47 95       	ror	r20
    14bc:	f7 94       	ror	r15
    14be:	e7 94       	ror	r14
    14c0:	1a 95       	dec	r17
    14c2:	c1 f7       	brne	.-16     	; 0x14b4 <__ftoa_engine+0xe6>
    14c4:	e8 e6       	ldi	r30, 0x68	; 104
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	68 94       	set
    14ca:	15 90       	lpm	r1, Z+
    14cc:	15 91       	lpm	r17, Z+
    14ce:	35 91       	lpm	r19, Z+
    14d0:	65 91       	lpm	r22, Z+
    14d2:	95 91       	lpm	r25, Z+
    14d4:	05 90       	lpm	r0, Z+
    14d6:	7f e2       	ldi	r23, 0x2F	; 47
    14d8:	73 95       	inc	r23
    14da:	e1 18       	sub	r14, r1
    14dc:	f1 0a       	sbc	r15, r17
    14de:	43 0b       	sbc	r20, r19
    14e0:	56 0b       	sbc	r21, r22
    14e2:	c9 0b       	sbc	r28, r25
    14e4:	d0 09       	sbc	r29, r0
    14e6:	c0 f7       	brcc	.-16     	; 0x14d8 <__ftoa_engine+0x10a>
    14e8:	e1 0c       	add	r14, r1
    14ea:	f1 1e       	adc	r15, r17
    14ec:	43 1f       	adc	r20, r19
    14ee:	56 1f       	adc	r21, r22
    14f0:	c9 1f       	adc	r28, r25
    14f2:	d0 1d       	adc	r29, r0
    14f4:	7e f4       	brtc	.+30     	; 0x1514 <__ftoa_engine+0x146>
    14f6:	70 33       	cpi	r23, 0x30	; 48
    14f8:	11 f4       	brne	.+4      	; 0x14fe <__ftoa_engine+0x130>
    14fa:	8a 95       	dec	r24
    14fc:	e6 cf       	rjmp	.-52     	; 0x14ca <__ftoa_engine+0xfc>
    14fe:	e8 94       	clt
    1500:	01 50       	subi	r16, 0x01	; 1
    1502:	30 f0       	brcs	.+12     	; 0x1510 <__ftoa_engine+0x142>
    1504:	08 0f       	add	r16, r24
    1506:	0a f4       	brpl	.+2      	; 0x150a <__ftoa_engine+0x13c>
    1508:	00 27       	eor	r16, r16
    150a:	02 17       	cp	r16, r18
    150c:	08 f4       	brcc	.+2      	; 0x1510 <__ftoa_engine+0x142>
    150e:	20 2f       	mov	r18, r16
    1510:	23 95       	inc	r18
    1512:	02 2f       	mov	r16, r18
    1514:	7a 33       	cpi	r23, 0x3A	; 58
    1516:	28 f0       	brcs	.+10     	; 0x1522 <__ftoa_engine+0x154>
    1518:	79 e3       	ldi	r23, 0x39	; 57
    151a:	7d 93       	st	X+, r23
    151c:	2a 95       	dec	r18
    151e:	e9 f7       	brne	.-6      	; 0x151a <__ftoa_engine+0x14c>
    1520:	10 c0       	rjmp	.+32     	; 0x1542 <__ftoa_engine+0x174>
    1522:	7d 93       	st	X+, r23
    1524:	2a 95       	dec	r18
    1526:	89 f6       	brne	.-94     	; 0x14ca <__ftoa_engine+0xfc>
    1528:	06 94       	lsr	r0
    152a:	97 95       	ror	r25
    152c:	67 95       	ror	r22
    152e:	37 95       	ror	r19
    1530:	17 95       	ror	r17
    1532:	17 94       	ror	r1
    1534:	e1 18       	sub	r14, r1
    1536:	f1 0a       	sbc	r15, r17
    1538:	43 0b       	sbc	r20, r19
    153a:	56 0b       	sbc	r21, r22
    153c:	c9 0b       	sbc	r28, r25
    153e:	d0 09       	sbc	r29, r0
    1540:	98 f0       	brcs	.+38     	; 0x1568 <__ftoa_engine+0x19a>
    1542:	23 95       	inc	r18
    1544:	7e 91       	ld	r23, -X
    1546:	73 95       	inc	r23
    1548:	7a 33       	cpi	r23, 0x3A	; 58
    154a:	08 f0       	brcs	.+2      	; 0x154e <__ftoa_engine+0x180>
    154c:	70 e3       	ldi	r23, 0x30	; 48
    154e:	7c 93       	st	X, r23
    1550:	20 13       	cpse	r18, r16
    1552:	b8 f7       	brcc	.-18     	; 0x1542 <__ftoa_engine+0x174>
    1554:	7e 91       	ld	r23, -X
    1556:	70 61       	ori	r23, 0x10	; 16
    1558:	7d 93       	st	X+, r23
    155a:	30 f0       	brcs	.+12     	; 0x1568 <__ftoa_engine+0x19a>
    155c:	83 95       	inc	r24
    155e:	71 e3       	ldi	r23, 0x31	; 49
    1560:	7d 93       	st	X+, r23
    1562:	70 e3       	ldi	r23, 0x30	; 48
    1564:	2a 95       	dec	r18
    1566:	e1 f7       	brne	.-8      	; 0x1560 <__ftoa_engine+0x192>
    1568:	11 24       	eor	r1, r1
    156a:	ef 90       	pop	r14
    156c:	ff 90       	pop	r15
    156e:	0f 91       	pop	r16
    1570:	1f 91       	pop	r17
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	99 27       	eor	r25, r25
    1578:	87 fd       	sbrc	r24, 7
    157a:	90 95       	com	r25
    157c:	08 95       	ret

0000157e <__prologue_saves__>:
    157e:	2f 92       	push	r2
    1580:	3f 92       	push	r3
    1582:	4f 92       	push	r4
    1584:	5f 92       	push	r5
    1586:	6f 92       	push	r6
    1588:	7f 92       	push	r7
    158a:	8f 92       	push	r8
    158c:	9f 92       	push	r9
    158e:	af 92       	push	r10
    1590:	bf 92       	push	r11
    1592:	cf 92       	push	r12
    1594:	df 92       	push	r13
    1596:	ef 92       	push	r14
    1598:	ff 92       	push	r15
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	ca 1b       	sub	r28, r26
    15a8:	db 0b       	sbc	r29, r27
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	09 94       	ijmp

000015b6 <__epilogue_restores__>:
    15b6:	2a 88       	ldd	r2, Y+18	; 0x12
    15b8:	39 88       	ldd	r3, Y+17	; 0x11
    15ba:	48 88       	ldd	r4, Y+16	; 0x10
    15bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    15be:	6e 84       	ldd	r6, Y+14	; 0x0e
    15c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    15c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    15c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    15c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    15c8:	b9 84       	ldd	r11, Y+9	; 0x09
    15ca:	c8 84       	ldd	r12, Y+8	; 0x08
    15cc:	df 80       	ldd	r13, Y+7	; 0x07
    15ce:	ee 80       	ldd	r14, Y+6	; 0x06
    15d0:	fd 80       	ldd	r15, Y+5	; 0x05
    15d2:	0c 81       	ldd	r16, Y+4	; 0x04
    15d4:	1b 81       	ldd	r17, Y+3	; 0x03
    15d6:	aa 81       	ldd	r26, Y+2	; 0x02
    15d8:	b9 81       	ldd	r27, Y+1	; 0x01
    15da:	ce 0f       	add	r28, r30
    15dc:	d1 1d       	adc	r29, r1
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
    15e8:	ed 01       	movw	r28, r26
    15ea:	08 95       	ret

000015ec <_exit>:
    15ec:	f8 94       	cli

000015ee <__stop_program>:
    15ee:	ff cf       	rjmp	.-2      	; 0x15ee <__stop_program>
