
uart_teststring.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800100  00800100  00000220  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c27  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a9  00000000  00000000  00000f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055c  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00001c64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b2  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000763  00000000  00000000  0000232e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002a91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_18>
  4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 34       	cpi	r26, 0x45	; 69
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart_init( UART_BAUD_SELECT_DOUBLE_SPEED(UART_BAUD_RATE,F_CPU) ); 
  90:	80 e1       	ldi	r24, 0x10	; 16
  92:	90 e8       	ldi	r25, 0x80	; 128
  94:	0e 94 a6 00 	call	0x14c	; 0x14c <uart_init>
    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
  98:	78 94       	sei
    while(1){
		uart_putc('U');
  9a:	85 e5       	ldi	r24, 0x55	; 85
  9c:	0e 94 bf 00 	call	0x17e	; 0x17e <uart_putc>
	}
  a0:	fc cf       	rjmp	.-8      	; 0x9a <main+0xa>

000000a2 <__vector_18>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	2f 93       	push	r18
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
  b6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  ba:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  be:	88 71       	andi	r24, 0x18	; 24
  c0:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <UART_RxHead>
  c4:	ef 5f       	subi	r30, 0xFF	; 255
  c6:	ef 71       	andi	r30, 0x1F	; 31
  c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <UART_RxTail>
  cc:	e9 17       	cp	r30, r25
  ce:	39 f0       	breq	.+14     	; 0xde <__vector_18+0x3c>
  d0:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <UART_RxHead>
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	eb 5f       	subi	r30, 0xFB	; 251
  d8:	fe 4f       	sbci	r31, 0xFE	; 254
  da:	20 83       	st	Z, r18
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <__vector_18+0x3e>
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  e4:	ff 91       	pop	r31
  e6:	ef 91       	pop	r30
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	2f 91       	pop	r18
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <__vector_19>:
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
 10a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <UART_TxHead>
 10e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <UART_TxTail>
 112:	98 17       	cp	r25, r24
 114:	69 f0       	breq	.+26     	; 0x130 <__vector_19+0x38>
 116:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <UART_TxTail>
 11a:	ef 5f       	subi	r30, 0xFF	; 255
 11c:	ef 71       	andi	r30, 0x1F	; 31
 11e:	e0 93 03 01 	sts	0x0103, r30	; 0x800103 <UART_TxTail>
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	eb 5d       	subi	r30, 0xDB	; 219
 126:	fe 4f       	sbci	r31, 0xFE	; 254
 128:	80 81       	ld	r24, Z
 12a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 12e:	05 c0       	rjmp	.+10     	; 0x13a <__vector_19+0x42>
 130:	e1 ec       	ldi	r30, 0xC1	; 193
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	8f 7d       	andi	r24, 0xDF	; 223
 138:	80 83       	st	Z, r24
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <uart_init>:
 14c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <UART_TxHead>
 150:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <UART_TxTail>
 154:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <UART_RxHead>
 158:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <UART_RxTail>
 15c:	99 23       	and	r25, r25
 15e:	24 f4       	brge	.+8      	; 0x168 <uart_init+0x1c>
 160:	22 e0       	ldi	r18, 0x02	; 2
 162:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 166:	9f 77       	andi	r25, 0x7F	; 127
 168:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 16c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 170:	88 e9       	ldi	r24, 0x98	; 152
 172:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 17c:	08 95       	ret

0000017e <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 17e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <UART_TxHead>
 182:	2f 5f       	subi	r18, 0xFF	; 255
 184:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 186:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <UART_TxTail>
 18a:	29 17       	cp	r18, r25
 18c:	e1 f3       	breq	.-8      	; 0x186 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 18e:	e2 2f       	mov	r30, r18
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	eb 5d       	subi	r30, 0xDB	; 219
 194:	fe 4f       	sbci	r31, 0xFE	; 254
 196:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 198:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 19c:	e1 ec       	ldi	r30, 0xC1	; 193
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	80 62       	ori	r24, 0x20	; 32
 1a4:	80 83       	st	Z, r24
 1a6:	08 95       	ret

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
