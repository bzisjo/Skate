
uSD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00005a34  00005ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005a34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002fe  00800110  00800110  00005ad8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005ad8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005b08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00005b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005e0c  00000000  00000000  00005dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000117b  00000000  00000000  0000bbe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d04  00000000  00000000  0000cd5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f64  00000000  00000000  0000fa64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f75  00000000  00000000  000109c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007d0f  00000000  00000000  0001193d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000590  00000000  00000000  0001964c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__ctors_end>
       4:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
       8:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
       c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      10:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      14:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      18:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      1c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      20:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      24:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      28:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      2c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      30:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      34:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      38:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      3c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      40:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      44:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      48:	0c 94 77 2b 	jmp	0x56ee	; 0x56ee <__vector_18>
      4c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      50:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      54:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      58:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      5c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      60:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      64:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      68:	3f 29       	or	r19, r15
      6a:	42 29       	or	r20, r2
      6c:	42 29       	or	r20, r2
      6e:	46 29       	or	r20, r6
      70:	46 29       	or	r20, r6
      72:	46 29       	or	r20, r6
      74:	46 29       	or	r20, r6
      76:	46 29       	or	r20, r6
      78:	48 29       	or	r20, r8
      7a:	4b 29       	or	r20, r11
      7c:	4b 29       	or	r20, r11
      7e:	4b 29       	or	r20, r11
      80:	4b 29       	or	r20, r11
      82:	64 29       	or	r22, r4
      84:	69 29       	or	r22, r9

00000086 <__trampolines_end>:
      86:	66 72       	andi	r22, 0x26	; 38
      88:	65 65       	ori	r22, 0x55	; 85
      8a:	3a 20       	and	r3, r10
      8c:	20 20       	and	r2, r0
	...

0000008f <__c.2170>:
      8f:	66 6f 72 6d 61 74 3a 20 00                          format: .

00000098 <__c.2168>:
      98:	77 72 2e 70 72 2e 3a 20 00                          wr.pr.: .

000000a1 <__c.2166>:
      a1:	63 6f 70 79 3a 20 20 20 00                          copy:   .

000000aa <__c.2164>:
      aa:	4d 42 0a 00                                         MB..

000000ae <__c.2162>:
      ae:	73 69 7a 65 3a 20 20 20 00                          size:   .

000000b7 <__c.2160>:
      b7:	64 61 74 65 3a 20 20 20 00                          date:   .

000000c0 <__c.2158>:
      c0:	73 65 72 69 61 6c 3a 20 30 78 00                    serial: 0x.

000000cb <__c.2156>:
      cb:	72 65 76 3a 20 20 20 20 00                          rev:    .

000000d4 <__c.2154>:
      d4:	70 72 6f 64 3a 20 20 20 00                          prod:   .

000000dd <__c.2152>:
      dd:	6f 65 6d 3a 20 20 20 20 00                          oem:    .

000000e6 <__c.2150>:
      e6:	6d 61 6e 75 66 3a 20 20 30 78 00                    manuf:  0x.

000000f1 <__c.2111>:
      f1:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 3a     unknown command:
     101:	20 00                                                .

00000103 <__c.2109>:
     103:	65 72 72 6f 72 20 73 79 6e 63 69 6e 67 20 64 69     error syncing di
     113:	73 6b 0a 00                                         sk..

00000117 <__c.2107>:
     117:	73 79 6e 63 00                                      sync.

0000011c <__c.2105>:
     11c:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 64     error creating d
     12c:	69 72 65 63 74 6f 72 79 3a 20 00                    irectory: .

00000137 <__c.2102>:
     137:	6d 6b 64 69 72 20 00                                mkdir .

0000013e <__c.2099>:
     13e:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     14e:	20 66 69 6c 65 0a 00                                 file..

00000155 <__c.2095>:
     155:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
     165:	20 00                                                .

00000167 <__c.2092>:
     167:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

00000176 <__c.2085>:
     176:	77 72 69 74 65 20 00                                write .

0000017d <__c.2083>:
     17d:	65 72 72 6f 72 20 6d 6f 76 69 6e 67 20 66 69 6c     error moving fil
     18d:	65 3a 20 00                                         e: .

00000191 <__c.2076>:
     191:	6d 76 20 00                                         mv .

00000195 <__c.2074>:
     195:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 66     error creating f
     1a5:	69 6c 65 3a 20 00                                   ile: .

000001ab <__c.2071>:
     1ab:	74 6f 75 63 68 20 00                                touch .

000001b2 <__c.2069>:
     1b2:	65 72 72 6f 72 20 64 65 6c 65 74 69 6e 67 20 66     error deleting f
     1c2:	69 6c 65 3a 20 00                                   ile: .

000001c8 <__c.2066>:
     1c8:	72 6d 20 00                                         rm .

000001cc <__c.2064>:
     1cc:	65 72 72 6f 72 20 72 65 61 64 69 6e 67 20 64 69     error reading di
     1dc:	73 6b 20 69 6e 66 6f 0a 00                          sk info..

000001e5 <__c.2062>:
     1e5:	64 69 73 6b 00                                      disk.

000001ea <__c.2050>:
     1ea:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

000001f9 <__c.2047>:
     1f9:	63 61 74 20 00                                      cat .

000001fe <__c.2037>:
     1fe:	6c 73 00                                            ls.

00000201 <__c.2035>:
     201:	64 69 72 65 63 74 6f 72 79 20 6e 6f 74 20 66 6f     directory not fo
     211:	75 6e 64 3a 20 00                                   und: .

00000217 <__c.2031>:
     217:	63 64 20 00                                         cd .

0000021b <__c.2028>:
     21b:	69 6e 69 74 00                                      init.

00000220 <__c.2023>:
     220:	6f 70 65 6e 69 6e 67 20 72 6f 6f 74 20 64 69 72     opening root dir
     230:	65 63 74 6f 72 79 20 66 61 69 6c 65 64 0a 00        ectory failed..

0000023f <__c.2019>:
     23f:	6f 70 65 6e 69 6e 67 20 66 69 6c 65 73 79 73 74     opening filesyst
     24f:	65 6d 20 66 61 69 6c 65 64 0a 00                    em failed..

0000025a <__c.2016>:
     25a:	6f 70 65 6e 69 6e 67 20 70 61 72 74 69 74 69 6f     opening partitio
     26a:	6e 20 66 61 69 6c 65 64 0a 00                       n failed..

00000274 <__c.2013>:
     274:	77 6f 72 6b 69 6e 67 3f 0a 00                       working?..

0000027e <__c.2010>:
     27e:	4d 4d 43 2f 53 44 20 69 6e 69 74 69 61 6c 69 7a     MMC/SD initializ
     28e:	61 74 69 6f 6e 20 66 61 69 6c 65 64 0a 00           ation failed..

0000029c <__c.2008>:
     29c:	67 6f 69 6e 67 20 69 6e 74 6f 20 69 6e 69 74 0a     going into init.
	...

000002ae <__ctors_end>:
     2ae:	11 24       	eor	r1, r1
     2b0:	1f be       	out	0x3f, r1	; 63
     2b2:	cf ef       	ldi	r28, 0xFF	; 255
     2b4:	d8 e0       	ldi	r29, 0x08	; 8
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	cd bf       	out	0x3d, r28	; 61

000002ba <__do_copy_data>:
     2ba:	11 e0       	ldi	r17, 0x01	; 1
     2bc:	a0 e0       	ldi	r26, 0x00	; 0
     2be:	b1 e0       	ldi	r27, 0x01	; 1
     2c0:	e4 e3       	ldi	r30, 0x34	; 52
     2c2:	fa e5       	ldi	r31, 0x5A	; 90
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <__do_copy_data+0x10>
     2c6:	05 90       	lpm	r0, Z+
     2c8:	0d 92       	st	X+, r0
     2ca:	a0 31       	cpi	r26, 0x10	; 16
     2cc:	b1 07       	cpc	r27, r17
     2ce:	d9 f7       	brne	.-10     	; 0x2c6 <__do_copy_data+0xc>

000002d0 <__do_clear_bss>:
     2d0:	24 e0       	ldi	r18, 0x04	; 4
     2d2:	a0 e1       	ldi	r26, 0x10	; 16
     2d4:	b1 e0       	ldi	r27, 0x01	; 1
     2d6:	01 c0       	rjmp	.+2      	; 0x2da <.do_clear_bss_start>

000002d8 <.do_clear_bss_loop>:
     2d8:	1d 92       	st	X+, r1

000002da <.do_clear_bss_start>:
     2da:	ae 30       	cpi	r26, 0x0E	; 14
     2dc:	b2 07       	cpc	r27, r18
     2de:	e1 f7       	brne	.-8      	; 0x2d8 <.do_clear_bss_loop>
     2e0:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <main>
     2e4:	0c 94 18 2d 	jmp	0x5a30	; 0x5a30 <_exit>

000002e8 <__bad_interrupt>:
     2e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002ec <read16>:
 * \param[in] p Pointer from where to read the integer.
 * \returns The 16-bit integer read from memory.
 */
uint16_t read16(const uint8_t* p)
{
    return (((uint16_t) p[1]) << 8) |
     2ec:	fc 01       	movw	r30, r24
     2ee:	21 81       	ldd	r18, Z+1	; 0x01
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	32 2f       	mov	r19, r18
     2f4:	22 27       	eor	r18, r18
           (((uint16_t) p[0]) << 0);
     2f6:	80 81       	ld	r24, Z
}
     2f8:	a9 01       	movw	r20, r18
     2fa:	48 2b       	or	r20, r24
     2fc:	ca 01       	movw	r24, r20
     2fe:	08 95       	ret

00000300 <read32>:
 *
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
     300:	fc 01       	movw	r30, r24
    return (((uint32_t) p[3]) << 24) |
     302:	23 81       	ldd	r18, Z+3	; 0x03
           (((uint32_t) p[2]) << 16) |
     304:	62 81       	ldd	r22, Z+2	; 0x02
     306:	86 2f       	mov	r24, r22
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	a0 e0       	ldi	r26, 0x00	; 0
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	dc 01       	movw	r26, r24
     310:	99 27       	eor	r25, r25
     312:	88 27       	eor	r24, r24
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
     314:	b2 2b       	or	r27, r18
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
     316:	20 81       	ld	r18, Z
     318:	82 2b       	or	r24, r18
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
     31a:	21 81       	ldd	r18, Z+1	; 0x01
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
     31c:	bc 01       	movw	r22, r24
     31e:	cd 01       	movw	r24, r26
     320:	72 2b       	or	r23, r18
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
}
     322:	08 95       	ret

00000324 <write16>:
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 16-bit integer to write.
 */
void write16(uint8_t* p, uint16_t i)
{
    p[1] = (uint8_t) ((i & 0xff00) >> 8);
     324:	fc 01       	movw	r30, r24
     326:	71 83       	std	Z+1, r23	; 0x01
    p[0] = (uint8_t) ((i & 0x00ff) >> 0);
     328:	60 83       	st	Z, r22
     32a:	08 95       	ret

0000032c <write32>:
 *
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 32-bit integer to write.
 */
void write32(uint8_t* p, uint32_t i)
{
     32c:	fc 01       	movw	r30, r24
    p[3] = (uint8_t) ((i & 0xff000000) >> 24);
     32e:	73 83       	std	Z+3, r23	; 0x03
    p[2] = (uint8_t) ((i & 0x00ff0000) >> 16);
     330:	62 83       	std	Z+2, r22	; 0x02
    p[1] = (uint8_t) ((i & 0x0000ff00) >>  8);
     332:	51 83       	std	Z+1, r21	; 0x01
    p[0] = (uint8_t) ((i & 0x000000ff) >>  0);
     334:	40 83       	st	Z, r20
     336:	08 95       	ret

00000338 <fat_get_next_cluster>:
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
     338:	8f 92       	push	r8
     33a:	9f 92       	push	r9
     33c:	af 92       	push	r10
     33e:	bf 92       	push	r11
     340:	cf 92       	push	r12
     342:	df 92       	push	r13
     344:	ef 92       	push	r14
     346:	ff 92       	push	r15
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	00 d0       	rcall	.+0      	; 0x352 <fat_get_next_cluster+0x1a>
     352:	00 d0       	rcall	.+0      	; 0x354 <fat_get_next_cluster+0x1c>
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
    if(!fs || cluster_num < 2)
     358:	00 97       	sbiw	r24, 0x00	; 0
     35a:	09 f4       	brne	.+2      	; 0x35e <fat_get_next_cluster+0x26>
     35c:	85 c0       	rjmp	.+266    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     35e:	42 30       	cpi	r20, 0x02	; 2
     360:	51 05       	cpc	r21, r1
     362:	61 05       	cpc	r22, r1
     364:	71 05       	cpc	r23, r1
     366:	08 f4       	brcc	.+2      	; 0x36a <fat_get_next_cluster+0x32>
     368:	84 c0       	rjmp	.+264    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     36a:	fc 01       	movw	r30, r24
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
     36c:	a0 81       	ld	r26, Z
     36e:	b1 81       	ldd	r27, Z+1	; 0x01
     370:	18 96       	adiw	r26, 0x08	; 8
     372:	8c 91       	ld	r24, X
     374:	18 97       	sbiw	r26, 0x08	; 8
     376:	8b 30       	cpi	r24, 0x0B	; 11
     378:	09 f0       	breq	.+2      	; 0x37c <fat_get_next_cluster+0x44>
     37a:	40 c0       	rjmp	.+128    	; 0x3fc <fat_get_next_cluster+0xc4>
    {
        /* read appropriate fat entry */
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
     37c:	4a 01       	movw	r8, r20
     37e:	5b 01       	movw	r10, r22
     380:	24 2f       	mov	r18, r20
     382:	39 2d       	mov	r19, r9
     384:	4a 2d       	mov	r20, r10
     386:	5b 2d       	mov	r21, r11
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	02 e0       	ldi	r16, 0x02	; 2
     392:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__ashldi3>
     396:	a2 84       	ldd	r10, Z+10	; 0x0a
     398:	b3 84       	ldd	r11, Z+11	; 0x0b
     39a:	c4 84       	ldd	r12, Z+12	; 0x0c
     39c:	d5 84       	ldd	r13, Z+13	; 0x0d
     39e:	e6 84       	ldd	r14, Z+14	; 0x0e
     3a0:	f7 84       	ldd	r15, Z+15	; 0x0f
     3a2:	00 89       	ldd	r16, Z+16	; 0x10
     3a4:	11 89       	ldd	r17, Z+17	; 0x11
     3a6:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
     3aa:	ed 91       	ld	r30, X+
     3ac:	fc 91       	ld	r31, X
     3ae:	68 94       	set
     3b0:	ee 24       	eor	r14, r14
     3b2:	e2 f8       	bld	r14, 2
     3b4:	f1 2c       	mov	r15, r1
     3b6:	8e 01       	movw	r16, r28
     3b8:	0f 5f       	subi	r16, 0xFF	; 255
     3ba:	1f 4f       	sbci	r17, 0xFF	; 255
     3bc:	09 95       	icall
     3be:	88 23       	and	r24, r24
     3c0:	c1 f0       	breq	.+48     	; 0x3f2 <fat_get_next_cluster+0xba>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
     3c2:	c9 80       	ldd	r12, Y+1	; 0x01
     3c4:	da 80       	ldd	r13, Y+2	; 0x02
     3c6:	eb 80       	ldd	r14, Y+3	; 0x03
     3c8:	fc 80       	ldd	r15, Y+4	; 0x04
        
        if(cluster_num == FAT32_CLUSTER_FREE ||
     3ca:	c1 14       	cp	r12, r1
     3cc:	d1 04       	cpc	r13, r1
     3ce:	e1 04       	cpc	r14, r1
     3d0:	f1 04       	cpc	r15, r1
     3d2:	79 f0       	breq	.+30     	; 0x3f2 <fat_get_next_cluster+0xba>
           cluster_num == FAT32_CLUSTER_BAD ||
     3d4:	d7 01       	movw	r26, r14
     3d6:	c6 01       	movw	r24, r12
     3d8:	80 5f       	subi	r24, 0xF0	; 240
     3da:	9f 4f       	sbci	r25, 0xFF	; 255
     3dc:	af 4f       	sbci	r26, 0xFF	; 255
     3de:	bf 40       	sbci	r27, 0x0F	; 15
     3e0:	40 97       	sbiw	r24, 0x10	; 16
     3e2:	a1 05       	cpc	r26, r1
     3e4:	b1 05       	cpc	r27, r1
     3e6:	28 f0       	brcs	.+10     	; 0x3f2 <fat_get_next_cluster+0xba>
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
     3e8:	6c 2d       	mov	r22, r12
     3ea:	7d 2d       	mov	r23, r13
     3ec:	8e 2d       	mov	r24, r14
     3ee:	9f 2d       	mov	r25, r15
     3f0:	44 c0       	rjmp	.+136    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        /* read appropriate fat entry */
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
            return 0;
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	3f c0       	rjmp	.+126    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
    else
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
     3fc:	4a 01       	movw	r8, r20
     3fe:	5b 01       	movw	r10, r22
     400:	24 2f       	mov	r18, r20
     402:	39 2d       	mov	r19, r9
     404:	4a 2d       	mov	r20, r10
     406:	5b 2d       	mov	r21, r11
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	01 e0       	ldi	r16, 0x01	; 1
     412:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__ashldi3>
     416:	a2 84       	ldd	r10, Z+10	; 0x0a
     418:	b3 84       	ldd	r11, Z+11	; 0x0b
     41a:	c4 84       	ldd	r12, Z+12	; 0x0c
     41c:	d5 84       	ldd	r13, Z+13	; 0x0d
     41e:	e6 84       	ldd	r14, Z+14	; 0x0e
     420:	f7 84       	ldd	r15, Z+15	; 0x0f
     422:	00 89       	ldd	r16, Z+16	; 0x10
     424:	11 89       	ldd	r17, Z+17	; 0x11
     426:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
     42a:	ed 91       	ld	r30, X+
     42c:	fc 91       	ld	r31, X
     42e:	68 94       	set
     430:	ee 24       	eor	r14, r14
     432:	e1 f8       	bld	r14, 1
     434:	f1 2c       	mov	r15, r1
     436:	8e 01       	movw	r16, r28
     438:	0f 5f       	subi	r16, 0xFF	; 255
     43a:	1f 4f       	sbci	r17, 0xFF	; 255
     43c:	09 95       	icall
     43e:	88 23       	and	r24, r24
     440:	71 f0       	breq	.+28     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	9a 81       	ldd	r25, Y+2	; 0x02
     446:	6c 01       	movw	r12, r24
     448:	e1 2c       	mov	r14, r1
     44a:	f1 2c       	mov	r15, r1
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
     44c:	01 97       	sbiw	r24, 0x01	; 1
     44e:	8f 3e       	cpi	r24, 0xEF	; 239
     450:	9f 4f       	sbci	r25, 0xFF	; 255
     452:	28 f4       	brcc	.+10     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
     454:	6c 2d       	mov	r22, r12
     456:	7d 2d       	mov	r23, r13
     458:	8e 2d       	mov	r24, r14
     45a:	9f 2d       	mov	r25, r15
     45c:	0e c0       	rjmp	.+28     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
            return 0;
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	09 c0       	rjmp	.+18     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	04 c0       	rjmp	.+8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	90 e0       	ldi	r25, 0x00	; 0
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    }

    return cluster_num;
}
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	ff 90       	pop	r15
     48c:	ef 90       	pop	r14
     48e:	df 90       	pop	r13
     490:	cf 90       	pop	r12
     492:	bf 90       	pop	r11
     494:	af 90       	pop	r10
     496:	9f 90       	pop	r9
     498:	8f 90       	pop	r8
     49a:	08 95       	ret

0000049c <fat_free_clusters>:
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
     49c:	2f 92       	push	r2
     49e:	3f 92       	push	r3
     4a0:	4f 92       	push	r4
     4a2:	5f 92       	push	r5
     4a4:	6f 92       	push	r6
     4a6:	7f 92       	push	r7
     4a8:	8f 92       	push	r8
     4aa:	9f 92       	push	r9
     4ac:	af 92       	push	r10
     4ae:	bf 92       	push	r11
     4b0:	cf 92       	push	r12
     4b2:	df 92       	push	r13
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	62 97       	sbiw	r28, 0x12	; 18
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	f8 94       	cli
     4ca:	de bf       	out	0x3e, r29	; 62
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	cd bf       	out	0x3d, r28	; 61
     4d0:	3c 01       	movw	r6, r24
     4d2:	1a 01       	movw	r2, r20
     4d4:	2b 01       	movw	r4, r22
    if(!fs || cluster_num < 2)
     4d6:	89 2b       	or	r24, r25
     4d8:	09 f4       	brne	.+2      	; 0x4dc <fat_free_clusters+0x40>
     4da:	eb c0       	rjmp	.+470    	; 0x6b2 <fat_free_clusters+0x216>
     4dc:	42 30       	cpi	r20, 0x02	; 2
     4de:	51 05       	cpc	r21, r1
     4e0:	61 05       	cpc	r22, r1
     4e2:	71 05       	cpc	r23, r1
     4e4:	08 f4       	brcc	.+2      	; 0x4e8 <fat_free_clusters+0x4c>
     4e6:	e7 c0       	rjmp	.+462    	; 0x6b6 <fat_free_clusters+0x21a>
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
     4e8:	d3 01       	movw	r26, r6
     4ea:	1a 96       	adiw	r26, 0x0a	; 10
     4ec:	bc 91       	ld	r27, X
     4ee:	bd 83       	std	Y+5, r27	; 0x05
     4f0:	f3 01       	movw	r30, r6
     4f2:	f3 85       	ldd	r31, Z+11	; 0x0b
     4f4:	fe 83       	std	Y+6, r31	; 0x06
     4f6:	d3 01       	movw	r26, r6
     4f8:	1c 96       	adiw	r26, 0x0c	; 12
     4fa:	bc 91       	ld	r27, X
     4fc:	bf 83       	std	Y+7, r27	; 0x07
     4fe:	f3 01       	movw	r30, r6
     500:	f5 85       	ldd	r31, Z+13	; 0x0d
     502:	f8 87       	std	Y+8, r31	; 0x08
     504:	d3 01       	movw	r26, r6
     506:	1e 96       	adiw	r26, 0x0e	; 14
     508:	bc 91       	ld	r27, X
     50a:	b9 87       	std	Y+9, r27	; 0x09
     50c:	f3 01       	movw	r30, r6
     50e:	f7 85       	ldd	r31, Z+15	; 0x0f
     510:	fa 87       	std	Y+10, r31	; 0x0a
     512:	d3 01       	movw	r26, r6
     514:	50 96       	adiw	r26, 0x10	; 16
     516:	bc 91       	ld	r27, X
     518:	bb 87       	std	Y+11, r27	; 0x0b
     51a:	f3 01       	movw	r30, r6
     51c:	f1 89       	ldd	r31, Z+17	; 0x11
     51e:	fc 87       	std	Y+12, r31	; 0x0c
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
     520:	d3 01       	movw	r26, r6
     522:	ed 91       	ld	r30, X+
     524:	fc 91       	ld	r31, X
     526:	80 85       	ldd	r24, Z+8	; 0x08
     528:	8b 30       	cpi	r24, 0x0B	; 11
     52a:	39 f0       	breq	.+14     	; 0x53a <fat_free_clusters+0x9e>
    }
    else
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
     52c:	41 15       	cp	r20, r1
     52e:	51 05       	cpc	r21, r1
     530:	61 05       	cpc	r22, r1
     532:	71 05       	cpc	r23, r1
     534:	09 f0       	breq	.+2      	; 0x538 <fat_free_clusters+0x9c>
     536:	5d c0       	rjmp	.+186    	; 0x5f2 <fat_free_clusters+0x156>
     538:	b6 c0       	rjmp	.+364    	; 0x6a6 <fat_free_clusters+0x20a>
    offset_t fat_offset = fs->header.fat_offset;
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry;
        while(cluster_num)
     53a:	45 2b       	or	r20, r21
     53c:	46 2b       	or	r20, r22
     53e:	47 2b       	or	r20, r23
     540:	19 f4       	brne	.+6      	; 0x548 <fat_free_clusters+0xac>
     542:	51 c0       	rjmp	.+162    	; 0x5e6 <fat_free_clusters+0x14a>
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
     544:	14 01       	movw	r2, r8
     546:	25 01       	movw	r4, r10
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
     548:	52 01       	movw	r10, r4
     54a:	41 01       	movw	r8, r2
     54c:	22 2d       	mov	r18, r2
     54e:	39 2d       	mov	r19, r9
     550:	4a 2d       	mov	r20, r10
     552:	5b 2d       	mov	r21, r11
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	02 e0       	ldi	r16, 0x02	; 2
     55e:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__ashldi3>
     562:	ad 80       	ldd	r10, Y+5	; 0x05
     564:	be 80       	ldd	r11, Y+6	; 0x06
     566:	cf 80       	ldd	r12, Y+7	; 0x07
     568:	d8 84       	ldd	r13, Y+8	; 0x08
     56a:	e9 84       	ldd	r14, Y+9	; 0x09
     56c:	fa 84       	ldd	r15, Y+10	; 0x0a
     56e:	0b 85       	ldd	r16, Y+11	; 0x0b
     570:	1c 85       	ldd	r17, Y+12	; 0x0c
     572:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
     576:	d2 2e       	mov	r13, r18
     578:	c3 2e       	mov	r12, r19
     57a:	4d 87       	std	Y+13, r20	; 0x0d
     57c:	5e 87       	std	Y+14, r21	; 0x0e
     57e:	6f 87       	std	Y+15, r22	; 0x0f
     580:	78 8b       	std	Y+16, r23	; 0x10
     582:	89 8b       	std	Y+17, r24	; 0x11
     584:	9a 8b       	std	Y+18, r25	; 0x12
     586:	d3 01       	movw	r26, r6
     588:	ed 91       	ld	r30, X+
     58a:	fc 91       	ld	r31, X
     58c:	01 90       	ld	r0, Z+
     58e:	f0 81       	ld	r31, Z
     590:	e0 2d       	mov	r30, r0
     592:	68 94       	set
     594:	ee 24       	eor	r14, r14
     596:	e2 f8       	bld	r14, 2
     598:	f1 2c       	mov	r15, r1
     59a:	8e 01       	movw	r16, r28
     59c:	0f 5f       	subi	r16, 0xFF	; 255
     59e:	1f 4f       	sbci	r17, 0xFF	; 255
     5a0:	09 95       	icall
     5a2:	88 23       	and	r24, r24
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <fat_free_clusters+0x10c>
     5a6:	2c c1       	rjmp	.+600    	; 0x800 <fat_free_clusters+0x364>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint32_t cluster_num_next = ltoh32(fat_entry);
     5a8:	89 80       	ldd	r8, Y+1	; 0x01
     5aa:	9a 80       	ldd	r9, Y+2	; 0x02
     5ac:	ab 80       	ldd	r10, Y+3	; 0x03
     5ae:	bc 80       	ldd	r11, Y+4	; 0x04

            if(cluster_num_next == FAT32_CLUSTER_FREE)
     5b0:	81 14       	cp	r8, r1
     5b2:	91 04       	cpc	r9, r1
     5b4:	a1 04       	cpc	r10, r1
     5b6:	b1 04       	cpc	r11, r1
     5b8:	c1 f0       	breq	.+48     	; 0x5ea <fat_free_clusters+0x14e>
                return 1;
            if(cluster_num_next == FAT32_CLUSTER_BAD ||
     5ba:	d5 01       	movw	r26, r10
     5bc:	c4 01       	movw	r24, r8
     5be:	80 5f       	subi	r24, 0xF0	; 240
     5c0:	9f 4f       	sbci	r25, 0xFF	; 255
     5c2:	af 4f       	sbci	r26, 0xFF	; 255
     5c4:	bf 40       	sbci	r27, 0x0F	; 15
     5c6:	08 97       	sbiw	r24, 0x08	; 8
     5c8:	a1 05       	cpc	r26, r1
     5ca:	b1 05       	cpc	r27, r1
     5cc:	80 f0       	brcs	.+32     	; 0x5ee <fat_free_clusters+0x152>
               (cluster_num_next >= FAT32_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT32_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT32_CLUSTER_LAST_MIN && cluster_num_next <= FAT32_CLUSTER_LAST_MAX)
     5ce:	d5 01       	movw	r26, r10
     5d0:	c4 01       	movw	r24, r8
     5d2:	88 5f       	subi	r24, 0xF8	; 248
     5d4:	9f 4f       	sbci	r25, 0xFF	; 255
     5d6:	af 4f       	sbci	r26, 0xFF	; 255
     5d8:	bf 40       	sbci	r27, 0x0F	; 15
     5da:	08 97       	sbiw	r24, 0x08	; 8
     5dc:	a1 05       	cpc	r26, r1
     5de:	b1 05       	cpc	r27, r1
     5e0:	08 f4       	brcc	.+2      	; 0x5e4 <fat_free_clusters+0x148>
     5e2:	86 c0       	rjmp	.+268    	; 0x6f0 <fat_free_clusters+0x254>
     5e4:	ab c0       	rjmp	.+342    	; 0x73c <fat_free_clusters+0x2a0>

            cluster_num = cluster_num_next;
        }
    }

    return 1;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	0b c1       	rjmp	.+534    	; 0x800 <fat_free_clusters+0x364>

            /* get next cluster of current cluster before freeing current cluster */
            uint32_t cluster_num_next = ltoh32(fat_entry);

            if(cluster_num_next == FAT32_CLUSTER_FREE)
                return 1;
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	09 c1       	rjmp	.+530    	; 0x800 <fat_free_clusters+0x364>
            if(cluster_num_next == FAT32_CLUSTER_BAD ||
               (cluster_num_next >= FAT32_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT32_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	07 c1       	rjmp	.+526    	; 0x800 <fat_free_clusters+0x364>
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
     5f2:	db 01       	movw	r26, r22
     5f4:	ca 01       	movw	r24, r20
     5f6:	4c 01       	movw	r8, r24
     5f8:	5d 01       	movw	r10, r26
     5fa:	28 2f       	mov	r18, r24
     5fc:	39 2d       	mov	r19, r9
     5fe:	4a 2d       	mov	r20, r10
     600:	5b 2d       	mov	r21, r11
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	01 e0       	ldi	r16, 0x01	; 1
     60c:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__ashldi3>
     610:	ad 80       	ldd	r10, Y+5	; 0x05
     612:	be 80       	ldd	r11, Y+6	; 0x06
     614:	cf 80       	ldd	r12, Y+7	; 0x07
     616:	d8 84       	ldd	r13, Y+8	; 0x08
     618:	e9 84       	ldd	r14, Y+9	; 0x09
     61a:	fa 84       	ldd	r15, Y+10	; 0x0a
     61c:	0b 85       	ldd	r16, Y+11	; 0x0b
     61e:	1c 85       	ldd	r17, Y+12	; 0x0c
     620:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
     624:	22 2e       	mov	r2, r18
     626:	33 2e       	mov	r3, r19
     628:	44 2e       	mov	r4, r20
     62a:	55 2e       	mov	r5, r21
     62c:	d6 2e       	mov	r13, r22
     62e:	c7 2e       	mov	r12, r23
     630:	a8 2e       	mov	r10, r24
     632:	b9 2e       	mov	r11, r25
     634:	d3 01       	movw	r26, r6
     636:	ed 91       	ld	r30, X+
     638:	fc 91       	ld	r31, X
     63a:	01 90       	ld	r0, Z+
     63c:	f0 81       	ld	r31, Z
     63e:	e0 2d       	mov	r30, r0
     640:	68 94       	set
     642:	ee 24       	eor	r14, r14
     644:	e1 f8       	bld	r14, 1
     646:	f1 2c       	mov	r15, r1
     648:	8e 01       	movw	r16, r28
     64a:	0f 5f       	subi	r16, 0xFF	; 255
     64c:	1f 4f       	sbci	r17, 0xFF	; 255
     64e:	09 95       	icall
     650:	88 23       	and	r24, r24
     652:	09 f4       	brne	.+2      	; 0x656 <fat_free_clusters+0x1ba>
     654:	d5 c0       	rjmp	.+426    	; 0x800 <fat_free_clusters+0x364>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);
     656:	89 80       	ldd	r8, Y+1	; 0x01
     658:	9a 80       	ldd	r9, Y+2	; 0x02

            if(cluster_num_next == FAT16_CLUSTER_FREE)
     65a:	81 14       	cp	r8, r1
     65c:	91 04       	cpc	r9, r1
     65e:	29 f1       	breq	.+74     	; 0x6aa <fat_free_clusters+0x20e>
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
     660:	c4 01       	movw	r24, r8
     662:	40 96       	adiw	r24, 0x10	; 16
     664:	08 97       	sbiw	r24, 0x08	; 8
     666:	18 f1       	brcs	.+70     	; 0x6ae <fat_free_clusters+0x212>
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
     668:	b8 ef       	ldi	r27, 0xF8	; 248
     66a:	8b 16       	cp	r8, r27
     66c:	bf ef       	ldi	r27, 0xFF	; 255
     66e:	9b 06       	cpc	r9, r27
     670:	08 f0       	brcs	.+2      	; 0x674 <fat_free_clusters+0x1d8>
     672:	6e c0       	rjmp	.+220    	; 0x750 <fat_free_clusters+0x2b4>
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
     674:	1a 82       	std	Y+2, r1	; 0x02
     676:	19 82       	std	Y+1, r1	; 0x01
            fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
     678:	d3 01       	movw	r26, r6
     67a:	ed 91       	ld	r30, X+
     67c:	fc 91       	ld	r31, X
     67e:	04 80       	ldd	r0, Z+4	; 0x04
     680:	f5 81       	ldd	r31, Z+5	; 0x05
     682:	e0 2d       	mov	r30, r0
     684:	22 2d       	mov	r18, r2
     686:	33 2d       	mov	r19, r3
     688:	44 2d       	mov	r20, r4
     68a:	55 2d       	mov	r21, r5
     68c:	6d 2d       	mov	r22, r13
     68e:	7c 2d       	mov	r23, r12
     690:	8a 2d       	mov	r24, r10
     692:	9b 2d       	mov	r25, r11
     694:	09 95       	icall

            /* We continue in any case here, even if freeing the cluster failed.
             * The cluster is lost, but maybe we can still free up some later ones.
             */

            cluster_num = cluster_num_next;
     696:	c4 01       	movw	r24, r8
     698:	a0 e0       	ldi	r26, 0x00	; 0
     69a:	b0 e0       	ldi	r27, 0x00	; 0
    }
    else
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
     69c:	00 97       	sbiw	r24, 0x00	; 0
     69e:	a1 05       	cpc	r26, r1
     6a0:	b1 05       	cpc	r27, r1
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <fat_free_clusters+0x20a>
     6a4:	a8 cf       	rjmp	.-176    	; 0x5f6 <fat_free_clusters+0x15a>

            cluster_num = cluster_num_next;
        }
    }

    return 1;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	ab c0       	rjmp	.+342    	; 0x800 <fat_free_clusters+0x364>

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);

            if(cluster_num_next == FAT16_CLUSTER_FREE)
                return 1;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	a9 c0       	rjmp	.+338    	; 0x800 <fat_free_clusters+0x364>
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	a7 c0       	rjmp	.+334    	; 0x800 <fat_free_clusters+0x364>
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	a5 c0       	rjmp	.+330    	; 0x800 <fat_free_clusters+0x364>
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	a3 c0       	rjmp	.+326    	; 0x800 <fat_free_clusters+0x364>
             */
            if(!fs->cluster_free)
                fs->cluster_free = cluster_num;

            /* free cluster */
            fat_entry = HTOL32(FAT32_CLUSTER_FREE);
     6ba:	19 82       	std	Y+1, r1	; 0x01
     6bc:	1a 82       	std	Y+2, r1	; 0x02
     6be:	1b 82       	std	Y+3, r1	; 0x03
     6c0:	1c 82       	std	Y+4, r1	; 0x04
            fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
     6c2:	d3 01       	movw	r26, r6
     6c4:	ed 91       	ld	r30, X+
     6c6:	fc 91       	ld	r31, X
     6c8:	04 80       	ldd	r0, Z+4	; 0x04
     6ca:	f5 81       	ldd	r31, Z+5	; 0x05
     6cc:	e0 2d       	mov	r30, r0
     6ce:	68 94       	set
     6d0:	ee 24       	eor	r14, r14
     6d2:	e2 f8       	bld	r14, 2
     6d4:	f1 2c       	mov	r15, r1
     6d6:	8e 01       	movw	r16, r28
     6d8:	0f 5f       	subi	r16, 0xFF	; 255
     6da:	1f 4f       	sbci	r17, 0xFF	; 255
     6dc:	2d 2d       	mov	r18, r13
     6de:	3c 2d       	mov	r19, r12
     6e0:	4d 85       	ldd	r20, Y+13	; 0x0d
     6e2:	5e 85       	ldd	r21, Y+14	; 0x0e
     6e4:	6f 85       	ldd	r22, Y+15	; 0x0f
     6e6:	78 89       	ldd	r23, Y+16	; 0x10
     6e8:	89 89       	ldd	r24, Y+17	; 0x11
     6ea:	9a 89       	ldd	r25, Y+18	; 0x12
     6ec:	09 95       	icall
     6ee:	7b cf       	rjmp	.-266    	; 0x5e6 <fat_free_clusters+0x14a>
                cluster_num_next = 0;

            /* We know we will free the cluster, so remember it as
             * free for the next allocation.
             */
            if(!fs->cluster_free)
     6f0:	f3 01       	movw	r30, r6
     6f2:	86 a5       	ldd	r24, Z+46	; 0x2e
     6f4:	97 a5       	ldd	r25, Z+47	; 0x2f
     6f6:	a0 a9       	ldd	r26, Z+48	; 0x30
     6f8:	b1 a9       	ldd	r27, Z+49	; 0x31
     6fa:	89 2b       	or	r24, r25
     6fc:	8a 2b       	or	r24, r26
     6fe:	8b 2b       	or	r24, r27
     700:	09 f4       	brne	.+2      	; 0x704 <fat_free_clusters+0x268>
     702:	5f c0       	rjmp	.+190    	; 0x7c2 <fat_free_clusters+0x326>
     704:	da cf       	rjmp	.-76     	; 0x6ba <fat_free_clusters+0x21e>
                fs->cluster_free = cluster_num;

            /* free cluster */
            fat_entry = HTOL32(FAT32_CLUSTER_FREE);
     706:	19 82       	std	Y+1, r1	; 0x01
     708:	1a 82       	std	Y+2, r1	; 0x02
     70a:	1b 82       	std	Y+3, r1	; 0x03
     70c:	1c 82       	std	Y+4, r1	; 0x04
            fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
     70e:	d3 01       	movw	r26, r6
     710:	ed 91       	ld	r30, X+
     712:	fc 91       	ld	r31, X
     714:	04 80       	ldd	r0, Z+4	; 0x04
     716:	f5 81       	ldd	r31, Z+5	; 0x05
     718:	e0 2d       	mov	r30, r0
     71a:	68 94       	set
     71c:	ee 24       	eor	r14, r14
     71e:	e2 f8       	bld	r14, 2
     720:	f1 2c       	mov	r15, r1
     722:	8e 01       	movw	r16, r28
     724:	0f 5f       	subi	r16, 0xFF	; 255
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	2d 2d       	mov	r18, r13
     72a:	3c 2d       	mov	r19, r12
     72c:	4d 85       	ldd	r20, Y+13	; 0x0d
     72e:	5e 85       	ldd	r21, Y+14	; 0x0e
     730:	6f 85       	ldd	r22, Y+15	; 0x0f
     732:	78 89       	ldd	r23, Y+16	; 0x10
     734:	89 89       	ldd	r24, Y+17	; 0x11
     736:	9a 89       	ldd	r25, Y+18	; 0x12
     738:	09 95       	icall
     73a:	04 cf       	rjmp	.-504    	; 0x544 <fat_free_clusters+0xa8>
                cluster_num_next = 0;

            /* We know we will free the cluster, so remember it as
             * free for the next allocation.
             */
            if(!fs->cluster_free)
     73c:	f3 01       	movw	r30, r6
     73e:	86 a5       	ldd	r24, Z+46	; 0x2e
     740:	97 a5       	ldd	r25, Z+47	; 0x2f
     742:	a0 a9       	ldd	r26, Z+48	; 0x30
     744:	b1 a9       	ldd	r27, Z+49	; 0x31
     746:	89 2b       	or	r24, r25
     748:	8a 2b       	or	r24, r26
     74a:	8b 2b       	or	r24, r27
     74c:	d1 f0       	breq	.+52     	; 0x782 <fat_free_clusters+0x2e6>
     74e:	db cf       	rjmp	.-74     	; 0x706 <fat_free_clusters+0x26a>
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
     750:	1a 82       	std	Y+2, r1	; 0x02
     752:	19 82       	std	Y+1, r1	; 0x01
            fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
     754:	d3 01       	movw	r26, r6
     756:	ed 91       	ld	r30, X+
     758:	fc 91       	ld	r31, X
     75a:	04 80       	ldd	r0, Z+4	; 0x04
     75c:	f5 81       	ldd	r31, Z+5	; 0x05
     75e:	e0 2d       	mov	r30, r0
     760:	68 94       	set
     762:	ee 24       	eor	r14, r14
     764:	e1 f8       	bld	r14, 1
     766:	f1 2c       	mov	r15, r1
     768:	8e 01       	movw	r16, r28
     76a:	0f 5f       	subi	r16, 0xFF	; 255
     76c:	1f 4f       	sbci	r17, 0xFF	; 255
     76e:	22 2d       	mov	r18, r2
     770:	33 2d       	mov	r19, r3
     772:	44 2d       	mov	r20, r4
     774:	55 2d       	mov	r21, r5
     776:	6d 2d       	mov	r22, r13
     778:	7c 2d       	mov	r23, r12
     77a:	8a 2d       	mov	r24, r10
     77c:	9b 2d       	mov	r25, r11
     77e:	09 95       	icall
     780:	92 cf       	rjmp	.-220    	; 0x6a6 <fat_free_clusters+0x20a>

            /* We know we will free the cluster, so remember it as
             * free for the next allocation.
             */
            if(!fs->cluster_free)
                fs->cluster_free = cluster_num;
     782:	f3 01       	movw	r30, r6
     784:	26 a6       	std	Z+46, r2	; 0x2e
     786:	37 a6       	std	Z+47, r3	; 0x2f
     788:	40 aa       	std	Z+48, r4	; 0x30
     78a:	51 aa       	std	Z+49, r5	; 0x31

            /* free cluster */
            fat_entry = HTOL32(FAT32_CLUSTER_FREE);
     78c:	19 82       	std	Y+1, r1	; 0x01
     78e:	1a 82       	std	Y+2, r1	; 0x02
     790:	1b 82       	std	Y+3, r1	; 0x03
     792:	1c 82       	std	Y+4, r1	; 0x04
            fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
     794:	01 90       	ld	r0, Z+
     796:	f0 81       	ld	r31, Z
     798:	e0 2d       	mov	r30, r0
     79a:	04 80       	ldd	r0, Z+4	; 0x04
     79c:	f5 81       	ldd	r31, Z+5	; 0x05
     79e:	e0 2d       	mov	r30, r0
     7a0:	68 94       	set
     7a2:	ee 24       	eor	r14, r14
     7a4:	e2 f8       	bld	r14, 2
     7a6:	f1 2c       	mov	r15, r1
     7a8:	8e 01       	movw	r16, r28
     7aa:	0f 5f       	subi	r16, 0xFF	; 255
     7ac:	1f 4f       	sbci	r17, 0xFF	; 255
     7ae:	2d 2d       	mov	r18, r13
     7b0:	3c 2d       	mov	r19, r12
     7b2:	4d 85       	ldd	r20, Y+13	; 0x0d
     7b4:	5e 85       	ldd	r21, Y+14	; 0x0e
     7b6:	6f 85       	ldd	r22, Y+15	; 0x0f
     7b8:	78 89       	ldd	r23, Y+16	; 0x10
     7ba:	89 89       	ldd	r24, Y+17	; 0x11
     7bc:	9a 89       	ldd	r25, Y+18	; 0x12
     7be:	09 95       	icall
     7c0:	c1 ce       	rjmp	.-638    	; 0x544 <fat_free_clusters+0xa8>

            /* We know we will free the cluster, so remember it as
             * free for the next allocation.
             */
            if(!fs->cluster_free)
                fs->cluster_free = cluster_num;
     7c2:	26 a6       	std	Z+46, r2	; 0x2e
     7c4:	37 a6       	std	Z+47, r3	; 0x2f
     7c6:	40 aa       	std	Z+48, r4	; 0x30
     7c8:	51 aa       	std	Z+49, r5	; 0x31

            /* free cluster */
            fat_entry = HTOL32(FAT32_CLUSTER_FREE);
     7ca:	19 82       	std	Y+1, r1	; 0x01
     7cc:	1a 82       	std	Y+2, r1	; 0x02
     7ce:	1b 82       	std	Y+3, r1	; 0x03
     7d0:	1c 82       	std	Y+4, r1	; 0x04
            fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
     7d2:	01 90       	ld	r0, Z+
     7d4:	f0 81       	ld	r31, Z
     7d6:	e0 2d       	mov	r30, r0
     7d8:	04 80       	ldd	r0, Z+4	; 0x04
     7da:	f5 81       	ldd	r31, Z+5	; 0x05
     7dc:	e0 2d       	mov	r30, r0
     7de:	68 94       	set
     7e0:	ee 24       	eor	r14, r14
     7e2:	e2 f8       	bld	r14, 2
     7e4:	f1 2c       	mov	r15, r1
     7e6:	8e 01       	movw	r16, r28
     7e8:	0f 5f       	subi	r16, 0xFF	; 255
     7ea:	1f 4f       	sbci	r17, 0xFF	; 255
     7ec:	2d 2d       	mov	r18, r13
     7ee:	3c 2d       	mov	r19, r12
     7f0:	4d 85       	ldd	r20, Y+13	; 0x0d
     7f2:	5e 85       	ldd	r21, Y+14	; 0x0e
     7f4:	6f 85       	ldd	r22, Y+15	; 0x0f
     7f6:	78 89       	ldd	r23, Y+16	; 0x10
     7f8:	89 89       	ldd	r24, Y+17	; 0x11
     7fa:	9a 89       	ldd	r25, Y+18	; 0x12
     7fc:	09 95       	icall
     7fe:	f3 ce       	rjmp	.-538    	; 0x5e6 <fat_free_clusters+0x14a>
            cluster_num = cluster_num_next;
        }
    }

    return 1;
}
     800:	62 96       	adiw	r28, 0x12	; 18
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	cf 90       	pop	r12
     81c:	bf 90       	pop	r11
     81e:	af 90       	pop	r10
     820:	9f 90       	pop	r9
     822:	8f 90       	pop	r8
     824:	7f 90       	pop	r7
     826:	6f 90       	pop	r6
     828:	5f 90       	pop	r5
     82a:	4f 90       	pop	r4
     82c:	3f 90       	pop	r3
     82e:	2f 90       	pop	r2
     830:	08 95       	ret

00000832 <fat_append_clusters>:
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
     832:	2f 92       	push	r2
     834:	3f 92       	push	r3
     836:	4f 92       	push	r4
     838:	5f 92       	push	r5
     83a:	6f 92       	push	r6
     83c:	7f 92       	push	r7
     83e:	8f 92       	push	r8
     840:	9f 92       	push	r9
     842:	af 92       	push	r10
     844:	bf 92       	push	r11
     846:	cf 92       	push	r12
     848:	df 92       	push	r13
     84a:	ef 92       	push	r14
     84c:	ff 92       	push	r15
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	a9 97       	sbiw	r28, 0x29	; 41
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	f8 94       	cli
     860:	de bf       	out	0x3e, r29	; 62
     862:	0f be       	out	0x3f, r0	; 63
     864:	cd bf       	out	0x3d, r28	; 61
     866:	9b a3       	std	Y+35, r25	; 0x23
     868:	8a a3       	std	Y+34, r24	; 0x22
     86a:	4e a3       	std	Y+38, r20	; 0x26
     86c:	5f a3       	std	Y+39, r21	; 0x27
     86e:	68 a7       	std	Y+40, r22	; 0x28
     870:	79 a7       	std	Y+41, r23	; 0x29
     872:	0b 87       	std	Y+11, r16	; 0x0b
     874:	1c 87       	std	Y+12, r17	; 0x0c
     876:	2d 87       	std	Y+13, r18	; 0x0d
     878:	3e 87       	std	Y+14, r19	; 0x0e
    if(!fs)
     87a:	00 97       	sbiw	r24, 0x00	; 0
     87c:	09 f4       	brne	.+2      	; 0x880 <fat_append_clusters+0x4e>
     87e:	1c c2       	rjmp	.+1080   	; 0xcb8 <__stack+0x3b9>
        return 0;

    device_read_t device_read = fs->partition->device_read;
     880:	dc 01       	movw	r26, r24
     882:	ed 91       	ld	r30, X+
     884:	fc 91       	ld	r31, X
     886:	11 97       	sbiw	r26, 0x01	; 1
     888:	20 81       	ld	r18, Z
     88a:	31 81       	ldd	r19, Z+1	; 0x01
     88c:	3d 8f       	std	Y+29, r19	; 0x1d
     88e:	2c 8f       	std	Y+28, r18	; 0x1c
    device_write_t device_write = fs->partition->device_write;
     890:	44 81       	ldd	r20, Z+4	; 0x04
     892:	55 81       	ldd	r21, Z+5	; 0x05
     894:	5d a3       	std	Y+37, r21	; 0x25
     896:	4c a3       	std	Y+36, r20	; 0x24
    offset_t fat_offset = fs->header.fat_offset;
     898:	1a 96       	adiw	r26, 0x0a	; 10
     89a:	5c 91       	ld	r21, X
     89c:	1a 97       	sbiw	r26, 0x0a	; 10
     89e:	5c 8b       	std	Y+20, r21	; 0x14
     8a0:	1b 96       	adiw	r26, 0x0b	; 11
     8a2:	8c 91       	ld	r24, X
     8a4:	1b 97       	sbiw	r26, 0x0b	; 11
     8a6:	8d 8b       	std	Y+21, r24	; 0x15
     8a8:	1c 96       	adiw	r26, 0x0c	; 12
     8aa:	9c 91       	ld	r25, X
     8ac:	1c 97       	sbiw	r26, 0x0c	; 12
     8ae:	9e 8b       	std	Y+22, r25	; 0x16
     8b0:	1d 96       	adiw	r26, 0x0d	; 13
     8b2:	ac 91       	ld	r26, X
     8b4:	af 8b       	std	Y+23, r26	; 0x17
     8b6:	aa a1       	ldd	r26, Y+34	; 0x22
     8b8:	bb a1       	ldd	r27, Y+35	; 0x23
     8ba:	1e 96       	adiw	r26, 0x0e	; 14
     8bc:	bc 91       	ld	r27, X
     8be:	b8 8f       	std	Y+24, r27	; 0x18
     8c0:	aa a1       	ldd	r26, Y+34	; 0x22
     8c2:	bb a1       	ldd	r27, Y+35	; 0x23
     8c4:	1f 96       	adiw	r26, 0x0f	; 15
     8c6:	bc 91       	ld	r27, X
     8c8:	b9 8f       	std	Y+25, r27	; 0x19
     8ca:	aa a1       	ldd	r26, Y+34	; 0x22
     8cc:	bb a1       	ldd	r27, Y+35	; 0x23
     8ce:	50 96       	adiw	r26, 0x10	; 16
     8d0:	bc 91       	ld	r27, X
     8d2:	ba 8f       	std	Y+26, r27	; 0x1a
     8d4:	aa a1       	ldd	r26, Y+34	; 0x22
     8d6:	bb a1       	ldd	r27, Y+35	; 0x23
     8d8:	51 96       	adiw	r26, 0x11	; 17
     8da:	bc 91       	ld	r27, X
     8dc:	bb 8f       	std	Y+27, r27	; 0x1b
    cluster_t count_left = count;
    cluster_t cluster_current = fs->cluster_free;
     8de:	aa a1       	ldd	r26, Y+34	; 0x22
     8e0:	bb a1       	ldd	r27, Y+35	; 0x23
     8e2:	9e 96       	adiw	r26, 0x2e	; 46
     8e4:	4d 90       	ld	r4, X+
     8e6:	5d 90       	ld	r5, X+
     8e8:	6d 90       	ld	r6, X+
     8ea:	7c 90       	ld	r7, X
     8ec:	d1 97       	sbiw	r26, 0x31	; 49
    cluster_t cluster_next = 0;
    cluster_t cluster_count;
    uint16_t fat_entry16;
#if FAT_FAT32_SUPPORT
    uint32_t fat_entry32;
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
     8ee:	b1 e0       	ldi	r27, 0x01	; 1
     8f0:	bb 8b       	std	Y+19, r27	; 0x13
     8f2:	80 85       	ldd	r24, Z+8	; 0x08
     8f4:	8b 30       	cpi	r24, 0x0B	; 11
     8f6:	09 f0       	breq	.+2      	; 0x8fa <fat_append_clusters+0xc8>
     8f8:	1b 8a       	std	Y+19, r1	; 0x13

    if(is_fat32)
     8fa:	eb 89       	ldd	r30, Y+19	; 0x13
     8fc:	ee 23       	and	r30, r30
     8fe:	a9 f0       	breq	.+42     	; 0x92a <__stack+0x2b>
        cluster_count = fs->header.fat_size / sizeof(fat_entry32);
     900:	ea a1       	ldd	r30, Y+34	; 0x22
     902:	fb a1       	ldd	r31, Y+35	; 0x23
     904:	82 89       	ldd	r24, Z+18	; 0x12
     906:	93 89       	ldd	r25, Z+19	; 0x13
     908:	a4 89       	ldd	r26, Z+20	; 0x14
     90a:	b5 89       	ldd	r27, Z+21	; 0x15
     90c:	9c 01       	movw	r18, r24
     90e:	ad 01       	movw	r20, r26
     910:	56 95       	lsr	r21
     912:	47 95       	ror	r20
     914:	37 95       	ror	r19
     916:	27 95       	ror	r18
     918:	56 95       	lsr	r21
     91a:	47 95       	ror	r20
     91c:	37 95       	ror	r19
     91e:	27 95       	ror	r18
     920:	2e 8f       	std	Y+30, r18	; 0x1e
     922:	3f 8f       	std	Y+31, r19	; 0x1f
     924:	48 a3       	std	Y+32, r20	; 0x20
     926:	59 a3       	std	Y+33, r21	; 0x21
     928:	10 c0       	rjmp	.+32     	; 0x94a <__stack+0x4b>
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);
     92a:	ea a1       	ldd	r30, Y+34	; 0x22
     92c:	fb a1       	ldd	r31, Y+35	; 0x23
     92e:	82 89       	ldd	r24, Z+18	; 0x12
     930:	93 89       	ldd	r25, Z+19	; 0x13
     932:	a4 89       	ldd	r26, Z+20	; 0x14
     934:	b5 89       	ldd	r27, Z+21	; 0x15
     936:	9c 01       	movw	r18, r24
     938:	ad 01       	movw	r20, r26
     93a:	56 95       	lsr	r21
     93c:	47 95       	ror	r20
     93e:	37 95       	ror	r19
     940:	27 95       	ror	r18
     942:	2e 8f       	std	Y+30, r18	; 0x1e
     944:	3f 8f       	std	Y+31, r19	; 0x1f
     946:	48 a3       	std	Y+32, r20	; 0x20
     948:	59 a3       	std	Y+33, r21	; 0x21

    fs->cluster_free = 0;
     94a:	aa a1       	ldd	r26, Y+34	; 0x22
     94c:	bb a1       	ldd	r27, Y+35	; 0x23
     94e:	9e 96       	adiw	r26, 0x2e	; 46
     950:	1d 92       	st	X+, r1
     952:	1d 92       	st	X+, r1
     954:	1d 92       	st	X+, r1
     956:	1c 92       	st	X, r1
     958:	d1 97       	sbiw	r26, 0x31	; 49
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
     95a:	2e 8d       	ldd	r18, Y+30	; 0x1e
     95c:	3f 8d       	ldd	r19, Y+31	; 0x1f
     95e:	48 a1       	ldd	r20, Y+32	; 0x20
     960:	59 a1       	ldd	r21, Y+33	; 0x21
     962:	21 15       	cp	r18, r1
     964:	31 05       	cpc	r19, r1
     966:	41 05       	cpc	r20, r1
     968:	51 05       	cpc	r21, r1
     96a:	09 f4       	brne	.+2      	; 0x96e <__stack+0x6f>
     96c:	1f c1       	rjmp	.+574    	; 0xbac <__stack+0x2ad>
     96e:	2f 83       	std	Y+7, r18	; 0x07
     970:	38 87       	std	Y+8, r19	; 0x08
     972:	49 87       	std	Y+9, r20	; 0x09
     974:	5a 87       	std	Y+10, r21	; 0x0a
     976:	1f 86       	std	Y+15, r1	; 0x0f
     978:	18 8a       	std	Y+16, r1	; 0x10
     97a:	19 8a       	std	Y+17, r1	; 0x11
     97c:	1a 8a       	std	Y+18, r1	; 0x12
    {
        if(cluster_current < 2 || cluster_current >= cluster_count)
     97e:	32 e0       	ldi	r19, 0x02	; 2
     980:	43 16       	cp	r4, r19
     982:	51 04       	cpc	r5, r1
     984:	61 04       	cpc	r6, r1
     986:	71 04       	cpc	r7, r1
     988:	80 f0       	brcs	.+32     	; 0x9aa <__stack+0xab>
     98a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     98c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     98e:	a8 a1       	ldd	r26, Y+32	; 0x20
     990:	b9 a1       	ldd	r27, Y+33	; 0x21
     992:	48 16       	cp	r4, r24
     994:	59 06       	cpc	r5, r25
     996:	6a 06       	cpc	r6, r26
     998:	7b 06       	cpc	r7, r27
     99a:	68 f0       	brcs	.+26     	; 0x9b6 <__stack+0xb7>
            cluster_current = 2;
     99c:	68 94       	set
     99e:	44 24       	eor	r4, r4
     9a0:	41 f8       	bld	r4, 1
     9a2:	51 2c       	mov	r5, r1
     9a4:	61 2c       	mov	r6, r1
     9a6:	71 2c       	mov	r7, r1
     9a8:	06 c0       	rjmp	.+12     	; 0x9b6 <__stack+0xb7>
     9aa:	68 94       	set
     9ac:	44 24       	eor	r4, r4
     9ae:	41 f8       	bld	r4, 1
     9b0:	51 2c       	mov	r5, r1
     9b2:	61 2c       	mov	r6, r1
     9b4:	71 2c       	mov	r7, r1

#if FAT_FAT32_SUPPORT
        if(is_fat32)
     9b6:	9b 89       	ldd	r25, Y+19	; 0x13
     9b8:	99 23       	and	r25, r25
     9ba:	61 f1       	breq	.+88     	; 0xa14 <__stack+0x115>
        {
            if(!device_read(fat_offset + (offset_t) cluster_current * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
     9bc:	53 01       	movw	r10, r6
     9be:	42 01       	movw	r8, r4
     9c0:	24 2d       	mov	r18, r4
     9c2:	39 2d       	mov	r19, r9
     9c4:	4a 2d       	mov	r20, r10
     9c6:	5b 2d       	mov	r21, r11
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	02 e0       	ldi	r16, 0x02	; 2
     9d2:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__ashldi3>
     9d6:	ac 88       	ldd	r10, Y+20	; 0x14
     9d8:	bd 88       	ldd	r11, Y+21	; 0x15
     9da:	ce 88       	ldd	r12, Y+22	; 0x16
     9dc:	df 88       	ldd	r13, Y+23	; 0x17
     9de:	e8 8c       	ldd	r14, Y+24	; 0x18
     9e0:	f9 8c       	ldd	r15, Y+25	; 0x19
     9e2:	0a 8d       	ldd	r16, Y+26	; 0x1a
     9e4:	1b 8d       	ldd	r17, Y+27	; 0x1b
     9e6:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
     9ea:	d2 2e       	mov	r13, r18
     9ec:	c3 2e       	mov	r12, r19
     9ee:	b4 2e       	mov	r11, r20
     9f0:	a5 2e       	mov	r10, r21
     9f2:	96 2e       	mov	r9, r22
     9f4:	87 2e       	mov	r8, r23
     9f6:	38 2e       	mov	r3, r24
     9f8:	29 2e       	mov	r2, r25
     9fa:	68 94       	set
     9fc:	ee 24       	eor	r14, r14
     9fe:	e2 f8       	bld	r14, 2
     a00:	f1 2c       	mov	r15, r1
     a02:	8e 01       	movw	r16, r28
     a04:	0d 5f       	subi	r16, 0xFD	; 253
     a06:	1f 4f       	sbci	r17, 0xFF	; 255
     a08:	ec 8d       	ldd	r30, Y+28	; 0x1c
     a0a:	fd 8d       	ldd	r31, Y+29	; 0x1d
     a0c:	09 95       	icall
     a0e:	81 11       	cpse	r24, r1
     a10:	62 c1       	rjmp	.+708    	; 0xcd6 <__stack+0x3d7>
     a12:	57 c1       	rjmp	.+686    	; 0xcc2 <__stack+0x3c3>
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
     a14:	53 01       	movw	r10, r6
     a16:	42 01       	movw	r8, r4
     a18:	24 2d       	mov	r18, r4
     a1a:	39 2d       	mov	r19, r9
     a1c:	4a 2d       	mov	r20, r10
     a1e:	5b 2d       	mov	r21, r11
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	01 e0       	ldi	r16, 0x01	; 1
     a2a:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__ashldi3>
     a2e:	ac 88       	ldd	r10, Y+20	; 0x14
     a30:	bd 88       	ldd	r11, Y+21	; 0x15
     a32:	ce 88       	ldd	r12, Y+22	; 0x16
     a34:	df 88       	ldd	r13, Y+23	; 0x17
     a36:	e8 8c       	ldd	r14, Y+24	; 0x18
     a38:	f9 8c       	ldd	r15, Y+25	; 0x19
     a3a:	0a 8d       	ldd	r16, Y+26	; 0x1a
     a3c:	1b 8d       	ldd	r17, Y+27	; 0x1b
     a3e:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
     a42:	d2 2e       	mov	r13, r18
     a44:	c3 2e       	mov	r12, r19
     a46:	b4 2e       	mov	r11, r20
     a48:	a5 2e       	mov	r10, r21
     a4a:	96 2e       	mov	r9, r22
     a4c:	87 2e       	mov	r8, r23
     a4e:	38 2e       	mov	r3, r24
     a50:	29 2e       	mov	r2, r25
     a52:	68 94       	set
     a54:	ee 24       	eor	r14, r14
     a56:	e1 f8       	bld	r14, 1
     a58:	f1 2c       	mov	r15, r1
     a5a:	8e 01       	movw	r16, r28
     a5c:	0f 5f       	subi	r16, 0xFF	; 255
     a5e:	1f 4f       	sbci	r17, 0xFF	; 255
     a60:	ec 8d       	ldd	r30, Y+28	; 0x1c
     a62:	fd 8d       	ldd	r31, Y+29	; 0x1d
     a64:	09 95       	icall
     a66:	81 11       	cpse	r24, r1
     a68:	40 c1       	rjmp	.+640    	; 0xcea <__stack+0x3eb>
     a6a:	30 c1       	rjmp	.+608    	; 0xccc <__stack+0x3cd>

            /* If we don't need this free cluster for the
             * current allocation, we keep it in mind for
             * the next time.
             */
            if(count_left == 0)
     a6c:	2b 85       	ldd	r18, Y+11	; 0x0b
     a6e:	3c 85       	ldd	r19, Y+12	; 0x0c
     a70:	4d 85       	ldd	r20, Y+13	; 0x0d
     a72:	5e 85       	ldd	r21, Y+14	; 0x0e
     a74:	23 2b       	or	r18, r19
     a76:	24 2b       	or	r18, r20
     a78:	25 2b       	or	r18, r21
     a7a:	49 f4       	brne	.+18     	; 0xa8e <__stack+0x18f>
            {
                fs->cluster_free = cluster_current;
     a7c:	aa a1       	ldd	r26, Y+34	; 0x22
     a7e:	bb a1       	ldd	r27, Y+35	; 0x23
     a80:	9e 96       	adiw	r26, 0x2e	; 46
     a82:	4d 92       	st	X+, r4
     a84:	5d 92       	st	X+, r5
     a86:	6d 92       	st	X+, r6
     a88:	7c 92       	st	X, r7
     a8a:	d1 97       	sbiw	r26, 0x31	; 49
                break;
     a8c:	9c c0       	rjmp	.+312    	; 0xbc6 <__stack+0x2c7>
            }

            /* allocate cluster */
            if(cluster_next == 0)
     a8e:	2f 85       	ldd	r18, Y+15	; 0x0f
     a90:	38 89       	ldd	r19, Y+16	; 0x10
     a92:	49 89       	ldd	r20, Y+17	; 0x11
     a94:	5a 89       	ldd	r21, Y+18	; 0x12
     a96:	23 2b       	or	r18, r19
     a98:	24 2b       	or	r18, r20
     a9a:	25 2b       	or	r18, r21
     a9c:	49 f4       	brne	.+18     	; 0xab0 <__stack+0x1b1>
                fat_entry32 = HTOL32(FAT32_CLUSTER_LAST_MAX);
     a9e:	8f ef       	ldi	r24, 0xFF	; 255
     aa0:	9f ef       	ldi	r25, 0xFF	; 255
     aa2:	af ef       	ldi	r26, 0xFF	; 255
     aa4:	bf e0       	ldi	r27, 0x0F	; 15
     aa6:	8b 83       	std	Y+3, r24	; 0x03
     aa8:	9c 83       	std	Y+4, r25	; 0x04
     aaa:	ad 83       	std	Y+5, r26	; 0x05
     aac:	be 83       	std	Y+6, r27	; 0x06
     aae:	08 c0       	rjmp	.+16     	; 0xac0 <__stack+0x1c1>
            else
                fat_entry32 = htol32(cluster_next);
     ab0:	2f 85       	ldd	r18, Y+15	; 0x0f
     ab2:	38 89       	ldd	r19, Y+16	; 0x10
     ab4:	49 89       	ldd	r20, Y+17	; 0x11
     ab6:	5a 89       	ldd	r21, Y+18	; 0x12
     ab8:	2b 83       	std	Y+3, r18	; 0x03
     aba:	3c 83       	std	Y+4, r19	; 0x04
     abc:	4d 83       	std	Y+5, r20	; 0x05
     abe:	5e 83       	std	Y+6, r21	; 0x06

            if(!device_write(fat_offset + (offset_t) cluster_current * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
     ac0:	68 94       	set
     ac2:	ee 24       	eor	r14, r14
     ac4:	e2 f8       	bld	r14, 2
     ac6:	f1 2c       	mov	r15, r1
     ac8:	8e 01       	movw	r16, r28
     aca:	0d 5f       	subi	r16, 0xFD	; 253
     acc:	1f 4f       	sbci	r17, 0xFF	; 255
     ace:	2d 2d       	mov	r18, r13
     ad0:	3c 2d       	mov	r19, r12
     ad2:	4b 2d       	mov	r20, r11
     ad4:	5a 2d       	mov	r21, r10
     ad6:	69 2d       	mov	r22, r9
     ad8:	78 2d       	mov	r23, r8
     ada:	83 2d       	mov	r24, r3
     adc:	92 2d       	mov	r25, r2
     ade:	ec a1       	ldd	r30, Y+36	; 0x24
     ae0:	fd a1       	ldd	r31, Y+37	; 0x25
     ae2:	09 95       	icall
     ae4:	81 11       	cpse	r24, r1
     ae6:	38 c0       	rjmp	.+112    	; 0xb58 <__stack+0x259>
     ae8:	da c0       	rjmp	.+436    	; 0xc9e <__stack+0x39f>

            /* If we don't need this free cluster for the
             * current allocation, we keep it in mind for
             * the next time.
             */
            if(count_left == 0)
     aea:	2b 85       	ldd	r18, Y+11	; 0x0b
     aec:	3c 85       	ldd	r19, Y+12	; 0x0c
     aee:	4d 85       	ldd	r20, Y+13	; 0x0d
     af0:	5e 85       	ldd	r21, Y+14	; 0x0e
     af2:	23 2b       	or	r18, r19
     af4:	24 2b       	or	r18, r20
     af6:	25 2b       	or	r18, r21
     af8:	49 f4       	brne	.+18     	; 0xb0c <__stack+0x20d>
            {
                fs->cluster_free = cluster_current;
     afa:	aa a1       	ldd	r26, Y+34	; 0x22
     afc:	bb a1       	ldd	r27, Y+35	; 0x23
     afe:	9e 96       	adiw	r26, 0x2e	; 46
     b00:	4d 92       	st	X+, r4
     b02:	5d 92       	st	X+, r5
     b04:	6d 92       	st	X+, r6
     b06:	7c 92       	st	X, r7
     b08:	d1 97       	sbiw	r26, 0x31	; 49
                break;
     b0a:	5d c0       	rjmp	.+186    	; 0xbc6 <__stack+0x2c7>
            }

            /* allocate cluster */
            if(cluster_next == 0)
     b0c:	2f 85       	ldd	r18, Y+15	; 0x0f
     b0e:	38 89       	ldd	r19, Y+16	; 0x10
     b10:	49 89       	ldd	r20, Y+17	; 0x11
     b12:	5a 89       	ldd	r21, Y+18	; 0x12
     b14:	23 2b       	or	r18, r19
     b16:	24 2b       	or	r18, r20
     b18:	25 2b       	or	r18, r21
     b1a:	29 f4       	brne	.+10     	; 0xb26 <__stack+0x227>
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
     b1c:	4f ef       	ldi	r20, 0xFF	; 255
     b1e:	5f ef       	ldi	r21, 0xFF	; 255
     b20:	5a 83       	std	Y+2, r21	; 0x02
     b22:	49 83       	std	Y+1, r20	; 0x01
     b24:	04 c0       	rjmp	.+8      	; 0xb2e <__stack+0x22f>
            else
                fat_entry16 = htol16((uint16_t) cluster_next);
     b26:	8f 85       	ldd	r24, Y+15	; 0x0f
     b28:	98 89       	ldd	r25, Y+16	; 0x10
     b2a:	9a 83       	std	Y+2, r25	; 0x02
     b2c:	89 83       	std	Y+1, r24	; 0x01

            if(!device_write(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
     b2e:	68 94       	set
     b30:	ee 24       	eor	r14, r14
     b32:	e1 f8       	bld	r14, 1
     b34:	f1 2c       	mov	r15, r1
     b36:	8e 01       	movw	r16, r28
     b38:	0f 5f       	subi	r16, 0xFF	; 255
     b3a:	1f 4f       	sbci	r17, 0xFF	; 255
     b3c:	2d 2d       	mov	r18, r13
     b3e:	3c 2d       	mov	r19, r12
     b40:	4b 2d       	mov	r20, r11
     b42:	5a 2d       	mov	r21, r10
     b44:	69 2d       	mov	r22, r9
     b46:	78 2d       	mov	r23, r8
     b48:	83 2d       	mov	r24, r3
     b4a:	92 2d       	mov	r25, r2
     b4c:	ec a1       	ldd	r30, Y+36	; 0x24
     b4e:	fd a1       	ldd	r31, Y+37	; 0x25
     b50:	09 95       	icall
     b52:	88 23       	and	r24, r24
     b54:	09 f4       	brne	.+2      	; 0xb58 <__stack+0x259>
     b56:	a3 c0       	rjmp	.+326    	; 0xc9e <__stack+0x39f>
                break;
        }

        cluster_next = cluster_current;
        --count_left;
     b58:	2b 85       	ldd	r18, Y+11	; 0x0b
     b5a:	3c 85       	ldd	r19, Y+12	; 0x0c
     b5c:	4d 85       	ldd	r20, Y+13	; 0x0d
     b5e:	5e 85       	ldd	r21, Y+14	; 0x0e
     b60:	21 50       	subi	r18, 0x01	; 1
     b62:	31 09       	sbc	r19, r1
     b64:	41 09       	sbc	r20, r1
     b66:	51 09       	sbc	r21, r1
     b68:	2b 87       	std	Y+11, r18	; 0x0b
     b6a:	3c 87       	std	Y+12, r19	; 0x0c
     b6c:	4d 87       	std	Y+13, r20	; 0x0d
     b6e:	5e 87       	std	Y+14, r21	; 0x0e
     b70:	4f 86       	std	Y+15, r4	; 0x0f
     b72:	58 8a       	std	Y+16, r5	; 0x10
     b74:	69 8a       	std	Y+17, r6	; 0x11
     b76:	7a 8a       	std	Y+18, r7	; 0x12
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
     b78:	8f 81       	ldd	r24, Y+7	; 0x07
     b7a:	98 85       	ldd	r25, Y+8	; 0x08
     b7c:	a9 85       	ldd	r26, Y+9	; 0x09
     b7e:	ba 85       	ldd	r27, Y+10	; 0x0a
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	a1 09       	sbc	r26, r1
     b84:	b1 09       	sbc	r27, r1
     b86:	8f 83       	std	Y+7, r24	; 0x07
     b88:	98 87       	std	Y+8, r25	; 0x08
     b8a:	a9 87       	std	Y+9, r26	; 0x09
     b8c:	ba 87       	std	Y+10, r27	; 0x0a
     b8e:	9f ef       	ldi	r25, 0xFF	; 255
     b90:	49 1a       	sub	r4, r25
     b92:	59 0a       	sbc	r5, r25
     b94:	69 0a       	sbc	r6, r25
     b96:	79 0a       	sbc	r7, r25
     b98:	2f 81       	ldd	r18, Y+7	; 0x07
     b9a:	38 85       	ldd	r19, Y+8	; 0x08
     b9c:	49 85       	ldd	r20, Y+9	; 0x09
     b9e:	5a 85       	ldd	r21, Y+10	; 0x0a
     ba0:	23 2b       	or	r18, r19
     ba2:	24 2b       	or	r18, r20
     ba4:	25 2b       	or	r18, r21
     ba6:	09 f0       	breq	.+2      	; 0xbaa <__stack+0x2ab>
     ba8:	ea ce       	rjmp	.-556    	; 0x97e <__stack+0x7f>
     baa:	04 c0       	rjmp	.+8      	; 0xbb4 <__stack+0x2b5>
    device_read_t device_read = fs->partition->device_read;
    device_write_t device_write = fs->partition->device_write;
    offset_t fat_offset = fs->header.fat_offset;
    cluster_t count_left = count;
    cluster_t cluster_current = fs->cluster_free;
    cluster_t cluster_next = 0;
     bac:	1f 86       	std	Y+15, r1	; 0x0f
     bae:	18 8a       	std	Y+16, r1	; 0x10
     bb0:	19 8a       	std	Y+17, r1	; 0x11
     bb2:	1a 8a       	std	Y+18, r1	; 0x12
        --count_left;
    }

    do
    {
        if(count_left > 0)
     bb4:	8b 85       	ldd	r24, Y+11	; 0x0b
     bb6:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb8:	ad 85       	ldd	r26, Y+13	; 0x0d
     bba:	be 85       	ldd	r27, Y+14	; 0x0e
     bbc:	89 2b       	or	r24, r25
     bbe:	8a 2b       	or	r24, r26
     bc0:	8b 2b       	or	r24, r27
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <__stack+0x2c7>
     bc4:	6c c0       	rjmp	.+216    	; 0xc9e <__stack+0x39f>
            break;

        /* We allocated a new cluster chain. Now join
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
     bc6:	2e a1       	ldd	r18, Y+38	; 0x26
     bc8:	3f a1       	ldd	r19, Y+39	; 0x27
     bca:	48 a5       	ldd	r20, Y+40	; 0x28
     bcc:	59 a5       	ldd	r21, Y+41	; 0x29
     bce:	22 30       	cpi	r18, 0x02	; 2
     bd0:	31 05       	cpc	r19, r1
     bd2:	41 05       	cpc	r20, r1
     bd4:	51 05       	cpc	r21, r1
     bd6:	08 f4       	brcc	.+2      	; 0xbda <__stack+0x2db>
     bd8:	5d c0       	rjmp	.+186    	; 0xc94 <__stack+0x395>
        {
#if FAT_FAT32_SUPPORT
            if(is_fat32)
     bda:	3b 89       	ldd	r19, Y+19	; 0x13
     bdc:	33 23       	and	r19, r19
     bde:	79 f1       	breq	.+94     	; 0xc3e <__stack+0x33f>
            {
                fat_entry32 = htol32(cluster_next);
     be0:	8f 85       	ldd	r24, Y+15	; 0x0f
     be2:	98 89       	ldd	r25, Y+16	; 0x10
     be4:	a9 89       	ldd	r26, Y+17	; 0x11
     be6:	ba 89       	ldd	r27, Y+18	; 0x12
     be8:	8b 83       	std	Y+3, r24	; 0x03
     bea:	9c 83       	std	Y+4, r25	; 0x04
     bec:	ad 83       	std	Y+5, r26	; 0x05
     bee:	be 83       	std	Y+6, r27	; 0x06

                if(!device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
     bf0:	2e a1       	ldd	r18, Y+38	; 0x26
     bf2:	3f a1       	ldd	r19, Y+39	; 0x27
     bf4:	48 a5       	ldd	r20, Y+40	; 0x28
     bf6:	59 a5       	ldd	r21, Y+41	; 0x29
     bf8:	49 01       	movw	r8, r18
     bfa:	5a 01       	movw	r10, r20
     bfc:	39 2d       	mov	r19, r9
     bfe:	4a 2d       	mov	r20, r10
     c00:	5b 2d       	mov	r21, r11
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	02 e0       	ldi	r16, 0x02	; 2
     c0c:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__ashldi3>
     c10:	ac 88       	ldd	r10, Y+20	; 0x14
     c12:	bd 88       	ldd	r11, Y+21	; 0x15
     c14:	ce 88       	ldd	r12, Y+22	; 0x16
     c16:	df 88       	ldd	r13, Y+23	; 0x17
     c18:	e8 8c       	ldd	r14, Y+24	; 0x18
     c1a:	f9 8c       	ldd	r15, Y+25	; 0x19
     c1c:	0a 8d       	ldd	r16, Y+26	; 0x1a
     c1e:	1b 8d       	ldd	r17, Y+27	; 0x1b
     c20:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
     c24:	68 94       	set
     c26:	ee 24       	eor	r14, r14
     c28:	e2 f8       	bld	r14, 2
     c2a:	f1 2c       	mov	r15, r1
     c2c:	8e 01       	movw	r16, r28
     c2e:	0d 5f       	subi	r16, 0xFD	; 253
     c30:	1f 4f       	sbci	r17, 0xFF	; 255
     c32:	ec a1       	ldd	r30, Y+36	; 0x24
     c34:	fd a1       	ldd	r31, Y+37	; 0x25
     c36:	09 95       	icall
     c38:	88 23       	and	r24, r24
     c3a:	89 f1       	breq	.+98     	; 0xc9e <__stack+0x39f>
     c3c:	2b c0       	rjmp	.+86     	; 0xc94 <__stack+0x395>
                    break;
            }
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);
     c3e:	2f 85       	ldd	r18, Y+15	; 0x0f
     c40:	38 89       	ldd	r19, Y+16	; 0x10
     c42:	3a 83       	std	Y+2, r19	; 0x02
     c44:	29 83       	std	Y+1, r18	; 0x01

                if(!device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
     c46:	8e a1       	ldd	r24, Y+38	; 0x26
     c48:	9f a1       	ldd	r25, Y+39	; 0x27
     c4a:	a8 a5       	ldd	r26, Y+40	; 0x28
     c4c:	b9 a5       	ldd	r27, Y+41	; 0x29
     c4e:	4c 01       	movw	r8, r24
     c50:	5d 01       	movw	r10, r26
     c52:	28 2f       	mov	r18, r24
     c54:	39 2d       	mov	r19, r9
     c56:	4a 2d       	mov	r20, r10
     c58:	5b 2d       	mov	r21, r11
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	01 e0       	ldi	r16, 0x01	; 1
     c64:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__ashldi3>
     c68:	ac 88       	ldd	r10, Y+20	; 0x14
     c6a:	bd 88       	ldd	r11, Y+21	; 0x15
     c6c:	ce 88       	ldd	r12, Y+22	; 0x16
     c6e:	df 88       	ldd	r13, Y+23	; 0x17
     c70:	e8 8c       	ldd	r14, Y+24	; 0x18
     c72:	f9 8c       	ldd	r15, Y+25	; 0x19
     c74:	0a 8d       	ldd	r16, Y+26	; 0x1a
     c76:	1b 8d       	ldd	r17, Y+27	; 0x1b
     c78:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
     c7c:	68 94       	set
     c7e:	ee 24       	eor	r14, r14
     c80:	e1 f8       	bld	r14, 1
     c82:	f1 2c       	mov	r15, r1
     c84:	8e 01       	movw	r16, r28
     c86:	0f 5f       	subi	r16, 0xFF	; 255
     c88:	1f 4f       	sbci	r17, 0xFF	; 255
     c8a:	ec a1       	ldd	r30, Y+36	; 0x24
     c8c:	fd a1       	ldd	r31, Y+37	; 0x25
     c8e:	09 95       	icall
     c90:	88 23       	and	r24, r24
     c92:	29 f0       	breq	.+10     	; 0xc9e <__stack+0x39f>
                    break;
            }
        }

        return cluster_next;
     c94:	6f 85       	ldd	r22, Y+15	; 0x0f
     c96:	78 89       	ldd	r23, Y+16	; 0x10
     c98:	89 89       	ldd	r24, Y+17	; 0x11
     c9a:	9a 89       	ldd	r25, Y+18	; 0x12
     c9c:	2c c0       	rjmp	.+88     	; 0xcf6 <__stack+0x3f7>
    } while(0);

    /* No space left on device or writing error.
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);
     c9e:	4f 85       	ldd	r20, Y+15	; 0x0f
     ca0:	58 89       	ldd	r21, Y+16	; 0x10
     ca2:	69 89       	ldd	r22, Y+17	; 0x11
     ca4:	7a 89       	ldd	r23, Y+18	; 0x12
     ca6:	8a a1       	ldd	r24, Y+34	; 0x22
     ca8:	9b a1       	ldd	r25, Y+35	; 0x23
     caa:	0e 94 4e 02 	call	0x49c	; 0x49c <fat_free_clusters>

    return 0;
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	1f c0       	rjmp	.+62     	; 0xcf6 <__stack+0x3f7>
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
    if(!fs)
        return 0;
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	1a c0       	rjmp	.+52     	; 0xcf6 <__stack+0x3f7>

#if FAT_FAT32_SUPPORT
        if(is_fat32)
        {
            if(!device_read(fat_offset + (offset_t) cluster_current * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
                return 0;
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	15 c0       	rjmp	.+42     	; 0xcf6 <__stack+0x3f7>
        }
        else
#endif
        {
            if(!device_read(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
                return 0;
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	10 c0       	rjmp	.+32     	; 0xcf6 <__stack+0x3f7>

#if FAT_FAT32_SUPPORT
        if(is_fat32)
        {
            /* check if this is a free cluster */
            if(fat_entry32 != HTOL32(FAT32_CLUSTER_FREE))
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	9c 81       	ldd	r25, Y+4	; 0x04
     cda:	ad 81       	ldd	r26, Y+5	; 0x05
     cdc:	be 81       	ldd	r27, Y+6	; 0x06
     cde:	89 2b       	or	r24, r25
     ce0:	8a 2b       	or	r24, r26
     ce2:	8b 2b       	or	r24, r27
     ce4:	09 f0       	breq	.+2      	; 0xce8 <__stack+0x3e9>
     ce6:	48 cf       	rjmp	.-368    	; 0xb78 <__stack+0x279>
     ce8:	c1 ce       	rjmp	.-638    	; 0xa6c <__stack+0x16d>
        }
        else
#endif
        {
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	9a 81       	ldd	r25, Y+2	; 0x02
     cee:	89 2b       	or	r24, r25
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <__stack+0x3f5>
     cf2:	42 cf       	rjmp	.-380    	; 0xb78 <__stack+0x279>
     cf4:	fa ce       	rjmp	.-524    	; 0xaea <__stack+0x1eb>
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);

    return 0;
}
     cf6:	a9 96       	adiw	r28, 0x29	; 41
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	de bf       	out	0x3e, r29	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	ff 90       	pop	r15
     d0c:	ef 90       	pop	r14
     d0e:	df 90       	pop	r13
     d10:	cf 90       	pop	r12
     d12:	bf 90       	pop	r11
     d14:	af 90       	pop	r10
     d16:	9f 90       	pop	r9
     d18:	8f 90       	pop	r8
     d1a:	7f 90       	pop	r7
     d1c:	6f 90       	pop	r6
     d1e:	5f 90       	pop	r5
     d20:	4f 90       	pop	r4
     d22:	3f 90       	pop	r3
     d24:	2f 90       	pop	r2
     d26:	08 95       	ret

00000d28 <fat_clear_cluster_callback>:
 * Callback function for clearing a cluster.
 */
uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
{
    return 16;
}
     d28:	80 e1       	ldi	r24, 0x10	; 16
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	08 95       	ret

00000d2e <fat_cluster_offset>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
     d2e:	2f 92       	push	r2
     d30:	3f 92       	push	r3
     d32:	4f 92       	push	r4
     d34:	5f 92       	push	r5
     d36:	6f 92       	push	r6
     d38:	7f 92       	push	r7
     d3a:	8f 92       	push	r8
     d3c:	9f 92       	push	r9
     d3e:	af 92       	push	r10
     d40:	bf 92       	push	r11
     d42:	cf 92       	push	r12
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
    if(!fs || cluster_num < 2)
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	59 f1       	breq	.+86     	; 0xdac <fat_cluster_offset+0x7e>
     d56:	42 30       	cpi	r20, 0x02	; 2
     d58:	51 05       	cpc	r21, r1
     d5a:	61 05       	cpc	r22, r1
     d5c:	71 05       	cpc	r23, r1
     d5e:	78 f1       	brcs	.+94     	; 0xdbe <fat_cluster_offset+0x90>
     d60:	ec 01       	movw	r28, r24
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
     d62:	42 50       	subi	r20, 0x02	; 2
     d64:	51 09       	sbc	r21, r1
     d66:	61 09       	sbc	r22, r1
     d68:	71 09       	sbc	r23, r1
     d6a:	1a 01       	movw	r2, r20
     d6c:	2b 01       	movw	r4, r22
     d6e:	08 8d       	ldd	r16, Y+24	; 0x18
     d70:	19 8d       	ldd	r17, Y+25	; 0x19
     d72:	a0 2e       	mov	r10, r16
     d74:	b1 2e       	mov	r11, r17
     d76:	c1 2c       	mov	r12, r1
     d78:	d1 2c       	mov	r13, r1
     d7a:	e1 2c       	mov	r14, r1
     d7c:	f1 2c       	mov	r15, r1
     d7e:	00 e0       	ldi	r16, 0x00	; 0
     d80:	10 e0       	ldi	r17, 0x00	; 0
     d82:	22 2d       	mov	r18, r2
     d84:	33 2d       	mov	r19, r3
     d86:	44 2d       	mov	r20, r4
     d88:	55 2d       	mov	r21, r5
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__muldi3>
     d96:	aa 8c       	ldd	r10, Y+26	; 0x1a
     d98:	bb 8c       	ldd	r11, Y+27	; 0x1b
     d9a:	cc 8c       	ldd	r12, Y+28	; 0x1c
     d9c:	dd 8c       	ldd	r13, Y+29	; 0x1d
     d9e:	ee 8c       	ldd	r14, Y+30	; 0x1e
     da0:	ff 8c       	ldd	r15, Y+31	; 0x1f
     da2:	08 a1       	ldd	r16, Y+32	; 0x20
     da4:	19 a1       	ldd	r17, Y+33	; 0x21
     da6:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
     daa:	11 c0       	rjmp	.+34     	; 0xdce <fat_cluster_offset+0xa0>
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 e0       	ldi	r20, 0x00	; 0
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	08 c0       	rjmp	.+16     	; 0xdce <fat_cluster_offset+0xa0>
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
}
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	df 90       	pop	r13
     ddc:	cf 90       	pop	r12
     dde:	bf 90       	pop	r11
     de0:	af 90       	pop	r10
     de2:	9f 90       	pop	r9
     de4:	8f 90       	pop	r8
     de6:	7f 90       	pop	r7
     de8:	6f 90       	pop	r6
     dea:	5f 90       	pop	r5
     dec:	4f 90       	pop	r4
     dee:	3f 90       	pop	r3
     df0:	2f 90       	pop	r2
     df2:	08 95       	ret

00000df4 <fat_calc_83_checksum>:
 *
 * \param[in] file_name_83 The 11-byte file name buffer.
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
     df4:	ac 01       	movw	r20, r24
    uint8_t checksum = file_name_83[0];
     df6:	fc 01       	movw	r30, r24
     df8:	81 91       	ld	r24, Z+
     dfa:	45 5f       	subi	r20, 0xF5	; 245
     dfc:	5f 4f       	sbci	r21, 0xFF	; 255
    for(uint8_t i = 1; i < 11; ++i)
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
     dfe:	90 e8       	ldi	r25, 0x80	; 128
     e00:	89 9f       	mul	r24, r25
     e02:	90 01       	movw	r18, r0
     e04:	11 24       	eor	r1, r1
     e06:	98 2f       	mov	r25, r24
     e08:	96 95       	lsr	r25
     e0a:	92 2b       	or	r25, r18
     e0c:	21 91       	ld	r18, Z+
     e0e:	89 2f       	mov	r24, r25
     e10:	82 0f       	add	r24, r18
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
     e12:	e4 17       	cp	r30, r20
     e14:	f5 07       	cpc	r31, r21
     e16:	99 f7       	brne	.-26     	; 0xdfe <fat_calc_83_checksum+0xa>
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];

    return checksum;
}
     e18:	08 95       	ret

00000e1a <fat_clear_cluster>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
     e1a:	af 92       	push	r10
     e1c:	bf 92       	push	r11
     e1e:	cf 92       	push	r12
     e20:	df 92       	push	r13
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	60 97       	sbiw	r28, 0x10	; 16
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
    if(cluster_num < 2)
     e3e:	42 30       	cpi	r20, 0x02	; 2
     e40:	51 05       	cpc	r21, r1
     e42:	61 05       	cpc	r22, r1
     e44:	71 05       	cpc	r23, r1
     e46:	00 f1       	brcs	.+64     	; 0xe88 <fat_clear_cluster+0x6e>
     e48:	7c 01       	movw	r14, r24
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);
     e4a:	0e 94 97 06 	call	0xd2e	; 0xd2e <fat_cluster_offset>

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
     e4e:	8e 01       	movw	r16, r28
     e50:	0f 5f       	subi	r16, 0xFF	; 255
     e52:	1f 4f       	sbci	r17, 0xFF	; 255
     e54:	e0 e1       	ldi	r30, 0x10	; 16
     e56:	d8 01       	movw	r26, r16
     e58:	1d 92       	st	X+, r1
     e5a:	ea 95       	dec	r30
     e5c:	e9 f7       	brne	.-6      	; 0xe58 <fat_clear_cluster+0x3e>
    return fs->partition->device_write_interval(cluster_offset,
     e5e:	d7 01       	movw	r26, r14
     e60:	ed 91       	ld	r30, X+
     e62:	fc 91       	ld	r31, X
     e64:	11 97       	sbiw	r26, 0x01	; 1
     e66:	58 96       	adiw	r26, 0x18	; 24
     e68:	ed 90       	ld	r14, X+
     e6a:	fc 90       	ld	r15, X
     e6c:	59 97       	sbiw	r26, 0x19	; 25
     e6e:	06 80       	ldd	r0, Z+6	; 0x06
     e70:	f7 81       	ldd	r31, Z+7	; 0x07
     e72:	e0 2d       	mov	r30, r0
     e74:	a1 2c       	mov	r10, r1
     e76:	b1 2c       	mov	r11, r1
     e78:	0f 2e       	mov	r0, r31
     e7a:	f4 e9       	ldi	r31, 0x94	; 148
     e7c:	cf 2e       	mov	r12, r31
     e7e:	f6 e0       	ldi	r31, 0x06	; 6
     e80:	df 2e       	mov	r13, r31
     e82:	f0 2d       	mov	r31, r0
     e84:	09 95       	icall
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <fat_clear_cluster+0x70>
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(cluster_num < 2)
        return 0;
     e88:	80 e0       	ldi	r24, 0x00	; 0
                                                zero,
                                                fs->header.cluster_size,
                                                fat_clear_cluster_callback,
                                                0
                                               );
}
     e8a:	60 96       	adiw	r28, 0x10	; 16
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	df 90       	pop	r13
     ea4:	cf 90       	pop	r12
     ea6:	bf 90       	pop	r11
     ea8:	af 90       	pop	r10
     eaa:	08 95       	ret

00000eac <fat_get_fs_free_16_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT.
 */
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
     eac:	cf 92       	push	r12
     eae:	df 92       	push	r13
     eb0:	ef 92       	push	r14
     eb2:	ff 92       	push	r15
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;
     ebc:	f7 01       	movw	r30, r14
     ebe:	c4 80       	ldd	r12, Z+4	; 0x04
     ec0:	d5 80       	ldd	r13, Z+5	; 0x05

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
     ec2:	c1 14       	cp	r12, r1
     ec4:	d1 04       	cpc	r13, r1
     ec6:	d1 f0       	breq	.+52     	; 0xefc <fat_get_fs_free_16_callback+0x50>
     ec8:	8c 01       	movw	r16, r24
     eca:	c0 e0       	ldi	r28, 0x00	; 0
     ecc:	d0 e0       	ldi	r29, 0x00	; 0
    {
        uint16_t cluster = read16(buffer);
     ece:	c8 01       	movw	r24, r16
     ed0:	8c 0f       	add	r24, r28
     ed2:	9d 1f       	adc	r25, r29
     ed4:	0e 94 76 01 	call	0x2ec	; 0x2ec <read16>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
     ed8:	89 2b       	or	r24, r25
     eda:	61 f4       	brne	.+24     	; 0xef4 <fat_get_fs_free_16_callback+0x48>
            ++(count_arg->cluster_count);
     edc:	f7 01       	movw	r30, r14
     ede:	80 81       	ld	r24, Z
     ee0:	91 81       	ldd	r25, Z+1	; 0x01
     ee2:	a2 81       	ldd	r26, Z+2	; 0x02
     ee4:	b3 81       	ldd	r27, Z+3	; 0x03
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	a1 1d       	adc	r26, r1
     eea:	b1 1d       	adc	r27, r1
     eec:	80 83       	st	Z, r24
     eee:	91 83       	std	Z+1, r25	; 0x01
     ef0:	a2 83       	std	Z+2, r26	; 0x02
     ef2:	b3 83       	std	Z+3, r27	; 0x03
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
     ef4:	22 96       	adiw	r28, 0x02	; 2
     ef6:	cc 15       	cp	r28, r12
     ef8:	dd 05       	cpc	r29, r13
     efa:	48 f3       	brcs	.-46     	; 0xece <fat_get_fs_free_16_callback+0x22>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	ff 90       	pop	r15
     f08:	ef 90       	pop	r14
     f0a:	df 90       	pop	r13
     f0c:	cf 90       	pop	r12
     f0e:	08 95       	ret

00000f10 <fat_dir_entry_read_callback>:
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
     f10:	2f 92       	push	r2
     f12:	3f 92       	push	r3
     f14:	4f 92       	push	r4
     f16:	5f 92       	push	r5
     f18:	6f 92       	push	r6
     f1a:	7f 92       	push	r7
     f1c:	8f 92       	push	r8
     f1e:	9f 92       	push	r9
     f20:	af 92       	push	r10
     f22:	bf 92       	push	r11
     f24:	cf 92       	push	r12
     f26:	df 92       	push	r13
     f28:	ef 92       	push	r14
     f2a:	ff 92       	push	r15
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	2d 97       	sbiw	r28, 0x0d	; 13
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	f7 01       	movw	r30, r14
    struct fat_read_dir_callback_arg* arg = p;
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
     f46:	a0 80       	ld	r10, Z
     f48:	b1 80       	ldd	r11, Z+1	; 0x01

    arg->bytes_read += 32;
     f4a:	a2 81       	ldd	r26, Z+2	; 0x02
     f4c:	b3 81       	ldd	r27, Z+3	; 0x03
     f4e:	90 96       	adiw	r26, 0x20	; 32
     f50:	b3 83       	std	Z+3, r27	; 0x03
     f52:	a2 83       	std	Z+2, r26	; 0x02

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
     f54:	dc 01       	movw	r26, r24
     f56:	fc 90       	ld	r15, X
     f58:	b5 ee       	ldi	r27, 0xE5	; 229
     f5a:	fb 16       	cp	r15, r27
     f5c:	11 f0       	breq	.+4      	; 0xf62 <fat_dir_entry_read_callback+0x52>
     f5e:	f1 10       	cpse	r15, r1
     f60:	03 c0       	rjmp	.+6      	; 0xf68 <fat_dir_entry_read_callback+0x58>
    {
#if FAT_LFN_SUPPORT
        arg->checksum = 0;
     f62:	14 82       	std	Z+4, r1	; 0x04
#endif
        return 1;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	37 c1       	rjmp	.+622    	; 0x11d6 <fat_dir_entry_read_callback+0x2c6>
    /* skip lfn entries */
    if(buffer[11] == 0x0f)
        return 1;
#endif

    char* long_name = dir_entry->long_name;
     f68:	45 01       	movw	r8, r10
#if FAT_LFN_SUPPORT
    if(buffer[11] == 0x0f)
     f6a:	dc 01       	movw	r26, r24
     f6c:	1b 96       	adiw	r26, 0x0b	; 11
     f6e:	fc 90       	ld	r15, X
     f70:	bf e0       	ldi	r27, 0x0F	; 15
     f72:	fb 12       	cpse	r15, r27
     f74:	48 c0       	rjmp	.+144    	; 0x1006 <fat_dir_entry_read_callback+0xf6>
    {
        /* checksum validation */
        if(arg->checksum == 0 || arg->checksum != buffer[13])
     f76:	f4 80       	ldd	r15, Z+4	; 0x04
     f78:	ff 20       	and	r15, r15
     f7a:	29 f0       	breq	.+10     	; 0xf86 <fat_dir_entry_read_callback+0x76>
     f7c:	dc 01       	movw	r26, r24
     f7e:	1d 96       	adiw	r26, 0x0d	; 13
     f80:	ec 90       	ld	r14, X
     f82:	fe 14       	cp	r15, r14
     f84:	a9 f0       	breq	.+42     	; 0xfb0 <fat_dir_entry_read_callback+0xa0>
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
     f86:	0f 2e       	mov	r0, r31
     f88:	f1 e3       	ldi	r31, 0x31	; 49
     f8a:	ff 2e       	mov	r15, r31
     f8c:	f0 2d       	mov	r31, r0
     f8e:	d5 01       	movw	r26, r10
     f90:	1d 92       	st	X+, r1
     f92:	fa 94       	dec	r15
     f94:	e9 f7       	brne	.-6      	; 0xf90 <fat_dir_entry_read_callback+0x80>

            arg->checksum = buffer[13];
     f96:	dc 01       	movw	r26, r24
     f98:	1d 96       	adiw	r26, 0x0d	; 13
     f9a:	fc 90       	ld	r15, X
     f9c:	f4 82       	std	Z+4, r15	; 0x04
            dir_entry->entry_offset = offset;
     f9e:	f5 01       	movw	r30, r10
     fa0:	01 a7       	std	Z+41, r16	; 0x29
     fa2:	12 a7       	std	Z+42, r17	; 0x2a
     fa4:	23 a7       	std	Z+43, r18	; 0x2b
     fa6:	34 a7       	std	Z+44, r19	; 0x2c
     fa8:	45 a7       	std	Z+45, r20	; 0x2d
     faa:	56 a7       	std	Z+46, r21	; 0x2e
     fac:	67 a7       	std	Z+47, r22	; 0x2f
     fae:	70 ab       	std	Z+48, r23	; 0x30

        /* lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
     fb0:	dc 01       	movw	r26, r24
     fb2:	2c 91       	ld	r18, X
     fb4:	2f 73       	andi	r18, 0x3F	; 63
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	21 50       	subi	r18, 0x01	; 1
     fba:	31 09       	sbc	r19, r1
     fbc:	4d e0       	ldi	r20, 0x0D	; 13
     fbe:	42 9f       	mul	r20, r18
     fc0:	b0 01       	movw	r22, r0
     fc2:	43 9f       	mul	r20, r19
     fc4:	70 0d       	add	r23, r0
     fc6:	11 24       	eor	r1, r1
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
     fc8:	2d e0       	ldi	r18, 0x0D	; 13
     fca:	e0 e0       	ldi	r30, 0x00	; 0
     fcc:	f1 e0       	ldi	r31, 0x01	; 1
     fce:	de 01       	movw	r26, r28
     fd0:	11 96       	adiw	r26, 0x01	; 1
     fd2:	01 90       	ld	r0, Z+
     fd4:	0d 92       	st	X+, r0
     fd6:	2a 95       	dec	r18
     fd8:	e1 f7       	brne	.-8      	; 0xfd2 <fat_dir_entry_read_callback+0xc2>
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
     fda:	6f 31       	cpi	r22, 0x1F	; 31
     fdc:	71 05       	cpc	r23, r1
     fde:	08 f4       	brcc	.+2      	; 0xfe2 <fat_dir_entry_read_callback+0xd2>
     fe0:	dd c0       	rjmp	.+442    	; 0x119c <fat_dir_entry_read_callback+0x28c>
     fe2:	0f c0       	rjmp	.+30     	; 0x1002 <fat_dir_entry_read_callback+0xf2>
            long_name[char_offset + i] = buffer[char_mapping[i]];
     fe4:	21 91       	ld	r18, Z+
     fe6:	8c 01       	movw	r16, r24
     fe8:	02 0f       	add	r16, r18
     fea:	11 1d       	adc	r17, r1
     fec:	d8 01       	movw	r26, r16
     fee:	2c 91       	ld	r18, X
     ff0:	d5 01       	movw	r26, r10
     ff2:	2d 93       	st	X+, r18
     ff4:	5d 01       	movw	r10, r26
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
     ff6:	e6 17       	cp	r30, r22
     ff8:	f7 07       	cpc	r31, r23
     ffa:	19 f0       	breq	.+6      	; 0x1002 <fat_dir_entry_read_callback+0xf2>
     ffc:	e4 17       	cp	r30, r20
     ffe:	f5 07       	cpc	r31, r21
    1000:	89 f7       	brne	.-30     	; 0xfe4 <fat_dir_entry_read_callback+0xd4>
            long_name[char_offset + i] = buffer[char_mapping[i]];

        return 1;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	e8 c0       	rjmp	.+464    	; 0x11d6 <fat_dir_entry_read_callback+0x2c6>
    1006:	7f 01       	movw	r14, r30
    1008:	77 2e       	mov	r7, r23
    100a:	66 2e       	mov	r6, r22
    100c:	55 2e       	mov	r5, r21
    100e:	44 2e       	mov	r4, r20
    1010:	33 2e       	mov	r3, r19
    1012:	22 2e       	mov	r2, r18
    1014:	6c 01       	movw	r12, r24
    else
#endif
    {
#if FAT_LFN_SUPPORT
        /* if we do not have a long name or the previous lfn does not match, take the 8.3 name */
        if(long_name[0] == '\0' || arg->checksum != fat_calc_83_checksum(buffer))
    1016:	f5 01       	movw	r30, r10
    1018:	80 81       	ld	r24, Z
    101a:	88 23       	and	r24, r24
    101c:	49 f0       	breq	.+18     	; 0x1030 <fat_dir_entry_read_callback+0x120>
    101e:	c6 01       	movw	r24, r12
    1020:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fat_calc_83_checksum>
    1024:	d7 01       	movw	r26, r14
    1026:	14 96       	adiw	r26, 0x04	; 4
    1028:	9c 91       	ld	r25, X
    102a:	98 17       	cp	r25, r24
    102c:	09 f4       	brne	.+2      	; 0x1030 <fat_dir_entry_read_callback+0x120>
    102e:	80 c0       	rjmp	.+256    	; 0x1130 <fat_dir_entry_read_callback+0x220>
#endif
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
    1030:	81 e3       	ldi	r24, 0x31	; 49
    1032:	f5 01       	movw	r30, r10
    1034:	11 92       	st	Z+, r1
    1036:	8a 95       	dec	r24
    1038:	e9 f7       	brne	.-6      	; 0x1034 <fat_dir_entry_read_callback+0x124>
            dir_entry->entry_offset = offset;
    103a:	d5 01       	movw	r26, r10
    103c:	99 96       	adiw	r26, 0x29	; 41
    103e:	0c 93       	st	X, r16
    1040:	99 97       	sbiw	r26, 0x29	; 41
    1042:	9a 96       	adiw	r26, 0x2a	; 42
    1044:	1c 93       	st	X, r17
    1046:	9a 97       	sbiw	r26, 0x2a	; 42
    1048:	9b 96       	adiw	r26, 0x2b	; 43
    104a:	2c 92       	st	X, r2
    104c:	9b 97       	sbiw	r26, 0x2b	; 43
    104e:	9c 96       	adiw	r26, 0x2c	; 44
    1050:	3c 92       	st	X, r3
    1052:	9c 97       	sbiw	r26, 0x2c	; 44
    1054:	9d 96       	adiw	r26, 0x2d	; 45
    1056:	4c 92       	st	X, r4
    1058:	9d 97       	sbiw	r26, 0x2d	; 45
    105a:	9e 96       	adiw	r26, 0x2e	; 46
    105c:	5c 92       	st	X, r5
    105e:	9e 97       	sbiw	r26, 0x2e	; 46
    1060:	9f 96       	adiw	r26, 0x2f	; 47
    1062:	6c 92       	st	X, r6
    1064:	9f 97       	sbiw	r26, 0x2f	; 47
    1066:	d0 96       	adiw	r26, 0x30	; 48
    1068:	7c 92       	st	X, r7

            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(buffer[i] == ' ')
    106a:	f6 01       	movw	r30, r12
    106c:	80 81       	ld	r24, Z
    106e:	80 32       	cpi	r24, 0x20	; 32
    1070:	19 f1       	breq	.+70     	; 0x10b8 <fat_dir_entry_read_callback+0x1a8>
    1072:	6a 2d       	mov	r22, r10
    1074:	96 01       	movw	r18, r12
    1076:	29 5f       	subi	r18, 0xF9	; 249
    1078:	3f 4f       	sbci	r19, 0xFF	; 255
    107a:	0a 2d       	mov	r16, r10
    107c:	1b 2d       	mov	r17, r11
    107e:	04 c0       	rjmp	.+8      	; 0x1088 <fat_dir_entry_read_callback+0x178>
    1080:	31 96       	adiw	r30, 0x01	; 1
    1082:	80 81       	ld	r24, Z
    1084:	80 32       	cpi	r24, 0x20	; 32
    1086:	c9 f0       	breq	.+50     	; 0x10ba <fat_dir_entry_read_callback+0x1aa>
                    break;
                long_name[i] = buffer[i];
    1088:	d8 01       	movw	r26, r16
    108a:	8d 93       	st	X+, r24
    108c:	8d 01       	movw	r16, r26
                /* Windows NT and later versions do not store lfn entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
    108e:	d6 01       	movw	r26, r12
    1090:	1c 96       	adiw	r26, 0x0c	; 12
    1092:	9c 91       	ld	r25, X
    1094:	93 ff       	sbrs	r25, 3
    1096:	0a c0       	rjmp	.+20     	; 0x10ac <fat_dir_entry_read_callback+0x19c>
    1098:	90 81       	ld	r25, Z
    109a:	91 54       	subi	r25, 0x41	; 65
    109c:	9a 31       	cpi	r25, 0x1A	; 26
    109e:	30 f4       	brcc	.+12     	; 0x10ac <fat_dir_entry_read_callback+0x19c>
    10a0:	a8 01       	movw	r20, r16
    10a2:	41 50       	subi	r20, 0x01	; 1
    10a4:	51 09       	sbc	r21, r1
                    long_name[i] += 'a' - 'A';
    10a6:	80 5e       	subi	r24, 0xE0	; 224
    10a8:	da 01       	movw	r26, r20
    10aa:	8c 93       	st	X, r24
    10ac:	90 2f       	mov	r25, r16
    10ae:	96 1b       	sub	r25, r22
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
            dir_entry->entry_offset = offset;

            uint8_t i;
            for(i = 0; i < 8; ++i)
    10b0:	e2 17       	cp	r30, r18
    10b2:	f3 07       	cpc	r31, r19
    10b4:	29 f7       	brne	.-54     	; 0x1080 <fat_dir_entry_read_callback+0x170>
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <fat_dir_entry_read_callback+0x1aa>
    10b8:	90 e0       	ldi	r25, 0x00	; 0
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
    10ba:	f5 01       	movw	r30, r10
    10bc:	80 81       	ld	r24, Z
    10be:	85 30       	cpi	r24, 0x05	; 5
    10c0:	11 f4       	brne	.+4      	; 0x10c6 <fat_dir_entry_read_callback+0x1b6>
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
    10c2:	85 ee       	ldi	r24, 0xE5	; 229
    10c4:	80 83       	st	Z, r24

            if(buffer[8] != ' ')
    10c6:	d6 01       	movw	r26, r12
    10c8:	18 96       	adiw	r26, 0x08	; 8
    10ca:	8c 91       	ld	r24, X
    10cc:	18 97       	sbiw	r26, 0x08	; 8
    10ce:	80 32       	cpi	r24, 0x20	; 32
    10d0:	59 f1       	breq	.+86     	; 0x1128 <fat_dir_entry_read_callback+0x218>
            {
                long_name[i++] = '.';
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	89 0f       	add	r24, r25
    10d6:	2e e2       	ldi	r18, 0x2E	; 46
    10d8:	f5 01       	movw	r30, r10
    10da:	e9 0f       	add	r30, r25
    10dc:	f1 1d       	adc	r31, r1
    10de:	20 83       	st	Z, r18

                uint8_t j = 8;
                for(; j < 11; ++j)
                {
                    if(buffer[j] == ' ')
    10e0:	f6 01       	movw	r30, r12
    10e2:	38 96       	adiw	r30, 0x08	; 8
    10e4:	18 96       	adiw	r26, 0x08	; 8
    10e6:	2c 91       	ld	r18, X
    10e8:	20 32       	cpi	r18, 0x20	; 32
    10ea:	d9 f0       	breq	.+54     	; 0x1122 <fat_dir_entry_read_callback+0x212>
    10ec:	9c 5f       	subi	r25, 0xFC	; 252
    10ee:	04 c0       	rjmp	.+8      	; 0x10f8 <fat_dir_entry_read_callback+0x1e8>
    10f0:	31 96       	adiw	r30, 0x01	; 1
    10f2:	20 81       	ld	r18, Z
    10f4:	20 32       	cpi	r18, 0x20	; 32
    10f6:	b9 f0       	breq	.+46     	; 0x1126 <fat_dir_entry_read_callback+0x216>
                        break;
                    long_name[i] = buffer[j];
    10f8:	a4 01       	movw	r20, r8
    10fa:	48 0f       	add	r20, r24
    10fc:	51 1d       	adc	r21, r1
    10fe:	da 01       	movw	r26, r20
    1100:	2c 93       	st	X, r18

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((buffer[12] & 0x10) && buffer[j] >= 'A' && buffer[j] <= 'Z')
    1102:	d6 01       	movw	r26, r12
    1104:	1c 96       	adiw	r26, 0x0c	; 12
    1106:	3c 91       	ld	r19, X
    1108:	34 ff       	sbrs	r19, 4
    110a:	07 c0       	rjmp	.+14     	; 0x111a <fat_dir_entry_read_callback+0x20a>
    110c:	30 81       	ld	r19, Z
    110e:	31 54       	subi	r19, 0x41	; 65
    1110:	3a 31       	cpi	r19, 0x1A	; 26
    1112:	18 f4       	brcc	.+6      	; 0x111a <fat_dir_entry_read_callback+0x20a>
                        long_name[i] += 'a' - 'A';
    1114:	20 5e       	subi	r18, 0xE0	; 224
    1116:	da 01       	movw	r26, r20
    1118:	2c 93       	st	X, r18

                    ++i;
    111a:	8f 5f       	subi	r24, 0xFF	; 255
            if(buffer[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
    111c:	89 13       	cpse	r24, r25
    111e:	e8 cf       	rjmp	.-48     	; 0x10f0 <fat_dir_entry_read_callback+0x1e0>
    1120:	03 c0       	rjmp	.+6      	; 0x1128 <fat_dir_entry_read_callback+0x218>
            if(long_name[0] == 0x05)
                long_name[0] = (char) FAT_DIRENTRY_DELETED;

            if(buffer[8] != ' ')
            {
                long_name[i++] = '.';
    1122:	98 2f       	mov	r25, r24
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <fat_dir_entry_read_callback+0x218>
                     * Windows NT and later.
                     */
                    if((buffer[12] & 0x10) && buffer[j] >= 'A' && buffer[j] <= 'Z')
                        long_name[i] += 'a' - 'A';

                    ++i;
    1126:	98 2f       	mov	r25, r24
                }
            } 

            long_name[i] = '\0';
    1128:	f5 01       	movw	r30, r10
    112a:	e9 0f       	add	r30, r25
    112c:	f1 1d       	adc	r31, r1
    112e:	10 82       	st	Z, r1
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = buffer[11];
    1130:	f6 01       	movw	r30, r12
    1132:	83 85       	ldd	r24, Z+11	; 0x0b
    1134:	d5 01       	movw	r26, r10
    1136:	90 96       	adiw	r26, 0x20	; 32
    1138:	8c 93       	st	X, r24
        dir_entry->cluster = read16(&buffer[26]);
    113a:	c6 01       	movw	r24, r12
    113c:	4a 96       	adiw	r24, 0x1a	; 26
    113e:	0e 94 76 01 	call	0x2ec	; 0x2ec <read16>
    1142:	a0 e0       	ldi	r26, 0x00	; 0
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	f5 01       	movw	r30, r10
    1148:	81 a3       	std	Z+33, r24	; 0x21
    114a:	92 a3       	std	Z+34, r25	; 0x22
    114c:	a3 a3       	std	Z+35, r26	; 0x23
    114e:	b4 a3       	std	Z+36, r27	; 0x24
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) read16(&buffer[20])) << 16;
    1150:	c6 01       	movw	r24, r12
    1152:	44 96       	adiw	r24, 0x14	; 20
    1154:	0e 94 76 01 	call	0x2ec	; 0x2ec <read16>
    1158:	a0 e0       	ldi	r26, 0x00	; 0
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	dc 01       	movw	r26, r24
    115e:	99 27       	eor	r25, r25
    1160:	88 27       	eor	r24, r24
    1162:	f5 01       	movw	r30, r10
    1164:	41 a1       	ldd	r20, Z+33	; 0x21
    1166:	52 a1       	ldd	r21, Z+34	; 0x22
    1168:	63 a1       	ldd	r22, Z+35	; 0x23
    116a:	74 a1       	ldd	r23, Z+36	; 0x24
    116c:	84 2b       	or	r24, r20
    116e:	95 2b       	or	r25, r21
    1170:	a6 2b       	or	r26, r22
    1172:	b7 2b       	or	r27, r23
    1174:	81 a3       	std	Z+33, r24	; 0x21
    1176:	92 a3       	std	Z+34, r25	; 0x22
    1178:	a3 a3       	std	Z+35, r26	; 0x23
    117a:	b4 a3       	std	Z+36, r27	; 0x24
#endif
        dir_entry->file_size = read32(&buffer[28]);
    117c:	c6 01       	movw	r24, r12
    117e:	4c 96       	adiw	r24, 0x1c	; 28
    1180:	0e 94 80 01 	call	0x300	; 0x300 <read32>
    1184:	d5 01       	movw	r26, r10
    1186:	95 96       	adiw	r26, 0x25	; 37
    1188:	6d 93       	st	X+, r22
    118a:	7d 93       	st	X+, r23
    118c:	8d 93       	st	X+, r24
    118e:	9c 93       	st	X, r25
    1190:	98 97       	sbiw	r26, 0x28	; 40
#if FAT_DATETIME_SUPPORT
        dir_entry->modification_time = read16(&buffer[22]);
        dir_entry->modification_date = read16(&buffer[24]);
#endif

        arg->finished = 1;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	f7 01       	movw	r30, r14
    1196:	85 83       	std	Z+5, r24	; 0x05
        return 0;
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	1d c0       	rjmp	.+58     	; 0x11d6 <fat_dir_entry_read_callback+0x2c6>
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = buffer[char_mapping[i]];
    119c:	29 81       	ldd	r18, Y+1	; 0x01
    119e:	fc 01       	movw	r30, r24
    11a0:	e2 0f       	add	r30, r18
    11a2:	f1 1d       	adc	r31, r1
    11a4:	20 81       	ld	r18, Z
    11a6:	f5 01       	movw	r30, r10
    11a8:	e6 0f       	add	r30, r22
    11aa:	f7 1f       	adc	r31, r23
    11ac:	20 83       	st	Z, r18
    11ae:	fe 01       	movw	r30, r28
    11b0:	32 96       	adiw	r30, 0x02	; 2
    11b2:	db 01       	movw	r26, r22
    11b4:	11 96       	adiw	r26, 0x01	; 1
    11b6:	aa 0e       	add	r10, r26
    11b8:	bb 1e       	adc	r11, r27
    11ba:	4f e1       	ldi	r20, 0x1F	; 31
    11bc:	50 e0       	ldi	r21, 0x00	; 0
    11be:	46 1b       	sub	r20, r22
    11c0:	57 0b       	sbc	r21, r23
    11c2:	01 e0       	ldi	r16, 0x01	; 1
    11c4:	10 e0       	ldi	r17, 0x00	; 0
    11c6:	0c 0f       	add	r16, r28
    11c8:	1d 1f       	adc	r17, r29
    11ca:	40 0f       	add	r20, r16
    11cc:	51 1f       	adc	r21, r17
    11ce:	be 01       	movw	r22, r28
    11d0:	62 5f       	subi	r22, 0xF2	; 242
    11d2:	7f 4f       	sbci	r23, 0xFF	; 255
    11d4:	13 cf       	rjmp	.-474    	; 0xffc <fat_dir_entry_read_callback+0xec>
#endif

        arg->finished = 1;
        return 0;
    }
}
    11d6:	2d 96       	adiw	r28, 0x0d	; 13
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	ff 90       	pop	r15
    11ec:	ef 90       	pop	r14
    11ee:	df 90       	pop	r13
    11f0:	cf 90       	pop	r12
    11f2:	bf 90       	pop	r11
    11f4:	af 90       	pop	r10
    11f6:	9f 90       	pop	r9
    11f8:	8f 90       	pop	r8
    11fa:	7f 90       	pop	r7
    11fc:	6f 90       	pop	r6
    11fe:	5f 90       	pop	r5
    1200:	4f 90       	pop	r4
    1202:	3f 90       	pop	r3
    1204:	2f 90       	pop	r2
    1206:	08 95       	ret

00001208 <fat_get_fs_free_32_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT32.
 */
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
    1208:	cf 92       	push	r12
    120a:	df 92       	push	r13
    120c:	ef 92       	push	r14
    120e:	ff 92       	push	r15
    1210:	0f 93       	push	r16
    1212:	1f 93       	push	r17
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;
    1218:	f7 01       	movw	r30, r14
    121a:	c4 80       	ldd	r12, Z+4	; 0x04
    121c:	d5 80       	ldd	r13, Z+5	; 0x05

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
    121e:	c1 14       	cp	r12, r1
    1220:	d1 04       	cpc	r13, r1
    1222:	e1 f0       	breq	.+56     	; 0x125c <fat_get_fs_free_32_callback+0x54>
    1224:	8c 01       	movw	r16, r24
    1226:	c0 e0       	ldi	r28, 0x00	; 0
    1228:	d0 e0       	ldi	r29, 0x00	; 0
    {
        uint32_t cluster = read32(buffer);
    122a:	c8 01       	movw	r24, r16
    122c:	8c 0f       	add	r24, r28
    122e:	9d 1f       	adc	r25, r29
    1230:	0e 94 80 01 	call	0x300	; 0x300 <read32>
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
    1234:	67 2b       	or	r22, r23
    1236:	68 2b       	or	r22, r24
    1238:	69 2b       	or	r22, r25
    123a:	61 f4       	brne	.+24     	; 0x1254 <fat_get_fs_free_32_callback+0x4c>
            ++(count_arg->cluster_count);
    123c:	f7 01       	movw	r30, r14
    123e:	80 81       	ld	r24, Z
    1240:	91 81       	ldd	r25, Z+1	; 0x01
    1242:	a2 81       	ldd	r26, Z+2	; 0x02
    1244:	b3 81       	ldd	r27, Z+3	; 0x03
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	a1 1d       	adc	r26, r1
    124a:	b1 1d       	adc	r27, r1
    124c:	80 83       	st	Z, r24
    124e:	91 83       	std	Z+1, r25	; 0x01
    1250:	a2 83       	std	Z+2, r26	; 0x02
    1252:	b3 83       	std	Z+3, r27	; 0x03
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
    1254:	24 96       	adiw	r28, 0x04	; 4
    1256:	cc 15       	cp	r28, r12
    1258:	dd 05       	cpc	r29, r13
    125a:	38 f3       	brcs	.-50     	; 0x122a <fat_get_fs_free_32_callback+0x22>
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	df 90       	pop	r13
    126c:	cf 90       	pop	r12
    126e:	08 95       	ret

00001270 <fat_find_offset_for_dir_entry>:
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    1270:	2f 92       	push	r2
    1272:	3f 92       	push	r3
    1274:	4f 92       	push	r4
    1276:	5f 92       	push	r5
    1278:	6f 92       	push	r6
    127a:	7f 92       	push	r7
    127c:	8f 92       	push	r8
    127e:	9f 92       	push	r9
    1280:	af 92       	push	r10
    1282:	bf 92       	push	r11
    1284:	cf 92       	push	r12
    1286:	df 92       	push	r13
    1288:	ef 92       	push	r14
    128a:	ff 92       	push	r15
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	a0 97       	sbiw	r28, 0x20	; 32
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	fc 01       	movw	r30, r24
    12a6:	4b 01       	movw	r8, r22
    if(!fs || !dir_entry)
    12a8:	89 2b       	or	r24, r25
    12aa:	09 f4       	brne	.+2      	; 0x12ae <fat_find_offset_for_dir_entry+0x3e>
    12ac:	aa c1       	rjmp	.+852    	; 0x1602 <fat_find_offset_for_dir_entry+0x392>
    12ae:	41 15       	cp	r20, r1
    12b0:	51 05       	cpc	r21, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <fat_find_offset_for_dir_entry+0x46>
    12b4:	af c1       	rjmp	.+862    	; 0x1614 <fat_find_offset_for_dir_entry+0x3a4>
        return 0;

    /* search for a place where to write the directory entry to disk */
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    12b6:	da 01       	movw	r26, r20
    12b8:	0d 90       	ld	r0, X+
    12ba:	00 20       	and	r0, r0
    12bc:	e9 f7       	brne	.-6      	; 0x12b8 <fat_find_offset_for_dir_entry+0x48>
    12be:	9d 01       	movw	r18, r26
    12c0:	24 1b       	sub	r18, r20
    12c2:	35 0b       	sbc	r19, r21
    12c4:	25 5f       	subi	r18, 0xF5	; 245
    12c6:	3f 4f       	sbci	r19, 0xFF	; 255
    12c8:	a5 ec       	ldi	r26, 0xC5	; 197
    12ca:	be e4       	ldi	r27, 0x4E	; 78
    12cc:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <__umulhisi3>
    12d0:	96 95       	lsr	r25
    12d2:	87 95       	ror	r24
    12d4:	96 95       	lsr	r25
    12d6:	87 95       	ror	r24
    12d8:	01 e0       	ldi	r16, 0x01	; 1
    12da:	08 0f       	add	r16, r24
    12dc:	08 a3       	std	Y+32, r16	; 0x20
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    12de:	d4 01       	movw	r26, r8
    12e0:	93 96       	adiw	r26, 0x23	; 35
    12e2:	2d 91       	ld	r18, X+
    12e4:	3d 91       	ld	r19, X+
    12e6:	4d 91       	ld	r20, X+
    12e8:	5c 91       	ld	r21, X
    12ea:	96 97       	sbiw	r26, 0x26	; 38
    12ec:	2c 8f       	std	Y+28, r18	; 0x1c
    12ee:	3d 8f       	std	Y+29, r19	; 0x1d
    12f0:	4e 8f       	std	Y+30, r20	; 0x1e
    12f2:	5f 8f       	std	Y+31, r21	; 0x1f
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
    12f4:	a0 81       	ld	r26, Z
    12f6:	b1 81       	ldd	r27, Z+1	; 0x01
    12f8:	18 96       	adiw	r26, 0x08	; 8
    12fa:	8c 91       	ld	r24, X
#endif

    if(cluster_num == 0)
    12fc:	23 2b       	or	r18, r19
    12fe:	24 2b       	or	r18, r20
    1300:	25 2b       	or	r18, r21
    1302:	e1 f5       	brne	.+120    	; 0x137c <fat_find_offset_for_dir_entry+0x10c>
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
    1304:	8b 30       	cpi	r24, 0x0B	; 11
    1306:	c9 f4       	brne	.+50     	; 0x133a <fat_find_offset_for_dir_entry+0xca>
        {
            cluster_num = fs->header.root_dir_cluster;
    1308:	02 a5       	ldd	r16, Z+42	; 0x2a
    130a:	13 a5       	ldd	r17, Z+43	; 0x2b
    130c:	24 a5       	ldd	r18, Z+44	; 0x2c
    130e:	35 a5       	ldd	r19, Z+45	; 0x2d
    1310:	0c 8f       	std	Y+28, r16	; 0x1c
    1312:	1d 8f       	std	Y+29, r17	; 0x1d
    1314:	2e 8f       	std	Y+30, r18	; 0x1e
    1316:	3f 8f       	std	Y+31, r19	; 0x1f
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
    1318:	1c 8a       	std	Y+20, r1	; 0x14
    131a:	1d 8a       	std	Y+21, r1	; 0x15
    131c:	1e 8a       	std	Y+22, r1	; 0x16
    131e:	1f 8a       	std	Y+23, r1	; 0x17
    1320:	18 8e       	std	Y+24, r1	; 0x18
    1322:	19 8e       	std	Y+25, r1	; 0x19
    1324:	1a 8e       	std	Y+26, r1	; 0x1a
    1326:	1b 8e       	std	Y+27, r1	; 0x1b
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
    1328:	1a 86       	std	Y+10, r1	; 0x0a
    132a:	1b 86       	std	Y+11, r1	; 0x0b
    132c:	1c 86       	std	Y+12, r1	; 0x0c
    132e:	1d 86       	std	Y+13, r1	; 0x0d
    1330:	1e 86       	std	Y+14, r1	; 0x0e
    1332:	1f 86       	std	Y+15, r1	; 0x0f
    1334:	18 8a       	std	Y+16, r1	; 0x10
    1336:	19 8a       	std	Y+17, r1	; 0x11
    1338:	31 c0       	rjmp	.+98     	; 0x139c <fat_find_offset_for_dir_entry+0x12c>
        }
        else
#endif
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
    133a:	12 a1       	ldd	r17, Z+34	; 0x22
    133c:	1a 87       	std	Y+10, r17	; 0x0a
    133e:	23 a1       	ldd	r18, Z+35	; 0x23
    1340:	2b 87       	std	Y+11, r18	; 0x0b
    1342:	34 a1       	ldd	r19, Z+36	; 0x24
    1344:	3c 87       	std	Y+12, r19	; 0x0c
    1346:	45 a1       	ldd	r20, Z+37	; 0x25
    1348:	4d 87       	std	Y+13, r20	; 0x0d
    134a:	56 a1       	ldd	r21, Z+38	; 0x26
    134c:	5e 87       	std	Y+14, r21	; 0x0e
    134e:	67 a1       	ldd	r22, Z+39	; 0x27
    1350:	6f 87       	std	Y+15, r22	; 0x0f
    1352:	70 a5       	ldd	r23, Z+40	; 0x28
    1354:	78 8b       	std	Y+16, r23	; 0x10
    1356:	81 a5       	ldd	r24, Z+41	; 0x29
    1358:	89 8b       	std	Y+17, r24	; 0x11
            offset_to = fs->header.cluster_zero_offset;
    135a:	92 8d       	ldd	r25, Z+26	; 0x1a
    135c:	9c 8b       	std	Y+20, r25	; 0x14
    135e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1360:	ad 8b       	std	Y+21, r26	; 0x15
    1362:	b4 8d       	ldd	r27, Z+28	; 0x1c
    1364:	be 8b       	std	Y+22, r27	; 0x16
    1366:	05 8d       	ldd	r16, Z+29	; 0x1d
    1368:	0f 8b       	std	Y+23, r16	; 0x17
    136a:	16 8d       	ldd	r17, Z+30	; 0x1e
    136c:	18 8f       	std	Y+24, r17	; 0x18
    136e:	27 8d       	ldd	r18, Z+31	; 0x1f
    1370:	29 8f       	std	Y+25, r18	; 0x19
    1372:	30 a1       	ldd	r19, Z+32	; 0x20
    1374:	3a 8f       	std	Y+26, r19	; 0x1a
    1376:	41 a1       	ldd	r20, Z+33	; 0x21
    1378:	4b 8f       	std	Y+27, r20	; 0x1b
    137a:	10 c0       	rjmp	.+32     	; 0x139c <fat_find_offset_for_dir_entry+0x12c>
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
    137c:	1c 8a       	std	Y+20, r1	; 0x14
    137e:	1d 8a       	std	Y+21, r1	; 0x15
    1380:	1e 8a       	std	Y+22, r1	; 0x16
    1382:	1f 8a       	std	Y+23, r1	; 0x17
    1384:	18 8e       	std	Y+24, r1	; 0x18
    1386:	19 8e       	std	Y+25, r1	; 0x19
    1388:	1a 8e       	std	Y+26, r1	; 0x1a
    138a:	1b 8e       	std	Y+27, r1	; 0x1b
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
    138c:	1a 86       	std	Y+10, r1	; 0x0a
    138e:	1b 86       	std	Y+11, r1	; 0x0b
    1390:	1c 86       	std	Y+12, r1	; 0x0c
    1392:	1d 86       	std	Y+13, r1	; 0x0d
    1394:	1e 86       	std	Y+14, r1	; 0x0e
    1396:	1f 86       	std	Y+15, r1	; 0x0f
    1398:	18 8a       	std	Y+16, r1	; 0x10
    139a:	19 8a       	std	Y+17, r1	; 0x11
    139c:	fb 8b       	std	Y+19, r31	; 0x13
    139e:	ea 8b       	std	Y+18, r30	; 0x12
    13a0:	4a 84       	ldd	r4, Y+10	; 0x0a
    13a2:	5b 84       	ldd	r5, Y+11	; 0x0b
    13a4:	6c 84       	ldd	r6, Y+12	; 0x0c
    13a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    13a8:	8e 84       	ldd	r8, Y+14	; 0x0e
    13aa:	9f 84       	ldd	r9, Y+15	; 0x0f
    13ac:	28 88       	ldd	r2, Y+16	; 0x10
    13ae:	39 88       	ldd	r3, Y+17	; 0x11
    13b0:	1a 82       	std	Y+2, r1	; 0x02
        }
    }
    
    while(1)
    {
        if(offset == offset_to)
    13b2:	24 2d       	mov	r18, r4
    13b4:	35 2d       	mov	r19, r5
    13b6:	46 2d       	mov	r20, r6
    13b8:	57 2d       	mov	r21, r7
    13ba:	68 2d       	mov	r22, r8
    13bc:	79 2d       	mov	r23, r9
    13be:	82 2d       	mov	r24, r2
    13c0:	93 2d       	mov	r25, r3
    13c2:	ac 88       	ldd	r10, Y+20	; 0x14
    13c4:	bd 88       	ldd	r11, Y+21	; 0x15
    13c6:	ce 88       	ldd	r12, Y+22	; 0x16
    13c8:	df 88       	ldd	r13, Y+23	; 0x17
    13ca:	e8 8c       	ldd	r14, Y+24	; 0x18
    13cc:	f9 8c       	ldd	r15, Y+25	; 0x19
    13ce:	0a 8d       	ldd	r16, Y+26	; 0x1a
    13d0:	1b 8d       	ldd	r17, Y+27	; 0x1b
    13d2:	0e 94 a0 2c 	call	0x5940	; 0x5940 <__cmpdi2>
    13d6:	09 f0       	breq	.+2      	; 0x13da <fat_find_offset_for_dir_entry+0x16a>
    13d8:	ae c0       	rjmp	.+348    	; 0x1536 <fat_find_offset_for_dir_entry+0x2c6>
        {
            if(cluster_num == 0)
    13da:	6c 8d       	ldd	r22, Y+28	; 0x1c
    13dc:	7d 8d       	ldd	r23, Y+29	; 0x1d
    13de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13e2:	67 2b       	or	r22, r23
    13e4:	68 2b       	or	r22, r24
    13e6:	69 2b       	or	r22, r25
    13e8:	09 f4       	brne	.+2      	; 0x13ec <fat_find_offset_for_dir_entry+0x17c>
    13ea:	f9 c0       	rjmp	.+498    	; 0x15de <fat_find_offset_for_dir_entry+0x36e>
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;

            if(offset)
    13ec:	68 2d       	mov	r22, r8
    13ee:	79 2d       	mov	r23, r9
    13f0:	82 2d       	mov	r24, r2
    13f2:	93 2d       	mov	r25, r3
    13f4:	a0 e0       	ldi	r26, 0x00	; 0
    13f6:	0e 94 a9 2c 	call	0x5952	; 0x5952 <__cmpdi2_s8>
    13fa:	09 f4       	brne	.+2      	; 0x13fe <fat_find_offset_for_dir_entry+0x18e>
    13fc:	6b c0       	rjmp	.+214    	; 0x14d4 <fat_find_offset_for_dir_entry+0x264>
            {
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
    13fe:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1400:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1402:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1404:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1406:	8a 89       	ldd	r24, Y+18	; 0x12
    1408:	9b 89       	ldd	r25, Y+19	; 0x13
    140a:	0e 94 9c 01 	call	0x338	; 0x338 <fat_get_next_cluster>
                if(!cluster_next)
    140e:	61 15       	cp	r22, r1
    1410:	71 05       	cpc	r23, r1
    1412:	81 05       	cpc	r24, r1
    1414:	91 05       	cpc	r25, r1
    1416:	09 f0       	breq	.+2      	; 0x141a <fat_find_offset_for_dir_entry+0x1aa>
    1418:	59 c0       	rjmp	.+178    	; 0x14cc <fat_find_offset_for_dir_entry+0x25c>
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
    141a:	01 e0       	ldi	r16, 0x01	; 1
    141c:	10 e0       	ldi	r17, 0x00	; 0
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1424:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1426:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1428:	7f 8d       	ldd	r23, Y+31	; 0x1f
    142a:	8a 89       	ldd	r24, Y+18	; 0x12
    142c:	9b 89       	ldd	r25, Y+19	; 0x13
    142e:	0e 94 19 04 	call	0x832	; 0x832 <fat_append_clusters>
    1432:	2b 01       	movw	r4, r22
    1434:	3c 01       	movw	r6, r24
                    if(!cluster_next)
    1436:	61 15       	cp	r22, r1
    1438:	71 05       	cpc	r23, r1
    143a:	81 05       	cpc	r24, r1
    143c:	91 05       	cpc	r25, r1
    143e:	09 f4       	brne	.+2      	; 0x1442 <fat_find_offset_for_dir_entry+0x1d2>
    1440:	ce c0       	rjmp	.+412    	; 0x15de <fat_find_offset_for_dir_entry+0x36e>
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	02 97       	sbiw	r24, 0x02	; 2
    1448:	a1 09       	sbc	r26, r1
    144a:	b1 09       	sbc	r27, r1
    144c:	8c 01       	movw	r16, r24
    144e:	9d 01       	movw	r18, r26
    1450:	40 e0       	ldi	r20, 0x00	; 0
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	ba 01       	movw	r22, r20
    1456:	8a 83       	std	Y+2, r24	; 0x02
    1458:	1b 83       	std	Y+3, r17	; 0x03
    145a:	2c 83       	std	Y+4, r18	; 0x04
    145c:	3d 83       	std	Y+5, r19	; 0x05
    145e:	4e 83       	std	Y+6, r20	; 0x06
    1460:	5f 83       	std	Y+7, r21	; 0x07
    1462:	68 87       	std	Y+8, r22	; 0x08
    1464:	79 87       	std	Y+9, r23	; 0x09
    1466:	aa 89       	ldd	r26, Y+18	; 0x12
    1468:	bb 89       	ldd	r27, Y+19	; 0x13
    146a:	58 96       	adiw	r26, 0x18	; 24
    146c:	2d 91       	ld	r18, X+
    146e:	3c 91       	ld	r19, X
    1470:	59 97       	sbiw	r26, 0x19	; 25
    1472:	89 01       	movw	r16, r18
    1474:	a0 2e       	mov	r10, r16
    1476:	b1 2e       	mov	r11, r17
    1478:	c1 2c       	mov	r12, r1
    147a:	d1 2c       	mov	r13, r1
    147c:	e1 2c       	mov	r14, r1
    147e:	f1 2c       	mov	r15, r1
    1480:	00 e0       	ldi	r16, 0x00	; 0
    1482:	10 e0       	ldi	r17, 0x00	; 0
    1484:	2a 81       	ldd	r18, Y+2	; 0x02
    1486:	3b 81       	ldd	r19, Y+3	; 0x03
    1488:	4c 81       	ldd	r20, Y+4	; 0x04
    148a:	5d 81       	ldd	r21, Y+5	; 0x05
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__muldi3>
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
                    if(!cluster_next)
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
    1498:	ea 89       	ldd	r30, Y+18	; 0x12
    149a:	fb 89       	ldd	r31, Y+19	; 0x13
    149c:	a2 8c       	ldd	r10, Z+26	; 0x1a
    149e:	b3 8c       	ldd	r11, Z+27	; 0x1b
    14a0:	c4 8c       	ldd	r12, Z+28	; 0x1c
    14a2:	d5 8c       	ldd	r13, Z+29	; 0x1d
    14a4:	e6 8c       	ldd	r14, Z+30	; 0x1e
    14a6:	f7 8c       	ldd	r15, Z+31	; 0x1f
    14a8:	00 a1       	ldd	r16, Z+32	; 0x20
    14aa:	11 a1       	ldd	r17, Z+33	; 0x21
    14ac:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
    14b0:	2a 87       	std	Y+10, r18	; 0x0a
    14b2:	3b 87       	std	Y+11, r19	; 0x0b
    14b4:	4c 87       	std	Y+12, r20	; 0x0c
    14b6:	5d 87       	std	Y+13, r21	; 0x0d
    14b8:	6e 87       	std	Y+14, r22	; 0x0e
    14ba:	7f 87       	std	Y+15, r23	; 0x0f
    14bc:	88 8b       	std	Y+16, r24	; 0x10
    14be:	99 8b       	std	Y+17, r25	; 0x11
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;

                    /* clear cluster to avoid garbage directory entries */
                    fat_clear_cluster(fs, cluster_next);
    14c0:	b3 01       	movw	r22, r6
    14c2:	a2 01       	movw	r20, r4
    14c4:	cf 01       	movw	r24, r30
    14c6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <fat_clear_cluster>

                    break;
    14ca:	92 c0       	rjmp	.+292    	; 0x15f0 <fat_find_offset_for_dir_entry+0x380>
                }
                cluster_num = cluster_next;
    14cc:	6c 8f       	std	Y+28, r22	; 0x1c
    14ce:	7d 8f       	std	Y+29, r23	; 0x1d
    14d0:	8e 8f       	std	Y+30, r24	; 0x1e
    14d2:	9f 8f       	std	Y+31, r25	; 0x1f
            }

            offset = fat_cluster_offset(fs, cluster_num);
    14d4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    14d6:	5d 8d       	ldd	r21, Y+29	; 0x1d
    14d8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    14da:	7f 8d       	ldd	r23, Y+31	; 0x1f
    14dc:	8a 89       	ldd	r24, Y+18	; 0x12
    14de:	9b 89       	ldd	r25, Y+19	; 0x13
    14e0:	0e 94 97 06 	call	0xd2e	; 0xd2e <fat_cluster_offset>
    14e4:	2a 87       	std	Y+10, r18	; 0x0a
    14e6:	3b 87       	std	Y+11, r19	; 0x0b
    14e8:	4c 87       	std	Y+12, r20	; 0x0c
    14ea:	5d 87       	std	Y+13, r21	; 0x0d
    14ec:	6e 87       	std	Y+14, r22	; 0x0e
    14ee:	7f 87       	std	Y+15, r23	; 0x0f
    14f0:	88 8b       	std	Y+16, r24	; 0x10
    14f2:	99 8b       	std	Y+17, r25	; 0x11
            offset_to = offset + fs->header.cluster_size;
    14f4:	aa 89       	ldd	r26, Y+18	; 0x12
    14f6:	bb 89       	ldd	r27, Y+19	; 0x13
    14f8:	58 96       	adiw	r26, 0x18	; 24
    14fa:	2d 90       	ld	r2, X+
    14fc:	3c 90       	ld	r3, X
    14fe:	59 97       	sbiw	r26, 0x19	; 25
    1500:	a2 2c       	mov	r10, r2
    1502:	b3 2c       	mov	r11, r3
    1504:	c1 2c       	mov	r12, r1
    1506:	d1 2c       	mov	r13, r1
    1508:	e1 2c       	mov	r14, r1
    150a:	f1 2c       	mov	r15, r1
    150c:	00 e0       	ldi	r16, 0x00	; 0
    150e:	10 e0       	ldi	r17, 0x00	; 0
    1510:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
    1514:	2c 8b       	std	Y+20, r18	; 0x14
    1516:	3d 8b       	std	Y+21, r19	; 0x15
    1518:	4e 8b       	std	Y+22, r20	; 0x16
    151a:	5f 8b       	std	Y+23, r21	; 0x17
    151c:	68 8f       	std	Y+24, r22	; 0x18
    151e:	79 8f       	std	Y+25, r23	; 0x19
    1520:	8a 8f       	std	Y+26, r24	; 0x1a
    1522:	9b 8f       	std	Y+27, r25	; 0x1b
                    break;
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
    1524:	4a 84       	ldd	r4, Y+10	; 0x0a
    1526:	5b 84       	ldd	r5, Y+11	; 0x0b
    1528:	6c 84       	ldd	r6, Y+12	; 0x0c
    152a:	7d 84       	ldd	r7, Y+13	; 0x0d
    152c:	8e 84       	ldd	r8, Y+14	; 0x0e
    152e:	9f 84       	ldd	r9, Y+15	; 0x0f
    1530:	28 88       	ldd	r2, Y+16	; 0x10
    1532:	39 88       	ldd	r3, Y+17	; 0x11
            offset_to = offset + fs->header.cluster_size;
            dir_entry_offset = offset;
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
    1534:	1a 82       	std	Y+2, r1	; 0x02
#endif
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
    1536:	aa 89       	ldd	r26, Y+18	; 0x12
    1538:	bb 89       	ldd	r27, Y+19	; 0x13
    153a:	ed 91       	ld	r30, X+
    153c:	fc 91       	ld	r31, X
    153e:	01 90       	ld	r0, Z+
    1540:	f0 81       	ld	r31, Z
    1542:	e0 2d       	mov	r30, r0
    1544:	ee 24       	eor	r14, r14
    1546:	e3 94       	inc	r14
    1548:	f1 2c       	mov	r15, r1
    154a:	8e 01       	movw	r16, r28
    154c:	0f 5f       	subi	r16, 0xFF	; 255
    154e:	1f 4f       	sbci	r17, 0xFF	; 255
    1550:	24 2d       	mov	r18, r4
    1552:	35 2d       	mov	r19, r5
    1554:	46 2d       	mov	r20, r6
    1556:	57 2d       	mov	r21, r7
    1558:	68 2d       	mov	r22, r8
    155a:	79 2d       	mov	r23, r9
    155c:	82 2d       	mov	r24, r2
    155e:	93 2d       	mov	r25, r3
    1560:	09 95       	icall
    1562:	88 23       	and	r24, r24
    1564:	e1 f1       	breq	.+120    	; 0x15de <fat_find_offset_for_dir_entry+0x36e>
            return 0;

        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	85 3e       	cpi	r24, 0xE5	; 229
    156a:	11 f0       	breq	.+4      	; 0x1570 <fat_find_offset_for_dir_entry+0x300>
    156c:	81 11       	cpse	r24, r1
    156e:	1a c0       	rjmp	.+52     	; 0x15a4 <fat_find_offset_for_dir_entry+0x334>
        {
            /* check if we have the needed number of available entries */
#if FAT_LFN_SUPPORT
            ++free_dir_entries_found;
    1570:	ba 81       	ldd	r27, Y+2	; 0x02
    1572:	bf 5f       	subi	r27, 0xFF	; 255
    1574:	ba 83       	std	Y+2, r27	; 0x02
            if(free_dir_entries_found >= free_dir_entries_needed)
    1576:	e8 a1       	ldd	r30, Y+32	; 0x20
    1578:	be 17       	cp	r27, r30
    157a:	d0 f5       	brcc	.+116    	; 0x15f0 <fat_find_offset_for_dir_entry+0x380>
#endif
                break;

            offset += 32;
    157c:	24 2d       	mov	r18, r4
    157e:	35 2d       	mov	r19, r5
    1580:	46 2d       	mov	r20, r6
    1582:	57 2d       	mov	r21, r7
    1584:	68 2d       	mov	r22, r8
    1586:	79 2d       	mov	r23, r9
    1588:	82 2d       	mov	r24, r2
    158a:	93 2d       	mov	r25, r3
    158c:	a0 e2       	ldi	r26, 0x20	; 32
    158e:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__adddi3_s8>
    1592:	42 2e       	mov	r4, r18
    1594:	53 2e       	mov	r5, r19
    1596:	64 2e       	mov	r6, r20
    1598:	75 2e       	mov	r7, r21
    159a:	86 2e       	mov	r8, r22
    159c:	97 2e       	mov	r9, r23
    159e:	28 2e       	mov	r2, r24
    15a0:	39 2e       	mov	r3, r25
    15a2:	07 cf       	rjmp	.-498    	; 0x13b2 <fat_find_offset_for_dir_entry+0x142>
        }
        else
        {
            offset += 32;
    15a4:	24 2d       	mov	r18, r4
    15a6:	35 2d       	mov	r19, r5
    15a8:	46 2d       	mov	r20, r6
    15aa:	57 2d       	mov	r21, r7
    15ac:	68 2d       	mov	r22, r8
    15ae:	79 2d       	mov	r23, r9
    15b0:	82 2d       	mov	r24, r2
    15b2:	93 2d       	mov	r25, r3
    15b4:	a0 e2       	ldi	r26, 0x20	; 32
    15b6:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__adddi3_s8>
    15ba:	2a 87       	std	Y+10, r18	; 0x0a
    15bc:	3b 87       	std	Y+11, r19	; 0x0b
    15be:	4c 87       	std	Y+12, r20	; 0x0c
    15c0:	5d 87       	std	Y+13, r21	; 0x0d
    15c2:	6e 87       	std	Y+14, r22	; 0x0e
    15c4:	7f 87       	std	Y+15, r23	; 0x0f
    15c6:	88 8b       	std	Y+16, r24	; 0x10
    15c8:	99 8b       	std	Y+17, r25	; 0x11
    15ca:	42 2e       	mov	r4, r18
    15cc:	53 2e       	mov	r5, r19
    15ce:	64 2e       	mov	r6, r20
    15d0:	75 2e       	mov	r7, r21
    15d2:	86 2e       	mov	r8, r22
    15d4:	97 2e       	mov	r9, r23
    15d6:	28 2e       	mov	r2, r24
    15d8:	39 2e       	mov	r3, r25
            dir_entry_offset = offset;
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
    15da:	1a 82       	std	Y+2, r1	; 0x02
#endif
        }
    }
    15dc:	ea ce       	rjmp	.-556    	; 0x13b2 <fat_find_offset_for_dir_entry+0x142>
        {
            if(cluster_num == 0)
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e0       	ldi	r20, 0x00	; 0
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	60 e0       	ldi	r22, 0x00	; 0
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	1a c0       	rjmp	.+52     	; 0x1624 <fat_find_offset_for_dir_entry+0x3b4>
            free_dir_entries_found = 0;
#endif
        }
    }

    return dir_entry_offset;
    15f0:	2a 85       	ldd	r18, Y+10	; 0x0a
    15f2:	3b 85       	ldd	r19, Y+11	; 0x0b
    15f4:	4c 85       	ldd	r20, Y+12	; 0x0c
    15f6:	5d 85       	ldd	r21, Y+13	; 0x0d
    15f8:	6e 85       	ldd	r22, Y+14	; 0x0e
    15fa:	7f 85       	ldd	r23, Y+15	; 0x0f
    15fc:	88 89       	ldd	r24, Y+16	; 0x10
    15fe:	99 89       	ldd	r25, Y+17	; 0x11
    1600:	11 c0       	rjmp	.+34     	; 0x1624 <fat_find_offset_for_dir_entry+0x3b4>
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
        return 0;
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	08 c0       	rjmp	.+16     	; 0x1624 <fat_find_offset_for_dir_entry+0x3b4>
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	40 e0       	ldi	r20, 0x00	; 0
    161a:	50 e0       	ldi	r21, 0x00	; 0
    161c:	60 e0       	ldi	r22, 0x00	; 0
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
#endif
        }
    }

    return dir_entry_offset;
}
    1624:	a0 96       	adiw	r28, 0x20	; 32
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	ff 90       	pop	r15
    163a:	ef 90       	pop	r14
    163c:	df 90       	pop	r13
    163e:	cf 90       	pop	r12
    1640:	bf 90       	pop	r11
    1642:	af 90       	pop	r10
    1644:	9f 90       	pop	r9
    1646:	8f 90       	pop	r8
    1648:	7f 90       	pop	r7
    164a:	6f 90       	pop	r6
    164c:	5f 90       	pop	r5
    164e:	4f 90       	pop	r4
    1650:	3f 90       	pop	r3
    1652:	2f 90       	pop	r2
    1654:	08 95       	ret

00001656 <fat_write_dir_entry>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    1656:	2f 92       	push	r2
    1658:	3f 92       	push	r3
    165a:	4f 92       	push	r4
    165c:	5f 92       	push	r5
    165e:	6f 92       	push	r6
    1660:	7f 92       	push	r7
    1662:	8f 92       	push	r8
    1664:	9f 92       	push	r9
    1666:	af 92       	push	r10
    1668:	bf 92       	push	r11
    166a:	cf 92       	push	r12
    166c:	df 92       	push	r13
    166e:	ef 92       	push	r14
    1670:	ff 92       	push	r15
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	a6 97       	sbiw	r28, 0x26	; 38
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    if(!fs || !dir_entry)
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	09 f4       	brne	.+2      	; 0x1690 <fat_write_dir_entry+0x3a>
    168e:	6e c1       	rjmp	.+732    	; 0x196c <fat_write_dir_entry+0x316>
    1690:	61 15       	cp	r22, r1
    1692:	71 05       	cpc	r23, r1
    1694:	09 f4       	brne	.+2      	; 0x1698 <fat_write_dir_entry+0x42>
    1696:	6c c1       	rjmp	.+728    	; 0x1970 <fat_write_dir_entry+0x31a>
    1698:	6b 01       	movw	r12, r22
    169a:	fc 01       	movw	r30, r24
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
    169c:	01 90       	ld	r0, Z+
    169e:	f0 81       	ld	r31, Z
    16a0:	e0 2d       	mov	r30, r0
    16a2:	84 81       	ldd	r24, Z+4	; 0x04
    16a4:	95 81       	ldd	r25, Z+5	; 0x05
    16a6:	9b a3       	std	Y+35, r25	; 0x23
    16a8:	8a a3       	std	Y+34, r24	; 0x22
    offset_t offset = dir_entry->entry_offset;
    16aa:	db 01       	movw	r26, r22
    16ac:	99 96       	adiw	r26, 0x29	; 41
    16ae:	9c 90       	ld	r9, X
    16b0:	99 97       	sbiw	r26, 0x29	; 41
    16b2:	9a 96       	adiw	r26, 0x2a	; 42
    16b4:	8c 90       	ld	r8, X
    16b6:	9a 97       	sbiw	r26, 0x2a	; 42
    16b8:	9b 96       	adiw	r26, 0x2b	; 43
    16ba:	7c 90       	ld	r7, X
    16bc:	9b 97       	sbiw	r26, 0x2b	; 43
    16be:	9c 96       	adiw	r26, 0x2c	; 44
    16c0:	6c 90       	ld	r6, X
    16c2:	9c 97       	sbiw	r26, 0x2c	; 44
    16c4:	9d 96       	adiw	r26, 0x2d	; 45
    16c6:	5c 90       	ld	r5, X
    16c8:	9d 97       	sbiw	r26, 0x2d	; 45
    16ca:	9e 96       	adiw	r26, 0x2e	; 46
    16cc:	4c 90       	ld	r4, X
    16ce:	9e 97       	sbiw	r26, 0x2e	; 46
    16d0:	9f 96       	adiw	r26, 0x2f	; 47
    16d2:	3c 90       	ld	r3, X
    16d4:	9f 97       	sbiw	r26, 0x2f	; 47
    16d6:	d0 96       	adiw	r26, 0x30	; 48
    16d8:	2c 90       	ld	r2, X
    const char* name = dir_entry->long_name;
    16da:	7d a3       	std	Y+37, r23	; 0x25
    16dc:	6c a3       	std	Y+36, r22	; 0x24
    uint8_t name_len = strlen(name);
    16de:	fb 01       	movw	r30, r22
    16e0:	01 90       	ld	r0, Z+
    16e2:	00 20       	and	r0, r0
    16e4:	e9 f7       	brne	.-6      	; 0x16e0 <fat_write_dir_entry+0x8a>
    16e6:	31 97       	sbiw	r30, 0x01	; 1
    16e8:	5f 01       	movw	r10, r30
    16ea:	a6 1a       	sub	r10, r22
    16ec:	b7 0a       	sbc	r11, r23
    16ee:	1a 2d       	mov	r17, r10
    16f0:	c5 01       	movw	r24, r10
    16f2:	99 27       	eor	r25, r25
#if FAT_LFN_SUPPORT
    uint8_t lfn_entry_count = (name_len + 12) / 13;
    16f4:	0c 96       	adiw	r24, 0x0c	; 12
    16f6:	6d e0       	ldi	r22, 0x0D	; 13
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__divmodhi4>
    16fe:	69 a3       	std	Y+33, r22	; 0x21
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
    1700:	4b e0       	ldi	r20, 0x0B	; 11
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	60 e2       	ldi	r22, 0x20	; 32
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	ce 01       	movw	r24, r28
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <memset>
    char* name_ext = strrchr(name, '.');
    1710:	6e e2       	ldi	r22, 0x2E	; 46
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	c6 01       	movw	r24, r12
    1716:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <strrchr>
    if(name_ext && *++name_ext)
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	d1 f0       	breq	.+52     	; 0x1752 <fat_write_dir_entry+0xfc>
    171e:	fc 01       	movw	r30, r24
    1720:	21 81       	ldd	r18, Z+1	; 0x01
    1722:	22 23       	and	r18, r18
    1724:	b1 f0       	breq	.+44     	; 0x1752 <fat_write_dir_entry+0xfc>
    1726:	bc 01       	movw	r22, r24
    1728:	6f 5f       	subi	r22, 0xFF	; 255
    172a:	7f 4f       	sbci	r23, 0xFF	; 255
    {
        uint8_t name_ext_len = strlen(name_ext);
    172c:	fb 01       	movw	r30, r22
    172e:	01 90       	ld	r0, Z+
    1730:	00 20       	and	r0, r0
    1732:	e9 f7       	brne	.-6      	; 0x172e <fat_write_dir_entry+0xd8>
    1734:	31 97       	sbiw	r30, 0x01	; 1
    1736:	e6 1b       	sub	r30, r22
    1738:	f7 0b       	sbc	r31, r23
    173a:	aa 94       	dec	r10
        name_len -= name_ext_len + 1;
    173c:	1a 2d       	mov	r17, r10
    173e:	1e 1b       	sub	r17, r30
    1740:	e4 30       	cpi	r30, 0x04	; 4
    1742:	08 f0       	brcs	.+2      	; 0x1746 <fat_write_dir_entry+0xf0>
    1744:	e3 e0       	ldi	r30, 0x03	; 3
            name_ext_len = 3;
#else
            return 0;
#endif
        
        memcpy(&buffer[8], name_ext, name_ext_len);
    1746:	4e 2f       	mov	r20, r30
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	ce 01       	movw	r24, r28
    174c:	09 96       	adiw	r24, 0x09	; 9
    174e:	0e 94 cc 2c 	call	0x5998	; 0x5998 <memcpy>
    }
    
    if(name_len <= 8)
    1752:	19 30       	cpi	r17, 0x09	; 9
    1754:	d0 f4       	brcc	.+52     	; 0x178a <fat_write_dir_entry+0x134>
    {
        memcpy(buffer, name, name_len);
    1756:	41 2f       	mov	r20, r17
    1758:	50 e0       	ldi	r21, 0x00	; 0
    175a:	b6 01       	movw	r22, r12
    175c:	ce 01       	movw	r24, r28
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	0e 94 cc 2c 	call	0x5998	; 0x5998 <memcpy>
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
    1764:	d6 01       	movw	r26, r12
    1766:	8c 91       	ld	r24, X
    1768:	8e 32       	cpi	r24, 0x2E	; 46
    176a:	61 f5       	brne	.+88     	; 0x17c4 <fat_write_dir_entry+0x16e>
           ((name[1] == '.' && name[2] == '\0') ||
    176c:	11 96       	adiw	r26, 0x01	; 1
    176e:	8c 91       	ld	r24, X
    1770:	11 97       	sbiw	r26, 0x01	; 1
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
    1772:	8e 32       	cpi	r24, 0x2E	; 46
    1774:	31 f4       	brne	.+12     	; 0x1782 <fat_write_dir_entry+0x12c>
           ((name[1] == '.' && name[2] == '\0') ||
    1776:	12 96       	adiw	r26, 0x02	; 2
    1778:	8c 91       	ld	r24, X
    177a:	81 11       	cpse	r24, r1
    177c:	23 c0       	rjmp	.+70     	; 0x17c4 <fat_write_dir_entry+0x16e>
            name[1] == '\0')
          )
            lfn_entry_count = 0;
    177e:	19 a2       	std	Y+33, r1	; 0x21
    1780:	21 c0       	rjmp	.+66     	; 0x17c4 <fat_write_dir_entry+0x16e>
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
           ((name[1] == '.' && name[2] == '\0') ||
    1782:	81 11       	cpse	r24, r1
    1784:	1f c0       	rjmp	.+62     	; 0x17c4 <fat_write_dir_entry+0x16e>
            name[1] == '\0')
          )
            lfn_entry_count = 0;
    1786:	19 a2       	std	Y+33, r1	; 0x21
    1788:	1d c0       	rjmp	.+58     	; 0x17c4 <fat_write_dir_entry+0x16e>
#endif
    }
    else
    {
#if FAT_LFN_SUPPORT
        memcpy(buffer, name, 8);
    178a:	88 e0       	ldi	r24, 0x08	; 8
    178c:	f6 01       	movw	r30, r12
    178e:	de 01       	movw	r26, r28
    1790:	11 96       	adiw	r26, 0x01	; 1
    1792:	01 90       	ld	r0, Z+
    1794:	0d 92       	st	X+, r0
    1796:	8a 95       	dec	r24
    1798:	e1 f7       	brne	.-8      	; 0x1792 <fat_write_dir_entry+0x13c>

        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;
    179a:	f6 01       	movw	r30, r12
    179c:	81 a1       	ldd	r24, Z+33	; 0x21

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    179e:	80 3a       	cpi	r24, 0xA0	; 160
    17a0:	28 f4       	brcc	.+10     	; 0x17ac <fat_write_dir_entry+0x156>
    17a2:	98 2f       	mov	r25, r24
    17a4:	92 95       	swap	r25
    17a6:	9f 70       	andi	r25, 0x0F	; 15
    17a8:	90 5d       	subi	r25, 0xD0	; 208
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <fat_write_dir_entry+0x15e>
    17ac:	98 2f       	mov	r25, r24
    17ae:	92 95       	swap	r25
    17b0:	9f 70       	andi	r25, 0x0F	; 15
    17b2:	9f 59       	subi	r25, 0x9F	; 159
    17b4:	9f 83       	std	Y+7, r25	; 0x07
        num &= 0x0f;
    17b6:	8f 70       	andi	r24, 0x0F	; 15
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    17b8:	8a 30       	cpi	r24, 0x0A	; 10
    17ba:	10 f4       	brcc	.+4      	; 0x17c0 <fat_write_dir_entry+0x16a>
    17bc:	80 5d       	subi	r24, 0xD0	; 208
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <fat_write_dir_entry+0x16c>
    17c0:	8f 59       	subi	r24, 0x9F	; 159
    17c2:	88 87       	std	Y+8, r24	; 0x08
#else
        return 0;
#endif
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	85 3e       	cpi	r24, 0xE5	; 229
    17c8:	11 f4       	brne	.+4      	; 0x17ce <fat_write_dir_entry+0x178>
        buffer[0] = 0x05;
    17ca:	85 e0       	ldi	r24, 0x05	; 5
    17cc:	89 83       	std	Y+1, r24	; 0x01

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
    17ce:	fe 01       	movw	r30, r28
    17d0:	3c 96       	adiw	r30, 0x0c	; 12
    17d2:	85 e1       	ldi	r24, 0x15	; 21
    17d4:	df 01       	movw	r26, r30
    17d6:	1d 92       	st	X+, r1
    17d8:	8a 95       	dec	r24
    17da:	e9 f7       	brne	.-6      	; 0x17d6 <fat_write_dir_entry+0x180>
    buffer[0x0b] = dir_entry->attributes;
    17dc:	f6 01       	movw	r30, r12
    17de:	80 a1       	ldd	r24, Z+32	; 0x20
    17e0:	8c 87       	std	Y+12, r24	; 0x0c
#if FAT_DATETIME_SUPPORT
    write16(&buffer[0x16], dir_entry->modification_time);
    write16(&buffer[0x18], dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    write16(&buffer[0x14], (uint16_t) (dir_entry->cluster >> 16));
    17e2:	81 a1       	ldd	r24, Z+33	; 0x21
    17e4:	92 a1       	ldd	r25, Z+34	; 0x22
    17e6:	a3 a1       	ldd	r26, Z+35	; 0x23
    17e8:	b4 a1       	ldd	r27, Z+36	; 0x24
    17ea:	bd 01       	movw	r22, r26
    17ec:	88 27       	eor	r24, r24
    17ee:	99 27       	eor	r25, r25
    17f0:	ce 01       	movw	r24, r28
    17f2:	45 96       	adiw	r24, 0x15	; 21
    17f4:	0e 94 92 01 	call	0x324	; 0x324 <write16>
#endif
    write16(&buffer[0x1a], dir_entry->cluster);
    17f8:	d6 01       	movw	r26, r12
    17fa:	91 96       	adiw	r26, 0x21	; 33
    17fc:	6d 91       	ld	r22, X+
    17fe:	7c 91       	ld	r23, X
    1800:	92 97       	sbiw	r26, 0x22	; 34
    1802:	ce 01       	movw	r24, r28
    1804:	4b 96       	adiw	r24, 0x1b	; 27
    1806:	0e 94 92 01 	call	0x324	; 0x324 <write16>
    write32(&buffer[0x1c], dir_entry->file_size);
    180a:	f6 01       	movw	r30, r12
    180c:	45 a1       	ldd	r20, Z+37	; 0x25
    180e:	56 a1       	ldd	r21, Z+38	; 0x26
    1810:	67 a1       	ldd	r22, Z+39	; 0x27
    1812:	70 a5       	ldd	r23, Z+40	; 0x28
    1814:	ce 01       	movw	r24, r28
    1816:	4d 96       	adiw	r24, 0x1d	; 29
    1818:	0e 94 96 01 	call	0x32c	; 0x32c <write32>

    /* write to disk */
#if FAT_LFN_SUPPORT
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
    181c:	29 a1       	ldd	r18, Y+33	; 0x21
    181e:	f0 e2       	ldi	r31, 0x20	; 32
    1820:	2f 9f       	mul	r18, r31
    1822:	a0 01       	movw	r20, r0
    1824:	11 24       	eor	r1, r1
    1826:	24 2f       	mov	r18, r20
    1828:	35 2f       	mov	r19, r21
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a9 2c       	mov	r10, r9
    1838:	b8 2c       	mov	r11, r8
    183a:	c7 2c       	mov	r12, r7
    183c:	d6 2c       	mov	r13, r6
    183e:	e5 2c       	mov	r14, r5
    1840:	f4 2c       	mov	r15, r4
    1842:	03 2d       	mov	r16, r3
    1844:	12 2d       	mov	r17, r2
    1846:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
    184a:	68 94       	set
    184c:	ee 24       	eor	r14, r14
    184e:	e5 f8       	bld	r14, 5
    1850:	f1 2c       	mov	r15, r1
    1852:	8e 01       	movw	r16, r28
    1854:	0f 5f       	subi	r16, 0xFF	; 255
    1856:	1f 4f       	sbci	r17, 0xFF	; 255
    1858:	ea a1       	ldd	r30, Y+34	; 0x22
    185a:	fb a1       	ldd	r31, Y+35	; 0x23
    185c:	09 95       	icall
    185e:	88 23       	and	r24, r24
    1860:	09 f4       	brne	.+2      	; 0x1864 <fat_write_dir_entry+0x20e>
    1862:	8f c0       	rjmp	.+286    	; 0x1982 <fat_write_dir_entry+0x32c>
#endif
        return 0;
    
#if FAT_LFN_SUPPORT
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
    1864:	c8 01       	movw	r24, r16
    1866:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <fat_calc_83_checksum>
    186a:	a8 2e       	mov	r10, r24
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    186c:	f9 a1       	ldd	r31, Y+33	; 0x21
    186e:	ff 23       	and	r31, r31
    1870:	09 f4       	brne	.+2      	; 0x1874 <fat_write_dir_entry+0x21e>
    1872:	80 c0       	rjmp	.+256    	; 0x1974 <fat_write_dir_entry+0x31e>
    1874:	df 2e       	mov	r13, r31
            buffer[i++] = 0;

            switch(i)
            {
                case 0x0b:
                    i = 0x0e;
    1876:	0f 2e       	mov	r0, r31
    1878:	fe e0       	ldi	r31, 0x0E	; 14
    187a:	bf 2e       	mov	r11, r31
    187c:	f0 2d       	mov	r31, r0
                    break;
                case 0x1a:
                    i = 0x1c;
    187e:	0f 2e       	mov	r0, r31
    1880:	fc e1       	ldi	r31, 0x1C	; 28
    1882:	cf 2e       	mov	r12, r31
    1884:	f0 2d       	mov	r31, r0
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
        if(lfn_entry == lfn_entry_count)
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
    1886:	f0 64       	ori	r31, 0x40	; 64
    1888:	fe a3       	std	Y+38, r31	; 0x26
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    188a:	40 e2       	ldi	r20, 0x20	; 32
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	6f ef       	ldi	r22, 0xFF	; 255
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	ce 01       	movw	r24, r28
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <memset>
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    189a:	8d 2d       	mov	r24, r13
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	2d e0       	ldi	r18, 0x0D	; 13
    18a2:	28 9f       	mul	r18, r24
    18a4:	f0 01       	movw	r30, r0
    18a6:	29 9f       	mul	r18, r25
    18a8:	f0 0d       	add	r31, r0
    18aa:	11 24       	eor	r1, r1
    18ac:	8c a1       	ldd	r24, Y+36	; 0x24
    18ae:	9d a1       	ldd	r25, Y+37	; 0x25
    18b0:	e8 0f       	add	r30, r24
    18b2:	f9 1f       	adc	r31, r25
        uint8_t i = 1;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	bf 01       	movw	r22, r30
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <fat_write_dir_entry+0x266>
    18ba:	31 96       	adiw	r30, 0x01	; 1
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
    18bc:	91 e0       	ldi	r25, 0x01	; 1
    18be:	98 0f       	add	r25, r24
    18c0:	db 01       	movw	r26, r22
    18c2:	4d 91       	ld	r20, X+
    18c4:	bd 01       	movw	r22, r26
    18c6:	21 e0       	ldi	r18, 0x01	; 1
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	2c 0f       	add	r18, r28
    18cc:	3d 1f       	adc	r19, r29
    18ce:	28 0f       	add	r18, r24
    18d0:	31 1d       	adc	r19, r1
    18d2:	d9 01       	movw	r26, r18
    18d4:	4c 93       	st	X, r20
            buffer[i++] = 0;
    18d6:	8e 5f       	subi	r24, 0xFE	; 254
    18d8:	21 e0       	ldi	r18, 0x01	; 1
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	2c 0f       	add	r18, r28
    18de:	3d 1f       	adc	r19, r29
    18e0:	29 0f       	add	r18, r25
    18e2:	31 1d       	adc	r19, r1
    18e4:	d9 01       	movw	r26, r18
    18e6:	1c 92       	st	X, r1

            switch(i)
    18e8:	8b 30       	cpi	r24, 0x0B	; 11
    18ea:	09 f4       	brne	.+2      	; 0x18ee <fat_write_dir_entry+0x298>
    18ec:	45 c0       	rjmp	.+138    	; 0x1978 <fat_write_dir_entry+0x322>
    18ee:	8a 31       	cpi	r24, 0x1A	; 26
    18f0:	11 f4       	brne	.+4      	; 0x18f6 <fat_write_dir_entry+0x2a0>
            {
                case 0x0b:
                    i = 0x0e;
                    break;
                case 0x1a:
                    i = 0x1c;
    18f2:	8c 2d       	mov	r24, r12
    18f4:	42 c0       	rjmp	.+132    	; 0x197a <fat_write_dir_entry+0x324>
                    break;
            }

            if(!*long_name_curr++)
    18f6:	90 81       	ld	r25, Z
    18f8:	99 23       	and	r25, r25
    18fa:	11 f0       	breq	.+4      	; 0x1900 <fat_write_dir_entry+0x2aa>
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
    18fc:	8f 31       	cpi	r24, 0x1F	; 31
    18fe:	e8 f2       	brcs	.-70     	; 0x18ba <fat_write_dir_entry+0x264>
            if(!*long_name_curr++)
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
    1900:	d9 82       	std	Y+1, r13	; 0x01
        if(lfn_entry == lfn_entry_count)
    1902:	b9 a1       	ldd	r27, Y+33	; 0x21
    1904:	db 12       	cpse	r13, r27
    1906:	02 c0       	rjmp	.+4      	; 0x190c <fat_write_dir_entry+0x2b6>
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
    1908:	ee a1       	ldd	r30, Y+38	; 0x26
    190a:	e9 83       	std	Y+1, r30	; 0x01

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    190c:	ff e0       	ldi	r31, 0x0F	; 15
    190e:	fc 87       	std	Y+12, r31	; 0x0c

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
    1910:	ae 86       	std	Y+14, r10	; 0x0e

        /* clear reserved bytes */
        buffer[0x0c] = 0;
    1912:	1d 86       	std	Y+13, r1	; 0x0d
        buffer[0x1a] = 0;
    1914:	1b 8e       	std	Y+27, r1	; 0x1b
        buffer[0x1b] = 0;
    1916:	1c 8e       	std	Y+28, r1	; 0x1c

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
    1918:	68 94       	set
    191a:	ee 24       	eor	r14, r14
    191c:	e5 f8       	bld	r14, 5
    191e:	f1 2c       	mov	r15, r1
    1920:	8e 01       	movw	r16, r28
    1922:	0f 5f       	subi	r16, 0xFF	; 255
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
    1926:	29 2d       	mov	r18, r9
    1928:	38 2d       	mov	r19, r8
    192a:	47 2d       	mov	r20, r7
    192c:	56 2d       	mov	r21, r6
    192e:	65 2d       	mov	r22, r5
    1930:	74 2d       	mov	r23, r4
    1932:	83 2d       	mov	r24, r3
    1934:	92 2d       	mov	r25, r2
    1936:	ea a1       	ldd	r30, Y+34	; 0x22
    1938:	fb a1       	ldd	r31, Y+35	; 0x23
    193a:	09 95       	icall
    
        offset += sizeof(buffer);
    193c:	29 2d       	mov	r18, r9
    193e:	38 2d       	mov	r19, r8
    1940:	47 2d       	mov	r20, r7
    1942:	56 2d       	mov	r21, r6
    1944:	65 2d       	mov	r22, r5
    1946:	74 2d       	mov	r23, r4
    1948:	83 2d       	mov	r24, r3
    194a:	92 2d       	mov	r25, r2
    194c:	a0 e2       	ldi	r26, 0x20	; 32
    194e:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__adddi3_s8>
    1952:	92 2e       	mov	r9, r18
    1954:	83 2e       	mov	r8, r19
    1956:	74 2e       	mov	r7, r20
    1958:	65 2e       	mov	r6, r21
    195a:	56 2e       	mov	r5, r22
    195c:	47 2e       	mov	r4, r23
    195e:	38 2e       	mov	r3, r24
    1960:	29 2e       	mov	r2, r25
#if FAT_LFN_SUPPORT
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    1962:	da 94       	dec	r13
    1964:	d1 10       	cpse	r13, r1
    1966:	91 cf       	rjmp	.-222    	; 0x188a <fat_write_dir_entry+0x234>
    
        offset += sizeof(buffer);
    }
#endif
    
    return 1;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	0b c0       	rjmp	.+22     	; 0x1982 <fat_write_dir_entry+0x32c>
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
        return 0;
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	09 c0       	rjmp	.+18     	; 0x1982 <fat_write_dir_entry+0x32c>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	07 c0       	rjmp	.+14     	; 0x1982 <fat_write_dir_entry+0x32c>
    
        offset += sizeof(buffer);
    }
#endif
    
    return 1;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	05 c0       	rjmp	.+10     	; 0x1982 <fat_write_dir_entry+0x32c>
            buffer[i++] = 0;

            switch(i)
            {
                case 0x0b:
                    i = 0x0e;
    1978:	8b 2d       	mov	r24, r11
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    197a:	90 81       	ld	r25, Z
    197c:	91 11       	cpse	r25, r1
    197e:	9d cf       	rjmp	.-198    	; 0x18ba <fat_write_dir_entry+0x264>
    1980:	bf cf       	rjmp	.-130    	; 0x1900 <fat_write_dir_entry+0x2aa>
        offset += sizeof(buffer);
    }
#endif
    
    return 1;
}
    1982:	a6 96       	adiw	r28, 0x26	; 38
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	1f 91       	pop	r17
    1994:	0f 91       	pop	r16
    1996:	ff 90       	pop	r15
    1998:	ef 90       	pop	r14
    199a:	df 90       	pop	r13
    199c:	cf 90       	pop	r12
    199e:	bf 90       	pop	r11
    19a0:	af 90       	pop	r10
    19a2:	9f 90       	pop	r9
    19a4:	8f 90       	pop	r8
    19a6:	7f 90       	pop	r7
    19a8:	6f 90       	pop	r6
    19aa:	5f 90       	pop	r5
    19ac:	4f 90       	pop	r4
    19ae:	3f 90       	pop	r3
    19b0:	2f 90       	pop	r2
    19b2:	08 95       	ret

000019b4 <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
    19b4:	2f 92       	push	r2
    19b6:	3f 92       	push	r3
    19b8:	4f 92       	push	r4
    19ba:	5f 92       	push	r5
    19bc:	6f 92       	push	r6
    19be:	7f 92       	push	r7
    19c0:	8f 92       	push	r8
    19c2:	9f 92       	push	r9
    19c4:	af 92       	push	r10
    19c6:	bf 92       	push	r11
    19c8:	cf 92       	push	r12
    19ca:	df 92       	push	r13
    19cc:	ef 92       	push	r14
    19ce:	ff 92       	push	r15
    19d0:	0f 93       	push	r16
    19d2:	1f 93       	push	r17
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	c6 55       	subi	r28, 0x56	; 86
    19de:	d1 09       	sbc	r29, r1
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    if(!partition ||
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <fat_open+0x3c>
    19ee:	70 c2       	rjmp	.+1248   	; 0x1ed0 <fat_open+0x51c>
    19f0:	dc 01       	movw	r26, r24
    19f2:	14 96       	adiw	r26, 0x04	; 4
    19f4:	2d 91       	ld	r18, X+
    19f6:	3c 91       	ld	r19, X
    19f8:	15 97       	sbiw	r26, 0x05	; 5
    19fa:	23 2b       	or	r18, r19
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <fat_open+0x4c>
    19fe:	6b c2       	rjmp	.+1238   	; 0x1ed6 <fat_open+0x522>
#if FAT_WRITE_SUPPORT
       !partition->device_write ||
    1a00:	16 96       	adiw	r26, 0x06	; 6
    1a02:	2d 91       	ld	r18, X+
    1a04:	3c 91       	ld	r19, X
    1a06:	17 97       	sbiw	r26, 0x07	; 7
    1a08:	23 2b       	or	r18, r19
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <fat_open+0x5a>
    1a0c:	67 c2       	rjmp	.+1230   	; 0x1edc <fat_open+0x528>
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!fs->partition)
    1a0e:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <fat_fs_handles>
    1a12:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <fat_fs_handles+0x1>
    1a16:	23 2b       	or	r18, r19
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <fat_open+0x68>
    1a1a:	63 c2       	rjmp	.+1222   	; 0x1ee2 <fat_open+0x52e>
            break;

        ++fs;
    }
    if(i >= FAT_FS_COUNT)
        return 0;
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	9c c2       	rjmp	.+1336   	; 0x1f5a <fat_open+0x5a6>
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
        return 0;

    uint16_t bytes_per_sector = read16(&buffer[0x00]);
    1a22:	ce 01       	movw	r24, r28
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	0e 94 76 01 	call	0x2ec	; 0x2ec <read16>
    1a2a:	9a af       	std	Y+58, r25	; 0x3a
    1a2c:	89 af       	std	Y+57, r24	; 0x39
    uint16_t reserved_sectors = read16(&buffer[0x03]);
    1a2e:	ce 01       	movw	r24, r28
    1a30:	04 96       	adiw	r24, 0x04	; 4
    1a32:	0e 94 76 01 	call	0x2ec	; 0x2ec <read16>
    1a36:	9c af       	std	Y+60, r25	; 0x3c
    1a38:	8b af       	std	Y+59, r24	; 0x3b
    uint8_t sectors_per_cluster = buffer[0x02];
    1a3a:	bb 81       	ldd	r27, Y+3	; 0x03
    1a3c:	24 96       	adiw	r28, 0x04	; 4
    1a3e:	bf af       	std	Y+63, r27	; 0x3f
    1a40:	24 97       	sbiw	r28, 0x04	; 4
    uint8_t fat_copies = buffer[0x05];
    1a42:	ee 81       	ldd	r30, Y+6	; 0x06
    1a44:	25 96       	adiw	r28, 0x05	; 5
    1a46:	ef af       	std	Y+63, r30	; 0x3f
    1a48:	25 97       	sbiw	r28, 0x05	; 5
    uint16_t max_root_entries = read16(&buffer[0x06]);
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	07 96       	adiw	r24, 0x07	; 7
    1a4e:	0e 94 76 01 	call	0x2ec	; 0x2ec <read16>
    1a52:	2f 96       	adiw	r28, 0x0f	; 15
    1a54:	9f af       	std	Y+63, r25	; 0x3f
    1a56:	8e af       	std	Y+62, r24	; 0x3e
    1a58:	2f 97       	sbiw	r28, 0x0f	; 15
    uint16_t sector_count_16 = read16(&buffer[0x08]);
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	09 96       	adiw	r24, 0x09	; 9
    1a5e:	0e 94 76 01 	call	0x2ec	; 0x2ec <read16>
    1a62:	7c 01       	movw	r14, r24
    uint16_t sectors_per_fat = read16(&buffer[0x0b]);
    1a64:	ce 01       	movw	r24, r28
    1a66:	0c 96       	adiw	r24, 0x0c	; 12
    1a68:	0e 94 76 01 	call	0x2ec	; 0x2ec <read16>
    1a6c:	23 96       	adiw	r28, 0x03	; 3
    1a6e:	9f af       	std	Y+63, r25	; 0x3f
    1a70:	8e af       	std	Y+62, r24	; 0x3e
    1a72:	23 97       	sbiw	r28, 0x03	; 3
    uint32_t sector_count = read32(&buffer[0x15]);
    1a74:	ce 01       	movw	r24, r28
    1a76:	46 96       	adiw	r24, 0x16	; 22
    1a78:	0e 94 80 01 	call	0x300	; 0x300 <read32>
    1a7c:	5b 01       	movw	r10, r22
    1a7e:	6c 01       	movw	r12, r24
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = read32(&buffer[0x19]);
    1a80:	ce 01       	movw	r24, r28
    1a82:	4a 96       	adiw	r24, 0x1a	; 26
    1a84:	0e 94 80 01 	call	0x300	; 0x300 <read32>
    1a88:	21 96       	adiw	r28, 0x01	; 1
    1a8a:	6c af       	std	Y+60, r22	; 0x3c
    1a8c:	7d af       	std	Y+61, r23	; 0x3d
    1a8e:	8e af       	std	Y+62, r24	; 0x3e
    1a90:	9f af       	std	Y+63, r25	; 0x3f
    1a92:	21 97       	sbiw	r28, 0x01	; 1
    uint32_t cluster_root_dir = read32(&buffer[0x21]);
    1a94:	ce 01       	movw	r24, r28
    1a96:	82 96       	adiw	r24, 0x22	; 34
    1a98:	0e 94 80 01 	call	0x300	; 0x300 <read32>
    1a9c:	67 96       	adiw	r28, 0x17	; 23
    1a9e:	6c af       	std	Y+60, r22	; 0x3c
    1aa0:	7d af       	std	Y+61, r23	; 0x3d
    1aa2:	8e af       	std	Y+62, r24	; 0x3e
    1aa4:	9f af       	std	Y+63, r25	; 0x3f
    1aa6:	67 97       	sbiw	r28, 0x17	; 23
#endif

    if(sector_count == 0)
    1aa8:	a1 14       	cp	r10, r1
    1aaa:	b1 04       	cpc	r11, r1
    1aac:	c1 04       	cpc	r12, r1
    1aae:	d1 04       	cpc	r13, r1
    1ab0:	39 f4       	brne	.+14     	; 0x1ac0 <fat_open+0x10c>
    {
        if(sector_count_16 == 0)
    1ab2:	e1 14       	cp	r14, r1
    1ab4:	f1 04       	cpc	r15, r1
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <fat_open+0x106>
    1ab8:	47 c2       	rjmp	.+1166   	; 0x1f48 <fat_open+0x594>
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
    1aba:	57 01       	movw	r10, r14
    1abc:	c1 2c       	mov	r12, r1
    1abe:	d1 2c       	mov	r13, r1
    }
#if FAT_FAT32_SUPPORT
    if(sectors_per_fat != 0)
    1ac0:	23 96       	adiw	r28, 0x03	; 3
    1ac2:	ee ac       	ldd	r14, Y+62	; 0x3e
    1ac4:	ff ac       	ldd	r15, Y+63	; 0x3f
    1ac6:	23 97       	sbiw	r28, 0x03	; 3
    1ac8:	e1 14       	cp	r14, r1
    1aca:	f1 04       	cpc	r15, r1
    1acc:	51 f0       	breq	.+20     	; 0x1ae2 <fat_open+0x12e>
        sectors_per_fat32 = sectors_per_fat;
    1ace:	87 01       	movw	r16, r14
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	21 96       	adiw	r28, 0x01	; 1
    1ad6:	0c af       	std	Y+60, r16	; 0x3c
    1ad8:	1d af       	std	Y+61, r17	; 0x3d
    1ada:	2e af       	std	Y+62, r18	; 0x3e
    1adc:	3f af       	std	Y+63, r19	; 0x3f
    1ade:	21 97       	sbiw	r28, 0x01	; 1
    1ae0:	0b c0       	rjmp	.+22     	; 0x1af8 <fat_open+0x144>
    else if(sectors_per_fat32 == 0)
    1ae2:	21 96       	adiw	r28, 0x01	; 1
    1ae4:	4c ad       	ldd	r20, Y+60	; 0x3c
    1ae6:	5d ad       	ldd	r21, Y+61	; 0x3d
    1ae8:	6e ad       	ldd	r22, Y+62	; 0x3e
    1aea:	7f ad       	ldd	r23, Y+63	; 0x3f
    1aec:	21 97       	sbiw	r28, 0x01	; 1
    1aee:	45 2b       	or	r20, r21
    1af0:	46 2b       	or	r20, r22
    1af2:	47 2b       	or	r20, r23
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <fat_open+0x144>
    1af6:	28 c2       	rjmp	.+1104   	; 0x1f48 <fat_open+0x594>

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
                                 - reserved_sectors
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
    1af8:	25 96       	adiw	r28, 0x05	; 5
    1afa:	5f ad       	ldd	r21, Y+63	; 0x3f
    1afc:	25 97       	sbiw	r28, 0x05	; 5
    1afe:	a5 2f       	mov	r26, r21
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	21 96       	adiw	r28, 0x01	; 1
    1b04:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b06:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b08:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b0a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b0c:	21 97       	sbiw	r28, 0x01	; 1
    1b0e:	0e 94 e7 2b 	call	0x57ce	; 0x57ce <__muluhisi3>
    1b12:	86 01       	movw	r16, r12
    1b14:	75 01       	movw	r14, r10
    1b16:	2b ad       	ldd	r18, Y+59	; 0x3b
    1b18:	3c ad       	ldd	r19, Y+60	; 0x3c
    1b1a:	e2 1a       	sub	r14, r18
    1b1c:	f3 0a       	sbc	r15, r19
    1b1e:	01 09       	sbc	r16, r1
    1b20:	11 09       	sbc	r17, r1
    1b22:	e6 1a       	sub	r14, r22
    1b24:	f7 0a       	sbc	r15, r23
    1b26:	08 0b       	sbc	r16, r24
    1b28:	19 0b       	sbc	r17, r25
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    1b2a:	2f 96       	adiw	r28, 0x0f	; 15
    1b2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b30:	2f 97       	sbiw	r28, 0x0f	; 15
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	82 95       	swap	r24
    1b38:	92 95       	swap	r25
    1b3a:	90 7f       	andi	r25, 0xF0	; 240
    1b3c:	98 27       	eor	r25, r24
    1b3e:	80 7f       	andi	r24, 0xF0	; 240
    1b40:	98 27       	eor	r25, r24
    1b42:	49 ad       	ldd	r20, Y+57	; 0x39
    1b44:	5a ad       	ldd	r21, Y+58	; 0x3a
    1b46:	41 50       	subi	r20, 0x01	; 1
    1b48:	51 09       	sbc	r21, r1
    1b4a:	84 0f       	add	r24, r20
    1b4c:	95 1f       	adc	r25, r21
    1b4e:	69 ad       	ldd	r22, Y+57	; 0x39
    1b50:	7a ad       	ldd	r23, Y+58	; 0x3a
    1b52:	0e 94 88 2b 	call	0x5710	; 0x5710 <__udivmodhi4>
        /* this is not a FAT16 */
        return 0;
#endif

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
    1b56:	e6 1a       	sub	r14, r22
    1b58:	f7 0a       	sbc	r15, r23
    1b5a:	01 09       	sbc	r16, r1
    1b5c:	11 09       	sbc	r17, r1
    1b5e:	c8 01       	movw	r24, r16
    1b60:	b7 01       	movw	r22, r14
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    1b62:	24 96       	adiw	r28, 0x04	; 4
    1b64:	4f ad       	ldd	r20, Y+63	; 0x3f
    1b66:	24 97       	sbiw	r28, 0x04	; 4
    1b68:	04 2f       	mov	r16, r20
    1b6a:	10 e0       	ldi	r17, 0x00	; 0
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	a9 01       	movw	r20, r18
    1b72:	98 01       	movw	r18, r16
    1b74:	0e 94 b0 2b 	call	0x5760	; 0x5760 <__udivmodsi4>
    1b78:	63 96       	adiw	r28, 0x13	; 19
    1b7a:	2c af       	std	Y+60, r18	; 0x3c
    1b7c:	3d af       	std	Y+61, r19	; 0x3d
    1b7e:	4e af       	std	Y+62, r20	; 0x3e
    1b80:	5f af       	std	Y+63, r21	; 0x3f
    1b82:	63 97       	sbiw	r28, 0x13	; 19
    1b84:	da 01       	movw	r26, r20
    1b86:	c9 01       	movw	r24, r18
    if(data_cluster_count < 4085)
    1b88:	85 3f       	cpi	r24, 0xF5	; 245
    1b8a:	5f e0       	ldi	r21, 0x0F	; 15
    1b8c:	95 07       	cpc	r25, r21
    1b8e:	a1 05       	cpc	r26, r1
    1b90:	b1 05       	cpc	r27, r1
    1b92:	08 f4       	brcc	.+2      	; 0x1b96 <fat_open+0x1e2>
    1b94:	d9 c1       	rjmp	.+946    	; 0x1f48 <fat_open+0x594>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
    1b96:	85 3f       	cpi	r24, 0xF5	; 245
    1b98:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9a:	a1 05       	cpc	r26, r1
    1b9c:	b1 05       	cpc	r27, r1
    1b9e:	28 f4       	brcc	.+10     	; 0x1baa <fat_open+0x1f6>
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
    1ba0:	86 e0       	ldi	r24, 0x06	; 6
    1ba2:	d2 01       	movw	r26, r4
    1ba4:	18 96       	adiw	r26, 0x08	; 8
    1ba6:	8c 93       	st	X, r24
    1ba8:	03 c0       	rjmp	.+6      	; 0x1bb0 <fat_open+0x1fc>
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;
    1baa:	8b e0       	ldi	r24, 0x0B	; 11
    1bac:	f2 01       	movw	r30, r4
    1bae:	80 87       	std	Z+8, r24	; 0x08

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    1bb0:	8c e2       	ldi	r24, 0x2C	; 44
    1bb2:	e3 ec       	ldi	r30, 0xC3	; 195
    1bb4:	f1 e0       	ldi	r31, 0x01	; 1
    1bb6:	df 01       	movw	r26, r30
    1bb8:	1d 92       	st	X+, r1
    1bba:	8a 95       	dec	r24
    1bbc:	e9 f7       	brne	.-6      	; 0x1bb8 <fat_open+0x204>
    
    header->size = (offset_t) sector_count * bytes_per_sector;
    1bbe:	09 ad       	ldd	r16, Y+57	; 0x39
    1bc0:	1a ad       	ldd	r17, Y+58	; 0x3a
    1bc2:	78 01       	movw	r14, r16
    1bc4:	00 e0       	ldi	r16, 0x00	; 0
    1bc6:	10 e0       	ldi	r17, 0x00	; 0
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	a9 01       	movw	r20, r18
    1bce:	e9 aa       	std	Y+49, r14	; 0x31
    1bd0:	fa aa       	std	Y+50, r15	; 0x32
    1bd2:	0b ab       	std	Y+51, r16	; 0x33
    1bd4:	1c ab       	std	Y+52, r17	; 0x34
    1bd6:	2d ab       	std	Y+53, r18	; 0x35
    1bd8:	3e ab       	std	Y+54, r19	; 0x36
    1bda:	4f ab       	std	Y+55, r20	; 0x37
    1bdc:	58 af       	std	Y+56, r21	; 0x38
    1bde:	0f 2e       	mov	r0, r31
    1be0:	f1 ec       	ldi	r31, 0xC1	; 193
    1be2:	8f 2e       	mov	r8, r31
    1be4:	f1 e0       	ldi	r31, 0x01	; 1
    1be6:	9f 2e       	mov	r9, r31
    1be8:	f0 2d       	mov	r31, r0
    1bea:	a6 01       	movw	r20, r12
    1bec:	95 01       	movw	r18, r10
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	26 96       	adiw	r28, 0x06	; 6
    1bf6:	af ae       	std	Y+63, r10	; 0x3f
    1bf8:	26 97       	sbiw	r28, 0x06	; 6
    1bfa:	27 96       	adiw	r28, 0x07	; 7
    1bfc:	3f af       	std	Y+63, r19	; 0x3f
    1bfe:	27 97       	sbiw	r28, 0x07	; 7
    1c00:	28 96       	adiw	r28, 0x08	; 8
    1c02:	4f af       	std	Y+63, r20	; 0x3f
    1c04:	28 97       	sbiw	r28, 0x08	; 8
    1c06:	29 96       	adiw	r28, 0x09	; 9
    1c08:	5f af       	std	Y+63, r21	; 0x3f
    1c0a:	29 97       	sbiw	r28, 0x09	; 9
    1c0c:	2a 96       	adiw	r28, 0x0a	; 10
    1c0e:	6f af       	std	Y+63, r22	; 0x3f
    1c10:	2a 97       	sbiw	r28, 0x0a	; 10
    1c12:	2b 96       	adiw	r28, 0x0b	; 11
    1c14:	7f af       	std	Y+63, r23	; 0x3f
    1c16:	2b 97       	sbiw	r28, 0x0b	; 11
    1c18:	2c 96       	adiw	r28, 0x0c	; 12
    1c1a:	8f af       	std	Y+63, r24	; 0x3f
    1c1c:	2c 97       	sbiw	r28, 0x0c	; 12
    1c1e:	2d 96       	adiw	r28, 0x0d	; 13
    1c20:	9f af       	std	Y+63, r25	; 0x3f
    1c22:	2d 97       	sbiw	r28, 0x0d	; 13
    1c24:	ae 2c       	mov	r10, r14
    1c26:	bf 2c       	mov	r11, r15
    1c28:	c1 2c       	mov	r12, r1
    1c2a:	d1 2c       	mov	r13, r1
    1c2c:	e1 2c       	mov	r14, r1
    1c2e:	f1 2c       	mov	r15, r1
    1c30:	00 e0       	ldi	r16, 0x00	; 0
    1c32:	10 e0       	ldi	r17, 0x00	; 0
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__muldi3>
    1c40:	d4 01       	movw	r26, r8
    1c42:	12 96       	adiw	r26, 0x02	; 2
    1c44:	2c 93       	st	X, r18
    1c46:	12 97       	sbiw	r26, 0x02	; 2
    1c48:	13 96       	adiw	r26, 0x03	; 3
    1c4a:	3c 93       	st	X, r19
    1c4c:	13 97       	sbiw	r26, 0x03	; 3
    1c4e:	14 96       	adiw	r26, 0x04	; 4
    1c50:	4c 93       	st	X, r20
    1c52:	14 97       	sbiw	r26, 0x04	; 4
    1c54:	15 96       	adiw	r26, 0x05	; 5
    1c56:	5c 93       	st	X, r21
    1c58:	15 97       	sbiw	r26, 0x05	; 5
    1c5a:	16 96       	adiw	r26, 0x06	; 6
    1c5c:	6c 93       	st	X, r22
    1c5e:	16 97       	sbiw	r26, 0x06	; 6
    1c60:	17 96       	adiw	r26, 0x07	; 7
    1c62:	7c 93       	st	X, r23
    1c64:	17 97       	sbiw	r26, 0x07	; 7
    1c66:	18 96       	adiw	r26, 0x08	; 8
    1c68:	8c 93       	st	X, r24
    1c6a:	18 97       	sbiw	r26, 0x08	; 8
    1c6c:	19 96       	adiw	r26, 0x09	; 9
    1c6e:	9c 93       	st	X, r25

    header->fat_offset = /* jump to partition */
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    1c70:	eb ad       	ldd	r30, Y+59	; 0x3b
    1c72:	fc ad       	ldd	r31, Y+60	; 0x3c
    1c74:	af 01       	movw	r20, r30
    1c76:	2e 2f       	mov	r18, r30
    1c78:	35 2f       	mov	r19, r21
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	50 e0       	ldi	r21, 0x00	; 0
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__muldi3>
    memset(header, 0, sizeof(*header));
    
    header->size = (offset_t) sector_count * bytes_per_sector;

    header->fat_offset = /* jump to partition */
                         partition_offset +
    1c8a:	a6 2c       	mov	r10, r6
    1c8c:	b7 2c       	mov	r11, r7
    1c8e:	ce a0       	ldd	r12, Y+38	; 0x26
    1c90:	de a4       	ldd	r13, Y+46	; 0x2e
    1c92:	ef a4       	ldd	r14, Y+47	; 0x2f
    1c94:	f8 a8       	ldd	r15, Y+48	; 0x30
    1c96:	02 2d       	mov	r16, r2
    1c98:	13 2d       	mov	r17, r3
    1c9a:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
    1c9e:	72 2e       	mov	r7, r18
    1ca0:	63 2e       	mov	r6, r19
    1ca2:	4e a7       	std	Y+46, r20	; 0x2e
    1ca4:	5f a7       	std	Y+47, r21	; 0x2f
    1ca6:	68 ab       	std	Y+48, r22	; 0x30
    1ca8:	7b af       	std	Y+59, r23	; 0x3b
    1caa:	28 2e       	mov	r2, r24
    1cac:	39 2e       	mov	r3, r25
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    
    header->size = (offset_t) sector_count * bytes_per_sector;

    header->fat_offset = /* jump to partition */
    1cae:	d4 01       	movw	r26, r8
    1cb0:	1a 96       	adiw	r26, 0x0a	; 10
    1cb2:	2c 93       	st	X, r18
    1cb4:	1a 97       	sbiw	r26, 0x0a	; 10
    1cb6:	1b 96       	adiw	r26, 0x0b	; 11
    1cb8:	3c 93       	st	X, r19
    1cba:	1b 97       	sbiw	r26, 0x0b	; 11
    1cbc:	1c 96       	adiw	r26, 0x0c	; 12
    1cbe:	4c 93       	st	X, r20
    1cc0:	1c 97       	sbiw	r26, 0x0c	; 12
    1cc2:	1d 96       	adiw	r26, 0x0d	; 13
    1cc4:	5c 93       	st	X, r21
    1cc6:	1d 97       	sbiw	r26, 0x0d	; 13
    1cc8:	1e 96       	adiw	r26, 0x0e	; 14
    1cca:	6c 93       	st	X, r22
    1ccc:	1e 97       	sbiw	r26, 0x0e	; 14
    1cce:	1f 96       	adiw	r26, 0x0f	; 15
    1cd0:	7c 93       	st	X, r23
    1cd2:	1f 97       	sbiw	r26, 0x0f	; 15
    1cd4:	50 96       	adiw	r26, 0x10	; 16
    1cd6:	8c 93       	st	X, r24
    1cd8:	50 97       	sbiw	r26, 0x10	; 16
    1cda:	51 96       	adiw	r26, 0x11	; 17
    1cdc:	9c 93       	st	X, r25
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    1cde:	63 96       	adiw	r28, 0x13	; 19
    1ce0:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ce2:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ce4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ce6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ce8:	63 97       	sbiw	r28, 0x13	; 19
    1cea:	6e 5f       	subi	r22, 0xFE	; 254
    1cec:	7f 4f       	sbci	r23, 0xFF	; 255
    1cee:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf2:	f2 01       	movw	r30, r4
    1cf4:	20 85       	ldd	r18, Z+8	; 0x08
    1cf6:	26 30       	cpi	r18, 0x06	; 6
    1cf8:	29 f0       	breq	.+10     	; 0x1d04 <fat_open+0x350>
    1cfa:	24 e0       	ldi	r18, 0x04	; 4
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e0       	ldi	r20, 0x00	; 0
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	04 c0       	rjmp	.+8      	; 0x1d0c <fat_open+0x358>
    1d04:	22 e0       	ldi	r18, 0x02	; 2
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	50 e0       	ldi	r21, 0x00	; 0
    1d0c:	e1 ec       	ldi	r30, 0xC1	; 193
    1d0e:	f1 e0       	ldi	r31, 0x01	; 1
    1d10:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__mulsi3>
    1d14:	62 8b       	std	Z+18, r22	; 0x12
    1d16:	73 8b       	std	Z+19, r23	; 0x13
    1d18:	84 8b       	std	Z+20, r24	; 0x14
    1d1a:	95 8b       	std	Z+21, r25	; 0x15

    header->sector_size = bytes_per_sector;
    1d1c:	a9 ac       	ldd	r10, Y+57	; 0x39
    1d1e:	ba ac       	ldd	r11, Y+58	; 0x3a
    1d20:	b7 8a       	std	Z+23, r11	; 0x17
    1d22:	a6 8a       	std	Z+22, r10	; 0x16
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
    1d24:	24 96       	adiw	r28, 0x04	; 4
    1d26:	cf ac       	ldd	r12, Y+63	; 0x3f
    1d28:	24 97       	sbiw	r28, 0x04	; 4
    1d2a:	ca 9c       	mul	r12, r10
    1d2c:	c0 01       	movw	r24, r0
    1d2e:	cb 9c       	mul	r12, r11
    1d30:	90 0d       	add	r25, r0
    1d32:	11 24       	eor	r1, r1
    1d34:	91 8f       	std	Z+25, r25	; 0x19
    1d36:	80 8f       	std	Z+24, r24	; 0x18

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
    1d38:	d2 01       	movw	r26, r4
    1d3a:	18 96       	adiw	r26, 0x08	; 8
    1d3c:	8c 91       	ld	r24, X
    1d3e:	86 30       	cpi	r24, 0x06	; 6
    1d40:	09 f0       	breq	.+2      	; 0x1d44 <fat_open+0x390>
    1d42:	63 c0       	rjmp	.+198    	; 0x1e0a <fat_open+0x456>
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;
    1d44:	23 96       	adiw	r28, 0x03	; 3
    1d46:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d48:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d4a:	23 97       	sbiw	r28, 0x03	; 3
    1d4c:	8f 01       	movw	r16, r30
    1d4e:	ae 2e       	mov	r10, r30
    1d50:	b1 2e       	mov	r11, r17
    1d52:	c1 2c       	mov	r12, r1
    1d54:	d1 2c       	mov	r13, r1
    1d56:	e1 2c       	mov	r14, r1
    1d58:	f1 2c       	mov	r15, r1
    1d5a:	00 e0       	ldi	r16, 0x00	; 0
    1d5c:	10 e0       	ldi	r17, 0x00	; 0
    1d5e:	29 a9       	ldd	r18, Y+49	; 0x31
    1d60:	3a a9       	ldd	r19, Y+50	; 0x32
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	60 e0       	ldi	r22, 0x00	; 0
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__muldi3>
    1d72:	25 96       	adiw	r28, 0x05	; 5
    1d74:	af ac       	ldd	r10, Y+63	; 0x3f
    1d76:	25 97       	sbiw	r28, 0x05	; 5
    1d78:	b1 2c       	mov	r11, r1
    1d7a:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__muldi3>
#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
    1d7e:	a7 2c       	mov	r10, r7
    1d80:	b6 2c       	mov	r11, r6
    1d82:	ce a4       	ldd	r12, Y+46	; 0x2e
    1d84:	df a4       	ldd	r13, Y+47	; 0x2f
    1d86:	e8 a8       	ldd	r14, Y+48	; 0x30
    1d88:	fb ac       	ldd	r15, Y+59	; 0x3b
    1d8a:	02 2d       	mov	r16, r2
    1d8c:	13 2d       	mov	r17, r3
    1d8e:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
    1d92:	42 2e       	mov	r4, r18
    1d94:	53 2e       	mov	r5, r19
    1d96:	64 2e       	mov	r6, r20
    1d98:	75 2e       	mov	r7, r21
    1d9a:	86 2e       	mov	r8, r22
    1d9c:	97 2e       	mov	r9, r23
    1d9e:	b8 2f       	mov	r27, r24
    1da0:	a9 2f       	mov	r26, r25

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
    1da2:	e1 ec       	ldi	r30, 0xC1	; 193
    1da4:	f1 e0       	ldi	r31, 0x01	; 1
    1da6:	22 a3       	std	Z+34, r18	; 0x22
    1da8:	33 a3       	std	Z+35, r19	; 0x23
    1daa:	44 a3       	std	Z+36, r20	; 0x24
    1dac:	55 a3       	std	Z+37, r21	; 0x25
    1dae:	66 a3       	std	Z+38, r22	; 0x26
    1db0:	77 a3       	std	Z+39, r23	; 0x27
    1db2:	80 a7       	std	Z+40, r24	; 0x28
    1db4:	91 a7       	std	Z+41, r25	; 0x29
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
                                      /* skip root directory entries */
                                      (offset_t) max_root_entries * 32;
    1db6:	2f 96       	adiw	r28, 0x0f	; 15
    1db8:	2e ad       	ldd	r18, Y+62	; 0x3e
    1dba:	3f ad       	ldd	r19, Y+63	; 0x3f
    1dbc:	2f 97       	sbiw	r28, 0x0f	; 15
    1dbe:	59 01       	movw	r10, r18
    1dc0:	3b 2d       	mov	r19, r11
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
    1dc4:	50 e0       	ldi	r21, 0x00	; 0
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	05 e0       	ldi	r16, 0x05	; 5
    1dd0:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__ashldi3>
    1dd4:	a2 2e       	mov	r10, r18
    1dd6:	b3 2e       	mov	r11, r19
    1dd8:	c4 2e       	mov	r12, r20
    1dda:	d5 2e       	mov	r13, r21
    1ddc:	e6 2e       	mov	r14, r22
    1dde:	f7 2e       	mov	r15, r23
    1de0:	08 2f       	mov	r16, r24
    1de2:	19 2f       	mov	r17, r25
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
    1de4:	24 2d       	mov	r18, r4
    1de6:	35 2d       	mov	r19, r5
    1de8:	46 2d       	mov	r20, r6
    1dea:	57 2d       	mov	r21, r7
    1dec:	68 2d       	mov	r22, r8
    1dee:	79 2d       	mov	r23, r9
    1df0:	8b 2f       	mov	r24, r27
    1df2:	9a 2f       	mov	r25, r26
    1df4:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
    1df8:	22 8f       	std	Z+26, r18	; 0x1a
    1dfa:	33 8f       	std	Z+27, r19	; 0x1b
    1dfc:	44 8f       	std	Z+28, r20	; 0x1c
    1dfe:	55 8f       	std	Z+29, r21	; 0x1d
    1e00:	66 8f       	std	Z+30, r22	; 0x1e
    1e02:	77 8f       	std	Z+31, r23	; 0x1f
    1e04:	80 a3       	std	Z+32, r24	; 0x20
    1e06:	91 a3       	std	Z+33, r25	; 0x21
    1e08:	a6 c0       	rjmp	.+332    	; 0x1f56 <fat_open+0x5a2>
                                      (offset_t) max_root_entries * 32;
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
    1e0a:	0f 2e       	mov	r0, r31
    1e0c:	f1 ec       	ldi	r31, 0xC1	; 193
    1e0e:	8f 2e       	mov	r8, r31
    1e10:	f1 e0       	ldi	r31, 0x01	; 1
    1e12:	9f 2e       	mov	r9, r31
    1e14:	f0 2d       	mov	r31, r0
    1e16:	25 96       	adiw	r28, 0x05	; 5
    1e18:	af ac       	ldd	r10, Y+63	; 0x3f
    1e1a:	25 97       	sbiw	r28, 0x05	; 5
    1e1c:	b1 2c       	mov	r11, r1
    1e1e:	c1 2c       	mov	r12, r1
    1e20:	d1 2c       	mov	r13, r1
    1e22:	e1 2c       	mov	r14, r1
    1e24:	f1 2c       	mov	r15, r1
    1e26:	00 e0       	ldi	r16, 0x00	; 0
    1e28:	10 e0       	ldi	r17, 0x00	; 0
    1e2a:	29 a9       	ldd	r18, Y+49	; 0x31
    1e2c:	3a a9       	ldd	r19, Y+50	; 0x32
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	50 e0       	ldi	r21, 0x00	; 0
    1e32:	60 e0       	ldi	r22, 0x00	; 0
    1e34:	70 e0       	ldi	r23, 0x00	; 0
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__muldi3>
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;
    1e3e:	21 96       	adiw	r28, 0x01	; 1
    1e40:	cc ac       	ldd	r12, Y+60	; 0x3c
    1e42:	dd ac       	ldd	r13, Y+61	; 0x3d
    1e44:	ee ac       	ldd	r14, Y+62	; 0x3e
    1e46:	ff ac       	ldd	r15, Y+63	; 0x3f
    1e48:	21 97       	sbiw	r28, 0x01	; 1
    1e4a:	56 01       	movw	r10, r12
    1e4c:	67 01       	movw	r12, r14
    1e4e:	e1 2c       	mov	r14, r1
    1e50:	f1 2c       	mov	r15, r1
    1e52:	87 01       	movw	r16, r14
    1e54:	ae a2       	std	Y+38, r10	; 0x26
    1e56:	bf a2       	std	Y+39, r11	; 0x27
    1e58:	c8 a6       	std	Y+40, r12	; 0x28
    1e5a:	d9 a6       	std	Y+41, r13	; 0x29
    1e5c:	ea a6       	std	Y+42, r14	; 0x2a
    1e5e:	fb a6       	std	Y+43, r15	; 0x2b
    1e60:	0c a7       	std	Y+44, r16	; 0x2c
    1e62:	1d a7       	std	Y+45, r17	; 0x2d
    1e64:	e1 2c       	mov	r14, r1
    1e66:	f1 2c       	mov	r15, r1
    1e68:	00 e0       	ldi	r16, 0x00	; 0
    1e6a:	10 e0       	ldi	r17, 0x00	; 0
    1e6c:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__muldi3>
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
                                      header->fat_offset +
    1e70:	a7 2c       	mov	r10, r7
    1e72:	b6 2c       	mov	r11, r6
    1e74:	ce a4       	ldd	r12, Y+46	; 0x2e
    1e76:	df a4       	ldd	r13, Y+47	; 0x2f
    1e78:	e8 a8       	ldd	r14, Y+48	; 0x30
    1e7a:	fb ac       	ldd	r15, Y+59	; 0x3b
    1e7c:	02 2d       	mov	r16, r2
    1e7e:	13 2d       	mov	r17, r3
    1e80:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
                                      (offset_t) max_root_entries * 32;
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
    1e84:	d4 01       	movw	r26, r8
    1e86:	5a 96       	adiw	r26, 0x1a	; 26
    1e88:	2c 93       	st	X, r18
    1e8a:	5a 97       	sbiw	r26, 0x1a	; 26
    1e8c:	5b 96       	adiw	r26, 0x1b	; 27
    1e8e:	3c 93       	st	X, r19
    1e90:	5b 97       	sbiw	r26, 0x1b	; 27
    1e92:	5c 96       	adiw	r26, 0x1c	; 28
    1e94:	4c 93       	st	X, r20
    1e96:	5c 97       	sbiw	r26, 0x1c	; 28
    1e98:	5d 96       	adiw	r26, 0x1d	; 29
    1e9a:	5c 93       	st	X, r21
    1e9c:	5d 97       	sbiw	r26, 0x1d	; 29
    1e9e:	5e 96       	adiw	r26, 0x1e	; 30
    1ea0:	6c 93       	st	X, r22
    1ea2:	5e 97       	sbiw	r26, 0x1e	; 30
    1ea4:	5f 96       	adiw	r26, 0x1f	; 31
    1ea6:	7c 93       	st	X, r23
    1ea8:	5f 97       	sbiw	r26, 0x1f	; 31
    1eaa:	90 96       	adiw	r26, 0x20	; 32
    1eac:	8c 93       	st	X, r24
    1eae:	90 97       	sbiw	r26, 0x20	; 32
    1eb0:	91 96       	adiw	r26, 0x21	; 33
    1eb2:	9c 93       	st	X, r25
    1eb4:	91 97       	sbiw	r26, 0x21	; 33
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;

        header->root_dir_cluster = cluster_root_dir;
    1eb6:	67 96       	adiw	r28, 0x17	; 23
    1eb8:	ac ac       	ldd	r10, Y+60	; 0x3c
    1eba:	bd ac       	ldd	r11, Y+61	; 0x3d
    1ebc:	ce ac       	ldd	r12, Y+62	; 0x3e
    1ebe:	df ac       	ldd	r13, Y+63	; 0x3f
    1ec0:	67 97       	sbiw	r28, 0x17	; 23
    1ec2:	9a 96       	adiw	r26, 0x2a	; 42
    1ec4:	ad 92       	st	X+, r10
    1ec6:	bd 92       	st	X+, r11
    1ec8:	cd 92       	st	X+, r12
    1eca:	dc 92       	st	X, r13
    1ecc:	9d 97       	sbiw	r26, 0x2d	; 45
    1ece:	43 c0       	rjmp	.+134    	; 0x1f56 <fat_open+0x5a2>
       !partition->device_write_interval
#else
       0
#endif
      )
        return 0;
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	42 c0       	rjmp	.+132    	; 0x1f5a <fat_open+0x5a6>
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	3f c0       	rjmp	.+126    	; 0x1f5a <fat_open+0x5a6>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	3c c0       	rjmp	.+120    	; 0x1f5a <fat_open+0x5a6>
    1ee2:	2c 01       	movw	r4, r24
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif

    memset(fs, 0, sizeof(*fs));
    1ee4:	e1 ec       	ldi	r30, 0xC1	; 193
    1ee6:	f1 e0       	ldi	r31, 0x01	; 1
    1ee8:	82 e3       	ldi	r24, 0x32	; 50
    1eea:	df 01       	movw	r26, r30
    1eec:	1d 92       	st	X+, r1
    1eee:	8a 95       	dec	r24
    1ef0:	e9 f7       	brne	.-6      	; 0x1eec <fat_open+0x538>

    fs->partition = partition;
    1ef2:	51 82       	std	Z+1, r5	; 0x01
    1ef4:	40 82       	st	Z, r4
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    1ef6:	f2 01       	movw	r30, r4
    1ef8:	81 84       	ldd	r8, Z+9	; 0x09
    1efa:	92 84       	ldd	r9, Z+10	; 0x0a
    1efc:	a3 84       	ldd	r10, Z+11	; 0x0b
    1efe:	b4 84       	ldd	r11, Z+12	; 0x0c
    1f00:	28 2d       	mov	r18, r8
    1f02:	39 2d       	mov	r19, r9
    1f04:	4a 2d       	mov	r20, r10
    1f06:	5b 2d       	mov	r21, r11
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	70 e0       	ldi	r23, 0x00	; 0
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	09 e0       	ldi	r16, 0x09	; 9
    1f12:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__ashldi3>
    1f16:	62 2e       	mov	r6, r18
    1f18:	73 2e       	mov	r7, r19
    1f1a:	4e a3       	std	Y+38, r20	; 0x26
    1f1c:	5e a7       	std	Y+46, r21	; 0x2e
    1f1e:	6f a7       	std	Y+47, r22	; 0x2f
    1f20:	78 ab       	std	Y+48, r23	; 0x30
    1f22:	28 2e       	mov	r2, r24
    1f24:	39 2e       	mov	r3, r25
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
    1f26:	ab e0       	ldi	r26, 0x0B	; 11
    1f28:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__adddi3_s8>
    1f2c:	01 90       	ld	r0, Z+
    1f2e:	f0 81       	ld	r31, Z
    1f30:	e0 2d       	mov	r30, r0
    1f32:	0f 2e       	mov	r0, r31
    1f34:	f5 e2       	ldi	r31, 0x25	; 37
    1f36:	ef 2e       	mov	r14, r31
    1f38:	f1 2c       	mov	r15, r1
    1f3a:	f0 2d       	mov	r31, r0
    1f3c:	8e 01       	movw	r16, r28
    1f3e:	0f 5f       	subi	r16, 0xFF	; 255
    1f40:	1f 4f       	sbci	r17, 0xFF	; 255
    1f42:	09 95       	icall
    1f44:	81 11       	cpse	r24, r1
    1f46:	6d cd       	rjmp	.-1318   	; 0x1a22 <fat_open+0x6e>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
    1f48:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <fat_fs_handles+0x1>
    1f4c:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <fat_fs_handles>
#endif
        return 0;
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <fat_open+0x5a6>
    }
    
    return fs;
    1f56:	81 ec       	ldi	r24, 0xC1	; 193
    1f58:	91 e0       	ldi	r25, 0x01	; 1
}
    1f5a:	ca 5a       	subi	r28, 0xAA	; 170
    1f5c:	df 4f       	sbci	r29, 0xFF	; 255
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	ff 90       	pop	r15
    1f72:	ef 90       	pop	r14
    1f74:	df 90       	pop	r13
    1f76:	cf 90       	pop	r12
    1f78:	bf 90       	pop	r11
    1f7a:	af 90       	pop	r10
    1f7c:	9f 90       	pop	r9
    1f7e:	8f 90       	pop	r8
    1f80:	7f 90       	pop	r7
    1f82:	6f 90       	pop	r6
    1f84:	5f 90       	pop	r5
    1f86:	4f 90       	pop	r4
    1f88:	3f 90       	pop	r3
    1f8a:	2f 90       	pop	r2
    1f8c:	08 95       	ret

00001f8e <fat_close>:
 * \param[in] fs The filesystem to close.
 * \see fat_open
 */
void fat_close(struct fat_fs_struct* fs)
{
    if(!fs)
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	19 f0       	breq	.+6      	; 0x1f98 <fat_close+0xa>
        return;

#if USE_DYNAMIC_MEMORY
    free(fs);
#else
    fs->partition = 0;
    1f92:	fc 01       	movw	r30, r24
    1f94:	11 82       	std	Z+1, r1	; 0x01
    1f96:	10 82       	st	Z, r1
    1f98:	08 95       	ret

00001f9a <fat_open_file>:
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	81 f0       	breq	.+32     	; 0x1fbe <fat_open_file+0x24>
    1f9e:	61 15       	cp	r22, r1
    1fa0:	71 05       	cpc	r23, r1
    1fa2:	81 f0       	breq	.+32     	; 0x1fc4 <fat_open_file+0x2a>
    1fa4:	fb 01       	movw	r30, r22
    1fa6:	20 a1       	ldd	r18, Z+32	; 0x20
    1fa8:	24 fd       	sbrc	r18, 4
    1faa:	0f c0       	rjmp	.+30     	; 0x1fca <fat_open_file+0x30>
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
    1fac:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <fat_file_handles>
    1fb0:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <fat_file_handles+0x1>
    1fb4:	23 2b       	or	r18, r19
    1fb6:	61 f0       	breq	.+24     	; 0x1fd0 <fat_open_file+0x36>
            break;

        ++fd;
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	08 95       	ret
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
        return 0;
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	08 95       	ret
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	08 95       	ret
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	08 95       	ret
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    1fd0:	21 e3       	ldi	r18, 0x31	; 49
    1fd2:	fb 01       	movw	r30, r22
    1fd4:	a4 e8       	ldi	r26, 0x84	; 132
    1fd6:	b1 e0       	ldi	r27, 0x01	; 1
    1fd8:	01 90       	ld	r0, Z+
    1fda:	0d 92       	st	X+, r0
    1fdc:	2a 95       	dec	r18
    1fde:	e1 f7       	brne	.-8      	; 0x1fd8 <fat_open_file+0x3e>
    fd->fs = fs;
    1fe0:	a2 e8       	ldi	r26, 0x82	; 130
    1fe2:	b1 e0       	ldi	r27, 0x01	; 1
    1fe4:	11 96       	adiw	r26, 0x01	; 1
    1fe6:	9c 93       	st	X, r25
    1fe8:	8e 93       	st	-X, r24
    fd->pos = 0;
    1fea:	d3 96       	adiw	r26, 0x33	; 51
    1fec:	1c 92       	st	X, r1
    1fee:	d3 97       	sbiw	r26, 0x33	; 51
    1ff0:	d4 96       	adiw	r26, 0x34	; 52
    1ff2:	1c 92       	st	X, r1
    1ff4:	d4 97       	sbiw	r26, 0x34	; 52
    1ff6:	d5 96       	adiw	r26, 0x35	; 53
    1ff8:	1c 92       	st	X, r1
    1ffa:	d5 97       	sbiw	r26, 0x35	; 53
    1ffc:	d6 96       	adiw	r26, 0x36	; 54
    1ffe:	1c 92       	st	X, r1
    2000:	d6 97       	sbiw	r26, 0x36	; 54
    2002:	d7 96       	adiw	r26, 0x37	; 55
    2004:	1c 92       	st	X, r1
    2006:	d7 97       	sbiw	r26, 0x37	; 55
    2008:	d8 96       	adiw	r26, 0x38	; 56
    200a:	1c 92       	st	X, r1
    200c:	d8 97       	sbiw	r26, 0x38	; 56
    200e:	d9 96       	adiw	r26, 0x39	; 57
    2010:	1c 92       	st	X, r1
    2012:	d9 97       	sbiw	r26, 0x39	; 57
    2014:	da 96       	adiw	r26, 0x3a	; 58
    2016:	1c 92       	st	X, r1
    2018:	da 97       	sbiw	r26, 0x3a	; 58
    fd->pos_cluster = dir_entry->cluster;
    201a:	fb 01       	movw	r30, r22
    201c:	41 a1       	ldd	r20, Z+33	; 0x21
    201e:	52 a1       	ldd	r21, Z+34	; 0x22
    2020:	63 a1       	ldd	r22, Z+35	; 0x23
    2022:	74 a1       	ldd	r23, Z+36	; 0x24
    2024:	db 96       	adiw	r26, 0x3b	; 59
    2026:	4d 93       	st	X+, r20
    2028:	5d 93       	st	X+, r21
    202a:	6d 93       	st	X+, r22
    202c:	7c 93       	st	X, r23
    202e:	de 97       	sbiw	r26, 0x3e	; 62

    return fd;
    2030:	cd 01       	movw	r24, r26
}
    2032:	08 95       	ret

00002034 <fat_close_file>:
 * \param[in] fd The file handle of the file to close.
 * \see fat_open_file
 */
void fat_close_file(struct fat_file_struct* fd)
{
    if(fd)
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	19 f0       	breq	.+6      	; 0x203e <fat_close_file+0xa>
#endif

#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
    2038:	fc 01       	movw	r30, r24
    203a:	11 82       	std	Z+1, r1	; 0x01
    203c:	10 82       	st	Z, r1
    203e:	08 95       	ret

00002040 <fat_read_file>:
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
    2040:	2f 92       	push	r2
    2042:	3f 92       	push	r3
    2044:	4f 92       	push	r4
    2046:	5f 92       	push	r5
    2048:	6f 92       	push	r6
    204a:	7f 92       	push	r7
    204c:	8f 92       	push	r8
    204e:	9f 92       	push	r9
    2050:	af 92       	push	r10
    2052:	bf 92       	push	r11
    2054:	cf 92       	push	r12
    2056:	df 92       	push	r13
    2058:	ef 92       	push	r14
    205a:	ff 92       	push	r15
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	67 97       	sbiw	r28, 0x17	; 23
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	de bf       	out	0x3e, r29	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	cd bf       	out	0x3d, r28	; 61
    2074:	9f 8b       	std	Y+23, r25	; 0x17
    2076:	8e 8b       	std	Y+22, r24	; 0x16
    2078:	7a 8b       	std	Y+18, r23	; 0x12
    207a:	69 8b       	std	Y+17, r22	; 0x11
    207c:	5d 8b       	std	Y+21, r21	; 0x15
    207e:	4c 8b       	std	Y+20, r20	; 0x14
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	09 f4       	brne	.+2      	; 0x2086 <fat_read_file+0x46>
    2084:	68 c1       	rjmp	.+720    	; 0x2356 <fat_read_file+0x316>
    2086:	67 2b       	or	r22, r23
    2088:	09 f4       	brne	.+2      	; 0x208c <fat_read_file+0x4c>
    208a:	68 c1       	rjmp	.+720    	; 0x235c <fat_read_file+0x31c>
    208c:	41 15       	cp	r20, r1
    208e:	51 05       	cpc	r21, r1
    2090:	09 f4       	brne	.+2      	; 0x2094 <fat_read_file+0x54>
    2092:	67 c1       	rjmp	.+718    	; 0x2362 <fat_read_file+0x322>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
    2094:	dc 01       	movw	r26, r24
    2096:	d3 96       	adiw	r26, 0x33	; 51
    2098:	bc 91       	ld	r27, X
    209a:	b9 83       	std	Y+1, r27	; 0x01
    209c:	fc 01       	movw	r30, r24
    209e:	f4 a9       	ldd	r31, Z+52	; 0x34
    20a0:	fa 83       	std	Y+2, r31	; 0x02
    20a2:	dc 01       	movw	r26, r24
    20a4:	d5 96       	adiw	r26, 0x35	; 53
    20a6:	bc 91       	ld	r27, X
    20a8:	bb 83       	std	Y+3, r27	; 0x03
    20aa:	fc 01       	movw	r30, r24
    20ac:	f6 a9       	ldd	r31, Z+54	; 0x36
    20ae:	fc 83       	std	Y+4, r31	; 0x04
    20b0:	dc 01       	movw	r26, r24
    20b2:	d7 96       	adiw	r26, 0x37	; 55
    20b4:	bc 91       	ld	r27, X
    20b6:	bd 83       	std	Y+5, r27	; 0x05
    20b8:	fc 01       	movw	r30, r24
    20ba:	f0 ad       	ldd	r31, Z+56	; 0x38
    20bc:	fe 83       	std	Y+6, r31	; 0x06
    20be:	dc 01       	movw	r26, r24
    20c0:	d9 96       	adiw	r26, 0x39	; 57
    20c2:	bc 91       	ld	r27, X
    20c4:	bf 83       	std	Y+7, r27	; 0x07
    20c6:	fc 01       	movw	r30, r24
    20c8:	f2 ad       	ldd	r31, Z+58	; 0x3a
    20ca:	f8 87       	std	Y+8, r31	; 0x08
    20cc:	dc 01       	movw	r26, r24
    20ce:	97 96       	adiw	r26, 0x27	; 39
    20d0:	4d 90       	ld	r4, X+
    20d2:	5d 90       	ld	r5, X+
    20d4:	6d 90       	ld	r6, X+
    20d6:	7c 90       	ld	r7, X
    20d8:	9a 97       	sbiw	r26, 0x2a	; 42
    20da:	4a 01       	movw	r8, r20
    20dc:	24 2f       	mov	r18, r20
    20de:	39 2d       	mov	r19, r9
    20e0:	40 e0       	ldi	r20, 0x00	; 0
    20e2:	50 e0       	ldi	r21, 0x00	; 0
    20e4:	60 e0       	ldi	r22, 0x00	; 0
    20e6:	70 e0       	ldi	r23, 0x00	; 0
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	a9 80       	ldd	r10, Y+1	; 0x01
    20ee:	ba 80       	ldd	r11, Y+2	; 0x02
    20f0:	cb 80       	ldd	r12, Y+3	; 0x03
    20f2:	dc 80       	ldd	r13, Y+4	; 0x04
    20f4:	ed 80       	ldd	r14, Y+5	; 0x05
    20f6:	fe 80       	ldd	r15, Y+6	; 0x06
    20f8:	0f 81       	ldd	r16, Y+7	; 0x07
    20fa:	18 85       	ldd	r17, Y+8	; 0x08
    20fc:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
    2100:	63 01       	movw	r12, r6
    2102:	52 01       	movw	r10, r4
    2104:	e1 2c       	mov	r14, r1
    2106:	f1 2c       	mov	r15, r1
    2108:	87 01       	movw	r16, r14
    210a:	49 86       	std	Y+9, r4	; 0x09
    210c:	ba 86       	std	Y+10, r11	; 0x0a
    210e:	cb 86       	std	Y+11, r12	; 0x0b
    2110:	dc 86       	std	Y+12, r13	; 0x0c
    2112:	ed 86       	std	Y+13, r14	; 0x0d
    2114:	fe 86       	std	Y+14, r15	; 0x0e
    2116:	0f 87       	std	Y+15, r16	; 0x0f
    2118:	18 8b       	std	Y+16, r17	; 0x10
    211a:	e1 2c       	mov	r14, r1
    211c:	f1 2c       	mov	r15, r1
    211e:	00 e0       	ldi	r16, 0x00	; 0
    2120:	10 e0       	ldi	r17, 0x00	; 0
    2122:	0e 94 a0 2c 	call	0x5940	; 0x5940 <__cmpdi2>
    2126:	59 f0       	breq	.+22     	; 0x213e <fat_read_file+0xfe>
    2128:	50 f0       	brcs	.+20     	; 0x213e <fat_read_file+0xfe>
        buffer_len = fd->dir_entry.file_size - fd->pos;
    212a:	62 01       	movw	r12, r4
    212c:	e9 80       	ldd	r14, Y+1	; 0x01
    212e:	fa 80       	ldd	r15, Y+2	; 0x02
    2130:	ce 18       	sub	r12, r14
    2132:	df 08       	sbc	r13, r15
    2134:	dd 8a       	std	Y+21, r13	; 0x15
    2136:	cc 8a       	std	Y+20, r12	; 0x14
    if(buffer_len == 0)
    2138:	cd 28       	or	r12, r13
    213a:	09 f4       	brne	.+2      	; 0x213e <fat_read_file+0xfe>
    213c:	15 c1       	rjmp	.+554    	; 0x2368 <fat_read_file+0x328>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    213e:	ae 89       	ldd	r26, Y+22	; 0x16
    2140:	bf 89       	ldd	r27, Y+23	; 0x17
    2142:	ed 91       	ld	r30, X+
    2144:	fc 91       	ld	r31, X
    2146:	11 97       	sbiw	r26, 0x01	; 1
    2148:	a0 8c       	ldd	r10, Z+24	; 0x18
    214a:	b1 8c       	ldd	r11, Z+25	; 0x19
    214c:	ba 86       	std	Y+10, r11	; 0x0a
    214e:	a9 86       	std	Y+9, r10	; 0x09
    cluster_t cluster_num = fd->pos_cluster;
    2150:	db 96       	adiw	r26, 0x3b	; 59
    2152:	4d 90       	ld	r4, X+
    2154:	5d 90       	ld	r5, X+
    2156:	6d 90       	ld	r6, X+
    2158:	7c 90       	ld	r7, X
    215a:	de 97       	sbiw	r26, 0x3e	; 62
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
    215c:	41 14       	cp	r4, r1
    215e:	51 04       	cpc	r5, r1
    2160:	61 04       	cpc	r6, r1
    2162:	71 04       	cpc	r7, r1
    2164:	09 f0       	breq	.+2      	; 0x2168 <fat_read_file+0x128>
    2166:	54 c0       	rjmp	.+168    	; 0x2210 <fat_read_file+0x1d0>
    {
        cluster_num = fd->dir_entry.cluster;
    2168:	93 96       	adiw	r26, 0x23	; 35
    216a:	4d 90       	ld	r4, X+
    216c:	5d 90       	ld	r5, X+
    216e:	6d 90       	ld	r6, X+
    2170:	7c 90       	ld	r7, X
    2172:	96 97       	sbiw	r26, 0x26	; 38
        
        if(!cluster_num)
    2174:	41 14       	cp	r4, r1
    2176:	51 04       	cpc	r5, r1
    2178:	61 04       	cpc	r6, r1
    217a:	71 04       	cpc	r7, r1
    217c:	a9 f4       	brne	.+42     	; 0x21a8 <fat_read_file+0x168>
        {
            if(!fd->pos)
    217e:	e1 e0       	ldi	r30, 0x01	; 1
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	29 81       	ldd	r18, Y+1	; 0x01
    2184:	3a 81       	ldd	r19, Y+2	; 0x02
    2186:	4b 81       	ldd	r20, Y+3	; 0x03
    2188:	5c 81       	ldd	r21, Y+4	; 0x04
    218a:	6d 81       	ldd	r22, Y+5	; 0x05
    218c:	7e 81       	ldd	r23, Y+6	; 0x06
    218e:	8f 81       	ldd	r24, Y+7	; 0x07
    2190:	98 85       	ldd	r25, Y+8	; 0x08
    2192:	a0 e0       	ldi	r26, 0x00	; 0
    2194:	0e 94 a9 2c 	call	0x5952	; 0x5952 <__cmpdi2_s8>
    2198:	11 f4       	brne	.+4      	; 0x219e <fat_read_file+0x15e>
    219a:	e0 e0       	ldi	r30, 0x00	; 0
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	88 27       	eor	r24, r24
    21a0:	99 27       	eor	r25, r25
    21a2:	8e 1b       	sub	r24, r30
    21a4:	9f 0b       	sbc	r25, r31
    21a6:	e5 c0       	rjmp	.+458    	; 0x2372 <fat_read_file+0x332>
                return 0;
            else
                return -1;
        }

        if(fd->pos)
    21a8:	29 81       	ldd	r18, Y+1	; 0x01
    21aa:	3a 81       	ldd	r19, Y+2	; 0x02
    21ac:	4b 81       	ldd	r20, Y+3	; 0x03
    21ae:	5c 81       	ldd	r21, Y+4	; 0x04
    21b0:	6d 81       	ldd	r22, Y+5	; 0x05
    21b2:	7e 81       	ldd	r23, Y+6	; 0x06
    21b4:	8f 81       	ldd	r24, Y+7	; 0x07
    21b6:	98 85       	ldd	r25, Y+8	; 0x08
    21b8:	a0 e0       	ldi	r26, 0x00	; 0
    21ba:	0e 94 a9 2c 	call	0x5952	; 0x5952 <__cmpdi2_s8>
    21be:	41 f1       	breq	.+80     	; 0x2210 <fat_read_file+0x1d0>
        {
            uint32_t pos = fd->pos;
    21c0:	c9 80       	ldd	r12, Y+1	; 0x01
    21c2:	da 80       	ldd	r13, Y+2	; 0x02
    21c4:	eb 80       	ldd	r14, Y+3	; 0x03
    21c6:	fc 80       	ldd	r15, Y+4	; 0x04
            while(pos >= cluster_size)
    21c8:	09 85       	ldd	r16, Y+9	; 0x09
    21ca:	1a 85       	ldd	r17, Y+10	; 0x0a
    21cc:	48 01       	movw	r8, r16
    21ce:	a1 2c       	mov	r10, r1
    21d0:	b1 2c       	mov	r11, r1
    21d2:	b3 01       	movw	r22, r6
    21d4:	a2 01       	movw	r20, r4
    21d6:	0e 89       	ldd	r16, Y+22	; 0x16
    21d8:	1f 89       	ldd	r17, Y+23	; 0x17
    21da:	11 c0       	rjmp	.+34     	; 0x21fe <fat_read_file+0x1be>
    21dc:	c8 18       	sub	r12, r8
    21de:	d9 08       	sbc	r13, r9
    21e0:	ea 08       	sbc	r14, r10
    21e2:	fb 08       	sbc	r15, r11
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
    21e4:	d8 01       	movw	r26, r16
    21e6:	8d 91       	ld	r24, X+
    21e8:	9c 91       	ld	r25, X
    21ea:	0e 94 9c 01 	call	0x338	; 0x338 <fat_get_next_cluster>
    21ee:	ab 01       	movw	r20, r22
    21f0:	bc 01       	movw	r22, r24
                if(!cluster_num)
    21f2:	41 15       	cp	r20, r1
    21f4:	51 05       	cpc	r21, r1
    21f6:	61 05       	cpc	r22, r1
    21f8:	71 05       	cpc	r23, r1
    21fa:	09 f4       	brne	.+2      	; 0x21fe <fat_read_file+0x1be>
    21fc:	b8 c0       	rjmp	.+368    	; 0x236e <fat_read_file+0x32e>
        }

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
    21fe:	c8 14       	cp	r12, r8
    2200:	d9 04       	cpc	r13, r9
    2202:	ea 04       	cpc	r14, r10
    2204:	fb 04       	cpc	r15, r11
    2206:	50 f7       	brcc	.-44     	; 0x21dc <fat_read_file+0x19c>
    2208:	2a 01       	movw	r4, r20
    220a:	3b 01       	movw	r6, r22
    220c:	1f 8b       	std	Y+23, r17	; 0x17
    220e:	0e 8b       	std	Y+22, r16	; 0x16
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    2210:	89 85       	ldd	r24, Y+9	; 0x09
    2212:	9a 85       	ldd	r25, Y+10	; 0x0a
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	09 81       	ldd	r16, Y+1	; 0x01
    2218:	1a 81       	ldd	r17, Y+2	; 0x02
    221a:	08 23       	and	r16, r24
    221c:	19 23       	and	r17, r25
    221e:	2c 88       	ldd	r2, Y+20	; 0x14
    2220:	3d 88       	ldd	r3, Y+21	; 0x15
        if(first_cluster_offset + copy_length >= cluster_size)
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
            {
                first_cluster_offset = 0;
    2222:	49 82       	std	Y+1, r4	; 0x01
    2224:	5a 82       	std	Y+2, r5	; 0x02
    2226:	6b 82       	std	Y+3, r6	; 0x03
    2228:	7c 82       	std	Y+4, r7	; 0x04
    222a:	38 01       	movw	r6, r16
    222c:	49 88       	ldd	r4, Y+17	; 0x11
    222e:	5a 88       	ldd	r5, Y+18	; 0x12
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    2230:	ae 89       	ldd	r26, Y+22	; 0x16
    2232:	bf 89       	ldd	r27, Y+23	; 0x17
    2234:	0d 91       	ld	r16, X+
    2236:	1c 91       	ld	r17, X
    2238:	49 81       	ldd	r20, Y+1	; 0x01
    223a:	5a 81       	ldd	r21, Y+2	; 0x02
    223c:	6b 81       	ldd	r22, Y+3	; 0x03
    223e:	7c 81       	ldd	r23, Y+4	; 0x04
    2240:	c8 01       	movw	r24, r16
    2242:	0e 94 97 06 	call	0xd2e	; 0xd2e <fat_cluster_offset>
    2246:	a2 2e       	mov	r10, r18
    2248:	b3 2e       	mov	r11, r19
    224a:	c4 2e       	mov	r12, r20
    224c:	d5 2e       	mov	r13, r21
    224e:	e6 2e       	mov	r14, r22
    2250:	f7 2e       	mov	r15, r23
    2252:	89 8b       	std	Y+17, r24	; 0x11
    2254:	9b 8b       	std	Y+19, r25	; 0x13
    2256:	89 84       	ldd	r8, Y+9	; 0x09
    2258:	9a 84       	ldd	r9, Y+10	; 0x0a
    225a:	86 18       	sub	r8, r6
    225c:	97 08       	sbc	r9, r7
    225e:	28 14       	cp	r2, r8
    2260:	39 04       	cpc	r3, r9
    2262:	08 f4       	brcc	.+2      	; 0x2266 <fat_read_file+0x226>
    2264:	41 01       	movw	r8, r2
        uint16_t copy_length = cluster_size - first_cluster_offset;
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
    2266:	d8 01       	movw	r26, r16
    2268:	ed 91       	ld	r30, X+
    226a:	fc 91       	ld	r31, X
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    226c:	a3 01       	movw	r20, r6
    226e:	26 2d       	mov	r18, r6
    2270:	35 2f       	mov	r19, r21
    2272:	40 e0       	ldi	r20, 0x00	; 0
    2274:	50 e0       	ldi	r21, 0x00	; 0
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	70 e0       	ldi	r23, 0x00	; 0
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	09 89       	ldd	r16, Y+17	; 0x11
    2280:	1b 89       	ldd	r17, Y+19	; 0x13
    2282:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
        uint16_t copy_length = cluster_size - first_cluster_offset;
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
    2286:	01 90       	ld	r0, Z+
    2288:	f0 81       	ld	r31, Z
    228a:	e0 2d       	mov	r30, r0
    228c:	74 01       	movw	r14, r8
    228e:	82 01       	movw	r16, r4
    2290:	09 95       	icall
    2292:	81 11       	cpse	r24, r1
    2294:	05 c0       	rjmp	.+10     	; 0x22a0 <fat_read_file+0x260>
            return buffer_len - buffer_left;
    2296:	8c 89       	ldd	r24, Y+20	; 0x14
    2298:	9d 89       	ldd	r25, Y+21	; 0x15
    229a:	82 19       	sub	r24, r2
    229c:	93 09       	sbc	r25, r3
    229e:	69 c0       	rjmp	.+210    	; 0x2372 <fat_read_file+0x332>

        /* calculate new file position */
        buffer += copy_length;
    22a0:	48 0c       	add	r4, r8
    22a2:	59 1c       	adc	r5, r9
        buffer_left -= copy_length;
    22a4:	28 18       	sub	r2, r8
    22a6:	39 08       	sbc	r3, r9
        fd->pos += copy_length;
    22a8:	a4 01       	movw	r20, r8
    22aa:	28 2d       	mov	r18, r8
    22ac:	35 2f       	mov	r19, r21
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	ee 89       	ldd	r30, Y+22	; 0x16
    22bc:	ff 89       	ldd	r31, Y+23	; 0x17
    22be:	a3 a8       	ldd	r10, Z+51	; 0x33
    22c0:	b4 a8       	ldd	r11, Z+52	; 0x34
    22c2:	c5 a8       	ldd	r12, Z+53	; 0x35
    22c4:	d6 a8       	ldd	r13, Z+54	; 0x36
    22c6:	e7 a8       	ldd	r14, Z+55	; 0x37
    22c8:	f0 ac       	ldd	r15, Z+56	; 0x38
    22ca:	01 ad       	ldd	r16, Z+57	; 0x39
    22cc:	12 ad       	ldd	r17, Z+58	; 0x3a
    22ce:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
    22d2:	23 ab       	std	Z+51, r18	; 0x33
    22d4:	34 ab       	std	Z+52, r19	; 0x34
    22d6:	45 ab       	std	Z+53, r20	; 0x35
    22d8:	56 ab       	std	Z+54, r21	; 0x36
    22da:	67 ab       	std	Z+55, r22	; 0x37
    22dc:	70 af       	std	Z+56, r23	; 0x38
    22de:	81 af       	std	Z+57, r24	; 0x39
    22e0:	92 af       	std	Z+58, r25	; 0x3a

        if(first_cluster_offset + copy_length >= cluster_size)
    22e2:	86 0c       	add	r8, r6
    22e4:	97 1c       	adc	r9, r7
    22e6:	a9 84       	ldd	r10, Y+9	; 0x09
    22e8:	ba 84       	ldd	r11, Y+10	; 0x0a
    22ea:	8a 14       	cp	r8, r10
    22ec:	9b 04       	cpc	r9, r11
    22ee:	00 f1       	brcs	.+64     	; 0x2330 <fat_read_file+0x2f0>
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
    22f0:	49 81       	ldd	r20, Y+1	; 0x01
    22f2:	5a 81       	ldd	r21, Y+2	; 0x02
    22f4:	6b 81       	ldd	r22, Y+3	; 0x03
    22f6:	7c 81       	ldd	r23, Y+4	; 0x04
    22f8:	80 81       	ld	r24, Z
    22fa:	91 81       	ldd	r25, Z+1	; 0x01
    22fc:	0e 94 9c 01 	call	0x338	; 0x338 <fat_get_next_cluster>
    2300:	69 83       	std	Y+1, r22	; 0x01
    2302:	7a 83       	std	Y+2, r23	; 0x02
    2304:	8b 83       	std	Y+3, r24	; 0x03
    2306:	9c 83       	std	Y+4, r25	; 0x04
    2308:	67 2b       	or	r22, r23
    230a:	68 2b       	or	r22, r24
    230c:	69 2b       	or	r22, r25
    230e:	71 f4       	brne	.+28     	; 0x232c <fat_read_file+0x2ec>
    2310:	ce 88       	ldd	r12, Y+22	; 0x16
    2312:	df 88       	ldd	r13, Y+23	; 0x17
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
    2314:	d6 01       	movw	r26, r12
    2316:	db 96       	adiw	r26, 0x3b	; 59
    2318:	1d 92       	st	X+, r1
    231a:	1d 92       	st	X+, r1
    231c:	1d 92       	st	X+, r1
    231e:	1c 92       	st	X, r1
    2320:	de 97       	sbiw	r26, 0x3e	; 62
                return buffer_len - buffer_left;
    2322:	8c 89       	ldd	r24, Y+20	; 0x14
    2324:	9d 89       	ldd	r25, Y+21	; 0x15
    2326:	82 19       	sub	r24, r2
    2328:	93 09       	sbc	r25, r3
    232a:	23 c0       	rjmp	.+70     	; 0x2372 <fat_read_file+0x332>
        if(first_cluster_offset + copy_length >= cluster_size)
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
            {
                first_cluster_offset = 0;
    232c:	61 2c       	mov	r6, r1
    232e:	71 2c       	mov	r7, r1
                fd->pos_cluster = 0;
                return buffer_len - buffer_left;
            }
        }

        fd->pos_cluster = cluster_num;
    2330:	a9 80       	ldd	r10, Y+1	; 0x01
    2332:	ba 80       	ldd	r11, Y+2	; 0x02
    2334:	cb 80       	ldd	r12, Y+3	; 0x03
    2336:	dc 80       	ldd	r13, Y+4	; 0x04
    2338:	ae 89       	ldd	r26, Y+22	; 0x16
    233a:	bf 89       	ldd	r27, Y+23	; 0x17
    233c:	db 96       	adiw	r26, 0x3b	; 59
    233e:	ad 92       	st	X+, r10
    2340:	bd 92       	st	X+, r11
    2342:	cd 92       	st	X+, r12
    2344:	dc 92       	st	X, r13
    2346:	de 97       	sbiw	r26, 0x3e	; 62

    } while(buffer_left > 0); /* check if we are done */
    2348:	21 14       	cp	r2, r1
    234a:	31 04       	cpc	r3, r1
    234c:	09 f0       	breq	.+2      	; 0x2350 <fat_read_file+0x310>
    234e:	70 cf       	rjmp	.-288    	; 0x2230 <fat_read_file+0x1f0>

    return buffer_len;
    2350:	8c 89       	ldd	r24, Y+20	; 0x14
    2352:	9d 89       	ldd	r25, Y+21	; 0x15
    2354:	0e c0       	rjmp	.+28     	; 0x2372 <fat_read_file+0x332>
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
        return -1;
    2356:	8f ef       	ldi	r24, 0xFF	; 255
    2358:	9f ef       	ldi	r25, 0xFF	; 255
    235a:	0b c0       	rjmp	.+22     	; 0x2372 <fat_read_file+0x332>
    235c:	8f ef       	ldi	r24, 0xFF	; 255
    235e:	9f ef       	ldi	r25, 0xFF	; 255
    2360:	08 c0       	rjmp	.+16     	; 0x2372 <fat_read_file+0x332>
    2362:	8f ef       	ldi	r24, 0xFF	; 255
    2364:	9f ef       	ldi	r25, 0xFF	; 255
    2366:	05 c0       	rjmp	.+10     	; 0x2372 <fat_read_file+0x332>

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
        buffer_len = fd->dir_entry.file_size - fd->pos;
    if(buffer_len == 0)
        return 0;
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <fat_read_file+0x332>
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
                    return -1;
    236e:	8f ef       	ldi	r24, 0xFF	; 255
    2370:	9f ef       	ldi	r25, 0xFF	; 255
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
}
    2372:	67 96       	adiw	r28, 0x17	; 23
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	df 91       	pop	r29
    2380:	cf 91       	pop	r28
    2382:	1f 91       	pop	r17
    2384:	0f 91       	pop	r16
    2386:	ff 90       	pop	r15
    2388:	ef 90       	pop	r14
    238a:	df 90       	pop	r13
    238c:	cf 90       	pop	r12
    238e:	bf 90       	pop	r11
    2390:	af 90       	pop	r10
    2392:	9f 90       	pop	r9
    2394:	8f 90       	pop	r8
    2396:	7f 90       	pop	r7
    2398:	6f 90       	pop	r6
    239a:	5f 90       	pop	r5
    239c:	4f 90       	pop	r4
    239e:	3f 90       	pop	r3
    23a0:	2f 90       	pop	r2
    23a2:	08 95       	ret

000023a4 <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written (0 or something less than \c buffer_len on disk full) or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    23a4:	2f 92       	push	r2
    23a6:	3f 92       	push	r3
    23a8:	4f 92       	push	r4
    23aa:	5f 92       	push	r5
    23ac:	6f 92       	push	r6
    23ae:	7f 92       	push	r7
    23b0:	8f 92       	push	r8
    23b2:	9f 92       	push	r9
    23b4:	af 92       	push	r10
    23b6:	bf 92       	push	r11
    23b8:	cf 92       	push	r12
    23ba:	df 92       	push	r13
    23bc:	ef 92       	push	r14
    23be:	ff 92       	push	r15
    23c0:	0f 93       	push	r16
    23c2:	1f 93       	push	r17
    23c4:	cf 93       	push	r28
    23c6:	df 93       	push	r29
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	6b 97       	sbiw	r28, 0x1b	; 27
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	f8 94       	cli
    23d2:	de bf       	out	0x3e, r29	; 62
    23d4:	0f be       	out	0x3f, r0	; 63
    23d6:	cd bf       	out	0x3d, r28	; 61
    23d8:	99 8f       	std	Y+25, r25	; 0x19
    23da:	88 8f       	std	Y+24, r24	; 0x18
    23dc:	7a 8b       	std	Y+18, r23	; 0x12
    23de:	69 8b       	std	Y+17, r22	; 0x11
    23e0:	5f 8b       	std	Y+23, r21	; 0x17
    23e2:	4e 8b       	std	Y+22, r20	; 0x16
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    23e4:	00 97       	sbiw	r24, 0x00	; 0
    23e6:	09 f4       	brne	.+2      	; 0x23ea <fat_write_file+0x46>
    23e8:	03 c2       	rjmp	.+1030   	; 0x27f0 <fat_write_file+0x44c>
    23ea:	67 2b       	or	r22, r23
    23ec:	09 f4       	brne	.+2      	; 0x23f0 <fat_write_file+0x4c>
    23ee:	03 c2       	rjmp	.+1030   	; 0x27f6 <fat_write_file+0x452>
    23f0:	45 2b       	or	r20, r21
    23f2:	09 f4       	brne	.+2      	; 0x23f6 <fat_write_file+0x52>
    23f4:	03 c2       	rjmp	.+1030   	; 0x27fc <fat_write_file+0x458>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    23f6:	dc 01       	movw	r26, r24
    23f8:	d3 96       	adiw	r26, 0x33	; 51
    23fa:	bc 91       	ld	r27, X
    23fc:	b9 87       	std	Y+9, r27	; 0x09
    23fe:	fc 01       	movw	r30, r24
    2400:	f4 a9       	ldd	r31, Z+52	; 0x34
    2402:	fa 87       	std	Y+10, r31	; 0x0a
    2404:	dc 01       	movw	r26, r24
    2406:	d5 96       	adiw	r26, 0x35	; 53
    2408:	bc 91       	ld	r27, X
    240a:	bb 87       	std	Y+11, r27	; 0x0b
    240c:	fc 01       	movw	r30, r24
    240e:	f6 a9       	ldd	r31, Z+54	; 0x36
    2410:	fc 87       	std	Y+12, r31	; 0x0c
    2412:	dc 01       	movw	r26, r24
    2414:	d7 96       	adiw	r26, 0x37	; 55
    2416:	bc 91       	ld	r27, X
    2418:	bd 87       	std	Y+13, r27	; 0x0d
    241a:	fc 01       	movw	r30, r24
    241c:	f0 ad       	ldd	r31, Z+56	; 0x38
    241e:	fe 87       	std	Y+14, r31	; 0x0e
    2420:	dc 01       	movw	r26, r24
    2422:	d9 96       	adiw	r26, 0x39	; 57
    2424:	bc 91       	ld	r27, X
    2426:	bf 87       	std	Y+15, r27	; 0x0f
    2428:	fc 01       	movw	r30, r24
    242a:	f2 ad       	ldd	r31, Z+58	; 0x3a
    242c:	f8 8b       	std	Y+16, r31	; 0x10
    242e:	fc 01       	movw	r30, r24
    2430:	87 a1       	ldd	r24, Z+39	; 0x27
    2432:	90 a5       	ldd	r25, Z+40	; 0x28
    2434:	a1 a5       	ldd	r26, Z+41	; 0x29
    2436:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2438:	1c 01       	movw	r2, r24
    243a:	2d 01       	movw	r4, r26
    243c:	29 85       	ldd	r18, Y+9	; 0x09
    243e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2440:	4b 85       	ldd	r20, Y+11	; 0x0b
    2442:	5c 85       	ldd	r21, Y+12	; 0x0c
    2444:	6d 85       	ldd	r22, Y+13	; 0x0d
    2446:	7e 85       	ldd	r23, Y+14	; 0x0e
    2448:	8f 85       	ldd	r24, Y+15	; 0x0f
    244a:	98 89       	ldd	r25, Y+16	; 0x10
    244c:	a2 2c       	mov	r10, r2
    244e:	b3 2c       	mov	r11, r3
    2450:	c4 2c       	mov	r12, r4
    2452:	d5 2c       	mov	r13, r5
    2454:	e1 2c       	mov	r14, r1
    2456:	f1 2c       	mov	r15, r1
    2458:	00 e0       	ldi	r16, 0x00	; 0
    245a:	10 e0       	ldi	r17, 0x00	; 0
    245c:	0e 94 a0 2c 	call	0x5940	; 0x5940 <__cmpdi2>
    2460:	11 f0       	breq	.+4      	; 0x2466 <fat_write_file+0xc2>
    2462:	08 f0       	brcs	.+2      	; 0x2466 <fat_write_file+0xc2>
    2464:	ce c1       	rjmp	.+924    	; 0x2802 <fat_write_file+0x45e>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    2466:	01 90       	ld	r0, Z+
    2468:	f0 81       	ld	r31, Z
    246a:	e0 2d       	mov	r30, r0
    246c:	e0 8c       	ldd	r14, Z+24	; 0x18
    246e:	f1 8c       	ldd	r15, Z+25	; 0x19
    2470:	fc 8a       	std	Y+20, r15	; 0x14
    2472:	eb 8a       	std	Y+19, r14	; 0x13
    cluster_t cluster_num = fd->pos_cluster;
    2474:	a8 8d       	ldd	r26, Y+24	; 0x18
    2476:	b9 8d       	ldd	r27, Y+25	; 0x19
    2478:	db 96       	adiw	r26, 0x3b	; 59
    247a:	4d 90       	ld	r4, X+
    247c:	5d 90       	ld	r5, X+
    247e:	6d 90       	ld	r6, X+
    2480:	7c 90       	ld	r7, X
    2482:	de 97       	sbiw	r26, 0x3e	; 62
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    2484:	c7 01       	movw	r24, r14
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	e9 84       	ldd	r14, Y+9	; 0x09
    248a:	fa 84       	ldd	r15, Y+10	; 0x0a
    248c:	e8 22       	and	r14, r24
    248e:	f9 22       	and	r15, r25
    2490:	fa 82       	std	Y+2, r15	; 0x02
    2492:	e9 82       	std	Y+1, r14	; 0x01

    /* find cluster in which to start writing */
    if(!cluster_num)
    2494:	41 14       	cp	r4, r1
    2496:	51 04       	cpc	r5, r1
    2498:	61 04       	cpc	r6, r1
    249a:	71 04       	cpc	r7, r1
    249c:	09 f0       	breq	.+2      	; 0x24a0 <fat_write_file+0xfc>
    249e:	77 c0       	rjmp	.+238    	; 0x258e <fat_write_file+0x1ea>
    {
        cluster_num = fd->dir_entry.cluster;
    24a0:	93 96       	adiw	r26, 0x23	; 35
    24a2:	4d 90       	ld	r4, X+
    24a4:	5d 90       	ld	r5, X+
    24a6:	6d 90       	ld	r6, X+
    24a8:	7c 90       	ld	r7, X
    24aa:	96 97       	sbiw	r26, 0x26	; 38
        
        if(!cluster_num)
    24ac:	41 14       	cp	r4, r1
    24ae:	51 04       	cpc	r5, r1
    24b0:	61 04       	cpc	r6, r1
    24b2:	71 04       	cpc	r7, r1
    24b4:	01 f5       	brne	.+64     	; 0x24f6 <fat_write_file+0x152>
        {
            if(!fd->pos)
    24b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24b8:	98 89       	ldd	r25, Y+16	; 0x10
    24ba:	a0 e0       	ldi	r26, 0x00	; 0
    24bc:	0e 94 a9 2c 	call	0x5952	; 0x5952 <__cmpdi2_s8>
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <fat_write_file+0x120>
    24c2:	a2 c1       	rjmp	.+836    	; 0x2808 <fat_write_file+0x464>
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    24c4:	01 e0       	ldi	r16, 0x01	; 1
    24c6:	10 e0       	ldi	r17, 0x00	; 0
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e0       	ldi	r20, 0x00	; 0
    24ce:	50 e0       	ldi	r21, 0x00	; 0
    24d0:	ba 01       	movw	r22, r20
    24d2:	cf 01       	movw	r24, r30
    24d4:	0e 94 19 04 	call	0x832	; 0x832 <fat_append_clusters>
    24d8:	2b 01       	movw	r4, r22
    24da:	3c 01       	movw	r6, r24
    24dc:	a8 8d       	ldd	r26, Y+24	; 0x18
    24de:	b9 8d       	ldd	r27, Y+25	; 0x19
    24e0:	93 96       	adiw	r26, 0x23	; 35
    24e2:	6d 93       	st	X+, r22
    24e4:	7d 93       	st	X+, r23
    24e6:	8d 93       	st	X+, r24
    24e8:	9c 93       	st	X, r25
    24ea:	96 97       	sbiw	r26, 0x26	; 38
                if(!cluster_num)
    24ec:	67 2b       	or	r22, r23
    24ee:	68 2b       	or	r22, r24
    24f0:	69 2b       	or	r22, r25
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <fat_write_file+0x152>
    24f4:	8c c1       	rjmp	.+792    	; 0x280e <fat_write_file+0x46a>
            {
                return -1;
            }
        }

        if(fd->pos)
    24f6:	e8 8d       	ldd	r30, Y+24	; 0x18
    24f8:	f9 8d       	ldd	r31, Y+25	; 0x19
    24fa:	13 a9       	ldd	r17, Z+51	; 0x33
    24fc:	b4 a9       	ldd	r27, Z+52	; 0x34
    24fe:	05 a9       	ldd	r16, Z+53	; 0x35
    2500:	f6 a8       	ldd	r15, Z+54	; 0x36
    2502:	67 a9       	ldd	r22, Z+55	; 0x37
    2504:	70 ad       	ldd	r23, Z+56	; 0x38
    2506:	21 2f       	mov	r18, r17
    2508:	3b 2f       	mov	r19, r27
    250a:	40 2f       	mov	r20, r16
    250c:	5f 2d       	mov	r21, r15
    250e:	81 ad       	ldd	r24, Z+57	; 0x39
    2510:	92 ad       	ldd	r25, Z+58	; 0x3a
    2512:	a0 e0       	ldi	r26, 0x00	; 0
    2514:	0e 94 a9 2c 	call	0x5952	; 0x5952 <__cmpdi2_s8>
    2518:	d1 f1       	breq	.+116    	; 0x258e <fat_write_file+0x1ea>
        {
            uint32_t pos = fd->pos;
    251a:	c1 2e       	mov	r12, r17
    251c:	db 2e       	mov	r13, r27
    251e:	e0 2e       	mov	r14, r16
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    2520:	0b 89       	ldd	r16, Y+19	; 0x13
    2522:	1c 89       	ldd	r17, Y+20	; 0x14
    2524:	48 01       	movw	r8, r16
    2526:	a1 2c       	mov	r10, r1
    2528:	b1 2c       	mov	r11, r1
    252a:	1f 01       	movw	r2, r30
    252c:	29 c0       	rjmp	.+82     	; 0x2580 <fat_write_file+0x1dc>
    252e:	c8 18       	sub	r12, r8
    2530:	d9 08       	sbc	r13, r9
    2532:	ea 08       	sbc	r14, r10
    2534:	fb 08       	sbc	r15, r11
            {
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    2536:	b3 01       	movw	r22, r6
    2538:	a2 01       	movw	r20, r4
    253a:	d1 01       	movw	r26, r2
    253c:	8d 91       	ld	r24, X+
    253e:	9c 91       	ld	r25, X
    2540:	0e 94 9c 01 	call	0x338	; 0x338 <fat_get_next_cluster>
                if(!cluster_num_next)
    2544:	61 15       	cp	r22, r1
    2546:	71 05       	cpc	r23, r1
    2548:	81 05       	cpc	r24, r1
    254a:	91 05       	cpc	r25, r1
    254c:	b9 f4       	brne	.+46     	; 0x257c <fat_write_file+0x1d8>
                {
                    if(pos != 0)
    254e:	c1 14       	cp	r12, r1
    2550:	d1 04       	cpc	r13, r1
    2552:	e1 04       	cpc	r14, r1
    2554:	f1 04       	cpc	r15, r1
    2556:	09 f0       	breq	.+2      	; 0x255a <fat_write_file+0x1b6>
    2558:	5d c1       	rjmp	.+698    	; 0x2814 <fat_write_file+0x470>
                        return -1; /* current file position points beyond end of file */

                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    255a:	01 e0       	ldi	r16, 0x01	; 1
    255c:	10 e0       	ldi	r17, 0x00	; 0
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	b3 01       	movw	r22, r6
    2564:	a2 01       	movw	r20, r4
    2566:	f1 01       	movw	r30, r2
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	0e 94 19 04 	call	0x832	; 0x832 <fat_append_clusters>
                    if(!cluster_num_next)
    2570:	61 15       	cp	r22, r1
    2572:	71 05       	cpc	r23, r1
    2574:	81 05       	cpc	r24, r1
    2576:	91 05       	cpc	r25, r1
    2578:	09 f4       	brne	.+2      	; 0x257c <fat_write_file+0x1d8>
    257a:	4f c1       	rjmp	.+670    	; 0x281a <fat_write_file+0x476>
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written (0 or something less than \c buffer_len on disk full) or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    257c:	2b 01       	movw	r4, r22
    257e:	3c 01       	movw	r6, r24

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    2580:	c8 14       	cp	r12, r8
    2582:	d9 04       	cpc	r13, r9
    2584:	ea 04       	cpc	r14, r10
    2586:	fb 04       	cpc	r15, r11
    2588:	90 f6       	brcc	.-92     	; 0x252e <fat_write_file+0x18a>
    258a:	39 8e       	std	Y+25, r3	; 0x19
    258c:	28 8e       	std	Y+24, r2	; 0x18
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    258e:	2e 88       	ldd	r2, Y+22	; 0x16
    2590:	3f 88       	ldd	r3, Y+23	; 0x17
    2592:	e8 8c       	ldd	r14, Y+24	; 0x18
    2594:	f9 8c       	ldd	r15, Y+25	; 0x19
    2596:	fb 8e       	std	Y+27, r15	; 0x1b
    2598:	ea 8e       	std	Y+26, r14	; 0x1a
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    259a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    259c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    259e:	0d 91       	ld	r16, X+
    25a0:	1c 91       	ld	r17, X
    25a2:	b3 01       	movw	r22, r6
    25a4:	a2 01       	movw	r20, r4
    25a6:	c8 01       	movw	r24, r16
    25a8:	0e 94 97 06 	call	0xd2e	; 0xd2e <fat_cluster_offset>
    25ac:	a2 2e       	mov	r10, r18
    25ae:	b3 2e       	mov	r11, r19
    25b0:	c4 2e       	mov	r12, r20
    25b2:	d5 2e       	mov	r13, r21
    25b4:	e6 2e       	mov	r14, r22
    25b6:	f7 2e       	mov	r15, r23
    25b8:	89 87       	std	Y+9, r24	; 0x09
    25ba:	9d 8b       	std	Y+21, r25	; 0x15
    25bc:	8b 88       	ldd	r8, Y+19	; 0x13
    25be:	9c 88       	ldd	r9, Y+20	; 0x14
    25c0:	e9 81       	ldd	r30, Y+1	; 0x01
    25c2:	fa 81       	ldd	r31, Y+2	; 0x02
    25c4:	8e 1a       	sub	r8, r30
    25c6:	9f 0a       	sbc	r9, r31
    25c8:	28 14       	cp	r2, r8
    25ca:	39 04       	cpc	r3, r9
    25cc:	08 f4       	brcc	.+2      	; 0x25d0 <fat_write_file+0x22c>
    25ce:	41 01       	movw	r8, r2
        uint16_t write_length = cluster_size - first_cluster_offset;
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    25d0:	d8 01       	movw	r26, r16
    25d2:	0d 90       	ld	r0, X+
    25d4:	bc 91       	ld	r27, X
    25d6:	a0 2d       	mov	r26, r0
    25d8:	b9 8f       	std	Y+25, r27	; 0x19
    25da:	a8 8f       	std	Y+24, r26	; 0x18
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    25dc:	e9 81       	ldd	r30, Y+1	; 0x01
    25de:	fa 81       	ldd	r31, Y+2	; 0x02
    25e0:	af 01       	movw	r20, r30
    25e2:	2e 2f       	mov	r18, r30
    25e4:	35 2f       	mov	r19, r21
    25e6:	40 e0       	ldi	r20, 0x00	; 0
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	60 e0       	ldi	r22, 0x00	; 0
    25ec:	70 e0       	ldi	r23, 0x00	; 0
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	09 85       	ldd	r16, Y+9	; 0x09
    25f4:	1d 89       	ldd	r17, Y+21	; 0x15
    25f6:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
        uint16_t write_length = cluster_size - first_cluster_offset;
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    25fa:	a8 8d       	ldd	r26, Y+24	; 0x18
    25fc:	b9 8d       	ldd	r27, Y+25	; 0x19
    25fe:	14 96       	adiw	r26, 0x04	; 4
    2600:	ed 91       	ld	r30, X+
    2602:	fc 91       	ld	r31, X
    2604:	15 97       	sbiw	r26, 0x05	; 5
    2606:	74 01       	movw	r14, r8
    2608:	09 89       	ldd	r16, Y+17	; 0x11
    260a:	1a 89       	ldd	r17, Y+18	; 0x12
    260c:	09 95       	icall
    260e:	88 23       	and	r24, r24
    2610:	09 f4       	brne	.+2      	; 0x2614 <fat_write_file+0x270>
    2612:	8a c0       	rjmp	.+276    	; 0x2728 <fat_write_file+0x384>
            break;

        /* calculate new file position */
        buffer += write_length;
    2614:	e9 89       	ldd	r30, Y+17	; 0x11
    2616:	fa 89       	ldd	r31, Y+18	; 0x12
    2618:	e8 0d       	add	r30, r8
    261a:	f9 1d       	adc	r31, r9
    261c:	fa 8b       	std	Y+18, r31	; 0x12
    261e:	e9 8b       	std	Y+17, r30	; 0x11
        buffer_left -= write_length;
    2620:	28 18       	sub	r2, r8
    2622:	39 08       	sbc	r3, r9
        fd->pos += write_length;
    2624:	a4 01       	movw	r20, r8
    2626:	28 2d       	mov	r18, r8
    2628:	35 2f       	mov	r19, r21
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	50 e0       	ldi	r21, 0x00	; 0
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2638:	bb 8d       	ldd	r27, Y+27	; 0x1b
    263a:	d3 96       	adiw	r26, 0x33	; 51
    263c:	ac 90       	ld	r10, X
    263e:	d3 97       	sbiw	r26, 0x33	; 51
    2640:	d4 96       	adiw	r26, 0x34	; 52
    2642:	bc 90       	ld	r11, X
    2644:	d4 97       	sbiw	r26, 0x34	; 52
    2646:	d5 96       	adiw	r26, 0x35	; 53
    2648:	cc 90       	ld	r12, X
    264a:	d5 97       	sbiw	r26, 0x35	; 53
    264c:	d6 96       	adiw	r26, 0x36	; 54
    264e:	dc 90       	ld	r13, X
    2650:	d6 97       	sbiw	r26, 0x36	; 54
    2652:	d7 96       	adiw	r26, 0x37	; 55
    2654:	ec 90       	ld	r14, X
    2656:	d7 97       	sbiw	r26, 0x37	; 55
    2658:	d8 96       	adiw	r26, 0x38	; 56
    265a:	fc 90       	ld	r15, X
    265c:	d8 97       	sbiw	r26, 0x38	; 56
    265e:	d9 96       	adiw	r26, 0x39	; 57
    2660:	0c 91       	ld	r16, X
    2662:	d9 97       	sbiw	r26, 0x39	; 57
    2664:	da 96       	adiw	r26, 0x3a	; 58
    2666:	1c 91       	ld	r17, X
    2668:	da 97       	sbiw	r26, 0x3a	; 58
    266a:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
    266e:	d3 96       	adiw	r26, 0x33	; 51
    2670:	2c 93       	st	X, r18
    2672:	d3 97       	sbiw	r26, 0x33	; 51
    2674:	d4 96       	adiw	r26, 0x34	; 52
    2676:	3c 93       	st	X, r19
    2678:	d4 97       	sbiw	r26, 0x34	; 52
    267a:	d5 96       	adiw	r26, 0x35	; 53
    267c:	4c 93       	st	X, r20
    267e:	d5 97       	sbiw	r26, 0x35	; 53
    2680:	d6 96       	adiw	r26, 0x36	; 54
    2682:	5c 93       	st	X, r21
    2684:	d6 97       	sbiw	r26, 0x36	; 54
    2686:	d7 96       	adiw	r26, 0x37	; 55
    2688:	6c 93       	st	X, r22
    268a:	d7 97       	sbiw	r26, 0x37	; 55
    268c:	d8 96       	adiw	r26, 0x38	; 56
    268e:	7c 93       	st	X, r23
    2690:	d8 97       	sbiw	r26, 0x38	; 56
    2692:	d9 96       	adiw	r26, 0x39	; 57
    2694:	8c 93       	st	X, r24
    2696:	d9 97       	sbiw	r26, 0x39	; 57
    2698:	da 96       	adiw	r26, 0x3a	; 58
    269a:	9c 93       	st	X, r25
    269c:	da 97       	sbiw	r26, 0x3a	; 58

        if(first_cluster_offset + write_length >= cluster_size)
    269e:	e9 81       	ldd	r30, Y+1	; 0x01
    26a0:	fa 81       	ldd	r31, Y+2	; 0x02
    26a2:	8e 0e       	add	r8, r30
    26a4:	9f 1e       	adc	r9, r31
    26a6:	eb 88       	ldd	r14, Y+19	; 0x13
    26a8:	fc 88       	ldd	r15, Y+20	; 0x14
    26aa:	8e 14       	cp	r8, r14
    26ac:	9f 04       	cpc	r9, r15
    26ae:	78 f1       	brcs	.+94     	; 0x270e <fat_write_file+0x36a>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    26b0:	b3 01       	movw	r22, r6
    26b2:	a2 01       	movw	r20, r4
    26b4:	8d 91       	ld	r24, X+
    26b6:	9c 91       	ld	r25, X
    26b8:	0e 94 9c 01 	call	0x338	; 0x338 <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
    26bc:	61 15       	cp	r22, r1
    26be:	71 05       	cpc	r23, r1
    26c0:	81 05       	cpc	r24, r1
    26c2:	91 05       	cpc	r25, r1
    26c4:	01 f5       	brne	.+64     	; 0x2706 <fat_write_file+0x362>
    26c6:	21 14       	cp	r2, r1
    26c8:	31 04       	cpc	r3, r1
    26ca:	a1 f0       	breq	.+40     	; 0x26f4 <fat_write_file+0x350>
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    26cc:	01 e0       	ldi	r16, 0x01	; 1
    26ce:	10 e0       	ldi	r17, 0x00	; 0
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	b3 01       	movw	r22, r6
    26d6:	a2 01       	movw	r20, r4
    26d8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    26da:	bb 8d       	ldd	r27, Y+27	; 0x1b
    26dc:	8d 91       	ld	r24, X+
    26de:	9c 91       	ld	r25, X
    26e0:	0e 94 19 04 	call	0x832	; 0x832 <fat_append_clusters>
    26e4:	2b 01       	movw	r4, r22
    26e6:	3c 01       	movw	r6, r24
            if(!cluster_num_next)
    26e8:	61 15       	cp	r22, r1
    26ea:	71 05       	cpc	r23, r1
    26ec:	81 05       	cpc	r24, r1
    26ee:	91 05       	cpc	r25, r1
    26f0:	09 f0       	breq	.+2      	; 0x26f4 <fat_write_file+0x350>
    26f2:	96 c0       	rjmp	.+300    	; 0x2820 <fat_write_file+0x47c>
    26f4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    26f6:	fb 8d       	ldd	r31, Y+27	; 0x1b
    26f8:	f9 8f       	std	Y+25, r31	; 0x19
    26fa:	e8 8f       	std	Y+24, r30	; 0x18
            {
                fd->pos_cluster = 0;
    26fc:	13 ae       	std	Z+59, r1	; 0x3b
    26fe:	14 ae       	std	Z+60, r1	; 0x3c
    2700:	15 ae       	std	Z+61, r1	; 0x3d
    2702:	16 ae       	std	Z+62, r1	; 0x3e
                break;
    2704:	15 c0       	rjmp	.+42     	; 0x2730 <fat_write_file+0x38c>
        fd->pos += write_length;

        if(first_cluster_offset + write_length >= cluster_size)
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    2706:	2b 01       	movw	r4, r22
    2708:	3c 01       	movw	r6, r24
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    270a:	19 82       	std	Y+1, r1	; 0x01
    270c:	1a 82       	std	Y+2, r1	; 0x02
        }

        fd->pos_cluster = cluster_num;
    270e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2710:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2712:	43 ae       	std	Z+59, r4	; 0x3b
    2714:	54 ae       	std	Z+60, r5	; 0x3c
    2716:	65 ae       	std	Z+61, r6	; 0x3d
    2718:	76 ae       	std	Z+62, r7	; 0x3e

    } while(buffer_left > 0); /* check if we are done */
    271a:	21 14       	cp	r2, r1
    271c:	31 04       	cpc	r3, r1
    271e:	09 f0       	breq	.+2      	; 0x2722 <fat_write_file+0x37e>
    2720:	3c cf       	rjmp	.-392    	; 0x259a <fat_write_file+0x1f6>
    2722:	f9 8f       	std	Y+25, r31	; 0x19
    2724:	e8 8f       	std	Y+24, r30	; 0x18
    2726:	04 c0       	rjmp	.+8      	; 0x2730 <fat_write_file+0x38c>
    2728:	ea 8c       	ldd	r14, Y+26	; 0x1a
    272a:	fb 8c       	ldd	r15, Y+27	; 0x1b
    272c:	f9 8e       	std	Y+25, r15	; 0x19
    272e:	e8 8e       	std	Y+24, r14	; 0x18

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
    2730:	e8 8d       	ldd	r30, Y+24	; 0x18
    2732:	f9 8d       	ldd	r31, Y+25	; 0x19
    2734:	b3 a9       	ldd	r27, Z+51	; 0x33
    2736:	a4 a9       	ldd	r26, Z+52	; 0x34
    2738:	85 a8       	ldd	r8, Z+53	; 0x35
    273a:	96 a8       	ldd	r9, Z+54	; 0x36
    273c:	67 a9       	ldd	r22, Z+55	; 0x37
    273e:	70 ad       	ldd	r23, Z+56	; 0x38
    2740:	47 a0       	ldd	r4, Z+39	; 0x27
    2742:	50 a4       	ldd	r5, Z+40	; 0x28
    2744:	61 a4       	ldd	r6, Z+41	; 0x29
    2746:	72 a4       	ldd	r7, Z+42	; 0x2a
    2748:	83 01       	movw	r16, r6
    274a:	72 01       	movw	r14, r4
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	a9 01       	movw	r20, r18
    2752:	49 82       	std	Y+1, r4	; 0x01
    2754:	fa 82       	std	Y+2, r15	; 0x02
    2756:	0b 83       	std	Y+3, r16	; 0x03
    2758:	1c 83       	std	Y+4, r17	; 0x04
    275a:	2d 83       	std	Y+5, r18	; 0x05
    275c:	3e 83       	std	Y+6, r19	; 0x06
    275e:	4f 83       	std	Y+7, r20	; 0x07
    2760:	58 87       	std	Y+8, r21	; 0x08
    2762:	2b 2f       	mov	r18, r27
    2764:	3a 2f       	mov	r19, r26
    2766:	48 2d       	mov	r20, r8
    2768:	59 2d       	mov	r21, r9
    276a:	81 ad       	ldd	r24, Z+57	; 0x39
    276c:	92 ad       	ldd	r25, Z+58	; 0x3a
    276e:	a4 2c       	mov	r10, r4
    2770:	bf 2c       	mov	r11, r15
    2772:	c0 2e       	mov	r12, r16
    2774:	d1 2e       	mov	r13, r17
    2776:	e1 2c       	mov	r14, r1
    2778:	f1 2c       	mov	r15, r1
    277a:	00 e0       	ldi	r16, 0x00	; 0
    277c:	10 e0       	ldi	r17, 0x00	; 0
    277e:	0e 94 a0 2c 	call	0x5940	; 0x5940 <__cmpdi2>
    2782:	89 f1       	breq	.+98     	; 0x27e6 <fat_write_file+0x442>
    2784:	80 f1       	brcs	.+96     	; 0x27e6 <fat_write_file+0x442>
#if !FAT_DELAY_DIRENTRY_UPDATE
        uint32_t size_old = fd->dir_entry.file_size;
#endif

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
    2786:	b7 a3       	std	Z+39, r27	; 0x27
    2788:	a0 a7       	std	Z+40, r26	; 0x28
    278a:	81 a6       	std	Z+41, r8	; 0x29
    278c:	92 a6       	std	Z+42, r9	; 0x2a

#if !FAT_DELAY_DIRENTRY_UPDATE
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    278e:	bf 01       	movw	r22, r30
    2790:	6e 5f       	subi	r22, 0xFE	; 254
    2792:	7f 4f       	sbci	r23, 0xFF	; 255
    2794:	80 81       	ld	r24, Z
    2796:	91 81       	ldd	r25, Z+1	; 0x01
    2798:	0e 94 2b 0b 	call	0x1656	; 0x1656 <fat_write_dir_entry>
    279c:	81 11       	cpse	r24, r1
    279e:	23 c0       	rjmp	.+70     	; 0x27e6 <fat_write_file+0x442>
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
    27a0:	a8 8d       	ldd	r26, Y+24	; 0x18
    27a2:	b9 8d       	ldd	r27, Y+25	; 0x19
    27a4:	d3 96       	adiw	r26, 0x33	; 51
    27a6:	2d 90       	ld	r2, X+
    27a8:	3c 90       	ld	r3, X
    27aa:	d4 97       	sbiw	r26, 0x34	; 52
    27ac:	24 18       	sub	r2, r4
    27ae:	35 08       	sbc	r3, r5
            fd->pos = size_old;
    27b0:	e9 81       	ldd	r30, Y+1	; 0x01
    27b2:	d3 96       	adiw	r26, 0x33	; 51
    27b4:	ec 93       	st	X, r30
    27b6:	d3 97       	sbiw	r26, 0x33	; 51
    27b8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ba:	d4 96       	adiw	r26, 0x34	; 52
    27bc:	fc 93       	st	X, r31
    27be:	d4 97       	sbiw	r26, 0x34	; 52
    27c0:	eb 80       	ldd	r14, Y+3	; 0x03
    27c2:	d5 96       	adiw	r26, 0x35	; 53
    27c4:	ec 92       	st	X, r14
    27c6:	d5 97       	sbiw	r26, 0x35	; 53
    27c8:	fc 80       	ldd	r15, Y+4	; 0x04
    27ca:	d6 96       	adiw	r26, 0x36	; 54
    27cc:	fc 92       	st	X, r15
    27ce:	d6 97       	sbiw	r26, 0x36	; 54
    27d0:	d7 96       	adiw	r26, 0x37	; 55
    27d2:	1c 92       	st	X, r1
    27d4:	d7 97       	sbiw	r26, 0x37	; 55
    27d6:	d8 96       	adiw	r26, 0x38	; 56
    27d8:	1c 92       	st	X, r1
    27da:	d8 97       	sbiw	r26, 0x38	; 56
    27dc:	d9 96       	adiw	r26, 0x39	; 57
    27de:	1c 92       	st	X, r1
    27e0:	d9 97       	sbiw	r26, 0x39	; 57
    27e2:	da 96       	adiw	r26, 0x3a	; 58
    27e4:	1c 92       	st	X, r1
        }
#endif
    }

    return buffer_len - buffer_left;
    27e6:	8e 89       	ldd	r24, Y+22	; 0x16
    27e8:	9f 89       	ldd	r25, Y+23	; 0x17
    27ea:	82 19       	sub	r24, r2
    27ec:	93 09       	sbc	r25, r3
    27ee:	23 c0       	rjmp	.+70     	; 0x2836 <fat_write_file+0x492>
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
        return -1;
    27f0:	8f ef       	ldi	r24, 0xFF	; 255
    27f2:	9f ef       	ldi	r25, 0xFF	; 255
    27f4:	20 c0       	rjmp	.+64     	; 0x2836 <fat_write_file+0x492>
    27f6:	8f ef       	ldi	r24, 0xFF	; 255
    27f8:	9f ef       	ldi	r25, 0xFF	; 255
    27fa:	1d c0       	rjmp	.+58     	; 0x2836 <fat_write_file+0x492>
    27fc:	8f ef       	ldi	r24, 0xFF	; 255
    27fe:	9f ef       	ldi	r25, 0xFF	; 255
    2800:	1a c0       	rjmp	.+52     	; 0x2836 <fat_write_file+0x492>
    if(fd->pos > fd->dir_entry.file_size)
        return -1;
    2802:	8f ef       	ldi	r24, 0xFF	; 255
    2804:	9f ef       	ldi	r25, 0xFF	; 255
    2806:	17 c0       	rjmp	.+46     	; 0x2836 <fat_write_file+0x492>
                if(!cluster_num)
                    return 0;
            }
            else
            {
                return -1;
    2808:	8f ef       	ldi	r24, 0xFF	; 255
    280a:	9f ef       	ldi	r25, 0xFF	; 255
    280c:	14 c0       	rjmp	.+40     	; 0x2836 <fat_write_file+0x492>
            if(!fd->pos)
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
                if(!cluster_num)
                    return 0;
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	11 c0       	rjmp	.+34     	; 0x2836 <fat_write_file+0x492>
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num_next)
                {
                    if(pos != 0)
                        return -1; /* current file position points beyond end of file */
    2814:	8f ef       	ldi	r24, 0xFF	; 255
    2816:	9f ef       	ldi	r25, 0xFF	; 255
    2818:	0e c0       	rjmp	.+28     	; 0x2836 <fat_write_file+0x492>

                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
                    if(!cluster_num_next)
                        return 0;
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	0b c0       	rjmp	.+22     	; 0x2836 <fat_write_file+0x492>

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
        }

        fd->pos_cluster = cluster_num;
    2820:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2822:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2824:	db 96       	adiw	r26, 0x3b	; 59
    2826:	6d 93       	st	X+, r22
    2828:	7d 93       	st	X+, r23
    282a:	8d 93       	st	X+, r24
    282c:	9c 93       	st	X, r25
    282e:	de 97       	sbiw	r26, 0x3e	; 62
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    2830:	19 82       	std	Y+1, r1	; 0x01
    2832:	1a 82       	std	Y+2, r1	; 0x02
    2834:	b2 ce       	rjmp	.-668    	; 0x259a <fat_write_file+0x1f6>
        }
#endif
    }

    return buffer_len - buffer_left;
}
    2836:	6b 96       	adiw	r28, 0x1b	; 27
    2838:	0f b6       	in	r0, 0x3f	; 63
    283a:	f8 94       	cli
    283c:	de bf       	out	0x3e, r29	; 62
    283e:	0f be       	out	0x3f, r0	; 63
    2840:	cd bf       	out	0x3d, r28	; 61
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	1f 91       	pop	r17
    2848:	0f 91       	pop	r16
    284a:	ff 90       	pop	r15
    284c:	ef 90       	pop	r14
    284e:	df 90       	pop	r13
    2850:	cf 90       	pop	r12
    2852:	bf 90       	pop	r11
    2854:	af 90       	pop	r10
    2856:	9f 90       	pop	r9
    2858:	8f 90       	pop	r8
    285a:	7f 90       	pop	r7
    285c:	6f 90       	pop	r6
    285e:	5f 90       	pop	r5
    2860:	4f 90       	pop	r4
    2862:	3f 90       	pop	r3
    2864:	2f 90       	pop	r2
    2866:	08 95       	ret

00002868 <fat_resize_file>:
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    2868:	2f 92       	push	r2
    286a:	3f 92       	push	r3
    286c:	4f 92       	push	r4
    286e:	5f 92       	push	r5
    2870:	6f 92       	push	r6
    2872:	7f 92       	push	r7
    2874:	8f 92       	push	r8
    2876:	9f 92       	push	r9
    2878:	af 92       	push	r10
    287a:	bf 92       	push	r11
    287c:	cf 92       	push	r12
    287e:	df 92       	push	r13
    2880:	ef 92       	push	r14
    2882:	ff 92       	push	r15
    2884:	0f 93       	push	r16
    2886:	1f 93       	push	r17
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	64 97       	sbiw	r28, 0x14	; 20
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	f8 94       	cli
    2896:	de bf       	out	0x3e, r29	; 62
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	cd bf       	out	0x3d, r28	; 61
    if(!fd)
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	09 f4       	brne	.+2      	; 0x28a2 <fat_resize_file+0x3a>
    28a0:	a4 c1       	rjmp	.+840    	; 0x2bea <fat_resize_file+0x382>
    28a2:	4d 83       	std	Y+5, r20	; 0x05
    28a4:	5e 83       	std	Y+6, r21	; 0x06
    28a6:	6f 83       	std	Y+7, r22	; 0x07
    28a8:	78 87       	std	Y+8, r23	; 0x08
    28aa:	1c 01       	movw	r2, r24
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    28ac:	dc 01       	movw	r26, r24
    28ae:	93 96       	adiw	r26, 0x23	; 35
    28b0:	2d 91       	ld	r18, X+
    28b2:	3d 91       	ld	r19, X+
    28b4:	4d 91       	ld	r20, X+
    28b6:	5c 91       	ld	r21, X
    28b8:	96 97       	sbiw	r26, 0x26	; 38
    28ba:	2d 87       	std	Y+13, r18	; 0x0d
    28bc:	3e 87       	std	Y+14, r19	; 0x0e
    28be:	4f 87       	std	Y+15, r20	; 0x0f
    28c0:	58 8b       	std	Y+16, r21	; 0x10
    uint16_t cluster_size = fd->fs->header.cluster_size;
    28c2:	ed 91       	ld	r30, X+
    28c4:	fc 91       	ld	r31, X
    28c6:	80 8d       	ldd	r24, Z+24	; 0x18
    28c8:	91 8d       	ldd	r25, Z+25	; 0x19
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    28ca:	23 2b       	or	r18, r19
    28cc:	24 2b       	or	r18, r20
    28ce:	25 2b       	or	r18, r21
    28d0:	09 f0       	breq	.+2      	; 0x28d4 <fat_resize_file+0x6c>
    28d2:	cf c1       	rjmp	.+926    	; 0x2c72 <fat_resize_file+0x40a>
    28d4:	2d 81       	ldd	r18, Y+5	; 0x05
    28d6:	3e 81       	ldd	r19, Y+6	; 0x06
    28d8:	4f 81       	ldd	r20, Y+7	; 0x07
    28da:	58 85       	ldd	r21, Y+8	; 0x08
    28dc:	23 2b       	or	r18, r19
    28de:	24 2b       	or	r18, r20
    28e0:	25 2b       	or	r18, r21
    28e2:	09 f4       	brne	.+2      	; 0x28e6 <fat_resize_file+0x7e>
    28e4:	31 c1       	rjmp	.+610    	; 0x2b48 <fat_resize_file+0x2e0>
    28e6:	b5 c1       	rjmp	.+874    	; 0x2c52 <fat_resize_file+0x3ea>
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    28e8:	4d 80       	ldd	r4, Y+5	; 0x05
    28ea:	5e 80       	ldd	r5, Y+6	; 0x06
    28ec:	6f 80       	ldd	r6, Y+7	; 0x07
    28ee:	78 84       	ldd	r7, Y+8	; 0x08
    28f0:	cd 84       	ldd	r12, Y+13	; 0x0d
    28f2:	de 84       	ldd	r13, Y+14	; 0x0e
    28f4:	ef 84       	ldd	r14, Y+15	; 0x0f
    28f6:	f8 88       	ldd	r15, Y+16	; 0x10

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    28f8:	b7 01       	movw	r22, r14
    28fa:	a6 01       	movw	r20, r12
    28fc:	d1 01       	movw	r26, r2
    28fe:	8d 91       	ld	r24, X+
    2900:	9c 91       	ld	r25, X
    2902:	0e 94 9c 01 	call	0x338	; 0x338 <fat_get_next_cluster>
            if(cluster_num_next)
    2906:	61 15       	cp	r22, r1
    2908:	71 05       	cpc	r23, r1
    290a:	81 05       	cpc	r24, r1
    290c:	91 05       	cpc	r25, r1
    290e:	61 f0       	breq	.+24     	; 0x2928 <fat_resize_file+0xc0>
            {
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
    2910:	48 18       	sub	r4, r8
    2912:	59 08       	sbc	r5, r9
    2914:	6a 08       	sbc	r6, r10
    2916:	7b 08       	sbc	r7, r11

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    2918:	6b 01       	movw	r12, r22
    291a:	7c 01       	movw	r14, r24
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    291c:	84 14       	cp	r8, r4
    291e:	95 04       	cpc	r9, r5
    2920:	a6 04       	cpc	r10, r6
    2922:	b7 04       	cpc	r11, r7
    2924:	48 f3       	brcs	.-46     	; 0x28f8 <fat_resize_file+0x90>
    2926:	49 c0       	rjmp	.+146    	; 0x29ba <fat_resize_file+0x152>
    2928:	cd 86       	std	Y+13, r12	; 0x0d
    292a:	de 86       	std	Y+14, r13	; 0x0e
    292c:	ef 86       	std	Y+15, r14	; 0x0f
    292e:	f8 8a       	std	Y+16, r15	; 0x10
    2930:	c9 8a       	std	Y+17, r12	; 0x11
    2932:	da 8a       	std	Y+18, r13	; 0x12
    2934:	eb 8a       	std	Y+19, r14	; 0x13
    2936:	fc 8a       	std	Y+20, r15	; 0x14
            {
                break;
            }
        }

        if(size_new > cluster_size || cluster_num == 0)
    2938:	84 14       	cp	r8, r4
    293a:	95 04       	cpc	r9, r5
    293c:	a6 04       	cpc	r10, r6
    293e:	b7 04       	cpc	r11, r7
    2940:	38 f0       	brcs	.+14     	; 0x2950 <fat_resize_file+0xe8>
    2942:	c1 14       	cp	r12, r1
    2944:	d1 04       	cpc	r13, r1
    2946:	e1 04       	cpc	r14, r1
    2948:	f1 04       	cpc	r15, r1
    294a:	09 f4       	brne	.+2      	; 0x294e <fat_resize_file+0xe6>
    294c:	56 c1       	rjmp	.+684    	; 0x2bfa <fat_resize_file+0x392>
    294e:	35 c0       	rjmp	.+106    	; 0x29ba <fat_resize_file+0x152>
    2950:	d5 01       	movw	r26, r10
    2952:	c4 01       	movw	r24, r8
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	a1 09       	sbc	r26, r1
    2958:	b1 09       	sbc	r27, r1
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
    295a:	bc 01       	movw	r22, r24
    295c:	cd 01       	movw	r24, r26
    295e:	64 0d       	add	r22, r4
    2960:	75 1d       	adc	r23, r5
    2962:	86 1d       	adc	r24, r6
    2964:	97 1d       	adc	r25, r7
    2966:	a5 01       	movw	r20, r10
    2968:	94 01       	movw	r18, r8
    296a:	0e 94 b0 2b 	call	0x5760	; 0x5760 <__udivmodsi4>
    296e:	89 01       	movw	r16, r18
    2970:	9a 01       	movw	r18, r20
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    2972:	4d 85       	ldd	r20, Y+13	; 0x0d
    2974:	5e 85       	ldd	r21, Y+14	; 0x0e
    2976:	6f 85       	ldd	r22, Y+15	; 0x0f
    2978:	78 89       	ldd	r23, Y+16	; 0x10
    297a:	f1 01       	movw	r30, r2
    297c:	80 81       	ld	r24, Z
    297e:	91 81       	ldd	r25, Z+1	; 0x01
    2980:	0e 94 19 04 	call	0x832	; 0x832 <fat_append_clusters>
    2984:	6b 01       	movw	r12, r22
    2986:	7c 01       	movw	r14, r24
            if(!cluster_new_chain)
    2988:	67 2b       	or	r22, r23
    298a:	68 2b       	or	r22, r24
    298c:	69 2b       	or	r22, r25
    298e:	09 f4       	brne	.+2      	; 0x2992 <fat_resize_file+0x12a>
    2990:	2e c1       	rjmp	.+604    	; 0x2bee <fat_resize_file+0x386>
                return 0;

            if(!cluster_num)
    2992:	29 89       	ldd	r18, Y+17	; 0x11
    2994:	3a 89       	ldd	r19, Y+18	; 0x12
    2996:	4b 89       	ldd	r20, Y+19	; 0x13
    2998:	5c 89       	ldd	r21, Y+20	; 0x14
    299a:	23 2b       	or	r18, r19
    299c:	24 2b       	or	r18, r20
    299e:	25 2b       	or	r18, r21
    29a0:	41 f4       	brne	.+16     	; 0x29b2 <fat_resize_file+0x14a>
            {
                cluster_num = cluster_new_chain;
                fd->dir_entry.cluster = cluster_num;
    29a2:	d1 01       	movw	r26, r2
    29a4:	93 96       	adiw	r26, 0x23	; 35
    29a6:	cd 92       	st	X+, r12
    29a8:	dd 92       	st	X+, r13
    29aa:	ed 92       	st	X+, r14
    29ac:	fc 92       	st	X, r15
    29ae:	96 97       	sbiw	r26, 0x26	; 38
    29b0:	04 c0       	rjmp	.+8      	; 0x29ba <fat_resize_file+0x152>
    29b2:	cd 84       	ldd	r12, Y+13	; 0x0d
    29b4:	de 84       	ldd	r13, Y+14	; 0x0e
    29b6:	ef 84       	ldd	r14, Y+15	; 0x0f
    29b8:	f8 88       	ldd	r15, Y+16	; 0x10
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
    29ba:	2d 81       	ldd	r18, Y+5	; 0x05
    29bc:	3e 81       	ldd	r19, Y+6	; 0x06
    29be:	4f 81       	ldd	r20, Y+7	; 0x07
    29c0:	58 85       	ldd	r21, Y+8	; 0x08
    29c2:	d1 01       	movw	r26, r2
    29c4:	97 96       	adiw	r26, 0x27	; 39
    29c6:	2d 93       	st	X+, r18
    29c8:	3d 93       	st	X+, r19
    29ca:	4d 93       	st	X+, r20
    29cc:	5c 93       	st	X, r21
    29ce:	9a 97       	sbiw	r26, 0x2a	; 42
        if(size == 0)
    29d0:	23 2b       	or	r18, r19
    29d2:	24 2b       	or	r18, r20
    29d4:	25 2b       	or	r18, r21
    29d6:	09 f0       	breq	.+2      	; 0x29da <fat_resize_file+0x172>
    29d8:	31 c1       	rjmp	.+610    	; 0x2c3c <fat_resize_file+0x3d4>
            fd->dir_entry.cluster = 0;
    29da:	f1 01       	movw	r30, r2
    29dc:	13 a2       	std	Z+35, r1	; 0x23
    29de:	14 a2       	std	Z+36, r1	; 0x24
    29e0:	15 a2       	std	Z+37, r1	; 0x25
    29e2:	16 a2       	std	Z+38, r1	; 0x26
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    29e4:	b1 01       	movw	r22, r2
    29e6:	6e 5f       	subi	r22, 0xFE	; 254
    29e8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ea:	80 81       	ld	r24, Z
    29ec:	91 81       	ldd	r25, Z+1	; 0x01
    29ee:	0e 94 2b 0b 	call	0x1656	; 0x1656 <fat_write_dir_entry>
    29f2:	88 23       	and	r24, r24
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <fat_resize_file+0x190>
    29f6:	51 c1       	rjmp	.+674    	; 0x2c9a <fat_resize_file+0x432>
            return 0;

        if(size == 0)
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
    29f8:	b7 01       	movw	r22, r14
    29fa:	a6 01       	movw	r20, r12
    29fc:	d1 01       	movw	r26, r2
    29fe:	8d 91       	ld	r24, X+
    2a00:	9c 91       	ld	r25, X
    2a02:	0e 94 4e 02 	call	0x49c	; 0x49c <fat_free_clusters>
    2a06:	a0 c0       	rjmp	.+320    	; 0x2b48 <fat_resize_file+0x2e0>
        }
        else if(size_new <= cluster_size)
    2a08:	84 14       	cp	r8, r4
    2a0a:	95 04       	cpc	r9, r5
    2a0c:	a6 04       	cpc	r10, r6
    2a0e:	b7 04       	cpc	r11, r7
    2a10:	08 f4       	brcc	.+2      	; 0x2a14 <fat_resize_file+0x1ac>
    2a12:	9a c0       	rjmp	.+308    	; 0x2b48 <fat_resize_file+0x2e0>
        {
            /* free all clusters no longer needed */
            fat_terminate_clusters(fd->fs, cluster_num);
    2a14:	f1 01       	movw	r30, r2
    2a16:	80 80       	ld	r8, Z
    2a18:	91 80       	ldd	r9, Z+1	; 0x01
 * \returns 0 on failure, 1 on success.
 * \see fat_free_clusters
 */
uint8_t fat_terminate_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    2a1a:	81 14       	cp	r8, r1
    2a1c:	91 04       	cpc	r9, r1
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <fat_resize_file+0x1ba>
    2a20:	93 c0       	rjmp	.+294    	; 0x2b48 <fat_resize_file+0x2e0>
    2a22:	f2 e0       	ldi	r31, 0x02	; 2
    2a24:	cf 16       	cp	r12, r31
    2a26:	d1 04       	cpc	r13, r1
    2a28:	e1 04       	cpc	r14, r1
    2a2a:	f1 04       	cpc	r15, r1
    2a2c:	08 f4       	brcc	.+2      	; 0x2a30 <fat_resize_file+0x1c8>
    2a2e:	8c c0       	rjmp	.+280    	; 0x2b48 <fat_resize_file+0x2e0>
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
    2a30:	b7 01       	movw	r22, r14
    2a32:	a6 01       	movw	r20, r12
    2a34:	c4 01       	movw	r24, r8
    2a36:	0e 94 9c 01 	call	0x338	; 0x338 <fat_get_next_cluster>
    2a3a:	2b 01       	movw	r4, r22
    2a3c:	3c 01       	movw	r6, r24

    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    2a3e:	d4 01       	movw	r26, r8
    2a40:	ed 91       	ld	r30, X+
    2a42:	fc 91       	ld	r31, X
    2a44:	80 85       	ldd	r24, Z+8	; 0x08
    2a46:	8b 30       	cpi	r24, 0x0B	; 11
    2a48:	e9 f5       	brne	.+122    	; 0x2ac4 <fat_resize_file+0x25c>
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
    2a4a:	8f ef       	ldi	r24, 0xFF	; 255
    2a4c:	9f ef       	ldi	r25, 0xFF	; 255
    2a4e:	af ef       	ldi	r26, 0xFF	; 255
    2a50:	bf e0       	ldi	r27, 0x0F	; 15
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	9a 83       	std	Y+2, r25	; 0x02
    2a56:	ab 83       	std	Y+3, r26	; 0x03
    2a58:	bc 83       	std	Y+4, r27	; 0x04
        if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    2a5a:	56 01       	movw	r10, r12
    2a5c:	67 01       	movw	r12, r14
    2a5e:	2a 2d       	mov	r18, r10
    2a60:	3b 2d       	mov	r19, r11
    2a62:	4c 2d       	mov	r20, r12
    2a64:	5d 2d       	mov	r21, r13
    2a66:	60 e0       	ldi	r22, 0x00	; 0
    2a68:	70 e0       	ldi	r23, 0x00	; 0
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	02 e0       	ldi	r16, 0x02	; 2
    2a70:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__ashldi3>
    2a74:	d4 01       	movw	r26, r8
    2a76:	1a 96       	adiw	r26, 0x0a	; 10
    2a78:	ac 90       	ld	r10, X
    2a7a:	1a 97       	sbiw	r26, 0x0a	; 10
    2a7c:	1b 96       	adiw	r26, 0x0b	; 11
    2a7e:	bc 90       	ld	r11, X
    2a80:	1b 97       	sbiw	r26, 0x0b	; 11
    2a82:	1c 96       	adiw	r26, 0x0c	; 12
    2a84:	cc 90       	ld	r12, X
    2a86:	1c 97       	sbiw	r26, 0x0c	; 12
    2a88:	1d 96       	adiw	r26, 0x0d	; 13
    2a8a:	dc 90       	ld	r13, X
    2a8c:	1d 97       	sbiw	r26, 0x0d	; 13
    2a8e:	1e 96       	adiw	r26, 0x0e	; 14
    2a90:	ec 90       	ld	r14, X
    2a92:	1e 97       	sbiw	r26, 0x0e	; 14
    2a94:	1f 96       	adiw	r26, 0x0f	; 15
    2a96:	fc 90       	ld	r15, X
    2a98:	1f 97       	sbiw	r26, 0x0f	; 15
    2a9a:	50 96       	adiw	r26, 0x10	; 16
    2a9c:	0c 91       	ld	r16, X
    2a9e:	50 97       	sbiw	r26, 0x10	; 16
    2aa0:	51 96       	adiw	r26, 0x11	; 17
    2aa2:	1c 91       	ld	r17, X
    2aa4:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
    2aa8:	04 80       	ldd	r0, Z+4	; 0x04
    2aaa:	f5 81       	ldd	r31, Z+5	; 0x05
    2aac:	e0 2d       	mov	r30, r0
    2aae:	68 94       	set
    2ab0:	ee 24       	eor	r14, r14
    2ab2:	e2 f8       	bld	r14, 2
    2ab4:	f1 2c       	mov	r15, r1
    2ab6:	8e 01       	movw	r16, r28
    2ab8:	0f 5f       	subi	r16, 0xFF	; 255
    2aba:	1f 4f       	sbci	r17, 0xFF	; 255
    2abc:	09 95       	icall
    2abe:	81 11       	cpse	r24, r1
    2ac0:	39 c0       	rjmp	.+114    	; 0x2b34 <fat_resize_file+0x2cc>
    2ac2:	42 c0       	rjmp	.+132    	; 0x2b48 <fat_resize_file+0x2e0>
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
    2ac4:	8f ef       	ldi	r24, 0xFF	; 255
    2ac6:	9f ef       	ldi	r25, 0xFF	; 255
    2ac8:	9a 83       	std	Y+2, r25	; 0x02
    2aca:	89 83       	std	Y+1, r24	; 0x01
        if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    2acc:	56 01       	movw	r10, r12
    2ace:	67 01       	movw	r12, r14
    2ad0:	2a 2d       	mov	r18, r10
    2ad2:	3b 2d       	mov	r19, r11
    2ad4:	4c 2d       	mov	r20, r12
    2ad6:	5d 2d       	mov	r21, r13
    2ad8:	60 e0       	ldi	r22, 0x00	; 0
    2ada:	70 e0       	ldi	r23, 0x00	; 0
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	01 e0       	ldi	r16, 0x01	; 1
    2ae2:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__ashldi3>
    2ae6:	d4 01       	movw	r26, r8
    2ae8:	1a 96       	adiw	r26, 0x0a	; 10
    2aea:	ac 90       	ld	r10, X
    2aec:	1a 97       	sbiw	r26, 0x0a	; 10
    2aee:	1b 96       	adiw	r26, 0x0b	; 11
    2af0:	bc 90       	ld	r11, X
    2af2:	1b 97       	sbiw	r26, 0x0b	; 11
    2af4:	1c 96       	adiw	r26, 0x0c	; 12
    2af6:	cc 90       	ld	r12, X
    2af8:	1c 97       	sbiw	r26, 0x0c	; 12
    2afa:	1d 96       	adiw	r26, 0x0d	; 13
    2afc:	dc 90       	ld	r13, X
    2afe:	1d 97       	sbiw	r26, 0x0d	; 13
    2b00:	1e 96       	adiw	r26, 0x0e	; 14
    2b02:	ec 90       	ld	r14, X
    2b04:	1e 97       	sbiw	r26, 0x0e	; 14
    2b06:	1f 96       	adiw	r26, 0x0f	; 15
    2b08:	fc 90       	ld	r15, X
    2b0a:	1f 97       	sbiw	r26, 0x0f	; 15
    2b0c:	50 96       	adiw	r26, 0x10	; 16
    2b0e:	0c 91       	ld	r16, X
    2b10:	50 97       	sbiw	r26, 0x10	; 16
    2b12:	51 96       	adiw	r26, 0x11	; 17
    2b14:	1c 91       	ld	r17, X
    2b16:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
    2b1a:	04 80       	ldd	r0, Z+4	; 0x04
    2b1c:	f5 81       	ldd	r31, Z+5	; 0x05
    2b1e:	e0 2d       	mov	r30, r0
    2b20:	68 94       	set
    2b22:	ee 24       	eor	r14, r14
    2b24:	e1 f8       	bld	r14, 1
    2b26:	f1 2c       	mov	r15, r1
    2b28:	8e 01       	movw	r16, r28
    2b2a:	0f 5f       	subi	r16, 0xFF	; 255
    2b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2e:	09 95       	icall
    2b30:	88 23       	and	r24, r24
    2b32:	51 f0       	breq	.+20     	; 0x2b48 <fat_resize_file+0x2e0>
            return 0;
    }

    /* free remaining clusters */
    if(cluster_num_next)
    2b34:	41 14       	cp	r4, r1
    2b36:	51 04       	cpc	r5, r1
    2b38:	61 04       	cpc	r6, r1
    2b3a:	71 04       	cpc	r7, r1
    2b3c:	29 f0       	breq	.+10     	; 0x2b48 <fat_resize_file+0x2e0>
        return fat_free_clusters(fs, cluster_num_next);
    2b3e:	b3 01       	movw	r22, r6
    2b40:	a2 01       	movw	r20, r4
    2b42:	c4 01       	movw	r24, r8
    2b44:	0e 94 4e 02 	call	0x49c	; 0x49c <fat_free_clusters>
        }

    } while(0);

    /* correct file position */
    if(size < fd->pos)
    2b48:	4d 81       	ldd	r20, Y+5	; 0x05
    2b4a:	5e 81       	ldd	r21, Y+6	; 0x06
    2b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4e:	78 85       	ldd	r23, Y+8	; 0x08
    2b50:	9a 01       	movw	r18, r20
    2b52:	ab 01       	movw	r20, r22
    2b54:	60 e0       	ldi	r22, 0x00	; 0
    2b56:	70 e0       	ldi	r23, 0x00	; 0
    2b58:	cb 01       	movw	r24, r22
    2b5a:	2d 83       	std	Y+5, r18	; 0x05
    2b5c:	3e 83       	std	Y+6, r19	; 0x06
    2b5e:	4f 83       	std	Y+7, r20	; 0x07
    2b60:	58 87       	std	Y+8, r21	; 0x08
    2b62:	69 87       	std	Y+9, r22	; 0x09
    2b64:	7a 87       	std	Y+10, r23	; 0x0a
    2b66:	8b 87       	std	Y+11, r24	; 0x0b
    2b68:	9c 87       	std	Y+12, r25	; 0x0c
    2b6a:	d1 01       	movw	r26, r2
    2b6c:	d3 96       	adiw	r26, 0x33	; 51
    2b6e:	ac 90       	ld	r10, X
    2b70:	d3 97       	sbiw	r26, 0x33	; 51
    2b72:	d4 96       	adiw	r26, 0x34	; 52
    2b74:	bc 90       	ld	r11, X
    2b76:	d4 97       	sbiw	r26, 0x34	; 52
    2b78:	d5 96       	adiw	r26, 0x35	; 53
    2b7a:	cc 90       	ld	r12, X
    2b7c:	d5 97       	sbiw	r26, 0x35	; 53
    2b7e:	d6 96       	adiw	r26, 0x36	; 54
    2b80:	dc 90       	ld	r13, X
    2b82:	d6 97       	sbiw	r26, 0x36	; 54
    2b84:	d7 96       	adiw	r26, 0x37	; 55
    2b86:	ec 90       	ld	r14, X
    2b88:	d7 97       	sbiw	r26, 0x37	; 55
    2b8a:	d8 96       	adiw	r26, 0x38	; 56
    2b8c:	fc 90       	ld	r15, X
    2b8e:	d8 97       	sbiw	r26, 0x38	; 56
    2b90:	d9 96       	adiw	r26, 0x39	; 57
    2b92:	0c 91       	ld	r16, X
    2b94:	d9 97       	sbiw	r26, 0x39	; 57
    2b96:	da 96       	adiw	r26, 0x3a	; 58
    2b98:	1c 91       	ld	r17, X
    2b9a:	da 97       	sbiw	r26, 0x3a	; 58
    2b9c:	60 e0       	ldi	r22, 0x00	; 0
    2b9e:	70 e0       	ldi	r23, 0x00	; 0
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	0e 94 a0 2c 	call	0x5940	; 0x5940 <__cmpdi2>
    2ba8:	20 f5       	brcc	.+72     	; 0x2bf2 <fat_resize_file+0x38a>
    {
        fd->pos = size;
    2baa:	d3 96       	adiw	r26, 0x33	; 51
    2bac:	2c 93       	st	X, r18
    2bae:	d3 97       	sbiw	r26, 0x33	; 51
    2bb0:	d4 96       	adiw	r26, 0x34	; 52
    2bb2:	3c 93       	st	X, r19
    2bb4:	d4 97       	sbiw	r26, 0x34	; 52
    2bb6:	d5 96       	adiw	r26, 0x35	; 53
    2bb8:	4c 93       	st	X, r20
    2bba:	d5 97       	sbiw	r26, 0x35	; 53
    2bbc:	d6 96       	adiw	r26, 0x36	; 54
    2bbe:	5c 93       	st	X, r21
    2bc0:	d6 97       	sbiw	r26, 0x36	; 54
    2bc2:	d7 96       	adiw	r26, 0x37	; 55
    2bc4:	1c 92       	st	X, r1
    2bc6:	d7 97       	sbiw	r26, 0x37	; 55
    2bc8:	d8 96       	adiw	r26, 0x38	; 56
    2bca:	1c 92       	st	X, r1
    2bcc:	d8 97       	sbiw	r26, 0x38	; 56
    2bce:	d9 96       	adiw	r26, 0x39	; 57
    2bd0:	1c 92       	st	X, r1
    2bd2:	d9 97       	sbiw	r26, 0x39	; 57
    2bd4:	da 96       	adiw	r26, 0x3a	; 58
    2bd6:	1c 92       	st	X, r1
    2bd8:	da 97       	sbiw	r26, 0x3a	; 58
        fd->pos_cluster = 0;
    2bda:	db 96       	adiw	r26, 0x3b	; 59
    2bdc:	1d 92       	st	X+, r1
    2bde:	1d 92       	st	X+, r1
    2be0:	1d 92       	st	X+, r1
    2be2:	1c 92       	st	X, r1
    2be4:	de 97       	sbiw	r26, 0x3e	; 62
    }

    return 1;
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	58 c0       	rjmp	.+176    	; 0x2c9a <fat_resize_file+0x432>
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    if(!fd)
        return 0;
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	56 c0       	rjmp	.+172    	; 0x2c9a <fat_resize_file+0x432>
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
            if(!cluster_new_chain)
                return 0;
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	54 c0       	rjmp	.+168    	; 0x2c9a <fat_resize_file+0x432>
    {
        fd->pos = size;
        fd->pos_cluster = 0;
    }

    return 1;
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	52 c0       	rjmp	.+164    	; 0x2c9a <fat_resize_file+0x432>
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
            if(!cluster_new_chain)
                return 0;
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	50 c0       	rjmp	.+160    	; 0x2c9a <fat_resize_file+0x432>
    2bfa:	d5 01       	movw	r26, r10
    2bfc:	c4 01       	movw	r24, r8
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	a1 09       	sbc	r26, r1
    2c02:	b1 09       	sbc	r27, r1
        if(size_new > cluster_size || cluster_num == 0)
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
    2c04:	bc 01       	movw	r22, r24
    2c06:	cd 01       	movw	r24, r26
    2c08:	64 0d       	add	r22, r4
    2c0a:	75 1d       	adc	r23, r5
    2c0c:	86 1d       	adc	r24, r6
    2c0e:	97 1d       	adc	r25, r7
    2c10:	a5 01       	movw	r20, r10
    2c12:	94 01       	movw	r18, r8
    2c14:	0e 94 b0 2b 	call	0x5760	; 0x5760 <__udivmodsi4>
    2c18:	89 01       	movw	r16, r18
    2c1a:	9a 01       	movw	r18, r20
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    2c1c:	40 e0       	ldi	r20, 0x00	; 0
    2c1e:	50 e0       	ldi	r21, 0x00	; 0
    2c20:	ba 01       	movw	r22, r20
    2c22:	f1 01       	movw	r30, r2
    2c24:	80 81       	ld	r24, Z
    2c26:	91 81       	ldd	r25, Z+1	; 0x01
    2c28:	0e 94 19 04 	call	0x832	; 0x832 <fat_append_clusters>
    2c2c:	6b 01       	movw	r12, r22
    2c2e:	7c 01       	movw	r14, r24
            if(!cluster_new_chain)
    2c30:	67 2b       	or	r22, r23
    2c32:	68 2b       	or	r22, r24
    2c34:	69 2b       	or	r22, r25
    2c36:	09 f0       	breq	.+2      	; 0x2c3a <fat_resize_file+0x3d2>
    2c38:	b4 ce       	rjmp	.-664    	; 0x29a2 <fat_resize_file+0x13a>
    2c3a:	dd cf       	rjmp	.-70     	; 0x2bf6 <fat_resize_file+0x38e>

        /* write new directory entry */
        fd->dir_entry.file_size = size;
        if(size == 0)
            fd->dir_entry.cluster = 0;
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    2c3c:	b1 01       	movw	r22, r2
    2c3e:	6e 5f       	subi	r22, 0xFE	; 254
    2c40:	7f 4f       	sbci	r23, 0xFF	; 255
    2c42:	d1 01       	movw	r26, r2
    2c44:	8d 91       	ld	r24, X+
    2c46:	9c 91       	ld	r25, X
    2c48:	0e 94 2b 0b 	call	0x1656	; 0x1656 <fat_write_dir_entry>
    2c4c:	81 11       	cpse	r24, r1
    2c4e:	dc ce       	rjmp	.-584    	; 0x2a08 <fat_resize_file+0x1a0>
    2c50:	24 c0       	rjmp	.+72     	; 0x2c9a <fat_resize_file+0x432>
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    2c52:	4c 01       	movw	r8, r24
    2c54:	a1 2c       	mov	r10, r1
    2c56:	b1 2c       	mov	r11, r1
    2c58:	2d 81       	ldd	r18, Y+5	; 0x05
    2c5a:	3e 81       	ldd	r19, Y+6	; 0x06
    2c5c:	4f 81       	ldd	r20, Y+7	; 0x07
    2c5e:	58 85       	ldd	r21, Y+8	; 0x08
    2c60:	82 16       	cp	r8, r18
    2c62:	93 06       	cpc	r9, r19
    2c64:	a4 06       	cpc	r10, r20
    2c66:	b5 06       	cpc	r11, r21
    2c68:	08 f4       	brcc	.+2      	; 0x2c6c <fat_resize_file+0x404>
    2c6a:	3e ce       	rjmp	.-900    	; 0x28e8 <fat_resize_file+0x80>
    2c6c:	29 01       	movw	r4, r18
    2c6e:	3a 01       	movw	r6, r20
    2c70:	c4 cf       	rjmp	.-120    	; 0x2bfa <fat_resize_file+0x392>
    2c72:	4c 01       	movw	r8, r24
    2c74:	a1 2c       	mov	r10, r1
    2c76:	b1 2c       	mov	r11, r1
    2c78:	4d 81       	ldd	r20, Y+5	; 0x05
    2c7a:	5e 81       	ldd	r21, Y+6	; 0x06
    2c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7e:	78 85       	ldd	r23, Y+8	; 0x08
    2c80:	84 16       	cp	r8, r20
    2c82:	95 06       	cpc	r9, r21
    2c84:	a6 06       	cpc	r10, r22
    2c86:	b7 06       	cpc	r11, r23
    2c88:	08 f4       	brcc	.+2      	; 0x2c8c <fat_resize_file+0x424>
    2c8a:	2e ce       	rjmp	.-932    	; 0x28e8 <fat_resize_file+0x80>
    2c8c:	2a 01       	movw	r4, r20
    2c8e:	3b 01       	movw	r6, r22
    2c90:	cd 84       	ldd	r12, Y+13	; 0x0d
    2c92:	de 84       	ldd	r13, Y+14	; 0x0e
    2c94:	ef 84       	ldd	r14, Y+15	; 0x0f
    2c96:	f8 88       	ldd	r15, Y+16	; 0x10
    2c98:	90 ce       	rjmp	.-736    	; 0x29ba <fat_resize_file+0x152>
        fd->pos = size;
        fd->pos_cluster = 0;
    }

    return 1;
}
    2c9a:	64 96       	adiw	r28, 0x14	; 20
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	cd bf       	out	0x3d, r28	; 61
    2ca6:	df 91       	pop	r29
    2ca8:	cf 91       	pop	r28
    2caa:	1f 91       	pop	r17
    2cac:	0f 91       	pop	r16
    2cae:	ff 90       	pop	r15
    2cb0:	ef 90       	pop	r14
    2cb2:	df 90       	pop	r13
    2cb4:	cf 90       	pop	r12
    2cb6:	bf 90       	pop	r11
    2cb8:	af 90       	pop	r10
    2cba:	9f 90       	pop	r9
    2cbc:	8f 90       	pop	r8
    2cbe:	7f 90       	pop	r7
    2cc0:	6f 90       	pop	r6
    2cc2:	5f 90       	pop	r5
    2cc4:	4f 90       	pop	r4
    2cc6:	3f 90       	pop	r3
    2cc8:	2f 90       	pop	r2
    2cca:	08 95       	ret

00002ccc <fat_seek_file>:
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    2ccc:	af 92       	push	r10
    2cce:	bf 92       	push	r11
    2cd0:	cf 92       	push	r12
    2cd2:	df 92       	push	r13
    2cd4:	ef 92       	push	r14
    2cd6:	ff 92       	push	r15
    2cd8:	0f 93       	push	r16
    2cda:	1f 93       	push	r17
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	ec 01       	movw	r28, r24
    if(!fd || !offset)
    2ce2:	89 2b       	or	r24, r25
    2ce4:	09 f4       	brne	.+2      	; 0x2ce8 <fat_seek_file+0x1c>
    2ce6:	55 c0       	rjmp	.+170    	; 0x2d92 <fat_seek_file+0xc6>
    2ce8:	61 15       	cp	r22, r1
    2cea:	71 05       	cpc	r23, r1
    2cec:	09 f4       	brne	.+2      	; 0x2cf0 <fat_seek_file+0x24>
    2cee:	53 c0       	rjmp	.+166    	; 0x2d96 <fat_seek_file+0xca>
        return 0;

    uint32_t new_pos = fd->pos;
    2cf0:	eb a9       	ldd	r30, Y+51	; 0x33
    2cf2:	5c a9       	ldd	r21, Y+52	; 0x34
    2cf4:	3d a9       	ldd	r19, Y+53	; 0x35
    2cf6:	2e a9       	ldd	r18, Y+54	; 0x36
    switch(whence)
    2cf8:	41 30       	cpi	r20, 0x01	; 1
    2cfa:	51 f0       	breq	.+20     	; 0x2d10 <fat_seek_file+0x44>
    2cfc:	18 f0       	brcs	.+6      	; 0x2d04 <fat_seek_file+0x38>
    2cfe:	42 30       	cpi	r20, 0x02	; 2
    2d00:	a9 f0       	breq	.+42     	; 0x2d2c <fat_seek_file+0x60>
    2d02:	4b c0       	rjmp	.+150    	; 0x2d9a <fat_seek_file+0xce>
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
    2d04:	fb 01       	movw	r30, r22
    2d06:	c0 80       	ld	r12, Z
    2d08:	d1 80       	ldd	r13, Z+1	; 0x01
    2d0a:	e2 80       	ldd	r14, Z+2	; 0x02
    2d0c:	f3 80       	ldd	r15, Z+3	; 0x03
            break;
    2d0e:	1b c0       	rjmp	.+54     	; 0x2d46 <fat_seek_file+0x7a>
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
        return 0;

    uint32_t new_pos = fd->pos;
    2d10:	8e 2f       	mov	r24, r30
    2d12:	95 2f       	mov	r25, r21
    2d14:	a3 2f       	mov	r26, r19
    2d16:	b2 2f       	mov	r27, r18
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
            break;
        case FAT_SEEK_CUR:
            new_pos += *offset;
    2d18:	fb 01       	movw	r30, r22
    2d1a:	c0 80       	ld	r12, Z
    2d1c:	d1 80       	ldd	r13, Z+1	; 0x01
    2d1e:	e2 80       	ldd	r14, Z+2	; 0x02
    2d20:	f3 80       	ldd	r15, Z+3	; 0x03
    2d22:	c8 0e       	add	r12, r24
    2d24:	d9 1e       	adc	r13, r25
    2d26:	ea 1e       	adc	r14, r26
    2d28:	fb 1e       	adc	r15, r27
            break;
    2d2a:	0d c0       	rjmp	.+26     	; 0x2d46 <fat_seek_file+0x7a>
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
    2d2c:	fb 01       	movw	r30, r22
    2d2e:	c0 80       	ld	r12, Z
    2d30:	d1 80       	ldd	r13, Z+1	; 0x01
    2d32:	e2 80       	ldd	r14, Z+2	; 0x02
    2d34:	f3 80       	ldd	r15, Z+3	; 0x03
    2d36:	8f a1       	ldd	r24, Y+39	; 0x27
    2d38:	98 a5       	ldd	r25, Y+40	; 0x28
    2d3a:	a9 a5       	ldd	r26, Y+41	; 0x29
    2d3c:	ba a5       	ldd	r27, Y+42	; 0x2a
    2d3e:	c8 0e       	add	r12, r24
    2d40:	d9 1e       	adc	r13, r25
    2d42:	ea 1e       	adc	r14, r26
    2d44:	fb 1e       	adc	r15, r27
    2d46:	5b 01       	movw	r10, r22
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
    2d48:	8f a1       	ldd	r24, Y+39	; 0x27
    2d4a:	98 a5       	ldd	r25, Y+40	; 0x28
    2d4c:	a9 a5       	ldd	r26, Y+41	; 0x29
    2d4e:	ba a5       	ldd	r27, Y+42	; 0x2a
    2d50:	8c 15       	cp	r24, r12
    2d52:	9d 05       	cpc	r25, r13
    2d54:	ae 05       	cpc	r26, r14
    2d56:	bf 05       	cpc	r27, r15
    2d58:	38 f4       	brcc	.+14     	; 0x2d68 <fat_seek_file+0x9c>
#if FAT_WRITE_SUPPORT
       && !fat_resize_file(fd, new_pos)
    2d5a:	b7 01       	movw	r22, r14
    2d5c:	a6 01       	movw	r20, r12
    2d5e:	ce 01       	movw	r24, r28
    2d60:	0e 94 34 14 	call	0x2868	; 0x2868 <fat_resize_file>
    2d64:	88 23       	and	r24, r24
    2d66:	d1 f0       	breq	.+52     	; 0x2d9c <fat_seek_file+0xd0>
#endif
       )
        return 0;

    fd->pos = new_pos;
    2d68:	97 01       	movw	r18, r14
    2d6a:	86 01       	movw	r16, r12
    2d6c:	cb aa       	std	Y+51, r12	; 0x33
    2d6e:	1c ab       	std	Y+52, r17	; 0x34
    2d70:	2d ab       	std	Y+53, r18	; 0x35
    2d72:	3e ab       	std	Y+54, r19	; 0x36
    2d74:	1f aa       	std	Y+55, r1	; 0x37
    2d76:	18 ae       	std	Y+56, r1	; 0x38
    2d78:	19 ae       	std	Y+57, r1	; 0x39
    2d7a:	1a ae       	std	Y+58, r1	; 0x3a
    fd->pos_cluster = 0;
    2d7c:	1b ae       	std	Y+59, r1	; 0x3b
    2d7e:	1c ae       	std	Y+60, r1	; 0x3c
    2d80:	1d ae       	std	Y+61, r1	; 0x3d
    2d82:	1e ae       	std	Y+62, r1	; 0x3e

    *offset = (int32_t) new_pos;
    2d84:	f5 01       	movw	r30, r10
    2d86:	c0 82       	st	Z, r12
    2d88:	d1 82       	std	Z+1, r13	; 0x01
    2d8a:	e2 82       	std	Z+2, r14	; 0x02
    2d8c:	f3 82       	std	Z+3, r15	; 0x03
    return 1;
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	05 c0       	rjmp	.+10     	; 0x2d9c <fat_seek_file+0xd0>
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
        return 0;
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	03 c0       	rjmp	.+6      	; 0x2d9c <fat_seek_file+0xd0>
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	01 c0       	rjmp	.+2      	; 0x2d9c <fat_seek_file+0xd0>
            break;
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
            break;
        default:
            return 0;
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    fd->pos = new_pos;
    fd->pos_cluster = 0;

    *offset = (int32_t) new_pos;
    return 1;
}
    2d9c:	df 91       	pop	r29
    2d9e:	cf 91       	pop	r28
    2da0:	1f 91       	pop	r17
    2da2:	0f 91       	pop	r16
    2da4:	ff 90       	pop	r15
    2da6:	ef 90       	pop	r14
    2da8:	df 90       	pop	r13
    2daa:	cf 90       	pop	r12
    2dac:	bf 90       	pop	r11
    2dae:	af 90       	pop	r10
    2db0:	08 95       	ret

00002db2 <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    2db2:	cf 93       	push	r28
    2db4:	df 93       	push	r29
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    2db6:	00 97       	sbiw	r24, 0x00	; 0
    2db8:	b1 f0       	breq	.+44     	; 0x2de6 <fat_open_dir+0x34>
    2dba:	61 15       	cp	r22, r1
    2dbc:	71 05       	cpc	r23, r1
    2dbe:	b1 f0       	breq	.+44     	; 0x2dec <fat_open_dir+0x3a>
    2dc0:	fb 01       	movw	r30, r22
    2dc2:	20 a1       	ldd	r18, Z+32	; 0x20
    2dc4:	24 ff       	sbrs	r18, 4
    2dc6:	15 c0       	rjmp	.+42     	; 0x2df2 <fat_open_dir+0x40>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    2dc8:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
    2dcc:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
    2dd0:	23 2b       	or	r18, r19
    2dd2:	91 f0       	breq	.+36     	; 0x2df8 <fat_open_dir+0x46>
    2dd4:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <__data_end+0x39>
    2dd8:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <__data_end+0x3a>
    2ddc:	23 2b       	or	r18, r19
    2dde:	79 f0       	breq	.+30     	; 0x2dfe <fat_open_dir+0x4c>
            break;

        ++dd;
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	25 c0       	rjmp	.+74     	; 0x2e30 <fat_open_dir+0x7e>
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
        return 0;
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	22 c0       	rjmp	.+68     	; 0x2e30 <fat_open_dir+0x7e>
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	1f c0       	rjmp	.+62     	; 0x2e30 <fat_open_dir+0x7e>
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	1c c0       	rjmp	.+56     	; 0x2e30 <fat_open_dir+0x7e>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    2df8:	c0 e1       	ldi	r28, 0x10	; 16
    2dfa:	d1 e0       	ldi	r29, 0x01	; 1
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <fat_open_dir+0x50>
    2dfe:	c9 e4       	ldi	r28, 0x49	; 73
    2e00:	d1 e0       	ldi	r29, 0x01	; 1
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    2e02:	de 01       	movw	r26, r28
    2e04:	12 96       	adiw	r26, 0x02	; 2
    2e06:	21 e3       	ldi	r18, 0x31	; 49
    2e08:	fb 01       	movw	r30, r22
    2e0a:	01 90       	ld	r0, Z+
    2e0c:	0d 92       	st	X+, r0
    2e0e:	2a 95       	dec	r18
    2e10:	e1 f7       	brne	.-8      	; 0x2e0a <fat_open_dir+0x58>
    dd->fs = fs;
    2e12:	99 83       	std	Y+1, r25	; 0x01
    2e14:	88 83       	st	Y, r24
    dd->entry_cluster = dir_entry->cluster;
    2e16:	fb 01       	movw	r30, r22
    2e18:	81 a1       	ldd	r24, Z+33	; 0x21
    2e1a:	92 a1       	ldd	r25, Z+34	; 0x22
    2e1c:	a3 a1       	ldd	r26, Z+35	; 0x23
    2e1e:	b4 a1       	ldd	r27, Z+36	; 0x24
    2e20:	8b ab       	std	Y+51, r24	; 0x33
    2e22:	9c ab       	std	Y+52, r25	; 0x34
    2e24:	ad ab       	std	Y+53, r26	; 0x35
    2e26:	be ab       	std	Y+54, r27	; 0x36
    dd->entry_offset = 0;
    2e28:	18 ae       	std	Y+56, r1	; 0x38
    2e2a:	1f aa       	std	Y+55, r1	; 0x37

    return dd;
    2e2c:	8c 2f       	mov	r24, r28
    2e2e:	9d 2f       	mov	r25, r29
}
    2e30:	df 91       	pop	r29
    2e32:	cf 91       	pop	r28
    2e34:	08 95       	ret

00002e36 <fat_close_dir>:
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    if(dd)
    2e36:	00 97       	sbiw	r24, 0x00	; 0
    2e38:	19 f0       	breq	.+6      	; 0x2e40 <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	11 82       	std	Z+1, r1	; 0x01
    2e3e:	10 82       	st	Z, r1
    2e40:	08 95       	ret

00002e42 <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    2e42:	fc 01       	movw	r30, r24
    if(!dd)
    2e44:	89 2b       	or	r24, r25
    2e46:	61 f0       	breq	.+24     	; 0x2e60 <fat_reset_dir+0x1e>
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    2e48:	83 a1       	ldd	r24, Z+35	; 0x23
    2e4a:	94 a1       	ldd	r25, Z+36	; 0x24
    2e4c:	a5 a1       	ldd	r26, Z+37	; 0x25
    2e4e:	b6 a1       	ldd	r27, Z+38	; 0x26
    2e50:	83 ab       	std	Z+51, r24	; 0x33
    2e52:	94 ab       	std	Z+52, r25	; 0x34
    2e54:	a5 ab       	std	Z+53, r26	; 0x35
    2e56:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    2e58:	10 ae       	std	Z+56, r1	; 0x38
    2e5a:	17 aa       	std	Z+55, r1	; 0x37
    return 1;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	08 95       	ret
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;
    2e60:	80 e0       	ldi	r24, 0x00	; 0

    dd->entry_cluster = dd->dir_entry.cluster;
    dd->entry_offset = 0;
    return 1;
}
    2e62:	08 95       	ret

00002e64 <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    2e64:	2f 92       	push	r2
    2e66:	3f 92       	push	r3
    2e68:	4f 92       	push	r4
    2e6a:	5f 92       	push	r5
    2e6c:	6f 92       	push	r6
    2e6e:	7f 92       	push	r7
    2e70:	8f 92       	push	r8
    2e72:	9f 92       	push	r9
    2e74:	af 92       	push	r10
    2e76:	bf 92       	push	r11
    2e78:	cf 92       	push	r12
    2e7a:	df 92       	push	r13
    2e7c:	ef 92       	push	r14
    2e7e:	ff 92       	push	r15
    2e80:	0f 93       	push	r16
    2e82:	1f 93       	push	r17
    2e84:	cf 93       	push	r28
    2e86:	df 93       	push	r29
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
    2e8c:	e6 97       	sbiw	r28, 0x36	; 54
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
    if(!dd || !dir_entry)
    2e98:	00 97       	sbiw	r24, 0x00	; 0
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <fat_read_dir+0x3a>
    2e9c:	f3 c0       	rjmp	.+486    	; 0x3084 <fat_read_dir+0x220>
    2e9e:	61 15       	cp	r22, r1
    2ea0:	71 05       	cpc	r23, r1
    2ea2:	09 f4       	brne	.+2      	; 0x2ea6 <fat_read_dir+0x42>
    2ea4:	f1 c0       	rjmp	.+482    	; 0x3088 <fat_read_dir+0x224>
    2ea6:	9e ab       	std	Y+54, r25	; 0x36
    2ea8:	8d ab       	std	Y+53, r24	; 0x35
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    2eaa:	fc 01       	movw	r30, r24
    2eac:	20 80       	ld	r2, Z
    2eae:	31 80       	ldd	r3, Z+1	; 0x01
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    2eb0:	f1 01       	movw	r30, r2
    2eb2:	60 8c       	ldd	r6, Z+24	; 0x18
    2eb4:	71 8c       	ldd	r7, Z+25	; 0x19
    cluster_t cluster_num = dd->entry_cluster;
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	23 a9       	ldd	r18, Z+51	; 0x33
    2eba:	34 a9       	ldd	r19, Z+52	; 0x34
    2ebc:	45 a9       	ldd	r20, Z+53	; 0x35
    2ebe:	56 a9       	ldd	r21, Z+54	; 0x36
    2ec0:	29 ab       	std	Y+49, r18	; 0x31
    2ec2:	3a ab       	std	Y+50, r19	; 0x32
    2ec4:	4b ab       	std	Y+51, r20	; 0x33
    2ec6:	5c ab       	std	Y+52, r21	; 0x34
    uint16_t cluster_offset = dd->entry_offset;
    2ec8:	47 a8       	ldd	r4, Z+55	; 0x37
    2eca:	50 ac       	ldd	r5, Z+56	; 0x38
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
    2ecc:	46 14       	cp	r4, r6
    2ece:	57 04       	cpc	r5, r7
    2ed0:	20 f0       	brcs	.+8      	; 0x2eda <fat_read_dir+0x76>
        /* The latest call hit the border of the last cluster in
         * the chain, but it still returned a directory entry.
         * So we now reset the handle and signal the caller the
         * end of the listing.
         */
        fat_reset_dir(dd);
    2ed2:	0e 94 21 17 	call	0x2e42	; 0x2e42 <fat_reset_dir>
        return 0;
    2ed6:	10 e0       	ldi	r17, 0x00	; 0
    2ed8:	da c0       	rjmp	.+436    	; 0x308e <fat_read_dir+0x22a>
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    2eda:	9e 01       	movw	r18, r28
    2edc:	2f 5f       	subi	r18, 0xFF	; 255
    2ede:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee0:	86 e0       	ldi	r24, 0x06	; 6
    2ee2:	f9 01       	movw	r30, r18
    2ee4:	11 92       	st	Z+, r1
    2ee6:	8a 95       	dec	r24
    2ee8:	e9 f7       	brne	.-6      	; 0x2ee4 <fat_read_dir+0x80>
    memset(dir_entry, 0, sizeof(*dir_entry));
    2eea:	81 e3       	ldi	r24, 0x31	; 49
    2eec:	fb 01       	movw	r30, r22
    2eee:	11 92       	st	Z+, r1
    2ef0:	8a 95       	dec	r24
    2ef2:	e9 f7       	brne	.-6      	; 0x2eee <fat_read_dir+0x8a>
    arg.dir_entry = dir_entry;
    2ef4:	7a 83       	std	Y+2, r23	; 0x02
    2ef6:	69 83       	std	Y+1, r22	; 0x01

    /* check if we read from the root directory */
    if(cluster_num == 0)
    2ef8:	29 a9       	ldd	r18, Y+49	; 0x31
    2efa:	3a a9       	ldd	r19, Y+50	; 0x32
    2efc:	4b a9       	ldd	r20, Y+51	; 0x33
    2efe:	5c a9       	ldd	r21, Y+52	; 0x34
    2f00:	23 2b       	or	r18, r19
    2f02:	24 2b       	or	r18, r20
    2f04:	25 2b       	or	r18, r21
    2f06:	09 f0       	breq	.+2      	; 0x2f0a <fat_read_dir+0xa6>
    2f08:	a7 c0       	rjmp	.+334    	; 0x3058 <fat_read_dir+0x1f4>
    {
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
    2f0a:	d1 01       	movw	r26, r2
    2f0c:	ed 91       	ld	r30, X+
    2f0e:	fc 91       	ld	r31, X
    2f10:	11 97       	sbiw	r26, 0x01	; 1
    2f12:	80 85       	ldd	r24, Z+8	; 0x08
    2f14:	8b 30       	cpi	r24, 0x0B	; 11
    2f16:	59 f4       	brne	.+22     	; 0x2f2e <fat_read_dir+0xca>
            cluster_num = header->root_dir_cluster;
    2f18:	9a 96       	adiw	r26, 0x2a	; 42
    2f1a:	2d 91       	ld	r18, X+
    2f1c:	3d 91       	ld	r19, X+
    2f1e:	4d 91       	ld	r20, X+
    2f20:	5c 91       	ld	r21, X
    2f22:	9d 97       	sbiw	r26, 0x2d	; 45
    2f24:	29 ab       	std	Y+49, r18	; 0x31
    2f26:	3a ab       	std	Y+50, r19	; 0x32
    2f28:	4b ab       	std	Y+51, r20	; 0x33
    2f2a:	5c ab       	std	Y+52, r21	; 0x34
    2f2c:	95 c0       	rjmp	.+298    	; 0x3058 <fat_read_dir+0x1f4>
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    2f2e:	f1 01       	movw	r30, r2
    2f30:	22 8d       	ldd	r18, Z+26	; 0x1a
    2f32:	33 8d       	ldd	r19, Z+27	; 0x1b
    2f34:	82 a1       	ldd	r24, Z+34	; 0x22
    2f36:	93 a1       	ldd	r25, Z+35	; 0x23
    2f38:	39 01       	movw	r6, r18
    2f3a:	68 1a       	sub	r6, r24
    2f3c:	79 0a       	sbc	r7, r25
    2f3e:	8c c0       	rjmp	.+280    	; 0x3058 <fat_read_dir+0x1f4>
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
    2f40:	93 01       	movw	r18, r6
    2f42:	24 19       	sub	r18, r4
    2f44:	35 09       	sbc	r19, r5
    2f46:	38 ab       	std	Y+48, r19	; 0x30
    2f48:	2f a7       	std	Y+47, r18	; 0x2f
        offset_t pos = cluster_offset;
    2f4a:	a2 01       	movw	r20, r4
    2f4c:	60 e0       	ldi	r22, 0x00	; 0
    2f4e:	70 e0       	ldi	r23, 0x00	; 0
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	dc 01       	movw	r26, r24
    2f56:	4f a2       	std	Y+39, r4	; 0x27
    2f58:	58 a7       	std	Y+40, r21	; 0x28
    2f5a:	69 a7       	std	Y+41, r22	; 0x29
    2f5c:	7a a7       	std	Y+42, r23	; 0x2a
    2f5e:	8b a7       	std	Y+43, r24	; 0x2b
    2f60:	9c a7       	std	Y+44, r25	; 0x2c
    2f62:	ad a7       	std	Y+45, r26	; 0x2d
    2f64:	be a7       	std	Y+46, r27	; 0x2e
        if(cluster_num == 0)
    2f66:	69 a9       	ldd	r22, Y+49	; 0x31
    2f68:	7a a9       	ldd	r23, Y+50	; 0x32
    2f6a:	8b a9       	ldd	r24, Y+51	; 0x33
    2f6c:	9c a9       	ldd	r25, Y+52	; 0x34
    2f6e:	67 2b       	or	r22, r23
    2f70:	68 2b       	or	r22, r24
    2f72:	69 2b       	or	r22, r25
    2f74:	19 f5       	brne	.+70     	; 0x2fbc <fat_read_dir+0x158>
            pos += header->root_dir_offset;
    2f76:	24 2d       	mov	r18, r4
    2f78:	35 2f       	mov	r19, r21
    2f7a:	40 e0       	ldi	r20, 0x00	; 0
    2f7c:	50 e0       	ldi	r21, 0x00	; 0
    2f7e:	60 e0       	ldi	r22, 0x00	; 0
    2f80:	70 e0       	ldi	r23, 0x00	; 0
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	d1 01       	movw	r26, r2
    2f88:	92 96       	adiw	r26, 0x22	; 34
    2f8a:	ac 90       	ld	r10, X
    2f8c:	92 97       	sbiw	r26, 0x22	; 34
    2f8e:	93 96       	adiw	r26, 0x23	; 35
    2f90:	bc 90       	ld	r11, X
    2f92:	93 97       	sbiw	r26, 0x23	; 35
    2f94:	94 96       	adiw	r26, 0x24	; 36
    2f96:	cc 90       	ld	r12, X
    2f98:	94 97       	sbiw	r26, 0x24	; 36
    2f9a:	95 96       	adiw	r26, 0x25	; 37
    2f9c:	dc 90       	ld	r13, X
    2f9e:	95 97       	sbiw	r26, 0x25	; 37
    2fa0:	96 96       	adiw	r26, 0x26	; 38
    2fa2:	ec 90       	ld	r14, X
    2fa4:	96 97       	sbiw	r26, 0x26	; 38
    2fa6:	97 96       	adiw	r26, 0x27	; 39
    2fa8:	fc 90       	ld	r15, X
    2faa:	97 97       	sbiw	r26, 0x27	; 39
    2fac:	98 96       	adiw	r26, 0x28	; 40
    2fae:	0c 91       	ld	r16, X
    2fb0:	98 97       	sbiw	r26, 0x28	; 40
    2fb2:	99 96       	adiw	r26, 0x29	; 41
    2fb4:	1c 91       	ld	r17, X
    2fb6:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
    2fba:	11 c0       	rjmp	.+34     	; 0x2fde <fat_read_dir+0x17a>
        else
            pos += fat_cluster_offset(fs, cluster_num);
    2fbc:	49 a9       	ldd	r20, Y+49	; 0x31
    2fbe:	5a a9       	ldd	r21, Y+50	; 0x32
    2fc0:	6b a9       	ldd	r22, Y+51	; 0x33
    2fc2:	7c a9       	ldd	r23, Y+52	; 0x34
    2fc4:	c1 01       	movw	r24, r2
    2fc6:	0e 94 97 06 	call	0xd2e	; 0xd2e <fat_cluster_offset>
    2fca:	af a0       	ldd	r10, Y+39	; 0x27
    2fcc:	b8 a4       	ldd	r11, Y+40	; 0x28
    2fce:	c1 2c       	mov	r12, r1
    2fd0:	d1 2c       	mov	r13, r1
    2fd2:	e1 2c       	mov	r14, r1
    2fd4:	f1 2c       	mov	r15, r1
    2fd6:	00 e0       	ldi	r16, 0x00	; 0
    2fd8:	10 e0       	ldi	r17, 0x00	; 0
    2fda:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>

        arg.bytes_read = 0;
    2fde:	1c 82       	std	Y+4, r1	; 0x04
    2fe0:	1b 82       	std	Y+3, r1	; 0x03
        if(!fs->partition->device_read_interval(pos,
    2fe2:	d1 01       	movw	r26, r2
    2fe4:	ed 91       	ld	r30, X+
    2fe6:	fc 91       	ld	r31, X
    2fe8:	02 80       	ldd	r0, Z+2	; 0x02
    2fea:	f3 81       	ldd	r31, Z+3	; 0x03
    2fec:	e0 2d       	mov	r30, r0
    2fee:	de 01       	movw	r26, r28
    2ff0:	11 96       	adiw	r26, 0x01	; 1
    2ff2:	4d 01       	movw	r8, r26
    2ff4:	0f 2e       	mov	r0, r31
    2ff6:	f8 e8       	ldi	r31, 0x88	; 136
    2ff8:	af 2e       	mov	r10, r31
    2ffa:	f7 e0       	ldi	r31, 0x07	; 7
    2ffc:	bf 2e       	mov	r11, r31
    2ffe:	f0 2d       	mov	r31, r0
    3000:	cf a4       	ldd	r12, Y+47	; 0x2f
    3002:	d8 a8       	ldd	r13, Y+48	; 0x30
    3004:	68 94       	set
    3006:	ee 24       	eor	r14, r14
    3008:	e5 f8       	bld	r14, 5
    300a:	f1 2c       	mov	r15, r1
    300c:	8e 01       	movw	r16, r28
    300e:	09 5f       	subi	r16, 0xF9	; 249
    3010:	1f 4f       	sbci	r17, 0xFF	; 255
    3012:	09 95       	icall
    3014:	88 23       	and	r24, r24
    3016:	d1 f1       	breq	.+116    	; 0x308c <fat_read_dir+0x228>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    3018:	8b 81       	ldd	r24, Y+3	; 0x03
    301a:	9c 81       	ldd	r25, Y+4	; 0x04
    301c:	48 0e       	add	r4, r24
    301e:	59 1e       	adc	r5, r25

        if(cluster_offset >= cluster_size)
    3020:	46 14       	cp	r4, r6
    3022:	57 04       	cpc	r5, r7
    3024:	c8 f0       	brcs	.+50     	; 0x3058 <fat_read_dir+0x1f4>
        {
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
    3026:	49 a9       	ldd	r20, Y+49	; 0x31
    3028:	5a a9       	ldd	r21, Y+50	; 0x32
    302a:	6b a9       	ldd	r22, Y+51	; 0x33
    302c:	7c a9       	ldd	r23, Y+52	; 0x34
    302e:	c1 01       	movw	r24, r2
    3030:	0e 94 9c 01 	call	0x338	; 0x338 <fat_get_next_cluster>
    3034:	69 ab       	std	Y+49, r22	; 0x31
    3036:	7a ab       	std	Y+50, r23	; 0x32
    3038:	8b ab       	std	Y+51, r24	; 0x33
    303a:	9c ab       	std	Y+52, r25	; 0x34
    303c:	67 2b       	or	r22, r23
    303e:	68 2b       	or	r22, r24
    3040:	69 2b       	or	r22, r25
    3042:	41 f4       	brne	.+16     	; 0x3054 <fat_read_dir+0x1f0>
                cluster_offset = 0;
                continue;
            }

            /* we are at the end of the cluster chain */
            if(!arg.finished)
    3044:	1e 81       	ldd	r17, Y+6	; 0x06
    3046:	11 11       	cpse	r17, r1
    3048:	0b c0       	rjmp	.+22     	; 0x3060 <fat_read_dir+0x1fc>
            {
                /* directory entry not found, reset directory handle */
                fat_reset_dir(dd);
    304a:	8d a9       	ldd	r24, Y+53	; 0x35
    304c:	9e a9       	ldd	r25, Y+54	; 0x36
    304e:	0e 94 21 17 	call	0x2e42	; 0x2e42 <fat_reset_dir>
                return 0;
    3052:	1d c0       	rjmp	.+58     	; 0x308e <fat_read_dir+0x22a>
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
            {
                cluster_offset = 0;
    3054:	41 2c       	mov	r4, r1
    3056:	51 2c       	mov	r5, r1
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    3058:	8e 81       	ldd	r24, Y+6	; 0x06
    305a:	88 23       	and	r24, r24
    305c:	09 f4       	brne	.+2      	; 0x3060 <fat_read_dir+0x1fc>
    305e:	70 cf       	rjmp	.-288    	; 0x2f40 <fat_read_dir+0xdc>

            break;
        }
    }

    dd->entry_cluster = cluster_num;
    3060:	29 a9       	ldd	r18, Y+49	; 0x31
    3062:	3a a9       	ldd	r19, Y+50	; 0x32
    3064:	4b a9       	ldd	r20, Y+51	; 0x33
    3066:	5c a9       	ldd	r21, Y+52	; 0x34
    3068:	ad a9       	ldd	r26, Y+53	; 0x35
    306a:	be a9       	ldd	r27, Y+54	; 0x36
    306c:	d3 96       	adiw	r26, 0x33	; 51
    306e:	2d 93       	st	X+, r18
    3070:	3d 93       	st	X+, r19
    3072:	4d 93       	st	X+, r20
    3074:	5c 93       	st	X, r21
    3076:	d6 97       	sbiw	r26, 0x36	; 54
    dd->entry_offset = cluster_offset;
    3078:	d8 96       	adiw	r26, 0x38	; 56
    307a:	5c 92       	st	X, r5
    307c:	4e 92       	st	-X, r4
    307e:	d7 97       	sbiw	r26, 0x37	; 55

    return arg.finished;
    3080:	1e 81       	ldd	r17, Y+6	; 0x06
    3082:	05 c0       	rjmp	.+10     	; 0x308e <fat_read_dir+0x22a>
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    if(!dd || !dir_entry)
        return 0;
    3084:	10 e0       	ldi	r17, 0x00	; 0
    3086:	03 c0       	rjmp	.+6      	; 0x308e <fat_read_dir+0x22a>
    3088:	10 e0       	ldi	r17, 0x00	; 0
    308a:	01 c0       	rjmp	.+2      	; 0x308e <fat_read_dir+0x22a>
    308c:	18 2f       	mov	r17, r24

    dd->entry_cluster = cluster_num;
    dd->entry_offset = cluster_offset;

    return arg.finished;
}
    308e:	81 2f       	mov	r24, r17
    3090:	e6 96       	adiw	r28, 0x36	; 54
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	f8 94       	cli
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	0f be       	out	0x3f, r0	; 63
    309a:	cd bf       	out	0x3d, r28	; 61
    309c:	df 91       	pop	r29
    309e:	cf 91       	pop	r28
    30a0:	1f 91       	pop	r17
    30a2:	0f 91       	pop	r16
    30a4:	ff 90       	pop	r15
    30a6:	ef 90       	pop	r14
    30a8:	df 90       	pop	r13
    30aa:	cf 90       	pop	r12
    30ac:	bf 90       	pop	r11
    30ae:	af 90       	pop	r10
    30b0:	9f 90       	pop	r9
    30b2:	8f 90       	pop	r8
    30b4:	7f 90       	pop	r7
    30b6:	6f 90       	pop	r6
    30b8:	5f 90       	pop	r5
    30ba:	4f 90       	pop	r4
    30bc:	3f 90       	pop	r3
    30be:	2f 90       	pop	r2
    30c0:	08 95       	ret

000030c2 <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    30c2:	4f 92       	push	r4
    30c4:	5f 92       	push	r5
    30c6:	6f 92       	push	r6
    30c8:	7f 92       	push	r7
    30ca:	8f 92       	push	r8
    30cc:	9f 92       	push	r9
    30ce:	af 92       	push	r10
    30d0:	bf 92       	push	r11
    30d2:	cf 92       	push	r12
    30d4:	df 92       	push	r13
    30d6:	ef 92       	push	r14
    30d8:	ff 92       	push	r15
    30da:	0f 93       	push	r16
    30dc:	1f 93       	push	r17
    30de:	cf 93       	push	r28
    30e0:	df 93       	push	r29
    30e2:	4c 01       	movw	r8, r24
    30e4:	6b 01       	movw	r12, r22
    30e6:	ea 01       	movw	r28, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    30e8:	89 2b       	or	r24, r25
    30ea:	09 f4       	brne	.+2      	; 0x30ee <fat_get_dir_entry_of_path+0x2c>
    30ec:	76 c0       	rjmp	.+236    	; 0x31da <fat_get_dir_entry_of_path+0x118>
    30ee:	61 15       	cp	r22, r1
    30f0:	71 05       	cpc	r23, r1
    30f2:	09 f4       	brne	.+2      	; 0x30f6 <fat_get_dir_entry_of_path+0x34>
    30f4:	74 c0       	rjmp	.+232    	; 0x31de <fat_get_dir_entry_of_path+0x11c>
    30f6:	fb 01       	movw	r30, r22
    30f8:	80 81       	ld	r24, Z
    30fa:	88 23       	and	r24, r24
    30fc:	09 f4       	brne	.+2      	; 0x3100 <fat_get_dir_entry_of_path+0x3e>
    30fe:	71 c0       	rjmp	.+226    	; 0x31e2 <fat_get_dir_entry_of_path+0x120>
    3100:	20 97       	sbiw	r28, 0x00	; 0
    3102:	09 f4       	brne	.+2      	; 0x3106 <fat_get_dir_entry_of_path+0x44>
    3104:	70 c0       	rjmp	.+224    	; 0x31e6 <fat_get_dir_entry_of_path+0x124>
        return 0;

    if(path[0] == '/')
    3106:	8f 32       	cpi	r24, 0x2F	; 47
    3108:	19 f4       	brne	.+6      	; 0x3110 <fat_get_dir_entry_of_path+0x4e>
        ++path;
    310a:	ff ef       	ldi	r31, 0xFF	; 255
    310c:	cf 1a       	sub	r12, r31
    310e:	df 0a       	sbc	r13, r31

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    3110:	81 e3       	ldi	r24, 0x31	; 49
    3112:	fe 01       	movw	r30, r28
    3114:	11 92       	st	Z+, r1
    3116:	8a 95       	dec	r24
    3118:	e9 f7       	brne	.-6      	; 0x3114 <fat_get_dir_entry_of_path+0x52>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    311a:	80 e1       	ldi	r24, 0x10	; 16
    311c:	88 a3       	std	Y+32, r24	; 0x20

    while(1)
    {
        if(path[0] == '\0')
    311e:	f6 01       	movw	r30, r12
    3120:	80 81       	ld	r24, Z
    3122:	88 23       	and	r24, r24
    3124:	09 f4       	brne	.+2      	; 0x3128 <fat_get_dir_entry_of_path+0x66>
    3126:	61 c0       	rjmp	.+194    	; 0x31ea <fat_get_dir_entry_of_path+0x128>
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
    3128:	41 2c       	mov	r4, r1
    312a:	51 2c       	mov	r5, r1
    while(1)
    {
        if(path[0] == '\0')
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    312c:	be 01       	movw	r22, r28
    312e:	c4 01       	movw	r24, r8
    3130:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <fat_open_dir>
    3134:	8c 01       	movw	r16, r24
        if(!dd)
    3136:	89 2b       	or	r24, r25
    3138:	09 f4       	brne	.+2      	; 0x313c <fat_get_dir_entry_of_path+0x7a>
    313a:	59 c0       	rjmp	.+178    	; 0x31ee <fat_get_dir_entry_of_path+0x12c>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    313c:	6f e2       	ldi	r22, 0x2F	; 47
    313e:	70 e0       	ldi	r23, 0x00	; 0
    3140:	c6 01       	movw	r24, r12
    3142:	0e 94 dc 2c 	call	0x59b8	; 0x59b8 <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    3146:	00 97       	sbiw	r24, 0x00	; 0
    3148:	41 f0       	breq	.+16     	; 0x315a <fat_get_dir_entry_of_path+0x98>
        {
            length_to_sep = sub_path - path;
    314a:	e8 2e       	mov	r14, r24
    314c:	ec 18       	sub	r14, r12
            ++sub_path;
    314e:	5c 01       	movw	r10, r24
    3150:	ff ef       	ldi	r31, 0xFF	; 255
    3152:	af 1a       	sub	r10, r31
    3154:	bf 0a       	sbc	r11, r31
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    3156:	f1 2c       	mov	r15, r1
    3158:	2d c0       	rjmp	.+90     	; 0x31b4 <fat_get_dir_entry_of_path+0xf2>
            length_to_sep = sub_path - path;
            ++sub_path;
        }
        else
        {
            length_to_sep = strlen(path);
    315a:	f6 01       	movw	r30, r12
    315c:	01 90       	ld	r0, Z+
    315e:	00 20       	and	r0, r0
    3160:	e9 f7       	brne	.-6      	; 0x315c <fat_get_dir_entry_of_path+0x9a>
    3162:	31 97       	sbiw	r30, 0x01	; 1
    3164:	ec 19       	sub	r30, r12
    3166:	fd 09       	sbc	r31, r13
    3168:	ee 2e       	mov	r14, r30
            sub_path = path + length_to_sep;
    316a:	56 01       	movw	r10, r12
    316c:	ae 0e       	add	r10, r30
    316e:	b1 1c       	adc	r11, r1
    3170:	f2 cf       	rjmp	.-28     	; 0x3156 <fat_get_dir_entry_of_path+0x94>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    3172:	fe 01       	movw	r30, r28
    3174:	01 90       	ld	r0, Z+
    3176:	00 20       	and	r0, r0
    3178:	e9 f7       	brne	.-6      	; 0x3174 <fat_get_dir_entry_of_path+0xb2>
    317a:	31 97       	sbiw	r30, 0x01	; 1
    317c:	3f 01       	movw	r6, r30
    317e:	6c 1a       	sub	r6, r28
    3180:	7d 0a       	sbc	r7, r29
    3182:	6e 14       	cp	r6, r14
    3184:	7f 04       	cpc	r7, r15
    3186:	b1 f4       	brne	.+44     	; 0x31b4 <fat_get_dir_entry_of_path+0xf2>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
    3188:	a3 01       	movw	r20, r6
    318a:	be 01       	movw	r22, r28
    318c:	c6 01       	movw	r24, r12
    318e:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <strncmp>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    3192:	89 2b       	or	r24, r25
    3194:	79 f4       	brne	.+30     	; 0x31b4 <fat_get_dir_entry_of_path+0xf2>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
    3196:	c8 01       	movw	r24, r16
    3198:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <fat_close_dir>
            dd = 0;

            if(path[length_to_sep] == '\0')
    319c:	f6 01       	movw	r30, r12
    319e:	e6 0d       	add	r30, r6
    31a0:	f7 1d       	adc	r31, r7
    31a2:	80 81       	ld	r24, Z
    31a4:	88 23       	and	r24, r24
    31a6:	29 f1       	breq	.+74     	; 0x31f2 <fat_get_dir_entry_of_path+0x130>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    31a8:	98 a1       	ldd	r25, Y+32	; 0x20
    31aa:	89 2f       	mov	r24, r25
    31ac:	80 71       	andi	r24, 0x10	; 16
    31ae:	94 fd       	sbrc	r25, 4
    31b0:	08 c0       	rjmp	.+16     	; 0x31c2 <fat_get_dir_entry_of_path+0x100>
    31b2:	20 c0       	rjmp	.+64     	; 0x31f4 <fat_get_dir_entry_of_path+0x132>
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    31b4:	be 01       	movw	r22, r28
    31b6:	c8 01       	movw	r24, r16
    31b8:	0e 94 32 17 	call	0x2e64	; 0x2e64 <fat_read_dir>
    31bc:	81 11       	cpse	r24, r1
    31be:	d9 cf       	rjmp	.-78     	; 0x3172 <fat_get_dir_entry_of_path+0xb0>
    31c0:	03 c0       	rjmp	.+6      	; 0x31c8 <fat_get_dir_entry_of_path+0x106>
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
            {
                /* we found a parent directory of the file we are searching for */
                path = sub_path;
    31c2:	65 01       	movw	r12, r10
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
    31c4:	04 2d       	mov	r16, r4
    31c6:	15 2d       	mov	r17, r5

            /* a parent of the file exists, but not the file itself */
            return 0;
        }

        fat_close_dir(dd);
    31c8:	c8 01       	movw	r24, r16
    31ca:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <fat_close_dir>
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    31ce:	f6 01       	movw	r30, r12
    31d0:	80 81       	ld	r24, Z
    31d2:	81 11       	cpse	r24, r1
    31d4:	ab cf       	rjmp	.-170    	; 0x312c <fat_get_dir_entry_of_path+0x6a>
            return 1;
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	0d c0       	rjmp	.+26     	; 0x31f4 <fat_get_dir_entry_of_path+0x132>
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
        return 0;
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	0b c0       	rjmp	.+22     	; 0x31f4 <fat_get_dir_entry_of_path+0x132>
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	09 c0       	rjmp	.+18     	; 0x31f4 <fat_get_dir_entry_of_path+0x132>
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	07 c0       	rjmp	.+14     	; 0x31f4 <fat_get_dir_entry_of_path+0x132>
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	05 c0       	rjmp	.+10     	; 0x31f4 <fat_get_dir_entry_of_path+0x132>
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
            return 1;
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	03 c0       	rjmp	.+6      	; 0x31f4 <fat_get_dir_entry_of_path+0x132>
        }

        fat_close_dir(dd);
    }
    
    return 0;
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	01 c0       	rjmp	.+2      	; 0x31f4 <fat_get_dir_entry_of_path+0x132>
            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
                /* we iterated through the whole path and have found the file */
                return 1;
    31f2:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
    31f4:	df 91       	pop	r29
    31f6:	cf 91       	pop	r28
    31f8:	1f 91       	pop	r17
    31fa:	0f 91       	pop	r16
    31fc:	ff 90       	pop	r15
    31fe:	ef 90       	pop	r14
    3200:	df 90       	pop	r13
    3202:	cf 90       	pop	r12
    3204:	bf 90       	pop	r11
    3206:	af 90       	pop	r10
    3208:	9f 90       	pop	r9
    320a:	8f 90       	pop	r8
    320c:	7f 90       	pop	r7
    320e:	6f 90       	pop	r6
    3210:	5f 90       	pop	r5
    3212:	4f 90       	pop	r4
    3214:	08 95       	ret

00003216 <fat_create_file>:
 * \param[out] dir_entry The directory entry to fill for the new (or existing) file.
 * \returns 0 on failure, 1 on success, 2 if the file already existed.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    3216:	af 92       	push	r10
    3218:	bf 92       	push	r11
    321a:	cf 92       	push	r12
    321c:	df 92       	push	r13
    321e:	ef 92       	push	r14
    3220:	ff 92       	push	r15
    3222:	1f 93       	push	r17
    3224:	cf 93       	push	r28
    3226:	df 93       	push	r29
    if(!parent || !file || !file[0] || !dir_entry)
    3228:	00 97       	sbiw	r24, 0x00	; 0
    322a:	09 f4       	brne	.+2      	; 0x322e <fat_create_file+0x18>
    322c:	49 c0       	rjmp	.+146    	; 0x32c0 <fat_create_file+0xaa>
    322e:	61 15       	cp	r22, r1
    3230:	71 05       	cpc	r23, r1
    3232:	09 f4       	brne	.+2      	; 0x3236 <fat_create_file+0x20>
    3234:	47 c0       	rjmp	.+142    	; 0x32c4 <fat_create_file+0xae>
    3236:	fb 01       	movw	r30, r22
    3238:	20 81       	ld	r18, Z
    323a:	22 23       	and	r18, r18
    323c:	09 f4       	brne	.+2      	; 0x3240 <fat_create_file+0x2a>
    323e:	44 c0       	rjmp	.+136    	; 0x32c8 <fat_create_file+0xb2>
    3240:	ea 01       	movw	r28, r20
    3242:	7b 01       	movw	r14, r22
    3244:	6c 01       	movw	r12, r24
    3246:	20 97       	sbiw	r28, 0x00	; 0
    3248:	09 f4       	brne	.+2      	; 0x324c <fat_create_file+0x36>
    324a:	40 c0       	rjmp	.+128    	; 0x32cc <fat_create_file+0xb6>
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
    324c:	be 01       	movw	r22, r28
    324e:	c6 01       	movw	r24, r12
    3250:	0e 94 32 17 	call	0x2e64	; 0x2e64 <fat_read_dir>
    3254:	18 2f       	mov	r17, r24
    3256:	88 23       	and	r24, r24
    3258:	59 f0       	breq	.+22     	; 0x3270 <fat_create_file+0x5a>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    325a:	be 01       	movw	r22, r28
    325c:	c7 01       	movw	r24, r14
    325e:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <strcmp>
    3262:	89 2b       	or	r24, r25
    3264:	99 f7       	brne	.-26     	; 0x324c <fat_create_file+0x36>
        {
            fat_reset_dir(parent);
    3266:	c6 01       	movw	r24, r12
    3268:	0e 94 21 17 	call	0x2e42	; 0x2e42 <fat_reset_dir>
            return 2;
    326c:	12 e0       	ldi	r17, 0x02	; 2
    326e:	2f c0       	rjmp	.+94     	; 0x32ce <fat_create_file+0xb8>
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    3270:	f6 01       	movw	r30, r12
    3272:	a0 80       	ld	r10, Z
    3274:	b1 80       	ldd	r11, Z+1	; 0x01

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    3276:	81 e3       	ldi	r24, 0x31	; 49
    3278:	fe 01       	movw	r30, r28
    327a:	11 92       	st	Z+, r1
    327c:	8a 95       	dec	r24
    327e:	e9 f7       	brne	.-6      	; 0x327a <fat_create_file+0x64>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    3280:	4f e1       	ldi	r20, 0x1F	; 31
    3282:	50 e0       	ldi	r21, 0x00	; 0
    3284:	b7 01       	movw	r22, r14
    3286:	ce 01       	movw	r24, r28
    3288:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <strncpy>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    328c:	ae 01       	movw	r20, r28
    328e:	b6 01       	movw	r22, r12
    3290:	c5 01       	movw	r24, r10
    3292:	0e 94 38 09 	call	0x1270	; 0x1270 <fat_find_offset_for_dir_entry>
    3296:	29 a7       	std	Y+41, r18	; 0x29
    3298:	3a a7       	std	Y+42, r19	; 0x2a
    329a:	4b a7       	std	Y+43, r20	; 0x2b
    329c:	5c a7       	std	Y+44, r21	; 0x2c
    329e:	6d a7       	std	Y+45, r22	; 0x2d
    32a0:	7e a7       	std	Y+46, r23	; 0x2e
    32a2:	8f a7       	std	Y+47, r24	; 0x2f
    32a4:	98 ab       	std	Y+48, r25	; 0x30
    32a6:	a0 e0       	ldi	r26, 0x00	; 0
    32a8:	0e 94 a9 2c 	call	0x5952	; 0x5952 <__cmpdi2_s8>
    32ac:	81 f0       	breq	.+32     	; 0x32ce <fat_create_file+0xb8>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    32ae:	be 01       	movw	r22, r28
    32b0:	c5 01       	movw	r24, r10
    32b2:	0e 94 2b 0b 	call	0x1656	; 0x1656 <fat_write_dir_entry>
    32b6:	11 e0       	ldi	r17, 0x01	; 1
    32b8:	81 11       	cpse	r24, r1
    32ba:	09 c0       	rjmp	.+18     	; 0x32ce <fat_create_file+0xb8>
    32bc:	10 e0       	ldi	r17, 0x00	; 0
    32be:	07 c0       	rjmp	.+14     	; 0x32ce <fat_create_file+0xb8>
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !file || !file[0] || !dir_entry)
        return 0;
    32c0:	10 e0       	ldi	r17, 0x00	; 0
    32c2:	05 c0       	rjmp	.+10     	; 0x32ce <fat_create_file+0xb8>
    32c4:	10 e0       	ldi	r17, 0x00	; 0
    32c6:	03 c0       	rjmp	.+6      	; 0x32ce <fat_create_file+0xb8>
    32c8:	10 e0       	ldi	r17, 0x00	; 0
    32ca:	01 c0       	rjmp	.+2      	; 0x32ce <fat_create_file+0xb8>
    32cc:	10 e0       	ldi	r17, 0x00	; 0
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
        return 0;
    
    return 1;
}
    32ce:	81 2f       	mov	r24, r17
    32d0:	df 91       	pop	r29
    32d2:	cf 91       	pop	r28
    32d4:	1f 91       	pop	r17
    32d6:	ff 90       	pop	r15
    32d8:	ef 90       	pop	r14
    32da:	df 90       	pop	r13
    32dc:	cf 90       	pop	r12
    32de:	bf 90       	pop	r11
    32e0:	af 90       	pop	r10
    32e2:	08 95       	ret

000032e4 <fat_delete_file>:
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    32e4:	3f 92       	push	r3
    32e6:	4f 92       	push	r4
    32e8:	5f 92       	push	r5
    32ea:	6f 92       	push	r6
    32ec:	7f 92       	push	r7
    32ee:	8f 92       	push	r8
    32f0:	9f 92       	push	r9
    32f2:	af 92       	push	r10
    32f4:	bf 92       	push	r11
    32f6:	cf 92       	push	r12
    32f8:	df 92       	push	r13
    32fa:	ef 92       	push	r14
    32fc:	ff 92       	push	r15
    32fe:	0f 93       	push	r16
    3300:	1f 93       	push	r17
    3302:	cf 93       	push	r28
    3304:	df 93       	push	r29
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	2e 97       	sbiw	r28, 0x0e	; 14
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	f8 94       	cli
    3310:	de bf       	out	0x3e, r29	; 62
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	cd bf       	out	0x3d, r28	; 61
    3316:	3c 01       	movw	r6, r24
    3318:	fb 01       	movw	r30, r22
    if(!fs || !dir_entry)
    331a:	89 2b       	or	r24, r25
    331c:	09 f4       	brne	.+2      	; 0x3320 <fat_delete_file+0x3c>
    331e:	77 c0       	rjmp	.+238    	; 0x340e <fat_delete_file+0x12a>
    3320:	30 97       	sbiw	r30, 0x00	; 0
    3322:	09 f4       	brne	.+2      	; 0x3326 <fat_delete_file+0x42>
    3324:	76 c0       	rjmp	.+236    	; 0x3412 <fat_delete_file+0x12e>
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    3326:	d1 a4       	ldd	r13, Z+41	; 0x29
    3328:	c2 a4       	ldd	r12, Z+42	; 0x2a
    332a:	b3 a4       	ldd	r11, Z+43	; 0x2b
    332c:	a4 a4       	ldd	r10, Z+44	; 0x2c
    332e:	95 a4       	ldd	r9, Z+45	; 0x2d
    3330:	86 a4       	ldd	r8, Z+46	; 0x2e
    3332:	57 a4       	ldd	r5, Z+47	; 0x2f
    3334:	40 a8       	ldd	r4, Z+48	; 0x30
    if(!dir_entry_offset)
    3336:	2d 2d       	mov	r18, r13
    3338:	3c 2d       	mov	r19, r12
    333a:	4b 2d       	mov	r20, r11
    333c:	5a 2d       	mov	r21, r10
    333e:	69 2d       	mov	r22, r9
    3340:	78 2d       	mov	r23, r8
    3342:	85 2d       	mov	r24, r5
    3344:	94 2d       	mov	r25, r4
    3346:	a0 e0       	ldi	r26, 0x00	; 0
    3348:	0e 94 a9 2c 	call	0x5952	; 0x5952 <__cmpdi2_s8>
    334c:	09 f4       	brne	.+2      	; 0x3350 <fat_delete_file+0x6c>
    334e:	63 c0       	rjmp	.+198    	; 0x3416 <fat_delete_file+0x132>
    3350:	fe 87       	std	Y+14, r31	; 0x0e
    3352:	ed 87       	std	Y+13, r30	; 0x0d
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    3354:	0f 2e       	mov	r0, r31
    3356:	f5 ee       	ldi	r31, 0xE5	; 229
    3358:	3f 2e       	mov	r3, r31
    335a:	f0 2d       	mov	r31, r0
#if FAT_LFN_SUPPORT
    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    335c:	d3 01       	movw	r26, r6
    335e:	ed 91       	ld	r30, X+
    3360:	fc 91       	ld	r31, X
    3362:	01 90       	ld	r0, Z+
    3364:	f0 81       	ld	r31, Z
    3366:	e0 2d       	mov	r30, r0
    3368:	0f 2e       	mov	r0, r31
    336a:	fc e0       	ldi	r31, 0x0C	; 12
    336c:	ef 2e       	mov	r14, r31
    336e:	f1 2c       	mov	r15, r1
    3370:	f0 2d       	mov	r31, r0
    3372:	8e 01       	movw	r16, r28
    3374:	0f 5f       	subi	r16, 0xFF	; 255
    3376:	1f 4f       	sbci	r17, 0xFF	; 255
    3378:	2d 2d       	mov	r18, r13
    337a:	3c 2d       	mov	r19, r12
    337c:	4b 2d       	mov	r20, r11
    337e:	5a 2d       	mov	r21, r10
    3380:	69 2d       	mov	r22, r9
    3382:	78 2d       	mov	r23, r8
    3384:	85 2d       	mov	r24, r5
    3386:	94 2d       	mov	r25, r4
    3388:	09 95       	icall
    338a:	88 23       	and	r24, r24
    338c:	09 f4       	brne	.+2      	; 0x3390 <fat_delete_file+0xac>
    338e:	44 c0       	rjmp	.+136    	; 0x3418 <fat_delete_file+0x134>
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    3390:	39 82       	std	Y+1, r3	; 0x01
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
    3392:	d3 01       	movw	r26, r6
    3394:	ed 91       	ld	r30, X+
    3396:	fc 91       	ld	r31, X
    3398:	04 80       	ldd	r0, Z+4	; 0x04
    339a:	f5 81       	ldd	r31, Z+5	; 0x05
    339c:	e0 2d       	mov	r30, r0
    339e:	2d 2d       	mov	r18, r13
    33a0:	3c 2d       	mov	r19, r12
    33a2:	4b 2d       	mov	r20, r11
    33a4:	5a 2d       	mov	r21, r10
    33a6:	69 2d       	mov	r22, r9
    33a8:	78 2d       	mov	r23, r8
    33aa:	85 2d       	mov	r24, r5
    33ac:	94 2d       	mov	r25, r4
    33ae:	09 95       	icall
    33b0:	88 23       	and	r24, r24
    33b2:	91 f1       	breq	.+100    	; 0x3418 <fat_delete_file+0x134>
            return 0;

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
    33b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    33b6:	8f 30       	cpi	r24, 0x0F	; 15
    33b8:	a1 f4       	brne	.+40     	; 0x33e2 <fat_delete_file+0xfe>
            break;

        dir_entry_offset += 32;
    33ba:	2d 2d       	mov	r18, r13
    33bc:	3c 2d       	mov	r19, r12
    33be:	4b 2d       	mov	r20, r11
    33c0:	5a 2d       	mov	r21, r10
    33c2:	69 2d       	mov	r22, r9
    33c4:	78 2d       	mov	r23, r8
    33c6:	85 2d       	mov	r24, r5
    33c8:	94 2d       	mov	r25, r4
    33ca:	a0 e2       	ldi	r26, 0x20	; 32
    33cc:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__adddi3_s8>
    33d0:	d2 2e       	mov	r13, r18
    33d2:	c3 2e       	mov	r12, r19
    33d4:	b4 2e       	mov	r11, r20
    33d6:	a5 2e       	mov	r10, r21
    33d8:	96 2e       	mov	r9, r22
    33da:	87 2e       	mov	r8, r23
    33dc:	58 2e       	mov	r5, r24
    33de:	49 2e       	mov	r4, r25
    }
    33e0:	bd cf       	rjmp	.-134    	; 0x335c <fat_delete_file+0x78>
#endif

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
    33e2:	ed 85       	ldd	r30, Y+13	; 0x0d
    33e4:	fe 85       	ldd	r31, Y+14	; 0x0e
    33e6:	41 a1       	ldd	r20, Z+33	; 0x21
    33e8:	52 a1       	ldd	r21, Z+34	; 0x22
    33ea:	63 a1       	ldd	r22, Z+35	; 0x23
    33ec:	74 a1       	ldd	r23, Z+36	; 0x24
    33ee:	41 15       	cp	r20, r1
    33f0:	51 05       	cpc	r21, r1
    33f2:	61 05       	cpc	r22, r1
    33f4:	71 05       	cpc	r23, r1
    33f6:	49 f0       	breq	.+18     	; 0x340a <fat_delete_file+0x126>
    33f8:	c3 01       	movw	r24, r6
    33fa:	0e 94 4e 02 	call	0x49c	; 0x49c <fat_free_clusters>
    33fe:	91 e0       	ldi	r25, 0x01	; 1
    3400:	81 11       	cpse	r24, r1
    3402:	01 c0       	rjmp	.+2      	; 0x3406 <fat_delete_file+0x122>
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	89 2f       	mov	r24, r25
    3408:	07 c0       	rjmp	.+14     	; 0x3418 <fat_delete_file+0x134>
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	05 c0       	rjmp	.+10     	; 0x3418 <fat_delete_file+0x134>
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
        return 0;
    340e:	80 e0       	ldi	r24, 0x00	; 0
    3410:	03 c0       	rjmp	.+6      	; 0x3418 <fat_delete_file+0x134>
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	01 c0       	rjmp	.+2      	; 0x3418 <fat_delete_file+0x134>

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    if(!dir_entry_offset)
        return 0;
    3416:	80 e0       	ldi	r24, 0x00	; 0

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
}
    3418:	2e 96       	adiw	r28, 0x0e	; 14
    341a:	0f b6       	in	r0, 0x3f	; 63
    341c:	f8 94       	cli
    341e:	de bf       	out	0x3e, r29	; 62
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	cd bf       	out	0x3d, r28	; 61
    3424:	df 91       	pop	r29
    3426:	cf 91       	pop	r28
    3428:	1f 91       	pop	r17
    342a:	0f 91       	pop	r16
    342c:	ff 90       	pop	r15
    342e:	ef 90       	pop	r14
    3430:	df 90       	pop	r13
    3432:	cf 90       	pop	r12
    3434:	bf 90       	pop	r11
    3436:	af 90       	pop	r10
    3438:	9f 90       	pop	r9
    343a:	8f 90       	pop	r8
    343c:	7f 90       	pop	r7
    343e:	6f 90       	pop	r6
    3440:	5f 90       	pop	r5
    3442:	4f 90       	pop	r4
    3444:	3f 90       	pop	r3
    3446:	08 95       	ret

00003448 <fat_move_file>:
 * \param[in] file_new The file's new name.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file, fat_delete_file, fat_move_dir
 */
uint8_t fat_move_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry, struct fat_dir_struct* parent_new, const char* file_new)
{
    3448:	cf 92       	push	r12
    344a:	df 92       	push	r13
    344c:	ef 92       	push	r14
    344e:	ff 92       	push	r15
    3450:	1f 93       	push	r17
    3452:	cf 93       	push	r28
    3454:	df 93       	push	r29
    3456:	cd b7       	in	r28, 0x3d	; 61
    3458:	de b7       	in	r29, 0x3e	; 62
    345a:	e1 97       	sbiw	r28, 0x31	; 49
    345c:	0f b6       	in	r0, 0x3f	; 63
    345e:	f8 94       	cli
    3460:	de bf       	out	0x3e, r29	; 62
    3462:	0f be       	out	0x3f, r0	; 63
    3464:	cd bf       	out	0x3d, r28	; 61
    3466:	7b 01       	movw	r14, r22
    3468:	fa 01       	movw	r30, r20
    if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
    346a:	00 97       	sbiw	r24, 0x00	; 0
    346c:	09 f4       	brne	.+2      	; 0x3470 <fat_move_file+0x28>
    346e:	56 c0       	rjmp	.+172    	; 0x351c <fat_move_file+0xd4>
    3470:	67 2b       	or	r22, r23
    3472:	09 f4       	brne	.+2      	; 0x3476 <fat_move_file+0x2e>
    3474:	55 c0       	rjmp	.+170    	; 0x3520 <fat_move_file+0xd8>
    3476:	30 97       	sbiw	r30, 0x00	; 0
    3478:	09 f4       	brne	.+2      	; 0x347c <fat_move_file+0x34>
    347a:	54 c0       	rjmp	.+168    	; 0x3524 <fat_move_file+0xdc>
    347c:	21 15       	cp	r18, r1
    347e:	31 05       	cpc	r19, r1
    3480:	09 f4       	brne	.+2      	; 0x3484 <fat_move_file+0x3c>
    3482:	58 c0       	rjmp	.+176    	; 0x3534 <fat_move_file+0xec>
    3484:	d9 01       	movw	r26, r18
    3486:	4c 91       	ld	r20, X
    3488:	41 11       	cpse	r20, r1
    348a:	5a c0       	rjmp	.+180    	; 0x3540 <fat_move_file+0xf8>
    348c:	4d c0       	rjmp	.+154    	; 0x3528 <fat_move_file+0xe0>
    if(fs != parent_new->fs)
        return 0;

    /* use existing file name if none has been specified */
    if(!file_new)
        file_new = dir_entry->long_name;
    348e:	97 01       	movw	r18, r14

    /* create file with new file name */
    struct fat_dir_entry_struct dir_entry_new;
    if(!fat_create_file(parent_new, file_new, &dir_entry_new))
    3490:	ae 01       	movw	r20, r28
    3492:	4f 5f       	subi	r20, 0xFF	; 255
    3494:	5f 4f       	sbci	r21, 0xFF	; 255
    3496:	b9 01       	movw	r22, r18
    3498:	cf 01       	movw	r24, r30
    349a:	0e 94 0b 19 	call	0x3216	; 0x3216 <fat_create_file>
    349e:	18 2f       	mov	r17, r24
    34a0:	88 23       	and	r24, r24
    34a2:	09 f4       	brne	.+2      	; 0x34a6 <fat_move_file+0x5e>
    34a4:	53 c0       	rjmp	.+166    	; 0x354c <fat_move_file+0x104>
        return 0;

    /* copy members of directory entry which do not change with rename */
    dir_entry_new.attributes = dir_entry->attributes;
    34a6:	f7 01       	movw	r30, r14
    34a8:	80 a1       	ldd	r24, Z+32	; 0x20
    34aa:	89 a3       	std	Y+33, r24	; 0x21
#if FAT_DATETIME_SUPPORT
    dir_entry_new.modification_time = dir_entry->modification_time;
    dir_entry_new.modification_date = dir_entry->modification_date;
#endif
    dir_entry_new.cluster = dir_entry->cluster;
    34ac:	81 a1       	ldd	r24, Z+33	; 0x21
    34ae:	92 a1       	ldd	r25, Z+34	; 0x22
    34b0:	a3 a1       	ldd	r26, Z+35	; 0x23
    34b2:	b4 a1       	ldd	r27, Z+36	; 0x24
    34b4:	8a a3       	std	Y+34, r24	; 0x22
    34b6:	9b a3       	std	Y+35, r25	; 0x23
    34b8:	ac a3       	std	Y+36, r26	; 0x24
    34ba:	bd a3       	std	Y+37, r27	; 0x25
    dir_entry_new.file_size = dir_entry->file_size;
    34bc:	85 a1       	ldd	r24, Z+37	; 0x25
    34be:	96 a1       	ldd	r25, Z+38	; 0x26
    34c0:	a7 a1       	ldd	r26, Z+39	; 0x27
    34c2:	b0 a5       	ldd	r27, Z+40	; 0x28
    34c4:	8e a3       	std	Y+38, r24	; 0x26
    34c6:	9f a3       	std	Y+39, r25	; 0x27
    34c8:	a8 a7       	std	Y+40, r26	; 0x28
    34ca:	b9 a7       	std	Y+41, r27	; 0x29

    /* make the new file name point to the old file's content */
    if(!fat_write_dir_entry(fs, &dir_entry_new))
    34cc:	be 01       	movw	r22, r28
    34ce:	6f 5f       	subi	r22, 0xFF	; 255
    34d0:	7f 4f       	sbci	r23, 0xFF	; 255
    34d2:	c6 01       	movw	r24, r12
    34d4:	0e 94 2b 0b 	call	0x1656	; 0x1656 <fat_write_dir_entry>
    34d8:	18 2f       	mov	r17, r24
    34da:	81 11       	cpse	r24, r1
    34dc:	07 c0       	rjmp	.+14     	; 0x34ec <fat_move_file+0xa4>
    {
        fat_delete_file(fs, &dir_entry_new);
    34de:	be 01       	movw	r22, r28
    34e0:	6f 5f       	subi	r22, 0xFF	; 255
    34e2:	7f 4f       	sbci	r23, 0xFF	; 255
    34e4:	c6 01       	movw	r24, r12
    34e6:	0e 94 72 19 	call	0x32e4	; 0x32e4 <fat_delete_file>
        return 0;
    34ea:	30 c0       	rjmp	.+96     	; 0x354c <fat_move_file+0x104>
    }
    
    /* delete the old file, but not its clusters, which have already been remapped above */
    dir_entry->cluster = 0;
    34ec:	d7 01       	movw	r26, r14
    34ee:	91 96       	adiw	r26, 0x21	; 33
    34f0:	1d 92       	st	X+, r1
    34f2:	1d 92       	st	X+, r1
    34f4:	1d 92       	st	X+, r1
    34f6:	1c 92       	st	X, r1
    34f8:	94 97       	sbiw	r26, 0x24	; 36
    if(!fat_delete_file(fs, dir_entry))
    34fa:	b7 01       	movw	r22, r14
    34fc:	c6 01       	movw	r24, r12
    34fe:	0e 94 72 19 	call	0x32e4	; 0x32e4 <fat_delete_file>
    3502:	18 2f       	mov	r17, r24
    3504:	88 23       	and	r24, r24
    3506:	11 f1       	breq	.+68     	; 0x354c <fat_move_file+0x104>
        return 0;

    *dir_entry = dir_entry_new;
    3508:	81 e3       	ldi	r24, 0x31	; 49
    350a:	fe 01       	movw	r30, r28
    350c:	31 96       	adiw	r30, 0x01	; 1
    350e:	d7 01       	movw	r26, r14
    3510:	01 90       	ld	r0, Z+
    3512:	0d 92       	st	X+, r0
    3514:	8a 95       	dec	r24
    3516:	e1 f7       	brne	.-8      	; 0x3510 <fat_move_file+0xc8>
    return 1;
    3518:	11 e0       	ldi	r17, 0x01	; 1
    351a:	18 c0       	rjmp	.+48     	; 0x354c <fat_move_file+0x104>
 * \see fat_create_file, fat_delete_file, fat_move_dir
 */
uint8_t fat_move_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry, struct fat_dir_struct* parent_new, const char* file_new)
{
    if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
        return 0;
    351c:	10 e0       	ldi	r17, 0x00	; 0
    351e:	16 c0       	rjmp	.+44     	; 0x354c <fat_move_file+0x104>
    3520:	10 e0       	ldi	r17, 0x00	; 0
    3522:	14 c0       	rjmp	.+40     	; 0x354c <fat_move_file+0x104>
    3524:	10 e0       	ldi	r17, 0x00	; 0
    3526:	12 c0       	rjmp	.+36     	; 0x354c <fat_move_file+0x104>
    3528:	10 e0       	ldi	r17, 0x00	; 0
    352a:	10 c0       	rjmp	.+32     	; 0x354c <fat_move_file+0x104>
    if(fs != parent_new->fs)
        return 0;
    352c:	10 e0       	ldi	r17, 0x00	; 0
    352e:	0e c0       	rjmp	.+28     	; 0x354c <fat_move_file+0x104>
    3530:	10 e0       	ldi	r17, 0x00	; 0
    3532:	0c c0       	rjmp	.+24     	; 0x354c <fat_move_file+0x104>
 */
uint8_t fat_move_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry, struct fat_dir_struct* parent_new, const char* file_new)
{
    if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
        return 0;
    if(fs != parent_new->fs)
    3534:	c0 80       	ld	r12, Z
    3536:	d1 80       	ldd	r13, Z+1	; 0x01
    3538:	c8 16       	cp	r12, r24
    353a:	d9 06       	cpc	r13, r25
    353c:	b9 f7       	brne	.-18     	; 0x352c <fat_move_file+0xe4>
    353e:	a7 cf       	rjmp	.-178    	; 0x348e <fat_move_file+0x46>
    3540:	c0 80       	ld	r12, Z
    3542:	d1 80       	ldd	r13, Z+1	; 0x01
    3544:	c8 16       	cp	r12, r24
    3546:	d9 06       	cpc	r13, r25
    3548:	99 f7       	brne	.-26     	; 0x3530 <fat_move_file+0xe8>
    354a:	a2 cf       	rjmp	.-188    	; 0x3490 <fat_move_file+0x48>
    if(!fat_delete_file(fs, dir_entry))
        return 0;

    *dir_entry = dir_entry_new;
    return 1;
}
    354c:	81 2f       	mov	r24, r17
    354e:	e1 96       	adiw	r28, 0x31	; 49
    3550:	0f b6       	in	r0, 0x3f	; 63
    3552:	f8 94       	cli
    3554:	de bf       	out	0x3e, r29	; 62
    3556:	0f be       	out	0x3f, r0	; 63
    3558:	cd bf       	out	0x3d, r28	; 61
    355a:	df 91       	pop	r29
    355c:	cf 91       	pop	r28
    355e:	1f 91       	pop	r17
    3560:	ff 90       	pop	r15
    3562:	ef 90       	pop	r14
    3564:	df 90       	pop	r13
    3566:	cf 90       	pop	r12
    3568:	08 95       	ret

0000356a <fat_create_dir>:
 * \param[out] dir_entry The directory entry to fill for the new directory.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_dir
 */
uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct* dir_entry)
{
    356a:	2f 92       	push	r2
    356c:	3f 92       	push	r3
    356e:	4f 92       	push	r4
    3570:	5f 92       	push	r5
    3572:	7f 92       	push	r7
    3574:	8f 92       	push	r8
    3576:	9f 92       	push	r9
    3578:	af 92       	push	r10
    357a:	bf 92       	push	r11
    357c:	cf 92       	push	r12
    357e:	df 92       	push	r13
    3580:	ef 92       	push	r14
    3582:	ff 92       	push	r15
    3584:	0f 93       	push	r16
    3586:	1f 93       	push	r17
    3588:	cf 93       	push	r28
    358a:	df 93       	push	r29
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
    3590:	2e 97       	sbiw	r28, 0x0e	; 14
    3592:	0f b6       	in	r0, 0x3f	; 63
    3594:	f8 94       	cli
    3596:	de bf       	out	0x3e, r29	; 62
    3598:	0f be       	out	0x3f, r0	; 63
    359a:	cd bf       	out	0x3d, r28	; 61
    if(!parent || !dir || !dir[0] || !dir_entry)
    359c:	00 97       	sbiw	r24, 0x00	; 0
    359e:	09 f4       	brne	.+2      	; 0x35a2 <fat_create_dir+0x38>
    35a0:	28 c1       	rjmp	.+592    	; 0x37f2 <fat_create_dir+0x288>
    35a2:	61 15       	cp	r22, r1
    35a4:	71 05       	cpc	r23, r1
    35a6:	09 f4       	brne	.+2      	; 0x35aa <fat_create_dir+0x40>
    35a8:	26 c1       	rjmp	.+588    	; 0x37f6 <fat_create_dir+0x28c>
    35aa:	db 01       	movw	r26, r22
    35ac:	2c 91       	ld	r18, X
    35ae:	22 23       	and	r18, r18
    35b0:	09 f4       	brne	.+2      	; 0x35b4 <fat_create_dir+0x4a>
    35b2:	23 c1       	rjmp	.+582    	; 0x37fa <fat_create_dir+0x290>
    35b4:	5e 87       	std	Y+14, r21	; 0x0e
    35b6:	4d 87       	std	Y+13, r20	; 0x0d
    35b8:	1b 01       	movw	r2, r22
    35ba:	4c 01       	movw	r8, r24
    35bc:	45 2b       	or	r20, r21
    35be:	61 f4       	brne	.+24     	; 0x35d8 <fat_create_dir+0x6e>
    35c0:	1e c1       	rjmp	.+572    	; 0x37fe <fat_create_dir+0x294>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    35c2:	b8 01       	movw	r22, r16
    35c4:	c1 01       	movw	r24, r2
    35c6:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <strcmp>
    35ca:	89 2b       	or	r24, r25
    35cc:	39 f4       	brne	.+14     	; 0x35dc <fat_create_dir+0x72>
        {
            fat_reset_dir(parent);
    35ce:	c4 01       	movw	r24, r8
    35d0:	0e 94 21 17 	call	0x2e42	; 0x2e42 <fat_reset_dir>
            return 0;
    35d4:	71 2c       	mov	r7, r1
    35d6:	17 c1       	rjmp	.+558    	; 0x3806 <fat_create_dir+0x29c>
    35d8:	0d 85       	ldd	r16, Y+13	; 0x0d
    35da:	1e 85       	ldd	r17, Y+14	; 0x0e
{
    if(!parent || !dir || !dir[0] || !dir_entry)
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    35dc:	b8 01       	movw	r22, r16
    35de:	c4 01       	movw	r24, r8
    35e0:	0e 94 32 17 	call	0x2e64	; 0x2e64 <fat_read_dir>
    35e4:	81 11       	cpse	r24, r1
    35e6:	ed cf       	rjmp	.-38     	; 0x35c2 <fat_create_dir+0x58>
    35e8:	78 2e       	mov	r7, r24
    35ea:	1e 87       	std	Y+14, r17	; 0x0e
    35ec:	0d 87       	std	Y+13, r16	; 0x0d
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    35ee:	f4 01       	movw	r30, r8
    35f0:	40 80       	ld	r4, Z
    35f2:	51 80       	ldd	r5, Z+1	; 0x01

    /* allocate cluster which will hold directory entries */
    cluster_t dir_cluster = fat_append_clusters(fs, 0, 1);
    35f4:	01 e0       	ldi	r16, 0x01	; 1
    35f6:	10 e0       	ldi	r17, 0x00	; 0
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e0       	ldi	r20, 0x00	; 0
    35fe:	50 e0       	ldi	r21, 0x00	; 0
    3600:	ba 01       	movw	r22, r20
    3602:	c2 01       	movw	r24, r4
    3604:	0e 94 19 04 	call	0x832	; 0x832 <fat_append_clusters>
    3608:	69 83       	std	Y+1, r22	; 0x01
    360a:	7a 83       	std	Y+2, r23	; 0x02
    360c:	8b 83       	std	Y+3, r24	; 0x03
    360e:	9c 83       	std	Y+4, r25	; 0x04
    if(!dir_cluster)
    3610:	61 15       	cp	r22, r1
    3612:	71 05       	cpc	r23, r1
    3614:	81 05       	cpc	r24, r1
    3616:	91 05       	cpc	r25, r1
    3618:	09 f4       	brne	.+2      	; 0x361c <fat_create_dir+0xb2>
    361a:	f5 c0       	rjmp	.+490    	; 0x3806 <fat_create_dir+0x29c>
        return 0;

    /* clear cluster to prevent bogus directory entries */
    fat_clear_cluster(fs, dir_cluster);
    361c:	ab 01       	movw	r20, r22
    361e:	bc 01       	movw	r22, r24
    3620:	c2 01       	movw	r24, r4
    3622:	0e 94 0d 07 	call	0xe1a	; 0xe1a <fat_clear_cluster>
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    3626:	81 e3       	ldi	r24, 0x31	; 49
    3628:	ad 85       	ldd	r26, Y+13	; 0x0d
    362a:	be 85       	ldd	r27, Y+14	; 0x0e
    362c:	1d 92       	st	X+, r1
    362e:	8a 95       	dec	r24
    3630:	e9 f7       	brne	.-6      	; 0x362c <fat_create_dir+0xc2>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    3632:	80 e1       	ldi	r24, 0x10	; 16
    3634:	ed 85       	ldd	r30, Y+13	; 0x0d
    3636:	fe 85       	ldd	r31, Y+14	; 0x0e
    3638:	80 a3       	std	Z+32, r24	; 0x20

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	9a 81       	ldd	r25, Y+2	; 0x02
    363e:	ab 81       	ldd	r26, Y+3	; 0x03
    3640:	bc 81       	ldd	r27, Y+4	; 0x04
    3642:	02 97       	sbiw	r24, 0x02	; 2
    3644:	a1 09       	sbc	r26, r1
    3646:	b1 09       	sbc	r27, r1
    3648:	8c 01       	movw	r16, r24
    364a:	9d 01       	movw	r18, r26
    364c:	40 e0       	ldi	r20, 0x00	; 0
    364e:	50 e0       	ldi	r21, 0x00	; 0
    3650:	ba 01       	movw	r22, r20
    3652:	8d 83       	std	Y+5, r24	; 0x05
    3654:	1e 83       	std	Y+6, r17	; 0x06
    3656:	2f 83       	std	Y+7, r18	; 0x07
    3658:	38 87       	std	Y+8, r19	; 0x08
    365a:	49 87       	std	Y+9, r20	; 0x09
    365c:	5a 87       	std	Y+10, r21	; 0x0a
    365e:	6b 87       	std	Y+11, r22	; 0x0b
    3660:	7c 87       	std	Y+12, r23	; 0x0c
    3662:	d2 01       	movw	r26, r4
    3664:	58 96       	adiw	r26, 0x18	; 24
    3666:	0d 91       	ld	r16, X+
    3668:	1c 91       	ld	r17, X
    366a:	59 97       	sbiw	r26, 0x19	; 25
    366c:	a0 2e       	mov	r10, r16
    366e:	b1 2e       	mov	r11, r17
    3670:	c1 2c       	mov	r12, r1
    3672:	d1 2c       	mov	r13, r1
    3674:	e1 2c       	mov	r14, r1
    3676:	f1 2c       	mov	r15, r1
    3678:	00 e0       	ldi	r16, 0x00	; 0
    367a:	10 e0       	ldi	r17, 0x00	; 0
    367c:	2d 81       	ldd	r18, Y+5	; 0x05
    367e:	3e 81       	ldd	r19, Y+6	; 0x06
    3680:	4f 81       	ldd	r20, Y+7	; 0x07
    3682:	58 85       	ldd	r21, Y+8	; 0x08
    3684:	60 e0       	ldi	r22, 0x00	; 0
    3686:	70 e0       	ldi	r23, 0x00	; 0
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__muldi3>
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
    3690:	f2 01       	movw	r30, r4
    3692:	a2 8c       	ldd	r10, Z+26	; 0x1a
    3694:	b3 8c       	ldd	r11, Z+27	; 0x1b
    3696:	c4 8c       	ldd	r12, Z+28	; 0x1c
    3698:	d5 8c       	ldd	r13, Z+29	; 0x1d
    369a:	e6 8c       	ldd	r14, Z+30	; 0x1e
    369c:	f7 8c       	ldd	r15, Z+31	; 0x1f
    369e:	00 a1       	ldd	r16, Z+32	; 0x20
    36a0:	11 a1       	ldd	r17, Z+33	; 0x21
    36a2:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
    36a6:	ad 85       	ldd	r26, Y+13	; 0x0d
    36a8:	be 85       	ldd	r27, Y+14	; 0x0e
    36aa:	99 96       	adiw	r26, 0x29	; 41
    36ac:	2c 93       	st	X, r18
    36ae:	99 97       	sbiw	r26, 0x29	; 41
    36b0:	9a 96       	adiw	r26, 0x2a	; 42
    36b2:	3c 93       	st	X, r19
    36b4:	9a 97       	sbiw	r26, 0x2a	; 42
    36b6:	9b 96       	adiw	r26, 0x2b	; 43
    36b8:	4c 93       	st	X, r20
    36ba:	9b 97       	sbiw	r26, 0x2b	; 43
    36bc:	9c 96       	adiw	r26, 0x2c	; 44
    36be:	5c 93       	st	X, r21
    36c0:	9c 97       	sbiw	r26, 0x2c	; 44
    36c2:	9d 96       	adiw	r26, 0x2d	; 45
    36c4:	6c 93       	st	X, r22
    36c6:	9d 97       	sbiw	r26, 0x2d	; 45
    36c8:	9e 96       	adiw	r26, 0x2e	; 46
    36ca:	7c 93       	st	X, r23
    36cc:	9e 97       	sbiw	r26, 0x2e	; 46
    36ce:	9f 96       	adiw	r26, 0x2f	; 47
    36d0:	8c 93       	st	X, r24
    36d2:	9f 97       	sbiw	r26, 0x2f	; 47
    36d4:	d0 96       	adiw	r26, 0x30	; 48
    36d6:	9c 93       	st	X, r25
    36d8:	d0 97       	sbiw	r26, 0x30	; 48
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    dir_entry->long_name[0] = '.';
    36da:	8e e2       	ldi	r24, 0x2E	; 46
    36dc:	8c 93       	st	X, r24
    dir_entry->cluster = dir_cluster;
    36de:	09 81       	ldd	r16, Y+1	; 0x01
    36e0:	1a 81       	ldd	r17, Y+2	; 0x02
    36e2:	2b 81       	ldd	r18, Y+3	; 0x03
    36e4:	3c 81       	ldd	r19, Y+4	; 0x04
    36e6:	91 96       	adiw	r26, 0x21	; 33
    36e8:	0d 93       	st	X+, r16
    36ea:	1d 93       	st	X+, r17
    36ec:	2d 93       	st	X+, r18
    36ee:	3c 93       	st	X, r19
    36f0:	94 97       	sbiw	r26, 0x24	; 36
    if(!fat_write_dir_entry(fs, dir_entry))
    36f2:	bd 01       	movw	r22, r26
    36f4:	c2 01       	movw	r24, r4
    36f6:	0e 94 2b 0b 	call	0x1656	; 0x1656 <fat_write_dir_entry>
    36fa:	18 2f       	mov	r17, r24
    36fc:	81 11       	cpse	r24, r1
    36fe:	09 c0       	rjmp	.+18     	; 0x3712 <fat_create_dir+0x1a8>
    {
        fat_free_clusters(fs, dir_cluster);
    3700:	49 81       	ldd	r20, Y+1	; 0x01
    3702:	5a 81       	ldd	r21, Y+2	; 0x02
    3704:	6b 81       	ldd	r22, Y+3	; 0x03
    3706:	7c 81       	ldd	r23, Y+4	; 0x04
    3708:	c2 01       	movw	r24, r4
    370a:	0e 94 4e 02 	call	0x49c	; 0x49c <fat_free_clusters>
        return 0;
    370e:	71 2e       	mov	r7, r17
    3710:	7a c0       	rjmp	.+244    	; 0x3806 <fat_create_dir+0x29c>
    }

    /* create ".." parent directory reference */
    dir_entry->entry_offset += 32;
    3712:	ed 85       	ldd	r30, Y+13	; 0x0d
    3714:	fe 85       	ldd	r31, Y+14	; 0x0e
    3716:	21 a5       	ldd	r18, Z+41	; 0x29
    3718:	32 a5       	ldd	r19, Z+42	; 0x2a
    371a:	43 a5       	ldd	r20, Z+43	; 0x2b
    371c:	54 a5       	ldd	r21, Z+44	; 0x2c
    371e:	65 a5       	ldd	r22, Z+45	; 0x2d
    3720:	76 a5       	ldd	r23, Z+46	; 0x2e
    3722:	87 a5       	ldd	r24, Z+47	; 0x2f
    3724:	90 a9       	ldd	r25, Z+48	; 0x30
    3726:	a0 e2       	ldi	r26, 0x20	; 32
    3728:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__adddi3_s8>
    372c:	21 a7       	std	Z+41, r18	; 0x29
    372e:	32 a7       	std	Z+42, r19	; 0x2a
    3730:	43 a7       	std	Z+43, r20	; 0x2b
    3732:	54 a7       	std	Z+44, r21	; 0x2c
    3734:	65 a7       	std	Z+45, r22	; 0x2d
    3736:	76 a7       	std	Z+46, r23	; 0x2e
    3738:	87 a7       	std	Z+47, r24	; 0x2f
    373a:	90 ab       	std	Z+48, r25	; 0x30
    dir_entry->long_name[1] = '.';
    373c:	8e e2       	ldi	r24, 0x2E	; 46
    373e:	81 83       	std	Z+1, r24	; 0x01
    dir_entry->cluster = parent->dir_entry.cluster;
    3740:	f4 01       	movw	r30, r8
    3742:	83 a1       	ldd	r24, Z+35	; 0x23
    3744:	94 a1       	ldd	r25, Z+36	; 0x24
    3746:	a5 a1       	ldd	r26, Z+37	; 0x25
    3748:	b6 a1       	ldd	r27, Z+38	; 0x26
    374a:	ed 85       	ldd	r30, Y+13	; 0x0d
    374c:	fe 85       	ldd	r31, Y+14	; 0x0e
    374e:	81 a3       	std	Z+33, r24	; 0x21
    3750:	92 a3       	std	Z+34, r25	; 0x22
    3752:	a3 a3       	std	Z+35, r26	; 0x23
    3754:	b4 a3       	std	Z+36, r27	; 0x24
    if(!fat_write_dir_entry(fs, dir_entry))
    3756:	bf 01       	movw	r22, r30
    3758:	c2 01       	movw	r24, r4
    375a:	0e 94 2b 0b 	call	0x1656	; 0x1656 <fat_write_dir_entry>
    375e:	18 2f       	mov	r17, r24
    3760:	81 11       	cpse	r24, r1
    3762:	09 c0       	rjmp	.+18     	; 0x3776 <fat_create_dir+0x20c>
    {
        fat_free_clusters(fs, dir_cluster);
    3764:	49 81       	ldd	r20, Y+1	; 0x01
    3766:	5a 81       	ldd	r21, Y+2	; 0x02
    3768:	6b 81       	ldd	r22, Y+3	; 0x03
    376a:	7c 81       	ldd	r23, Y+4	; 0x04
    376c:	c2 01       	movw	r24, r4
    376e:	0e 94 4e 02 	call	0x49c	; 0x49c <fat_free_clusters>
        return 0;
    3772:	71 2e       	mov	r7, r17
    3774:	48 c0       	rjmp	.+144    	; 0x3806 <fat_create_dir+0x29c>
    }

    /* fill directory entry */
    strncpy(dir_entry->long_name, dir, sizeof(dir_entry->long_name) - 1);
    3776:	4f e1       	ldi	r20, 0x1F	; 31
    3778:	50 e0       	ldi	r21, 0x00	; 0
    377a:	b1 01       	movw	r22, r2
    377c:	8d 85       	ldd	r24, Y+13	; 0x0d
    377e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3780:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <strncpy>
    dir_entry->cluster = dir_cluster;
    3784:	09 81       	ldd	r16, Y+1	; 0x01
    3786:	1a 81       	ldd	r17, Y+2	; 0x02
    3788:	2b 81       	ldd	r18, Y+3	; 0x03
    378a:	3c 81       	ldd	r19, Y+4	; 0x04
    378c:	ad 85       	ldd	r26, Y+13	; 0x0d
    378e:	be 85       	ldd	r27, Y+14	; 0x0e
    3790:	91 96       	adiw	r26, 0x21	; 33
    3792:	0d 93       	st	X+, r16
    3794:	1d 93       	st	X+, r17
    3796:	2d 93       	st	X+, r18
    3798:	3c 93       	st	X, r19
    379a:	94 97       	sbiw	r26, 0x24	; 36

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    379c:	ad 01       	movw	r20, r26
    379e:	b4 01       	movw	r22, r8
    37a0:	c2 01       	movw	r24, r4
    37a2:	0e 94 38 09 	call	0x1270	; 0x1270 <fat_find_offset_for_dir_entry>
    37a6:	ed 85       	ldd	r30, Y+13	; 0x0d
    37a8:	fe 85       	ldd	r31, Y+14	; 0x0e
    37aa:	21 a7       	std	Z+41, r18	; 0x29
    37ac:	32 a7       	std	Z+42, r19	; 0x2a
    37ae:	43 a7       	std	Z+43, r20	; 0x2b
    37b0:	54 a7       	std	Z+44, r21	; 0x2c
    37b2:	65 a7       	std	Z+45, r22	; 0x2d
    37b4:	76 a7       	std	Z+46, r23	; 0x2e
    37b6:	87 a7       	std	Z+47, r24	; 0x2f
    37b8:	90 ab       	std	Z+48, r25	; 0x30
    37ba:	a0 e0       	ldi	r26, 0x00	; 0
    37bc:	0e 94 a9 2c 	call	0x5952	; 0x5952 <__cmpdi2_s8>
    37c0:	41 f4       	brne	.+16     	; 0x37d2 <fat_create_dir+0x268>
    {
        fat_free_clusters(fs, dir_cluster);
    37c2:	49 81       	ldd	r20, Y+1	; 0x01
    37c4:	5a 81       	ldd	r21, Y+2	; 0x02
    37c6:	6b 81       	ldd	r22, Y+3	; 0x03
    37c8:	7c 81       	ldd	r23, Y+4	; 0x04
    37ca:	c2 01       	movw	r24, r4
    37cc:	0e 94 4e 02 	call	0x49c	; 0x49c <fat_free_clusters>
        return 0;
    37d0:	1a c0       	rjmp	.+52     	; 0x3806 <fat_create_dir+0x29c>
    }

    /* write directory to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    37d2:	6d 85       	ldd	r22, Y+13	; 0x0d
    37d4:	7e 85       	ldd	r23, Y+14	; 0x0e
    37d6:	c2 01       	movw	r24, r4
    37d8:	0e 94 2b 0b 	call	0x1656	; 0x1656 <fat_write_dir_entry>
    37dc:	78 2e       	mov	r7, r24
    37de:	81 11       	cpse	r24, r1
    37e0:	10 c0       	rjmp	.+32     	; 0x3802 <fat_create_dir+0x298>
    {
        fat_free_clusters(fs, dir_cluster);
    37e2:	49 81       	ldd	r20, Y+1	; 0x01
    37e4:	5a 81       	ldd	r21, Y+2	; 0x02
    37e6:	6b 81       	ldd	r22, Y+3	; 0x03
    37e8:	7c 81       	ldd	r23, Y+4	; 0x04
    37ea:	c2 01       	movw	r24, r4
    37ec:	0e 94 4e 02 	call	0x49c	; 0x49c <fat_free_clusters>
        return 0;
    37f0:	0a c0       	rjmp	.+20     	; 0x3806 <fat_create_dir+0x29c>
 * \see fat_delete_dir
 */
uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !dir || !dir[0] || !dir_entry)
        return 0;
    37f2:	71 2c       	mov	r7, r1
    37f4:	08 c0       	rjmp	.+16     	; 0x3806 <fat_create_dir+0x29c>
    37f6:	71 2c       	mov	r7, r1
    37f8:	06 c0       	rjmp	.+12     	; 0x3806 <fat_create_dir+0x29c>
    37fa:	71 2c       	mov	r7, r1
    37fc:	04 c0       	rjmp	.+8      	; 0x3806 <fat_create_dir+0x29c>
    37fe:	71 2c       	mov	r7, r1
    3800:	02 c0       	rjmp	.+4      	; 0x3806 <fat_create_dir+0x29c>
    {
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    return 1;
    3802:	77 24       	eor	r7, r7
    3804:	73 94       	inc	r7
}
    3806:	87 2d       	mov	r24, r7
    3808:	2e 96       	adiw	r28, 0x0e	; 14
    380a:	0f b6       	in	r0, 0x3f	; 63
    380c:	f8 94       	cli
    380e:	de bf       	out	0x3e, r29	; 62
    3810:	0f be       	out	0x3f, r0	; 63
    3812:	cd bf       	out	0x3d, r28	; 61
    3814:	df 91       	pop	r29
    3816:	cf 91       	pop	r28
    3818:	1f 91       	pop	r17
    381a:	0f 91       	pop	r16
    381c:	ff 90       	pop	r15
    381e:	ef 90       	pop	r14
    3820:	df 90       	pop	r13
    3822:	cf 90       	pop	r12
    3824:	bf 90       	pop	r11
    3826:	af 90       	pop	r10
    3828:	9f 90       	pop	r9
    382a:	8f 90       	pop	r8
    382c:	7f 90       	pop	r7
    382e:	5f 90       	pop	r5
    3830:	4f 90       	pop	r4
    3832:	3f 90       	pop	r3
    3834:	2f 90       	pop	r2
    3836:	08 95       	ret

00003838 <fat_get_fs_size>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    3838:	2f 92       	push	r2
    383a:	3f 92       	push	r3
    383c:	4f 92       	push	r4
    383e:	5f 92       	push	r5
    3840:	6f 92       	push	r6
    3842:	7f 92       	push	r7
    3844:	8f 92       	push	r8
    3846:	9f 92       	push	r9
    3848:	af 92       	push	r10
    384a:	bf 92       	push	r11
    384c:	cf 92       	push	r12
    384e:	df 92       	push	r13
    3850:	ef 92       	push	r14
    3852:	ff 92       	push	r15
    3854:	0f 93       	push	r16
    3856:	1f 93       	push	r17
    3858:	cf 93       	push	r28
    385a:	df 93       	push	r29
    if(!fs)
    385c:	00 97       	sbiw	r24, 0x00	; 0
    385e:	09 f4       	brne	.+2      	; 0x3862 <fat_get_fs_size+0x2a>
    3860:	54 c0       	rjmp	.+168    	; 0x390a <fat_get_fs_size+0xd2>
    3862:	ac 01       	movw	r20, r24
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    3864:	dc 01       	movw	r26, r24
    3866:	ed 91       	ld	r30, X+
    3868:	fc 91       	ld	r31, X
    386a:	11 97       	sbiw	r26, 0x01	; 1
    386c:	80 85       	ldd	r24, Z+8	; 0x08
    386e:	8b 30       	cpi	r24, 0x0B	; 11
    3870:	49 f5       	brne	.+82     	; 0x38c4 <fat_get_fs_size+0x8c>
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    3872:	52 96       	adiw	r26, 0x12	; 18
    3874:	8d 91       	ld	r24, X+
    3876:	9d 91       	ld	r25, X+
    3878:	0d 90       	ld	r0, X+
    387a:	bc 91       	ld	r27, X
    387c:	a0 2d       	mov	r26, r0
    387e:	b6 95       	lsr	r27
    3880:	a7 95       	ror	r26
    3882:	97 95       	ror	r25
    3884:	87 95       	ror	r24
    3886:	b6 95       	lsr	r27
    3888:	a7 95       	ror	r26
    388a:	97 95       	ror	r25
    388c:	87 95       	ror	r24
    388e:	02 97       	sbiw	r24, 0x02	; 2
    3890:	a1 09       	sbc	r26, r1
    3892:	b1 09       	sbc	r27, r1
    3894:	1c 01       	movw	r2, r24
    3896:	2d 01       	movw	r4, r26
    3898:	fa 01       	movw	r30, r20
    389a:	00 8d       	ldd	r16, Z+24	; 0x18
    389c:	11 8d       	ldd	r17, Z+25	; 0x19
    389e:	a0 2e       	mov	r10, r16
    38a0:	b1 2e       	mov	r11, r17
    38a2:	c1 2c       	mov	r12, r1
    38a4:	d1 2c       	mov	r13, r1
    38a6:	e1 2c       	mov	r14, r1
    38a8:	f1 2c       	mov	r15, r1
    38aa:	00 e0       	ldi	r16, 0x00	; 0
    38ac:	10 e0       	ldi	r17, 0x00	; 0
    38ae:	28 2f       	mov	r18, r24
    38b0:	33 2d       	mov	r19, r3
    38b2:	44 2d       	mov	r20, r4
    38b4:	55 2d       	mov	r21, r5
    38b6:	60 e0       	ldi	r22, 0x00	; 0
    38b8:	70 e0       	ldi	r23, 0x00	; 0
    38ba:	80 e0       	ldi	r24, 0x00	; 0
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__muldi3>
    38c2:	2b c0       	rjmp	.+86     	; 0x391a <fat_get_fs_size+0xe2>
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
    38c4:	fa 01       	movw	r30, r20
    38c6:	82 89       	ldd	r24, Z+18	; 0x12
    38c8:	93 89       	ldd	r25, Z+19	; 0x13
    38ca:	a4 89       	ldd	r26, Z+20	; 0x14
    38cc:	b5 89       	ldd	r27, Z+21	; 0x15
    38ce:	b6 95       	lsr	r27
    38d0:	a7 95       	ror	r26
    38d2:	97 95       	ror	r25
    38d4:	87 95       	ror	r24
    38d6:	02 97       	sbiw	r24, 0x02	; 2
    38d8:	a1 09       	sbc	r26, r1
    38da:	b1 09       	sbc	r27, r1
    38dc:	1c 01       	movw	r2, r24
    38de:	2d 01       	movw	r4, r26
    38e0:	00 8d       	ldd	r16, Z+24	; 0x18
    38e2:	11 8d       	ldd	r17, Z+25	; 0x19
    38e4:	a0 2e       	mov	r10, r16
    38e6:	b1 2e       	mov	r11, r17
    38e8:	c1 2c       	mov	r12, r1
    38ea:	d1 2c       	mov	r13, r1
    38ec:	e1 2c       	mov	r14, r1
    38ee:	f1 2c       	mov	r15, r1
    38f0:	00 e0       	ldi	r16, 0x00	; 0
    38f2:	10 e0       	ldi	r17, 0x00	; 0
    38f4:	28 2f       	mov	r18, r24
    38f6:	33 2d       	mov	r19, r3
    38f8:	44 2d       	mov	r20, r4
    38fa:	55 2d       	mov	r21, r5
    38fc:	60 e0       	ldi	r22, 0x00	; 0
    38fe:	70 e0       	ldi	r23, 0x00	; 0
    3900:	80 e0       	ldi	r24, 0x00	; 0
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__muldi3>
    3908:	08 c0       	rjmp	.+16     	; 0x391a <fat_get_fs_size+0xe2>
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    if(!fs)
        return 0;
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	40 e0       	ldi	r20, 0x00	; 0
    3910:	50 e0       	ldi	r21, 0x00	; 0
    3912:	60 e0       	ldi	r22, 0x00	; 0
    3914:	70 e0       	ldi	r23, 0x00	; 0
    3916:	80 e0       	ldi	r24, 0x00	; 0
    3918:	90 e0       	ldi	r25, 0x00	; 0
    if(fs->partition->type == PARTITION_TYPE_FAT32)
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
}
    391a:	df 91       	pop	r29
    391c:	cf 91       	pop	r28
    391e:	1f 91       	pop	r17
    3920:	0f 91       	pop	r16
    3922:	ff 90       	pop	r15
    3924:	ef 90       	pop	r14
    3926:	df 90       	pop	r13
    3928:	cf 90       	pop	r12
    392a:	bf 90       	pop	r11
    392c:	af 90       	pop	r10
    392e:	9f 90       	pop	r9
    3930:	8f 90       	pop	r8
    3932:	7f 90       	pop	r7
    3934:	6f 90       	pop	r6
    3936:	5f 90       	pop	r5
    3938:	4f 90       	pop	r4
    393a:	3f 90       	pop	r3
    393c:	2f 90       	pop	r2
    393e:	08 95       	ret

00003940 <fat_get_fs_free>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
    3940:	2f 92       	push	r2
    3942:	3f 92       	push	r3
    3944:	4f 92       	push	r4
    3946:	5f 92       	push	r5
    3948:	6f 92       	push	r6
    394a:	7f 92       	push	r7
    394c:	8f 92       	push	r8
    394e:	9f 92       	push	r9
    3950:	af 92       	push	r10
    3952:	bf 92       	push	r11
    3954:	cf 92       	push	r12
    3956:	df 92       	push	r13
    3958:	ef 92       	push	r14
    395a:	ff 92       	push	r15
    395c:	0f 93       	push	r16
    395e:	1f 93       	push	r17
    3960:	cf 93       	push	r28
    3962:	df 93       	push	r29
    3964:	cd b7       	in	r28, 0x3d	; 61
    3966:	de b7       	in	r29, 0x3e	; 62
    3968:	e0 97       	sbiw	r28, 0x30	; 48
    396a:	0f b6       	in	r0, 0x3f	; 63
    396c:	f8 94       	cli
    396e:	de bf       	out	0x3e, r29	; 62
    3970:	0f be       	out	0x3f, r0	; 63
    3972:	cd bf       	out	0x3d, r28	; 61
    if(!fs)
    3974:	00 97       	sbiw	r24, 0x00	; 0
    3976:	09 f4       	brne	.+2      	; 0x397a <fat_get_fs_free+0x3a>
    3978:	b9 c0       	rjmp	.+370    	; 0x3aec <fat_get_fs_free+0x1ac>
    397a:	98 ab       	std	Y+48, r25	; 0x30
    397c:	8f a7       	std	Y+47, r24	; 0x2f
        return 0;

    uint8_t fat[32];
    struct fat_usage_count_callback_arg count_arg;
    count_arg.cluster_count = 0;
    397e:	19 a2       	std	Y+33, r1	; 0x21
    3980:	1a a2       	std	Y+34, r1	; 0x22
    3982:	1b a2       	std	Y+35, r1	; 0x23
    3984:	1c a2       	std	Y+36, r1	; 0x24
    count_arg.buffer_size = sizeof(fat);
    3986:	80 e2       	ldi	r24, 0x20	; 32
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	9e a3       	std	Y+38, r25	; 0x26
    398c:	8d a3       	std	Y+37, r24	; 0x25

    offset_t fat_offset = fs->header.fat_offset;
    398e:	af a5       	ldd	r26, Y+47	; 0x2f
    3990:	b8 a9       	ldd	r27, Y+48	; 0x30
    3992:	1a 96       	adiw	r26, 0x0a	; 10
    3994:	bc 91       	ld	r27, X
    3996:	bf a3       	std	Y+39, r27	; 0x27
    3998:	ef a5       	ldd	r30, Y+47	; 0x2f
    399a:	f8 a9       	ldd	r31, Y+48	; 0x30
    399c:	f3 85       	ldd	r31, Z+11	; 0x0b
    399e:	f8 a7       	std	Y+40, r31	; 0x28
    39a0:	af a5       	ldd	r26, Y+47	; 0x2f
    39a2:	b8 a9       	ldd	r27, Y+48	; 0x30
    39a4:	1c 96       	adiw	r26, 0x0c	; 12
    39a6:	bc 91       	ld	r27, X
    39a8:	b9 a7       	std	Y+41, r27	; 0x29
    39aa:	ef a5       	ldd	r30, Y+47	; 0x2f
    39ac:	f8 a9       	ldd	r31, Y+48	; 0x30
    39ae:	f5 85       	ldd	r31, Z+13	; 0x0d
    39b0:	fa a7       	std	Y+42, r31	; 0x2a
    39b2:	af a5       	ldd	r26, Y+47	; 0x2f
    39b4:	b8 a9       	ldd	r27, Y+48	; 0x30
    39b6:	1e 96       	adiw	r26, 0x0e	; 14
    39b8:	bc 91       	ld	r27, X
    39ba:	bb a7       	std	Y+43, r27	; 0x2b
    39bc:	ef a5       	ldd	r30, Y+47	; 0x2f
    39be:	f8 a9       	ldd	r31, Y+48	; 0x30
    39c0:	f7 85       	ldd	r31, Z+15	; 0x0f
    39c2:	fc a7       	std	Y+44, r31	; 0x2c
    39c4:	af a5       	ldd	r26, Y+47	; 0x2f
    39c6:	b8 a9       	ldd	r27, Y+48	; 0x30
    39c8:	50 96       	adiw	r26, 0x10	; 16
    39ca:	bc 91       	ld	r27, X
    39cc:	bd a7       	std	Y+45, r27	; 0x2d
    39ce:	ef a5       	ldd	r30, Y+47	; 0x2f
    39d0:	f8 a9       	ldd	r31, Y+48	; 0x30
    39d2:	f1 89       	ldd	r31, Z+17	; 0x11
    39d4:	fe a7       	std	Y+46, r31	; 0x2e
    uint32_t fat_size = fs->header.fat_size;
    39d6:	af a5       	ldd	r26, Y+47	; 0x2f
    39d8:	b8 a9       	ldd	r27, Y+48	; 0x30
    39da:	52 96       	adiw	r26, 0x12	; 18
    39dc:	2d 90       	ld	r2, X+
    39de:	3d 90       	ld	r3, X+
    39e0:	4d 90       	ld	r4, X+
    39e2:	5c 90       	ld	r5, X
    39e4:	55 97       	sbiw	r26, 0x15	; 21
    while(fat_size > 0)
    39e6:	21 14       	cp	r2, r1
    39e8:	31 04       	cpc	r3, r1
    39ea:	41 04       	cpc	r4, r1
    39ec:	51 04       	cpc	r5, r1
    39ee:	09 f4       	brne	.+2      	; 0x39f2 <fat_get_fs_free+0xb2>
    39f0:	60 c0       	rjmp	.+192    	; 0x3ab2 <fat_get_fs_free+0x172>
    {
        uintptr_t length = UINTPTR_MAX - 1;
        if(fat_size < length)
            length = fat_size;

        if(!fs->partition->device_read_interval(fat_offset,
    39f2:	32 01       	movw	r6, r4
    39f4:	21 01       	movw	r4, r2
    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    {
        uintptr_t length = UINTPTR_MAX - 1;
        if(fat_size < length)
    39f6:	be ef       	ldi	r27, 0xFE	; 254
    39f8:	4b 16       	cp	r4, r27
    39fa:	bf ef       	ldi	r27, 0xFF	; 255
    39fc:	5b 06       	cpc	r5, r27
    39fe:	61 04       	cpc	r6, r1
    3a00:	71 04       	cpc	r7, r1
    3a02:	10 f4       	brcc	.+4      	; 0x3a08 <fat_get_fs_free+0xc8>
            length = fat_size;
    3a04:	12 01       	movw	r2, r4
    3a06:	06 c0       	rjmp	.+12     	; 0x3a14 <fat_get_fs_free+0xd4>

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    {
        uintptr_t length = UINTPTR_MAX - 1;
    3a08:	0f 2e       	mov	r0, r31
    3a0a:	fe ef       	ldi	r31, 0xFE	; 254
    3a0c:	2f 2e       	mov	r2, r31
    3a0e:	f0 2d       	mov	r31, r0
    3a10:	33 24       	eor	r3, r3
    3a12:	3a 94       	dec	r3
        if(fat_size < length)
            length = fat_size;

        if(!fs->partition->device_read_interval(fat_offset,
    3a14:	ef a5       	ldd	r30, Y+47	; 0x2f
    3a16:	f8 a9       	ldd	r31, Y+48	; 0x30
    3a18:	a0 81       	ld	r26, Z
    3a1a:	b1 81       	ldd	r27, Z+1	; 0x01
    3a1c:	12 96       	adiw	r26, 0x02	; 2
    3a1e:	ed 91       	ld	r30, X+
    3a20:	fc 91       	ld	r31, X
    3a22:	13 97       	sbiw	r26, 0x03	; 3
    3a24:	18 96       	adiw	r26, 0x08	; 8
    3a26:	8c 91       	ld	r24, X
    3a28:	86 30       	cpi	r24, 0x06	; 6
    3a2a:	31 f0       	breq	.+12     	; 0x3a38 <fat_get_fs_free+0xf8>
    3a2c:	84 e0       	ldi	r24, 0x04	; 4
    3a2e:	99 e0       	ldi	r25, 0x09	; 9
    3a30:	a8 2e       	mov	r10, r24
    3a32:	dc 01       	movw	r26, r24
    3a34:	bb 2e       	mov	r11, r27
    3a36:	05 c0       	rjmp	.+10     	; 0x3a42 <fat_get_fs_free+0x102>
    3a38:	86 e5       	ldi	r24, 0x56	; 86
    3a3a:	97 e0       	ldi	r25, 0x07	; 7
    3a3c:	a8 2e       	mov	r10, r24
    3a3e:	dc 01       	movw	r26, r24
    3a40:	bb 2e       	mov	r11, r27
    3a42:	ce 01       	movw	r24, r28
    3a44:	81 96       	adiw	r24, 0x21	; 33
    3a46:	4c 01       	movw	r8, r24
    3a48:	61 01       	movw	r12, r2
    3a4a:	68 94       	set
    3a4c:	ee 24       	eor	r14, r14
    3a4e:	e5 f8       	bld	r14, 5
    3a50:	f1 2c       	mov	r15, r1
    3a52:	8e 01       	movw	r16, r28
    3a54:	0f 5f       	subi	r16, 0xFF	; 255
    3a56:	1f 4f       	sbci	r17, 0xFF	; 255
    3a58:	2f a1       	ldd	r18, Y+39	; 0x27
    3a5a:	38 a5       	ldd	r19, Y+40	; 0x28
    3a5c:	49 a5       	ldd	r20, Y+41	; 0x29
    3a5e:	5a a5       	ldd	r21, Y+42	; 0x2a
    3a60:	6b a5       	ldd	r22, Y+43	; 0x2b
    3a62:	7c a5       	ldd	r23, Y+44	; 0x2c
    3a64:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a66:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a68:	09 95       	icall
    3a6a:	88 23       	and	r24, r24
    3a6c:	09 f4       	brne	.+2      	; 0x3a70 <fat_get_fs_free+0x130>
    3a6e:	47 c0       	rjmp	.+142    	; 0x3afe <fat_get_fs_free+0x1be>
                                                &count_arg
                                               )
          )
            return 0;

        fat_offset += length;
    3a70:	41 01       	movw	r8, r2
    3a72:	22 2d       	mov	r18, r2
    3a74:	39 2d       	mov	r19, r9
    3a76:	40 e0       	ldi	r20, 0x00	; 0
    3a78:	50 e0       	ldi	r21, 0x00	; 0
    3a7a:	60 e0       	ldi	r22, 0x00	; 0
    3a7c:	70 e0       	ldi	r23, 0x00	; 0
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	af a0       	ldd	r10, Y+39	; 0x27
    3a84:	b8 a4       	ldd	r11, Y+40	; 0x28
    3a86:	c9 a4       	ldd	r12, Y+41	; 0x29
    3a88:	da a4       	ldd	r13, Y+42	; 0x2a
    3a8a:	eb a4       	ldd	r14, Y+43	; 0x2b
    3a8c:	fc a4       	ldd	r15, Y+44	; 0x2c
    3a8e:	0d a5       	ldd	r16, Y+45	; 0x2d
    3a90:	1e a5       	ldd	r17, Y+46	; 0x2e
    3a92:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
    3a96:	2f a3       	std	Y+39, r18	; 0x27
    3a98:	38 a7       	std	Y+40, r19	; 0x28
    3a9a:	49 a7       	std	Y+41, r20	; 0x29
    3a9c:	5a a7       	std	Y+42, r21	; 0x2a
    3a9e:	6b a7       	std	Y+43, r22	; 0x2b
    3aa0:	7c a7       	std	Y+44, r23	; 0x2c
    3aa2:	8d a7       	std	Y+45, r24	; 0x2d
    3aa4:	9e a7       	std	Y+46, r25	; 0x2e
        fat_size -= length;
    3aa6:	42 18       	sub	r4, r2
    3aa8:	53 08       	sbc	r5, r3
    3aaa:	61 08       	sbc	r6, r1
    3aac:	71 08       	sbc	r7, r1
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    3aae:	09 f0       	breq	.+2      	; 0x3ab2 <fat_get_fs_free+0x172>
    3ab0:	a2 cf       	rjmp	.-188    	; 0x39f6 <fat_get_fs_free+0xb6>

        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
    3ab2:	af a5       	ldd	r26, Y+47	; 0x2f
    3ab4:	b8 a9       	ldd	r27, Y+48	; 0x30
    3ab6:	58 96       	adiw	r26, 0x18	; 24
    3ab8:	2d 90       	ld	r2, X+
    3aba:	3c 90       	ld	r3, X
    3abc:	59 97       	sbiw	r26, 0x19	; 25
    3abe:	09 a1       	ldd	r16, Y+33	; 0x21
    3ac0:	1a a1       	ldd	r17, Y+34	; 0x22
    3ac2:	2b a1       	ldd	r18, Y+35	; 0x23
    3ac4:	3c a1       	ldd	r19, Y+36	; 0x24
    3ac6:	a0 2e       	mov	r10, r16
    3ac8:	b1 2e       	mov	r11, r17
    3aca:	c2 2e       	mov	r12, r18
    3acc:	d3 2e       	mov	r13, r19
    3ace:	e1 2c       	mov	r14, r1
    3ad0:	f1 2c       	mov	r15, r1
    3ad2:	00 e0       	ldi	r16, 0x00	; 0
    3ad4:	10 e0       	ldi	r17, 0x00	; 0
    3ad6:	22 2d       	mov	r18, r2
    3ad8:	33 2d       	mov	r19, r3
    3ada:	40 e0       	ldi	r20, 0x00	; 0
    3adc:	50 e0       	ldi	r21, 0x00	; 0
    3ade:	60 e0       	ldi	r22, 0x00	; 0
    3ae0:	70 e0       	ldi	r23, 0x00	; 0
    3ae2:	80 e0       	ldi	r24, 0x00	; 0
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__muldi3>
    3aea:	11 c0       	rjmp	.+34     	; 0x3b0e <fat_get_fs_free+0x1ce>
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
    if(!fs)
        return 0;
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	40 e0       	ldi	r20, 0x00	; 0
    3af2:	50 e0       	ldi	r21, 0x00	; 0
    3af4:	60 e0       	ldi	r22, 0x00	; 0
    3af6:	70 e0       	ldi	r23, 0x00	; 0
    3af8:	80 e0       	ldi	r24, 0x00	; 0
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	08 c0       	rjmp	.+16     	; 0x3b0e <fat_get_fs_free+0x1ce>
                                                fat_get_fs_free_16_callback,
#endif
                                                &count_arg
                                               )
          )
            return 0;
    3afe:	20 e0       	ldi	r18, 0x00	; 0
    3b00:	30 e0       	ldi	r19, 0x00	; 0
    3b02:	40 e0       	ldi	r20, 0x00	; 0
    3b04:	50 e0       	ldi	r21, 0x00	; 0
    3b06:	60 e0       	ldi	r22, 0x00	; 0
    3b08:	70 e0       	ldi	r23, 0x00	; 0
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
}
    3b0e:	e0 96       	adiw	r28, 0x30	; 48
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	f8 94       	cli
    3b14:	de bf       	out	0x3e, r29	; 62
    3b16:	0f be       	out	0x3f, r0	; 63
    3b18:	cd bf       	out	0x3d, r28	; 61
    3b1a:	df 91       	pop	r29
    3b1c:	cf 91       	pop	r28
    3b1e:	1f 91       	pop	r17
    3b20:	0f 91       	pop	r16
    3b22:	ff 90       	pop	r15
    3b24:	ef 90       	pop	r14
    3b26:	df 90       	pop	r13
    3b28:	cf 90       	pop	r12
    3b2a:	bf 90       	pop	r11
    3b2c:	af 90       	pop	r10
    3b2e:	9f 90       	pop	r9
    3b30:	8f 90       	pop	r8
    3b32:	7f 90       	pop	r7
    3b34:	6f 90       	pop	r6
    3b36:	5f 90       	pop	r5
    3b38:	4f 90       	pop	r4
    3b3a:	3f 90       	pop	r3
    3b3c:	2f 90       	pop	r2
    3b3e:	08 95       	ret

00003b40 <print_disk_info>:

    return fat_open_file(fs, &file_entry);
}

uint8_t print_disk_info(const struct fat_fs_struct* fs)
{
    3b40:	ef 92       	push	r14
    3b42:	ff 92       	push	r15
    3b44:	0f 93       	push	r16
    3b46:	cf 93       	push	r28
    3b48:	df 93       	push	r29
    3b4a:	cd b7       	in	r28, 0x3d	; 61
    3b4c:	de b7       	in	r29, 0x3e	; 62
    3b4e:	6d 97       	sbiw	r28, 0x1d	; 29
    3b50:	0f b6       	in	r0, 0x3f	; 63
    3b52:	f8 94       	cli
    3b54:	de bf       	out	0x3e, r29	; 62
    3b56:	0f be       	out	0x3f, r0	; 63
    3b58:	cd bf       	out	0x3d, r28	; 61
    if(!fs)
    3b5a:	00 97       	sbiw	r24, 0x00	; 0
    3b5c:	09 f4       	brne	.+2      	; 0x3b60 <print_disk_info+0x20>
    3b5e:	b0 c0       	rjmp	.+352    	; 0x3cc0 <print_disk_info+0x180>
    3b60:	7c 01       	movw	r14, r24
        return 0;

    struct sd_raw_info disk_info;
    if(!sd_raw_get_info(&disk_info))
    3b62:	ce 01       	movw	r24, r28
    3b64:	01 96       	adiw	r24, 0x01	; 1
    3b66:	0e 94 01 29 	call	0x5202	; 0x5202 <sd_raw_get_info>
    3b6a:	88 23       	and	r24, r24
    3b6c:	09 f4       	brne	.+2      	; 0x3b70 <print_disk_info+0x30>
    3b6e:	a9 c0       	rjmp	.+338    	; 0x3cc2 <print_disk_info+0x182>
        return 0;

    uart_puts_p(PSTR("manuf:  0x")); uart_putc_hex(disk_info.manufacturer); uart_putc('\n');
    3b70:	86 ee       	ldi	r24, 0xE6	; 230
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
    3b78:	89 81       	ldd	r24, Y+1	; 0x01
    3b7a:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <uart_putc_hex>
    3b7e:	8a e0       	ldi	r24, 0x0A	; 10
    3b80:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    uart_puts_p(PSTR("oem:    ")); uart_puts((char*) disk_info.oem); uart_putc('\n');
    3b84:	8d ed       	ldi	r24, 0xDD	; 221
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
    3b8c:	ce 01       	movw	r24, r28
    3b8e:	02 96       	adiw	r24, 0x02	; 2
    3b90:	0e 94 3d 2b 	call	0x567a	; 0x567a <uart_puts>
    3b94:	8a e0       	ldi	r24, 0x0A	; 10
    3b96:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    uart_puts_p(PSTR("prod:   ")); uart_puts((char*) disk_info.product); uart_putc('\n');
    3b9a:	84 ed       	ldi	r24, 0xD4	; 212
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
    3ba2:	ce 01       	movw	r24, r28
    3ba4:	05 96       	adiw	r24, 0x05	; 5
    3ba6:	0e 94 3d 2b 	call	0x567a	; 0x567a <uart_puts>
    3baa:	8a e0       	ldi	r24, 0x0A	; 10
    3bac:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    uart_puts_p(PSTR("rev:    ")); uart_putc_hex(disk_info.revision); uart_putc('\n');
    3bb0:	8b ec       	ldi	r24, 0xCB	; 203
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
    3bb8:	8b 85       	ldd	r24, Y+11	; 0x0b
    3bba:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <uart_putc_hex>
    3bbe:	8a e0       	ldi	r24, 0x0A	; 10
    3bc0:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    uart_puts_p(PSTR("serial: 0x")); uart_putdw_hex(disk_info.serial); uart_putc('\n');
    3bc4:	80 ec       	ldi	r24, 0xC0	; 192
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
    3bcc:	6c 85       	ldd	r22, Y+12	; 0x0c
    3bce:	7d 85       	ldd	r23, Y+13	; 0x0d
    3bd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bd2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bd4:	0e 94 84 2a 	call	0x5508	; 0x5508 <uart_putdw_hex>
    3bd8:	8a e0       	ldi	r24, 0x0A	; 10
    3bda:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    uart_puts_p(PSTR("date:   ")); uart_putw_dec(disk_info.manufacturing_month); uart_putc('/');
    3bde:	87 eb       	ldi	r24, 0xB7	; 183
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
    3be6:	89 89       	ldd	r24, Y+17	; 0x11
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	0e 94 95 2a 	call	0x552a	; 0x552a <uart_putw_dec>
    3bee:	8f e2       	ldi	r24, 0x2F	; 47
    3bf0:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
                                   uart_putw_dec(disk_info.manufacturing_year); uart_putc('\n');
    3bf4:	88 89       	ldd	r24, Y+16	; 0x10
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	0e 94 95 2a 	call	0x552a	; 0x552a <uart_putw_dec>
    3bfc:	8a e0       	ldi	r24, 0x0A	; 10
    3bfe:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    uart_puts_p(PSTR("size:   ")); uart_putdw_dec(disk_info.capacity / 1024 / 1024); uart_puts_p(PSTR("MB\n"));
    3c02:	8e ea       	ldi	r24, 0xAE	; 174
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
    3c0a:	2a 89       	ldd	r18, Y+18	; 0x12
    3c0c:	3b 89       	ldd	r19, Y+19	; 0x13
    3c0e:	4c 89       	ldd	r20, Y+20	; 0x14
    3c10:	5d 89       	ldd	r21, Y+21	; 0x15
    3c12:	6e 89       	ldd	r22, Y+22	; 0x16
    3c14:	7f 89       	ldd	r23, Y+23	; 0x17
    3c16:	88 8d       	ldd	r24, Y+24	; 0x18
    3c18:	99 8d       	ldd	r25, Y+25	; 0x19
    3c1a:	04 e1       	ldi	r16, 0x14	; 20
    3c1c:	0e 94 66 2c 	call	0x58cc	; 0x58cc <__lshrdi3>
    3c20:	62 2f       	mov	r22, r18
    3c22:	73 2f       	mov	r23, r19
    3c24:	84 2f       	mov	r24, r20
    3c26:	95 2f       	mov	r25, r21
    3c28:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <uart_putdw_dec>
    3c2c:	8a ea       	ldi	r24, 0xAA	; 170
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
    uart_puts_p(PSTR("copy:   ")); uart_putw_dec(disk_info.flag_copy); uart_putc('\n');
    3c34:	81 ea       	ldi	r24, 0xA1	; 161
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
    3c3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	0e 94 95 2a 	call	0x552a	; 0x552a <uart_putw_dec>
    3c44:	8a e0       	ldi	r24, 0x0A	; 10
    3c46:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    uart_puts_p(PSTR("wr.pr.: ")); uart_putw_dec(disk_info.flag_write_protect_temp); uart_putc('/');
    3c4a:	88 e9       	ldi	r24, 0x98	; 152
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
    3c52:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	0e 94 95 2a 	call	0x552a	; 0x552a <uart_putw_dec>
    3c5a:	8f e2       	ldi	r24, 0x2F	; 47
    3c5c:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
                                   uart_putw_dec(disk_info.flag_write_protect); uart_putc('\n');
    3c60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	0e 94 95 2a 	call	0x552a	; 0x552a <uart_putw_dec>
    3c68:	8a e0       	ldi	r24, 0x0A	; 10
    3c6a:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    uart_puts_p(PSTR("format: ")); uart_putw_dec(disk_info.format); uart_putc('\n');
    3c6e:	8f e8       	ldi	r24, 0x8F	; 143
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
    3c76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	0e 94 95 2a 	call	0x552a	; 0x552a <uart_putw_dec>
    3c7e:	8a e0       	ldi	r24, 0x0A	; 10
    3c80:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    uart_puts_p(PSTR("free:   ")); uart_putdw_dec(fat_get_fs_free(fs)); uart_putc('/');
    3c84:	86 e8       	ldi	r24, 0x86	; 134
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
    3c8c:	c7 01       	movw	r24, r14
    3c8e:	0e 94 a0 1c 	call	0x3940	; 0x3940 <fat_get_fs_free>
    3c92:	62 2f       	mov	r22, r18
    3c94:	73 2f       	mov	r23, r19
    3c96:	84 2f       	mov	r24, r20
    3c98:	95 2f       	mov	r25, r21
    3c9a:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <uart_putdw_dec>
    3c9e:	8f e2       	ldi	r24, 0x2F	; 47
    3ca0:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
                                   uart_putdw_dec(fat_get_fs_size(fs)); uart_putc('\n');
    3ca4:	c7 01       	movw	r24, r14
    3ca6:	0e 94 1c 1c 	call	0x3838	; 0x3838 <fat_get_fs_size>
    3caa:	62 2f       	mov	r22, r18
    3cac:	73 2f       	mov	r23, r19
    3cae:	84 2f       	mov	r24, r20
    3cb0:	95 2f       	mov	r25, r21
    3cb2:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <uart_putdw_dec>
    3cb6:	8a e0       	ldi	r24, 0x0A	; 10
    3cb8:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>

    return 1;
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	01 c0       	rjmp	.+2      	; 0x3cc2 <print_disk_info+0x182>
}

uint8_t print_disk_info(const struct fat_fs_struct* fs)
{
    if(!fs)
        return 0;
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    uart_puts_p(PSTR("format: ")); uart_putw_dec(disk_info.format); uart_putc('\n');
    uart_puts_p(PSTR("free:   ")); uart_putdw_dec(fat_get_fs_free(fs)); uart_putc('/');
                                   uart_putdw_dec(fat_get_fs_size(fs)); uart_putc('\n');

    return 1;
}
    3cc2:	6d 96       	adiw	r28, 0x1d	; 29
    3cc4:	0f b6       	in	r0, 0x3f	; 63
    3cc6:	f8 94       	cli
    3cc8:	de bf       	out	0x3e, r29	; 62
    3cca:	0f be       	out	0x3f, r0	; 63
    3ccc:	cd bf       	out	0x3d, r28	; 61
    3cce:	df 91       	pop	r29
    3cd0:	cf 91       	pop	r28
    3cd2:	0f 91       	pop	r16
    3cd4:	ff 90       	pop	r15
    3cd6:	ef 90       	pop	r14
    3cd8:	08 95       	ret

00003cda <find_file_in_dir>:

    return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    3cda:	ef 92       	push	r14
    3cdc:	ff 92       	push	r15
    3cde:	0f 93       	push	r16
    3ce0:	1f 93       	push	r17
    3ce2:	cf 93       	push	r28
    3ce4:	df 93       	push	r29
    3ce6:	8b 01       	movw	r16, r22
    3ce8:	7a 01       	movw	r14, r20
    3cea:	e9 01       	movw	r28, r18
    while(fat_read_dir(dd, dir_entry))
    3cec:	0b c0       	rjmp	.+22     	; 0x3d04 <find_file_in_dir+0x2a>
    {
        if(strcmp(dir_entry->long_name, name) == 0)
    3cee:	b7 01       	movw	r22, r14
    3cf0:	ce 01       	movw	r24, r28
    3cf2:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <strcmp>
    3cf6:	89 2b       	or	r24, r25
    3cf8:	29 f4       	brne	.+10     	; 0x3d04 <find_file_in_dir+0x2a>
        {
            fat_reset_dir(dd);
    3cfa:	c8 01       	movw	r24, r16
    3cfc:	0e 94 21 17 	call	0x2e42	; 0x2e42 <fat_reset_dir>
            return 1;
    3d00:	81 e0       	ldi	r24, 0x01	; 1
    3d02:	06 c0       	rjmp	.+12     	; 0x3d10 <find_file_in_dir+0x36>
    return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    while(fat_read_dir(dd, dir_entry))
    3d04:	be 01       	movw	r22, r28
    3d06:	c8 01       	movw	r24, r16
    3d08:	0e 94 32 17 	call	0x2e64	; 0x2e64 <fat_read_dir>
    3d0c:	81 11       	cpse	r24, r1
    3d0e:	ef cf       	rjmp	.-34     	; 0x3cee <find_file_in_dir+0x14>
            return 1;
        }
    }

    return 0;
}
    3d10:	df 91       	pop	r29
    3d12:	cf 91       	pop	r28
    3d14:	1f 91       	pop	r17
    3d16:	0f 91       	pop	r16
    3d18:	ff 90       	pop	r15
    3d1a:	ef 90       	pop	r14
    3d1c:	08 95       	ret

00003d1e <read_line>:
    
    return 0;
}

uint8_t read_line(char* buffer, uint8_t buffer_length)
{
    3d1e:	ef 92       	push	r14
    3d20:	ff 92       	push	r15
    3d22:	0f 93       	push	r16
    3d24:	1f 93       	push	r17
    3d26:	cf 93       	push	r28
    3d28:	df 93       	push	r29
    3d2a:	7c 01       	movw	r14, r24
    3d2c:	06 2f       	mov	r16, r22
    memset(buffer, 0, buffer_length);
    3d2e:	46 2f       	mov	r20, r22
    3d30:	50 e0       	ldi	r21, 0x00	; 0
    3d32:	60 e0       	ldi	r22, 0x00	; 0
    3d34:	70 e0       	ldi	r23, 0x00	; 0
    3d36:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <memset>

    uint8_t read_length = 0;
    3d3a:	d0 e0       	ldi	r29, 0x00	; 0
    while(read_length < buffer_length - 1)
    3d3c:	10 e0       	ldi	r17, 0x00	; 0
    3d3e:	01 50       	subi	r16, 0x01	; 1
    3d40:	11 09       	sbc	r17, r1
    3d42:	26 c0       	rjmp	.+76     	; 0x3d90 <read_line+0x72>
    {
        uint8_t c = uart_getc();
    3d44:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <uart_getc>
    3d48:	c8 2f       	mov	r28, r24

        if(c == 0x08 || c == 0x7f)
    3d4a:	88 30       	cpi	r24, 0x08	; 8
    3d4c:	11 f0       	breq	.+4      	; 0x3d52 <read_line+0x34>
    3d4e:	8f 37       	cpi	r24, 0x7F	; 127
    3d50:	89 f4       	brne	.+34     	; 0x3d74 <read_line+0x56>
        {
            if(read_length < 1)
    3d52:	dd 23       	and	r29, r29
    3d54:	e9 f0       	breq	.+58     	; 0x3d90 <read_line+0x72>
                continue;

            --read_length;
    3d56:	d1 50       	subi	r29, 0x01	; 1
            buffer[read_length] = '\0';
    3d58:	f7 01       	movw	r30, r14
    3d5a:	ed 0f       	add	r30, r29
    3d5c:	f1 1d       	adc	r31, r1
    3d5e:	10 82       	st	Z, r1

            uart_putc(0x08);
    3d60:	88 e0       	ldi	r24, 0x08	; 8
    3d62:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
            uart_putc(' ');
    3d66:	80 e2       	ldi	r24, 0x20	; 32
    3d68:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
            uart_putc(0x08);
    3d6c:	88 e0       	ldi	r24, 0x08	; 8
    3d6e:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>

            continue;
    3d72:	0e c0       	rjmp	.+28     	; 0x3d90 <read_line+0x72>
        }

        uart_putc(c);
    3d74:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>

        if(c == '\n')
    3d78:	ca 30       	cpi	r28, 0x0A	; 10
    3d7a:	29 f4       	brne	.+10     	; 0x3d86 <read_line+0x68>
        {
            buffer[read_length] = '\0';
    3d7c:	f7 01       	movw	r30, r14
    3d7e:	ed 0f       	add	r30, r29
    3d80:	f1 1d       	adc	r31, r1
    3d82:	10 82       	st	Z, r1
            break;
    3d84:	0a c0       	rjmp	.+20     	; 0x3d9a <read_line+0x7c>
        }
        else
        {
            buffer[read_length] = c;
    3d86:	f7 01       	movw	r30, r14
    3d88:	ed 0f       	add	r30, r29
    3d8a:	f1 1d       	adc	r31, r1
    3d8c:	c0 83       	st	Z, r28
            ++read_length;
    3d8e:	df 5f       	subi	r29, 0xFF	; 255
uint8_t read_line(char* buffer, uint8_t buffer_length)
{
    memset(buffer, 0, buffer_length);

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
    3d90:	2d 2f       	mov	r18, r29
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	20 17       	cp	r18, r16
    3d96:	31 07       	cpc	r19, r17
    3d98:	ac f2       	brlt	.-86     	; 0x3d44 <read_line+0x26>
            ++read_length;
        }
    }

    return read_length;
}
    3d9a:	8d 2f       	mov	r24, r29
    3d9c:	df 91       	pop	r29
    3d9e:	cf 91       	pop	r28
    3da0:	1f 91       	pop	r17
    3da2:	0f 91       	pop	r16
    3da4:	ff 90       	pop	r15
    3da6:	ef 90       	pop	r14
    3da8:	08 95       	ret

00003daa <main>:
static uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry);
static struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name); 
static uint8_t print_disk_info(const struct fat_fs_struct* fs);

int main()
{
    3daa:	cf 93       	push	r28
    3dac:	df 93       	push	r29
    3dae:	cd b7       	in	r28, 0x3d	; 61
    3db0:	de b7       	in	r29, 0x3e	; 62
    3db2:	cd 58       	subi	r28, 0x8D	; 141
    3db4:	d1 09       	sbc	r29, r1
    3db6:	0f b6       	in	r0, 0x3f	; 63
    3db8:	f8 94       	cli
    3dba:	de bf       	out	0x3e, r29	; 62
    3dbc:	0f be       	out	0x3f, r0	; 63
    3dbe:	cd bf       	out	0x3d, r28	; 61
    /* we will just use ordinary idle mode */
    set_sleep_mode(SLEEP_MODE_IDLE);
    3dc0:	83 b7       	in	r24, 0x33	; 51
    3dc2:	81 7f       	andi	r24, 0xF1	; 241
    3dc4:	83 bf       	out	0x33, r24	; 51

    /* setup uart */
    //uart_init();

	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
    3dc6:	87 e6       	ldi	r24, 0x67	; 103
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	0e 94 41 2a 	call	0x5482	; 0x5482 <uart_init>
	sei();
    3dce:	78 94       	sei
            uart_putc('>');
            uart_putc(' ');

            /* read command */
            char* command = buffer;
            if(read_line(command, sizeof(buffer)) < 1)
    3dd0:	ce 01       	movw	r24, r28
    3dd2:	8d 59       	subi	r24, 0x9D	; 157
    3dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd6:	ed 96       	adiw	r28, 0x3d	; 61
    3dd8:	9f af       	std	Y+63, r25	; 0x3f
    3dda:	8e af       	std	Y+62, r24	; 0x3e
    3ddc:	ed 97       	sbiw	r28, 0x3d	; 61
            }
            else if(strcmp_P(command, PSTR("ls")) == 0)
            {
                /* print directory listing */
                struct fat_dir_entry_struct dir_entry;
                while(fat_read_dir(dd, &dir_entry))
    3dde:	fe 01       	movw	r30, r28
    3de0:	31 96       	adiw	r30, 0x01	; 1
    3de2:	6f 01       	movw	r12, r30
                command += 6;
                if(command[0] == '\0')
                    continue;

                struct fat_dir_entry_struct dir_entry;
                if(!fat_create_dir(dd, command, &dir_entry))
    3de4:	83 e6       	ldi	r24, 0x63	; 99
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	8c 0f       	add	r24, r28
    3dea:	9d 1f       	adc	r25, r29
    3dec:	06 96       	adiw	r24, 0x06	; 6
    3dee:	cb 57       	subi	r28, 0x7B	; 123
    3df0:	df 4f       	sbci	r29, 0xFF	; 255
    3df2:	99 83       	std	Y+1, r25	; 0x01
    3df4:	88 83       	st	Y, r24
    3df6:	c5 58       	subi	r28, 0x85	; 133
    3df8:	d0 40       	sbci	r29, 0x00	; 0
    3dfa:	e3 e6       	ldi	r30, 0x63	; 99
    3dfc:	f0 e0       	ldi	r31, 0x00	; 0
    3dfe:	ec 0f       	add	r30, r28
    3e00:	fd 1f       	adc	r31, r29
    3e02:	37 96       	adiw	r30, 0x07	; 7
    3e04:	c5 57       	subi	r28, 0x75	; 117
    3e06:	df 4f       	sbci	r29, 0xFF	; 255
    3e08:	f9 83       	std	Y+1, r31	; 0x01
    3e0a:	e8 83       	st	Y, r30
    3e0c:	cb 58       	subi	r28, 0x8B	; 139
    3e0e:	d0 40       	sbci	r29, 0x00	; 0
                    *target++ = '\0';
                else
                    continue;

                struct fat_dir_entry_struct file_entry;
                if(find_file_in_dir(fs, dd, command, &file_entry))
    3e10:	83 e6       	ldi	r24, 0x63	; 99
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	8c 0f       	add	r24, r28
    3e16:	9d 1f       	adc	r25, r29
    3e18:	03 96       	adiw	r24, 0x03	; 3
    3e1a:	cd 57       	subi	r28, 0x7D	; 125
    3e1c:	df 4f       	sbci	r29, 0xFF	; 255
    3e1e:	99 83       	std	Y+1, r25	; 0x01
    3e20:	88 83       	st	Y, r24
    3e22:	c3 58       	subi	r28, 0x83	; 131
    3e24:	d0 40       	sbci	r29, 0x00	; 0
    3e26:	bc 2c       	mov	r11, r12
    3e28:	2d 2c       	mov	r2, r13
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
	sei();

    while(1)
    {
		uart_puts_p(PSTR("going into init\n"));
    3e2a:	8c e9       	ldi	r24, 0x9C	; 156
    3e2c:	92 e0       	ldi	r25, 0x02	; 2
    3e2e:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
        /* setup sd card slot */
        if(!sd_raw_init())
    3e32:	0e 94 66 25 	call	0x4acc	; 0x4acc <sd_raw_init>
    3e36:	81 11       	cpse	r24, r1
    3e38:	05 c0       	rjmp	.+10     	; 0x3e44 <main+0x9a>
        {
#if DEBUG
            uart_puts_p(PSTR("MMC/SD initialization failed\n"));
    3e3a:	8e e7       	ldi	r24, 0x7E	; 126
    3e3c:	92 e0       	ldi	r25, 0x02	; 2
    3e3e:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
#endif
            continue;
    3e42:	f3 cf       	rjmp	.-26     	; 0x3e2a <main+0x80>
        }
		uart_puts_p(PSTR("working?\n"));
    3e44:	84 e7       	ldi	r24, 0x74	; 116
    3e46:	92 e0       	ldi	r25, 0x02	; 2
    3e48:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
        /* open first partition */
        struct partition_struct* partition = partition_open(sd_raw_read,
    3e4c:	00 e0       	ldi	r16, 0x00	; 0
    3e4e:	29 e4       	ldi	r18, 0x49	; 73
    3e50:	38 e2       	ldi	r19, 0x28	; 40
    3e52:	4f ef       	ldi	r20, 0xFF	; 255
    3e54:	56 e2       	ldi	r21, 0x26	; 38
    3e56:	6f e5       	ldi	r22, 0x5F	; 95
    3e58:	76 e2       	ldi	r23, 0x26	; 38
    3e5a:	8c e2       	ldi	r24, 0x2C	; 44
    3e5c:	94 e2       	ldi	r25, 0x24	; 36
    3e5e:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <partition_open>
    3e62:	cf 57       	subi	r28, 0x7F	; 127
    3e64:	df 4f       	sbci	r29, 0xFF	; 255
    3e66:	99 83       	std	Y+1, r25	; 0x01
    3e68:	88 83       	st	Y, r24
    3e6a:	c1 58       	subi	r28, 0x81	; 129
    3e6c:	d0 40       	sbci	r29, 0x00	; 0
                                                            0,
#endif
                                                            0
                                                           );

        if(!partition)
    3e6e:	89 2b       	or	r24, r25
    3e70:	c1 f4       	brne	.+48     	; 0x3ea2 <main+0xf8>
        {
            /* If the partition did not open, assume the storage device
             * is a "superfloppy", i.e. has no MBR.
             */
            partition = partition_open(sd_raw_read,
    3e72:	0f ef       	ldi	r16, 0xFF	; 255
    3e74:	29 e4       	ldi	r18, 0x49	; 73
    3e76:	38 e2       	ldi	r19, 0x28	; 40
    3e78:	4f ef       	ldi	r20, 0xFF	; 255
    3e7a:	56 e2       	ldi	r21, 0x26	; 38
    3e7c:	6f e5       	ldi	r22, 0x5F	; 95
    3e7e:	76 e2       	ldi	r23, 0x26	; 38
    3e80:	8c e2       	ldi	r24, 0x2C	; 44
    3e82:	94 e2       	ldi	r25, 0x24	; 36
    3e84:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <partition_open>
    3e88:	cf 57       	subi	r28, 0x7F	; 127
    3e8a:	df 4f       	sbci	r29, 0xFF	; 255
    3e8c:	99 83       	std	Y+1, r25	; 0x01
    3e8e:	88 83       	st	Y, r24
    3e90:	c1 58       	subi	r28, 0x81	; 129
    3e92:	d0 40       	sbci	r29, 0x00	; 0
                                       0,
                                       0,
#endif
                                       -1
                                      );
            if(!partition)
    3e94:	89 2b       	or	r24, r25
    3e96:	29 f4       	brne	.+10     	; 0x3ea2 <main+0xf8>
            {
#if DEBUG
                uart_puts_p(PSTR("opening partition failed\n"));
    3e98:	8a e5       	ldi	r24, 0x5A	; 90
    3e9a:	92 e0       	ldi	r25, 0x02	; 2
    3e9c:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
#endif
                continue;
    3ea0:	c4 cf       	rjmp	.-120    	; 0x3e2a <main+0x80>
            }
        }

        /* open file system */
        struct fat_fs_struct* fs = fat_open(partition);
    3ea2:	cf 57       	subi	r28, 0x7F	; 127
    3ea4:	df 4f       	sbci	r29, 0xFF	; 255
    3ea6:	88 81       	ld	r24, Y
    3ea8:	99 81       	ldd	r25, Y+1	; 0x01
    3eaa:	c1 58       	subi	r28, 0x81	; 129
    3eac:	d0 40       	sbci	r29, 0x00	; 0
    3eae:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <fat_open>
    3eb2:	ef 96       	adiw	r28, 0x3f	; 63
    3eb4:	9f af       	std	Y+63, r25	; 0x3f
    3eb6:	8e af       	std	Y+62, r24	; 0x3e
    3eb8:	ef 97       	sbiw	r28, 0x3f	; 63
        if(!fs)
    3eba:	89 2b       	or	r24, r25
    3ebc:	29 f4       	brne	.+10     	; 0x3ec8 <main+0x11e>
        {
#if DEBUG
            uart_puts_p(PSTR("opening filesystem failed\n"));
    3ebe:	8f e3       	ldi	r24, 0x3F	; 63
    3ec0:	92 e0       	ldi	r25, 0x02	; 2
    3ec2:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
#endif
            continue;
    3ec6:	b1 cf       	rjmp	.-158    	; 0x3e2a <main+0x80>
        }

        /* open root directory */
        struct fat_dir_entry_struct directory;
        fat_get_dir_entry_of_path(fs, "/", &directory);
    3ec8:	ae 01       	movw	r20, r28
    3eca:	4e 5c       	subi	r20, 0xCE	; 206
    3ecc:	5f 4f       	sbci	r21, 0xFF	; 255
    3ece:	6d e0       	ldi	r22, 0x0D	; 13
    3ed0:	71 e0       	ldi	r23, 0x01	; 1
    3ed2:	ef 96       	adiw	r28, 0x3f	; 63
    3ed4:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ed6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ed8:	ef 97       	sbiw	r28, 0x3f	; 63
    3eda:	0e 94 61 18 	call	0x30c2	; 0x30c2 <fat_get_dir_entry_of_path>

        struct fat_dir_struct* dd = fat_open_dir(fs, &directory);
    3ede:	be 01       	movw	r22, r28
    3ee0:	6e 5c       	subi	r22, 0xCE	; 206
    3ee2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ee4:	ef 96       	adiw	r28, 0x3f	; 63
    3ee6:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ee8:	9f ad       	ldd	r25, Y+63	; 0x3f
    3eea:	ef 97       	sbiw	r28, 0x3f	; 63
    3eec:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <fat_open_dir>
    3ef0:	c1 58       	subi	r28, 0x81	; 129
    3ef2:	df 4f       	sbci	r29, 0xFF	; 255
    3ef4:	99 83       	std	Y+1, r25	; 0x01
    3ef6:	88 83       	st	Y, r24
    3ef8:	cf 57       	subi	r28, 0x7F	; 127
    3efa:	d0 40       	sbci	r29, 0x00	; 0
        if(!dd)
    3efc:	89 2b       	or	r24, r25
    3efe:	29 f4       	brne	.+10     	; 0x3f0a <main+0x160>
        {
#if DEBUG
            uart_puts_p(PSTR("opening root directory failed\n"));
    3f00:	80 e2       	ldi	r24, 0x20	; 32
    3f02:	92 e0       	ldi	r25, 0x02	; 2
    3f04:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
#endif
            continue;
    3f08:	90 cf       	rjmp	.-224    	; 0x3e2a <main+0x80>
        }
        
        /* print some card information as a boot message */
        print_disk_info(fs);
    3f0a:	ef 96       	adiw	r28, 0x3f	; 63
    3f0c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f0e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f10:	ef 97       	sbiw	r28, 0x3f	; 63
    3f12:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <print_disk_info>
            uart_putc('>');
            uart_putc(' ');

            /* read command */
            char* command = buffer;
            if(read_line(command, sizeof(buffer)) < 1)
    3f16:	ec 96       	adiw	r28, 0x3c	; 60
    3f18:	9f ac       	ldd	r9, Y+63	; 0x3f
    3f1a:	ec 97       	sbiw	r28, 0x3c	; 60
    3f1c:	ed 96       	adiw	r28, 0x3d	; 61
    3f1e:	af ac       	ldd	r10, Y+63	; 0x3f
    3f20:	ed 97       	sbiw	r28, 0x3d	; 61
                {
                    uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;

                    uart_puts(dir_entry.long_name);
                    uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
                    while(spaces--)
    3f22:	0f 2e       	mov	r0, r31
    3f24:	f3 e2       	ldi	r31, 0x23	; 35
    3f26:	3f 2e       	mov	r3, r31
    3f28:	f0 2d       	mov	r31, r0
    3f2a:	e3 e6       	ldi	r30, 0x63	; 99
    3f2c:	f0 e0       	ldi	r31, 0x00	; 0
    3f2e:	ec 0f       	add	r30, r28
    3f30:	fd 1f       	adc	r31, r29
    3f32:	34 96       	adiw	r30, 0x04	; 4
    3f34:	c9 57       	subi	r28, 0x79	; 121
    3f36:	df 4f       	sbci	r29, 0xFF	; 255
    3f38:	f9 83       	std	Y+1, r31	; 0x01
    3f3a:	e8 83       	st	Y, r30
    3f3c:	c7 58       	subi	r28, 0x87	; 135
    3f3e:	d0 40       	sbci	r29, 0x00	; 0
        /* provide a simple shell */
        char buffer[24];
        while(1)
        {
            /* print prompt */
            uart_putc('>');
    3f40:	8e e3       	ldi	r24, 0x3E	; 62
    3f42:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
            uart_putc(' ');
    3f46:	80 e2       	ldi	r24, 0x20	; 32
    3f48:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>

            /* read command */
            char* command = buffer;
            if(read_line(command, sizeof(buffer)) < 1)
    3f4c:	68 e1       	ldi	r22, 0x18	; 24
    3f4e:	89 2d       	mov	r24, r9
    3f50:	9a 2d       	mov	r25, r10
    3f52:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <read_line>
    3f56:	88 23       	and	r24, r24
    3f58:	99 f3       	breq	.-26     	; 0x3f40 <main+0x196>
                continue;

            /* execute command */
            if(strcmp_P(command, PSTR("init")) == 0)
    3f5a:	6b e1       	ldi	r22, 0x1B	; 27
    3f5c:	72 e0       	ldi	r23, 0x02	; 2
    3f5e:	89 2d       	mov	r24, r9
    3f60:	9a 2d       	mov	r25, r10
    3f62:	0e 94 b5 2c 	call	0x596a	; 0x596a <strcmp_P>
    3f66:	89 2b       	or	r24, r25
    3f68:	09 f4       	brne	.+2      	; 0x3f6c <main+0x1c2>
    3f6a:	ef c2       	rjmp	.+1502   	; 0x454a <main+0x7a0>
            {
                break;
            }
            else if(strncmp_P(command, PSTR("cd "), 3) == 0)
    3f6c:	43 e0       	ldi	r20, 0x03	; 3
    3f6e:	50 e0       	ldi	r21, 0x00	; 0
    3f70:	67 e1       	ldi	r22, 0x17	; 23
    3f72:	72 e0       	ldi	r23, 0x02	; 2
    3f74:	89 2d       	mov	r24, r9
    3f76:	9a 2d       	mov	r25, r10
    3f78:	0e 94 be 2c 	call	0x597c	; 0x597c <strncmp_P>
    3f7c:	89 2b       	or	r24, r25
    3f7e:	09 f0       	breq	.+2      	; 0x3f82 <main+0x1d8>
    3f80:	45 c0       	rjmp	.+138    	; 0x400c <main+0x262>
            {
                command += 3;
                if(command[0] == '\0')
    3f82:	a7 96       	adiw	r28, 0x27	; 39
    3f84:	8f ad       	ldd	r24, Y+63	; 0x3f
    3f86:	a7 97       	sbiw	r28, 0x27	; 39
    3f88:	88 23       	and	r24, r24
    3f8a:	d1 f2       	breq	.-76     	; 0x3f40 <main+0x196>
                    continue;

                /* change directory */
                struct fat_dir_entry_struct subdir_entry;
                if(find_file_in_dir(fs, dd, command, &subdir_entry))
    3f8c:	2b 2d       	mov	r18, r11
    3f8e:	32 2d       	mov	r19, r2
    3f90:	cd 57       	subi	r28, 0x7D	; 125
    3f92:	df 4f       	sbci	r29, 0xFF	; 255
    3f94:	48 81       	ld	r20, Y
    3f96:	59 81       	ldd	r21, Y+1	; 0x01
    3f98:	c3 58       	subi	r28, 0x83	; 131
    3f9a:	d0 40       	sbci	r29, 0x00	; 0
    3f9c:	c1 58       	subi	r28, 0x81	; 129
    3f9e:	df 4f       	sbci	r29, 0xFF	; 255
    3fa0:	68 81       	ld	r22, Y
    3fa2:	79 81       	ldd	r23, Y+1	; 0x01
    3fa4:	cf 57       	subi	r28, 0x7F	; 127
    3fa6:	d0 40       	sbci	r29, 0x00	; 0
    3fa8:	ef 96       	adiw	r28, 0x3f	; 63
    3faa:	8e ad       	ldd	r24, Y+62	; 0x3e
    3fac:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fae:	ef 97       	sbiw	r28, 0x3f	; 63
    3fb0:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <find_file_in_dir>
    3fb4:	88 23       	and	r24, r24
    3fb6:	d1 f0       	breq	.+52     	; 0x3fec <main+0x242>
                {
                    struct fat_dir_struct* dd_new = fat_open_dir(fs, &subdir_entry);
    3fb8:	6b 2d       	mov	r22, r11
    3fba:	72 2d       	mov	r23, r2
    3fbc:	ef 96       	adiw	r28, 0x3f	; 63
    3fbe:	8e ad       	ldd	r24, Y+62	; 0x3e
    3fc0:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fc2:	ef 97       	sbiw	r28, 0x3f	; 63
    3fc4:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <fat_open_dir>
    3fc8:	8c 01       	movw	r16, r24
                    if(dd_new)
    3fca:	89 2b       	or	r24, r25
    3fcc:	79 f0       	breq	.+30     	; 0x3fec <main+0x242>
                    {
                        fat_close_dir(dd);
    3fce:	c1 58       	subi	r28, 0x81	; 129
    3fd0:	df 4f       	sbci	r29, 0xFF	; 255
    3fd2:	88 81       	ld	r24, Y
    3fd4:	99 81       	ldd	r25, Y+1	; 0x01
    3fd6:	cf 57       	subi	r28, 0x7F	; 127
    3fd8:	d0 40       	sbci	r29, 0x00	; 0
    3fda:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <fat_close_dir>
                        dd = dd_new;
    3fde:	c1 58       	subi	r28, 0x81	; 129
    3fe0:	df 4f       	sbci	r29, 0xFF	; 255
    3fe2:	19 83       	std	Y+1, r17	; 0x01
    3fe4:	08 83       	st	Y, r16
    3fe6:	cf 57       	subi	r28, 0x7F	; 127
    3fe8:	d0 40       	sbci	r29, 0x00	; 0
                        continue;
    3fea:	aa cf       	rjmp	.-172    	; 0x3f40 <main+0x196>
                    }
                }

                uart_puts_p(PSTR("directory not found: "));
    3fec:	81 e0       	ldi	r24, 0x01	; 1
    3fee:	92 e0       	ldi	r25, 0x02	; 2
    3ff0:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
                uart_puts(command);
    3ff4:	cd 57       	subi	r28, 0x7D	; 125
    3ff6:	df 4f       	sbci	r29, 0xFF	; 255
    3ff8:	88 81       	ld	r24, Y
    3ffa:	99 81       	ldd	r25, Y+1	; 0x01
    3ffc:	c3 58       	subi	r28, 0x83	; 131
    3ffe:	d0 40       	sbci	r29, 0x00	; 0
    4000:	0e 94 3d 2b 	call	0x567a	; 0x567a <uart_puts>
                uart_putc('\n');
    4004:	8a e0       	ldi	r24, 0x0A	; 10
    4006:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    400a:	9a cf       	rjmp	.-204    	; 0x3f40 <main+0x196>
            }
            else if(strcmp_P(command, PSTR("ls")) == 0)
    400c:	6e ef       	ldi	r22, 0xFE	; 254
    400e:	71 e0       	ldi	r23, 0x01	; 1
    4010:	89 2d       	mov	r24, r9
    4012:	9a 2d       	mov	r25, r10
    4014:	0e 94 b5 2c 	call	0x596a	; 0x596a <strcmp_P>
    4018:	89 2b       	or	r24, r25
    401a:	61 f1       	breq	.+88     	; 0x4074 <main+0x2ca>
    401c:	39 c0       	rjmp	.+114    	; 0x4090 <main+0x2e6>
            {
                /* print directory listing */
                struct fat_dir_entry_struct dir_entry;
                while(fat_read_dir(dd, &dir_entry))
                {
                    uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;
    401e:	f6 01       	movw	r30, r12
    4020:	01 90       	ld	r0, Z+
    4022:	00 20       	and	r0, r0
    4024:	e9 f7       	brne	.-6      	; 0x4020 <main+0x276>
    4026:	31 97       	sbiw	r30, 0x01	; 1
    4028:	8f 01       	movw	r16, r30
    402a:	0c 19       	sub	r16, r12
    402c:	1d 09       	sbc	r17, r13
    402e:	80 2e       	mov	r8, r16

                    uart_puts(dir_entry.long_name);
    4030:	8b 2d       	mov	r24, r11
    4032:	92 2d       	mov	r25, r2
    4034:	0e 94 3d 2b 	call	0x567a	; 0x567a <uart_puts>
                    uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
    4038:	89 a1       	ldd	r24, Y+33	; 0x21
    403a:	84 fd       	sbrc	r24, 4
    403c:	02 c0       	rjmp	.+4      	; 0x4042 <main+0x298>
    403e:	80 e2       	ldi	r24, 0x20	; 32
    4040:	01 c0       	rjmp	.+2      	; 0x4044 <main+0x29a>
    4042:	8f e2       	ldi	r24, 0x2F	; 47
    4044:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
                    while(spaces--)
    4048:	13 2d       	mov	r17, r3
    404a:	10 1b       	sub	r17, r16
    404c:	f4 e2       	ldi	r31, 0x24	; 36
    404e:	8f 16       	cp	r8, r31
    4050:	39 f0       	breq	.+14     	; 0x4060 <main+0x2b6>
                        uart_putc(' ');
    4052:	80 e2       	ldi	r24, 0x20	; 32
    4054:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    4058:	81 2f       	mov	r24, r17
                {
                    uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;

                    uart_puts(dir_entry.long_name);
                    uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
                    while(spaces--)
    405a:	11 50       	subi	r17, 0x01	; 1
    405c:	81 11       	cpse	r24, r1
    405e:	f9 cf       	rjmp	.-14     	; 0x4052 <main+0x2a8>
                        uart_putc(' ');
                    uart_putdw_dec(dir_entry.file_size);
    4060:	6e a1       	ldd	r22, Y+38	; 0x26
    4062:	7f a1       	ldd	r23, Y+39	; 0x27
    4064:	88 a5       	ldd	r24, Y+40	; 0x28
    4066:	99 a5       	ldd	r25, Y+41	; 0x29
    4068:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <uart_putdw_dec>
                    uart_putc('\n');
    406c:	8a e0       	ldi	r24, 0x0A	; 10
    406e:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    4072:	06 c0       	rjmp	.+12     	; 0x4080 <main+0x2d6>
    4074:	c1 58       	subi	r28, 0x81	; 129
    4076:	df 4f       	sbci	r29, 0xFF	; 255
    4078:	e8 80       	ld	r14, Y
    407a:	f9 80       	ldd	r15, Y+1	; 0x01
    407c:	cf 57       	subi	r28, 0x7F	; 127
    407e:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if(strcmp_P(command, PSTR("ls")) == 0)
            {
                /* print directory listing */
                struct fat_dir_entry_struct dir_entry;
                while(fat_read_dir(dd, &dir_entry))
    4080:	6b 2d       	mov	r22, r11
    4082:	72 2d       	mov	r23, r2
    4084:	c7 01       	movw	r24, r14
    4086:	0e 94 32 17 	call	0x2e64	; 0x2e64 <fat_read_dir>
    408a:	81 11       	cpse	r24, r1
    408c:	c8 cf       	rjmp	.-112    	; 0x401e <main+0x274>
    408e:	58 cf       	rjmp	.-336    	; 0x3f40 <main+0x196>
                        uart_putc(' ');
                    uart_putdw_dec(dir_entry.file_size);
                    uart_putc('\n');
                }
            }
            else if(strncmp_P(command, PSTR("cat "), 4) == 0)
    4090:	44 e0       	ldi	r20, 0x04	; 4
    4092:	50 e0       	ldi	r21, 0x00	; 0
    4094:	69 ef       	ldi	r22, 0xF9	; 249
    4096:	71 e0       	ldi	r23, 0x01	; 1
    4098:	89 2d       	mov	r24, r9
    409a:	9a 2d       	mov	r25, r10
    409c:	0e 94 be 2c 	call	0x597c	; 0x597c <strncmp_P>
    40a0:	89 2b       	or	r24, r25
    40a2:	09 f0       	breq	.+2      	; 0x40a6 <main+0x2fc>
    40a4:	83 c0       	rjmp	.+262    	; 0x41ac <main+0x402>
            {
                command += 4;
                if(command[0] == '\0')
    40a6:	a8 96       	adiw	r28, 0x28	; 40
    40a8:	8f ad       	ldd	r24, Y+63	; 0x3f
    40aa:	a8 97       	sbiw	r28, 0x28	; 40
    40ac:	88 23       	and	r24, r24
    40ae:	09 f4       	brne	.+2      	; 0x40b2 <main+0x308>
    40b0:	47 cf       	rjmp	.-370    	; 0x3f40 <main+0x196>
}

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
    40b2:	2b 2d       	mov	r18, r11
    40b4:	32 2d       	mov	r19, r2
    40b6:	c9 57       	subi	r28, 0x79	; 121
    40b8:	df 4f       	sbci	r29, 0xFF	; 255
    40ba:	48 81       	ld	r20, Y
    40bc:	59 81       	ldd	r21, Y+1	; 0x01
    40be:	c7 58       	subi	r28, 0x87	; 135
    40c0:	d0 40       	sbci	r29, 0x00	; 0
    40c2:	c1 58       	subi	r28, 0x81	; 129
    40c4:	df 4f       	sbci	r29, 0xFF	; 255
    40c6:	68 81       	ld	r22, Y
    40c8:	79 81       	ldd	r23, Y+1	; 0x01
    40ca:	cf 57       	subi	r28, 0x7F	; 127
    40cc:	d0 40       	sbci	r29, 0x00	; 0
    40ce:	ef 96       	adiw	r28, 0x3f	; 63
    40d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    40d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    40d4:	ef 97       	sbiw	r28, 0x3f	; 63
    40d6:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <find_file_in_dir>
    40da:	88 23       	and	r24, r24
    40dc:	81 f0       	breq	.+32     	; 0x40fe <main+0x354>
        return 0;

    return fat_open_file(fs, &file_entry);
    40de:	6b 2d       	mov	r22, r11
    40e0:	72 2d       	mov	r23, r2
    40e2:	ef 96       	adiw	r28, 0x3f	; 63
    40e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    40e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    40e8:	ef 97       	sbiw	r28, 0x3f	; 63
    40ea:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <fat_open_file>
    40ee:	c7 57       	subi	r28, 0x77	; 119
    40f0:	df 4f       	sbci	r29, 0xFF	; 255
    40f2:	99 83       	std	Y+1, r25	; 0x01
    40f4:	88 83       	st	Y, r24
    40f6:	c9 58       	subi	r28, 0x89	; 137
    40f8:	d0 40       	sbci	r29, 0x00	; 0
                if(command[0] == '\0')
                    continue;
                
                /* search file in current directory and open it */
                struct fat_file_struct* fd = open_file_in_dir(fs, dd, command);
                if(!fd)
    40fa:	89 2b       	or	r24, r25
    40fc:	79 f5       	brne	.+94     	; 0x415c <main+0x3b2>
                {
                    uart_puts_p(PSTR("error opening "));
    40fe:	8a ee       	ldi	r24, 0xEA	; 234
    4100:	91 e0       	ldi	r25, 0x01	; 1
    4102:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
                    uart_puts(command);
    4106:	c9 57       	subi	r28, 0x79	; 121
    4108:	df 4f       	sbci	r29, 0xFF	; 255
    410a:	88 81       	ld	r24, Y
    410c:	99 81       	ldd	r25, Y+1	; 0x01
    410e:	c7 58       	subi	r28, 0x87	; 135
    4110:	d0 40       	sbci	r29, 0x00	; 0
    4112:	0e 94 3d 2b 	call	0x567a	; 0x567a <uart_puts>
                    uart_putc('\n');
    4116:	8a e0       	ldi	r24, 0x0A	; 10
    4118:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
                    continue;
    411c:	11 cf       	rjmp	.-478    	; 0x3f40 <main+0x196>
                uint8_t buffer[8];
                uint32_t offset = 0;
                intptr_t count;
                while((count = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
                {
                    uart_putdw_hex(offset);
    411e:	c3 01       	movw	r24, r6
    4120:	b2 01       	movw	r22, r4
    4122:	0e 94 84 2a 	call	0x5508	; 0x5508 <uart_putdw_hex>
                    uart_putc(':');
    4126:	8a e3       	ldi	r24, 0x3A	; 58
    4128:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    412c:	0b 2d       	mov	r16, r11
    412e:	12 2d       	mov	r17, r2
    4130:	ec 0c       	add	r14, r12
    4132:	fd 1c       	adc	r15, r13
                    for(intptr_t i = 0; i < count; ++i)
                    {
                        uart_putc(' ');
    4134:	80 e2       	ldi	r24, 0x20	; 32
    4136:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
                        uart_putc_hex(buffer[i]);
    413a:	f8 01       	movw	r30, r16
    413c:	81 91       	ld	r24, Z+
    413e:	8f 01       	movw	r16, r30
    4140:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <uart_putc_hex>
                intptr_t count;
                while((count = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
                {
                    uart_putdw_hex(offset);
                    uart_putc(':');
                    for(intptr_t i = 0; i < count; ++i)
    4144:	0e 15       	cp	r16, r14
    4146:	1f 05       	cpc	r17, r15
    4148:	a9 f7       	brne	.-22     	; 0x4134 <main+0x38a>
                    {
                        uart_putc(' ');
                        uart_putc_hex(buffer[i]);
                    }
                    uart_putc('\n');
    414a:	8a e0       	ldi	r24, 0x0A	; 10
    414c:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
                    offset += 8;
    4150:	f8 e0       	ldi	r31, 0x08	; 8
    4152:	4f 0e       	add	r4, r31
    4154:	51 1c       	adc	r5, r1
    4156:	61 1c       	adc	r6, r1
    4158:	71 1c       	adc	r7, r1
    415a:	0f c0       	rjmp	.+30     	; 0x417a <main+0x3d0>
    415c:	41 2c       	mov	r4, r1
    415e:	51 2c       	mov	r5, r1
    4160:	61 2c       	mov	r6, r1
    4162:	71 2c       	mov	r7, r1
    4164:	c3 57       	subi	r28, 0x73	; 115
    4166:	df 4f       	sbci	r29, 0xFF	; 255
    4168:	98 82       	st	Y, r9
    416a:	cd 58       	subi	r28, 0x8D	; 141
    416c:	d0 40       	sbci	r29, 0x00	; 0
    416e:	c7 57       	subi	r28, 0x77	; 119
    4170:	df 4f       	sbci	r29, 0xFF	; 255
    4172:	88 80       	ld	r8, Y
    4174:	99 80       	ldd	r9, Y+1	; 0x01
    4176:	c9 58       	subi	r28, 0x89	; 137
    4178:	d0 40       	sbci	r29, 0x00	; 0

                /* print file contents */
                uint8_t buffer[8];
                uint32_t offset = 0;
                intptr_t count;
                while((count = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
    417a:	48 e0       	ldi	r20, 0x08	; 8
    417c:	50 e0       	ldi	r21, 0x00	; 0
    417e:	6b 2d       	mov	r22, r11
    4180:	72 2d       	mov	r23, r2
    4182:	c4 01       	movw	r24, r8
    4184:	0e 94 20 10 	call	0x2040	; 0x2040 <fat_read_file>
    4188:	7c 01       	movw	r14, r24
    418a:	18 16       	cp	r1, r24
    418c:	19 06       	cpc	r1, r25
    418e:	3c f2       	brlt	.-114    	; 0x411e <main+0x374>
    4190:	c3 57       	subi	r28, 0x73	; 115
    4192:	df 4f       	sbci	r29, 0xFF	; 255
    4194:	98 80       	ld	r9, Y
    4196:	cd 58       	subi	r28, 0x8D	; 141
    4198:	d0 40       	sbci	r29, 0x00	; 0
                    }
                    uart_putc('\n');
                    offset += 8;
                }

                fat_close_file(fd);
    419a:	c7 57       	subi	r28, 0x77	; 119
    419c:	df 4f       	sbci	r29, 0xFF	; 255
    419e:	88 81       	ld	r24, Y
    41a0:	99 81       	ldd	r25, Y+1	; 0x01
    41a2:	c9 58       	subi	r28, 0x89	; 137
    41a4:	d0 40       	sbci	r29, 0x00	; 0
    41a6:	0e 94 1a 10 	call	0x2034	; 0x2034 <fat_close_file>
    41aa:	ca ce       	rjmp	.-620    	; 0x3f40 <main+0x196>
            }
            else if(strcmp_P(command, PSTR("disk")) == 0)
    41ac:	65 ee       	ldi	r22, 0xE5	; 229
    41ae:	71 e0       	ldi	r23, 0x01	; 1
    41b0:	89 2d       	mov	r24, r9
    41b2:	9a 2d       	mov	r25, r10
    41b4:	0e 94 b5 2c 	call	0x596a	; 0x596a <strcmp_P>
    41b8:	89 2b       	or	r24, r25
    41ba:	69 f4       	brne	.+26     	; 0x41d6 <main+0x42c>
            {
                if(!print_disk_info(fs))
    41bc:	ef 96       	adiw	r28, 0x3f	; 63
    41be:	8e ad       	ldd	r24, Y+62	; 0x3e
    41c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    41c2:	ef 97       	sbiw	r28, 0x3f	; 63
    41c4:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <print_disk_info>
    41c8:	81 11       	cpse	r24, r1
    41ca:	ba ce       	rjmp	.-652    	; 0x3f40 <main+0x196>
                    uart_puts_p(PSTR("error reading disk info\n"));
    41cc:	8c ec       	ldi	r24, 0xCC	; 204
    41ce:	91 e0       	ldi	r25, 0x01	; 1
    41d0:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
    41d4:	b5 ce       	rjmp	.-662    	; 0x3f40 <main+0x196>
            }
#if FAT_WRITE_SUPPORT
            else if(strncmp_P(command, PSTR("rm "), 3) == 0)
    41d6:	43 e0       	ldi	r20, 0x03	; 3
    41d8:	50 e0       	ldi	r21, 0x00	; 0
    41da:	68 ec       	ldi	r22, 0xC8	; 200
    41dc:	71 e0       	ldi	r23, 0x01	; 1
    41de:	89 2d       	mov	r24, r9
    41e0:	9a 2d       	mov	r25, r10
    41e2:	0e 94 be 2c 	call	0x597c	; 0x597c <strncmp_P>
    41e6:	89 2b       	or	r24, r25
    41e8:	b1 f5       	brne	.+108    	; 0x4256 <main+0x4ac>
            {
                command += 3;
                if(command[0] == '\0')
    41ea:	a7 96       	adiw	r28, 0x27	; 39
    41ec:	8f ad       	ldd	r24, Y+63	; 0x3f
    41ee:	a7 97       	sbiw	r28, 0x27	; 39
    41f0:	88 23       	and	r24, r24
    41f2:	09 f4       	brne	.+2      	; 0x41f6 <main+0x44c>
    41f4:	a5 ce       	rjmp	.-694    	; 0x3f40 <main+0x196>
                    continue;
                
                struct fat_dir_entry_struct file_entry;
                if(find_file_in_dir(fs, dd, command, &file_entry))
    41f6:	2b 2d       	mov	r18, r11
    41f8:	32 2d       	mov	r19, r2
    41fa:	cd 57       	subi	r28, 0x7D	; 125
    41fc:	df 4f       	sbci	r29, 0xFF	; 255
    41fe:	48 81       	ld	r20, Y
    4200:	59 81       	ldd	r21, Y+1	; 0x01
    4202:	c3 58       	subi	r28, 0x83	; 131
    4204:	d0 40       	sbci	r29, 0x00	; 0
    4206:	c1 58       	subi	r28, 0x81	; 129
    4208:	df 4f       	sbci	r29, 0xFF	; 255
    420a:	68 81       	ld	r22, Y
    420c:	79 81       	ldd	r23, Y+1	; 0x01
    420e:	cf 57       	subi	r28, 0x7F	; 127
    4210:	d0 40       	sbci	r29, 0x00	; 0
    4212:	ef 96       	adiw	r28, 0x3f	; 63
    4214:	8e ad       	ldd	r24, Y+62	; 0x3e
    4216:	9f ad       	ldd	r25, Y+63	; 0x3f
    4218:	ef 97       	sbiw	r28, 0x3f	; 63
    421a:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <find_file_in_dir>
    421e:	88 23       	and	r24, r24
    4220:	51 f0       	breq	.+20     	; 0x4236 <main+0x48c>
                {
                    if(fat_delete_file(fs, &file_entry))
    4222:	6b 2d       	mov	r22, r11
    4224:	72 2d       	mov	r23, r2
    4226:	ef 96       	adiw	r28, 0x3f	; 63
    4228:	8e ad       	ldd	r24, Y+62	; 0x3e
    422a:	9f ad       	ldd	r25, Y+63	; 0x3f
    422c:	ef 97       	sbiw	r28, 0x3f	; 63
    422e:	0e 94 72 19 	call	0x32e4	; 0x32e4 <fat_delete_file>
    4232:	81 11       	cpse	r24, r1
    4234:	85 ce       	rjmp	.-758    	; 0x3f40 <main+0x196>
                        continue;
                }

                uart_puts_p(PSTR("error deleting file: "));
    4236:	82 eb       	ldi	r24, 0xB2	; 178
    4238:	91 e0       	ldi	r25, 0x01	; 1
    423a:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
                uart_puts(command);
    423e:	cd 57       	subi	r28, 0x7D	; 125
    4240:	df 4f       	sbci	r29, 0xFF	; 255
    4242:	88 81       	ld	r24, Y
    4244:	99 81       	ldd	r25, Y+1	; 0x01
    4246:	c3 58       	subi	r28, 0x83	; 131
    4248:	d0 40       	sbci	r29, 0x00	; 0
    424a:	0e 94 3d 2b 	call	0x567a	; 0x567a <uart_puts>
                uart_putc('\n');
    424e:	8a e0       	ldi	r24, 0x0A	; 10
    4250:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    4254:	75 ce       	rjmp	.-790    	; 0x3f40 <main+0x196>
            }
            else if(strncmp_P(command, PSTR("touch "), 6) == 0)
    4256:	46 e0       	ldi	r20, 0x06	; 6
    4258:	50 e0       	ldi	r21, 0x00	; 0
    425a:	6b ea       	ldi	r22, 0xAB	; 171
    425c:	71 e0       	ldi	r23, 0x01	; 1
    425e:	89 2d       	mov	r24, r9
    4260:	9a 2d       	mov	r25, r10
    4262:	0e 94 be 2c 	call	0x597c	; 0x597c <strncmp_P>
    4266:	89 2b       	or	r24, r25
    4268:	41 f5       	brne	.+80     	; 0x42ba <main+0x510>
            {
                command += 6;
                if(command[0] == '\0')
    426a:	aa 96       	adiw	r28, 0x2a	; 42
    426c:	8f ad       	ldd	r24, Y+63	; 0x3f
    426e:	aa 97       	sbiw	r28, 0x2a	; 42
    4270:	88 23       	and	r24, r24
    4272:	09 f4       	brne	.+2      	; 0x4276 <main+0x4cc>
    4274:	65 ce       	rjmp	.-822    	; 0x3f40 <main+0x196>
                    continue;

                struct fat_dir_entry_struct file_entry;
                if(!fat_create_file(dd, command, &file_entry))
    4276:	4b 2d       	mov	r20, r11
    4278:	52 2d       	mov	r21, r2
    427a:	cb 57       	subi	r28, 0x7B	; 123
    427c:	df 4f       	sbci	r29, 0xFF	; 255
    427e:	68 81       	ld	r22, Y
    4280:	79 81       	ldd	r23, Y+1	; 0x01
    4282:	c5 58       	subi	r28, 0x85	; 133
    4284:	d0 40       	sbci	r29, 0x00	; 0
    4286:	c1 58       	subi	r28, 0x81	; 129
    4288:	df 4f       	sbci	r29, 0xFF	; 255
    428a:	88 81       	ld	r24, Y
    428c:	99 81       	ldd	r25, Y+1	; 0x01
    428e:	cf 57       	subi	r28, 0x7F	; 127
    4290:	d0 40       	sbci	r29, 0x00	; 0
    4292:	0e 94 0b 19 	call	0x3216	; 0x3216 <fat_create_file>
    4296:	81 11       	cpse	r24, r1
    4298:	53 ce       	rjmp	.-858    	; 0x3f40 <main+0x196>
                {
                    uart_puts_p(PSTR("error creating file: "));
    429a:	85 e9       	ldi	r24, 0x95	; 149
    429c:	91 e0       	ldi	r25, 0x01	; 1
    429e:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
                    uart_puts(command);
    42a2:	cb 57       	subi	r28, 0x7B	; 123
    42a4:	df 4f       	sbci	r29, 0xFF	; 255
    42a6:	88 81       	ld	r24, Y
    42a8:	99 81       	ldd	r25, Y+1	; 0x01
    42aa:	c5 58       	subi	r28, 0x85	; 133
    42ac:	d0 40       	sbci	r29, 0x00	; 0
    42ae:	0e 94 3d 2b 	call	0x567a	; 0x567a <uart_puts>
                    uart_putc('\n');
    42b2:	8a e0       	ldi	r24, 0x0A	; 10
    42b4:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    42b8:	43 ce       	rjmp	.-890    	; 0x3f40 <main+0x196>
                }
            }
            else if(strncmp_P(command, PSTR("mv "), 3) == 0)
    42ba:	43 e0       	ldi	r20, 0x03	; 3
    42bc:	50 e0       	ldi	r21, 0x00	; 0
    42be:	61 e9       	ldi	r22, 0x91	; 145
    42c0:	71 e0       	ldi	r23, 0x01	; 1
    42c2:	89 2d       	mov	r24, r9
    42c4:	9a 2d       	mov	r25, r10
    42c6:	0e 94 be 2c 	call	0x597c	; 0x597c <strncmp_P>
    42ca:	89 2b       	or	r24, r25
    42cc:	d1 f5       	brne	.+116    	; 0x4342 <main+0x598>
            {
                command += 3;
                if(command[0] == '\0')
    42ce:	a7 96       	adiw	r28, 0x27	; 39
    42d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    42d2:	a7 97       	sbiw	r28, 0x27	; 39
    42d4:	88 23       	and	r24, r24
    42d6:	09 f4       	brne	.+2      	; 0x42da <main+0x530>
    42d8:	33 ce       	rjmp	.-922    	; 0x3f40 <main+0x196>
                    continue;

                char* target = command;
                while(*target != ' ' && *target != '\0')
    42da:	80 32       	cpi	r24, 0x20	; 32
    42dc:	09 f4       	brne	.+2      	; 0x42e0 <main+0x536>
    42de:	4c c1       	rjmp	.+664    	; 0x4578 <main+0x7ce>
    42e0:	c9 57       	subi	r28, 0x79	; 121
    42e2:	df 4f       	sbci	r29, 0xFF	; 255
    42e4:	e8 81       	ld	r30, Y
    42e6:	f9 81       	ldd	r31, Y+1	; 0x01
    42e8:	c7 58       	subi	r28, 0x87	; 135
    42ea:	d0 40       	sbci	r29, 0x00	; 0
                    ++target;
    42ec:	8f 01       	movw	r16, r30
                command += 3;
                if(command[0] == '\0')
                    continue;

                char* target = command;
                while(*target != ' ' && *target != '\0')
    42ee:	81 91       	ld	r24, Z+
    42f0:	80 32       	cpi	r24, 0x20	; 32
    42f2:	09 f4       	brne	.+2      	; 0x42f6 <main+0x54c>
    42f4:	47 c1       	rjmp	.+654    	; 0x4584 <main+0x7da>
    42f6:	81 11       	cpse	r24, r1
    42f8:	f9 cf       	rjmp	.-14     	; 0x42ec <main+0x542>
    42fa:	22 ce       	rjmp	.-956    	; 0x3f40 <main+0x196>
                    ++target;

                if(*target == ' ')
                    *target++ = '\0';
    42fc:	98 01       	movw	r18, r16
    42fe:	2f 5f       	subi	r18, 0xFF	; 255
    4300:	3f 4f       	sbci	r19, 0xFF	; 255
                    continue;

                struct fat_dir_entry_struct file_entry;
                if(find_file_in_dir(fs, dd, command, &file_entry))
                {
                    if(fat_move_file(fs, &file_entry, dd, target))
    4302:	c1 58       	subi	r28, 0x81	; 129
    4304:	df 4f       	sbci	r29, 0xFF	; 255
    4306:	48 81       	ld	r20, Y
    4308:	59 81       	ldd	r21, Y+1	; 0x01
    430a:	cf 57       	subi	r28, 0x7F	; 127
    430c:	d0 40       	sbci	r29, 0x00	; 0
    430e:	6b 2d       	mov	r22, r11
    4310:	72 2d       	mov	r23, r2
    4312:	ef 96       	adiw	r28, 0x3f	; 63
    4314:	8e ad       	ldd	r24, Y+62	; 0x3e
    4316:	9f ad       	ldd	r25, Y+63	; 0x3f
    4318:	ef 97       	sbiw	r28, 0x3f	; 63
    431a:	0e 94 24 1a 	call	0x3448	; 0x3448 <fat_move_file>
    431e:	81 11       	cpse	r24, r1
    4320:	0f ce       	rjmp	.-994    	; 0x3f40 <main+0x196>
                        continue;
                }

                uart_puts_p(PSTR("error moving file: "));
    4322:	8d e7       	ldi	r24, 0x7D	; 125
    4324:	91 e0       	ldi	r25, 0x01	; 1
    4326:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
                uart_puts(command);
    432a:	cd 57       	subi	r28, 0x7D	; 125
    432c:	df 4f       	sbci	r29, 0xFF	; 255
    432e:	88 81       	ld	r24, Y
    4330:	99 81       	ldd	r25, Y+1	; 0x01
    4332:	c3 58       	subi	r28, 0x83	; 131
    4334:	d0 40       	sbci	r29, 0x00	; 0
    4336:	0e 94 3d 2b 	call	0x567a	; 0x567a <uart_puts>
                uart_putc('\n');
    433a:	8a e0       	ldi	r24, 0x0A	; 10
    433c:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    4340:	ff cd       	rjmp	.-1026   	; 0x3f40 <main+0x196>
            }
            else if(strncmp_P(command, PSTR("write "), 6) == 0)
    4342:	46 e0       	ldi	r20, 0x06	; 6
    4344:	50 e0       	ldi	r21, 0x00	; 0
    4346:	66 e7       	ldi	r22, 0x76	; 118
    4348:	71 e0       	ldi	r23, 0x01	; 1
    434a:	89 2d       	mov	r24, r9
    434c:	9a 2d       	mov	r25, r10
    434e:	0e 94 be 2c 	call	0x597c	; 0x597c <strncmp_P>
    4352:	89 2b       	or	r24, r25
    4354:	09 f0       	breq	.+2      	; 0x4358 <main+0x5ae>
    4356:	aa c0       	rjmp	.+340    	; 0x44ac <main+0x702>
            {
                command += 6;
                if(command[0] == '\0')
    4358:	aa 96       	adiw	r28, 0x2a	; 42
    435a:	8f ad       	ldd	r24, Y+63	; 0x3f
    435c:	aa 97       	sbiw	r28, 0x2a	; 42
    435e:	88 23       	and	r24, r24
    4360:	09 f4       	brne	.+2      	; 0x4364 <main+0x5ba>
    4362:	ee cd       	rjmp	.-1060   	; 0x3f40 <main+0x196>
                    continue;

                char* offset_value = command;
                while(*offset_value != ' ' && *offset_value != '\0')
    4364:	80 32       	cpi	r24, 0x20	; 32
    4366:	09 f4       	brne	.+2      	; 0x436a <main+0x5c0>
    4368:	26 c1       	rjmp	.+588    	; 0x45b6 <main+0x80c>
    436a:	c5 57       	subi	r28, 0x75	; 117
    436c:	df 4f       	sbci	r29, 0xFF	; 255
    436e:	e8 81       	ld	r30, Y
    4370:	f9 81       	ldd	r31, Y+1	; 0x01
    4372:	cb 58       	subi	r28, 0x8B	; 139
    4374:	d0 40       	sbci	r29, 0x00	; 0
                    ++offset_value;
    4376:	8f 01       	movw	r16, r30
                command += 6;
                if(command[0] == '\0')
                    continue;

                char* offset_value = command;
                while(*offset_value != ' ' && *offset_value != '\0')
    4378:	81 91       	ld	r24, Z+
    437a:	80 32       	cpi	r24, 0x20	; 32
    437c:	09 f4       	brne	.+2      	; 0x4380 <main+0x5d6>
    437e:	21 c1       	rjmp	.+578    	; 0x45c2 <main+0x818>
    4380:	81 11       	cpse	r24, r1
    4382:	f9 cf       	rjmp	.-14     	; 0x4376 <main+0x5cc>
    4384:	dd cd       	rjmp	.-1094   	; 0x3f40 <main+0x196>
{
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
        return 0;

    return fat_open_file(fs, &file_entry);
    4386:	6b 2d       	mov	r22, r11
    4388:	72 2d       	mov	r23, r2
    438a:	ef 96       	adiw	r28, 0x3f	; 63
    438c:	8e ad       	ldd	r24, Y+62	; 0x3e
    438e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4390:	ef 97       	sbiw	r28, 0x3f	; 63
    4392:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <fat_open_file>
    4396:	7c 01       	movw	r14, r24
                else
                    continue;

                /* search file in current directory and open it */
                struct fat_file_struct* fd = open_file_in_dir(fs, dd, command);
                if(!fd)
    4398:	89 2b       	or	r24, r25
    439a:	59 f0       	breq	.+22     	; 0x43b2 <main+0x608>
}

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
    439c:	f8 01       	movw	r30, r16
    439e:	41 81       	ldd	r20, Z+1	; 0x01
    43a0:	80 ed       	ldi	r24, 0xD0	; 208
    43a2:	84 0f       	add	r24, r20
    43a4:	8a 30       	cpi	r24, 0x0A	; 10
    43a6:	a8 f0       	brcs	.+42     	; 0x43d2 <main+0x628>
    43a8:	80 e0       	ldi	r24, 0x00	; 0
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	a0 e0       	ldi	r26, 0x00	; 0
    43ae:	b0 e0       	ldi	r27, 0x00	; 0
    43b0:	3e c0       	rjmp	.+124    	; 0x442e <main+0x684>

                /* search file in current directory and open it */
                struct fat_file_struct* fd = open_file_in_dir(fs, dd, command);
                if(!fd)
                {
                    uart_puts_p(PSTR("error opening "));
    43b2:	87 e6       	ldi	r24, 0x67	; 103
    43b4:	91 e0       	ldi	r25, 0x01	; 1
    43b6:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
                    uart_puts(command);
    43ba:	cb 57       	subi	r28, 0x7B	; 123
    43bc:	df 4f       	sbci	r29, 0xFF	; 255
    43be:	88 81       	ld	r24, Y
    43c0:	99 81       	ldd	r25, Y+1	; 0x01
    43c2:	c5 58       	subi	r28, 0x85	; 133
    43c4:	d0 40       	sbci	r29, 0x00	; 0
    43c6:	0e 94 3d 2b 	call	0x567a	; 0x567a <uart_puts>
                    uart_putc('\n');
    43ca:	8a e0       	ldi	r24, 0x0A	; 10
    43cc:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
                    continue;
    43d0:	b7 cd       	rjmp	.-1170   	; 0x3f40 <main+0x196>
    43d2:	f8 01       	movw	r30, r16
    43d4:	32 96       	adiw	r30, 0x02	; 2
}

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
    43d6:	80 e0       	ldi	r24, 0x00	; 0
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	a0 e0       	ldi	r26, 0x00	; 0
    43dc:	b0 e0       	ldi	r27, 0x00	; 0
    43de:	24 2f       	mov	r18, r20
    43e0:	ac 01       	movw	r20, r24
    43e2:	bd 01       	movw	r22, r26
        l = l * 10 + (*str++ - '0');
    43e4:	44 0f       	add	r20, r20
    43e6:	55 1f       	adc	r21, r21
    43e8:	66 1f       	adc	r22, r22
    43ea:	77 1f       	adc	r23, r23
    43ec:	db 01       	movw	r26, r22
    43ee:	ca 01       	movw	r24, r20
    43f0:	88 0f       	add	r24, r24
    43f2:	99 1f       	adc	r25, r25
    43f4:	aa 1f       	adc	r26, r26
    43f6:	bb 1f       	adc	r27, r27
    43f8:	88 0f       	add	r24, r24
    43fa:	99 1f       	adc	r25, r25
    43fc:	aa 1f       	adc	r26, r26
    43fe:	bb 1f       	adc	r27, r27
    4400:	84 0f       	add	r24, r20
    4402:	95 1f       	adc	r25, r21
    4404:	a6 1f       	adc	r26, r22
    4406:	b7 1f       	adc	r27, r23
    4408:	30 e0       	ldi	r19, 0x00	; 0
    440a:	a9 01       	movw	r20, r18
    440c:	40 53       	subi	r20, 0x30	; 48
    440e:	51 09       	sbc	r21, r1
    4410:	05 2e       	mov	r0, r21
    4412:	00 0c       	add	r0, r0
    4414:	66 0b       	sbc	r22, r22
    4416:	77 0b       	sbc	r23, r23
    4418:	48 0f       	add	r20, r24
    441a:	59 1f       	adc	r21, r25
    441c:	6a 1f       	adc	r22, r26
    441e:	7b 1f       	adc	r23, r27
}

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
    4420:	21 91       	ld	r18, Z+
    4422:	80 ed       	ldi	r24, 0xD0	; 208
    4424:	82 0f       	add	r24, r18
    4426:	8a 30       	cpi	r24, 0x0A	; 10
    4428:	e8 f2       	brcs	.-70     	; 0x43e4 <main+0x63a>
    442a:	db 01       	movw	r26, r22
    442c:	ca 01       	movw	r24, r20
                    uart_puts(command);
                    uart_putc('\n');
                    continue;
                }

                int32_t offset = strtolong(offset_value);
    442e:	89 83       	std	Y+1, r24	; 0x01
    4430:	9a 83       	std	Y+2, r25	; 0x02
    4432:	ab 83       	std	Y+3, r26	; 0x03
    4434:	bc 83       	std	Y+4, r27	; 0x04
                if(!fat_seek_file(fd, &offset, FAT_SEEK_SET))
    4436:	40 e0       	ldi	r20, 0x00	; 0
    4438:	6b 2d       	mov	r22, r11
    443a:	72 2d       	mov	r23, r2
    443c:	c7 01       	movw	r24, r14
    443e:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <fat_seek_file>
    4442:	81 11       	cpse	r24, r1
    4444:	13 c0       	rjmp	.+38     	; 0x446c <main+0x6c2>
                {
                    uart_puts_p(PSTR("error seeking on "));
    4446:	85 e5       	ldi	r24, 0x55	; 85
    4448:	91 e0       	ldi	r25, 0x01	; 1
    444a:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
                    uart_puts(command);
    444e:	cb 57       	subi	r28, 0x7B	; 123
    4450:	df 4f       	sbci	r29, 0xFF	; 255
    4452:	88 81       	ld	r24, Y
    4454:	99 81       	ldd	r25, Y+1	; 0x01
    4456:	c5 58       	subi	r28, 0x85	; 133
    4458:	d0 40       	sbci	r29, 0x00	; 0
    445a:	0e 94 3d 2b 	call	0x567a	; 0x567a <uart_puts>
                    uart_putc('\n');
    445e:	8a e0       	ldi	r24, 0x0A	; 10
    4460:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>

                    fat_close_file(fd);
    4464:	c7 01       	movw	r24, r14
    4466:	0e 94 1a 10 	call	0x2034	; 0x2034 <fat_close_file>
                    continue;
    446a:	6a cd       	rjmp	.-1324   	; 0x3f40 <main+0x196>
                /* read text from the shell and write it to the file */
                uint8_t data_len;
                while(1)
                {
                    /* give a different prompt */
                    uart_putc('<');
    446c:	8c e3       	ldi	r24, 0x3C	; 60
    446e:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
                    uart_putc(' ');
    4472:	80 e2       	ldi	r24, 0x20	; 32
    4474:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>

                    /* read one line of text */
                    data_len = read_line(buffer, sizeof(buffer));
    4478:	68 e1       	ldi	r22, 0x18	; 24
    447a:	89 2d       	mov	r24, r9
    447c:	9a 2d       	mov	r25, r10
    447e:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <read_line>
                    if(!data_len)
    4482:	88 23       	and	r24, r24
    4484:	79 f0       	breq	.+30     	; 0x44a4 <main+0x6fa>
                        break;

                    /* write text to file */
                    if(fat_write_file(fd, (uint8_t*) buffer, data_len) != data_len)
    4486:	08 2f       	mov	r16, r24
    4488:	10 e0       	ldi	r17, 0x00	; 0
    448a:	a8 01       	movw	r20, r16
    448c:	69 2d       	mov	r22, r9
    448e:	7a 2d       	mov	r23, r10
    4490:	c7 01       	movw	r24, r14
    4492:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <fat_write_file>
    4496:	80 17       	cp	r24, r16
    4498:	91 07       	cpc	r25, r17
    449a:	41 f3       	breq	.-48     	; 0x446c <main+0x6c2>
                    {
                        uart_puts_p(PSTR("error writing to file\n"));
    449c:	8e e3       	ldi	r24, 0x3E	; 62
    449e:	91 e0       	ldi	r25, 0x01	; 1
    44a0:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
                        break;
                    }
                }

                fat_close_file(fd);
    44a4:	c7 01       	movw	r24, r14
    44a6:	0e 94 1a 10 	call	0x2034	; 0x2034 <fat_close_file>
    44aa:	4a cd       	rjmp	.-1388   	; 0x3f40 <main+0x196>
            }
            else if(strncmp_P(command, PSTR("mkdir "), 6) == 0)
    44ac:	46 e0       	ldi	r20, 0x06	; 6
    44ae:	50 e0       	ldi	r21, 0x00	; 0
    44b0:	67 e3       	ldi	r22, 0x37	; 55
    44b2:	71 e0       	ldi	r23, 0x01	; 1
    44b4:	89 2d       	mov	r24, r9
    44b6:	9a 2d       	mov	r25, r10
    44b8:	0e 94 be 2c 	call	0x597c	; 0x597c <strncmp_P>
    44bc:	89 2b       	or	r24, r25
    44be:	41 f5       	brne	.+80     	; 0x4510 <main+0x766>
            {
                command += 6;
                if(command[0] == '\0')
    44c0:	aa 96       	adiw	r28, 0x2a	; 42
    44c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    44c4:	aa 97       	sbiw	r28, 0x2a	; 42
    44c6:	88 23       	and	r24, r24
    44c8:	09 f4       	brne	.+2      	; 0x44cc <main+0x722>
    44ca:	3a cd       	rjmp	.-1420   	; 0x3f40 <main+0x196>
                    continue;

                struct fat_dir_entry_struct dir_entry;
                if(!fat_create_dir(dd, command, &dir_entry))
    44cc:	4b 2d       	mov	r20, r11
    44ce:	52 2d       	mov	r21, r2
    44d0:	cb 57       	subi	r28, 0x7B	; 123
    44d2:	df 4f       	sbci	r29, 0xFF	; 255
    44d4:	68 81       	ld	r22, Y
    44d6:	79 81       	ldd	r23, Y+1	; 0x01
    44d8:	c5 58       	subi	r28, 0x85	; 133
    44da:	d0 40       	sbci	r29, 0x00	; 0
    44dc:	c1 58       	subi	r28, 0x81	; 129
    44de:	df 4f       	sbci	r29, 0xFF	; 255
    44e0:	88 81       	ld	r24, Y
    44e2:	99 81       	ldd	r25, Y+1	; 0x01
    44e4:	cf 57       	subi	r28, 0x7F	; 127
    44e6:	d0 40       	sbci	r29, 0x00	; 0
    44e8:	0e 94 b5 1a 	call	0x356a	; 0x356a <fat_create_dir>
    44ec:	81 11       	cpse	r24, r1
    44ee:	28 cd       	rjmp	.-1456   	; 0x3f40 <main+0x196>
                {
                    uart_puts_p(PSTR("error creating directory: "));
    44f0:	8c e1       	ldi	r24, 0x1C	; 28
    44f2:	91 e0       	ldi	r25, 0x01	; 1
    44f4:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
                    uart_puts(command);
    44f8:	cb 57       	subi	r28, 0x7B	; 123
    44fa:	df 4f       	sbci	r29, 0xFF	; 255
    44fc:	88 81       	ld	r24, Y
    44fe:	99 81       	ldd	r25, Y+1	; 0x01
    4500:	c5 58       	subi	r28, 0x85	; 133
    4502:	d0 40       	sbci	r29, 0x00	; 0
    4504:	0e 94 3d 2b 	call	0x567a	; 0x567a <uart_puts>
                    uart_putc('\n');
    4508:	8a e0       	ldi	r24, 0x0A	; 10
    450a:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    450e:	18 cd       	rjmp	.-1488   	; 0x3f40 <main+0x196>
                }
            }
#endif
#if SD_RAW_WRITE_BUFFERING
            else if(strcmp_P(command, PSTR("sync")) == 0)
    4510:	67 e1       	ldi	r22, 0x17	; 23
    4512:	71 e0       	ldi	r23, 0x01	; 1
    4514:	89 2d       	mov	r24, r9
    4516:	9a 2d       	mov	r25, r10
    4518:	0e 94 b5 2c 	call	0x596a	; 0x596a <strcmp_P>
    451c:	89 2b       	or	r24, r25
    451e:	49 f4       	brne	.+18     	; 0x4532 <main+0x788>
            {
                if(!sd_raw_sync())
    4520:	0e 94 00 24 	call	0x4800	; 0x4800 <sd_raw_sync>
    4524:	81 11       	cpse	r24, r1
    4526:	0c cd       	rjmp	.-1512   	; 0x3f40 <main+0x196>
                    uart_puts_p(PSTR("error syncing disk\n"));
    4528:	83 e0       	ldi	r24, 0x03	; 3
    452a:	91 e0       	ldi	r25, 0x01	; 1
    452c:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
    4530:	07 cd       	rjmp	.-1522   	; 0x3f40 <main+0x196>
            }
#endif
            else
            {
                uart_puts_p(PSTR("unknown command: "));
    4532:	81 ef       	ldi	r24, 0xF1	; 241
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_puts_p>
                uart_puts(command);
    453a:	89 2d       	mov	r24, r9
    453c:	9a 2d       	mov	r25, r10
    453e:	0e 94 3d 2b 	call	0x567a	; 0x567a <uart_puts>
                uart_putc('\n');
    4542:	8a e0       	ldi	r24, 0x0A	; 10
    4544:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    4548:	fb cc       	rjmp	.-1546   	; 0x3f40 <main+0x196>
            }
        }

        /* close directory */
        fat_close_dir(dd);
    454a:	c1 58       	subi	r28, 0x81	; 129
    454c:	df 4f       	sbci	r29, 0xFF	; 255
    454e:	88 81       	ld	r24, Y
    4550:	99 81       	ldd	r25, Y+1	; 0x01
    4552:	cf 57       	subi	r28, 0x7F	; 127
    4554:	d0 40       	sbci	r29, 0x00	; 0
    4556:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <fat_close_dir>

        /* close file system */
        fat_close(fs);
    455a:	ef 96       	adiw	r28, 0x3f	; 63
    455c:	8e ad       	ldd	r24, Y+62	; 0x3e
    455e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4560:	ef 97       	sbiw	r28, 0x3f	; 63
    4562:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <fat_close>

        /* close partition */
        partition_close(partition);
    4566:	cf 57       	subi	r28, 0x7F	; 127
    4568:	df 4f       	sbci	r29, 0xFF	; 255
    456a:	88 81       	ld	r24, Y
    456c:	99 81       	ldd	r25, Y+1	; 0x01
    456e:	c1 58       	subi	r28, 0x81	; 129
    4570:	d0 40       	sbci	r29, 0x00	; 0
    4572:	0e 94 aa 23 	call	0x4754	; 0x4754 <partition_close>
    4576:	59 cc       	rjmp	.-1870   	; 0x3e2a <main+0x80>
                command += 3;
                if(command[0] == '\0')
                    continue;

                char* target = command;
                while(*target != ' ' && *target != '\0')
    4578:	cd 57       	subi	r28, 0x7D	; 125
    457a:	df 4f       	sbci	r29, 0xFF	; 255
    457c:	08 81       	ld	r16, Y
    457e:	19 81       	ldd	r17, Y+1	; 0x01
    4580:	c3 58       	subi	r28, 0x83	; 131
    4582:	d0 40       	sbci	r29, 0x00	; 0
                    ++target;

                if(*target == ' ')
                    *target++ = '\0';
    4584:	f8 01       	movw	r30, r16
    4586:	10 82       	st	Z, r1
                else
                    continue;

                struct fat_dir_entry_struct file_entry;
                if(find_file_in_dir(fs, dd, command, &file_entry))
    4588:	2b 2d       	mov	r18, r11
    458a:	32 2d       	mov	r19, r2
    458c:	cd 57       	subi	r28, 0x7D	; 125
    458e:	df 4f       	sbci	r29, 0xFF	; 255
    4590:	48 81       	ld	r20, Y
    4592:	59 81       	ldd	r21, Y+1	; 0x01
    4594:	c3 58       	subi	r28, 0x83	; 131
    4596:	d0 40       	sbci	r29, 0x00	; 0
    4598:	c1 58       	subi	r28, 0x81	; 129
    459a:	df 4f       	sbci	r29, 0xFF	; 255
    459c:	68 81       	ld	r22, Y
    459e:	79 81       	ldd	r23, Y+1	; 0x01
    45a0:	cf 57       	subi	r28, 0x7F	; 127
    45a2:	d0 40       	sbci	r29, 0x00	; 0
    45a4:	ef 96       	adiw	r28, 0x3f	; 63
    45a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    45a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    45aa:	ef 97       	sbiw	r28, 0x3f	; 63
    45ac:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <find_file_in_dir>
    45b0:	81 11       	cpse	r24, r1
    45b2:	a4 ce       	rjmp	.-696    	; 0x42fc <main+0x552>
    45b4:	b6 ce       	rjmp	.-660    	; 0x4322 <main+0x578>
                command += 6;
                if(command[0] == '\0')
                    continue;

                char* offset_value = command;
                while(*offset_value != ' ' && *offset_value != '\0')
    45b6:	cb 57       	subi	r28, 0x7B	; 123
    45b8:	df 4f       	sbci	r29, 0xFF	; 255
    45ba:	08 81       	ld	r16, Y
    45bc:	19 81       	ldd	r17, Y+1	; 0x01
    45be:	c5 58       	subi	r28, 0x85	; 133
    45c0:	d0 40       	sbci	r29, 0x00	; 0
                    ++offset_value;

                if(*offset_value == ' ')
                    *offset_value++ = '\0';
    45c2:	f8 01       	movw	r30, r16
    45c4:	10 82       	st	Z, r1
}

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
    45c6:	2b 2d       	mov	r18, r11
    45c8:	32 2d       	mov	r19, r2
    45ca:	cb 57       	subi	r28, 0x7B	; 123
    45cc:	df 4f       	sbci	r29, 0xFF	; 255
    45ce:	48 81       	ld	r20, Y
    45d0:	59 81       	ldd	r21, Y+1	; 0x01
    45d2:	c5 58       	subi	r28, 0x85	; 133
    45d4:	d0 40       	sbci	r29, 0x00	; 0
    45d6:	c1 58       	subi	r28, 0x81	; 129
    45d8:	df 4f       	sbci	r29, 0xFF	; 255
    45da:	68 81       	ld	r22, Y
    45dc:	79 81       	ldd	r23, Y+1	; 0x01
    45de:	cf 57       	subi	r28, 0x7F	; 127
    45e0:	d0 40       	sbci	r29, 0x00	; 0
    45e2:	ef 96       	adiw	r28, 0x3f	; 63
    45e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    45e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    45e8:	ef 97       	sbiw	r28, 0x3f	; 63
    45ea:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <find_file_in_dir>
    45ee:	81 11       	cpse	r24, r1
    45f0:	ca ce       	rjmp	.-620    	; 0x4386 <main+0x5dc>
    45f2:	df ce       	rjmp	.-578    	; 0x43b2 <main+0x608>

000045f4 <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    45f4:	6f 92       	push	r6
    45f6:	7f 92       	push	r7
    45f8:	8f 92       	push	r8
    45fa:	9f 92       	push	r9
    45fc:	af 92       	push	r10
    45fe:	bf 92       	push	r11
    4600:	cf 92       	push	r12
    4602:	df 92       	push	r13
    4604:	ef 92       	push	r14
    4606:	ff 92       	push	r15
    4608:	0f 93       	push	r16
    460a:	1f 93       	push	r17
    460c:	cf 93       	push	r28
    460e:	df 93       	push	r29
    4610:	cd b7       	in	r28, 0x3d	; 61
    4612:	de b7       	in	r29, 0x3e	; 62
    4614:	60 97       	sbiw	r28, 0x10	; 16
    4616:	0f b6       	in	r0, 0x3f	; 63
    4618:	f8 94       	cli
    461a:	de bf       	out	0x3e, r29	; 62
    461c:	0f be       	out	0x3f, r0	; 63
    461e:	cd bf       	out	0x3d, r28	; 61
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    4620:	00 97       	sbiw	r24, 0x00	; 0
    4622:	71 f1       	breq	.+92     	; 0x4680 <partition_open+0x8c>
    4624:	61 15       	cp	r22, r1
    4626:	71 05       	cpc	r23, r1
    4628:	71 f1       	breq	.+92     	; 0x4686 <partition_open+0x92>
    462a:	04 30       	cpi	r16, 0x04	; 4
    462c:	7c f5       	brge	.+94     	; 0x468c <partition_open+0x98>
        return 0;

    if(index >= 0)
    462e:	00 23       	and	r16, r16
    4630:	0c f4       	brge	.+2      	; 0x4634 <partition_open+0x40>
    4632:	75 c0       	rjmp	.+234    	; 0x471e <partition_open+0x12a>
    4634:	39 01       	movw	r6, r18
    4636:	4a 01       	movw	r8, r20
    4638:	5b 01       	movw	r10, r22
    463a:	6c 01       	movw	r12, r24
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    463c:	80 e1       	ldi	r24, 0x10	; 16
    463e:	08 02       	muls	r16, r24
    4640:	f0 01       	movw	r30, r0
    4642:	11 24       	eor	r1, r1
    4644:	e2 54       	subi	r30, 0x42	; 66
    4646:	fe 4f       	sbci	r31, 0xFE	; 254
    4648:	9f 2f       	mov	r25, r31
    464a:	99 0f       	add	r25, r25
    464c:	99 0b       	sbc	r25, r25
    464e:	68 94       	set
    4650:	ee 24       	eor	r14, r14
    4652:	e4 f8       	bld	r14, 4
    4654:	f1 2c       	mov	r15, r1
    4656:	8e 01       	movw	r16, r28
    4658:	0f 5f       	subi	r16, 0xFF	; 255
    465a:	1f 4f       	sbci	r17, 0xFF	; 255
    465c:	2e 2f       	mov	r18, r30
    465e:	3f 2f       	mov	r19, r31
    4660:	49 2f       	mov	r20, r25
    4662:	59 2f       	mov	r21, r25
    4664:	69 2f       	mov	r22, r25
    4666:	79 2f       	mov	r23, r25
    4668:	89 2f       	mov	r24, r25
    466a:	f6 01       	movw	r30, r12
    466c:	09 95       	icall
    466e:	88 23       	and	r24, r24
    4670:	81 f0       	breq	.+32     	; 0x4692 <partition_open+0x9e>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    4672:	8d 81       	ldd	r24, Y+5	; 0x05
    4674:	81 11       	cpse	r24, r1
    4676:	3a c0       	rjmp	.+116    	; 0x46ec <partition_open+0xf8>
    4678:	0f c0       	rjmp	.+30     	; 0x4698 <partition_open+0xa4>
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    467a:	83 ef       	ldi	r24, 0xF3	; 243
    467c:	91 e0       	ldi	r25, 0x01	; 1
    else
    {
        new_partition->type = 0xff;
    }

    return new_partition;
    467e:	55 c0       	rjmp	.+170    	; 0x472a <partition_open+0x136>
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
        return 0;
    4680:	80 e0       	ldi	r24, 0x00	; 0
    4682:	90 e0       	ldi	r25, 0x00	; 0
    4684:	52 c0       	rjmp	.+164    	; 0x472a <partition_open+0x136>
    4686:	80 e0       	ldi	r24, 0x00	; 0
    4688:	90 e0       	ldi	r25, 0x00	; 0
    468a:	4f c0       	rjmp	.+158    	; 0x472a <partition_open+0x136>
    468c:	80 e0       	ldi	r24, 0x00	; 0
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	4c c0       	rjmp	.+152    	; 0x472a <partition_open+0x136>

    if(index >= 0)
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
            return 0;
    4692:	80 e0       	ldi	r24, 0x00	; 0
    4694:	90 e0       	ldi	r25, 0x00	; 0
    4696:	49 c0       	rjmp	.+146    	; 0x472a <partition_open+0x136>

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
            return 0;
    4698:	80 e0       	ldi	r24, 0x00	; 0
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	46 c0       	rjmp	.+140    	; 0x472a <partition_open+0x136>
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    469e:	03 ef       	ldi	r16, 0xF3	; 243
    46a0:	11 e0       	ldi	r17, 0x01	; 1
    46a2:	81 e1       	ldi	r24, 0x11	; 17
    46a4:	d8 01       	movw	r26, r16
    46a6:	1d 92       	st	X+, r1
    46a8:	8a 95       	dec	r24
    46aa:	e9 f7       	brne	.-6      	; 0x46a6 <partition_open+0xb2>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    46ac:	f8 01       	movw	r30, r16
    46ae:	d1 82       	std	Z+1, r13	; 0x01
    46b0:	c0 82       	st	Z, r12
    new_partition->device_read_interval = device_read_interval;
    46b2:	b3 82       	std	Z+3, r11	; 0x03
    46b4:	a2 82       	std	Z+2, r10	; 0x02
    new_partition->device_write = device_write;
    46b6:	95 82       	std	Z+5, r9	; 0x05
    46b8:	84 82       	std	Z+4, r8	; 0x04
    new_partition->device_write_interval = device_write_interval;
    46ba:	77 82       	std	Z+7, r7	; 0x07
    46bc:	66 82       	std	Z+6, r6	; 0x06

    if(index >= 0)
    {
        new_partition->type = buffer[4];
    46be:	8d 81       	ldd	r24, Y+5	; 0x05
    46c0:	80 87       	std	Z+8, r24	; 0x08
        new_partition->offset = read32(&buffer[8]);
    46c2:	ce 01       	movw	r24, r28
    46c4:	09 96       	adiw	r24, 0x09	; 9
    46c6:	0e 94 80 01 	call	0x300	; 0x300 <read32>
    46ca:	d8 01       	movw	r26, r16
    46cc:	19 96       	adiw	r26, 0x09	; 9
    46ce:	6d 93       	st	X+, r22
    46d0:	7d 93       	st	X+, r23
    46d2:	8d 93       	st	X+, r24
    46d4:	9c 93       	st	X, r25
    46d6:	1c 97       	sbiw	r26, 0x0c	; 12
        new_partition->length = read32(&buffer[12]);
    46d8:	ce 01       	movw	r24, r28
    46da:	0d 96       	adiw	r24, 0x0d	; 13
    46dc:	0e 94 80 01 	call	0x300	; 0x300 <read32>
    46e0:	f8 01       	movw	r30, r16
    46e2:	65 87       	std	Z+13, r22	; 0x0d
    46e4:	76 87       	std	Z+14, r23	; 0x0e
    46e6:	87 87       	std	Z+15, r24	; 0x0f
    46e8:	90 8b       	std	Z+16, r25	; 0x10
    46ea:	c7 cf       	rjmp	.-114    	; 0x467a <partition_open+0x86>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    46ec:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <partition_handles+0x8>
    46f0:	88 23       	and	r24, r24
    46f2:	a9 f2       	breq	.-86     	; 0x469e <partition_open+0xaa>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    46f4:	80 e0       	ldi	r24, 0x00	; 0
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	18 c0       	rjmp	.+48     	; 0x472a <partition_open+0x136>
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    46fa:	e3 ef       	ldi	r30, 0xF3	; 243
    46fc:	f1 e0       	ldi	r31, 0x01	; 1
    46fe:	11 e1       	ldi	r17, 0x11	; 17
    4700:	df 01       	movw	r26, r30
    4702:	1d 92       	st	X+, r1
    4704:	1a 95       	dec	r17
    4706:	e9 f7       	brne	.-6      	; 0x4702 <partition_open+0x10e>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    4708:	91 83       	std	Z+1, r25	; 0x01
    470a:	80 83       	st	Z, r24
    new_partition->device_read_interval = device_read_interval;
    470c:	73 83       	std	Z+3, r23	; 0x03
    470e:	62 83       	std	Z+2, r22	; 0x02
    new_partition->device_write = device_write;
    4710:	55 83       	std	Z+5, r21	; 0x05
    4712:	44 83       	std	Z+4, r20	; 0x04
    new_partition->device_write_interval = device_write_interval;
    4714:	37 83       	std	Z+7, r19	; 0x07
    4716:	26 83       	std	Z+6, r18	; 0x06
        new_partition->offset = read32(&buffer[8]);
        new_partition->length = read32(&buffer[12]);
    }
    else
    {
        new_partition->type = 0xff;
    4718:	8f ef       	ldi	r24, 0xFF	; 255
    471a:	80 87       	std	Z+8, r24	; 0x08
    471c:	ae cf       	rjmp	.-164    	; 0x467a <partition_open+0x86>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    471e:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <partition_handles+0x8>
    4722:	ee 23       	and	r30, r30
    4724:	51 f3       	breq	.-44     	; 0x46fa <partition_open+0x106>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    4726:	80 e0       	ldi	r24, 0x00	; 0
    4728:	90 e0       	ldi	r25, 0x00	; 0
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
    472a:	60 96       	adiw	r28, 0x10	; 16
    472c:	0f b6       	in	r0, 0x3f	; 63
    472e:	f8 94       	cli
    4730:	de bf       	out	0x3e, r29	; 62
    4732:	0f be       	out	0x3f, r0	; 63
    4734:	cd bf       	out	0x3d, r28	; 61
    4736:	df 91       	pop	r29
    4738:	cf 91       	pop	r28
    473a:	1f 91       	pop	r17
    473c:	0f 91       	pop	r16
    473e:	ff 90       	pop	r15
    4740:	ef 90       	pop	r14
    4742:	df 90       	pop	r13
    4744:	cf 90       	pop	r12
    4746:	bf 90       	pop	r11
    4748:	af 90       	pop	r10
    474a:	9f 90       	pop	r9
    474c:	8f 90       	pop	r8
    474e:	7f 90       	pop	r7
    4750:	6f 90       	pop	r6
    4752:	08 95       	ret

00004754 <partition_close>:
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
    4754:	00 97       	sbiw	r24, 0x00	; 0
    4756:	21 f0       	breq	.+8      	; 0x4760 <partition_close+0xc>

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
    4758:	fc 01       	movw	r30, r24
    475a:	10 86       	std	Z+8, r1	; 0x08
#endif

    return 1;
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	08 95       	ret
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
        return 0;
    4760:	80 e0       	ldi	r24, 0x00	; 0
#else
    partition->type = PARTITION_TYPE_FREE;
#endif

    return 1;
}
    4762:	08 95       	ret

00004764 <sd_raw_send_byte>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
    4764:	8e bd       	out	0x2e, r24	; 46
    4766:	0d b4       	in	r0, 0x2d	; 45
    4768:	07 fe       	sbrs	r0, 7
    476a:	fd cf       	rjmp	.-6      	; 0x4766 <sd_raw_send_byte+0x2>
    476c:	8d b5       	in	r24, 0x2d	; 45
    476e:	8f 77       	andi	r24, 0x7F	; 127
    4770:	8d bd       	out	0x2d, r24	; 45
    4772:	08 95       	ret

00004774 <sd_raw_rec_byte>:
    4774:	8f ef       	ldi	r24, 0xFF	; 255
    4776:	8e bd       	out	0x2e, r24	; 46
    4778:	0d b4       	in	r0, 0x2d	; 45
    477a:	07 fe       	sbrs	r0, 7
    477c:	fd cf       	rjmp	.-6      	; 0x4778 <sd_raw_rec_byte+0x4>
    477e:	8d b5       	in	r24, 0x2d	; 45
    4780:	8f 77       	andi	r24, 0x7F	; 127
    4782:	8d bd       	out	0x2d, r24	; 45
    4784:	8e b5       	in	r24, 0x2e	; 46
    4786:	08 95       	ret

00004788 <sd_raw_send_command>:
    4788:	ff 92       	push	r15
    478a:	0f 93       	push	r16
    478c:	1f 93       	push	r17
    478e:	cf 93       	push	r28
    4790:	df 93       	push	r29
    4792:	c8 2f       	mov	r28, r24
    4794:	d4 2f       	mov	r29, r20
    4796:	15 2f       	mov	r17, r21
    4798:	06 2f       	mov	r16, r22
    479a:	f7 2e       	mov	r15, r23
    479c:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
    47a0:	8c 2f       	mov	r24, r28
    47a2:	80 64       	ori	r24, 0x40	; 64
    47a4:	0e 94 b2 23 	call	0x4764	; 0x4764 <sd_raw_send_byte>
    47a8:	8f 2d       	mov	r24, r15
    47aa:	0e 94 b2 23 	call	0x4764	; 0x4764 <sd_raw_send_byte>
    47ae:	80 2f       	mov	r24, r16
    47b0:	0e 94 b2 23 	call	0x4764	; 0x4764 <sd_raw_send_byte>
    47b4:	81 2f       	mov	r24, r17
    47b6:	0e 94 b2 23 	call	0x4764	; 0x4764 <sd_raw_send_byte>
    47ba:	8d 2f       	mov	r24, r29
    47bc:	0e 94 b2 23 	call	0x4764	; 0x4764 <sd_raw_send_byte>
    47c0:	cc 23       	and	r28, r28
    47c2:	19 f0       	breq	.+6      	; 0x47ca <sd_raw_send_command+0x42>
    47c4:	c8 30       	cpi	r28, 0x08	; 8
    47c6:	29 f0       	breq	.+10     	; 0x47d2 <sd_raw_send_command+0x4a>
    47c8:	08 c0       	rjmp	.+16     	; 0x47da <sd_raw_send_command+0x52>
    47ca:	85 e9       	ldi	r24, 0x95	; 149
    47cc:	0e 94 b2 23 	call	0x4764	; 0x4764 <sd_raw_send_byte>
    47d0:	0f c0       	rjmp	.+30     	; 0x47f0 <sd_raw_send_command+0x68>
    47d2:	87 e8       	ldi	r24, 0x87	; 135
    47d4:	0e 94 b2 23 	call	0x4764	; 0x4764 <sd_raw_send_byte>
    47d8:	0b c0       	rjmp	.+22     	; 0x47f0 <sd_raw_send_command+0x68>
    47da:	8f ef       	ldi	r24, 0xFF	; 255
    47dc:	0e 94 b2 23 	call	0x4764	; 0x4764 <sd_raw_send_byte>
    47e0:	07 c0       	rjmp	.+14     	; 0x47f0 <sd_raw_send_command+0x68>
    47e2:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
    47e6:	8f 3f       	cpi	r24, 0xFF	; 255
    47e8:	29 f4       	brne	.+10     	; 0x47f4 <sd_raw_send_command+0x6c>
    47ea:	c1 50       	subi	r28, 0x01	; 1
    47ec:	d1 f7       	brne	.-12     	; 0x47e2 <sd_raw_send_command+0x5a>
    47ee:	02 c0       	rjmp	.+4      	; 0x47f4 <sd_raw_send_command+0x6c>
    47f0:	ca e0       	ldi	r28, 0x0A	; 10
    47f2:	f7 cf       	rjmp	.-18     	; 0x47e2 <sd_raw_send_command+0x5a>
    47f4:	df 91       	pop	r29
    47f6:	cf 91       	pop	r28
    47f8:	1f 91       	pop	r17
    47fa:	0f 91       	pop	r16
    47fc:	ff 90       	pop	r15
    47fe:	08 95       	ret

00004800 <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
    4800:	ef 92       	push	r14
    4802:	ff 92       	push	r15
    4804:	0f 93       	push	r16
    4806:	1f 93       	push	r17
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    4808:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <raw_block_written>
    480c:	81 11       	cpse	r24, r1
    480e:	1e c0       	rjmp	.+60     	; 0x484c <sd_raw_sync+0x4c>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    4810:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <raw_block_address>
    4814:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <raw_block_address+0x1>
    4818:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <raw_block_address+0x2>
    481c:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <raw_block_address+0x3>
    4820:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <raw_block_address+0x4>
    4824:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <raw_block_address+0x5>
    4828:	e1 2c       	mov	r14, r1
    482a:	68 94       	set
    482c:	ff 24       	eor	r15, r15
    482e:	f1 f8       	bld	r15, 1
    4830:	0e e0       	ldi	r16, 0x0E	; 14
    4832:	12 e0       	ldi	r17, 0x02	; 2
    4834:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <raw_block_address+0x6>
    4838:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <raw_block_address+0x7>
    483c:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <sd_raw_write>
    4840:	88 23       	and	r24, r24
    4842:	29 f0       	breq	.+10     	; 0x484e <sd_raw_sync+0x4e>
        return 0;
    raw_block_written = 1;
    4844:	81 e0       	ldi	r24, 0x01	; 1
    4846:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <raw_block_written>
#endif
    return 1;
    484a:	01 c0       	rjmp	.+2      	; 0x484e <sd_raw_sync+0x4e>
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
        return 1;
    484c:	81 e0       	ldi	r24, 0x01	; 1
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
        return 0;
    raw_block_written = 1;
#endif
    return 1;
}
    484e:	1f 91       	pop	r17
    4850:	0f 91       	pop	r16
    4852:	ff 90       	pop	r15
    4854:	ef 90       	pop	r14
    4856:	08 95       	ret

00004858 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    4858:	2f 92       	push	r2
    485a:	3f 92       	push	r3
    485c:	4f 92       	push	r4
    485e:	5f 92       	push	r5
    4860:	6f 92       	push	r6
    4862:	7f 92       	push	r7
    4864:	8f 92       	push	r8
    4866:	9f 92       	push	r9
    4868:	af 92       	push	r10
    486a:	bf 92       	push	r11
    486c:	cf 92       	push	r12
    486e:	df 92       	push	r13
    4870:	ef 92       	push	r14
    4872:	ff 92       	push	r15
    4874:	0f 93       	push	r16
    4876:	1f 93       	push	r17
    4878:	cf 93       	push	r28
    487a:	df 93       	push	r29
    487c:	cd b7       	in	r28, 0x3d	; 61
    487e:	de b7       	in	r29, 0x3e	; 62
    4880:	6a 97       	sbiw	r28, 0x1a	; 26
    4882:	0f b6       	in	r0, 0x3f	; 63
    4884:	f8 94       	cli
    4886:	de bf       	out	0x3e, r29	; 62
    4888:	0f be       	out	0x3f, r0	; 63
    488a:	cd bf       	out	0x3d, r28	; 61
    488c:	29 83       	std	Y+1, r18	; 0x01
    488e:	3a 83       	std	Y+2, r19	; 0x02
    4890:	4b 83       	std	Y+3, r20	; 0x03
    4892:	5c 83       	std	Y+4, r21	; 0x04
    4894:	6d 83       	std	Y+5, r22	; 0x05
    4896:	7e 83       	std	Y+6, r23	; 0x06
    4898:	8f 83       	std	Y+7, r24	; 0x07
    489a:	98 87       	std	Y+8, r25	; 0x08
    489c:	1c 8b       	std	Y+20, r17	; 0x14
    489e:	0b 8b       	std	Y+19, r16	; 0x13
    48a0:	27 01       	movw	r4, r14
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    48a2:	ef 28       	or	r14, r15
    48a4:	09 f4       	brne	.+2      	; 0x48a8 <sd_raw_read+0x50>
    48a6:	f8 c0       	rjmp	.+496    	; 0x4a98 <sd_raw_read+0x240>
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
        read_length = 512 - block_offset; /* read up to block border */
    48a8:	61 2c       	mov	r6, r1
    48aa:	68 94       	set
    48ac:	77 24       	eor	r7, r7
    48ae:	71 f8       	bld	r7, 1
    48b0:	0f 2e       	mov	r0, r31
    48b2:	fe e0       	ldi	r31, 0x0E	; 14
    48b4:	2f 2e       	mov	r2, r31
    48b6:	f4 e0       	ldi	r31, 0x04	; 4
    48b8:	3f 2e       	mov	r3, r31
    48ba:	f0 2d       	mov	r31, r0
    48bc:	7a 8e       	std	Y+26, r7	; 0x1a
    48be:	69 8e       	std	Y+25, r6	; 0x19
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    48c0:	89 80       	ldd	r8, Y+1	; 0x01
    48c2:	9a 80       	ldd	r9, Y+2	; 0x02
    48c4:	21 e0       	ldi	r18, 0x01	; 1
    48c6:	92 22       	and	r9, r18
        block_address = offset - block_offset;
    48c8:	94 01       	movw	r18, r8
    48ca:	40 e0       	ldi	r20, 0x00	; 0
    48cc:	50 e0       	ldi	r21, 0x00	; 0
    48ce:	60 e0       	ldi	r22, 0x00	; 0
    48d0:	70 e0       	ldi	r23, 0x00	; 0
    48d2:	cb 01       	movw	r24, r22
    48d4:	89 86       	std	Y+9, r8	; 0x09
    48d6:	3a 87       	std	Y+10, r19	; 0x0a
    48d8:	4b 87       	std	Y+11, r20	; 0x0b
    48da:	5c 87       	std	Y+12, r21	; 0x0c
    48dc:	6d 87       	std	Y+13, r22	; 0x0d
    48de:	7e 87       	std	Y+14, r23	; 0x0e
    48e0:	8f 87       	std	Y+15, r24	; 0x0f
    48e2:	98 8b       	std	Y+16, r25	; 0x10
    48e4:	29 81       	ldd	r18, Y+1	; 0x01
    48e6:	3a 81       	ldd	r19, Y+2	; 0x02
    48e8:	4b 81       	ldd	r20, Y+3	; 0x03
    48ea:	5c 81       	ldd	r21, Y+4	; 0x04
    48ec:	6d 81       	ldd	r22, Y+5	; 0x05
    48ee:	7e 81       	ldd	r23, Y+6	; 0x06
    48f0:	8f 81       	ldd	r24, Y+7	; 0x07
    48f2:	98 85       	ldd	r25, Y+8	; 0x08
    48f4:	a9 84       	ldd	r10, Y+9	; 0x09
    48f6:	ba 84       	ldd	r11, Y+10	; 0x0a
    48f8:	c1 2c       	mov	r12, r1
    48fa:	d1 2c       	mov	r13, r1
    48fc:	e1 2c       	mov	r14, r1
    48fe:	f1 2c       	mov	r15, r1
    4900:	00 e0       	ldi	r16, 0x00	; 0
    4902:	10 e0       	ldi	r17, 0x00	; 0
    4904:	0e 94 97 2c 	call	0x592e	; 0x592e <__subdi3>
    4908:	29 8b       	std	Y+17, r18	; 0x11
    490a:	3a 8b       	std	Y+18, r19	; 0x12
    490c:	64 2e       	mov	r6, r20
    490e:	75 2e       	mov	r7, r21
    4910:	6d 8b       	std	Y+21, r22	; 0x15
    4912:	7e 8b       	std	Y+22, r23	; 0x16
    4914:	8f 8b       	std	Y+23, r24	; 0x17
    4916:	98 8f       	std	Y+24, r25	; 0x18
    4918:	49 8d       	ldd	r20, Y+25	; 0x19
    491a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    491c:	48 19       	sub	r20, r8
    491e:	59 09       	sbc	r21, r9
    4920:	5a 87       	std	Y+10, r21	; 0x0a
    4922:	49 87       	std	Y+9, r20	; 0x09
    4924:	44 16       	cp	r4, r20
    4926:	55 06       	cpc	r5, r21
    4928:	10 f4       	brcc	.+4      	; 0x492e <sd_raw_read+0xd6>
    492a:	5a 86       	std	Y+10, r5	; 0x0a
    492c:	49 86       	std	Y+9, r4	; 0x09
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    492e:	a0 90 06 02 	lds	r10, 0x0206	; 0x800206 <raw_block_address>
    4932:	b0 90 07 02 	lds	r11, 0x0207	; 0x800207 <raw_block_address+0x1>
    4936:	c0 90 08 02 	lds	r12, 0x0208	; 0x800208 <raw_block_address+0x2>
    493a:	d0 90 09 02 	lds	r13, 0x0209	; 0x800209 <raw_block_address+0x3>
    493e:	e0 90 0a 02 	lds	r14, 0x020A	; 0x80020a <raw_block_address+0x4>
    4942:	f0 90 0b 02 	lds	r15, 0x020B	; 0x80020b <raw_block_address+0x5>
    4946:	00 91 0c 02 	lds	r16, 0x020C	; 0x80020c <raw_block_address+0x6>
    494a:	10 91 0d 02 	lds	r17, 0x020D	; 0x80020d <raw_block_address+0x7>
    494e:	29 89       	ldd	r18, Y+17	; 0x11
    4950:	3a 89       	ldd	r19, Y+18	; 0x12
    4952:	46 2d       	mov	r20, r6
    4954:	57 2d       	mov	r21, r7
    4956:	6d 89       	ldd	r22, Y+21	; 0x15
    4958:	7e 89       	ldd	r23, Y+22	; 0x16
    495a:	8f 89       	ldd	r24, Y+23	; 0x17
    495c:	98 8d       	ldd	r25, Y+24	; 0x18
    495e:	0e 94 a0 2c 	call	0x5940	; 0x5940 <__cmpdi2>
    4962:	09 f4       	brne	.+2      	; 0x4966 <sd_raw_read+0x10e>
    4964:	63 c0       	rjmp	.+198    	; 0x4a2c <sd_raw_read+0x1d4>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    4966:	0e 94 00 24 	call	0x4800	; 0x4800 <sd_raw_sync>
    496a:	88 23       	and	r24, r24
    496c:	09 f4       	brne	.+2      	; 0x4970 <sd_raw_read+0x118>
    496e:	95 c0       	rjmp	.+298    	; 0x4a9a <sd_raw_read+0x242>
                return 0;
#endif

            /* address card */
            select_card();
    4970:	2a 98       	cbi	0x05, 2	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    4972:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <sd_raw_card_type>
    4976:	82 ff       	sbrs	r24, 2
    4978:	10 c0       	rjmp	.+32     	; 0x499a <sd_raw_read+0x142>
    497a:	29 89       	ldd	r18, Y+17	; 0x11
    497c:	3a 89       	ldd	r19, Y+18	; 0x12
    497e:	46 2d       	mov	r20, r6
    4980:	57 2d       	mov	r21, r7
    4982:	6d 89       	ldd	r22, Y+21	; 0x15
    4984:	7e 89       	ldd	r23, Y+22	; 0x16
    4986:	8f 89       	ldd	r24, Y+23	; 0x17
    4988:	98 8d       	ldd	r25, Y+24	; 0x18
    498a:	09 e0       	ldi	r16, 0x09	; 9
    498c:	0e 94 66 2c 	call	0x58cc	; 0x58cc <__lshrdi3>
    4990:	64 2f       	mov	r22, r20
    4992:	75 2f       	mov	r23, r21
    4994:	42 2f       	mov	r20, r18
    4996:	53 2f       	mov	r21, r19
    4998:	04 c0       	rjmp	.+8      	; 0x49a2 <sd_raw_read+0x14a>
    499a:	49 89       	ldd	r20, Y+17	; 0x11
    499c:	5a 89       	ldd	r21, Y+18	; 0x12
    499e:	66 2d       	mov	r22, r6
    49a0:	77 2d       	mov	r23, r7
    49a2:	81 e1       	ldi	r24, 0x11	; 17
    49a4:	0e 94 c4 23 	call	0x4788	; 0x4788 <sd_raw_send_command>
    49a8:	88 23       	and	r24, r24
    49aa:	19 f0       	breq	.+6      	; 0x49b2 <sd_raw_read+0x15a>
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
#endif
            {
                unselect_card();
    49ac:	2a 9a       	sbi	0x05, 2	; 5
                return 0;
    49ae:	80 e0       	ldi	r24, 0x00	; 0
    49b0:	74 c0       	rjmp	.+232    	; 0x4a9a <sd_raw_read+0x242>
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    49b2:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
    49b6:	8e 3f       	cpi	r24, 0xFE	; 254
    49b8:	e1 f7       	brne	.-8      	; 0x49b2 <sd_raw_read+0x15a>
    49ba:	0e e0       	ldi	r16, 0x0E	; 14
    49bc:	12 e0       	ldi	r17, 0x02	; 2
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    49be:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
    49c2:	f8 01       	movw	r30, r16
    49c4:	81 93       	st	Z+, r24
    49c6:	8f 01       	movw	r16, r30
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    49c8:	e2 15       	cp	r30, r2
    49ca:	f3 05       	cpc	r31, r3
    49cc:	c1 f7       	brne	.-16     	; 0x49be <sd_raw_read+0x166>
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;
    49ce:	f9 89       	ldd	r31, Y+17	; 0x11
    49d0:	f0 93 06 02 	sts	0x0206, r31	; 0x800206 <raw_block_address>
    49d4:	2a 89       	ldd	r18, Y+18	; 0x12
    49d6:	20 93 07 02 	sts	0x0207, r18	; 0x800207 <raw_block_address+0x1>
    49da:	60 92 08 02 	sts	0x0208, r6	; 0x800208 <raw_block_address+0x2>
    49de:	70 92 09 02 	sts	0x0209, r7	; 0x800209 <raw_block_address+0x3>
    49e2:	3d 89       	ldd	r19, Y+21	; 0x15
    49e4:	30 93 0a 02 	sts	0x020A, r19	; 0x80020a <raw_block_address+0x4>
    49e8:	4e 89       	ldd	r20, Y+22	; 0x16
    49ea:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <raw_block_address+0x5>
    49ee:	5f 89       	ldd	r21, Y+23	; 0x17
    49f0:	50 93 0c 02 	sts	0x020C, r21	; 0x80020c <raw_block_address+0x6>
    49f4:	68 8d       	ldd	r22, Y+24	; 0x18
    49f6:	60 93 0d 02 	sts	0x020D, r22	; 0x80020d <raw_block_address+0x7>

            memcpy(buffer, raw_block + block_offset, read_length);
    49fa:	b4 01       	movw	r22, r8
    49fc:	62 5f       	subi	r22, 0xF2	; 242
    49fe:	7d 4f       	sbci	r23, 0xFD	; 253
    4a00:	49 85       	ldd	r20, Y+9	; 0x09
    4a02:	5a 85       	ldd	r21, Y+10	; 0x0a
    4a04:	8b 89       	ldd	r24, Y+19	; 0x13
    4a06:	9c 89       	ldd	r25, Y+20	; 0x14
    4a08:	0e 94 cc 2c 	call	0x5998	; 0x5998 <memcpy>
            buffer += read_length;
    4a0c:	8b 89       	ldd	r24, Y+19	; 0x13
    4a0e:	9c 89       	ldd	r25, Y+20	; 0x14
    4a10:	e9 85       	ldd	r30, Y+9	; 0x09
    4a12:	fa 85       	ldd	r31, Y+10	; 0x0a
    4a14:	8e 0f       	add	r24, r30
    4a16:	9f 1f       	adc	r25, r31
    4a18:	9c 8b       	std	Y+20, r25	; 0x14
    4a1a:	8b 8b       	std	Y+19, r24	; 0x13
#endif
            
            /* read crc16 */
            sd_raw_rec_byte();
    4a1c:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
            sd_raw_rec_byte();
    4a20:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
            
            /* deaddress card */
            unselect_card();
    4a24:	2a 9a       	sbi	0x05, 2	; 5

            /* let card some time to finish */
            sd_raw_rec_byte();
    4a26:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
    4a2a:	11 c0       	rjmp	.+34     	; 0x4a4e <sd_raw_read+0x1f6>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    4a2c:	b4 01       	movw	r22, r8
    4a2e:	62 5f       	subi	r22, 0xF2	; 242
    4a30:	7d 4f       	sbci	r23, 0xFD	; 253
    4a32:	49 85       	ldd	r20, Y+9	; 0x09
    4a34:	5a 85       	ldd	r21, Y+10	; 0x0a
    4a36:	8b 89       	ldd	r24, Y+19	; 0x13
    4a38:	9c 89       	ldd	r25, Y+20	; 0x14
    4a3a:	0e 94 cc 2c 	call	0x5998	; 0x5998 <memcpy>
            buffer += read_length;
    4a3e:	2b 89       	ldd	r18, Y+19	; 0x13
    4a40:	3c 89       	ldd	r19, Y+20	; 0x14
    4a42:	49 85       	ldd	r20, Y+9	; 0x09
    4a44:	5a 85       	ldd	r21, Y+10	; 0x0a
    4a46:	24 0f       	add	r18, r20
    4a48:	35 1f       	adc	r19, r21
    4a4a:	3c 8b       	std	Y+20, r19	; 0x14
    4a4c:	2b 8b       	std	Y+19, r18	; 0x13
        }
#endif

        length -= read_length;
    4a4e:	69 85       	ldd	r22, Y+9	; 0x09
    4a50:	7a 85       	ldd	r23, Y+10	; 0x0a
    4a52:	46 1a       	sub	r4, r22
    4a54:	57 0a       	sbc	r5, r23
        offset += read_length;
    4a56:	4b 01       	movw	r8, r22
    4a58:	26 2f       	mov	r18, r22
    4a5a:	39 2d       	mov	r19, r9
    4a5c:	40 e0       	ldi	r20, 0x00	; 0
    4a5e:	50 e0       	ldi	r21, 0x00	; 0
    4a60:	60 e0       	ldi	r22, 0x00	; 0
    4a62:	70 e0       	ldi	r23, 0x00	; 0
    4a64:	80 e0       	ldi	r24, 0x00	; 0
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	a9 80       	ldd	r10, Y+1	; 0x01
    4a6a:	ba 80       	ldd	r11, Y+2	; 0x02
    4a6c:	cb 80       	ldd	r12, Y+3	; 0x03
    4a6e:	dc 80       	ldd	r13, Y+4	; 0x04
    4a70:	ed 80       	ldd	r14, Y+5	; 0x05
    4a72:	fe 80       	ldd	r15, Y+6	; 0x06
    4a74:	0f 81       	ldd	r16, Y+7	; 0x07
    4a76:	18 85       	ldd	r17, Y+8	; 0x08
    4a78:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
    4a7c:	29 83       	std	Y+1, r18	; 0x01
    4a7e:	3a 83       	std	Y+2, r19	; 0x02
    4a80:	4b 83       	std	Y+3, r20	; 0x03
    4a82:	5c 83       	std	Y+4, r21	; 0x04
    4a84:	6d 83       	std	Y+5, r22	; 0x05
    4a86:	7e 83       	std	Y+6, r23	; 0x06
    4a88:	8f 83       	std	Y+7, r24	; 0x07
    4a8a:	98 87       	std	Y+8, r25	; 0x08
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    4a8c:	41 14       	cp	r4, r1
    4a8e:	51 04       	cpc	r5, r1
    4a90:	09 f0       	breq	.+2      	; 0x4a94 <sd_raw_read+0x23c>
    4a92:	16 cf       	rjmp	.-468    	; 0x48c0 <sd_raw_read+0x68>

        length -= read_length;
        offset += read_length;
    }

    return 1;
    4a94:	81 e0       	ldi	r24, 0x01	; 1
    4a96:	01 c0       	rjmp	.+2      	; 0x4a9a <sd_raw_read+0x242>
    4a98:	81 e0       	ldi	r24, 0x01	; 1
}
    4a9a:	6a 96       	adiw	r28, 0x1a	; 26
    4a9c:	0f b6       	in	r0, 0x3f	; 63
    4a9e:	f8 94       	cli
    4aa0:	de bf       	out	0x3e, r29	; 62
    4aa2:	0f be       	out	0x3f, r0	; 63
    4aa4:	cd bf       	out	0x3d, r28	; 61
    4aa6:	df 91       	pop	r29
    4aa8:	cf 91       	pop	r28
    4aaa:	1f 91       	pop	r17
    4aac:	0f 91       	pop	r16
    4aae:	ff 90       	pop	r15
    4ab0:	ef 90       	pop	r14
    4ab2:	df 90       	pop	r13
    4ab4:	cf 90       	pop	r12
    4ab6:	bf 90       	pop	r11
    4ab8:	af 90       	pop	r10
    4aba:	9f 90       	pop	r9
    4abc:	8f 90       	pop	r8
    4abe:	7f 90       	pop	r7
    4ac0:	6f 90       	pop	r6
    4ac2:	5f 90       	pop	r5
    4ac4:	4f 90       	pop	r4
    4ac6:	3f 90       	pop	r3
    4ac8:	2f 90       	pop	r2
    4aca:	08 95       	ret

00004acc <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    4acc:	9f 92       	push	r9
    4ace:	af 92       	push	r10
    4ad0:	bf 92       	push	r11
    4ad2:	cf 92       	push	r12
    4ad4:	df 92       	push	r13
    4ad6:	ef 92       	push	r14
    4ad8:	ff 92       	push	r15
    4ada:	0f 93       	push	r16
    4adc:	1f 93       	push	r17
    4ade:	cf 93       	push	r28
    4ae0:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    4ae2:	23 9a       	sbi	0x04, 3	; 4
    configure_pin_sck();
    4ae4:	25 9a       	sbi	0x04, 5	; 4
    configure_pin_ss();
    4ae6:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_miso();
    4ae8:	24 98       	cbi	0x04, 4	; 4

    unselect_card();
    4aea:	2a 9a       	sbi	0x05, 2	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    4aec:	83 e5       	ldi	r24, 0x53	; 83
    4aee:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    4af0:	8d b5       	in	r24, 0x2d	; 45
    4af2:	8e 7f       	andi	r24, 0xFE	; 254
    4af4:	8d bd       	out	0x2d, r24	; 45
	
    /* initialization procedure */
    sd_raw_card_type = 0;
    4af6:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <sd_raw_card_type>
    4afa:	1a e0       	ldi	r17, 0x0A	; 10

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    {
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    4afc:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
    4b00:	11 50       	subi	r17, 0x01	; 1
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    4b02:	e1 f7       	brne	.-8      	; 0x4afc <sd_raw_init+0x30>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    4b04:	2a 98       	cbi	0x05, 2	; 5
    4b06:	c0 e0       	ldi	r28, 0x00	; 0
    4b08:	d2 e0       	ldi	r29, 0x02	; 2

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    4b0a:	40 e0       	ldi	r20, 0x00	; 0
    4b0c:	50 e0       	ldi	r21, 0x00	; 0
    4b0e:	ba 01       	movw	r22, r20
    4b10:	80 e0       	ldi	r24, 0x00	; 0
    4b12:	0e 94 c4 23 	call	0x4788	; 0x4788 <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
    4b16:	81 30       	cpi	r24, 0x01	; 1
    4b18:	29 f0       	breq	.+10     	; 0x4b24 <sd_raw_init+0x58>
    4b1a:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x1ff)
    4b1c:	b1 f7       	brne	.-20     	; 0x4b0a <sd_raw_init+0x3e>
        {
            unselect_card();
    4b1e:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    4b20:	01 2f       	mov	r16, r17
    4b22:	c0 c0       	rjmp	.+384    	; 0x4ca4 <sd_raw_init+0x1d8>
        }
    }

#if SD_RAW_SDHC
    /* check for version of SD card specification */
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    4b24:	4a ea       	ldi	r20, 0xAA	; 170
    4b26:	51 e0       	ldi	r21, 0x01	; 1
    4b28:	60 e0       	ldi	r22, 0x00	; 0
    4b2a:	70 e0       	ldi	r23, 0x00	; 0
    4b2c:	88 e0       	ldi	r24, 0x08	; 8
    4b2e:	0e 94 c4 23 	call	0x4788	; 0x4788 <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
    4b32:	c8 2f       	mov	r28, r24
    4b34:	c4 70       	andi	r28, 0x04	; 4
    4b36:	82 fd       	sbrc	r24, 2
    4b38:	1d c0       	rjmp	.+58     	; 0x4b74 <sd_raw_init+0xa8>
    {
        sd_raw_rec_byte();
    4b3a:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    4b3e:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
        if((sd_raw_rec_byte() & 0x01) == 0)
    4b42:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
    4b46:	08 2f       	mov	r16, r24
    4b48:	01 70       	andi	r16, 0x01	; 1
    4b4a:	80 ff       	sbrs	r24, 0
    4b4c:	ab c0       	rjmp	.+342    	; 0x4ca4 <sd_raw_init+0x1d8>
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
    4b4e:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
    4b52:	8a 3a       	cpi	r24, 0xAA	; 170
    4b54:	09 f0       	breq	.+2      	; 0x4b58 <sd_raw_init+0x8c>
    4b56:	a5 c0       	rjmp	.+330    	; 0x4ca2 <sd_raw_init+0x1d6>
            return 0; /* wrong test pattern */

        /* card conforms to SD 2 card specification */
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
    4b58:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <sd_raw_card_type>
    4b5c:	82 60       	ori	r24, 0x02	; 2
    4b5e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sd_raw_card_type>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    4b62:	c0 e0       	ldi	r28, 0x00	; 0
    4b64:	d0 e8       	ldi	r29, 0x80	; 128
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
    4b66:	91 2c       	mov	r9, r1
    4b68:	a1 2c       	mov	r10, r1
    4b6a:	b1 2c       	mov	r11, r1
    4b6c:	68 94       	set
    4b6e:	cc 24       	eor	r12, r12
    4b70:	c6 f8       	bld	r12, 6
    4b72:	14 c0       	rjmp	.+40     	; 0x4b9c <sd_raw_init+0xd0>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    4b74:	40 e0       	ldi	r20, 0x00	; 0
    4b76:	50 e0       	ldi	r21, 0x00	; 0
    4b78:	ba 01       	movw	r22, r20
    4b7a:	87 e3       	ldi	r24, 0x37	; 55
    4b7c:	0e 94 c4 23 	call	0x4788	; 0x4788 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    4b80:	40 e0       	ldi	r20, 0x00	; 0
    4b82:	50 e0       	ldi	r21, 0x00	; 0
    4b84:	ba 01       	movw	r22, r20
    4b86:	89 e2       	ldi	r24, 0x29	; 41
    4b88:	0e 94 c4 23 	call	0x4788	; 0x4788 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    4b8c:	82 fd       	sbrc	r24, 2
    4b8e:	e9 cf       	rjmp	.-46     	; 0x4b62 <sd_raw_init+0x96>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    4b90:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <sd_raw_card_type>
    4b94:	81 60       	ori	r24, 0x01	; 1
    4b96:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sd_raw_card_type>
    4b9a:	e3 cf       	rjmp	.-58     	; 0x4b62 <sd_raw_init+0x96>
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    4b9c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <sd_raw_card_type>
    4ba0:	98 2f       	mov	r25, r24
    4ba2:	93 70       	andi	r25, 0x03	; 3
    4ba4:	c9 f0       	breq	.+50     	; 0x4bd8 <sd_raw_init+0x10c>
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    4ba6:	81 ff       	sbrs	r24, 1
    4ba8:	05 c0       	rjmp	.+10     	; 0x4bb4 <sd_raw_init+0xe8>
                arg = 0x40000000;
    4baa:	d9 2c       	mov	r13, r9
    4bac:	ea 2c       	mov	r14, r10
    4bae:	fb 2c       	mov	r15, r11
    4bb0:	0c 2d       	mov	r16, r12
    4bb2:	04 c0       	rjmp	.+8      	; 0x4bbc <sd_raw_init+0xf0>
    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
        {
            uint32_t arg = 0;
    4bb4:	d1 2c       	mov	r13, r1
    4bb6:	e1 2c       	mov	r14, r1
    4bb8:	f1 2c       	mov	r15, r1
    4bba:	00 e0       	ldi	r16, 0x00	; 0
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    4bbc:	40 e0       	ldi	r20, 0x00	; 0
    4bbe:	50 e0       	ldi	r21, 0x00	; 0
    4bc0:	ba 01       	movw	r22, r20
    4bc2:	87 e3       	ldi	r24, 0x37	; 55
    4bc4:	0e 94 c4 23 	call	0x4788	; 0x4788 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    4bc8:	4d 2d       	mov	r20, r13
    4bca:	5e 2d       	mov	r21, r14
    4bcc:	6f 2d       	mov	r22, r15
    4bce:	70 2f       	mov	r23, r16
    4bd0:	89 e2       	ldi	r24, 0x29	; 41
    4bd2:	0e 94 c4 23 	call	0x4788	; 0x4788 <sd_raw_send_command>
    4bd6:	06 c0       	rjmp	.+12     	; 0x4be4 <sd_raw_init+0x118>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    4bd8:	40 e0       	ldi	r20, 0x00	; 0
    4bda:	50 e0       	ldi	r21, 0x00	; 0
    4bdc:	ba 01       	movw	r22, r20
    4bde:	81 e0       	ldi	r24, 0x01	; 1
    4be0:	0e 94 c4 23 	call	0x4788	; 0x4788 <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    4be4:	08 2f       	mov	r16, r24
    4be6:	01 70       	andi	r16, 0x01	; 1
    4be8:	80 ff       	sbrs	r24, 0
    4bea:	05 c0       	rjmp	.+10     	; 0x4bf6 <sd_raw_init+0x12a>
    4bec:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x7fff)
    4bee:	b1 f6       	brne	.-84     	; 0x4b9c <sd_raw_init+0xd0>
        {
            unselect_card();
    4bf0:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    4bf2:	01 2f       	mov	r16, r17
    4bf4:	57 c0       	rjmp	.+174    	; 0x4ca4 <sd_raw_init+0x1d8>
        }
    }

#if SD_RAW_SDHC
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    4bf6:	c0 91 04 02 	lds	r28, 0x0204	; 0x800204 <sd_raw_card_type>
    4bfa:	c1 ff       	sbrs	r28, 1
    4bfc:	17 c0       	rjmp	.+46     	; 0x4c2c <sd_raw_init+0x160>
    {
        if(sd_raw_send_command(CMD_READ_OCR, 0))
    4bfe:	40 e0       	ldi	r20, 0x00	; 0
    4c00:	50 e0       	ldi	r21, 0x00	; 0
    4c02:	ba 01       	movw	r22, r20
    4c04:	8a e3       	ldi	r24, 0x3A	; 58
    4c06:	0e 94 c4 23 	call	0x4788	; 0x4788 <sd_raw_send_command>
    4c0a:	88 23       	and	r24, r24
    4c0c:	11 f0       	breq	.+4      	; 0x4c12 <sd_raw_init+0x146>
        {
            unselect_card();
    4c0e:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    4c10:	49 c0       	rjmp	.+146    	; 0x4ca4 <sd_raw_init+0x1d8>
        }

        if(sd_raw_rec_byte() & 0x40)
    4c12:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
    4c16:	86 ff       	sbrs	r24, 6
    4c18:	03 c0       	rjmp	.+6      	; 0x4c20 <sd_raw_init+0x154>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
    4c1a:	c4 60       	ori	r28, 0x04	; 4
    4c1c:	c0 93 04 02 	sts	0x0204, r28	; 0x800204 <sd_raw_card_type>

        sd_raw_rec_byte();
    4c20:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    4c24:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    4c28:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    4c2c:	40 e0       	ldi	r20, 0x00	; 0
    4c2e:	52 e0       	ldi	r21, 0x02	; 2
    4c30:	60 e0       	ldi	r22, 0x00	; 0
    4c32:	70 e0       	ldi	r23, 0x00	; 0
    4c34:	80 e1       	ldi	r24, 0x10	; 16
    4c36:	0e 94 c4 23 	call	0x4788	; 0x4788 <sd_raw_send_command>
    4c3a:	88 23       	and	r24, r24
    4c3c:	11 f0       	breq	.+4      	; 0x4c42 <sd_raw_init+0x176>
    {
        unselect_card();
    4c3e:	2a 9a       	sbi	0x05, 2	; 5
        return 0;
    4c40:	31 c0       	rjmp	.+98     	; 0x4ca4 <sd_raw_init+0x1d8>
    }

    /* deaddress card */
    unselect_card();
    4c42:	2a 9a       	sbi	0x05, 2	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    4c44:	8c b5       	in	r24, 0x2c	; 44
    4c46:	8c 7f       	andi	r24, 0xFC	; 252
    4c48:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    4c4a:	8d b5       	in	r24, 0x2d	; 45
    4c4c:	81 60       	ori	r24, 0x01	; 1
    4c4e:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    4c50:	8f ef       	ldi	r24, 0xFF	; 255
    4c52:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <raw_block_address>
    4c56:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <raw_block_address+0x1>
    4c5a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <raw_block_address+0x2>
    4c5e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <raw_block_address+0x3>
    4c62:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <raw_block_address+0x4>
    4c66:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <raw_block_address+0x5>
    4c6a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <raw_block_address+0x6>
    4c6e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <raw_block_address+0x7>
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    4c72:	81 e0       	ldi	r24, 0x01	; 1
    4c74:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <raw_block_written>
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    4c78:	e1 2c       	mov	r14, r1
    4c7a:	68 94       	set
    4c7c:	ff 24       	eor	r15, r15
    4c7e:	f1 f8       	bld	r15, 1
    4c80:	0e e0       	ldi	r16, 0x0E	; 14
    4c82:	12 e0       	ldi	r17, 0x02	; 2
    4c84:	20 e0       	ldi	r18, 0x00	; 0
    4c86:	30 e0       	ldi	r19, 0x00	; 0
    4c88:	40 e0       	ldi	r20, 0x00	; 0
    4c8a:	50 e0       	ldi	r21, 0x00	; 0
    4c8c:	60 e0       	ldi	r22, 0x00	; 0
    4c8e:	70 e0       	ldi	r23, 0x00	; 0
    4c90:	80 e0       	ldi	r24, 0x00	; 0
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	0e 94 2c 24 	call	0x4858	; 0x4858 <sd_raw_read>
    4c98:	01 e0       	ldi	r16, 0x01	; 1
    4c9a:	81 11       	cpse	r24, r1
    4c9c:	03 c0       	rjmp	.+6      	; 0x4ca4 <sd_raw_init+0x1d8>
    4c9e:	00 e0       	ldi	r16, 0x00	; 0
    4ca0:	01 c0       	rjmp	.+2      	; 0x4ca4 <sd_raw_init+0x1d8>
        sd_raw_rec_byte();
        sd_raw_rec_byte();
        if((sd_raw_rec_byte() & 0x01) == 0)
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
            return 0; /* wrong test pattern */
    4ca2:	0c 2f       	mov	r16, r28
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
        return 0;
#endif

    return 1;
}
    4ca4:	80 2f       	mov	r24, r16
    4ca6:	df 91       	pop	r29
    4ca8:	cf 91       	pop	r28
    4caa:	1f 91       	pop	r17
    4cac:	0f 91       	pop	r16
    4cae:	ff 90       	pop	r15
    4cb0:	ef 90       	pop	r14
    4cb2:	df 90       	pop	r13
    4cb4:	cf 90       	pop	r12
    4cb6:	bf 90       	pop	r11
    4cb8:	af 90       	pop	r10
    4cba:	9f 90       	pop	r9
    4cbc:	08 95       	ret

00004cbe <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    4cbe:	2f 92       	push	r2
    4cc0:	3f 92       	push	r3
    4cc2:	4f 92       	push	r4
    4cc4:	5f 92       	push	r5
    4cc6:	6f 92       	push	r6
    4cc8:	7f 92       	push	r7
    4cca:	8f 92       	push	r8
    4ccc:	9f 92       	push	r9
    4cce:	af 92       	push	r10
    4cd0:	bf 92       	push	r11
    4cd2:	cf 92       	push	r12
    4cd4:	df 92       	push	r13
    4cd6:	ef 92       	push	r14
    4cd8:	ff 92       	push	r15
    4cda:	0f 93       	push	r16
    4cdc:	1f 93       	push	r17
    4cde:	cf 93       	push	r28
    4ce0:	df 93       	push	r29
    4ce2:	cd b7       	in	r28, 0x3d	; 61
    4ce4:	de b7       	in	r29, 0x3e	; 62
    4ce6:	64 97       	sbiw	r28, 0x14	; 20
    4ce8:	0f b6       	in	r0, 0x3f	; 63
    4cea:	f8 94       	cli
    4cec:	de bf       	out	0x3e, r29	; 62
    4cee:	0f be       	out	0x3f, r0	; 63
    4cf0:	cd bf       	out	0x3d, r28	; 61
    4cf2:	2f 87       	std	Y+15, r18	; 0x0f
    4cf4:	38 8b       	std	Y+16, r19	; 0x10
    4cf6:	49 8b       	std	Y+17, r20	; 0x11
    4cf8:	5a 8b       	std	Y+18, r21	; 0x12
    4cfa:	36 2e       	mov	r3, r22
    4cfc:	27 2e       	mov	r2, r23
    4cfe:	8b 8b       	std	Y+19, r24	; 0x13
    4d00:	9c 8b       	std	Y+20, r25	; 0x14
    4d02:	1a 83       	std	Y+2, r17	; 0x02
    4d04:	09 83       	std	Y+1, r16	; 0x01
    4d06:	37 01       	movw	r6, r14
    4d08:	26 01       	movw	r4, r12
    4d0a:	bc 86       	std	Y+12, r11	; 0x0c
    4d0c:	ab 86       	std	Y+11, r10	; 0x0b
    if(!buffer || interval == 0 || length < interval || !callback)
    4d0e:	01 2b       	or	r16, r17
    4d10:	09 f4       	brne	.+2      	; 0x4d14 <sd_raw_read_interval+0x56>
    4d12:	53 c0       	rjmp	.+166    	; 0x4dba <sd_raw_read_interval+0xfc>
    4d14:	e1 14       	cp	r14, r1
    4d16:	f1 04       	cpc	r15, r1
    4d18:	09 f4       	brne	.+2      	; 0x4d1c <sd_raw_read_interval+0x5e>
    4d1a:	51 c0       	rjmp	.+162    	; 0x4dbe <sd_raw_read_interval+0x100>
    4d1c:	ce 14       	cp	r12, r14
    4d1e:	df 04       	cpc	r13, r15
    4d20:	08 f4       	brcc	.+2      	; 0x4d24 <sd_raw_read_interval+0x66>
    4d22:	4f c0       	rjmp	.+158    	; 0x4dc2 <sd_raw_read_interval+0x104>
    4d24:	ab 28       	or	r10, r11
    4d26:	09 f4       	brne	.+2      	; 0x4d2a <sd_raw_read_interval+0x6c>
    4d28:	4e c0       	rjmp	.+156    	; 0x4dc6 <sd_raw_read_interval+0x108>
         */
        if(!sd_raw_read(offset, buffer, interval))
            return 0;
        if(!callback(buffer, offset, p))
            break;
        offset += interval;
    4d2a:	97 01       	movw	r18, r14
    4d2c:	eb 82       	std	Y+3, r14	; 0x03
    4d2e:	3c 83       	std	Y+4, r19	; 0x04
    4d30:	9e 86       	std	Y+14, r9	; 0x0e
    4d32:	8d 86       	std	Y+13, r8	; 0x0d
    4d34:	af 84       	ldd	r10, Y+15	; 0x0f
    4d36:	b8 88       	ldd	r11, Y+16	; 0x10
    4d38:	c9 88       	ldd	r12, Y+17	; 0x11
    4d3a:	da 88       	ldd	r13, Y+18	; 0x12
    4d3c:	9b 88       	ldd	r9, Y+19	; 0x13
    4d3e:	8c 88       	ldd	r8, Y+20	; 0x14
    while(length >= interval)
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    4d40:	73 01       	movw	r14, r6
    4d42:	09 81       	ldd	r16, Y+1	; 0x01
    4d44:	1a 81       	ldd	r17, Y+2	; 0x02
    4d46:	2a 2d       	mov	r18, r10
    4d48:	3b 2d       	mov	r19, r11
    4d4a:	4c 2d       	mov	r20, r12
    4d4c:	5d 2d       	mov	r21, r13
    4d4e:	63 2d       	mov	r22, r3
    4d50:	72 2d       	mov	r23, r2
    4d52:	89 2d       	mov	r24, r9
    4d54:	98 2d       	mov	r25, r8
    4d56:	0e 94 2c 24 	call	0x4858	; 0x4858 <sd_raw_read>
    4d5a:	88 23       	and	r24, r24
    4d5c:	b9 f1       	breq	.+110    	; 0x4dcc <sd_raw_read_interval+0x10e>
            return 0;
        if(!callback(buffer, offset, p))
    4d5e:	ed 84       	ldd	r14, Y+13	; 0x0d
    4d60:	fe 84       	ldd	r15, Y+14	; 0x0e
    4d62:	0a 2d       	mov	r16, r10
    4d64:	1b 2d       	mov	r17, r11
    4d66:	2c 2d       	mov	r18, r12
    4d68:	3d 2d       	mov	r19, r13
    4d6a:	43 2d       	mov	r20, r3
    4d6c:	52 2d       	mov	r21, r2
    4d6e:	69 2d       	mov	r22, r9
    4d70:	78 2d       	mov	r23, r8
    4d72:	89 81       	ldd	r24, Y+1	; 0x01
    4d74:	9a 81       	ldd	r25, Y+2	; 0x02
    4d76:	eb 85       	ldd	r30, Y+11	; 0x0b
    4d78:	fc 85       	ldd	r31, Y+12	; 0x0c
    4d7a:	09 95       	icall
    4d7c:	88 23       	and	r24, r24
    4d7e:	29 f1       	breq	.+74     	; 0x4dca <sd_raw_read_interval+0x10c>
    4d80:	2b 81       	ldd	r18, Y+3	; 0x03
    4d82:	3c 81       	ldd	r19, Y+4	; 0x04
    4d84:	40 e0       	ldi	r20, 0x00	; 0
    4d86:	50 e0       	ldi	r21, 0x00	; 0
    4d88:	60 e0       	ldi	r22, 0x00	; 0
    4d8a:	70 e0       	ldi	r23, 0x00	; 0
    4d8c:	80 e0       	ldi	r24, 0x00	; 0
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
    4d90:	e3 2c       	mov	r14, r3
    4d92:	f2 2c       	mov	r15, r2
    4d94:	09 2d       	mov	r16, r9
    4d96:	18 2d       	mov	r17, r8
    4d98:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
    4d9c:	a2 2e       	mov	r10, r18
    4d9e:	b3 2e       	mov	r11, r19
    4da0:	c4 2e       	mov	r12, r20
    4da2:	d5 2e       	mov	r13, r21
    4da4:	36 2e       	mov	r3, r22
    4da6:	27 2e       	mov	r2, r23
    4da8:	98 2e       	mov	r9, r24
    4daa:	89 2e       	mov	r8, r25
            break;
        offset += interval;
        length -= interval;
    4dac:	46 18       	sub	r4, r6
    4dae:	57 08       	sbc	r5, r7
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    4db0:	46 14       	cp	r4, r6
    4db2:	57 04       	cpc	r5, r7
    4db4:	28 f6       	brcc	.-118    	; 0x4d40 <sd_raw_read_interval+0x82>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    4db6:	81 e0       	ldi	r24, 0x01	; 1
    4db8:	09 c0       	rjmp	.+18     	; 0x4dcc <sd_raw_read_interval+0x10e>
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;
    4dba:	80 e0       	ldi	r24, 0x00	; 0
    4dbc:	07 c0       	rjmp	.+14     	; 0x4dcc <sd_raw_read_interval+0x10e>
    4dbe:	80 e0       	ldi	r24, 0x00	; 0
    4dc0:	05 c0       	rjmp	.+10     	; 0x4dcc <sd_raw_read_interval+0x10e>
    4dc2:	80 e0       	ldi	r24, 0x00	; 0
    4dc4:	03 c0       	rjmp	.+6      	; 0x4dcc <sd_raw_read_interval+0x10e>
    4dc6:	80 e0       	ldi	r24, 0x00	; 0
    4dc8:	01 c0       	rjmp	.+2      	; 0x4dcc <sd_raw_read_interval+0x10e>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    4dca:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    4dcc:	64 96       	adiw	r28, 0x14	; 20
    4dce:	0f b6       	in	r0, 0x3f	; 63
    4dd0:	f8 94       	cli
    4dd2:	de bf       	out	0x3e, r29	; 62
    4dd4:	0f be       	out	0x3f, r0	; 63
    4dd6:	cd bf       	out	0x3d, r28	; 61
    4dd8:	df 91       	pop	r29
    4dda:	cf 91       	pop	r28
    4ddc:	1f 91       	pop	r17
    4dde:	0f 91       	pop	r16
    4de0:	ff 90       	pop	r15
    4de2:	ef 90       	pop	r14
    4de4:	df 90       	pop	r13
    4de6:	cf 90       	pop	r12
    4de8:	bf 90       	pop	r11
    4dea:	af 90       	pop	r10
    4dec:	9f 90       	pop	r9
    4dee:	8f 90       	pop	r8
    4df0:	7f 90       	pop	r7
    4df2:	6f 90       	pop	r6
    4df4:	5f 90       	pop	r5
    4df6:	4f 90       	pop	r4
    4df8:	3f 90       	pop	r3
    4dfa:	2f 90       	pop	r2
    4dfc:	08 95       	ret

00004dfe <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    4dfe:	2f 92       	push	r2
    4e00:	3f 92       	push	r3
    4e02:	4f 92       	push	r4
    4e04:	5f 92       	push	r5
    4e06:	6f 92       	push	r6
    4e08:	7f 92       	push	r7
    4e0a:	8f 92       	push	r8
    4e0c:	9f 92       	push	r9
    4e0e:	af 92       	push	r10
    4e10:	bf 92       	push	r11
    4e12:	cf 92       	push	r12
    4e14:	df 92       	push	r13
    4e16:	ef 92       	push	r14
    4e18:	ff 92       	push	r15
    4e1a:	0f 93       	push	r16
    4e1c:	1f 93       	push	r17
    4e1e:	cf 93       	push	r28
    4e20:	df 93       	push	r29
    4e22:	cd b7       	in	r28, 0x3d	; 61
    4e24:	de b7       	in	r29, 0x3e	; 62
    4e26:	69 97       	sbiw	r28, 0x19	; 25
    4e28:	0f b6       	in	r0, 0x3f	; 63
    4e2a:	f8 94       	cli
    4e2c:	de bf       	out	0x3e, r29	; 62
    4e2e:	0f be       	out	0x3f, r0	; 63
    4e30:	cd bf       	out	0x3d, r28	; 61
    4e32:	29 83       	std	Y+1, r18	; 0x01
    4e34:	3a 83       	std	Y+2, r19	; 0x02
    4e36:	4b 83       	std	Y+3, r20	; 0x03
    4e38:	5c 83       	std	Y+4, r21	; 0x04
    4e3a:	6d 83       	std	Y+5, r22	; 0x05
    4e3c:	7e 83       	std	Y+6, r23	; 0x06
    4e3e:	8f 83       	std	Y+7, r24	; 0x07
    4e40:	98 87       	std	Y+8, r25	; 0x08
    4e42:	38 01       	movw	r6, r16
    4e44:	27 01       	movw	r4, r14
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    4e46:	ef 28       	or	r14, r15
    4e48:	09 f4       	brne	.+2      	; 0x4e4c <sd_raw_write+0x4e>
    4e4a:	07 c1       	rjmp	.+526    	; 0x505a <sd_raw_write+0x25c>
    4e4c:	0f 2e       	mov	r0, r31
    4e4e:	fe e0       	ldi	r31, 0x0E	; 14
    4e50:	2f 2e       	mov	r2, r31
    4e52:	f4 e0       	ldi	r31, 0x04	; 4
    4e54:	3f 2e       	mov	r3, r31
    4e56:	f0 2d       	mov	r31, r0
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    4e58:	29 81       	ldd	r18, Y+1	; 0x01
    4e5a:	3a 81       	ldd	r19, Y+2	; 0x02
    4e5c:	31 70       	andi	r19, 0x01	; 1
    4e5e:	39 8f       	std	Y+25, r19	; 0x19
    4e60:	28 8f       	std	Y+24, r18	; 0x18
        block_address = offset - block_offset;
    4e62:	40 e0       	ldi	r20, 0x00	; 0
    4e64:	50 e0       	ldi	r21, 0x00	; 0
    4e66:	60 e0       	ldi	r22, 0x00	; 0
    4e68:	70 e0       	ldi	r23, 0x00	; 0
    4e6a:	cb 01       	movw	r24, r22
    4e6c:	29 87       	std	Y+9, r18	; 0x09
    4e6e:	3a 87       	std	Y+10, r19	; 0x0a
    4e70:	4b 87       	std	Y+11, r20	; 0x0b
    4e72:	5c 87       	std	Y+12, r21	; 0x0c
    4e74:	6d 87       	std	Y+13, r22	; 0x0d
    4e76:	7e 87       	std	Y+14, r23	; 0x0e
    4e78:	8f 87       	std	Y+15, r24	; 0x0f
    4e7a:	98 8b       	std	Y+16, r25	; 0x10
    4e7c:	29 81       	ldd	r18, Y+1	; 0x01
    4e7e:	3a 81       	ldd	r19, Y+2	; 0x02
    4e80:	4b 81       	ldd	r20, Y+3	; 0x03
    4e82:	5c 81       	ldd	r21, Y+4	; 0x04
    4e84:	6d 81       	ldd	r22, Y+5	; 0x05
    4e86:	7e 81       	ldd	r23, Y+6	; 0x06
    4e88:	8f 81       	ldd	r24, Y+7	; 0x07
    4e8a:	98 85       	ldd	r25, Y+8	; 0x08
    4e8c:	a9 84       	ldd	r10, Y+9	; 0x09
    4e8e:	ba 84       	ldd	r11, Y+10	; 0x0a
    4e90:	c1 2c       	mov	r12, r1
    4e92:	d1 2c       	mov	r13, r1
    4e94:	e1 2c       	mov	r14, r1
    4e96:	f1 2c       	mov	r15, r1
    4e98:	00 e0       	ldi	r16, 0x00	; 0
    4e9a:	10 e0       	ldi	r17, 0x00	; 0
    4e9c:	0e 94 97 2c 	call	0x592e	; 0x592e <__subdi3>
    4ea0:	29 87       	std	Y+9, r18	; 0x09
    4ea2:	39 8b       	std	Y+17, r19	; 0x11
    4ea4:	4a 8b       	std	Y+18, r20	; 0x12
    4ea6:	5b 8b       	std	Y+19, r21	; 0x13
    4ea8:	6c 8b       	std	Y+20, r22	; 0x14
    4eaa:	7d 8b       	std	Y+21, r23	; 0x15
    4eac:	8e 8b       	std	Y+22, r24	; 0x16
    4eae:	9f 8b       	std	Y+23, r25	; 0x17
    4eb0:	81 2c       	mov	r8, r1
    4eb2:	68 94       	set
    4eb4:	99 24       	eor	r9, r9
    4eb6:	91 f8       	bld	r9, 1
    4eb8:	68 8d       	ldd	r22, Y+24	; 0x18
    4eba:	79 8d       	ldd	r23, Y+25	; 0x19
    4ebc:	86 1a       	sub	r8, r22
    4ebe:	97 0a       	sbc	r9, r23
    4ec0:	48 14       	cp	r4, r8
    4ec2:	59 04       	cpc	r5, r9
    4ec4:	08 f4       	brcc	.+2      	; 0x4ec8 <sd_raw_write+0xca>
    4ec6:	42 01       	movw	r8, r4
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    4ec8:	a0 90 06 02 	lds	r10, 0x0206	; 0x800206 <raw_block_address>
    4ecc:	b0 90 07 02 	lds	r11, 0x0207	; 0x800207 <raw_block_address+0x1>
    4ed0:	c0 90 08 02 	lds	r12, 0x0208	; 0x800208 <raw_block_address+0x2>
    4ed4:	d0 90 09 02 	lds	r13, 0x0209	; 0x800209 <raw_block_address+0x3>
    4ed8:	e0 90 0a 02 	lds	r14, 0x020A	; 0x80020a <raw_block_address+0x4>
    4edc:	f0 90 0b 02 	lds	r15, 0x020B	; 0x80020b <raw_block_address+0x5>
    4ee0:	00 91 0c 02 	lds	r16, 0x020C	; 0x80020c <raw_block_address+0x6>
    4ee4:	10 91 0d 02 	lds	r17, 0x020D	; 0x80020d <raw_block_address+0x7>
    4ee8:	29 85       	ldd	r18, Y+9	; 0x09
    4eea:	39 89       	ldd	r19, Y+17	; 0x11
    4eec:	4a 89       	ldd	r20, Y+18	; 0x12
    4eee:	5b 89       	ldd	r21, Y+19	; 0x13
    4ef0:	6c 89       	ldd	r22, Y+20	; 0x14
    4ef2:	7d 89       	ldd	r23, Y+21	; 0x15
    4ef4:	8e 89       	ldd	r24, Y+22	; 0x16
    4ef6:	9f 89       	ldd	r25, Y+23	; 0x17
    4ef8:	0e 94 a0 2c 	call	0x5940	; 0x5940 <__cmpdi2>
    4efc:	c1 f1       	breq	.+112    	; 0x4f6e <sd_raw_write+0x170>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    4efe:	0e 94 00 24 	call	0x4800	; 0x4800 <sd_raw_sync>
    4f02:	88 23       	and	r24, r24
    4f04:	09 f4       	brne	.+2      	; 0x4f08 <sd_raw_write+0x10a>
    4f06:	ac c0       	rjmp	.+344    	; 0x5060 <sd_raw_write+0x262>
                return 0;
#endif

            if(block_offset || write_length < 512)
    4f08:	88 8d       	ldd	r24, Y+24	; 0x18
    4f0a:	99 8d       	ldd	r25, Y+25	; 0x19
    4f0c:	89 2b       	or	r24, r25
    4f0e:	21 f4       	brne	.+8      	; 0x4f18 <sd_raw_write+0x11a>
    4f10:	81 14       	cp	r8, r1
    4f12:	92 e0       	ldi	r25, 0x02	; 2
    4f14:	99 06       	cpc	r9, r25
    4f16:	98 f4       	brcc	.+38     	; 0x4f3e <sd_raw_write+0x140>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    4f18:	e1 2c       	mov	r14, r1
    4f1a:	68 94       	set
    4f1c:	ff 24       	eor	r15, r15
    4f1e:	f1 f8       	bld	r15, 1
    4f20:	0e e0       	ldi	r16, 0x0E	; 14
    4f22:	12 e0       	ldi	r17, 0x02	; 2
    4f24:	29 85       	ldd	r18, Y+9	; 0x09
    4f26:	39 89       	ldd	r19, Y+17	; 0x11
    4f28:	4a 89       	ldd	r20, Y+18	; 0x12
    4f2a:	5b 89       	ldd	r21, Y+19	; 0x13
    4f2c:	6c 89       	ldd	r22, Y+20	; 0x14
    4f2e:	7d 89       	ldd	r23, Y+21	; 0x15
    4f30:	8e 89       	ldd	r24, Y+22	; 0x16
    4f32:	9f 89       	ldd	r25, Y+23	; 0x17
    4f34:	0e 94 2c 24 	call	0x4858	; 0x4858 <sd_raw_read>
    4f38:	88 23       	and	r24, r24
    4f3a:	09 f4       	brne	.+2      	; 0x4f3e <sd_raw_write+0x140>
    4f3c:	91 c0       	rjmp	.+290    	; 0x5060 <sd_raw_write+0x262>
                    return 0;
            }
            raw_block_address = block_address;
    4f3e:	e9 85       	ldd	r30, Y+9	; 0x09
    4f40:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <raw_block_address>
    4f44:	f9 89       	ldd	r31, Y+17	; 0x11
    4f46:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <raw_block_address+0x1>
    4f4a:	2a 89       	ldd	r18, Y+18	; 0x12
    4f4c:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <raw_block_address+0x2>
    4f50:	3b 89       	ldd	r19, Y+19	; 0x13
    4f52:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <raw_block_address+0x3>
    4f56:	4c 89       	ldd	r20, Y+20	; 0x14
    4f58:	40 93 0a 02 	sts	0x020A, r20	; 0x80020a <raw_block_address+0x4>
    4f5c:	5d 89       	ldd	r21, Y+21	; 0x15
    4f5e:	50 93 0b 02 	sts	0x020B, r21	; 0x80020b <raw_block_address+0x5>
    4f62:	6e 89       	ldd	r22, Y+22	; 0x16
    4f64:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <raw_block_address+0x6>
    4f68:	7f 89       	ldd	r23, Y+23	; 0x17
    4f6a:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <raw_block_address+0x7>
        }

        if(buffer != raw_block)
    4f6e:	8e e0       	ldi	r24, 0x0E	; 14
    4f70:	68 16       	cp	r6, r24
    4f72:	82 e0       	ldi	r24, 0x02	; 2
    4f74:	78 06       	cpc	r7, r24
    4f76:	71 f0       	breq	.+28     	; 0x4f94 <sd_raw_write+0x196>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    4f78:	a4 01       	movw	r20, r8
    4f7a:	b3 01       	movw	r22, r6
    4f7c:	88 8d       	ldd	r24, Y+24	; 0x18
    4f7e:	99 8d       	ldd	r25, Y+25	; 0x19
    4f80:	82 5f       	subi	r24, 0xF2	; 242
    4f82:	9d 4f       	sbci	r25, 0xFD	; 253
    4f84:	0e 94 cc 2c 	call	0x5998	; 0x5998 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    4f88:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <raw_block_written>

            if(length == write_length)
    4f8c:	48 14       	cp	r4, r8
    4f8e:	59 04       	cpc	r5, r9
    4f90:	09 f4       	brne	.+2      	; 0x4f94 <sd_raw_write+0x196>
    4f92:	65 c0       	rjmp	.+202    	; 0x505e <sd_raw_write+0x260>
                return 1;
#endif
        }

        /* address card */
        select_card();
    4f94:	2a 98       	cbi	0x05, 2	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    4f96:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <sd_raw_card_type>
    4f9a:	82 ff       	sbrs	r24, 2
    4f9c:	10 c0       	rjmp	.+32     	; 0x4fbe <sd_raw_write+0x1c0>
    4f9e:	29 85       	ldd	r18, Y+9	; 0x09
    4fa0:	39 89       	ldd	r19, Y+17	; 0x11
    4fa2:	4a 89       	ldd	r20, Y+18	; 0x12
    4fa4:	5b 89       	ldd	r21, Y+19	; 0x13
    4fa6:	6c 89       	ldd	r22, Y+20	; 0x14
    4fa8:	7d 89       	ldd	r23, Y+21	; 0x15
    4faa:	8e 89       	ldd	r24, Y+22	; 0x16
    4fac:	9f 89       	ldd	r25, Y+23	; 0x17
    4fae:	09 e0       	ldi	r16, 0x09	; 9
    4fb0:	0e 94 66 2c 	call	0x58cc	; 0x58cc <__lshrdi3>
    4fb4:	64 2f       	mov	r22, r20
    4fb6:	75 2f       	mov	r23, r21
    4fb8:	42 2f       	mov	r20, r18
    4fba:	53 2f       	mov	r21, r19
    4fbc:	04 c0       	rjmp	.+8      	; 0x4fc6 <sd_raw_write+0x1c8>
    4fbe:	49 85       	ldd	r20, Y+9	; 0x09
    4fc0:	59 89       	ldd	r21, Y+17	; 0x11
    4fc2:	6a 89       	ldd	r22, Y+18	; 0x12
    4fc4:	7b 89       	ldd	r23, Y+19	; 0x13
    4fc6:	88 e1       	ldi	r24, 0x18	; 24
    4fc8:	0e 94 c4 23 	call	0x4788	; 0x4788 <sd_raw_send_command>
    4fcc:	88 23       	and	r24, r24
    4fce:	19 f0       	breq	.+6      	; 0x4fd6 <sd_raw_write+0x1d8>
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
#endif
        {
            unselect_card();
    4fd0:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    4fd2:	80 e0       	ldi	r24, 0x00	; 0
    4fd4:	45 c0       	rjmp	.+138    	; 0x5060 <sd_raw_write+0x262>
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);
    4fd6:	8e ef       	ldi	r24, 0xFE	; 254
    4fd8:	0e 94 b2 23 	call	0x4764	; 0x4764 <sd_raw_send_byte>
    4fdc:	0e e0       	ldi	r16, 0x0E	; 14
    4fde:	12 e0       	ldi	r17, 0x02	; 2

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    4fe0:	f8 01       	movw	r30, r16
    4fe2:	81 91       	ld	r24, Z+
    4fe4:	8f 01       	movw	r16, r30
    4fe6:	0e 94 b2 23 	call	0x4764	; 0x4764 <sd_raw_send_byte>
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    4fea:	02 15       	cp	r16, r2
    4fec:	13 05       	cpc	r17, r3
    4fee:	c1 f7       	brne	.-16     	; 0x4fe0 <sd_raw_write+0x1e2>
            sd_raw_send_byte(*cache++);

        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
    4ff0:	8f ef       	ldi	r24, 0xFF	; 255
    4ff2:	0e 94 b2 23 	call	0x4764	; 0x4764 <sd_raw_send_byte>
        sd_raw_send_byte(0xff);
    4ff6:	8f ef       	ldi	r24, 0xFF	; 255
    4ff8:	0e 94 b2 23 	call	0x4764	; 0x4764 <sd_raw_send_byte>

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    4ffc:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
    5000:	8f 3f       	cpi	r24, 0xFF	; 255
    5002:	e1 f7       	brne	.-8      	; 0x4ffc <sd_raw_write+0x1fe>
        sd_raw_rec_byte();
    5004:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>

        /* deaddress card */
        unselect_card();
    5008:	2a 9a       	sbi	0x05, 2	; 5

        buffer += write_length;
    500a:	68 0c       	add	r6, r8
    500c:	79 1c       	adc	r7, r9
        offset += write_length;
    500e:	54 01       	movw	r10, r8
    5010:	28 2d       	mov	r18, r8
    5012:	3b 2d       	mov	r19, r11
    5014:	40 e0       	ldi	r20, 0x00	; 0
    5016:	50 e0       	ldi	r21, 0x00	; 0
    5018:	60 e0       	ldi	r22, 0x00	; 0
    501a:	70 e0       	ldi	r23, 0x00	; 0
    501c:	80 e0       	ldi	r24, 0x00	; 0
    501e:	90 e0       	ldi	r25, 0x00	; 0
    5020:	a9 80       	ldd	r10, Y+1	; 0x01
    5022:	ba 80       	ldd	r11, Y+2	; 0x02
    5024:	cb 80       	ldd	r12, Y+3	; 0x03
    5026:	dc 80       	ldd	r13, Y+4	; 0x04
    5028:	ed 80       	ldd	r14, Y+5	; 0x05
    502a:	fe 80       	ldd	r15, Y+6	; 0x06
    502c:	0f 81       	ldd	r16, Y+7	; 0x07
    502e:	18 85       	ldd	r17, Y+8	; 0x08
    5030:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
    5034:	29 83       	std	Y+1, r18	; 0x01
    5036:	3a 83       	std	Y+2, r19	; 0x02
    5038:	4b 83       	std	Y+3, r20	; 0x03
    503a:	5c 83       	std	Y+4, r21	; 0x04
    503c:	6d 83       	std	Y+5, r22	; 0x05
    503e:	7e 83       	std	Y+6, r23	; 0x06
    5040:	8f 83       	std	Y+7, r24	; 0x07
    5042:	98 87       	std	Y+8, r25	; 0x08
        length -= write_length;
    5044:	48 18       	sub	r4, r8
    5046:	59 08       	sbc	r5, r9

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    5048:	f1 e0       	ldi	r31, 0x01	; 1
    504a:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <raw_block_written>
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    504e:	41 14       	cp	r4, r1
    5050:	51 04       	cpc	r5, r1
    5052:	09 f0       	breq	.+2      	; 0x5056 <sd_raw_write+0x258>
    5054:	01 cf       	rjmp	.-510    	; 0x4e58 <sd_raw_write+0x5a>
#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
#endif
    }

    return 1;
    5056:	81 e0       	ldi	r24, 0x01	; 1
    5058:	03 c0       	rjmp	.+6      	; 0x5060 <sd_raw_write+0x262>
    505a:	81 e0       	ldi	r24, 0x01	; 1
    505c:	01 c0       	rjmp	.+2      	; 0x5060 <sd_raw_write+0x262>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;

            if(length == write_length)
                return 1;
    505e:	81 e0       	ldi	r24, 0x01	; 1
        raw_block_written = 1;
#endif
    }

    return 1;
}
    5060:	69 96       	adiw	r28, 0x19	; 25
    5062:	0f b6       	in	r0, 0x3f	; 63
    5064:	f8 94       	cli
    5066:	de bf       	out	0x3e, r29	; 62
    5068:	0f be       	out	0x3f, r0	; 63
    506a:	cd bf       	out	0x3d, r28	; 61
    506c:	df 91       	pop	r29
    506e:	cf 91       	pop	r28
    5070:	1f 91       	pop	r17
    5072:	0f 91       	pop	r16
    5074:	ff 90       	pop	r15
    5076:	ef 90       	pop	r14
    5078:	df 90       	pop	r13
    507a:	cf 90       	pop	r12
    507c:	bf 90       	pop	r11
    507e:	af 90       	pop	r10
    5080:	9f 90       	pop	r9
    5082:	8f 90       	pop	r8
    5084:	7f 90       	pop	r7
    5086:	6f 90       	pop	r6
    5088:	5f 90       	pop	r5
    508a:	4f 90       	pop	r4
    508c:	3f 90       	pop	r3
    508e:	2f 90       	pop	r2
    5090:	08 95       	ret

00005092 <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    5092:	2f 92       	push	r2
    5094:	3f 92       	push	r3
    5096:	4f 92       	push	r4
    5098:	5f 92       	push	r5
    509a:	6f 92       	push	r6
    509c:	7f 92       	push	r7
    509e:	8f 92       	push	r8
    50a0:	9f 92       	push	r9
    50a2:	af 92       	push	r10
    50a4:	bf 92       	push	r11
    50a6:	cf 92       	push	r12
    50a8:	df 92       	push	r13
    50aa:	ef 92       	push	r14
    50ac:	ff 92       	push	r15
    50ae:	0f 93       	push	r16
    50b0:	1f 93       	push	r17
    50b2:	cf 93       	push	r28
    50b4:	df 93       	push	r29
    50b6:	cd b7       	in	r28, 0x3d	; 61
    50b8:	de b7       	in	r29, 0x3e	; 62
    50ba:	28 97       	sbiw	r28, 0x08	; 8
    50bc:	0f b6       	in	r0, 0x3f	; 63
    50be:	f8 94       	cli
    50c0:	de bf       	out	0x3e, r29	; 62
    50c2:	0f be       	out	0x3f, r0	; 63
    50c4:	cd bf       	out	0x3d, r28	; 61
    50c6:	56 2e       	mov	r5, r22
    50c8:	47 2e       	mov	r4, r23
    50ca:	1a 83       	std	Y+2, r17	; 0x02
    50cc:	09 83       	std	Y+1, r16	; 0x01
    50ce:	dc 82       	std	Y+4, r13	; 0x04
    50d0:	cb 82       	std	Y+3, r12	; 0x03
    50d2:	be 82       	std	Y+6, r11	; 0x06
    50d4:	ad 82       	std	Y+5, r10	; 0x05
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    50d6:	01 2b       	or	r16, r17
    50d8:	09 f4       	brne	.+2      	; 0x50dc <sd_raw_write_interval+0x4a>
    50da:	48 c0       	rjmp	.+144    	; 0x516c <sd_raw_write_interval+0xda>
    50dc:	cd 28       	or	r12, r13
    50de:	09 f4       	brne	.+2      	; 0x50e2 <sd_raw_write_interval+0x50>
    50e0:	47 c0       	rjmp	.+142    	; 0x5170 <sd_raw_write_interval+0xde>
    50e2:	f8 86       	std	Y+8, r15	; 0x08
    50e4:	ef 82       	std	Y+7, r14	; 0x07
    50e6:	a2 2e       	mov	r10, r18
    50e8:	b3 2e       	mov	r11, r19
    50ea:	c4 2e       	mov	r12, r20
    50ec:	d5 2e       	mov	r13, r21
    50ee:	98 2e       	mov	r9, r24
    50f0:	89 2e       	mov	r8, r25
    50f2:	17 01       	movw	r2, r14
    50f4:	32 c0       	rjmp	.+100    	; 0x515a <sd_raw_write_interval+0xc8>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
    50f6:	8f 81       	ldd	r24, Y+7	; 0x07
    50f8:	98 85       	ldd	r25, Y+8	; 0x08
    50fa:	86 15       	cp	r24, r6
    50fc:	97 05       	cpc	r25, r7
    50fe:	d0 f1       	brcs	.+116    	; 0x5174 <sd_raw_write_interval+0xe2>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    5100:	73 01       	movw	r14, r6
    5102:	09 81       	ldd	r16, Y+1	; 0x01
    5104:	1a 81       	ldd	r17, Y+2	; 0x02
    5106:	2a 2d       	mov	r18, r10
    5108:	3b 2d       	mov	r19, r11
    510a:	4c 2d       	mov	r20, r12
    510c:	5d 2d       	mov	r21, r13
    510e:	65 2d       	mov	r22, r5
    5110:	74 2d       	mov	r23, r4
    5112:	89 2d       	mov	r24, r9
    5114:	98 2d       	mov	r25, r8
    5116:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <sd_raw_write>
    511a:	88 23       	and	r24, r24
    511c:	09 f4       	brne	.+2      	; 0x5120 <sd_raw_write_interval+0x8e>
    511e:	58 c0       	rjmp	.+176    	; 0x51d0 <sd_raw_write_interval+0x13e>
            return 0;

        offset += bytes_to_write;
    5120:	a3 01       	movw	r20, r6
    5122:	26 2d       	mov	r18, r6
    5124:	35 2f       	mov	r19, r21
    5126:	40 e0       	ldi	r20, 0x00	; 0
    5128:	50 e0       	ldi	r21, 0x00	; 0
    512a:	60 e0       	ldi	r22, 0x00	; 0
    512c:	70 e0       	ldi	r23, 0x00	; 0
    512e:	80 e0       	ldi	r24, 0x00	; 0
    5130:	90 e0       	ldi	r25, 0x00	; 0
    5132:	e5 2c       	mov	r14, r5
    5134:	f4 2c       	mov	r15, r4
    5136:	09 2d       	mov	r16, r9
    5138:	18 2d       	mov	r17, r8
    513a:	0e 94 82 2c 	call	0x5904	; 0x5904 <__adddi3>
    513e:	a2 2e       	mov	r10, r18
    5140:	b3 2e       	mov	r11, r19
    5142:	c4 2e       	mov	r12, r20
    5144:	d5 2e       	mov	r13, r21
    5146:	56 2e       	mov	r5, r22
    5148:	47 2e       	mov	r4, r23
    514a:	98 2e       	mov	r9, r24
    514c:	89 2e       	mov	r8, r25
        length -= bytes_to_write;
    514e:	ef 81       	ldd	r30, Y+7	; 0x07
    5150:	f8 85       	ldd	r31, Y+8	; 0x08
    5152:	e6 19       	sub	r30, r6
    5154:	f7 09       	sbc	r31, r7
    5156:	f8 87       	std	Y+8, r31	; 0x08
    5158:	ef 83       	std	Y+7, r30	; 0x07

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    515a:	21 14       	cp	r2, r1
    515c:	31 04       	cpc	r3, r1
    515e:	21 f1       	breq	.+72     	; 0x51a8 <sd_raw_write_interval+0x116>
    5160:	8f 81       	ldd	r24, Y+7	; 0x07
    5162:	98 85       	ldd	r25, Y+8	; 0x08
    5164:	89 2b       	or	r24, r25
    5166:	61 f4       	brne	.+24     	; 0x5180 <sd_raw_write_interval+0xee>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    5168:	81 e0       	ldi	r24, 0x01	; 1
    516a:	32 c0       	rjmp	.+100    	; 0x51d0 <sd_raw_write_interval+0x13e>
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
        return 0;
    516c:	80 e0       	ldi	r24, 0x00	; 0
    516e:	30 c0       	rjmp	.+96     	; 0x51d0 <sd_raw_write_interval+0x13e>
    5170:	80 e0       	ldi	r24, 0x00	; 0
    5172:	2e c0       	rjmp	.+92     	; 0x51d0 <sd_raw_write_interval+0x13e>
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
            return 0;
    5174:	80 e0       	ldi	r24, 0x00	; 0
    5176:	2c c0       	rjmp	.+88     	; 0x51d0 <sd_raw_write_interval+0x13e>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    5178:	81 e0       	ldi	r24, 0x01	; 1
    517a:	2a c0       	rjmp	.+84     	; 0x51d0 <sd_raw_write_interval+0x13e>
    517c:	81 e0       	ldi	r24, 0x01	; 1
    517e:	28 c0       	rjmp	.+80     	; 0x51d0 <sd_raw_write_interval+0x13e>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    5180:	ed 80       	ldd	r14, Y+5	; 0x05
    5182:	fe 80       	ldd	r15, Y+6	; 0x06
    5184:	0a 2d       	mov	r16, r10
    5186:	1b 2d       	mov	r17, r11
    5188:	2c 2d       	mov	r18, r12
    518a:	3d 2d       	mov	r19, r13
    518c:	45 2d       	mov	r20, r5
    518e:	54 2d       	mov	r21, r4
    5190:	69 2d       	mov	r22, r9
    5192:	78 2d       	mov	r23, r8
    5194:	89 81       	ldd	r24, Y+1	; 0x01
    5196:	9a 81       	ldd	r25, Y+2	; 0x02
    5198:	eb 81       	ldd	r30, Y+3	; 0x03
    519a:	fc 81       	ldd	r31, Y+4	; 0x04
    519c:	09 95       	icall
    519e:	3c 01       	movw	r6, r24
        if(!bytes_to_write)
    51a0:	89 2b       	or	r24, r25
    51a2:	09 f0       	breq	.+2      	; 0x51a6 <sd_raw_write_interval+0x114>
    51a4:	a8 cf       	rjmp	.-176    	; 0x50f6 <sd_raw_write_interval+0x64>
    51a6:	e8 cf       	rjmp	.-48     	; 0x5178 <sd_raw_write_interval+0xe6>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    51a8:	ed 80       	ldd	r14, Y+5	; 0x05
    51aa:	fe 80       	ldd	r15, Y+6	; 0x06
    51ac:	0a 2d       	mov	r16, r10
    51ae:	1b 2d       	mov	r17, r11
    51b0:	2c 2d       	mov	r18, r12
    51b2:	3d 2d       	mov	r19, r13
    51b4:	45 2d       	mov	r20, r5
    51b6:	54 2d       	mov	r21, r4
    51b8:	69 2d       	mov	r22, r9
    51ba:	78 2d       	mov	r23, r8
    51bc:	89 81       	ldd	r24, Y+1	; 0x01
    51be:	9a 81       	ldd	r25, Y+2	; 0x02
    51c0:	eb 81       	ldd	r30, Y+3	; 0x03
    51c2:	fc 81       	ldd	r31, Y+4	; 0x04
    51c4:	09 95       	icall
    51c6:	3c 01       	movw	r6, r24
        if(!bytes_to_write)
    51c8:	89 2b       	or	r24, r25
    51ca:	09 f0       	breq	.+2      	; 0x51ce <sd_raw_write_interval+0x13c>
    51cc:	99 cf       	rjmp	.-206    	; 0x5100 <sd_raw_write_interval+0x6e>
    51ce:	d6 cf       	rjmp	.-84     	; 0x517c <sd_raw_write_interval+0xea>
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    51d0:	28 96       	adiw	r28, 0x08	; 8
    51d2:	0f b6       	in	r0, 0x3f	; 63
    51d4:	f8 94       	cli
    51d6:	de bf       	out	0x3e, r29	; 62
    51d8:	0f be       	out	0x3f, r0	; 63
    51da:	cd bf       	out	0x3d, r28	; 61
    51dc:	df 91       	pop	r29
    51de:	cf 91       	pop	r28
    51e0:	1f 91       	pop	r17
    51e2:	0f 91       	pop	r16
    51e4:	ff 90       	pop	r15
    51e6:	ef 90       	pop	r14
    51e8:	df 90       	pop	r13
    51ea:	cf 90       	pop	r12
    51ec:	bf 90       	pop	r11
    51ee:	af 90       	pop	r10
    51f0:	9f 90       	pop	r9
    51f2:	8f 90       	pop	r8
    51f4:	7f 90       	pop	r7
    51f6:	6f 90       	pop	r6
    51f8:	5f 90       	pop	r5
    51fa:	4f 90       	pop	r4
    51fc:	3f 90       	pop	r3
    51fe:	2f 90       	pop	r2
    5200:	08 95       	ret

00005202 <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    5202:	9f 92       	push	r9
    5204:	af 92       	push	r10
    5206:	bf 92       	push	r11
    5208:	cf 92       	push	r12
    520a:	df 92       	push	r13
    520c:	ef 92       	push	r14
    520e:	ff 92       	push	r15
    5210:	0f 93       	push	r16
    5212:	1f 93       	push	r17
    5214:	cf 93       	push	r28
    5216:	df 93       	push	r29
    if(!info || !sd_raw_available())
    5218:	00 97       	sbiw	r24, 0x00	; 0
    521a:	09 f4       	brne	.+2      	; 0x521e <sd_raw_get_info+0x1c>
    521c:	24 c1       	rjmp	.+584    	; 0x5466 <sd_raw_get_info+0x264>
    521e:	7c 01       	movw	r14, r24
        return 0;

    memset(info, 0, sizeof(*info));
    5220:	8d e1       	ldi	r24, 0x1D	; 29
    5222:	f7 01       	movw	r30, r14
    5224:	11 92       	st	Z+, r1
    5226:	8a 95       	dec	r24
    5228:	e9 f7       	brne	.-6      	; 0x5224 <sd_raw_get_info+0x22>

    select_card();
    522a:	2a 98       	cbi	0x05, 2	; 5

    /* read cid register */
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    522c:	40 e0       	ldi	r20, 0x00	; 0
    522e:	50 e0       	ldi	r21, 0x00	; 0
    5230:	ba 01       	movw	r22, r20
    5232:	8a e0       	ldi	r24, 0x0A	; 10
    5234:	0e 94 c4 23 	call	0x4788	; 0x4788 <sd_raw_send_command>
    5238:	c8 2e       	mov	r12, r24
    523a:	88 23       	and	r24, r24
    523c:	19 f0       	breq	.+6      	; 0x5244 <sd_raw_get_info+0x42>
    {
        unselect_card();
    523e:	2a 9a       	sbi	0x05, 2	; 5
        return 0;
    5240:	c1 2c       	mov	r12, r1
    5242:	12 c1       	rjmp	.+548    	; 0x5468 <sd_raw_get_info+0x266>
    }
    while(sd_raw_rec_byte() != 0xfe);
    5244:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
    5248:	8e 3f       	cpi	r24, 0xFE	; 254
    524a:	e1 f7       	brne	.-8      	; 0x5244 <sd_raw_get_info+0x42>
    524c:	e7 01       	movw	r28, r14
    524e:	21 96       	adiw	r28, 0x01	; 1
    5250:	00 e6       	ldi	r16, 0x60	; 96
    5252:	10 e0       	ldi	r17, 0x00	; 0
    5254:	dd 24       	eor	r13, r13
    5256:	d3 94       	inc	r13
    5258:	04 c0       	rjmp	.+8      	; 0x5262 <sd_raw_get_info+0x60>
    525a:	d3 94       	inc	r13
    525c:	08 50       	subi	r16, 0x08	; 8
    525e:	11 09       	sbc	r17, r1
    5260:	21 96       	adiw	r28, 0x01	; 1
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();
    5262:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
    5266:	ef ef       	ldi	r30, 0xFF	; 255
    5268:	ed 0d       	add	r30, r13

        switch(i)
    526a:	4e 2f       	mov	r20, r30
    526c:	50 e0       	ldi	r21, 0x00	; 0
    526e:	4f 30       	cpi	r20, 0x0F	; 15
    5270:	51 05       	cpc	r21, r1
    5272:	c8 f5       	brcc	.+114    	; 0x52e6 <sd_raw_get_info+0xe4>
    5274:	fa 01       	movw	r30, r20
    5276:	ec 5c       	subi	r30, 0xCC	; 204
    5278:	ff 4f       	sbci	r31, 0xFF	; 255
    527a:	0c 94 d2 2b 	jmp	0x57a4	; 0x57a4 <__tablejump2__>
        {
            case 0:
                info->manufacturer = b;
    527e:	f7 01       	movw	r30, r14
    5280:	80 83       	st	Z, r24
                break;
    5282:	eb cf       	rjmp	.-42     	; 0x525a <sd_raw_get_info+0x58>
    5284:	fe 01       	movw	r30, r28
    5286:	31 97       	sbiw	r30, 0x01	; 1
            case 1:
            case 2:
                info->oem[i - 1] = b;
    5288:	80 83       	st	Z, r24
                break;
    528a:	2d c0       	rjmp	.+90     	; 0x52e6 <sd_raw_get_info+0xe4>
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
    528c:	88 83       	st	Y, r24
                break;
    528e:	2b c0       	rjmp	.+86     	; 0x52e6 <sd_raw_get_info+0xe4>
            case 8:
                info->revision = b;
    5290:	f7 01       	movw	r30, r14
    5292:	82 87       	std	Z+10, r24	; 0x0a
                break;
    5294:	e2 cf       	rjmp	.-60     	; 0x525a <sd_raw_get_info+0x58>
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (uint32_t) b << ((12 - i) * 8);
    5296:	90 e0       	ldi	r25, 0x00	; 0
    5298:	a0 e0       	ldi	r26, 0x00	; 0
    529a:	b0 e0       	ldi	r27, 0x00	; 0
    529c:	00 2e       	mov	r0, r16
    529e:	04 c0       	rjmp	.+8      	; 0x52a8 <sd_raw_get_info+0xa6>
    52a0:	88 0f       	add	r24, r24
    52a2:	99 1f       	adc	r25, r25
    52a4:	aa 1f       	adc	r26, r26
    52a6:	bb 1f       	adc	r27, r27
    52a8:	0a 94       	dec	r0
    52aa:	d2 f7       	brpl	.-12     	; 0x52a0 <sd_raw_get_info+0x9e>
    52ac:	f7 01       	movw	r30, r14
    52ae:	43 85       	ldd	r20, Z+11	; 0x0b
    52b0:	54 85       	ldd	r21, Z+12	; 0x0c
    52b2:	65 85       	ldd	r22, Z+13	; 0x0d
    52b4:	76 85       	ldd	r23, Z+14	; 0x0e
    52b6:	84 2b       	or	r24, r20
    52b8:	95 2b       	or	r25, r21
    52ba:	a6 2b       	or	r26, r22
    52bc:	b7 2b       	or	r27, r23
    52be:	83 87       	std	Z+11, r24	; 0x0b
    52c0:	94 87       	std	Z+12, r25	; 0x0c
    52c2:	a5 87       	std	Z+13, r26	; 0x0d
    52c4:	b6 87       	std	Z+14, r27	; 0x0e
                break;
    52c6:	0f c0       	rjmp	.+30     	; 0x52e6 <sd_raw_get_info+0xe4>
            case 13:
                info->manufacturing_year = b << 4;
    52c8:	82 95       	swap	r24
    52ca:	80 7f       	andi	r24, 0xF0	; 240
    52cc:	f7 01       	movw	r30, r14
    52ce:	87 87       	std	Z+15, r24	; 0x0f
                break;
    52d0:	c4 cf       	rjmp	.-120    	; 0x525a <sd_raw_get_info+0x58>
            case 14:
                info->manufacturing_year |= b >> 4;
    52d2:	98 2f       	mov	r25, r24
    52d4:	92 95       	swap	r25
    52d6:	9f 70       	andi	r25, 0x0F	; 15
    52d8:	f7 01       	movw	r30, r14
    52da:	27 85       	ldd	r18, Z+15	; 0x0f
    52dc:	92 2b       	or	r25, r18
    52de:	97 87       	std	Z+15, r25	; 0x0f
                info->manufacturing_month = b & 0x0f;
    52e0:	8f 70       	andi	r24, 0x0F	; 15
    52e2:	80 8b       	std	Z+16, r24	; 0x10
                break;
    52e4:	ba cf       	rjmp	.-140    	; 0x525a <sd_raw_get_info+0x58>
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    52e6:	f1 e1       	ldi	r31, 0x11	; 17
    52e8:	fd 15       	cp	r31, r13
    52ea:	08 f0       	brcs	.+2      	; 0x52ee <sd_raw_get_info+0xec>
    52ec:	b6 cf       	rjmp	.-148    	; 0x525a <sd_raw_get_info+0x58>
    uint16_t csd_c_size = 0;
#else
    uint32_t csd_c_size = 0;
#endif
    uint8_t csd_structure = 0;
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    52ee:	40 e0       	ldi	r20, 0x00	; 0
    52f0:	50 e0       	ldi	r21, 0x00	; 0
    52f2:	ba 01       	movw	r22, r20
    52f4:	89 e0       	ldi	r24, 0x09	; 9
    52f6:	0e 94 c4 23 	call	0x4788	; 0x4788 <sd_raw_send_command>
    52fa:	c8 2f       	mov	r28, r24
    52fc:	88 23       	and	r24, r24
    52fe:	11 f0       	breq	.+4      	; 0x5304 <sd_raw_get_info+0x102>
    {
        unselect_card();
    5300:	2a 9a       	sbi	0x05, 2	; 5
        return 0;
    5302:	b2 c0       	rjmp	.+356    	; 0x5468 <sd_raw_get_info+0x266>
    }
    while(sd_raw_rec_byte() != 0xfe);
    5304:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>
    5308:	8e 3f       	cpi	r24, 0xFE	; 254
    530a:	e1 f7       	brne	.-8      	; 0x5304 <sd_raw_get_info+0x102>
    530c:	d1 e0       	ldi	r29, 0x01	; 1
    530e:	10 e0       	ldi	r17, 0x00	; 0
    5310:	c1 2c       	mov	r12, r1
    5312:	d1 2c       	mov	r13, r1
    5314:	b1 2c       	mov	r11, r1
    5316:	a1 2c       	mov	r10, r1
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
    5318:	99 24       	eor	r9, r9
    531a:	93 94       	inc	r9
    531c:	02 c0       	rjmp	.+4      	; 0x5322 <sd_raw_get_info+0x120>
    531e:	cf 5f       	subi	r28, 0xFF	; 255
    5320:	df 5f       	subi	r29, 0xFF	; 255
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();
    5322:	0e 94 ba 23 	call	0x4774	; 0x4774 <sd_raw_rec_byte>

        if(i == 0)
    5326:	c1 11       	cpse	r28, r1
    5328:	06 c0       	rjmp	.+12     	; 0x5336 <sd_raw_get_info+0x134>
        {
            csd_structure = b >> 6;
    532a:	18 2f       	mov	r17, r24
    532c:	12 95       	swap	r17
    532e:	16 95       	lsr	r17
    5330:	16 95       	lsr	r17
    5332:	13 70       	andi	r17, 0x03	; 3
    5334:	f4 cf       	rjmp	.-24     	; 0x531e <sd_raw_get_info+0x11c>
        }
        else if(i == 14)
    5336:	ce 30       	cpi	r28, 0x0E	; 14
    5338:	b1 f4       	brne	.+44     	; 0x5366 <sd_raw_get_info+0x164>
        {
            if(b & 0x40)
    533a:	86 ff       	sbrs	r24, 6
    533c:	02 c0       	rjmp	.+4      	; 0x5342 <sd_raw_get_info+0x140>
                info->flag_copy = 1;
    533e:	f7 01       	movw	r30, r14
    5340:	91 8e       	std	Z+25, r9	; 0x19
            if(b & 0x20)
    5342:	85 ff       	sbrs	r24, 5
    5344:	02 c0       	rjmp	.+4      	; 0x534a <sd_raw_get_info+0x148>
                info->flag_write_protect = 1;
    5346:	f7 01       	movw	r30, r14
    5348:	92 8e       	std	Z+26, r9	; 0x1a
            if(b & 0x10)
    534a:	84 ff       	sbrs	r24, 4
    534c:	02 c0       	rjmp	.+4      	; 0x5352 <sd_raw_get_info+0x150>
                info->flag_write_protect_temp = 1;
    534e:	f7 01       	movw	r30, r14
    5350:	93 8e       	std	Z+27, r9	; 0x1b
            info->format = (b & 0x0c) >> 2;
    5352:	48 2f       	mov	r20, r24
    5354:	4c 70       	andi	r20, 0x0C	; 12
    5356:	50 e0       	ldi	r21, 0x00	; 0
    5358:	55 95       	asr	r21
    535a:	47 95       	ror	r20
    535c:	55 95       	asr	r21
    535e:	47 95       	ror	r20
    5360:	f7 01       	movw	r30, r14
    5362:	44 8f       	std	Z+28, r20	; 0x1c
    5364:	dc cf       	rjmp	.-72     	; 0x531e <sd_raw_get_info+0x11c>
        }
        else
        {
#if SD_RAW_SDHC
            if(csd_structure == 0x01)
    5366:	11 30       	cpi	r17, 0x01	; 1
    5368:	39 f5       	brne	.+78     	; 0x53b8 <sd_raw_get_info+0x1b6>
            {
                switch(i)
    536a:	c7 30       	cpi	r28, 0x07	; 7
    536c:	21 f0       	breq	.+8      	; 0x5376 <sd_raw_get_info+0x174>
    536e:	40 f0       	brcs	.+16     	; 0x5380 <sd_raw_get_info+0x17e>
    5370:	ca 30       	cpi	r28, 0x0A	; 10
    5372:	10 f0       	brcs	.+4      	; 0x5378 <sd_raw_get_info+0x176>
    5374:	05 c0       	rjmp	.+10     	; 0x5380 <sd_raw_get_info+0x17e>
                {
                    case 7:
                        b &= 0x3f;
    5376:	8f 73       	andi	r24, 0x3F	; 63
                    case 8:
                    case 9:
                        csd_c_size <<= 8;
    5378:	3c 2d       	mov	r19, r12
    537a:	22 27       	eor	r18, r18
                        csd_c_size |= b;
    537c:	69 01       	movw	r12, r18
    537e:	c8 2a       	or	r12, r24
                        break;
                }
                if(i == 9)
    5380:	c9 30       	cpi	r28, 0x09	; 9
    5382:	09 f0       	breq	.+2      	; 0x5386 <sd_raw_get_info+0x184>
    5384:	69 c0       	rjmp	.+210    	; 0x5458 <sd_raw_get_info+0x256>
                {
                    ++csd_c_size;
    5386:	ff ef       	ldi	r31, 0xFF	; 255
    5388:	cf 1a       	sub	r12, r31
    538a:	df 0a       	sbc	r13, r31
                    info->capacity = (offset_t) csd_c_size * 512 * 1024;
    538c:	a6 01       	movw	r20, r12
    538e:	2c 2d       	mov	r18, r12
    5390:	35 2f       	mov	r19, r21
    5392:	40 e0       	ldi	r20, 0x00	; 0
    5394:	50 e0       	ldi	r21, 0x00	; 0
    5396:	60 e0       	ldi	r22, 0x00	; 0
    5398:	70 e0       	ldi	r23, 0x00	; 0
    539a:	80 e0       	ldi	r24, 0x00	; 0
    539c:	90 e0       	ldi	r25, 0x00	; 0
    539e:	03 e1       	ldi	r16, 0x13	; 19
    53a0:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__ashldi3>
    53a4:	f7 01       	movw	r30, r14
    53a6:	21 8b       	std	Z+17, r18	; 0x11
    53a8:	32 8b       	std	Z+18, r19	; 0x12
    53aa:	43 8b       	std	Z+19, r20	; 0x13
    53ac:	54 8b       	std	Z+20, r21	; 0x14
    53ae:	65 8b       	std	Z+21, r22	; 0x15
    53b0:	76 8b       	std	Z+22, r23	; 0x16
    53b2:	87 8b       	std	Z+23, r24	; 0x17
    53b4:	90 8f       	std	Z+24, r25	; 0x18
    53b6:	b3 cf       	rjmp	.-154    	; 0x531e <sd_raw_get_info+0x11c>
                }
            }
            else if(csd_structure == 0x00)
    53b8:	11 11       	cpse	r17, r1
    53ba:	4e c0       	rjmp	.+156    	; 0x5458 <sd_raw_get_info+0x256>
#endif
            {
                switch(i)
    53bc:	c7 30       	cpi	r28, 0x07	; 7
    53be:	a9 f0       	breq	.+42     	; 0x53ea <sd_raw_get_info+0x1e8>
    53c0:	28 f4       	brcc	.+10     	; 0x53cc <sd_raw_get_info+0x1ca>
    53c2:	c5 30       	cpi	r28, 0x05	; 5
    53c4:	49 f0       	breq	.+18     	; 0x53d8 <sd_raw_get_info+0x1d6>
    53c6:	c6 30       	cpi	r28, 0x06	; 6
    53c8:	51 f0       	breq	.+20     	; 0x53de <sd_raw_get_info+0x1dc>
    53ca:	46 c0       	rjmp	.+140    	; 0x5458 <sd_raw_get_info+0x256>
    53cc:	c9 30       	cpi	r28, 0x09	; 9
    53ce:	01 f1       	breq	.+64     	; 0x5410 <sd_raw_get_info+0x20e>
    53d0:	a0 f0       	brcs	.+40     	; 0x53fa <sd_raw_get_info+0x1f8>
    53d2:	ca 30       	cpi	r28, 0x0A	; 10
    53d4:	09 f1       	breq	.+66     	; 0x5418 <sd_raw_get_info+0x216>
    53d6:	40 c0       	rjmp	.+128    	; 0x5458 <sd_raw_get_info+0x256>
                {
                    case 5:
                        csd_read_bl_len = b & 0x0f;
    53d8:	8f 70       	andi	r24, 0x0F	; 15
    53da:	a8 2e       	mov	r10, r24
                        break;
    53dc:	a0 cf       	rjmp	.-192    	; 0x531e <sd_raw_get_info+0x11c>
                    case 6:
                        csd_c_size = b & 0x03;
    53de:	83 70       	andi	r24, 0x03	; 3
    53e0:	28 2f       	mov	r18, r24
    53e2:	30 e0       	ldi	r19, 0x00	; 0
                        csd_c_size <<= 8;
    53e4:	d2 2e       	mov	r13, r18
    53e6:	cc 24       	eor	r12, r12
                        break;
    53e8:	9a cf       	rjmp	.-204    	; 0x531e <sd_raw_get_info+0x11c>
                    case 7:
                        csd_c_size |= b;
    53ea:	96 01       	movw	r18, r12
    53ec:	28 2b       	or	r18, r24
                        csd_c_size <<= 2;
    53ee:	69 01       	movw	r12, r18
    53f0:	cc 0c       	add	r12, r12
    53f2:	dd 1c       	adc	r13, r13
    53f4:	cc 0c       	add	r12, r12
    53f6:	dd 1c       	adc	r13, r13
                        break;
    53f8:	92 cf       	rjmp	.-220    	; 0x531e <sd_raw_get_info+0x11c>
                    case 8:
                        csd_c_size |= b >> 6;
    53fa:	82 95       	swap	r24
    53fc:	86 95       	lsr	r24
    53fe:	86 95       	lsr	r24
    5400:	83 70       	andi	r24, 0x03	; 3
    5402:	96 01       	movw	r18, r12
    5404:	28 2b       	or	r18, r24
                        ++csd_c_size;
    5406:	69 01       	movw	r12, r18
    5408:	ff ef       	ldi	r31, 0xFF	; 255
    540a:	cf 1a       	sub	r12, r31
    540c:	df 0a       	sbc	r13, r31
                        break;
    540e:	87 cf       	rjmp	.-242    	; 0x531e <sd_raw_get_info+0x11c>
                    case 9:
                        csd_c_size_mult = b & 0x03;
    5410:	83 70       	andi	r24, 0x03	; 3
                        csd_c_size_mult <<= 1;
    5412:	b8 2e       	mov	r11, r24
    5414:	bb 0c       	add	r11, r11
                        break;
    5416:	83 cf       	rjmp	.-250    	; 0x531e <sd_raw_get_info+0x11c>
                    case 10:
                        csd_c_size_mult |= b >> 7;
    5418:	88 1f       	adc	r24, r24
    541a:	88 27       	eor	r24, r24
    541c:	88 1f       	adc	r24, r24
    541e:	b8 2a       	or	r11, r24

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
    5420:	c6 01       	movw	r24, r12
    5422:	a0 e0       	ldi	r26, 0x00	; 0
    5424:	b0 e0       	ldi	r27, 0x00	; 0
    5426:	6a 2d       	mov	r22, r10
    5428:	70 e0       	ldi	r23, 0x00	; 0
    542a:	6b 0d       	add	r22, r11
    542c:	71 1d       	adc	r23, r1
    542e:	6e 5f       	subi	r22, 0xFE	; 254
    5430:	7f 4f       	sbci	r23, 0xFF	; 255
    5432:	04 c0       	rjmp	.+8      	; 0x543c <sd_raw_get_info+0x23a>
    5434:	88 0f       	add	r24, r24
    5436:	99 1f       	adc	r25, r25
    5438:	aa 1f       	adc	r26, r26
    543a:	bb 1f       	adc	r27, r27
    543c:	6a 95       	dec	r22
    543e:	d2 f7       	brpl	.-12     	; 0x5434 <sd_raw_get_info+0x232>
    5440:	9c 01       	movw	r18, r24
    5442:	ad 01       	movw	r20, r26
    5444:	f7 01       	movw	r30, r14
    5446:	21 8b       	std	Z+17, r18	; 0x11
    5448:	32 8b       	std	Z+18, r19	; 0x12
    544a:	43 8b       	std	Z+19, r20	; 0x13
    544c:	54 8b       	std	Z+20, r21	; 0x14
    544e:	15 8a       	std	Z+21, r1	; 0x15
    5450:	16 8a       	std	Z+22, r1	; 0x16
    5452:	17 8a       	std	Z+23, r1	; 0x17
    5454:	10 8e       	std	Z+24, r1	; 0x18
                        break;
    5456:	63 cf       	rjmp	.-314    	; 0x531e <sd_raw_get_info+0x11c>
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    5458:	d2 31       	cpi	r29, 0x12	; 18
    545a:	08 f4       	brcc	.+2      	; 0x545e <sd_raw_get_info+0x25c>
    545c:	60 cf       	rjmp	.-320    	; 0x531e <sd_raw_get_info+0x11c>
                }
            }
        }
    }

    unselect_card();
    545e:	2a 9a       	sbi	0x05, 2	; 5

    return 1;
    5460:	cc 24       	eor	r12, r12
    5462:	c3 94       	inc	r12
    5464:	01 c0       	rjmp	.+2      	; 0x5468 <sd_raw_get_info+0x266>
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    if(!info || !sd_raw_available())
        return 0;
    5466:	c1 2c       	mov	r12, r1
    }

    unselect_card();

    return 1;
}
    5468:	8c 2d       	mov	r24, r12
    546a:	df 91       	pop	r29
    546c:	cf 91       	pop	r28
    546e:	1f 91       	pop	r17
    5470:	0f 91       	pop	r16
    5472:	ff 90       	pop	r15
    5474:	ef 90       	pop	r14
    5476:	df 90       	pop	r13
    5478:	cf 90       	pop	r12
    547a:	bf 90       	pop	r11
    547c:	af 90       	pop	r10
    547e:	9f 90       	pop	r9
    5480:	08 95       	ret

00005482 <uart_init>:
#define USE_SLEEP 1

void uart_init()
{
    /* set baud rate */
    UBRRH = UBRRVAL >> 8;
    5482:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRRL = UBRRVAL & 0xff;
    5486:	87 e6       	ldi	r24, 0x67	; 103
    5488:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    /* set frame format: 8 bit, no parity, 1 bit */
    UCSRC = UCSRC_SELECT | (1 << UCSZ1) | (1 << UCSZ0);
    548c:	86 e0       	ldi	r24, 0x06	; 6
    548e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    /* enable serial receiver and transmitter */
#if !USE_SLEEP
    UCSRB = (1 << RXEN) | (1 << TXEN);
#else
    UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    5492:	88 e9       	ldi	r24, 0x98	; 152
    5494:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5498:	08 95       	ret

0000549a <uart_putc>:
#endif
}

void uart_putc(uint8_t c)
{
    549a:	cf 93       	push	r28
    549c:	c8 2f       	mov	r28, r24
    if(c == '\n')
    549e:	8a 30       	cpi	r24, 0x0A	; 10
    54a0:	19 f4       	brne	.+6      	; 0x54a8 <uart_putc+0xe>
        uart_putc('\r');
    54a2:	8d e0       	ldi	r24, 0x0D	; 13
    54a4:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>

    /* wait until transmit buffer is empty */
    while(!(UCSRA & (1 << UDRE)));
    54a8:	e0 ec       	ldi	r30, 0xC0	; 192
    54aa:	f0 e0       	ldi	r31, 0x00	; 0
    54ac:	90 81       	ld	r25, Z
    54ae:	95 ff       	sbrs	r25, 5
    54b0:	fd cf       	rjmp	.-6      	; 0x54ac <uart_putc+0x12>

    /* send next byte */
    UDR = c;
    54b2:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    54b6:	cf 91       	pop	r28
    54b8:	08 95       	ret

000054ba <uart_putc_hex>:

void uart_putc_hex(uint8_t b)
{
    54ba:	cf 93       	push	r28
    54bc:	c8 2f       	mov	r28, r24
    /* upper nibble */
    if((b >> 4) < 0x0a)
    54be:	82 95       	swap	r24
    54c0:	8f 70       	andi	r24, 0x0F	; 15
    54c2:	8a 30       	cpi	r24, 0x0A	; 10
    54c4:	20 f4       	brcc	.+8      	; 0x54ce <uart_putc_hex+0x14>
        uart_putc((b >> 4) + '0');
    54c6:	80 5d       	subi	r24, 0xD0	; 208
    54c8:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    54cc:	03 c0       	rjmp	.+6      	; 0x54d4 <uart_putc_hex+0x1a>
    else
        uart_putc((b >> 4) - 0x0a + 'a');
    54ce:	89 5a       	subi	r24, 0xA9	; 169
    54d0:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
    54d4:	8c 2f       	mov	r24, r28
    54d6:	8f 70       	andi	r24, 0x0F	; 15
    54d8:	28 2f       	mov	r18, r24
    54da:	30 e0       	ldi	r19, 0x00	; 0
    54dc:	2a 30       	cpi	r18, 0x0A	; 10
    54de:	31 05       	cpc	r19, r1
    54e0:	24 f4       	brge	.+8      	; 0x54ea <uart_putc_hex+0x30>
        uart_putc((b & 0x0f) + '0');
    54e2:	80 5d       	subi	r24, 0xD0	; 208
    54e4:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    54e8:	03 c0       	rjmp	.+6      	; 0x54f0 <uart_putc_hex+0x36>
    else
        uart_putc((b & 0x0f) - 0x0a + 'a');
    54ea:	89 5a       	subi	r24, 0xA9	; 169
    54ec:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
}
    54f0:	cf 91       	pop	r28
    54f2:	08 95       	ret

000054f4 <uart_putw_hex>:

void uart_putw_hex(uint16_t w)
{
    54f4:	cf 93       	push	r28
    54f6:	c8 2f       	mov	r28, r24
    uart_putc_hex((uint8_t) (w >> 8));
    54f8:	89 2f       	mov	r24, r25
    54fa:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <uart_putc_hex>
    uart_putc_hex((uint8_t) (w & 0xff));
    54fe:	8c 2f       	mov	r24, r28
    5500:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <uart_putc_hex>
}
    5504:	cf 91       	pop	r28
    5506:	08 95       	ret

00005508 <uart_putdw_hex>:

void uart_putdw_hex(uint32_t dw)
{
    5508:	cf 92       	push	r12
    550a:	df 92       	push	r13
    550c:	ef 92       	push	r14
    550e:	ff 92       	push	r15
    5510:	6b 01       	movw	r12, r22
    5512:	7c 01       	movw	r14, r24
    uart_putw_hex((uint16_t) (dw >> 16));
    5514:	c7 01       	movw	r24, r14
    5516:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <uart_putw_hex>
    uart_putw_hex((uint16_t) (dw & 0xffff));
    551a:	c6 01       	movw	r24, r12
    551c:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <uart_putw_hex>
}
    5520:	ff 90       	pop	r15
    5522:	ef 90       	pop	r14
    5524:	df 90       	pop	r13
    5526:	cf 90       	pop	r12
    5528:	08 95       	ret

0000552a <uart_putw_dec>:

void uart_putw_dec(uint16_t w)
{
    552a:	cf 92       	push	r12
    552c:	df 92       	push	r13
    552e:	ef 92       	push	r14
    5530:	ff 92       	push	r15
    5532:	0f 93       	push	r16
    5534:	1f 93       	push	r17
    5536:	cf 93       	push	r28
    5538:	df 93       	push	r29
    553a:	6c 01       	movw	r12, r24
    553c:	0f 2e       	mov	r0, r31
    553e:	f5 e0       	ldi	r31, 0x05	; 5
    5540:	ef 2e       	mov	r14, r31
    5542:	f1 2c       	mov	r15, r1
    5544:	f0 2d       	mov	r31, r0
    uint16_t num = 10000;
    uint8_t started = 0;
    5546:	40 e0       	ldi	r20, 0x00	; 0
    uart_putw_hex((uint16_t) (dw & 0xffff));
}

void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    5548:	c0 e1       	ldi	r28, 0x10	; 16
    554a:	d7 e2       	ldi	r29, 0x27	; 39
    {
        uint8_t b = w / num;
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
    554c:	01 e0       	ldi	r16, 0x01	; 1
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = w / num;
    554e:	c6 01       	movw	r24, r12
    5550:	be 01       	movw	r22, r28
    5552:	0e 94 88 2b 	call	0x5710	; 0x5710 <__udivmodhi4>
    5556:	16 2f       	mov	r17, r22
        if(b > 0 || started || num == 1)
    5558:	61 11       	cpse	r22, r1
    555a:	05 c0       	rjmp	.+10     	; 0x5566 <uart_putw_dec+0x3c>
    555c:	41 11       	cpse	r20, r1
    555e:	03 c0       	rjmp	.+6      	; 0x5566 <uart_putw_dec+0x3c>
    5560:	c1 30       	cpi	r28, 0x01	; 1
    5562:	d1 05       	cpc	r29, r1
    5564:	29 f4       	brne	.+10     	; 0x5570 <uart_putw_dec+0x46>
        {
            uart_putc('0' + b);
    5566:	80 e3       	ldi	r24, 0x30	; 48
    5568:	81 0f       	add	r24, r17
    556a:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
            started = 1;
    556e:	40 2f       	mov	r20, r16
        }
        w -= b * num;
    5570:	1c 9f       	mul	r17, r28
    5572:	c0 01       	movw	r24, r0
    5574:	1d 9f       	mul	r17, r29
    5576:	90 0d       	add	r25, r0
    5578:	11 24       	eor	r1, r1
    557a:	c8 1a       	sub	r12, r24
    557c:	d9 0a       	sbc	r13, r25

        num /= 10;
    557e:	9e 01       	movw	r18, r28
    5580:	ad ec       	ldi	r26, 0xCD	; 205
    5582:	bc ec       	ldi	r27, 0xCC	; 204
    5584:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <__umulhisi3>
    5588:	ec 01       	movw	r28, r24
    558a:	d6 95       	lsr	r29
    558c:	c7 95       	ror	r28
    558e:	d6 95       	lsr	r29
    5590:	c7 95       	ror	r28
    5592:	d6 95       	lsr	r29
    5594:	c7 95       	ror	r28
    5596:	81 e0       	ldi	r24, 0x01	; 1
    5598:	e8 1a       	sub	r14, r24
    559a:	f1 08       	sbc	r15, r1
void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    559c:	c1 f6       	brne	.-80     	; 0x554e <uart_putw_dec+0x24>
        }
        w -= b * num;

        num /= 10;
    }
}
    559e:	df 91       	pop	r29
    55a0:	cf 91       	pop	r28
    55a2:	1f 91       	pop	r17
    55a4:	0f 91       	pop	r16
    55a6:	ff 90       	pop	r15
    55a8:	ef 90       	pop	r14
    55aa:	df 90       	pop	r13
    55ac:	cf 90       	pop	r12
    55ae:	08 95       	ret

000055b0 <uart_putdw_dec>:

void uart_putdw_dec(uint32_t dw)
{
    55b0:	3f 92       	push	r3
    55b2:	4f 92       	push	r4
    55b4:	5f 92       	push	r5
    55b6:	6f 92       	push	r6
    55b8:	7f 92       	push	r7
    55ba:	8f 92       	push	r8
    55bc:	9f 92       	push	r9
    55be:	af 92       	push	r10
    55c0:	bf 92       	push	r11
    55c2:	cf 92       	push	r12
    55c4:	df 92       	push	r13
    55c6:	ef 92       	push	r14
    55c8:	ff 92       	push	r15
    55ca:	0f 93       	push	r16
    55cc:	1f 93       	push	r17
    55ce:	cf 93       	push	r28
    55d0:	df 93       	push	r29
    55d2:	4b 01       	movw	r8, r22
    55d4:	5c 01       	movw	r10, r24
    55d6:	0a e0       	ldi	r16, 0x0A	; 10
    55d8:	10 e0       	ldi	r17, 0x00	; 0
    uint32_t num = 1000000000;
    uint8_t started = 0;
    55da:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    55dc:	0f 2e       	mov	r0, r31
    55de:	c1 2c       	mov	r12, r1
    55e0:	fa ec       	ldi	r31, 0xCA	; 202
    55e2:	df 2e       	mov	r13, r31
    55e4:	fa e9       	ldi	r31, 0x9A	; 154
    55e6:	ef 2e       	mov	r14, r31
    55e8:	fb e3       	ldi	r31, 0x3B	; 59
    55ea:	ff 2e       	mov	r15, r31
    55ec:	f0 2d       	mov	r31, r0
    {
        uint8_t b = dw / num;
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
    55ee:	33 24       	eor	r3, r3
    55f0:	33 94       	inc	r3
        }
        dw -= b * num;

        num /= 10;
    55f2:	0f 2e       	mov	r0, r31
    55f4:	fa e0       	ldi	r31, 0x0A	; 10
    55f6:	4f 2e       	mov	r4, r31
    55f8:	51 2c       	mov	r5, r1
    55fa:	61 2c       	mov	r6, r1
    55fc:	71 2c       	mov	r7, r1
    55fe:	f0 2d       	mov	r31, r0
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = dw / num;
    5600:	c5 01       	movw	r24, r10
    5602:	b4 01       	movw	r22, r8
    5604:	a7 01       	movw	r20, r14
    5606:	96 01       	movw	r18, r12
    5608:	0e 94 b0 2b 	call	0x5760	; 0x5760 <__udivmodsi4>
    560c:	c2 2f       	mov	r28, r18
        if(b > 0 || started || num == 1)
    560e:	21 11       	cpse	r18, r1
    5610:	08 c0       	rjmp	.+16     	; 0x5622 <uart_putdw_dec+0x72>
    5612:	d1 11       	cpse	r29, r1
    5614:	06 c0       	rjmp	.+12     	; 0x5622 <uart_putdw_dec+0x72>
    5616:	81 e0       	ldi	r24, 0x01	; 1
    5618:	c8 16       	cp	r12, r24
    561a:	d1 04       	cpc	r13, r1
    561c:	e1 04       	cpc	r14, r1
    561e:	f1 04       	cpc	r15, r1
    5620:	29 f4       	brne	.+10     	; 0x562c <uart_putdw_dec+0x7c>
        {
            uart_putc('0' + b);
    5622:	80 e3       	ldi	r24, 0x30	; 48
    5624:	8c 0f       	add	r24, r28
    5626:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
            started = 1;
    562a:	d3 2d       	mov	r29, r3
        }
        dw -= b * num;
    562c:	ac 2f       	mov	r26, r28
    562e:	b0 e0       	ldi	r27, 0x00	; 0
    5630:	a7 01       	movw	r20, r14
    5632:	96 01       	movw	r18, r12
    5634:	0e 94 e7 2b 	call	0x57ce	; 0x57ce <__muluhisi3>
    5638:	86 1a       	sub	r8, r22
    563a:	97 0a       	sbc	r9, r23
    563c:	a8 0a       	sbc	r10, r24
    563e:	b9 0a       	sbc	r11, r25

        num /= 10;
    5640:	c7 01       	movw	r24, r14
    5642:	b6 01       	movw	r22, r12
    5644:	a3 01       	movw	r20, r6
    5646:	92 01       	movw	r18, r4
    5648:	0e 94 b0 2b 	call	0x5760	; 0x5760 <__udivmodsi4>
    564c:	69 01       	movw	r12, r18
    564e:	7a 01       	movw	r14, r20
    5650:	01 50       	subi	r16, 0x01	; 1
    5652:	11 09       	sbc	r17, r1
void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    5654:	a9 f6       	brne	.-86     	; 0x5600 <uart_putdw_dec+0x50>
        }
        dw -= b * num;

        num /= 10;
    }
}
    5656:	df 91       	pop	r29
    5658:	cf 91       	pop	r28
    565a:	1f 91       	pop	r17
    565c:	0f 91       	pop	r16
    565e:	ff 90       	pop	r15
    5660:	ef 90       	pop	r14
    5662:	df 90       	pop	r13
    5664:	cf 90       	pop	r12
    5666:	bf 90       	pop	r11
    5668:	af 90       	pop	r10
    566a:	9f 90       	pop	r9
    566c:	8f 90       	pop	r8
    566e:	7f 90       	pop	r7
    5670:	6f 90       	pop	r6
    5672:	5f 90       	pop	r5
    5674:	4f 90       	pop	r4
    5676:	3f 90       	pop	r3
    5678:	08 95       	ret

0000567a <uart_puts>:

void uart_puts(const char* str)
{
    567a:	cf 93       	push	r28
    567c:	df 93       	push	r29
    567e:	ec 01       	movw	r28, r24
    while(*str)
    5680:	88 81       	ld	r24, Y
    5682:	88 23       	and	r24, r24
    5684:	31 f0       	breq	.+12     	; 0x5692 <uart_puts+0x18>
    5686:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*str++);
    5688:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>
    }
}

void uart_puts(const char* str)
{
    while(*str)
    568c:	89 91       	ld	r24, Y+
    568e:	81 11       	cpse	r24, r1
    5690:	fb cf       	rjmp	.-10     	; 0x5688 <uart_puts+0xe>
        uart_putc(*str++);
}
    5692:	df 91       	pop	r29
    5694:	cf 91       	pop	r28
    5696:	08 95       	ret

00005698 <uart_puts_p>:

void uart_puts_p(PGM_P str)
{
    5698:	cf 93       	push	r28
    569a:	df 93       	push	r29
    while(1)
    {
        uint8_t b = pgm_read_byte_near(str++);
    569c:	ec 01       	movw	r28, r24
    569e:	21 96       	adiw	r28, 0x01	; 1
    56a0:	fc 01       	movw	r30, r24
    56a2:	84 91       	lpm	r24, Z
        if(!b)
    56a4:	88 23       	and	r24, r24
    56a6:	39 f0       	breq	.+14     	; 0x56b6 <uart_puts_p+0x1e>
            break;

        uart_putc(b);
    56a8:	0e 94 4d 2a 	call	0x549a	; 0x549a <uart_putc>

void uart_puts_p(PGM_P str)
{
    while(1)
    {
        uint8_t b = pgm_read_byte_near(str++);
    56ac:	fe 01       	movw	r30, r28
    56ae:	84 91       	lpm	r24, Z
    56b0:	21 96       	adiw	r28, 0x01	; 1
        if(!b)
    56b2:	81 11       	cpse	r24, r1
    56b4:	f9 cf       	rjmp	.-14     	; 0x56a8 <uart_puts_p+0x10>
            break;

        uart_putc(b);
    }
}
    56b6:	df 91       	pop	r29
    56b8:	cf 91       	pop	r28
    56ba:	08 95       	ret

000056bc <uart_getc>:

uint8_t uart_getc()
{
    /* wait until receive buffer is full */
#if USE_SLEEP
    uint8_t sreg = SREG;
    56bc:	9f b7       	in	r25, 0x3f	; 63
    sei();
    56be:	78 94       	sei

    while(!(UCSRA & (1 << RXC)))
    56c0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    56c4:	88 23       	and	r24, r24
    56c6:	64 f0       	brlt	.+24     	; 0x56e0 <uart_getc+0x24>
    56c8:	e0 ec       	ldi	r30, 0xC0	; 192
    56ca:	f0 e0       	ldi	r31, 0x00	; 0
        sleep_mode();
    56cc:	83 b7       	in	r24, 0x33	; 51
    56ce:	81 60       	ori	r24, 0x01	; 1
    56d0:	83 bf       	out	0x33, r24	; 51
    56d2:	88 95       	sleep
    56d4:	83 b7       	in	r24, 0x33	; 51
    56d6:	8e 7f       	andi	r24, 0xFE	; 254
    56d8:	83 bf       	out	0x33, r24	; 51
    /* wait until receive buffer is full */
#if USE_SLEEP
    uint8_t sreg = SREG;
    sei();

    while(!(UCSRA & (1 << RXC)))
    56da:	80 81       	ld	r24, Z
    56dc:	88 23       	and	r24, r24
    56de:	b4 f7       	brge	.-20     	; 0x56cc <uart_getc+0x10>
        sleep_mode();

    SREG = sreg;
    56e0:	9f bf       	out	0x3f, r25	; 63
#else
    while(!(UCSRA & (1 << RXC)));
#endif

    uint8_t b = UDR;
    56e2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    if(b == '\r')
    56e6:	8d 30       	cpi	r24, 0x0D	; 13
    56e8:	09 f4       	brne	.+2      	; 0x56ec <uart_getc+0x30>
        b = '\n';
    56ea:	8a e0       	ldi	r24, 0x0A	; 10

    return b;
}
    56ec:	08 95       	ret

000056ee <__vector_18>:

EMPTY_INTERRUPT(USART_RXC_vect)
    56ee:	18 95       	reti

000056f0 <__mulsi3>:
    56f0:	db 01       	movw	r26, r22
    56f2:	8f 93       	push	r24
    56f4:	9f 93       	push	r25
    56f6:	0e 94 e7 2b 	call	0x57ce	; 0x57ce <__muluhisi3>
    56fa:	bf 91       	pop	r27
    56fc:	af 91       	pop	r26
    56fe:	a2 9f       	mul	r26, r18
    5700:	80 0d       	add	r24, r0
    5702:	91 1d       	adc	r25, r1
    5704:	a3 9f       	mul	r26, r19
    5706:	90 0d       	add	r25, r0
    5708:	b2 9f       	mul	r27, r18
    570a:	90 0d       	add	r25, r0
    570c:	11 24       	eor	r1, r1
    570e:	08 95       	ret

00005710 <__udivmodhi4>:
    5710:	aa 1b       	sub	r26, r26
    5712:	bb 1b       	sub	r27, r27
    5714:	51 e1       	ldi	r21, 0x11	; 17
    5716:	07 c0       	rjmp	.+14     	; 0x5726 <__udivmodhi4_ep>

00005718 <__udivmodhi4_loop>:
    5718:	aa 1f       	adc	r26, r26
    571a:	bb 1f       	adc	r27, r27
    571c:	a6 17       	cp	r26, r22
    571e:	b7 07       	cpc	r27, r23
    5720:	10 f0       	brcs	.+4      	; 0x5726 <__udivmodhi4_ep>
    5722:	a6 1b       	sub	r26, r22
    5724:	b7 0b       	sbc	r27, r23

00005726 <__udivmodhi4_ep>:
    5726:	88 1f       	adc	r24, r24
    5728:	99 1f       	adc	r25, r25
    572a:	5a 95       	dec	r21
    572c:	a9 f7       	brne	.-22     	; 0x5718 <__udivmodhi4_loop>
    572e:	80 95       	com	r24
    5730:	90 95       	com	r25
    5732:	bc 01       	movw	r22, r24
    5734:	cd 01       	movw	r24, r26
    5736:	08 95       	ret

00005738 <__divmodhi4>:
    5738:	97 fb       	bst	r25, 7
    573a:	07 2e       	mov	r0, r23
    573c:	16 f4       	brtc	.+4      	; 0x5742 <__divmodhi4+0xa>
    573e:	00 94       	com	r0
    5740:	07 d0       	rcall	.+14     	; 0x5750 <__divmodhi4_neg1>
    5742:	77 fd       	sbrc	r23, 7
    5744:	09 d0       	rcall	.+18     	; 0x5758 <__divmodhi4_neg2>
    5746:	0e 94 88 2b 	call	0x5710	; 0x5710 <__udivmodhi4>
    574a:	07 fc       	sbrc	r0, 7
    574c:	05 d0       	rcall	.+10     	; 0x5758 <__divmodhi4_neg2>
    574e:	3e f4       	brtc	.+14     	; 0x575e <__divmodhi4_exit>

00005750 <__divmodhi4_neg1>:
    5750:	90 95       	com	r25
    5752:	81 95       	neg	r24
    5754:	9f 4f       	sbci	r25, 0xFF	; 255
    5756:	08 95       	ret

00005758 <__divmodhi4_neg2>:
    5758:	70 95       	com	r23
    575a:	61 95       	neg	r22
    575c:	7f 4f       	sbci	r23, 0xFF	; 255

0000575e <__divmodhi4_exit>:
    575e:	08 95       	ret

00005760 <__udivmodsi4>:
    5760:	a1 e2       	ldi	r26, 0x21	; 33
    5762:	1a 2e       	mov	r1, r26
    5764:	aa 1b       	sub	r26, r26
    5766:	bb 1b       	sub	r27, r27
    5768:	fd 01       	movw	r30, r26
    576a:	0d c0       	rjmp	.+26     	; 0x5786 <__udivmodsi4_ep>

0000576c <__udivmodsi4_loop>:
    576c:	aa 1f       	adc	r26, r26
    576e:	bb 1f       	adc	r27, r27
    5770:	ee 1f       	adc	r30, r30
    5772:	ff 1f       	adc	r31, r31
    5774:	a2 17       	cp	r26, r18
    5776:	b3 07       	cpc	r27, r19
    5778:	e4 07       	cpc	r30, r20
    577a:	f5 07       	cpc	r31, r21
    577c:	20 f0       	brcs	.+8      	; 0x5786 <__udivmodsi4_ep>
    577e:	a2 1b       	sub	r26, r18
    5780:	b3 0b       	sbc	r27, r19
    5782:	e4 0b       	sbc	r30, r20
    5784:	f5 0b       	sbc	r31, r21

00005786 <__udivmodsi4_ep>:
    5786:	66 1f       	adc	r22, r22
    5788:	77 1f       	adc	r23, r23
    578a:	88 1f       	adc	r24, r24
    578c:	99 1f       	adc	r25, r25
    578e:	1a 94       	dec	r1
    5790:	69 f7       	brne	.-38     	; 0x576c <__udivmodsi4_loop>
    5792:	60 95       	com	r22
    5794:	70 95       	com	r23
    5796:	80 95       	com	r24
    5798:	90 95       	com	r25
    579a:	9b 01       	movw	r18, r22
    579c:	ac 01       	movw	r20, r24
    579e:	bd 01       	movw	r22, r26
    57a0:	cf 01       	movw	r24, r30
    57a2:	08 95       	ret

000057a4 <__tablejump2__>:
    57a4:	ee 0f       	add	r30, r30
    57a6:	ff 1f       	adc	r31, r31
    57a8:	05 90       	lpm	r0, Z+
    57aa:	f4 91       	lpm	r31, Z
    57ac:	e0 2d       	mov	r30, r0
    57ae:	09 94       	ijmp

000057b0 <__umulhisi3>:
    57b0:	a2 9f       	mul	r26, r18
    57b2:	b0 01       	movw	r22, r0
    57b4:	b3 9f       	mul	r27, r19
    57b6:	c0 01       	movw	r24, r0
    57b8:	a3 9f       	mul	r26, r19
    57ba:	70 0d       	add	r23, r0
    57bc:	81 1d       	adc	r24, r1
    57be:	11 24       	eor	r1, r1
    57c0:	91 1d       	adc	r25, r1
    57c2:	b2 9f       	mul	r27, r18
    57c4:	70 0d       	add	r23, r0
    57c6:	81 1d       	adc	r24, r1
    57c8:	11 24       	eor	r1, r1
    57ca:	91 1d       	adc	r25, r1
    57cc:	08 95       	ret

000057ce <__muluhisi3>:
    57ce:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <__umulhisi3>
    57d2:	a5 9f       	mul	r26, r21
    57d4:	90 0d       	add	r25, r0
    57d6:	b4 9f       	mul	r27, r20
    57d8:	90 0d       	add	r25, r0
    57da:	a4 9f       	mul	r26, r20
    57dc:	80 0d       	add	r24, r0
    57de:	91 1d       	adc	r25, r1
    57e0:	11 24       	eor	r1, r1
    57e2:	08 95       	ret

000057e4 <__muldi3>:
    57e4:	df 93       	push	r29
    57e6:	cf 93       	push	r28
    57e8:	1f 93       	push	r17
    57ea:	0f 93       	push	r16
    57ec:	9a 9d       	mul	r25, r10
    57ee:	f0 2d       	mov	r31, r0
    57f0:	21 9f       	mul	r18, r17
    57f2:	f0 0d       	add	r31, r0
    57f4:	8b 9d       	mul	r24, r11
    57f6:	f0 0d       	add	r31, r0
    57f8:	8a 9d       	mul	r24, r10
    57fa:	e0 2d       	mov	r30, r0
    57fc:	f1 0d       	add	r31, r1
    57fe:	03 9f       	mul	r16, r19
    5800:	f0 0d       	add	r31, r0
    5802:	02 9f       	mul	r16, r18
    5804:	e0 0d       	add	r30, r0
    5806:	f1 1d       	adc	r31, r1
    5808:	4e 9d       	mul	r20, r14
    580a:	e0 0d       	add	r30, r0
    580c:	f1 1d       	adc	r31, r1
    580e:	5e 9d       	mul	r21, r14
    5810:	f0 0d       	add	r31, r0
    5812:	4f 9d       	mul	r20, r15
    5814:	f0 0d       	add	r31, r0
    5816:	7f 93       	push	r23
    5818:	6f 93       	push	r22
    581a:	bf 92       	push	r11
    581c:	af 92       	push	r10
    581e:	5f 93       	push	r21
    5820:	4f 93       	push	r20
    5822:	d5 01       	movw	r26, r10
    5824:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <__umulhisi3>
    5828:	8b 01       	movw	r16, r22
    582a:	ac 01       	movw	r20, r24
    582c:	d7 01       	movw	r26, r14
    582e:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <__umulhisi3>
    5832:	eb 01       	movw	r28, r22
    5834:	e8 0f       	add	r30, r24
    5836:	f9 1f       	adc	r31, r25
    5838:	d6 01       	movw	r26, r12
    583a:	0e 94 42 2c 	call	0x5884	; 0x5884 <__muldi3_6>
    583e:	2f 91       	pop	r18
    5840:	3f 91       	pop	r19
    5842:	d6 01       	movw	r26, r12
    5844:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <__umulhisi3>
    5848:	c6 0f       	add	r28, r22
    584a:	d7 1f       	adc	r29, r23
    584c:	e8 1f       	adc	r30, r24
    584e:	f9 1f       	adc	r31, r25
    5850:	af 91       	pop	r26
    5852:	bf 91       	pop	r27
    5854:	0e 94 42 2c 	call	0x5884	; 0x5884 <__muldi3_6>
    5858:	2f 91       	pop	r18
    585a:	3f 91       	pop	r19
    585c:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <__umulhisi3>
    5860:	c6 0f       	add	r28, r22
    5862:	d7 1f       	adc	r29, r23
    5864:	e8 1f       	adc	r30, r24
    5866:	f9 1f       	adc	r31, r25
    5868:	d6 01       	movw	r26, r12
    586a:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <__umulhisi3>
    586e:	e6 0f       	add	r30, r22
    5870:	f7 1f       	adc	r31, r23
    5872:	98 01       	movw	r18, r16
    5874:	be 01       	movw	r22, r28
    5876:	cf 01       	movw	r24, r30
    5878:	11 24       	eor	r1, r1
    587a:	0f 91       	pop	r16
    587c:	1f 91       	pop	r17
    587e:	cf 91       	pop	r28
    5880:	df 91       	pop	r29
    5882:	08 95       	ret

00005884 <__muldi3_6>:
    5884:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <__umulhisi3>
    5888:	46 0f       	add	r20, r22
    588a:	57 1f       	adc	r21, r23
    588c:	c8 1f       	adc	r28, r24
    588e:	d9 1f       	adc	r29, r25
    5890:	08 f4       	brcc	.+2      	; 0x5894 <__muldi3_6+0x10>
    5892:	31 96       	adiw	r30, 0x01	; 1
    5894:	08 95       	ret

00005896 <__ashldi3>:
    5896:	0f 93       	push	r16
    5898:	08 30       	cpi	r16, 0x08	; 8
    589a:	90 f0       	brcs	.+36     	; 0x58c0 <__ashldi3+0x2a>
    589c:	98 2f       	mov	r25, r24
    589e:	87 2f       	mov	r24, r23
    58a0:	76 2f       	mov	r23, r22
    58a2:	65 2f       	mov	r22, r21
    58a4:	54 2f       	mov	r21, r20
    58a6:	43 2f       	mov	r20, r19
    58a8:	32 2f       	mov	r19, r18
    58aa:	22 27       	eor	r18, r18
    58ac:	08 50       	subi	r16, 0x08	; 8
    58ae:	f4 cf       	rjmp	.-24     	; 0x5898 <__ashldi3+0x2>
    58b0:	22 0f       	add	r18, r18
    58b2:	33 1f       	adc	r19, r19
    58b4:	44 1f       	adc	r20, r20
    58b6:	55 1f       	adc	r21, r21
    58b8:	66 1f       	adc	r22, r22
    58ba:	77 1f       	adc	r23, r23
    58bc:	88 1f       	adc	r24, r24
    58be:	99 1f       	adc	r25, r25
    58c0:	0a 95       	dec	r16
    58c2:	b2 f7       	brpl	.-20     	; 0x58b0 <__ashldi3+0x1a>
    58c4:	0f 91       	pop	r16
    58c6:	08 95       	ret

000058c8 <__ashrdi3>:
    58c8:	97 fb       	bst	r25, 7
    58ca:	10 f8       	bld	r1, 0

000058cc <__lshrdi3>:
    58cc:	16 94       	lsr	r1
    58ce:	00 08       	sbc	r0, r0
    58d0:	0f 93       	push	r16
    58d2:	08 30       	cpi	r16, 0x08	; 8
    58d4:	98 f0       	brcs	.+38     	; 0x58fc <__lshrdi3+0x30>
    58d6:	08 50       	subi	r16, 0x08	; 8
    58d8:	23 2f       	mov	r18, r19
    58da:	34 2f       	mov	r19, r20
    58dc:	45 2f       	mov	r20, r21
    58de:	56 2f       	mov	r21, r22
    58e0:	67 2f       	mov	r22, r23
    58e2:	78 2f       	mov	r23, r24
    58e4:	89 2f       	mov	r24, r25
    58e6:	90 2d       	mov	r25, r0
    58e8:	f4 cf       	rjmp	.-24     	; 0x58d2 <__lshrdi3+0x6>
    58ea:	05 94       	asr	r0
    58ec:	97 95       	ror	r25
    58ee:	87 95       	ror	r24
    58f0:	77 95       	ror	r23
    58f2:	67 95       	ror	r22
    58f4:	57 95       	ror	r21
    58f6:	47 95       	ror	r20
    58f8:	37 95       	ror	r19
    58fa:	27 95       	ror	r18
    58fc:	0a 95       	dec	r16
    58fe:	aa f7       	brpl	.-22     	; 0x58ea <__lshrdi3+0x1e>
    5900:	0f 91       	pop	r16
    5902:	08 95       	ret

00005904 <__adddi3>:
    5904:	2a 0d       	add	r18, r10
    5906:	3b 1d       	adc	r19, r11
    5908:	4c 1d       	adc	r20, r12
    590a:	5d 1d       	adc	r21, r13
    590c:	6e 1d       	adc	r22, r14
    590e:	7f 1d       	adc	r23, r15
    5910:	80 1f       	adc	r24, r16
    5912:	91 1f       	adc	r25, r17
    5914:	08 95       	ret

00005916 <__adddi3_s8>:
    5916:	00 24       	eor	r0, r0
    5918:	a7 fd       	sbrc	r26, 7
    591a:	00 94       	com	r0
    591c:	2a 0f       	add	r18, r26
    591e:	30 1d       	adc	r19, r0
    5920:	40 1d       	adc	r20, r0
    5922:	50 1d       	adc	r21, r0
    5924:	60 1d       	adc	r22, r0
    5926:	70 1d       	adc	r23, r0
    5928:	80 1d       	adc	r24, r0
    592a:	90 1d       	adc	r25, r0
    592c:	08 95       	ret

0000592e <__subdi3>:
    592e:	2a 19       	sub	r18, r10
    5930:	3b 09       	sbc	r19, r11
    5932:	4c 09       	sbc	r20, r12
    5934:	5d 09       	sbc	r21, r13
    5936:	6e 09       	sbc	r22, r14
    5938:	7f 09       	sbc	r23, r15
    593a:	80 0b       	sbc	r24, r16
    593c:	91 0b       	sbc	r25, r17
    593e:	08 95       	ret

00005940 <__cmpdi2>:
    5940:	2a 15       	cp	r18, r10
    5942:	3b 05       	cpc	r19, r11
    5944:	4c 05       	cpc	r20, r12
    5946:	5d 05       	cpc	r21, r13
    5948:	6e 05       	cpc	r22, r14
    594a:	7f 05       	cpc	r23, r15
    594c:	80 07       	cpc	r24, r16
    594e:	91 07       	cpc	r25, r17
    5950:	08 95       	ret

00005952 <__cmpdi2_s8>:
    5952:	00 24       	eor	r0, r0
    5954:	a7 fd       	sbrc	r26, 7
    5956:	00 94       	com	r0
    5958:	2a 17       	cp	r18, r26
    595a:	30 05       	cpc	r19, r0
    595c:	40 05       	cpc	r20, r0
    595e:	50 05       	cpc	r21, r0
    5960:	60 05       	cpc	r22, r0
    5962:	70 05       	cpc	r23, r0
    5964:	80 05       	cpc	r24, r0
    5966:	90 05       	cpc	r25, r0
    5968:	08 95       	ret

0000596a <strcmp_P>:
    596a:	fb 01       	movw	r30, r22
    596c:	dc 01       	movw	r26, r24
    596e:	8d 91       	ld	r24, X+
    5970:	05 90       	lpm	r0, Z+
    5972:	80 19       	sub	r24, r0
    5974:	01 10       	cpse	r0, r1
    5976:	d9 f3       	breq	.-10     	; 0x596e <strcmp_P+0x4>
    5978:	99 0b       	sbc	r25, r25
    597a:	08 95       	ret

0000597c <strncmp_P>:
    597c:	fb 01       	movw	r30, r22
    597e:	dc 01       	movw	r26, r24
    5980:	41 50       	subi	r20, 0x01	; 1
    5982:	50 40       	sbci	r21, 0x00	; 0
    5984:	30 f0       	brcs	.+12     	; 0x5992 <strncmp_P+0x16>
    5986:	8d 91       	ld	r24, X+
    5988:	05 90       	lpm	r0, Z+
    598a:	80 19       	sub	r24, r0
    598c:	19 f4       	brne	.+6      	; 0x5994 <strncmp_P+0x18>
    598e:	00 20       	and	r0, r0
    5990:	b9 f7       	brne	.-18     	; 0x5980 <strncmp_P+0x4>
    5992:	88 1b       	sub	r24, r24
    5994:	99 0b       	sbc	r25, r25
    5996:	08 95       	ret

00005998 <memcpy>:
    5998:	fb 01       	movw	r30, r22
    599a:	dc 01       	movw	r26, r24
    599c:	02 c0       	rjmp	.+4      	; 0x59a2 <memcpy+0xa>
    599e:	01 90       	ld	r0, Z+
    59a0:	0d 92       	st	X+, r0
    59a2:	41 50       	subi	r20, 0x01	; 1
    59a4:	50 40       	sbci	r21, 0x00	; 0
    59a6:	d8 f7       	brcc	.-10     	; 0x599e <memcpy+0x6>
    59a8:	08 95       	ret

000059aa <memset>:
    59aa:	dc 01       	movw	r26, r24
    59ac:	01 c0       	rjmp	.+2      	; 0x59b0 <memset+0x6>
    59ae:	6d 93       	st	X+, r22
    59b0:	41 50       	subi	r20, 0x01	; 1
    59b2:	50 40       	sbci	r21, 0x00	; 0
    59b4:	e0 f7       	brcc	.-8      	; 0x59ae <memset+0x4>
    59b6:	08 95       	ret

000059b8 <strchr>:
    59b8:	fc 01       	movw	r30, r24
    59ba:	81 91       	ld	r24, Z+
    59bc:	86 17       	cp	r24, r22
    59be:	21 f0       	breq	.+8      	; 0x59c8 <strchr+0x10>
    59c0:	88 23       	and	r24, r24
    59c2:	d9 f7       	brne	.-10     	; 0x59ba <strchr+0x2>
    59c4:	99 27       	eor	r25, r25
    59c6:	08 95       	ret
    59c8:	31 97       	sbiw	r30, 0x01	; 1
    59ca:	cf 01       	movw	r24, r30
    59cc:	08 95       	ret

000059ce <strcmp>:
    59ce:	fb 01       	movw	r30, r22
    59d0:	dc 01       	movw	r26, r24
    59d2:	8d 91       	ld	r24, X+
    59d4:	01 90       	ld	r0, Z+
    59d6:	80 19       	sub	r24, r0
    59d8:	01 10       	cpse	r0, r1
    59da:	d9 f3       	breq	.-10     	; 0x59d2 <strcmp+0x4>
    59dc:	99 0b       	sbc	r25, r25
    59de:	08 95       	ret

000059e0 <strncmp>:
    59e0:	fb 01       	movw	r30, r22
    59e2:	dc 01       	movw	r26, r24
    59e4:	41 50       	subi	r20, 0x01	; 1
    59e6:	50 40       	sbci	r21, 0x00	; 0
    59e8:	30 f0       	brcs	.+12     	; 0x59f6 <strncmp+0x16>
    59ea:	8d 91       	ld	r24, X+
    59ec:	01 90       	ld	r0, Z+
    59ee:	80 19       	sub	r24, r0
    59f0:	19 f4       	brne	.+6      	; 0x59f8 <strncmp+0x18>
    59f2:	00 20       	and	r0, r0
    59f4:	b9 f7       	brne	.-18     	; 0x59e4 <strncmp+0x4>
    59f6:	88 1b       	sub	r24, r24
    59f8:	99 0b       	sbc	r25, r25
    59fa:	08 95       	ret

000059fc <strncpy>:
    59fc:	fb 01       	movw	r30, r22
    59fe:	dc 01       	movw	r26, r24
    5a00:	41 50       	subi	r20, 0x01	; 1
    5a02:	50 40       	sbci	r21, 0x00	; 0
    5a04:	48 f0       	brcs	.+18     	; 0x5a18 <strncpy+0x1c>
    5a06:	01 90       	ld	r0, Z+
    5a08:	0d 92       	st	X+, r0
    5a0a:	00 20       	and	r0, r0
    5a0c:	c9 f7       	brne	.-14     	; 0x5a00 <strncpy+0x4>
    5a0e:	01 c0       	rjmp	.+2      	; 0x5a12 <strncpy+0x16>
    5a10:	1d 92       	st	X+, r1
    5a12:	41 50       	subi	r20, 0x01	; 1
    5a14:	50 40       	sbci	r21, 0x00	; 0
    5a16:	e0 f7       	brcc	.-8      	; 0x5a10 <strncpy+0x14>
    5a18:	08 95       	ret

00005a1a <strrchr>:
    5a1a:	fc 01       	movw	r30, r24
    5a1c:	81 e0       	ldi	r24, 0x01	; 1
    5a1e:	90 e0       	ldi	r25, 0x00	; 0
    5a20:	01 90       	ld	r0, Z+
    5a22:	06 16       	cp	r0, r22
    5a24:	09 f4       	brne	.+2      	; 0x5a28 <strrchr+0xe>
    5a26:	cf 01       	movw	r24, r30
    5a28:	00 20       	and	r0, r0
    5a2a:	d1 f7       	brne	.-12     	; 0x5a20 <strrchr+0x6>
    5a2c:	01 97       	sbiw	r24, 0x01	; 1
    5a2e:	08 95       	ret

00005a30 <_exit>:
    5a30:	f8 94       	cli

00005a32 <__stop_program>:
    5a32:	ff cf       	rjmp	.-2      	; 0x5a32 <__stop_program>
