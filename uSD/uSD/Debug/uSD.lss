
uSD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  00004038  000040cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004038  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000343  00800174  00800174  00004140  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004140  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004170  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  000041b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000505c  00000000  00000000  00004440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001115  00000000  00000000  0000949c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000291c  00000000  00000000  0000a5b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f7c  00000000  00000000  0000ced0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fc2  00000000  00000000  0000de4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000077ee  00000000  00000000  0000ee0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f8  00000000  00000000  000165fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       8:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      10:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      14:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      18:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      1c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      20:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      24:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      28:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      2c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      30:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      34:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      38:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      3c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      40:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      44:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      48:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__vector_18>
      4c:	0c 94 16 1e 	jmp	0x3c2c	; 0x3c2c <__vector_19>
      50:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      54:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      58:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      5c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      60:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      64:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	64 6f       	ori	r22, 0xF4	; 244
      6a:	6e 65       	ori	r22, 0x5E	; 94
      6c:	0a 00       	.word	0x000a	; ????

0000006e <__c.2040>:
      6e:	65 72 72 6f 72 20 73 79 6e 63 69 6e 67 20 64 69     error syncing di
      7e:	73 6b 0a 00                                         sk..

00000082 <__c.2037>:
      82:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
      92:	20 66 69 6c 65 0a 00                                 file..

00000099 <__c.2035>:
      99:	77 72 69 74 69 6e 67 20 68 61 70 70 65 6e 73 20     writing happens 
      a9:	6e 6f 77 0a 00                                      now..

000000ae <__c.2031>:
      ae:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
      be:	20 00                                                .

000000c0 <__c.2028>:
      c0:	6f 70 65 6e 20 65 72 72 6f 72 0a 00                 open error..

000000cc <__c.2024>:
      cc:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 66     error creating f
      dc:	69 6c 65 3a 20 00                                   ile: .

000000e2 <__c.2020>:
      e2:	6f 70 65 6e 69 6e 67 20 72 6f 6f 74 20 64 69 72     opening root dir
      f2:	65 63 74 6f 72 79 20 66 61 69 6c 65 64 0a 00        ectory failed..

00000101 <__c.2016>:
     101:	6f 70 65 6e 69 6e 67 20 66 69 6c 65 73 79 73 74     opening filesyst
     111:	65 6d 20 66 61 69 6c 65 64 0a 00                    em failed..

0000011c <__c.2013>:
     11c:	6f 70 65 6e 69 6e 67 20 70 61 72 74 69 74 69 6f     opening partitio
     12c:	6e 20 66 61 69 6c 65 64 0a 00                       n failed..

00000136 <__c.2010>:
     136:	4d 4d 43 2f 53 44 20 69 6e 69 74 69 61 6c 69 7a     MMC/SD initializ
     146:	61 74 69 6f 6e 20 66 61 69 6c 65 64 0a 00           ation failed..

00000154 <__c.2008>:
     154:	67 6f 69 6e 67 20 69 6e 74 6f 20 69 6e 69 74 0a     going into init.
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d8 e0       	ldi	r29, 0x08	; 8
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	11 e0       	ldi	r17, 0x01	; 1
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	e8 e3       	ldi	r30, 0x38	; 56
     17a:	f0 e4       	ldi	r31, 0x40	; 64
     17c:	02 c0       	rjmp	.+4      	; 0x182 <__do_copy_data+0x10>
     17e:	05 90       	lpm	r0, Z+
     180:	0d 92       	st	X+, r0
     182:	a4 37       	cpi	r26, 0x74	; 116
     184:	b1 07       	cpc	r27, r17
     186:	d9 f7       	brne	.-10     	; 0x17e <__do_copy_data+0xc>

00000188 <__do_clear_bss>:
     188:	24 e0       	ldi	r18, 0x04	; 4
     18a:	a4 e7       	ldi	r26, 0x74	; 116
     18c:	b1 e0       	ldi	r27, 0x01	; 1
     18e:	01 c0       	rjmp	.+2      	; 0x192 <.do_clear_bss_start>

00000190 <.do_clear_bss_loop>:
     190:	1d 92       	st	X+, r1

00000192 <.do_clear_bss_start>:
     192:	a7 3b       	cpi	r26, 0xB7	; 183
     194:	b2 07       	cpc	r27, r18
     196:	e1 f7       	brne	.-8      	; 0x190 <.do_clear_bss_loop>
     198:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <main>
     19c:	0c 94 1a 20 	jmp	0x4034	; 0x4034 <_exit>

000001a0 <__bad_interrupt>:
     1a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a4 <read16>:
 * \param[in] p Pointer from where to read the integer.
 * \returns The 16-bit integer read from memory.
 */
uint16_t read16(const uint8_t* p)
{
    return (((uint16_t) p[1]) << 8) |
     1a4:	fc 01       	movw	r30, r24
     1a6:	21 81       	ldd	r18, Z+1	; 0x01
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	32 2f       	mov	r19, r18
     1ac:	22 27       	eor	r18, r18
           (((uint16_t) p[0]) << 0);
     1ae:	80 81       	ld	r24, Z
}
     1b0:	a9 01       	movw	r20, r18
     1b2:	48 2b       	or	r20, r24
     1b4:	ca 01       	movw	r24, r20
     1b6:	08 95       	ret

000001b8 <read32>:
 *
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
     1b8:	fc 01       	movw	r30, r24
    return (((uint32_t) p[3]) << 24) |
     1ba:	23 81       	ldd	r18, Z+3	; 0x03
           (((uint32_t) p[2]) << 16) |
     1bc:	62 81       	ldd	r22, Z+2	; 0x02
     1be:	86 2f       	mov	r24, r22
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b0 e0       	ldi	r27, 0x00	; 0
     1c6:	dc 01       	movw	r26, r24
     1c8:	99 27       	eor	r25, r25
     1ca:	88 27       	eor	r24, r24
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
     1cc:	b2 2b       	or	r27, r18
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
     1ce:	20 81       	ld	r18, Z
     1d0:	82 2b       	or	r24, r18
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
     1d2:	21 81       	ldd	r18, Z+1	; 0x01
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
     1d4:	bc 01       	movw	r22, r24
     1d6:	cd 01       	movw	r24, r26
     1d8:	72 2b       	or	r23, r18
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
}
     1da:	08 95       	ret

000001dc <write16>:
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 16-bit integer to write.
 */
void write16(uint8_t* p, uint16_t i)
{
    p[1] = (uint8_t) ((i & 0xff00) >> 8);
     1dc:	fc 01       	movw	r30, r24
     1de:	71 83       	std	Z+1, r23	; 0x01
    p[0] = (uint8_t) ((i & 0x00ff) >> 0);
     1e0:	60 83       	st	Z, r22
     1e2:	08 95       	ret

000001e4 <write32>:
 *
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 32-bit integer to write.
 */
void write32(uint8_t* p, uint32_t i)
{
     1e4:	fc 01       	movw	r30, r24
    p[3] = (uint8_t) ((i & 0xff000000) >> 24);
     1e6:	73 83       	std	Z+3, r23	; 0x03
    p[2] = (uint8_t) ((i & 0x00ff0000) >> 16);
     1e8:	62 83       	std	Z+2, r22	; 0x02
    p[1] = (uint8_t) ((i & 0x0000ff00) >>  8);
     1ea:	51 83       	std	Z+1, r21	; 0x01
    p[0] = (uint8_t) ((i & 0x000000ff) >>  0);
     1ec:	40 83       	st	Z, r20
     1ee:	08 95       	ret

000001f0 <fat_get_next_cluster>:
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
}
     1f0:	8f 92       	push	r8
     1f2:	9f 92       	push	r9
     1f4:	af 92       	push	r10
     1f6:	bf 92       	push	r11
     1f8:	cf 92       	push	r12
     1fa:	df 92       	push	r13
     1fc:	ef 92       	push	r14
     1fe:	ff 92       	push	r15
     200:	0f 93       	push	r16
     202:	1f 93       	push	r17
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	00 d0       	rcall	.+0      	; 0x20a <fat_get_next_cluster+0x1a>
     20a:	00 d0       	rcall	.+0      	; 0x20c <fat_get_next_cluster+0x1c>
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	00 97       	sbiw	r24, 0x00	; 0
     212:	09 f4       	brne	.+2      	; 0x216 <fat_get_next_cluster+0x26>
     214:	85 c0       	rjmp	.+266    	; 0x320 <fat_get_next_cluster+0x130>
     216:	42 30       	cpi	r20, 0x02	; 2
     218:	51 05       	cpc	r21, r1
     21a:	61 05       	cpc	r22, r1
     21c:	71 05       	cpc	r23, r1
     21e:	08 f4       	brcc	.+2      	; 0x222 <fat_get_next_cluster+0x32>
     220:	84 c0       	rjmp	.+264    	; 0x32a <fat_get_next_cluster+0x13a>
     222:	fc 01       	movw	r30, r24
     224:	a0 81       	ld	r26, Z
     226:	b1 81       	ldd	r27, Z+1	; 0x01
     228:	18 96       	adiw	r26, 0x08	; 8
     22a:	8c 91       	ld	r24, X
     22c:	18 97       	sbiw	r26, 0x08	; 8
     22e:	8b 30       	cpi	r24, 0x0B	; 11
     230:	09 f0       	breq	.+2      	; 0x234 <fat_get_next_cluster+0x44>
     232:	40 c0       	rjmp	.+128    	; 0x2b4 <fat_get_next_cluster+0xc4>
     234:	4a 01       	movw	r8, r20
     236:	5b 01       	movw	r10, r22
     238:	24 2f       	mov	r18, r20
     23a:	39 2d       	mov	r19, r9
     23c:	4a 2d       	mov	r20, r10
     23e:	5b 2d       	mov	r21, r11
     240:	60 e0       	ldi	r22, 0x00	; 0
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	02 e0       	ldi	r16, 0x02	; 2
     24a:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <__ashldi3>
     24e:	a2 84       	ldd	r10, Z+10	; 0x0a
     250:	b3 84       	ldd	r11, Z+11	; 0x0b
     252:	c4 84       	ldd	r12, Z+12	; 0x0c
     254:	d5 84       	ldd	r13, Z+13	; 0x0d
     256:	e6 84       	ldd	r14, Z+14	; 0x0e
     258:	f7 84       	ldd	r15, Z+15	; 0x0f
     25a:	00 89       	ldd	r16, Z+16	; 0x10
     25c:	11 89       	ldd	r17, Z+17	; 0x11
     25e:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
     262:	ed 91       	ld	r30, X+
     264:	fc 91       	ld	r31, X
     266:	68 94       	set
     268:	ee 24       	eor	r14, r14
     26a:	e2 f8       	bld	r14, 2
     26c:	f1 2c       	mov	r15, r1
     26e:	8e 01       	movw	r16, r28
     270:	0f 5f       	subi	r16, 0xFF	; 255
     272:	1f 4f       	sbci	r17, 0xFF	; 255
     274:	09 95       	icall
     276:	88 23       	and	r24, r24
     278:	c1 f0       	breq	.+48     	; 0x2aa <fat_get_next_cluster+0xba>
     27a:	c9 80       	ldd	r12, Y+1	; 0x01
     27c:	da 80       	ldd	r13, Y+2	; 0x02
     27e:	eb 80       	ldd	r14, Y+3	; 0x03
     280:	fc 80       	ldd	r15, Y+4	; 0x04
     282:	c1 14       	cp	r12, r1
     284:	d1 04       	cpc	r13, r1
     286:	e1 04       	cpc	r14, r1
     288:	f1 04       	cpc	r15, r1
     28a:	79 f0       	breq	.+30     	; 0x2aa <fat_get_next_cluster+0xba>
     28c:	d7 01       	movw	r26, r14
     28e:	c6 01       	movw	r24, r12
     290:	80 5f       	subi	r24, 0xF0	; 240
     292:	9f 4f       	sbci	r25, 0xFF	; 255
     294:	af 4f       	sbci	r26, 0xFF	; 255
     296:	bf 40       	sbci	r27, 0x0F	; 15
     298:	40 97       	sbiw	r24, 0x10	; 16
     29a:	a1 05       	cpc	r26, r1
     29c:	b1 05       	cpc	r27, r1
     29e:	28 f0       	brcs	.+10     	; 0x2aa <fat_get_next_cluster+0xba>
     2a0:	6c 2d       	mov	r22, r12
     2a2:	7d 2d       	mov	r23, r13
     2a4:	8e 2d       	mov	r24, r14
     2a6:	9f 2d       	mov	r25, r15
     2a8:	44 c0       	rjmp	.+136    	; 0x332 <fat_get_next_cluster+0x142>
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	3f c0       	rjmp	.+126    	; 0x332 <fat_get_next_cluster+0x142>
     2b4:	4a 01       	movw	r8, r20
     2b6:	5b 01       	movw	r10, r22
     2b8:	24 2f       	mov	r18, r20
     2ba:	39 2d       	mov	r19, r9
     2bc:	4a 2d       	mov	r20, r10
     2be:	5b 2d       	mov	r21, r11
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	01 e0       	ldi	r16, 0x01	; 1
     2ca:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <__ashldi3>
     2ce:	a2 84       	ldd	r10, Z+10	; 0x0a
     2d0:	b3 84       	ldd	r11, Z+11	; 0x0b
     2d2:	c4 84       	ldd	r12, Z+12	; 0x0c
     2d4:	d5 84       	ldd	r13, Z+13	; 0x0d
     2d6:	e6 84       	ldd	r14, Z+14	; 0x0e
     2d8:	f7 84       	ldd	r15, Z+15	; 0x0f
     2da:	00 89       	ldd	r16, Z+16	; 0x10
     2dc:	11 89       	ldd	r17, Z+17	; 0x11
     2de:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
     2e2:	ed 91       	ld	r30, X+
     2e4:	fc 91       	ld	r31, X
     2e6:	68 94       	set
     2e8:	ee 24       	eor	r14, r14
     2ea:	e1 f8       	bld	r14, 1
     2ec:	f1 2c       	mov	r15, r1
     2ee:	8e 01       	movw	r16, r28
     2f0:	0f 5f       	subi	r16, 0xFF	; 255
     2f2:	1f 4f       	sbci	r17, 0xFF	; 255
     2f4:	09 95       	icall
     2f6:	88 23       	and	r24, r24
     2f8:	71 f0       	breq	.+28     	; 0x316 <fat_get_next_cluster+0x126>
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
     2fe:	6c 01       	movw	r12, r24
     300:	e1 2c       	mov	r14, r1
     302:	f1 2c       	mov	r15, r1
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	8f 3e       	cpi	r24, 0xEF	; 239
     308:	9f 4f       	sbci	r25, 0xFF	; 255
     30a:	28 f4       	brcc	.+10     	; 0x316 <fat_get_next_cluster+0x126>
     30c:	6c 2d       	mov	r22, r12
     30e:	7d 2d       	mov	r23, r13
     310:	8e 2d       	mov	r24, r14
     312:	9f 2d       	mov	r25, r15
     314:	0e c0       	rjmp	.+28     	; 0x332 <fat_get_next_cluster+0x142>
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	09 c0       	rjmp	.+18     	; 0x332 <fat_get_next_cluster+0x142>
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	04 c0       	rjmp	.+8      	; 0x332 <fat_get_next_cluster+0x142>
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	ff 90       	pop	r15
     344:	ef 90       	pop	r14
     346:	df 90       	pop	r13
     348:	cf 90       	pop	r12
     34a:	bf 90       	pop	r11
     34c:	af 90       	pop	r10
     34e:	9f 90       	pop	r9
     350:	8f 90       	pop	r8
     352:	08 95       	ret

00000354 <fat_free_clusters>:
     354:	2f 92       	push	r2
     356:	3f 92       	push	r3
     358:	4f 92       	push	r4
     35a:	5f 92       	push	r5
     35c:	6f 92       	push	r6
     35e:	7f 92       	push	r7
     360:	8f 92       	push	r8
     362:	9f 92       	push	r9
     364:	af 92       	push	r10
     366:	bf 92       	push	r11
     368:	cf 92       	push	r12
     36a:	df 92       	push	r13
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	62 97       	sbiw	r28, 0x12	; 18
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	3c 01       	movw	r6, r24
     38a:	1a 01       	movw	r2, r20
     38c:	2b 01       	movw	r4, r22
     38e:	89 2b       	or	r24, r25
     390:	09 f4       	brne	.+2      	; 0x394 <fat_free_clusters+0x40>
     392:	eb c0       	rjmp	.+470    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     394:	42 30       	cpi	r20, 0x02	; 2
     396:	51 05       	cpc	r21, r1
     398:	61 05       	cpc	r22, r1
     39a:	71 05       	cpc	r23, r1
     39c:	08 f4       	brcc	.+2      	; 0x3a0 <fat_free_clusters+0x4c>
     39e:	e7 c0       	rjmp	.+462    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
     3a0:	d3 01       	movw	r26, r6
     3a2:	1a 96       	adiw	r26, 0x0a	; 10
     3a4:	bc 91       	ld	r27, X
     3a6:	bd 83       	std	Y+5, r27	; 0x05
     3a8:	f3 01       	movw	r30, r6
     3aa:	f3 85       	ldd	r31, Z+11	; 0x0b
     3ac:	fe 83       	std	Y+6, r31	; 0x06
     3ae:	d3 01       	movw	r26, r6
     3b0:	1c 96       	adiw	r26, 0x0c	; 12
     3b2:	bc 91       	ld	r27, X
     3b4:	bf 83       	std	Y+7, r27	; 0x07
     3b6:	f3 01       	movw	r30, r6
     3b8:	f5 85       	ldd	r31, Z+13	; 0x0d
     3ba:	f8 87       	std	Y+8, r31	; 0x08
     3bc:	d3 01       	movw	r26, r6
     3be:	1e 96       	adiw	r26, 0x0e	; 14
     3c0:	bc 91       	ld	r27, X
     3c2:	b9 87       	std	Y+9, r27	; 0x09
     3c4:	f3 01       	movw	r30, r6
     3c6:	f7 85       	ldd	r31, Z+15	; 0x0f
     3c8:	fa 87       	std	Y+10, r31	; 0x0a
     3ca:	d3 01       	movw	r26, r6
     3cc:	50 96       	adiw	r26, 0x10	; 16
     3ce:	bc 91       	ld	r27, X
     3d0:	bb 87       	std	Y+11, r27	; 0x0b
     3d2:	f3 01       	movw	r30, r6
     3d4:	f1 89       	ldd	r31, Z+17	; 0x11
     3d6:	fc 87       	std	Y+12, r31	; 0x0c
     3d8:	d3 01       	movw	r26, r6
     3da:	ed 91       	ld	r30, X+
     3dc:	fc 91       	ld	r31, X
     3de:	80 85       	ldd	r24, Z+8	; 0x08
     3e0:	8b 30       	cpi	r24, 0x0B	; 11
     3e2:	39 f0       	breq	.+14     	; 0x3f2 <fat_free_clusters+0x9e>
     3e4:	41 15       	cp	r20, r1
     3e6:	51 05       	cpc	r21, r1
     3e8:	61 05       	cpc	r22, r1
     3ea:	71 05       	cpc	r23, r1
     3ec:	09 f0       	breq	.+2      	; 0x3f0 <fat_free_clusters+0x9c>
     3ee:	5d c0       	rjmp	.+186    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     3f0:	b6 c0       	rjmp	.+364    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     3f2:	45 2b       	or	r20, r21
     3f4:	46 2b       	or	r20, r22
     3f6:	47 2b       	or	r20, r23
     3f8:	19 f4       	brne	.+6      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fa:	51 c0       	rjmp	.+162    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     3fc:	14 01       	movw	r2, r8
     3fe:	25 01       	movw	r4, r10
     400:	52 01       	movw	r10, r4
     402:	41 01       	movw	r8, r2
     404:	22 2d       	mov	r18, r2
     406:	39 2d       	mov	r19, r9
     408:	4a 2d       	mov	r20, r10
     40a:	5b 2d       	mov	r21, r11
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	02 e0       	ldi	r16, 0x02	; 2
     416:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <__ashldi3>
     41a:	ad 80       	ldd	r10, Y+5	; 0x05
     41c:	be 80       	ldd	r11, Y+6	; 0x06
     41e:	cf 80       	ldd	r12, Y+7	; 0x07
     420:	d8 84       	ldd	r13, Y+8	; 0x08
     422:	e9 84       	ldd	r14, Y+9	; 0x09
     424:	fa 84       	ldd	r15, Y+10	; 0x0a
     426:	0b 85       	ldd	r16, Y+11	; 0x0b
     428:	1c 85       	ldd	r17, Y+12	; 0x0c
     42a:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
     42e:	d2 2e       	mov	r13, r18
     430:	c3 2e       	mov	r12, r19
     432:	4d 87       	std	Y+13, r20	; 0x0d
     434:	5e 87       	std	Y+14, r21	; 0x0e
     436:	6f 87       	std	Y+15, r22	; 0x0f
     438:	78 8b       	std	Y+16, r23	; 0x10
     43a:	89 8b       	std	Y+17, r24	; 0x11
     43c:	9a 8b       	std	Y+18, r25	; 0x12
     43e:	d3 01       	movw	r26, r6
     440:	ed 91       	ld	r30, X+
     442:	fc 91       	ld	r31, X
     444:	01 90       	ld	r0, Z+
     446:	f0 81       	ld	r31, Z
     448:	e0 2d       	mov	r30, r0
     44a:	68 94       	set
     44c:	ee 24       	eor	r14, r14
     44e:	e2 f8       	bld	r14, 2
     450:	f1 2c       	mov	r15, r1
     452:	8e 01       	movw	r16, r28
     454:	0f 5f       	subi	r16, 0xFF	; 255
     456:	1f 4f       	sbci	r17, 0xFF	; 255
     458:	09 95       	icall
     45a:	88 23       	and	r24, r24
     45c:	09 f4       	brne	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45e:	2c c1       	rjmp	.+600    	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
     460:	89 80       	ldd	r8, Y+1	; 0x01
     462:	9a 80       	ldd	r9, Y+2	; 0x02
     464:	ab 80       	ldd	r10, Y+3	; 0x03
     466:	bc 80       	ldd	r11, Y+4	; 0x04
     468:	81 14       	cp	r8, r1
     46a:	91 04       	cpc	r9, r1
     46c:	a1 04       	cpc	r10, r1
     46e:	b1 04       	cpc	r11, r1
     470:	c1 f0       	breq	.+48     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     472:	d5 01       	movw	r26, r10
     474:	c4 01       	movw	r24, r8
     476:	80 5f       	subi	r24, 0xF0	; 240
     478:	9f 4f       	sbci	r25, 0xFF	; 255
     47a:	af 4f       	sbci	r26, 0xFF	; 255
     47c:	bf 40       	sbci	r27, 0x0F	; 15
     47e:	08 97       	sbiw	r24, 0x08	; 8
     480:	a1 05       	cpc	r26, r1
     482:	b1 05       	cpc	r27, r1
     484:	80 f0       	brcs	.+32     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     486:	d5 01       	movw	r26, r10
     488:	c4 01       	movw	r24, r8
     48a:	88 5f       	subi	r24, 0xF8	; 248
     48c:	9f 4f       	sbci	r25, 0xFF	; 255
     48e:	af 4f       	sbci	r26, 0xFF	; 255
     490:	bf 40       	sbci	r27, 0x0F	; 15
     492:	08 97       	sbiw	r24, 0x08	; 8
     494:	a1 05       	cpc	r26, r1
     496:	b1 05       	cpc	r27, r1
     498:	08 f4       	brcc	.+2      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     49a:	86 c0       	rjmp	.+268    	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     49c:	ab c0       	rjmp	.+342    	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	0b c1       	rjmp	.+534    	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	09 c1       	rjmp	.+530    	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	07 c1       	rjmp	.+526    	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
     4aa:	db 01       	movw	r26, r22
     4ac:	ca 01       	movw	r24, r20
     4ae:	4c 01       	movw	r8, r24
     4b0:	5d 01       	movw	r10, r26
     4b2:	28 2f       	mov	r18, r24
     4b4:	39 2d       	mov	r19, r9
     4b6:	4a 2d       	mov	r20, r10
     4b8:	5b 2d       	mov	r21, r11
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	01 e0       	ldi	r16, 0x01	; 1
     4c4:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <__ashldi3>
     4c8:	ad 80       	ldd	r10, Y+5	; 0x05
     4ca:	be 80       	ldd	r11, Y+6	; 0x06
     4cc:	cf 80       	ldd	r12, Y+7	; 0x07
     4ce:	d8 84       	ldd	r13, Y+8	; 0x08
     4d0:	e9 84       	ldd	r14, Y+9	; 0x09
     4d2:	fa 84       	ldd	r15, Y+10	; 0x0a
     4d4:	0b 85       	ldd	r16, Y+11	; 0x0b
     4d6:	1c 85       	ldd	r17, Y+12	; 0x0c
     4d8:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
     4dc:	22 2e       	mov	r2, r18
     4de:	33 2e       	mov	r3, r19
     4e0:	44 2e       	mov	r4, r20
     4e2:	55 2e       	mov	r5, r21
     4e4:	d6 2e       	mov	r13, r22
     4e6:	c7 2e       	mov	r12, r23
     4e8:	a8 2e       	mov	r10, r24
     4ea:	b9 2e       	mov	r11, r25
     4ec:	d3 01       	movw	r26, r6
     4ee:	ed 91       	ld	r30, X+
     4f0:	fc 91       	ld	r31, X
     4f2:	01 90       	ld	r0, Z+
     4f4:	f0 81       	ld	r31, Z
     4f6:	e0 2d       	mov	r30, r0
     4f8:	68 94       	set
     4fa:	ee 24       	eor	r14, r14
     4fc:	e1 f8       	bld	r14, 1
     4fe:	f1 2c       	mov	r15, r1
     500:	8e 01       	movw	r16, r28
     502:	0f 5f       	subi	r16, 0xFF	; 255
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	09 95       	icall
     508:	88 23       	and	r24, r24
     50a:	09 f4       	brne	.+2      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     50c:	d5 c0       	rjmp	.+426    	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
     50e:	89 80       	ldd	r8, Y+1	; 0x01
     510:	9a 80       	ldd	r9, Y+2	; 0x02
     512:	81 14       	cp	r8, r1
     514:	91 04       	cpc	r9, r1
     516:	29 f1       	breq	.+74     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     518:	c4 01       	movw	r24, r8
     51a:	40 96       	adiw	r24, 0x10	; 16
     51c:	08 97       	sbiw	r24, 0x08	; 8
     51e:	18 f1       	brcs	.+70     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     520:	b8 ef       	ldi	r27, 0xF8	; 248
     522:	8b 16       	cp	r8, r27
     524:	bf ef       	ldi	r27, 0xFF	; 255
     526:	9b 06       	cpc	r9, r27
     528:	08 f0       	brcs	.+2      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     52a:	6e c0       	rjmp	.+220    	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
     52c:	1a 82       	std	Y+2, r1	; 0x02
     52e:	19 82       	std	Y+1, r1	; 0x01
     530:	d3 01       	movw	r26, r6
     532:	ed 91       	ld	r30, X+
     534:	fc 91       	ld	r31, X
     536:	04 80       	ldd	r0, Z+4	; 0x04
     538:	f5 81       	ldd	r31, Z+5	; 0x05
     53a:	e0 2d       	mov	r30, r0
     53c:	22 2d       	mov	r18, r2
     53e:	33 2d       	mov	r19, r3
     540:	44 2d       	mov	r20, r4
     542:	55 2d       	mov	r21, r5
     544:	6d 2d       	mov	r22, r13
     546:	7c 2d       	mov	r23, r12
     548:	8a 2d       	mov	r24, r10
     54a:	9b 2d       	mov	r25, r11
     54c:	09 95       	icall
     54e:	c4 01       	movw	r24, r8
     550:	a0 e0       	ldi	r26, 0x00	; 0
     552:	b0 e0       	ldi	r27, 0x00	; 0
     554:	00 97       	sbiw	r24, 0x00	; 0
     556:	a1 05       	cpc	r26, r1
     558:	b1 05       	cpc	r27, r1
     55a:	09 f0       	breq	.+2      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     55c:	a8 cf       	rjmp	.-176    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	ab c0       	rjmp	.+342    	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	a9 c0       	rjmp	.+338    	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	a7 c0       	rjmp	.+334    	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	a5 c0       	rjmp	.+330    	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	a3 c0       	rjmp	.+326    	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
     572:	19 82       	std	Y+1, r1	; 0x01
     574:	1a 82       	std	Y+2, r1	; 0x02
     576:	1b 82       	std	Y+3, r1	; 0x03
     578:	1c 82       	std	Y+4, r1	; 0x04
     57a:	d3 01       	movw	r26, r6
     57c:	ed 91       	ld	r30, X+
     57e:	fc 91       	ld	r31, X
     580:	04 80       	ldd	r0, Z+4	; 0x04
     582:	f5 81       	ldd	r31, Z+5	; 0x05
     584:	e0 2d       	mov	r30, r0
     586:	68 94       	set
     588:	ee 24       	eor	r14, r14
     58a:	e2 f8       	bld	r14, 2
     58c:	f1 2c       	mov	r15, r1
     58e:	8e 01       	movw	r16, r28
     590:	0f 5f       	subi	r16, 0xFF	; 255
     592:	1f 4f       	sbci	r17, 0xFF	; 255
     594:	2d 2d       	mov	r18, r13
     596:	3c 2d       	mov	r19, r12
     598:	4d 85       	ldd	r20, Y+13	; 0x0d
     59a:	5e 85       	ldd	r21, Y+14	; 0x0e
     59c:	6f 85       	ldd	r22, Y+15	; 0x0f
     59e:	78 89       	ldd	r23, Y+16	; 0x10
     5a0:	89 89       	ldd	r24, Y+17	; 0x11
     5a2:	9a 89       	ldd	r25, Y+18	; 0x12
     5a4:	09 95       	icall
     5a6:	7b cf       	rjmp	.-266    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     5a8:	f3 01       	movw	r30, r6
     5aa:	86 a5       	ldd	r24, Z+46	; 0x2e
     5ac:	97 a5       	ldd	r25, Z+47	; 0x2f
     5ae:	a0 a9       	ldd	r26, Z+48	; 0x30
     5b0:	b1 a9       	ldd	r27, Z+49	; 0x31
     5b2:	89 2b       	or	r24, r25
     5b4:	8a 2b       	or	r24, r26
     5b6:	8b 2b       	or	r24, r27
     5b8:	09 f4       	brne	.+2      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     5ba:	5f c0       	rjmp	.+190    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     5bc:	da cf       	rjmp	.-76     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     5be:	19 82       	std	Y+1, r1	; 0x01
     5c0:	1a 82       	std	Y+2, r1	; 0x02
     5c2:	1b 82       	std	Y+3, r1	; 0x03
     5c4:	1c 82       	std	Y+4, r1	; 0x04
     5c6:	d3 01       	movw	r26, r6
     5c8:	ed 91       	ld	r30, X+
     5ca:	fc 91       	ld	r31, X
     5cc:	04 80       	ldd	r0, Z+4	; 0x04
     5ce:	f5 81       	ldd	r31, Z+5	; 0x05
     5d0:	e0 2d       	mov	r30, r0
     5d2:	68 94       	set
     5d4:	ee 24       	eor	r14, r14
     5d6:	e2 f8       	bld	r14, 2
     5d8:	f1 2c       	mov	r15, r1
     5da:	8e 01       	movw	r16, r28
     5dc:	0f 5f       	subi	r16, 0xFF	; 255
     5de:	1f 4f       	sbci	r17, 0xFF	; 255
     5e0:	2d 2d       	mov	r18, r13
     5e2:	3c 2d       	mov	r19, r12
     5e4:	4d 85       	ldd	r20, Y+13	; 0x0d
     5e6:	5e 85       	ldd	r21, Y+14	; 0x0e
     5e8:	6f 85       	ldd	r22, Y+15	; 0x0f
     5ea:	78 89       	ldd	r23, Y+16	; 0x10
     5ec:	89 89       	ldd	r24, Y+17	; 0x11
     5ee:	9a 89       	ldd	r25, Y+18	; 0x12
     5f0:	09 95       	icall
     5f2:	04 cf       	rjmp	.-504    	; 0x3fc <fat_free_clusters+0xa8>
     5f4:	f3 01       	movw	r30, r6
     5f6:	86 a5       	ldd	r24, Z+46	; 0x2e
     5f8:	97 a5       	ldd	r25, Z+47	; 0x2f
     5fa:	a0 a9       	ldd	r26, Z+48	; 0x30
     5fc:	b1 a9       	ldd	r27, Z+49	; 0x31
     5fe:	89 2b       	or	r24, r25
     600:	8a 2b       	or	r24, r26
     602:	8b 2b       	or	r24, r27
     604:	d1 f0       	breq	.+52     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     606:	db cf       	rjmp	.-74     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
     608:	1a 82       	std	Y+2, r1	; 0x02
     60a:	19 82       	std	Y+1, r1	; 0x01
     60c:	d3 01       	movw	r26, r6
     60e:	ed 91       	ld	r30, X+
     610:	fc 91       	ld	r31, X
     612:	04 80       	ldd	r0, Z+4	; 0x04
     614:	f5 81       	ldd	r31, Z+5	; 0x05
     616:	e0 2d       	mov	r30, r0
     618:	68 94       	set
     61a:	ee 24       	eor	r14, r14
     61c:	e1 f8       	bld	r14, 1
     61e:	f1 2c       	mov	r15, r1
     620:	8e 01       	movw	r16, r28
     622:	0f 5f       	subi	r16, 0xFF	; 255
     624:	1f 4f       	sbci	r17, 0xFF	; 255
     626:	22 2d       	mov	r18, r2
     628:	33 2d       	mov	r19, r3
     62a:	44 2d       	mov	r20, r4
     62c:	55 2d       	mov	r21, r5
     62e:	6d 2d       	mov	r22, r13
     630:	7c 2d       	mov	r23, r12
     632:	8a 2d       	mov	r24, r10
     634:	9b 2d       	mov	r25, r11
     636:	09 95       	icall
     638:	92 cf       	rjmp	.-220    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     63a:	f3 01       	movw	r30, r6
     63c:	26 a6       	std	Z+46, r2	; 0x2e
     63e:	37 a6       	std	Z+47, r3	; 0x2f
     640:	40 aa       	std	Z+48, r4	; 0x30
     642:	51 aa       	std	Z+49, r5	; 0x31
     644:	19 82       	std	Y+1, r1	; 0x01
     646:	1a 82       	std	Y+2, r1	; 0x02
     648:	1b 82       	std	Y+3, r1	; 0x03
     64a:	1c 82       	std	Y+4, r1	; 0x04
     64c:	01 90       	ld	r0, Z+
     64e:	f0 81       	ld	r31, Z
     650:	e0 2d       	mov	r30, r0
     652:	04 80       	ldd	r0, Z+4	; 0x04
     654:	f5 81       	ldd	r31, Z+5	; 0x05
     656:	e0 2d       	mov	r30, r0
     658:	68 94       	set
     65a:	ee 24       	eor	r14, r14
     65c:	e2 f8       	bld	r14, 2
     65e:	f1 2c       	mov	r15, r1
     660:	8e 01       	movw	r16, r28
     662:	0f 5f       	subi	r16, 0xFF	; 255
     664:	1f 4f       	sbci	r17, 0xFF	; 255
     666:	2d 2d       	mov	r18, r13
     668:	3c 2d       	mov	r19, r12
     66a:	4d 85       	ldd	r20, Y+13	; 0x0d
     66c:	5e 85       	ldd	r21, Y+14	; 0x0e
     66e:	6f 85       	ldd	r22, Y+15	; 0x0f
     670:	78 89       	ldd	r23, Y+16	; 0x10
     672:	89 89       	ldd	r24, Y+17	; 0x11
     674:	9a 89       	ldd	r25, Y+18	; 0x12
     676:	09 95       	icall
     678:	c1 ce       	rjmp	.-638    	; 0x3fc <fat_free_clusters+0xa8>
     67a:	26 a6       	std	Z+46, r2	; 0x2e
     67c:	37 a6       	std	Z+47, r3	; 0x2f
     67e:	40 aa       	std	Z+48, r4	; 0x30
     680:	51 aa       	std	Z+49, r5	; 0x31
     682:	19 82       	std	Y+1, r1	; 0x01
     684:	1a 82       	std	Y+2, r1	; 0x02
     686:	1b 82       	std	Y+3, r1	; 0x03
     688:	1c 82       	std	Y+4, r1	; 0x04
     68a:	01 90       	ld	r0, Z+
     68c:	f0 81       	ld	r31, Z
     68e:	e0 2d       	mov	r30, r0
     690:	04 80       	ldd	r0, Z+4	; 0x04
     692:	f5 81       	ldd	r31, Z+5	; 0x05
     694:	e0 2d       	mov	r30, r0
     696:	68 94       	set
     698:	ee 24       	eor	r14, r14
     69a:	e2 f8       	bld	r14, 2
     69c:	f1 2c       	mov	r15, r1
     69e:	8e 01       	movw	r16, r28
     6a0:	0f 5f       	subi	r16, 0xFF	; 255
     6a2:	1f 4f       	sbci	r17, 0xFF	; 255
     6a4:	2d 2d       	mov	r18, r13
     6a6:	3c 2d       	mov	r19, r12
     6a8:	4d 85       	ldd	r20, Y+13	; 0x0d
     6aa:	5e 85       	ldd	r21, Y+14	; 0x0e
     6ac:	6f 85       	ldd	r22, Y+15	; 0x0f
     6ae:	78 89       	ldd	r23, Y+16	; 0x10
     6b0:	89 89       	ldd	r24, Y+17	; 0x11
     6b2:	9a 89       	ldd	r25, Y+18	; 0x12
     6b4:	09 95       	icall
     6b6:	f3 ce       	rjmp	.-538    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     6b8:	62 96       	adiw	r28, 0x12	; 18
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	ff 90       	pop	r15
     6ce:	ef 90       	pop	r14
     6d0:	df 90       	pop	r13
     6d2:	cf 90       	pop	r12
     6d4:	bf 90       	pop	r11
     6d6:	af 90       	pop	r10
     6d8:	9f 90       	pop	r9
     6da:	8f 90       	pop	r8
     6dc:	7f 90       	pop	r7
     6de:	6f 90       	pop	r6
     6e0:	5f 90       	pop	r5
     6e2:	4f 90       	pop	r4
     6e4:	3f 90       	pop	r3
     6e6:	2f 90       	pop	r2
     6e8:	08 95       	ret

000006ea <fat_append_clusters>:
     6ea:	2f 92       	push	r2
     6ec:	3f 92       	push	r3
     6ee:	4f 92       	push	r4
     6f0:	5f 92       	push	r5
     6f2:	6f 92       	push	r6
     6f4:	7f 92       	push	r7
     6f6:	8f 92       	push	r8
     6f8:	9f 92       	push	r9
     6fa:	af 92       	push	r10
     6fc:	bf 92       	push	r11
     6fe:	cf 92       	push	r12
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	a9 97       	sbiw	r28, 0x29	; 41
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
     71e:	9b a3       	std	Y+35, r25	; 0x23
     720:	8a a3       	std	Y+34, r24	; 0x22
     722:	4e a3       	std	Y+38, r20	; 0x26
     724:	5f a3       	std	Y+39, r21	; 0x27
     726:	68 a7       	std	Y+40, r22	; 0x28
     728:	79 a7       	std	Y+41, r23	; 0x29
     72a:	0b 87       	std	Y+11, r16	; 0x0b
     72c:	1c 87       	std	Y+12, r17	; 0x0c
     72e:	2d 87       	std	Y+13, r18	; 0x0d
     730:	3e 87       	std	Y+14, r19	; 0x0e
     732:	00 97       	sbiw	r24, 0x00	; 0
     734:	09 f4       	brne	.+2      	; 0x738 <fat_append_clusters+0x4e>
     736:	1c c2       	rjmp	.+1080   	; 0xb70 <__stack+0x271>
     738:	dc 01       	movw	r26, r24
     73a:	ed 91       	ld	r30, X+
     73c:	fc 91       	ld	r31, X
     73e:	11 97       	sbiw	r26, 0x01	; 1
     740:	20 81       	ld	r18, Z
     742:	31 81       	ldd	r19, Z+1	; 0x01
     744:	3d 8f       	std	Y+29, r19	; 0x1d
     746:	2c 8f       	std	Y+28, r18	; 0x1c
     748:	44 81       	ldd	r20, Z+4	; 0x04
     74a:	55 81       	ldd	r21, Z+5	; 0x05
     74c:	5d a3       	std	Y+37, r21	; 0x25
     74e:	4c a3       	std	Y+36, r20	; 0x24
     750:	1a 96       	adiw	r26, 0x0a	; 10
     752:	5c 91       	ld	r21, X
     754:	1a 97       	sbiw	r26, 0x0a	; 10
     756:	5c 8b       	std	Y+20, r21	; 0x14
     758:	1b 96       	adiw	r26, 0x0b	; 11
     75a:	8c 91       	ld	r24, X
     75c:	1b 97       	sbiw	r26, 0x0b	; 11
     75e:	8d 8b       	std	Y+21, r24	; 0x15
     760:	1c 96       	adiw	r26, 0x0c	; 12
     762:	9c 91       	ld	r25, X
     764:	1c 97       	sbiw	r26, 0x0c	; 12
     766:	9e 8b       	std	Y+22, r25	; 0x16
     768:	1d 96       	adiw	r26, 0x0d	; 13
     76a:	ac 91       	ld	r26, X
     76c:	af 8b       	std	Y+23, r26	; 0x17
     76e:	aa a1       	ldd	r26, Y+34	; 0x22
     770:	bb a1       	ldd	r27, Y+35	; 0x23
     772:	1e 96       	adiw	r26, 0x0e	; 14
     774:	bc 91       	ld	r27, X
     776:	b8 8f       	std	Y+24, r27	; 0x18
     778:	aa a1       	ldd	r26, Y+34	; 0x22
     77a:	bb a1       	ldd	r27, Y+35	; 0x23
     77c:	1f 96       	adiw	r26, 0x0f	; 15
     77e:	bc 91       	ld	r27, X
     780:	b9 8f       	std	Y+25, r27	; 0x19
     782:	aa a1       	ldd	r26, Y+34	; 0x22
     784:	bb a1       	ldd	r27, Y+35	; 0x23
     786:	50 96       	adiw	r26, 0x10	; 16
     788:	bc 91       	ld	r27, X
     78a:	ba 8f       	std	Y+26, r27	; 0x1a
     78c:	aa a1       	ldd	r26, Y+34	; 0x22
     78e:	bb a1       	ldd	r27, Y+35	; 0x23
     790:	51 96       	adiw	r26, 0x11	; 17
     792:	bc 91       	ld	r27, X
     794:	bb 8f       	std	Y+27, r27	; 0x1b
     796:	aa a1       	ldd	r26, Y+34	; 0x22
     798:	bb a1       	ldd	r27, Y+35	; 0x23
     79a:	9e 96       	adiw	r26, 0x2e	; 46
     79c:	4d 90       	ld	r4, X+
     79e:	5d 90       	ld	r5, X+
     7a0:	6d 90       	ld	r6, X+
     7a2:	7c 90       	ld	r7, X
     7a4:	d1 97       	sbiw	r26, 0x31	; 49
     7a6:	b1 e0       	ldi	r27, 0x01	; 1
     7a8:	bb 8b       	std	Y+19, r27	; 0x13
     7aa:	80 85       	ldd	r24, Z+8	; 0x08
     7ac:	8b 30       	cpi	r24, 0x0B	; 11
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <fat_append_clusters+0xc8>
     7b0:	1b 8a       	std	Y+19, r1	; 0x13
     7b2:	eb 89       	ldd	r30, Y+19	; 0x13
     7b4:	ee 23       	and	r30, r30
     7b6:	a9 f0       	breq	.+42     	; 0x7e2 <fat_append_clusters+0xf8>
     7b8:	ea a1       	ldd	r30, Y+34	; 0x22
     7ba:	fb a1       	ldd	r31, Y+35	; 0x23
     7bc:	82 89       	ldd	r24, Z+18	; 0x12
     7be:	93 89       	ldd	r25, Z+19	; 0x13
     7c0:	a4 89       	ldd	r26, Z+20	; 0x14
     7c2:	b5 89       	ldd	r27, Z+21	; 0x15
     7c4:	9c 01       	movw	r18, r24
     7c6:	ad 01       	movw	r20, r26
     7c8:	56 95       	lsr	r21
     7ca:	47 95       	ror	r20
     7cc:	37 95       	ror	r19
     7ce:	27 95       	ror	r18
     7d0:	56 95       	lsr	r21
     7d2:	47 95       	ror	r20
     7d4:	37 95       	ror	r19
     7d6:	27 95       	ror	r18
     7d8:	2e 8f       	std	Y+30, r18	; 0x1e
     7da:	3f 8f       	std	Y+31, r19	; 0x1f
     7dc:	48 a3       	std	Y+32, r20	; 0x20
     7de:	59 a3       	std	Y+33, r21	; 0x21
     7e0:	10 c0       	rjmp	.+32     	; 0x802 <fat_append_clusters+0x118>
     7e2:	ea a1       	ldd	r30, Y+34	; 0x22
     7e4:	fb a1       	ldd	r31, Y+35	; 0x23
     7e6:	82 89       	ldd	r24, Z+18	; 0x12
     7e8:	93 89       	ldd	r25, Z+19	; 0x13
     7ea:	a4 89       	ldd	r26, Z+20	; 0x14
     7ec:	b5 89       	ldd	r27, Z+21	; 0x15
     7ee:	9c 01       	movw	r18, r24
     7f0:	ad 01       	movw	r20, r26
     7f2:	56 95       	lsr	r21
     7f4:	47 95       	ror	r20
     7f6:	37 95       	ror	r19
     7f8:	27 95       	ror	r18
     7fa:	2e 8f       	std	Y+30, r18	; 0x1e
     7fc:	3f 8f       	std	Y+31, r19	; 0x1f
     7fe:	48 a3       	std	Y+32, r20	; 0x20
     800:	59 a3       	std	Y+33, r21	; 0x21
     802:	aa a1       	ldd	r26, Y+34	; 0x22
     804:	bb a1       	ldd	r27, Y+35	; 0x23
     806:	9e 96       	adiw	r26, 0x2e	; 46
     808:	1d 92       	st	X+, r1
     80a:	1d 92       	st	X+, r1
     80c:	1d 92       	st	X+, r1
     80e:	1c 92       	st	X, r1
     810:	d1 97       	sbiw	r26, 0x31	; 49
     812:	2e 8d       	ldd	r18, Y+30	; 0x1e
     814:	3f 8d       	ldd	r19, Y+31	; 0x1f
     816:	48 a1       	ldd	r20, Y+32	; 0x20
     818:	59 a1       	ldd	r21, Y+33	; 0x21
     81a:	21 15       	cp	r18, r1
     81c:	31 05       	cpc	r19, r1
     81e:	41 05       	cpc	r20, r1
     820:	51 05       	cpc	r21, r1
     822:	09 f4       	brne	.+2      	; 0x826 <fat_append_clusters+0x13c>
     824:	1f c1       	rjmp	.+574    	; 0xa64 <__stack+0x165>
     826:	2f 83       	std	Y+7, r18	; 0x07
     828:	38 87       	std	Y+8, r19	; 0x08
     82a:	49 87       	std	Y+9, r20	; 0x09
     82c:	5a 87       	std	Y+10, r21	; 0x0a
     82e:	1f 86       	std	Y+15, r1	; 0x0f
     830:	18 8a       	std	Y+16, r1	; 0x10
     832:	19 8a       	std	Y+17, r1	; 0x11
     834:	1a 8a       	std	Y+18, r1	; 0x12
     836:	32 e0       	ldi	r19, 0x02	; 2
     838:	43 16       	cp	r4, r19
     83a:	51 04       	cpc	r5, r1
     83c:	61 04       	cpc	r6, r1
     83e:	71 04       	cpc	r7, r1
     840:	80 f0       	brcs	.+32     	; 0x862 <fat_append_clusters+0x178>
     842:	8e 8d       	ldd	r24, Y+30	; 0x1e
     844:	9f 8d       	ldd	r25, Y+31	; 0x1f
     846:	a8 a1       	ldd	r26, Y+32	; 0x20
     848:	b9 a1       	ldd	r27, Y+33	; 0x21
     84a:	48 16       	cp	r4, r24
     84c:	59 06       	cpc	r5, r25
     84e:	6a 06       	cpc	r6, r26
     850:	7b 06       	cpc	r7, r27
     852:	68 f0       	brcs	.+26     	; 0x86e <fat_append_clusters+0x184>
     854:	68 94       	set
     856:	44 24       	eor	r4, r4
     858:	41 f8       	bld	r4, 1
     85a:	51 2c       	mov	r5, r1
     85c:	61 2c       	mov	r6, r1
     85e:	71 2c       	mov	r7, r1
     860:	06 c0       	rjmp	.+12     	; 0x86e <fat_append_clusters+0x184>
     862:	68 94       	set
     864:	44 24       	eor	r4, r4
     866:	41 f8       	bld	r4, 1
     868:	51 2c       	mov	r5, r1
     86a:	61 2c       	mov	r6, r1
     86c:	71 2c       	mov	r7, r1
     86e:	9b 89       	ldd	r25, Y+19	; 0x13
     870:	99 23       	and	r25, r25
     872:	61 f1       	breq	.+88     	; 0x8cc <fat_append_clusters+0x1e2>
     874:	53 01       	movw	r10, r6
     876:	42 01       	movw	r8, r4
     878:	24 2d       	mov	r18, r4
     87a:	39 2d       	mov	r19, r9
     87c:	4a 2d       	mov	r20, r10
     87e:	5b 2d       	mov	r21, r11
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	02 e0       	ldi	r16, 0x02	; 2
     88a:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <__ashldi3>
     88e:	ac 88       	ldd	r10, Y+20	; 0x14
     890:	bd 88       	ldd	r11, Y+21	; 0x15
     892:	ce 88       	ldd	r12, Y+22	; 0x16
     894:	df 88       	ldd	r13, Y+23	; 0x17
     896:	e8 8c       	ldd	r14, Y+24	; 0x18
     898:	f9 8c       	ldd	r15, Y+25	; 0x19
     89a:	0a 8d       	ldd	r16, Y+26	; 0x1a
     89c:	1b 8d       	ldd	r17, Y+27	; 0x1b
     89e:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
     8a2:	d2 2e       	mov	r13, r18
     8a4:	c3 2e       	mov	r12, r19
     8a6:	b4 2e       	mov	r11, r20
     8a8:	a5 2e       	mov	r10, r21
     8aa:	96 2e       	mov	r9, r22
     8ac:	87 2e       	mov	r8, r23
     8ae:	38 2e       	mov	r3, r24
     8b0:	29 2e       	mov	r2, r25
     8b2:	68 94       	set
     8b4:	ee 24       	eor	r14, r14
     8b6:	e2 f8       	bld	r14, 2
     8b8:	f1 2c       	mov	r15, r1
     8ba:	8e 01       	movw	r16, r28
     8bc:	0d 5f       	subi	r16, 0xFD	; 253
     8be:	1f 4f       	sbci	r17, 0xFF	; 255
     8c0:	ec 8d       	ldd	r30, Y+28	; 0x1c
     8c2:	fd 8d       	ldd	r31, Y+29	; 0x1d
     8c4:	09 95       	icall
     8c6:	81 11       	cpse	r24, r1
     8c8:	62 c1       	rjmp	.+708    	; 0xb8e <__stack+0x28f>
     8ca:	57 c1       	rjmp	.+686    	; 0xb7a <__stack+0x27b>
     8cc:	53 01       	movw	r10, r6
     8ce:	42 01       	movw	r8, r4
     8d0:	24 2d       	mov	r18, r4
     8d2:	39 2d       	mov	r19, r9
     8d4:	4a 2d       	mov	r20, r10
     8d6:	5b 2d       	mov	r21, r11
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	01 e0       	ldi	r16, 0x01	; 1
     8e2:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <__ashldi3>
     8e6:	ac 88       	ldd	r10, Y+20	; 0x14
     8e8:	bd 88       	ldd	r11, Y+21	; 0x15
     8ea:	ce 88       	ldd	r12, Y+22	; 0x16
     8ec:	df 88       	ldd	r13, Y+23	; 0x17
     8ee:	e8 8c       	ldd	r14, Y+24	; 0x18
     8f0:	f9 8c       	ldd	r15, Y+25	; 0x19
     8f2:	0a 8d       	ldd	r16, Y+26	; 0x1a
     8f4:	1b 8d       	ldd	r17, Y+27	; 0x1b
     8f6:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
     8fa:	d2 2e       	mov	r13, r18
     8fc:	c3 2e       	mov	r12, r19
     8fe:	b4 2e       	mov	r11, r20
     900:	a5 2e       	mov	r10, r21
     902:	96 2e       	mov	r9, r22
     904:	87 2e       	mov	r8, r23
     906:	38 2e       	mov	r3, r24
     908:	29 2e       	mov	r2, r25
     90a:	68 94       	set
     90c:	ee 24       	eor	r14, r14
     90e:	e1 f8       	bld	r14, 1
     910:	f1 2c       	mov	r15, r1
     912:	8e 01       	movw	r16, r28
     914:	0f 5f       	subi	r16, 0xFF	; 255
     916:	1f 4f       	sbci	r17, 0xFF	; 255
     918:	ec 8d       	ldd	r30, Y+28	; 0x1c
     91a:	fd 8d       	ldd	r31, Y+29	; 0x1d
     91c:	09 95       	icall
     91e:	81 11       	cpse	r24, r1
     920:	40 c1       	rjmp	.+640    	; 0xba2 <__stack+0x2a3>
     922:	30 c1       	rjmp	.+608    	; 0xb84 <__stack+0x285>
     924:	2b 85       	ldd	r18, Y+11	; 0x0b
     926:	3c 85       	ldd	r19, Y+12	; 0x0c
     928:	4d 85       	ldd	r20, Y+13	; 0x0d
     92a:	5e 85       	ldd	r21, Y+14	; 0x0e
     92c:	23 2b       	or	r18, r19
     92e:	24 2b       	or	r18, r20
     930:	25 2b       	or	r18, r21
     932:	49 f4       	brne	.+18     	; 0x946 <__stack+0x47>
     934:	aa a1       	ldd	r26, Y+34	; 0x22
     936:	bb a1       	ldd	r27, Y+35	; 0x23
     938:	9e 96       	adiw	r26, 0x2e	; 46
     93a:	4d 92       	st	X+, r4
     93c:	5d 92       	st	X+, r5
     93e:	6d 92       	st	X+, r6
     940:	7c 92       	st	X, r7
     942:	d1 97       	sbiw	r26, 0x31	; 49
     944:	9c c0       	rjmp	.+312    	; 0xa7e <__stack+0x17f>
     946:	2f 85       	ldd	r18, Y+15	; 0x0f
     948:	38 89       	ldd	r19, Y+16	; 0x10
     94a:	49 89       	ldd	r20, Y+17	; 0x11
     94c:	5a 89       	ldd	r21, Y+18	; 0x12
     94e:	23 2b       	or	r18, r19
     950:	24 2b       	or	r18, r20
     952:	25 2b       	or	r18, r21
     954:	49 f4       	brne	.+18     	; 0x968 <__stack+0x69>
     956:	8f ef       	ldi	r24, 0xFF	; 255
     958:	9f ef       	ldi	r25, 0xFF	; 255
     95a:	af ef       	ldi	r26, 0xFF	; 255
     95c:	bf e0       	ldi	r27, 0x0F	; 15
     95e:	8b 83       	std	Y+3, r24	; 0x03
     960:	9c 83       	std	Y+4, r25	; 0x04
     962:	ad 83       	std	Y+5, r26	; 0x05
     964:	be 83       	std	Y+6, r27	; 0x06
     966:	08 c0       	rjmp	.+16     	; 0x978 <__stack+0x79>
     968:	2f 85       	ldd	r18, Y+15	; 0x0f
     96a:	38 89       	ldd	r19, Y+16	; 0x10
     96c:	49 89       	ldd	r20, Y+17	; 0x11
     96e:	5a 89       	ldd	r21, Y+18	; 0x12
     970:	2b 83       	std	Y+3, r18	; 0x03
     972:	3c 83       	std	Y+4, r19	; 0x04
     974:	4d 83       	std	Y+5, r20	; 0x05
     976:	5e 83       	std	Y+6, r21	; 0x06
     978:	68 94       	set
     97a:	ee 24       	eor	r14, r14
     97c:	e2 f8       	bld	r14, 2
     97e:	f1 2c       	mov	r15, r1
     980:	8e 01       	movw	r16, r28
     982:	0d 5f       	subi	r16, 0xFD	; 253
     984:	1f 4f       	sbci	r17, 0xFF	; 255
     986:	2d 2d       	mov	r18, r13
     988:	3c 2d       	mov	r19, r12
     98a:	4b 2d       	mov	r20, r11
     98c:	5a 2d       	mov	r21, r10
     98e:	69 2d       	mov	r22, r9
     990:	78 2d       	mov	r23, r8
     992:	83 2d       	mov	r24, r3
     994:	92 2d       	mov	r25, r2
     996:	ec a1       	ldd	r30, Y+36	; 0x24
     998:	fd a1       	ldd	r31, Y+37	; 0x25
     99a:	09 95       	icall
     99c:	81 11       	cpse	r24, r1
     99e:	38 c0       	rjmp	.+112    	; 0xa10 <__stack+0x111>
     9a0:	da c0       	rjmp	.+436    	; 0xb56 <__stack+0x257>
     9a2:	2b 85       	ldd	r18, Y+11	; 0x0b
     9a4:	3c 85       	ldd	r19, Y+12	; 0x0c
     9a6:	4d 85       	ldd	r20, Y+13	; 0x0d
     9a8:	5e 85       	ldd	r21, Y+14	; 0x0e
     9aa:	23 2b       	or	r18, r19
     9ac:	24 2b       	or	r18, r20
     9ae:	25 2b       	or	r18, r21
     9b0:	49 f4       	brne	.+18     	; 0x9c4 <__stack+0xc5>
     9b2:	aa a1       	ldd	r26, Y+34	; 0x22
     9b4:	bb a1       	ldd	r27, Y+35	; 0x23
     9b6:	9e 96       	adiw	r26, 0x2e	; 46
     9b8:	4d 92       	st	X+, r4
     9ba:	5d 92       	st	X+, r5
     9bc:	6d 92       	st	X+, r6
     9be:	7c 92       	st	X, r7
     9c0:	d1 97       	sbiw	r26, 0x31	; 49
     9c2:	5d c0       	rjmp	.+186    	; 0xa7e <__stack+0x17f>
     9c4:	2f 85       	ldd	r18, Y+15	; 0x0f
     9c6:	38 89       	ldd	r19, Y+16	; 0x10
     9c8:	49 89       	ldd	r20, Y+17	; 0x11
     9ca:	5a 89       	ldd	r21, Y+18	; 0x12
     9cc:	23 2b       	or	r18, r19
     9ce:	24 2b       	or	r18, r20
     9d0:	25 2b       	or	r18, r21
     9d2:	29 f4       	brne	.+10     	; 0x9de <__stack+0xdf>
     9d4:	4f ef       	ldi	r20, 0xFF	; 255
     9d6:	5f ef       	ldi	r21, 0xFF	; 255
     9d8:	5a 83       	std	Y+2, r21	; 0x02
     9da:	49 83       	std	Y+1, r20	; 0x01
     9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <__stack+0xe7>
     9de:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e0:	98 89       	ldd	r25, Y+16	; 0x10
     9e2:	9a 83       	std	Y+2, r25	; 0x02
     9e4:	89 83       	std	Y+1, r24	; 0x01
     9e6:	68 94       	set
     9e8:	ee 24       	eor	r14, r14
     9ea:	e1 f8       	bld	r14, 1
     9ec:	f1 2c       	mov	r15, r1
     9ee:	8e 01       	movw	r16, r28
     9f0:	0f 5f       	subi	r16, 0xFF	; 255
     9f2:	1f 4f       	sbci	r17, 0xFF	; 255
     9f4:	2d 2d       	mov	r18, r13
     9f6:	3c 2d       	mov	r19, r12
     9f8:	4b 2d       	mov	r20, r11
     9fa:	5a 2d       	mov	r21, r10
     9fc:	69 2d       	mov	r22, r9
     9fe:	78 2d       	mov	r23, r8
     a00:	83 2d       	mov	r24, r3
     a02:	92 2d       	mov	r25, r2
     a04:	ec a1       	ldd	r30, Y+36	; 0x24
     a06:	fd a1       	ldd	r31, Y+37	; 0x25
     a08:	09 95       	icall
     a0a:	88 23       	and	r24, r24
     a0c:	09 f4       	brne	.+2      	; 0xa10 <__stack+0x111>
     a0e:	a3 c0       	rjmp	.+326    	; 0xb56 <__stack+0x257>
     a10:	2b 85       	ldd	r18, Y+11	; 0x0b
     a12:	3c 85       	ldd	r19, Y+12	; 0x0c
     a14:	4d 85       	ldd	r20, Y+13	; 0x0d
     a16:	5e 85       	ldd	r21, Y+14	; 0x0e
     a18:	21 50       	subi	r18, 0x01	; 1
     a1a:	31 09       	sbc	r19, r1
     a1c:	41 09       	sbc	r20, r1
     a1e:	51 09       	sbc	r21, r1
     a20:	2b 87       	std	Y+11, r18	; 0x0b
     a22:	3c 87       	std	Y+12, r19	; 0x0c
     a24:	4d 87       	std	Y+13, r20	; 0x0d
     a26:	5e 87       	std	Y+14, r21	; 0x0e
     a28:	4f 86       	std	Y+15, r4	; 0x0f
     a2a:	58 8a       	std	Y+16, r5	; 0x10
     a2c:	69 8a       	std	Y+17, r6	; 0x11
     a2e:	7a 8a       	std	Y+18, r7	; 0x12
     a30:	8f 81       	ldd	r24, Y+7	; 0x07
     a32:	98 85       	ldd	r25, Y+8	; 0x08
     a34:	a9 85       	ldd	r26, Y+9	; 0x09
     a36:	ba 85       	ldd	r27, Y+10	; 0x0a
     a38:	01 97       	sbiw	r24, 0x01	; 1
     a3a:	a1 09       	sbc	r26, r1
     a3c:	b1 09       	sbc	r27, r1
     a3e:	8f 83       	std	Y+7, r24	; 0x07
     a40:	98 87       	std	Y+8, r25	; 0x08
     a42:	a9 87       	std	Y+9, r26	; 0x09
     a44:	ba 87       	std	Y+10, r27	; 0x0a
     a46:	9f ef       	ldi	r25, 0xFF	; 255
     a48:	49 1a       	sub	r4, r25
     a4a:	59 0a       	sbc	r5, r25
     a4c:	69 0a       	sbc	r6, r25
     a4e:	79 0a       	sbc	r7, r25
     a50:	2f 81       	ldd	r18, Y+7	; 0x07
     a52:	38 85       	ldd	r19, Y+8	; 0x08
     a54:	49 85       	ldd	r20, Y+9	; 0x09
     a56:	5a 85       	ldd	r21, Y+10	; 0x0a
     a58:	23 2b       	or	r18, r19
     a5a:	24 2b       	or	r18, r20
     a5c:	25 2b       	or	r18, r21
     a5e:	09 f0       	breq	.+2      	; 0xa62 <__stack+0x163>
     a60:	ea ce       	rjmp	.-556    	; 0x836 <fat_append_clusters+0x14c>
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__stack+0x16d>
     a64:	1f 86       	std	Y+15, r1	; 0x0f
     a66:	18 8a       	std	Y+16, r1	; 0x10
     a68:	19 8a       	std	Y+17, r1	; 0x11
     a6a:	1a 8a       	std	Y+18, r1	; 0x12
     a6c:	8b 85       	ldd	r24, Y+11	; 0x0b
     a6e:	9c 85       	ldd	r25, Y+12	; 0x0c
     a70:	ad 85       	ldd	r26, Y+13	; 0x0d
     a72:	be 85       	ldd	r27, Y+14	; 0x0e
     a74:	89 2b       	or	r24, r25
     a76:	8a 2b       	or	r24, r26
     a78:	8b 2b       	or	r24, r27
     a7a:	09 f0       	breq	.+2      	; 0xa7e <__stack+0x17f>
     a7c:	6c c0       	rjmp	.+216    	; 0xb56 <__stack+0x257>
     a7e:	2e a1       	ldd	r18, Y+38	; 0x26
     a80:	3f a1       	ldd	r19, Y+39	; 0x27
     a82:	48 a5       	ldd	r20, Y+40	; 0x28
     a84:	59 a5       	ldd	r21, Y+41	; 0x29
     a86:	22 30       	cpi	r18, 0x02	; 2
     a88:	31 05       	cpc	r19, r1
     a8a:	41 05       	cpc	r20, r1
     a8c:	51 05       	cpc	r21, r1
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__stack+0x193>
     a90:	5d c0       	rjmp	.+186    	; 0xb4c <__stack+0x24d>
     a92:	3b 89       	ldd	r19, Y+19	; 0x13
     a94:	33 23       	and	r19, r19
     a96:	79 f1       	breq	.+94     	; 0xaf6 <__stack+0x1f7>
     a98:	8f 85       	ldd	r24, Y+15	; 0x0f
     a9a:	98 89       	ldd	r25, Y+16	; 0x10
     a9c:	a9 89       	ldd	r26, Y+17	; 0x11
     a9e:	ba 89       	ldd	r27, Y+18	; 0x12
     aa0:	8b 83       	std	Y+3, r24	; 0x03
     aa2:	9c 83       	std	Y+4, r25	; 0x04
     aa4:	ad 83       	std	Y+5, r26	; 0x05
     aa6:	be 83       	std	Y+6, r27	; 0x06
     aa8:	2e a1       	ldd	r18, Y+38	; 0x26
     aaa:	3f a1       	ldd	r19, Y+39	; 0x27
     aac:	48 a5       	ldd	r20, Y+40	; 0x28
     aae:	59 a5       	ldd	r21, Y+41	; 0x29
     ab0:	49 01       	movw	r8, r18
     ab2:	5a 01       	movw	r10, r20
     ab4:	39 2d       	mov	r19, r9
     ab6:	4a 2d       	mov	r20, r10
     ab8:	5b 2d       	mov	r21, r11
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	02 e0       	ldi	r16, 0x02	; 2
     ac4:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <__ashldi3>
     ac8:	ac 88       	ldd	r10, Y+20	; 0x14
     aca:	bd 88       	ldd	r11, Y+21	; 0x15
     acc:	ce 88       	ldd	r12, Y+22	; 0x16
     ace:	df 88       	ldd	r13, Y+23	; 0x17
     ad0:	e8 8c       	ldd	r14, Y+24	; 0x18
     ad2:	f9 8c       	ldd	r15, Y+25	; 0x19
     ad4:	0a 8d       	ldd	r16, Y+26	; 0x1a
     ad6:	1b 8d       	ldd	r17, Y+27	; 0x1b
     ad8:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
     adc:	68 94       	set
     ade:	ee 24       	eor	r14, r14
     ae0:	e2 f8       	bld	r14, 2
     ae2:	f1 2c       	mov	r15, r1
     ae4:	8e 01       	movw	r16, r28
     ae6:	0d 5f       	subi	r16, 0xFD	; 253
     ae8:	1f 4f       	sbci	r17, 0xFF	; 255
     aea:	ec a1       	ldd	r30, Y+36	; 0x24
     aec:	fd a1       	ldd	r31, Y+37	; 0x25
     aee:	09 95       	icall
     af0:	88 23       	and	r24, r24
     af2:	89 f1       	breq	.+98     	; 0xb56 <__stack+0x257>
     af4:	2b c0       	rjmp	.+86     	; 0xb4c <__stack+0x24d>
     af6:	2f 85       	ldd	r18, Y+15	; 0x0f
     af8:	38 89       	ldd	r19, Y+16	; 0x10
     afa:	3a 83       	std	Y+2, r19	; 0x02
     afc:	29 83       	std	Y+1, r18	; 0x01
     afe:	8e a1       	ldd	r24, Y+38	; 0x26
     b00:	9f a1       	ldd	r25, Y+39	; 0x27
     b02:	a8 a5       	ldd	r26, Y+40	; 0x28
     b04:	b9 a5       	ldd	r27, Y+41	; 0x29
     b06:	4c 01       	movw	r8, r24
     b08:	5d 01       	movw	r10, r26
     b0a:	28 2f       	mov	r18, r24
     b0c:	39 2d       	mov	r19, r9
     b0e:	4a 2d       	mov	r20, r10
     b10:	5b 2d       	mov	r21, r11
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	01 e0       	ldi	r16, 0x01	; 1
     b1c:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <__ashldi3>
     b20:	ac 88       	ldd	r10, Y+20	; 0x14
     b22:	bd 88       	ldd	r11, Y+21	; 0x15
     b24:	ce 88       	ldd	r12, Y+22	; 0x16
     b26:	df 88       	ldd	r13, Y+23	; 0x17
     b28:	e8 8c       	ldd	r14, Y+24	; 0x18
     b2a:	f9 8c       	ldd	r15, Y+25	; 0x19
     b2c:	0a 8d       	ldd	r16, Y+26	; 0x1a
     b2e:	1b 8d       	ldd	r17, Y+27	; 0x1b
     b30:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
     b34:	68 94       	set
     b36:	ee 24       	eor	r14, r14
     b38:	e1 f8       	bld	r14, 1
     b3a:	f1 2c       	mov	r15, r1
     b3c:	8e 01       	movw	r16, r28
     b3e:	0f 5f       	subi	r16, 0xFF	; 255
     b40:	1f 4f       	sbci	r17, 0xFF	; 255
     b42:	ec a1       	ldd	r30, Y+36	; 0x24
     b44:	fd a1       	ldd	r31, Y+37	; 0x25
     b46:	09 95       	icall
     b48:	88 23       	and	r24, r24
     b4a:	29 f0       	breq	.+10     	; 0xb56 <__stack+0x257>
     b4c:	6f 85       	ldd	r22, Y+15	; 0x0f
     b4e:	78 89       	ldd	r23, Y+16	; 0x10
     b50:	89 89       	ldd	r24, Y+17	; 0x11
     b52:	9a 89       	ldd	r25, Y+18	; 0x12
     b54:	2c c0       	rjmp	.+88     	; 0xbae <__stack+0x2af>
     b56:	4f 85       	ldd	r20, Y+15	; 0x0f
     b58:	58 89       	ldd	r21, Y+16	; 0x10
     b5a:	69 89       	ldd	r22, Y+17	; 0x11
     b5c:	7a 89       	ldd	r23, Y+18	; 0x12
     b5e:	8a a1       	ldd	r24, Y+34	; 0x22
     b60:	9b a1       	ldd	r25, Y+35	; 0x23
     b62:	0e 94 aa 01 	call	0x354	; 0x354 <fat_free_clusters>
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	1f c0       	rjmp	.+62     	; 0xbae <__stack+0x2af>
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	1a c0       	rjmp	.+52     	; 0xbae <__stack+0x2af>
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	15 c0       	rjmp	.+42     	; 0xbae <__stack+0x2af>
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	10 c0       	rjmp	.+32     	; 0xbae <__stack+0x2af>
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	9c 81       	ldd	r25, Y+4	; 0x04
     b92:	ad 81       	ldd	r26, Y+5	; 0x05
     b94:	be 81       	ldd	r27, Y+6	; 0x06
     b96:	89 2b       	or	r24, r25
     b98:	8a 2b       	or	r24, r26
     b9a:	8b 2b       	or	r24, r27
     b9c:	09 f0       	breq	.+2      	; 0xba0 <__stack+0x2a1>
     b9e:	48 cf       	rjmp	.-368    	; 0xa30 <__stack+0x131>
     ba0:	c1 ce       	rjmp	.-638    	; 0x924 <__stack+0x25>
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	9a 81       	ldd	r25, Y+2	; 0x02
     ba6:	89 2b       	or	r24, r25
     ba8:	09 f0       	breq	.+2      	; 0xbac <__stack+0x2ad>
     baa:	42 cf       	rjmp	.-380    	; 0xa30 <__stack+0x131>
     bac:	fa ce       	rjmp	.-524    	; 0x9a2 <__stack+0xa3>
     bae:	a9 96       	adiw	r28, 0x29	; 41
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	ff 90       	pop	r15
     bc4:	ef 90       	pop	r14
     bc6:	df 90       	pop	r13
     bc8:	cf 90       	pop	r12
     bca:	bf 90       	pop	r11
     bcc:	af 90       	pop	r10
     bce:	9f 90       	pop	r9
     bd0:	8f 90       	pop	r8
     bd2:	7f 90       	pop	r7
     bd4:	6f 90       	pop	r6
     bd6:	5f 90       	pop	r5
     bd8:	4f 90       	pop	r4
     bda:	3f 90       	pop	r3
     bdc:	2f 90       	pop	r2
     bde:	08 95       	ret

00000be0 <fat_clear_cluster_callback>:
     be0:	80 e1       	ldi	r24, 0x10	; 16
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	08 95       	ret

00000be6 <fat_cluster_offset>:
     be6:	2f 92       	push	r2
     be8:	3f 92       	push	r3
     bea:	4f 92       	push	r4
     bec:	5f 92       	push	r5
     bee:	6f 92       	push	r6
     bf0:	7f 92       	push	r7
     bf2:	8f 92       	push	r8
     bf4:	9f 92       	push	r9
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	59 f1       	breq	.+86     	; 0xc64 <fat_cluster_offset+0x7e>
     c0e:	42 30       	cpi	r20, 0x02	; 2
     c10:	51 05       	cpc	r21, r1
     c12:	61 05       	cpc	r22, r1
     c14:	71 05       	cpc	r23, r1
     c16:	78 f1       	brcs	.+94     	; 0xc76 <fat_cluster_offset+0x90>
     c18:	ec 01       	movw	r28, r24
     c1a:	42 50       	subi	r20, 0x02	; 2
     c1c:	51 09       	sbc	r21, r1
     c1e:	61 09       	sbc	r22, r1
     c20:	71 09       	sbc	r23, r1
     c22:	1a 01       	movw	r2, r20
     c24:	2b 01       	movw	r4, r22
     c26:	08 8d       	ldd	r16, Y+24	; 0x18
     c28:	19 8d       	ldd	r17, Y+25	; 0x19
     c2a:	a0 2e       	mov	r10, r16
     c2c:	b1 2e       	mov	r11, r17
     c2e:	c1 2c       	mov	r12, r1
     c30:	d1 2c       	mov	r13, r1
     c32:	e1 2c       	mov	r14, r1
     c34:	f1 2c       	mov	r15, r1
     c36:	00 e0       	ldi	r16, 0x00	; 0
     c38:	10 e0       	ldi	r17, 0x00	; 0
     c3a:	22 2d       	mov	r18, r2
     c3c:	33 2d       	mov	r19, r3
     c3e:	44 2d       	mov	r20, r4
     c40:	55 2d       	mov	r21, r5
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__muldi3>
     c4e:	aa 8c       	ldd	r10, Y+26	; 0x1a
     c50:	bb 8c       	ldd	r11, Y+27	; 0x1b
     c52:	cc 8c       	ldd	r12, Y+28	; 0x1c
     c54:	dd 8c       	ldd	r13, Y+29	; 0x1d
     c56:	ee 8c       	ldd	r14, Y+30	; 0x1e
     c58:	ff 8c       	ldd	r15, Y+31	; 0x1f
     c5a:	08 a1       	ldd	r16, Y+32	; 0x20
     c5c:	19 a1       	ldd	r17, Y+33	; 0x21
     c5e:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
     c62:	11 c0       	rjmp	.+34     	; 0xc86 <fat_cluster_offset+0xa0>
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	08 c0       	rjmp	.+16     	; 0xc86 <fat_cluster_offset+0xa0>
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	ff 90       	pop	r15
     c90:	ef 90       	pop	r14
     c92:	df 90       	pop	r13
     c94:	cf 90       	pop	r12
     c96:	bf 90       	pop	r11
     c98:	af 90       	pop	r10
     c9a:	9f 90       	pop	r9
     c9c:	8f 90       	pop	r8
     c9e:	7f 90       	pop	r7
     ca0:	6f 90       	pop	r6
     ca2:	5f 90       	pop	r5
     ca4:	4f 90       	pop	r4
     ca6:	3f 90       	pop	r3
     ca8:	2f 90       	pop	r2
     caa:	08 95       	ret

00000cac <fat_calc_83_checksum>:
     cac:	ac 01       	movw	r20, r24
     cae:	fc 01       	movw	r30, r24
     cb0:	81 91       	ld	r24, Z+
     cb2:	45 5f       	subi	r20, 0xF5	; 245
     cb4:	5f 4f       	sbci	r21, 0xFF	; 255
     cb6:	90 e8       	ldi	r25, 0x80	; 128
     cb8:	89 9f       	mul	r24, r25
     cba:	90 01       	movw	r18, r0
     cbc:	11 24       	eor	r1, r1
     cbe:	98 2f       	mov	r25, r24
     cc0:	96 95       	lsr	r25
     cc2:	92 2b       	or	r25, r18
     cc4:	21 91       	ld	r18, Z+
     cc6:	89 2f       	mov	r24, r25
     cc8:	82 0f       	add	r24, r18
     cca:	e4 17       	cp	r30, r20
     ccc:	f5 07       	cpc	r31, r21
     cce:	99 f7       	brne	.-26     	; 0xcb6 <fat_calc_83_checksum+0xa>
     cd0:	08 95       	ret

00000cd2 <fat_clear_cluster>:
     cd2:	af 92       	push	r10
     cd4:	bf 92       	push	r11
     cd6:	cf 92       	push	r12
     cd8:	df 92       	push	r13
     cda:	ef 92       	push	r14
     cdc:	ff 92       	push	r15
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	60 97       	sbiw	r28, 0x10	; 16
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	de bf       	out	0x3e, r29	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	42 30       	cpi	r20, 0x02	; 2
     cf8:	51 05       	cpc	r21, r1
     cfa:	61 05       	cpc	r22, r1
     cfc:	71 05       	cpc	r23, r1
     cfe:	00 f1       	brcs	.+64     	; 0xd40 <fat_clear_cluster+0x6e>
     d00:	7c 01       	movw	r14, r24
     d02:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <fat_cluster_offset>
     d06:	8e 01       	movw	r16, r28
     d08:	0f 5f       	subi	r16, 0xFF	; 255
     d0a:	1f 4f       	sbci	r17, 0xFF	; 255
     d0c:	e0 e1       	ldi	r30, 0x10	; 16
     d0e:	d8 01       	movw	r26, r16
     d10:	1d 92       	st	X+, r1
     d12:	ea 95       	dec	r30
     d14:	e9 f7       	brne	.-6      	; 0xd10 <fat_clear_cluster+0x3e>
     d16:	d7 01       	movw	r26, r14
     d18:	ed 91       	ld	r30, X+
     d1a:	fc 91       	ld	r31, X
     d1c:	11 97       	sbiw	r26, 0x01	; 1
     d1e:	58 96       	adiw	r26, 0x18	; 24
     d20:	ed 90       	ld	r14, X+
     d22:	fc 90       	ld	r15, X
     d24:	59 97       	sbiw	r26, 0x19	; 25
     d26:	06 80       	ldd	r0, Z+6	; 0x06
     d28:	f7 81       	ldd	r31, Z+7	; 0x07
     d2a:	e0 2d       	mov	r30, r0
     d2c:	a1 2c       	mov	r10, r1
     d2e:	b1 2c       	mov	r11, r1
     d30:	0f 2e       	mov	r0, r31
     d32:	f0 ef       	ldi	r31, 0xF0	; 240
     d34:	cf 2e       	mov	r12, r31
     d36:	f5 e0       	ldi	r31, 0x05	; 5
     d38:	df 2e       	mov	r13, r31
     d3a:	f0 2d       	mov	r31, r0
     d3c:	09 95       	icall
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <fat_clear_cluster+0x70>
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	60 96       	adiw	r28, 0x10	; 16
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	df 90       	pop	r13
     d5c:	cf 90       	pop	r12
     d5e:	bf 90       	pop	r11
     d60:	af 90       	pop	r10
     d62:	08 95       	ret

00000d64 <fat_dir_entry_read_callback>:
     d64:	2f 92       	push	r2
     d66:	3f 92       	push	r3
     d68:	4f 92       	push	r4
     d6a:	5f 92       	push	r5
     d6c:	6f 92       	push	r6
     d6e:	7f 92       	push	r7
     d70:	8f 92       	push	r8
     d72:	9f 92       	push	r9
     d74:	af 92       	push	r10
     d76:	bf 92       	push	r11
     d78:	cf 92       	push	r12
     d7a:	df 92       	push	r13
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	2d 97       	sbiw	r28, 0x0d	; 13
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
     d98:	f7 01       	movw	r30, r14
     d9a:	a0 80       	ld	r10, Z
     d9c:	b1 80       	ldd	r11, Z+1	; 0x01
     d9e:	a2 81       	ldd	r26, Z+2	; 0x02
     da0:	b3 81       	ldd	r27, Z+3	; 0x03
     da2:	90 96       	adiw	r26, 0x20	; 32
     da4:	b3 83       	std	Z+3, r27	; 0x03
     da6:	a2 83       	std	Z+2, r26	; 0x02
     da8:	dc 01       	movw	r26, r24
     daa:	fc 90       	ld	r15, X
     dac:	b5 ee       	ldi	r27, 0xE5	; 229
     dae:	fb 16       	cp	r15, r27
     db0:	11 f0       	breq	.+4      	; 0xdb6 <fat_dir_entry_read_callback+0x52>
     db2:	f1 10       	cpse	r15, r1
     db4:	03 c0       	rjmp	.+6      	; 0xdbc <fat_dir_entry_read_callback+0x58>
     db6:	14 82       	std	Z+4, r1	; 0x04
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	37 c1       	rjmp	.+622    	; 0x102a <fat_dir_entry_read_callback+0x2c6>
     dbc:	45 01       	movw	r8, r10
     dbe:	dc 01       	movw	r26, r24
     dc0:	1b 96       	adiw	r26, 0x0b	; 11
     dc2:	fc 90       	ld	r15, X
     dc4:	bf e0       	ldi	r27, 0x0F	; 15
     dc6:	fb 12       	cpse	r15, r27
     dc8:	48 c0       	rjmp	.+144    	; 0xe5a <fat_dir_entry_read_callback+0xf6>
     dca:	f4 80       	ldd	r15, Z+4	; 0x04
     dcc:	ff 20       	and	r15, r15
     dce:	29 f0       	breq	.+10     	; 0xdda <fat_dir_entry_read_callback+0x76>
     dd0:	dc 01       	movw	r26, r24
     dd2:	1d 96       	adiw	r26, 0x0d	; 13
     dd4:	ec 90       	ld	r14, X
     dd6:	fe 14       	cp	r15, r14
     dd8:	a9 f0       	breq	.+42     	; 0xe04 <fat_dir_entry_read_callback+0xa0>
     dda:	0f 2e       	mov	r0, r31
     ddc:	f1 e3       	ldi	r31, 0x31	; 49
     dde:	ff 2e       	mov	r15, r31
     de0:	f0 2d       	mov	r31, r0
     de2:	d5 01       	movw	r26, r10
     de4:	1d 92       	st	X+, r1
     de6:	fa 94       	dec	r15
     de8:	e9 f7       	brne	.-6      	; 0xde4 <fat_dir_entry_read_callback+0x80>
     dea:	dc 01       	movw	r26, r24
     dec:	1d 96       	adiw	r26, 0x0d	; 13
     dee:	fc 90       	ld	r15, X
     df0:	f4 82       	std	Z+4, r15	; 0x04
     df2:	f5 01       	movw	r30, r10
     df4:	01 a7       	std	Z+41, r16	; 0x29
     df6:	12 a7       	std	Z+42, r17	; 0x2a
     df8:	23 a7       	std	Z+43, r18	; 0x2b
     dfa:	34 a7       	std	Z+44, r19	; 0x2c
     dfc:	45 a7       	std	Z+45, r20	; 0x2d
     dfe:	56 a7       	std	Z+46, r21	; 0x2e
     e00:	67 a7       	std	Z+47, r22	; 0x2f
     e02:	70 ab       	std	Z+48, r23	; 0x30
     e04:	dc 01       	movw	r26, r24
     e06:	2c 91       	ld	r18, X
     e08:	2f 73       	andi	r18, 0x3F	; 63
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	21 50       	subi	r18, 0x01	; 1
     e0e:	31 09       	sbc	r19, r1
     e10:	4d e0       	ldi	r20, 0x0D	; 13
     e12:	42 9f       	mul	r20, r18
     e14:	b0 01       	movw	r22, r0
     e16:	43 9f       	mul	r20, r19
     e18:	70 0d       	add	r23, r0
     e1a:	11 24       	eor	r1, r1
     e1c:	2d e0       	ldi	r18, 0x0D	; 13
     e1e:	e0 e0       	ldi	r30, 0x00	; 0
     e20:	f1 e0       	ldi	r31, 0x01	; 1
     e22:	de 01       	movw	r26, r28
     e24:	11 96       	adiw	r26, 0x01	; 1
     e26:	01 90       	ld	r0, Z+
     e28:	0d 92       	st	X+, r0
     e2a:	2a 95       	dec	r18
     e2c:	e1 f7       	brne	.-8      	; 0xe26 <fat_dir_entry_read_callback+0xc2>
     e2e:	6f 31       	cpi	r22, 0x1F	; 31
     e30:	71 05       	cpc	r23, r1
     e32:	08 f4       	brcc	.+2      	; 0xe36 <fat_dir_entry_read_callback+0xd2>
     e34:	dd c0       	rjmp	.+442    	; 0xff0 <fat_dir_entry_read_callback+0x28c>
     e36:	0f c0       	rjmp	.+30     	; 0xe56 <fat_dir_entry_read_callback+0xf2>
     e38:	21 91       	ld	r18, Z+
     e3a:	8c 01       	movw	r16, r24
     e3c:	02 0f       	add	r16, r18
     e3e:	11 1d       	adc	r17, r1
     e40:	d8 01       	movw	r26, r16
     e42:	2c 91       	ld	r18, X
     e44:	d5 01       	movw	r26, r10
     e46:	2d 93       	st	X+, r18
     e48:	5d 01       	movw	r10, r26
     e4a:	e6 17       	cp	r30, r22
     e4c:	f7 07       	cpc	r31, r23
     e4e:	19 f0       	breq	.+6      	; 0xe56 <fat_dir_entry_read_callback+0xf2>
     e50:	e4 17       	cp	r30, r20
     e52:	f5 07       	cpc	r31, r21
     e54:	89 f7       	brne	.-30     	; 0xe38 <fat_dir_entry_read_callback+0xd4>
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	e8 c0       	rjmp	.+464    	; 0x102a <fat_dir_entry_read_callback+0x2c6>
     e5a:	7f 01       	movw	r14, r30
     e5c:	77 2e       	mov	r7, r23
     e5e:	66 2e       	mov	r6, r22
     e60:	55 2e       	mov	r5, r21
     e62:	44 2e       	mov	r4, r20
     e64:	33 2e       	mov	r3, r19
     e66:	22 2e       	mov	r2, r18
     e68:	6c 01       	movw	r12, r24
     e6a:	f5 01       	movw	r30, r10
     e6c:	80 81       	ld	r24, Z
     e6e:	88 23       	and	r24, r24
     e70:	49 f0       	breq	.+18     	; 0xe84 <fat_dir_entry_read_callback+0x120>
     e72:	c6 01       	movw	r24, r12
     e74:	0e 94 56 06 	call	0xcac	; 0xcac <fat_calc_83_checksum>
     e78:	d7 01       	movw	r26, r14
     e7a:	14 96       	adiw	r26, 0x04	; 4
     e7c:	9c 91       	ld	r25, X
     e7e:	98 17       	cp	r25, r24
     e80:	09 f4       	brne	.+2      	; 0xe84 <fat_dir_entry_read_callback+0x120>
     e82:	80 c0       	rjmp	.+256    	; 0xf84 <fat_dir_entry_read_callback+0x220>
     e84:	81 e3       	ldi	r24, 0x31	; 49
     e86:	f5 01       	movw	r30, r10
     e88:	11 92       	st	Z+, r1
     e8a:	8a 95       	dec	r24
     e8c:	e9 f7       	brne	.-6      	; 0xe88 <fat_dir_entry_read_callback+0x124>
     e8e:	d5 01       	movw	r26, r10
     e90:	99 96       	adiw	r26, 0x29	; 41
     e92:	0c 93       	st	X, r16
     e94:	99 97       	sbiw	r26, 0x29	; 41
     e96:	9a 96       	adiw	r26, 0x2a	; 42
     e98:	1c 93       	st	X, r17
     e9a:	9a 97       	sbiw	r26, 0x2a	; 42
     e9c:	9b 96       	adiw	r26, 0x2b	; 43
     e9e:	2c 92       	st	X, r2
     ea0:	9b 97       	sbiw	r26, 0x2b	; 43
     ea2:	9c 96       	adiw	r26, 0x2c	; 44
     ea4:	3c 92       	st	X, r3
     ea6:	9c 97       	sbiw	r26, 0x2c	; 44
     ea8:	9d 96       	adiw	r26, 0x2d	; 45
     eaa:	4c 92       	st	X, r4
     eac:	9d 97       	sbiw	r26, 0x2d	; 45
     eae:	9e 96       	adiw	r26, 0x2e	; 46
     eb0:	5c 92       	st	X, r5
     eb2:	9e 97       	sbiw	r26, 0x2e	; 46
     eb4:	9f 96       	adiw	r26, 0x2f	; 47
     eb6:	6c 92       	st	X, r6
     eb8:	9f 97       	sbiw	r26, 0x2f	; 47
     eba:	d0 96       	adiw	r26, 0x30	; 48
     ebc:	7c 92       	st	X, r7
     ebe:	f6 01       	movw	r30, r12
     ec0:	80 81       	ld	r24, Z
     ec2:	80 32       	cpi	r24, 0x20	; 32
     ec4:	19 f1       	breq	.+70     	; 0xf0c <fat_dir_entry_read_callback+0x1a8>
     ec6:	6a 2d       	mov	r22, r10
     ec8:	96 01       	movw	r18, r12
     eca:	29 5f       	subi	r18, 0xF9	; 249
     ecc:	3f 4f       	sbci	r19, 0xFF	; 255
     ece:	0a 2d       	mov	r16, r10
     ed0:	1b 2d       	mov	r17, r11
     ed2:	04 c0       	rjmp	.+8      	; 0xedc <fat_dir_entry_read_callback+0x178>
     ed4:	31 96       	adiw	r30, 0x01	; 1
     ed6:	80 81       	ld	r24, Z
     ed8:	80 32       	cpi	r24, 0x20	; 32
     eda:	c9 f0       	breq	.+50     	; 0xf0e <fat_dir_entry_read_callback+0x1aa>
     edc:	d8 01       	movw	r26, r16
     ede:	8d 93       	st	X+, r24
     ee0:	8d 01       	movw	r16, r26
     ee2:	d6 01       	movw	r26, r12
     ee4:	1c 96       	adiw	r26, 0x0c	; 12
     ee6:	9c 91       	ld	r25, X
     ee8:	93 ff       	sbrs	r25, 3
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <fat_dir_entry_read_callback+0x19c>
     eec:	90 81       	ld	r25, Z
     eee:	91 54       	subi	r25, 0x41	; 65
     ef0:	9a 31       	cpi	r25, 0x1A	; 26
     ef2:	30 f4       	brcc	.+12     	; 0xf00 <fat_dir_entry_read_callback+0x19c>
     ef4:	a8 01       	movw	r20, r16
     ef6:	41 50       	subi	r20, 0x01	; 1
     ef8:	51 09       	sbc	r21, r1
     efa:	80 5e       	subi	r24, 0xE0	; 224
     efc:	da 01       	movw	r26, r20
     efe:	8c 93       	st	X, r24
     f00:	90 2f       	mov	r25, r16
     f02:	96 1b       	sub	r25, r22
     f04:	e2 17       	cp	r30, r18
     f06:	f3 07       	cpc	r31, r19
     f08:	29 f7       	brne	.-54     	; 0xed4 <fat_dir_entry_read_callback+0x170>
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <fat_dir_entry_read_callback+0x1aa>
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	f5 01       	movw	r30, r10
     f10:	80 81       	ld	r24, Z
     f12:	85 30       	cpi	r24, 0x05	; 5
     f14:	11 f4       	brne	.+4      	; 0xf1a <fat_dir_entry_read_callback+0x1b6>
     f16:	85 ee       	ldi	r24, 0xE5	; 229
     f18:	80 83       	st	Z, r24
     f1a:	d6 01       	movw	r26, r12
     f1c:	18 96       	adiw	r26, 0x08	; 8
     f1e:	8c 91       	ld	r24, X
     f20:	18 97       	sbiw	r26, 0x08	; 8
     f22:	80 32       	cpi	r24, 0x20	; 32
     f24:	59 f1       	breq	.+86     	; 0xf7c <fat_dir_entry_read_callback+0x218>
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	89 0f       	add	r24, r25
     f2a:	2e e2       	ldi	r18, 0x2E	; 46
     f2c:	f5 01       	movw	r30, r10
     f2e:	e9 0f       	add	r30, r25
     f30:	f1 1d       	adc	r31, r1
     f32:	20 83       	st	Z, r18
     f34:	f6 01       	movw	r30, r12
     f36:	38 96       	adiw	r30, 0x08	; 8
     f38:	18 96       	adiw	r26, 0x08	; 8
     f3a:	2c 91       	ld	r18, X
     f3c:	20 32       	cpi	r18, 0x20	; 32
     f3e:	d9 f0       	breq	.+54     	; 0xf76 <fat_dir_entry_read_callback+0x212>
     f40:	9c 5f       	subi	r25, 0xFC	; 252
     f42:	04 c0       	rjmp	.+8      	; 0xf4c <fat_dir_entry_read_callback+0x1e8>
     f44:	31 96       	adiw	r30, 0x01	; 1
     f46:	20 81       	ld	r18, Z
     f48:	20 32       	cpi	r18, 0x20	; 32
     f4a:	b9 f0       	breq	.+46     	; 0xf7a <fat_dir_entry_read_callback+0x216>
     f4c:	a4 01       	movw	r20, r8
     f4e:	48 0f       	add	r20, r24
     f50:	51 1d       	adc	r21, r1
     f52:	da 01       	movw	r26, r20
     f54:	2c 93       	st	X, r18
     f56:	d6 01       	movw	r26, r12
     f58:	1c 96       	adiw	r26, 0x0c	; 12
     f5a:	3c 91       	ld	r19, X
     f5c:	34 ff       	sbrs	r19, 4
     f5e:	07 c0       	rjmp	.+14     	; 0xf6e <fat_dir_entry_read_callback+0x20a>
     f60:	30 81       	ld	r19, Z
     f62:	31 54       	subi	r19, 0x41	; 65
     f64:	3a 31       	cpi	r19, 0x1A	; 26
     f66:	18 f4       	brcc	.+6      	; 0xf6e <fat_dir_entry_read_callback+0x20a>
     f68:	20 5e       	subi	r18, 0xE0	; 224
     f6a:	da 01       	movw	r26, r20
     f6c:	2c 93       	st	X, r18
     f6e:	8f 5f       	subi	r24, 0xFF	; 255
     f70:	89 13       	cpse	r24, r25
     f72:	e8 cf       	rjmp	.-48     	; 0xf44 <fat_dir_entry_read_callback+0x1e0>
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <fat_dir_entry_read_callback+0x218>
     f76:	98 2f       	mov	r25, r24
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <fat_dir_entry_read_callback+0x218>
     f7a:	98 2f       	mov	r25, r24
     f7c:	f5 01       	movw	r30, r10
     f7e:	e9 0f       	add	r30, r25
     f80:	f1 1d       	adc	r31, r1
     f82:	10 82       	st	Z, r1
     f84:	f6 01       	movw	r30, r12
     f86:	83 85       	ldd	r24, Z+11	; 0x0b
     f88:	d5 01       	movw	r26, r10
     f8a:	90 96       	adiw	r26, 0x20	; 32
     f8c:	8c 93       	st	X, r24
     f8e:	c6 01       	movw	r24, r12
     f90:	4a 96       	adiw	r24, 0x1a	; 26
     f92:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <read16>
     f96:	a0 e0       	ldi	r26, 0x00	; 0
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	f5 01       	movw	r30, r10
     f9c:	81 a3       	std	Z+33, r24	; 0x21
     f9e:	92 a3       	std	Z+34, r25	; 0x22
     fa0:	a3 a3       	std	Z+35, r26	; 0x23
     fa2:	b4 a3       	std	Z+36, r27	; 0x24
     fa4:	c6 01       	movw	r24, r12
     fa6:	44 96       	adiw	r24, 0x14	; 20
     fa8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <read16>
     fac:	a0 e0       	ldi	r26, 0x00	; 0
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	dc 01       	movw	r26, r24
     fb2:	99 27       	eor	r25, r25
     fb4:	88 27       	eor	r24, r24
     fb6:	f5 01       	movw	r30, r10
     fb8:	41 a1       	ldd	r20, Z+33	; 0x21
     fba:	52 a1       	ldd	r21, Z+34	; 0x22
     fbc:	63 a1       	ldd	r22, Z+35	; 0x23
     fbe:	74 a1       	ldd	r23, Z+36	; 0x24
     fc0:	84 2b       	or	r24, r20
     fc2:	95 2b       	or	r25, r21
     fc4:	a6 2b       	or	r26, r22
     fc6:	b7 2b       	or	r27, r23
     fc8:	81 a3       	std	Z+33, r24	; 0x21
     fca:	92 a3       	std	Z+34, r25	; 0x22
     fcc:	a3 a3       	std	Z+35, r26	; 0x23
     fce:	b4 a3       	std	Z+36, r27	; 0x24
     fd0:	c6 01       	movw	r24, r12
     fd2:	4c 96       	adiw	r24, 0x1c	; 28
     fd4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <read32>
     fd8:	d5 01       	movw	r26, r10
     fda:	95 96       	adiw	r26, 0x25	; 37
     fdc:	6d 93       	st	X+, r22
     fde:	7d 93       	st	X+, r23
     fe0:	8d 93       	st	X+, r24
     fe2:	9c 93       	st	X, r25
     fe4:	98 97       	sbiw	r26, 0x28	; 40
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	f7 01       	movw	r30, r14
     fea:	85 83       	std	Z+5, r24	; 0x05
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	1d c0       	rjmp	.+58     	; 0x102a <fat_dir_entry_read_callback+0x2c6>
     ff0:	29 81       	ldd	r18, Y+1	; 0x01
     ff2:	fc 01       	movw	r30, r24
     ff4:	e2 0f       	add	r30, r18
     ff6:	f1 1d       	adc	r31, r1
     ff8:	20 81       	ld	r18, Z
     ffa:	f5 01       	movw	r30, r10
     ffc:	e6 0f       	add	r30, r22
     ffe:	f7 1f       	adc	r31, r23
    1000:	20 83       	st	Z, r18
    1002:	fe 01       	movw	r30, r28
    1004:	32 96       	adiw	r30, 0x02	; 2
    1006:	db 01       	movw	r26, r22
    1008:	11 96       	adiw	r26, 0x01	; 1
    100a:	aa 0e       	add	r10, r26
    100c:	bb 1e       	adc	r11, r27
    100e:	4f e1       	ldi	r20, 0x1F	; 31
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	46 1b       	sub	r20, r22
    1014:	57 0b       	sbc	r21, r23
    1016:	01 e0       	ldi	r16, 0x01	; 1
    1018:	10 e0       	ldi	r17, 0x00	; 0
    101a:	0c 0f       	add	r16, r28
    101c:	1d 1f       	adc	r17, r29
    101e:	40 0f       	add	r20, r16
    1020:	51 1f       	adc	r21, r17
    1022:	be 01       	movw	r22, r28
    1024:	62 5f       	subi	r22, 0xF2	; 242
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	13 cf       	rjmp	.-474    	; 0xe50 <fat_dir_entry_read_callback+0xec>
    102a:	2d 96       	adiw	r28, 0x0d	; 13
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	ff 90       	pop	r15
    1040:	ef 90       	pop	r14
    1042:	df 90       	pop	r13
    1044:	cf 90       	pop	r12
    1046:	bf 90       	pop	r11
    1048:	af 90       	pop	r10
    104a:	9f 90       	pop	r9
    104c:	8f 90       	pop	r8
    104e:	7f 90       	pop	r7
    1050:	6f 90       	pop	r6
    1052:	5f 90       	pop	r5
    1054:	4f 90       	pop	r4
    1056:	3f 90       	pop	r3
    1058:	2f 90       	pop	r2
    105a:	08 95       	ret

0000105c <fat_find_offset_for_dir_entry>:
    105c:	2f 92       	push	r2
    105e:	3f 92       	push	r3
    1060:	4f 92       	push	r4
    1062:	5f 92       	push	r5
    1064:	6f 92       	push	r6
    1066:	7f 92       	push	r7
    1068:	8f 92       	push	r8
    106a:	9f 92       	push	r9
    106c:	af 92       	push	r10
    106e:	bf 92       	push	r11
    1070:	cf 92       	push	r12
    1072:	df 92       	push	r13
    1074:	ef 92       	push	r14
    1076:	ff 92       	push	r15
    1078:	0f 93       	push	r16
    107a:	1f 93       	push	r17
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	a0 97       	sbiw	r28, 0x20	; 32
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	fc 01       	movw	r30, r24
    1092:	4b 01       	movw	r8, r22
    1094:	89 2b       	or	r24, r25
    1096:	09 f4       	brne	.+2      	; 0x109a <fat_find_offset_for_dir_entry+0x3e>
    1098:	aa c1       	rjmp	.+852    	; 0x13ee <fat_find_offset_for_dir_entry+0x392>
    109a:	41 15       	cp	r20, r1
    109c:	51 05       	cpc	r21, r1
    109e:	09 f4       	brne	.+2      	; 0x10a2 <fat_find_offset_for_dir_entry+0x46>
    10a0:	af c1       	rjmp	.+862    	; 0x1400 <fat_find_offset_for_dir_entry+0x3a4>
    10a2:	da 01       	movw	r26, r20
    10a4:	0d 90       	ld	r0, X+
    10a6:	00 20       	and	r0, r0
    10a8:	e9 f7       	brne	.-6      	; 0x10a4 <fat_find_offset_for_dir_entry+0x48>
    10aa:	9d 01       	movw	r18, r26
    10ac:	24 1b       	sub	r18, r20
    10ae:	35 0b       	sbc	r19, r21
    10b0:	25 5f       	subi	r18, 0xF5	; 245
    10b2:	3f 4f       	sbci	r19, 0xFF	; 255
    10b4:	a5 ec       	ldi	r26, 0xC5	; 197
    10b6:	be e4       	ldi	r27, 0x4E	; 78
    10b8:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <__umulhisi3>
    10bc:	96 95       	lsr	r25
    10be:	87 95       	ror	r24
    10c0:	96 95       	lsr	r25
    10c2:	87 95       	ror	r24
    10c4:	01 e0       	ldi	r16, 0x01	; 1
    10c6:	08 0f       	add	r16, r24
    10c8:	08 a3       	std	Y+32, r16	; 0x20
    10ca:	d4 01       	movw	r26, r8
    10cc:	93 96       	adiw	r26, 0x23	; 35
    10ce:	2d 91       	ld	r18, X+
    10d0:	3d 91       	ld	r19, X+
    10d2:	4d 91       	ld	r20, X+
    10d4:	5c 91       	ld	r21, X
    10d6:	96 97       	sbiw	r26, 0x26	; 38
    10d8:	2c 8f       	std	Y+28, r18	; 0x1c
    10da:	3d 8f       	std	Y+29, r19	; 0x1d
    10dc:	4e 8f       	std	Y+30, r20	; 0x1e
    10de:	5f 8f       	std	Y+31, r21	; 0x1f
    10e0:	a0 81       	ld	r26, Z
    10e2:	b1 81       	ldd	r27, Z+1	; 0x01
    10e4:	18 96       	adiw	r26, 0x08	; 8
    10e6:	8c 91       	ld	r24, X
    10e8:	23 2b       	or	r18, r19
    10ea:	24 2b       	or	r18, r20
    10ec:	25 2b       	or	r18, r21
    10ee:	e1 f5       	brne	.+120    	; 0x1168 <fat_find_offset_for_dir_entry+0x10c>
    10f0:	8b 30       	cpi	r24, 0x0B	; 11
    10f2:	c9 f4       	brne	.+50     	; 0x1126 <fat_find_offset_for_dir_entry+0xca>
    10f4:	02 a5       	ldd	r16, Z+42	; 0x2a
    10f6:	13 a5       	ldd	r17, Z+43	; 0x2b
    10f8:	24 a5       	ldd	r18, Z+44	; 0x2c
    10fa:	35 a5       	ldd	r19, Z+45	; 0x2d
    10fc:	0c 8f       	std	Y+28, r16	; 0x1c
    10fe:	1d 8f       	std	Y+29, r17	; 0x1d
    1100:	2e 8f       	std	Y+30, r18	; 0x1e
    1102:	3f 8f       	std	Y+31, r19	; 0x1f
    1104:	1c 8a       	std	Y+20, r1	; 0x14
    1106:	1d 8a       	std	Y+21, r1	; 0x15
    1108:	1e 8a       	std	Y+22, r1	; 0x16
    110a:	1f 8a       	std	Y+23, r1	; 0x17
    110c:	18 8e       	std	Y+24, r1	; 0x18
    110e:	19 8e       	std	Y+25, r1	; 0x19
    1110:	1a 8e       	std	Y+26, r1	; 0x1a
    1112:	1b 8e       	std	Y+27, r1	; 0x1b
    1114:	1a 86       	std	Y+10, r1	; 0x0a
    1116:	1b 86       	std	Y+11, r1	; 0x0b
    1118:	1c 86       	std	Y+12, r1	; 0x0c
    111a:	1d 86       	std	Y+13, r1	; 0x0d
    111c:	1e 86       	std	Y+14, r1	; 0x0e
    111e:	1f 86       	std	Y+15, r1	; 0x0f
    1120:	18 8a       	std	Y+16, r1	; 0x10
    1122:	19 8a       	std	Y+17, r1	; 0x11
    1124:	31 c0       	rjmp	.+98     	; 0x1188 <fat_find_offset_for_dir_entry+0x12c>
    1126:	12 a1       	ldd	r17, Z+34	; 0x22
    1128:	1a 87       	std	Y+10, r17	; 0x0a
    112a:	23 a1       	ldd	r18, Z+35	; 0x23
    112c:	2b 87       	std	Y+11, r18	; 0x0b
    112e:	34 a1       	ldd	r19, Z+36	; 0x24
    1130:	3c 87       	std	Y+12, r19	; 0x0c
    1132:	45 a1       	ldd	r20, Z+37	; 0x25
    1134:	4d 87       	std	Y+13, r20	; 0x0d
    1136:	56 a1       	ldd	r21, Z+38	; 0x26
    1138:	5e 87       	std	Y+14, r21	; 0x0e
    113a:	67 a1       	ldd	r22, Z+39	; 0x27
    113c:	6f 87       	std	Y+15, r22	; 0x0f
    113e:	70 a5       	ldd	r23, Z+40	; 0x28
    1140:	78 8b       	std	Y+16, r23	; 0x10
    1142:	81 a5       	ldd	r24, Z+41	; 0x29
    1144:	89 8b       	std	Y+17, r24	; 0x11
    1146:	92 8d       	ldd	r25, Z+26	; 0x1a
    1148:	9c 8b       	std	Y+20, r25	; 0x14
    114a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    114c:	ad 8b       	std	Y+21, r26	; 0x15
    114e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    1150:	be 8b       	std	Y+22, r27	; 0x16
    1152:	05 8d       	ldd	r16, Z+29	; 0x1d
    1154:	0f 8b       	std	Y+23, r16	; 0x17
    1156:	16 8d       	ldd	r17, Z+30	; 0x1e
    1158:	18 8f       	std	Y+24, r17	; 0x18
    115a:	27 8d       	ldd	r18, Z+31	; 0x1f
    115c:	29 8f       	std	Y+25, r18	; 0x19
    115e:	30 a1       	ldd	r19, Z+32	; 0x20
    1160:	3a 8f       	std	Y+26, r19	; 0x1a
    1162:	41 a1       	ldd	r20, Z+33	; 0x21
    1164:	4b 8f       	std	Y+27, r20	; 0x1b
    1166:	10 c0       	rjmp	.+32     	; 0x1188 <fat_find_offset_for_dir_entry+0x12c>
    1168:	1c 8a       	std	Y+20, r1	; 0x14
    116a:	1d 8a       	std	Y+21, r1	; 0x15
    116c:	1e 8a       	std	Y+22, r1	; 0x16
    116e:	1f 8a       	std	Y+23, r1	; 0x17
    1170:	18 8e       	std	Y+24, r1	; 0x18
    1172:	19 8e       	std	Y+25, r1	; 0x19
    1174:	1a 8e       	std	Y+26, r1	; 0x1a
    1176:	1b 8e       	std	Y+27, r1	; 0x1b
    1178:	1a 86       	std	Y+10, r1	; 0x0a
    117a:	1b 86       	std	Y+11, r1	; 0x0b
    117c:	1c 86       	std	Y+12, r1	; 0x0c
    117e:	1d 86       	std	Y+13, r1	; 0x0d
    1180:	1e 86       	std	Y+14, r1	; 0x0e
    1182:	1f 86       	std	Y+15, r1	; 0x0f
    1184:	18 8a       	std	Y+16, r1	; 0x10
    1186:	19 8a       	std	Y+17, r1	; 0x11
    1188:	fb 8b       	std	Y+19, r31	; 0x13
    118a:	ea 8b       	std	Y+18, r30	; 0x12
    118c:	4a 84       	ldd	r4, Y+10	; 0x0a
    118e:	5b 84       	ldd	r5, Y+11	; 0x0b
    1190:	6c 84       	ldd	r6, Y+12	; 0x0c
    1192:	7d 84       	ldd	r7, Y+13	; 0x0d
    1194:	8e 84       	ldd	r8, Y+14	; 0x0e
    1196:	9f 84       	ldd	r9, Y+15	; 0x0f
    1198:	28 88       	ldd	r2, Y+16	; 0x10
    119a:	39 88       	ldd	r3, Y+17	; 0x11
    119c:	1a 82       	std	Y+2, r1	; 0x02
    119e:	24 2d       	mov	r18, r4
    11a0:	35 2d       	mov	r19, r5
    11a2:	46 2d       	mov	r20, r6
    11a4:	57 2d       	mov	r21, r7
    11a6:	68 2d       	mov	r22, r8
    11a8:	79 2d       	mov	r23, r9
    11aa:	82 2d       	mov	r24, r2
    11ac:	93 2d       	mov	r25, r3
    11ae:	ac 88       	ldd	r10, Y+20	; 0x14
    11b0:	bd 88       	ldd	r11, Y+21	; 0x15
    11b2:	ce 88       	ldd	r12, Y+22	; 0x16
    11b4:	df 88       	ldd	r13, Y+23	; 0x17
    11b6:	e8 8c       	ldd	r14, Y+24	; 0x18
    11b8:	f9 8c       	ldd	r15, Y+25	; 0x19
    11ba:	0a 8d       	ldd	r16, Y+26	; 0x1a
    11bc:	1b 8d       	ldd	r17, Y+27	; 0x1b
    11be:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__cmpdi2>
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <fat_find_offset_for_dir_entry+0x16a>
    11c4:	ae c0       	rjmp	.+348    	; 0x1322 <fat_find_offset_for_dir_entry+0x2c6>
    11c6:	6c 8d       	ldd	r22, Y+28	; 0x1c
    11c8:	7d 8d       	ldd	r23, Y+29	; 0x1d
    11ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11cc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11ce:	67 2b       	or	r22, r23
    11d0:	68 2b       	or	r22, r24
    11d2:	69 2b       	or	r22, r25
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <fat_find_offset_for_dir_entry+0x17c>
    11d6:	f9 c0       	rjmp	.+498    	; 0x13ca <fat_find_offset_for_dir_entry+0x36e>
    11d8:	68 2d       	mov	r22, r8
    11da:	79 2d       	mov	r23, r9
    11dc:	82 2d       	mov	r24, r2
    11de:	93 2d       	mov	r25, r3
    11e0:	a0 e0       	ldi	r26, 0x00	; 0
    11e2:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <__cmpdi2_s8>
    11e6:	09 f4       	brne	.+2      	; 0x11ea <fat_find_offset_for_dir_entry+0x18e>
    11e8:	6b c0       	rjmp	.+214    	; 0x12c0 <fat_find_offset_for_dir_entry+0x264>
    11ea:	4c 8d       	ldd	r20, Y+28	; 0x1c
    11ec:	5d 8d       	ldd	r21, Y+29	; 0x1d
    11ee:	6e 8d       	ldd	r22, Y+30	; 0x1e
    11f0:	7f 8d       	ldd	r23, Y+31	; 0x1f
    11f2:	8a 89       	ldd	r24, Y+18	; 0x12
    11f4:	9b 89       	ldd	r25, Y+19	; 0x13
    11f6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fat_get_next_cluster>
    11fa:	61 15       	cp	r22, r1
    11fc:	71 05       	cpc	r23, r1
    11fe:	81 05       	cpc	r24, r1
    1200:	91 05       	cpc	r25, r1
    1202:	09 f0       	breq	.+2      	; 0x1206 <fat_find_offset_for_dir_entry+0x1aa>
    1204:	59 c0       	rjmp	.+178    	; 0x12b8 <fat_find_offset_for_dir_entry+0x25c>
    1206:	01 e0       	ldi	r16, 0x01	; 1
    1208:	10 e0       	ldi	r17, 0x00	; 0
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1210:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1212:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1214:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1216:	8a 89       	ldd	r24, Y+18	; 0x12
    1218:	9b 89       	ldd	r25, Y+19	; 0x13
    121a:	0e 94 75 03 	call	0x6ea	; 0x6ea <fat_append_clusters>
    121e:	2b 01       	movw	r4, r22
    1220:	3c 01       	movw	r6, r24
    1222:	61 15       	cp	r22, r1
    1224:	71 05       	cpc	r23, r1
    1226:	81 05       	cpc	r24, r1
    1228:	91 05       	cpc	r25, r1
    122a:	09 f4       	brne	.+2      	; 0x122e <fat_find_offset_for_dir_entry+0x1d2>
    122c:	ce c0       	rjmp	.+412    	; 0x13ca <fat_find_offset_for_dir_entry+0x36e>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	02 97       	sbiw	r24, 0x02	; 2
    1234:	a1 09       	sbc	r26, r1
    1236:	b1 09       	sbc	r27, r1
    1238:	8c 01       	movw	r16, r24
    123a:	9d 01       	movw	r18, r26
    123c:	40 e0       	ldi	r20, 0x00	; 0
    123e:	50 e0       	ldi	r21, 0x00	; 0
    1240:	ba 01       	movw	r22, r20
    1242:	8a 83       	std	Y+2, r24	; 0x02
    1244:	1b 83       	std	Y+3, r17	; 0x03
    1246:	2c 83       	std	Y+4, r18	; 0x04
    1248:	3d 83       	std	Y+5, r19	; 0x05
    124a:	4e 83       	std	Y+6, r20	; 0x06
    124c:	5f 83       	std	Y+7, r21	; 0x07
    124e:	68 87       	std	Y+8, r22	; 0x08
    1250:	79 87       	std	Y+9, r23	; 0x09
    1252:	aa 89       	ldd	r26, Y+18	; 0x12
    1254:	bb 89       	ldd	r27, Y+19	; 0x13
    1256:	58 96       	adiw	r26, 0x18	; 24
    1258:	2d 91       	ld	r18, X+
    125a:	3c 91       	ld	r19, X
    125c:	59 97       	sbiw	r26, 0x19	; 25
    125e:	89 01       	movw	r16, r18
    1260:	a0 2e       	mov	r10, r16
    1262:	b1 2e       	mov	r11, r17
    1264:	c1 2c       	mov	r12, r1
    1266:	d1 2c       	mov	r13, r1
    1268:	e1 2c       	mov	r14, r1
    126a:	f1 2c       	mov	r15, r1
    126c:	00 e0       	ldi	r16, 0x00	; 0
    126e:	10 e0       	ldi	r17, 0x00	; 0
    1270:	2a 81       	ldd	r18, Y+2	; 0x02
    1272:	3b 81       	ldd	r19, Y+3	; 0x03
    1274:	4c 81       	ldd	r20, Y+4	; 0x04
    1276:	5d 81       	ldd	r21, Y+5	; 0x05
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__muldi3>
    1284:	ea 89       	ldd	r30, Y+18	; 0x12
    1286:	fb 89       	ldd	r31, Y+19	; 0x13
    1288:	a2 8c       	ldd	r10, Z+26	; 0x1a
    128a:	b3 8c       	ldd	r11, Z+27	; 0x1b
    128c:	c4 8c       	ldd	r12, Z+28	; 0x1c
    128e:	d5 8c       	ldd	r13, Z+29	; 0x1d
    1290:	e6 8c       	ldd	r14, Z+30	; 0x1e
    1292:	f7 8c       	ldd	r15, Z+31	; 0x1f
    1294:	00 a1       	ldd	r16, Z+32	; 0x20
    1296:	11 a1       	ldd	r17, Z+33	; 0x21
    1298:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
    129c:	2a 87       	std	Y+10, r18	; 0x0a
    129e:	3b 87       	std	Y+11, r19	; 0x0b
    12a0:	4c 87       	std	Y+12, r20	; 0x0c
    12a2:	5d 87       	std	Y+13, r21	; 0x0d
    12a4:	6e 87       	std	Y+14, r22	; 0x0e
    12a6:	7f 87       	std	Y+15, r23	; 0x0f
    12a8:	88 8b       	std	Y+16, r24	; 0x10
    12aa:	99 8b       	std	Y+17, r25	; 0x11
    12ac:	b3 01       	movw	r22, r6
    12ae:	a2 01       	movw	r20, r4
    12b0:	cf 01       	movw	r24, r30
    12b2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <fat_clear_cluster>
    12b6:	92 c0       	rjmp	.+292    	; 0x13dc <fat_find_offset_for_dir_entry+0x380>
    12b8:	6c 8f       	std	Y+28, r22	; 0x1c
    12ba:	7d 8f       	std	Y+29, r23	; 0x1d
    12bc:	8e 8f       	std	Y+30, r24	; 0x1e
    12be:	9f 8f       	std	Y+31, r25	; 0x1f
    12c0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    12c2:	5d 8d       	ldd	r21, Y+29	; 0x1d
    12c4:	6e 8d       	ldd	r22, Y+30	; 0x1e
    12c6:	7f 8d       	ldd	r23, Y+31	; 0x1f
    12c8:	8a 89       	ldd	r24, Y+18	; 0x12
    12ca:	9b 89       	ldd	r25, Y+19	; 0x13
    12cc:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <fat_cluster_offset>
    12d0:	2a 87       	std	Y+10, r18	; 0x0a
    12d2:	3b 87       	std	Y+11, r19	; 0x0b
    12d4:	4c 87       	std	Y+12, r20	; 0x0c
    12d6:	5d 87       	std	Y+13, r21	; 0x0d
    12d8:	6e 87       	std	Y+14, r22	; 0x0e
    12da:	7f 87       	std	Y+15, r23	; 0x0f
    12dc:	88 8b       	std	Y+16, r24	; 0x10
    12de:	99 8b       	std	Y+17, r25	; 0x11
    12e0:	aa 89       	ldd	r26, Y+18	; 0x12
    12e2:	bb 89       	ldd	r27, Y+19	; 0x13
    12e4:	58 96       	adiw	r26, 0x18	; 24
    12e6:	2d 90       	ld	r2, X+
    12e8:	3c 90       	ld	r3, X
    12ea:	59 97       	sbiw	r26, 0x19	; 25
    12ec:	a2 2c       	mov	r10, r2
    12ee:	b3 2c       	mov	r11, r3
    12f0:	c1 2c       	mov	r12, r1
    12f2:	d1 2c       	mov	r13, r1
    12f4:	e1 2c       	mov	r14, r1
    12f6:	f1 2c       	mov	r15, r1
    12f8:	00 e0       	ldi	r16, 0x00	; 0
    12fa:	10 e0       	ldi	r17, 0x00	; 0
    12fc:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
    1300:	2c 8b       	std	Y+20, r18	; 0x14
    1302:	3d 8b       	std	Y+21, r19	; 0x15
    1304:	4e 8b       	std	Y+22, r20	; 0x16
    1306:	5f 8b       	std	Y+23, r21	; 0x17
    1308:	68 8f       	std	Y+24, r22	; 0x18
    130a:	79 8f       	std	Y+25, r23	; 0x19
    130c:	8a 8f       	std	Y+26, r24	; 0x1a
    130e:	9b 8f       	std	Y+27, r25	; 0x1b
    1310:	4a 84       	ldd	r4, Y+10	; 0x0a
    1312:	5b 84       	ldd	r5, Y+11	; 0x0b
    1314:	6c 84       	ldd	r6, Y+12	; 0x0c
    1316:	7d 84       	ldd	r7, Y+13	; 0x0d
    1318:	8e 84       	ldd	r8, Y+14	; 0x0e
    131a:	9f 84       	ldd	r9, Y+15	; 0x0f
    131c:	28 88       	ldd	r2, Y+16	; 0x10
    131e:	39 88       	ldd	r3, Y+17	; 0x11
    1320:	1a 82       	std	Y+2, r1	; 0x02
    1322:	aa 89       	ldd	r26, Y+18	; 0x12
    1324:	bb 89       	ldd	r27, Y+19	; 0x13
    1326:	ed 91       	ld	r30, X+
    1328:	fc 91       	ld	r31, X
    132a:	01 90       	ld	r0, Z+
    132c:	f0 81       	ld	r31, Z
    132e:	e0 2d       	mov	r30, r0
    1330:	ee 24       	eor	r14, r14
    1332:	e3 94       	inc	r14
    1334:	f1 2c       	mov	r15, r1
    1336:	8e 01       	movw	r16, r28
    1338:	0f 5f       	subi	r16, 0xFF	; 255
    133a:	1f 4f       	sbci	r17, 0xFF	; 255
    133c:	24 2d       	mov	r18, r4
    133e:	35 2d       	mov	r19, r5
    1340:	46 2d       	mov	r20, r6
    1342:	57 2d       	mov	r21, r7
    1344:	68 2d       	mov	r22, r8
    1346:	79 2d       	mov	r23, r9
    1348:	82 2d       	mov	r24, r2
    134a:	93 2d       	mov	r25, r3
    134c:	09 95       	icall
    134e:	88 23       	and	r24, r24
    1350:	e1 f1       	breq	.+120    	; 0x13ca <fat_find_offset_for_dir_entry+0x36e>
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	85 3e       	cpi	r24, 0xE5	; 229
    1356:	11 f0       	breq	.+4      	; 0x135c <fat_find_offset_for_dir_entry+0x300>
    1358:	81 11       	cpse	r24, r1
    135a:	1a c0       	rjmp	.+52     	; 0x1390 <fat_find_offset_for_dir_entry+0x334>
    135c:	ba 81       	ldd	r27, Y+2	; 0x02
    135e:	bf 5f       	subi	r27, 0xFF	; 255
    1360:	ba 83       	std	Y+2, r27	; 0x02
    1362:	e8 a1       	ldd	r30, Y+32	; 0x20
    1364:	be 17       	cp	r27, r30
    1366:	d0 f5       	brcc	.+116    	; 0x13dc <fat_find_offset_for_dir_entry+0x380>
    1368:	24 2d       	mov	r18, r4
    136a:	35 2d       	mov	r19, r5
    136c:	46 2d       	mov	r20, r6
    136e:	57 2d       	mov	r21, r7
    1370:	68 2d       	mov	r22, r8
    1372:	79 2d       	mov	r23, r9
    1374:	82 2d       	mov	r24, r2
    1376:	93 2d       	mov	r25, r3
    1378:	a0 e2       	ldi	r26, 0x20	; 32
    137a:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <__adddi3_s8>
    137e:	42 2e       	mov	r4, r18
    1380:	53 2e       	mov	r5, r19
    1382:	64 2e       	mov	r6, r20
    1384:	75 2e       	mov	r7, r21
    1386:	86 2e       	mov	r8, r22
    1388:	97 2e       	mov	r9, r23
    138a:	28 2e       	mov	r2, r24
    138c:	39 2e       	mov	r3, r25
    138e:	07 cf       	rjmp	.-498    	; 0x119e <fat_find_offset_for_dir_entry+0x142>
    1390:	24 2d       	mov	r18, r4
    1392:	35 2d       	mov	r19, r5
    1394:	46 2d       	mov	r20, r6
    1396:	57 2d       	mov	r21, r7
    1398:	68 2d       	mov	r22, r8
    139a:	79 2d       	mov	r23, r9
    139c:	82 2d       	mov	r24, r2
    139e:	93 2d       	mov	r25, r3
    13a0:	a0 e2       	ldi	r26, 0x20	; 32
    13a2:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <__adddi3_s8>
    13a6:	2a 87       	std	Y+10, r18	; 0x0a
    13a8:	3b 87       	std	Y+11, r19	; 0x0b
    13aa:	4c 87       	std	Y+12, r20	; 0x0c
    13ac:	5d 87       	std	Y+13, r21	; 0x0d
    13ae:	6e 87       	std	Y+14, r22	; 0x0e
    13b0:	7f 87       	std	Y+15, r23	; 0x0f
    13b2:	88 8b       	std	Y+16, r24	; 0x10
    13b4:	99 8b       	std	Y+17, r25	; 0x11
    13b6:	42 2e       	mov	r4, r18
    13b8:	53 2e       	mov	r5, r19
    13ba:	64 2e       	mov	r6, r20
    13bc:	75 2e       	mov	r7, r21
    13be:	86 2e       	mov	r8, r22
    13c0:	97 2e       	mov	r9, r23
    13c2:	28 2e       	mov	r2, r24
    13c4:	39 2e       	mov	r3, r25
    13c6:	1a 82       	std	Y+2, r1	; 0x02
    13c8:	ea ce       	rjmp	.-556    	; 0x119e <fat_find_offset_for_dir_entry+0x142>
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e0       	ldi	r20, 0x00	; 0
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	1a c0       	rjmp	.+52     	; 0x1410 <fat_find_offset_for_dir_entry+0x3b4>
    13dc:	2a 85       	ldd	r18, Y+10	; 0x0a
    13de:	3b 85       	ldd	r19, Y+11	; 0x0b
    13e0:	4c 85       	ldd	r20, Y+12	; 0x0c
    13e2:	5d 85       	ldd	r21, Y+13	; 0x0d
    13e4:	6e 85       	ldd	r22, Y+14	; 0x0e
    13e6:	7f 85       	ldd	r23, Y+15	; 0x0f
    13e8:	88 89       	ldd	r24, Y+16	; 0x10
    13ea:	99 89       	ldd	r25, Y+17	; 0x11
    13ec:	11 c0       	rjmp	.+34     	; 0x1410 <fat_find_offset_for_dir_entry+0x3b4>
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	08 c0       	rjmp	.+16     	; 0x1410 <fat_find_offset_for_dir_entry+0x3b4>
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e0       	ldi	r20, 0x00	; 0
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a0 96       	adiw	r28, 0x20	; 32
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	ff 90       	pop	r15
    1426:	ef 90       	pop	r14
    1428:	df 90       	pop	r13
    142a:	cf 90       	pop	r12
    142c:	bf 90       	pop	r11
    142e:	af 90       	pop	r10
    1430:	9f 90       	pop	r9
    1432:	8f 90       	pop	r8
    1434:	7f 90       	pop	r7
    1436:	6f 90       	pop	r6
    1438:	5f 90       	pop	r5
    143a:	4f 90       	pop	r4
    143c:	3f 90       	pop	r3
    143e:	2f 90       	pop	r2
    1440:	08 95       	ret

00001442 <fat_write_dir_entry>:
    1442:	2f 92       	push	r2
    1444:	3f 92       	push	r3
    1446:	4f 92       	push	r4
    1448:	5f 92       	push	r5
    144a:	6f 92       	push	r6
    144c:	7f 92       	push	r7
    144e:	8f 92       	push	r8
    1450:	9f 92       	push	r9
    1452:	af 92       	push	r10
    1454:	bf 92       	push	r11
    1456:	cf 92       	push	r12
    1458:	df 92       	push	r13
    145a:	ef 92       	push	r14
    145c:	ff 92       	push	r15
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	a6 97       	sbiw	r28, 0x26	; 38
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	09 f4       	brne	.+2      	; 0x147c <fat_write_dir_entry+0x3a>
    147a:	6e c1       	rjmp	.+732    	; 0x1758 <fat_write_dir_entry+0x316>
    147c:	61 15       	cp	r22, r1
    147e:	71 05       	cpc	r23, r1
    1480:	09 f4       	brne	.+2      	; 0x1484 <fat_write_dir_entry+0x42>
    1482:	6c c1       	rjmp	.+728    	; 0x175c <fat_write_dir_entry+0x31a>
    1484:	6b 01       	movw	r12, r22
    1486:	fc 01       	movw	r30, r24
    1488:	01 90       	ld	r0, Z+
    148a:	f0 81       	ld	r31, Z
    148c:	e0 2d       	mov	r30, r0
    148e:	84 81       	ldd	r24, Z+4	; 0x04
    1490:	95 81       	ldd	r25, Z+5	; 0x05
    1492:	9b a3       	std	Y+35, r25	; 0x23
    1494:	8a a3       	std	Y+34, r24	; 0x22
    1496:	db 01       	movw	r26, r22
    1498:	99 96       	adiw	r26, 0x29	; 41
    149a:	9c 90       	ld	r9, X
    149c:	99 97       	sbiw	r26, 0x29	; 41
    149e:	9a 96       	adiw	r26, 0x2a	; 42
    14a0:	8c 90       	ld	r8, X
    14a2:	9a 97       	sbiw	r26, 0x2a	; 42
    14a4:	9b 96       	adiw	r26, 0x2b	; 43
    14a6:	7c 90       	ld	r7, X
    14a8:	9b 97       	sbiw	r26, 0x2b	; 43
    14aa:	9c 96       	adiw	r26, 0x2c	; 44
    14ac:	6c 90       	ld	r6, X
    14ae:	9c 97       	sbiw	r26, 0x2c	; 44
    14b0:	9d 96       	adiw	r26, 0x2d	; 45
    14b2:	5c 90       	ld	r5, X
    14b4:	9d 97       	sbiw	r26, 0x2d	; 45
    14b6:	9e 96       	adiw	r26, 0x2e	; 46
    14b8:	4c 90       	ld	r4, X
    14ba:	9e 97       	sbiw	r26, 0x2e	; 46
    14bc:	9f 96       	adiw	r26, 0x2f	; 47
    14be:	3c 90       	ld	r3, X
    14c0:	9f 97       	sbiw	r26, 0x2f	; 47
    14c2:	d0 96       	adiw	r26, 0x30	; 48
    14c4:	2c 90       	ld	r2, X
    14c6:	7d a3       	std	Y+37, r23	; 0x25
    14c8:	6c a3       	std	Y+36, r22	; 0x24
    14ca:	fb 01       	movw	r30, r22
    14cc:	01 90       	ld	r0, Z+
    14ce:	00 20       	and	r0, r0
    14d0:	e9 f7       	brne	.-6      	; 0x14cc <fat_write_dir_entry+0x8a>
    14d2:	31 97       	sbiw	r30, 0x01	; 1
    14d4:	5f 01       	movw	r10, r30
    14d6:	a6 1a       	sub	r10, r22
    14d8:	b7 0a       	sbc	r11, r23
    14da:	1a 2d       	mov	r17, r10
    14dc:	c5 01       	movw	r24, r10
    14de:	99 27       	eor	r25, r25
    14e0:	0c 96       	adiw	r24, 0x0c	; 12
    14e2:	6d e0       	ldi	r22, 0x0D	; 13
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <__divmodhi4>
    14ea:	69 a3       	std	Y+33, r22	; 0x21
    14ec:	4b e0       	ldi	r20, 0x0B	; 11
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	60 e2       	ldi	r22, 0x20	; 32
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	ce 01       	movw	r24, r28
    14f6:	01 96       	adiw	r24, 0x01	; 1
    14f8:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <memset>
    14fc:	6e e2       	ldi	r22, 0x2E	; 46
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	c6 01       	movw	r24, r12
    1502:	0e 94 0f 20 	call	0x401e	; 0x401e <strrchr>
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	d1 f0       	breq	.+52     	; 0x153e <fat_write_dir_entry+0xfc>
    150a:	fc 01       	movw	r30, r24
    150c:	21 81       	ldd	r18, Z+1	; 0x01
    150e:	22 23       	and	r18, r18
    1510:	b1 f0       	breq	.+44     	; 0x153e <fat_write_dir_entry+0xfc>
    1512:	bc 01       	movw	r22, r24
    1514:	6f 5f       	subi	r22, 0xFF	; 255
    1516:	7f 4f       	sbci	r23, 0xFF	; 255
    1518:	fb 01       	movw	r30, r22
    151a:	01 90       	ld	r0, Z+
    151c:	00 20       	and	r0, r0
    151e:	e9 f7       	brne	.-6      	; 0x151a <fat_write_dir_entry+0xd8>
    1520:	31 97       	sbiw	r30, 0x01	; 1
    1522:	e6 1b       	sub	r30, r22
    1524:	f7 0b       	sbc	r31, r23
    1526:	aa 94       	dec	r10
    1528:	1a 2d       	mov	r17, r10
    152a:	1e 1b       	sub	r17, r30
    152c:	e4 30       	cpi	r30, 0x04	; 4
    152e:	08 f0       	brcs	.+2      	; 0x1532 <fat_write_dir_entry+0xf0>
    1530:	e3 e0       	ldi	r30, 0x03	; 3
    1532:	4e 2f       	mov	r20, r30
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	ce 01       	movw	r24, r28
    1538:	09 96       	adiw	r24, 0x09	; 9
    153a:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <memcpy>
    153e:	19 30       	cpi	r17, 0x09	; 9
    1540:	d0 f4       	brcc	.+52     	; 0x1576 <fat_write_dir_entry+0x134>
    1542:	41 2f       	mov	r20, r17
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	b6 01       	movw	r22, r12
    1548:	ce 01       	movw	r24, r28
    154a:	01 96       	adiw	r24, 0x01	; 1
    154c:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <memcpy>
    1550:	d6 01       	movw	r26, r12
    1552:	8c 91       	ld	r24, X
    1554:	8e 32       	cpi	r24, 0x2E	; 46
    1556:	61 f5       	brne	.+88     	; 0x15b0 <fat_write_dir_entry+0x16e>
    1558:	11 96       	adiw	r26, 0x01	; 1
    155a:	8c 91       	ld	r24, X
    155c:	11 97       	sbiw	r26, 0x01	; 1
    155e:	8e 32       	cpi	r24, 0x2E	; 46
    1560:	31 f4       	brne	.+12     	; 0x156e <fat_write_dir_entry+0x12c>
    1562:	12 96       	adiw	r26, 0x02	; 2
    1564:	8c 91       	ld	r24, X
    1566:	81 11       	cpse	r24, r1
    1568:	23 c0       	rjmp	.+70     	; 0x15b0 <fat_write_dir_entry+0x16e>
    156a:	19 a2       	std	Y+33, r1	; 0x21
    156c:	21 c0       	rjmp	.+66     	; 0x15b0 <fat_write_dir_entry+0x16e>
    156e:	81 11       	cpse	r24, r1
    1570:	1f c0       	rjmp	.+62     	; 0x15b0 <fat_write_dir_entry+0x16e>
    1572:	19 a2       	std	Y+33, r1	; 0x21
    1574:	1d c0       	rjmp	.+58     	; 0x15b0 <fat_write_dir_entry+0x16e>
    1576:	88 e0       	ldi	r24, 0x08	; 8
    1578:	f6 01       	movw	r30, r12
    157a:	de 01       	movw	r26, r28
    157c:	11 96       	adiw	r26, 0x01	; 1
    157e:	01 90       	ld	r0, Z+
    1580:	0d 92       	st	X+, r0
    1582:	8a 95       	dec	r24
    1584:	e1 f7       	brne	.-8      	; 0x157e <fat_write_dir_entry+0x13c>
    1586:	f6 01       	movw	r30, r12
    1588:	81 a1       	ldd	r24, Z+33	; 0x21
    158a:	80 3a       	cpi	r24, 0xA0	; 160
    158c:	28 f4       	brcc	.+10     	; 0x1598 <fat_write_dir_entry+0x156>
    158e:	98 2f       	mov	r25, r24
    1590:	92 95       	swap	r25
    1592:	9f 70       	andi	r25, 0x0F	; 15
    1594:	90 5d       	subi	r25, 0xD0	; 208
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <fat_write_dir_entry+0x15e>
    1598:	98 2f       	mov	r25, r24
    159a:	92 95       	swap	r25
    159c:	9f 70       	andi	r25, 0x0F	; 15
    159e:	9f 59       	subi	r25, 0x9F	; 159
    15a0:	9f 83       	std	Y+7, r25	; 0x07
    15a2:	8f 70       	andi	r24, 0x0F	; 15
    15a4:	8a 30       	cpi	r24, 0x0A	; 10
    15a6:	10 f4       	brcc	.+4      	; 0x15ac <fat_write_dir_entry+0x16a>
    15a8:	80 5d       	subi	r24, 0xD0	; 208
    15aa:	01 c0       	rjmp	.+2      	; 0x15ae <fat_write_dir_entry+0x16c>
    15ac:	8f 59       	subi	r24, 0x9F	; 159
    15ae:	88 87       	std	Y+8, r24	; 0x08
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	85 3e       	cpi	r24, 0xE5	; 229
    15b4:	11 f4       	brne	.+4      	; 0x15ba <fat_write_dir_entry+0x178>
    15b6:	85 e0       	ldi	r24, 0x05	; 5
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	fe 01       	movw	r30, r28
    15bc:	3c 96       	adiw	r30, 0x0c	; 12
    15be:	85 e1       	ldi	r24, 0x15	; 21
    15c0:	df 01       	movw	r26, r30
    15c2:	1d 92       	st	X+, r1
    15c4:	8a 95       	dec	r24
    15c6:	e9 f7       	brne	.-6      	; 0x15c2 <fat_write_dir_entry+0x180>
    15c8:	f6 01       	movw	r30, r12
    15ca:	80 a1       	ldd	r24, Z+32	; 0x20
    15cc:	8c 87       	std	Y+12, r24	; 0x0c
    15ce:	81 a1       	ldd	r24, Z+33	; 0x21
    15d0:	92 a1       	ldd	r25, Z+34	; 0x22
    15d2:	a3 a1       	ldd	r26, Z+35	; 0x23
    15d4:	b4 a1       	ldd	r27, Z+36	; 0x24
    15d6:	bd 01       	movw	r22, r26
    15d8:	88 27       	eor	r24, r24
    15da:	99 27       	eor	r25, r25
    15dc:	ce 01       	movw	r24, r28
    15de:	45 96       	adiw	r24, 0x15	; 21
    15e0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <write16>
    15e4:	d6 01       	movw	r26, r12
    15e6:	91 96       	adiw	r26, 0x21	; 33
    15e8:	6d 91       	ld	r22, X+
    15ea:	7c 91       	ld	r23, X
    15ec:	92 97       	sbiw	r26, 0x22	; 34
    15ee:	ce 01       	movw	r24, r28
    15f0:	4b 96       	adiw	r24, 0x1b	; 27
    15f2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <write16>
    15f6:	f6 01       	movw	r30, r12
    15f8:	45 a1       	ldd	r20, Z+37	; 0x25
    15fa:	56 a1       	ldd	r21, Z+38	; 0x26
    15fc:	67 a1       	ldd	r22, Z+39	; 0x27
    15fe:	70 a5       	ldd	r23, Z+40	; 0x28
    1600:	ce 01       	movw	r24, r28
    1602:	4d 96       	adiw	r24, 0x1d	; 29
    1604:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <write32>
    1608:	29 a1       	ldd	r18, Y+33	; 0x21
    160a:	f0 e2       	ldi	r31, 0x20	; 32
    160c:	2f 9f       	mul	r18, r31
    160e:	a0 01       	movw	r20, r0
    1610:	11 24       	eor	r1, r1
    1612:	24 2f       	mov	r18, r20
    1614:	35 2f       	mov	r19, r21
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	50 e0       	ldi	r21, 0x00	; 0
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a9 2c       	mov	r10, r9
    1624:	b8 2c       	mov	r11, r8
    1626:	c7 2c       	mov	r12, r7
    1628:	d6 2c       	mov	r13, r6
    162a:	e5 2c       	mov	r14, r5
    162c:	f4 2c       	mov	r15, r4
    162e:	03 2d       	mov	r16, r3
    1630:	12 2d       	mov	r17, r2
    1632:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
    1636:	68 94       	set
    1638:	ee 24       	eor	r14, r14
    163a:	e5 f8       	bld	r14, 5
    163c:	f1 2c       	mov	r15, r1
    163e:	8e 01       	movw	r16, r28
    1640:	0f 5f       	subi	r16, 0xFF	; 255
    1642:	1f 4f       	sbci	r17, 0xFF	; 255
    1644:	ea a1       	ldd	r30, Y+34	; 0x22
    1646:	fb a1       	ldd	r31, Y+35	; 0x23
    1648:	09 95       	icall
    164a:	88 23       	and	r24, r24
    164c:	09 f4       	brne	.+2      	; 0x1650 <fat_write_dir_entry+0x20e>
    164e:	8f c0       	rjmp	.+286    	; 0x176e <fat_write_dir_entry+0x32c>
    1650:	c8 01       	movw	r24, r16
    1652:	0e 94 56 06 	call	0xcac	; 0xcac <fat_calc_83_checksum>
    1656:	a8 2e       	mov	r10, r24
    1658:	f9 a1       	ldd	r31, Y+33	; 0x21
    165a:	ff 23       	and	r31, r31
    165c:	09 f4       	brne	.+2      	; 0x1660 <fat_write_dir_entry+0x21e>
    165e:	80 c0       	rjmp	.+256    	; 0x1760 <fat_write_dir_entry+0x31e>
    1660:	df 2e       	mov	r13, r31
    1662:	0f 2e       	mov	r0, r31
    1664:	fe e0       	ldi	r31, 0x0E	; 14
    1666:	bf 2e       	mov	r11, r31
    1668:	f0 2d       	mov	r31, r0
    166a:	0f 2e       	mov	r0, r31
    166c:	fc e1       	ldi	r31, 0x1C	; 28
    166e:	cf 2e       	mov	r12, r31
    1670:	f0 2d       	mov	r31, r0
    1672:	f0 64       	ori	r31, 0x40	; 64
    1674:	fe a3       	std	Y+38, r31	; 0x26
    1676:	40 e2       	ldi	r20, 0x20	; 32
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	6f ef       	ldi	r22, 0xFF	; 255
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	ce 01       	movw	r24, r28
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <memset>
    1686:	8d 2d       	mov	r24, r13
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	2d e0       	ldi	r18, 0x0D	; 13
    168e:	28 9f       	mul	r18, r24
    1690:	f0 01       	movw	r30, r0
    1692:	29 9f       	mul	r18, r25
    1694:	f0 0d       	add	r31, r0
    1696:	11 24       	eor	r1, r1
    1698:	8c a1       	ldd	r24, Y+36	; 0x24
    169a:	9d a1       	ldd	r25, Y+37	; 0x25
    169c:	e8 0f       	add	r30, r24
    169e:	f9 1f       	adc	r31, r25
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	bf 01       	movw	r22, r30
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <fat_write_dir_entry+0x266>
    16a6:	31 96       	adiw	r30, 0x01	; 1
    16a8:	91 e0       	ldi	r25, 0x01	; 1
    16aa:	98 0f       	add	r25, r24
    16ac:	db 01       	movw	r26, r22
    16ae:	4d 91       	ld	r20, X+
    16b0:	bd 01       	movw	r22, r26
    16b2:	21 e0       	ldi	r18, 0x01	; 1
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	2c 0f       	add	r18, r28
    16b8:	3d 1f       	adc	r19, r29
    16ba:	28 0f       	add	r18, r24
    16bc:	31 1d       	adc	r19, r1
    16be:	d9 01       	movw	r26, r18
    16c0:	4c 93       	st	X, r20
    16c2:	8e 5f       	subi	r24, 0xFE	; 254
    16c4:	21 e0       	ldi	r18, 0x01	; 1
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	2c 0f       	add	r18, r28
    16ca:	3d 1f       	adc	r19, r29
    16cc:	29 0f       	add	r18, r25
    16ce:	31 1d       	adc	r19, r1
    16d0:	d9 01       	movw	r26, r18
    16d2:	1c 92       	st	X, r1
    16d4:	8b 30       	cpi	r24, 0x0B	; 11
    16d6:	09 f4       	brne	.+2      	; 0x16da <fat_write_dir_entry+0x298>
    16d8:	45 c0       	rjmp	.+138    	; 0x1764 <fat_write_dir_entry+0x322>
    16da:	8a 31       	cpi	r24, 0x1A	; 26
    16dc:	11 f4       	brne	.+4      	; 0x16e2 <fat_write_dir_entry+0x2a0>
    16de:	8c 2d       	mov	r24, r12
    16e0:	42 c0       	rjmp	.+132    	; 0x1766 <fat_write_dir_entry+0x324>
    16e2:	90 81       	ld	r25, Z
    16e4:	99 23       	and	r25, r25
    16e6:	11 f0       	breq	.+4      	; 0x16ec <fat_write_dir_entry+0x2aa>
    16e8:	8f 31       	cpi	r24, 0x1F	; 31
    16ea:	e8 f2       	brcs	.-70     	; 0x16a6 <fat_write_dir_entry+0x264>
    16ec:	d9 82       	std	Y+1, r13	; 0x01
    16ee:	b9 a1       	ldd	r27, Y+33	; 0x21
    16f0:	db 12       	cpse	r13, r27
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <fat_write_dir_entry+0x2b6>
    16f4:	ee a1       	ldd	r30, Y+38	; 0x26
    16f6:	e9 83       	std	Y+1, r30	; 0x01
    16f8:	ff e0       	ldi	r31, 0x0F	; 15
    16fa:	fc 87       	std	Y+12, r31	; 0x0c
    16fc:	ae 86       	std	Y+14, r10	; 0x0e
    16fe:	1d 86       	std	Y+13, r1	; 0x0d
    1700:	1b 8e       	std	Y+27, r1	; 0x1b
    1702:	1c 8e       	std	Y+28, r1	; 0x1c
    1704:	68 94       	set
    1706:	ee 24       	eor	r14, r14
    1708:	e5 f8       	bld	r14, 5
    170a:	f1 2c       	mov	r15, r1
    170c:	8e 01       	movw	r16, r28
    170e:	0f 5f       	subi	r16, 0xFF	; 255
    1710:	1f 4f       	sbci	r17, 0xFF	; 255
    1712:	29 2d       	mov	r18, r9
    1714:	38 2d       	mov	r19, r8
    1716:	47 2d       	mov	r20, r7
    1718:	56 2d       	mov	r21, r6
    171a:	65 2d       	mov	r22, r5
    171c:	74 2d       	mov	r23, r4
    171e:	83 2d       	mov	r24, r3
    1720:	92 2d       	mov	r25, r2
    1722:	ea a1       	ldd	r30, Y+34	; 0x22
    1724:	fb a1       	ldd	r31, Y+35	; 0x23
    1726:	09 95       	icall
    1728:	29 2d       	mov	r18, r9
    172a:	38 2d       	mov	r19, r8
    172c:	47 2d       	mov	r20, r7
    172e:	56 2d       	mov	r21, r6
    1730:	65 2d       	mov	r22, r5
    1732:	74 2d       	mov	r23, r4
    1734:	83 2d       	mov	r24, r3
    1736:	92 2d       	mov	r25, r2
    1738:	a0 e2       	ldi	r26, 0x20	; 32
    173a:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <__adddi3_s8>
    173e:	92 2e       	mov	r9, r18
    1740:	83 2e       	mov	r8, r19
    1742:	74 2e       	mov	r7, r20
    1744:	65 2e       	mov	r6, r21
    1746:	56 2e       	mov	r5, r22
    1748:	47 2e       	mov	r4, r23
    174a:	38 2e       	mov	r3, r24
    174c:	29 2e       	mov	r2, r25
    174e:	da 94       	dec	r13
    1750:	d1 10       	cpse	r13, r1
    1752:	91 cf       	rjmp	.-222    	; 0x1676 <fat_write_dir_entry+0x234>
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	0b c0       	rjmp	.+22     	; 0x176e <fat_write_dir_entry+0x32c>
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	09 c0       	rjmp	.+18     	; 0x176e <fat_write_dir_entry+0x32c>
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	07 c0       	rjmp	.+14     	; 0x176e <fat_write_dir_entry+0x32c>
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	05 c0       	rjmp	.+10     	; 0x176e <fat_write_dir_entry+0x32c>
    1764:	8b 2d       	mov	r24, r11
    1766:	90 81       	ld	r25, Z
    1768:	91 11       	cpse	r25, r1
    176a:	9d cf       	rjmp	.-198    	; 0x16a6 <fat_write_dir_entry+0x264>
    176c:	bf cf       	rjmp	.-130    	; 0x16ec <fat_write_dir_entry+0x2aa>
    176e:	a6 96       	adiw	r28, 0x26	; 38
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	1f 91       	pop	r17
    1780:	0f 91       	pop	r16
    1782:	ff 90       	pop	r15
    1784:	ef 90       	pop	r14
    1786:	df 90       	pop	r13
    1788:	cf 90       	pop	r12
    178a:	bf 90       	pop	r11
    178c:	af 90       	pop	r10
    178e:	9f 90       	pop	r9
    1790:	8f 90       	pop	r8
    1792:	7f 90       	pop	r7
    1794:	6f 90       	pop	r6
    1796:	5f 90       	pop	r5
    1798:	4f 90       	pop	r4
    179a:	3f 90       	pop	r3
    179c:	2f 90       	pop	r2
    179e:	08 95       	ret

000017a0 <fat_open>:
    17a0:	2f 92       	push	r2
    17a2:	3f 92       	push	r3
    17a4:	4f 92       	push	r4
    17a6:	5f 92       	push	r5
    17a8:	6f 92       	push	r6
    17aa:	7f 92       	push	r7
    17ac:	8f 92       	push	r8
    17ae:	9f 92       	push	r9
    17b0:	af 92       	push	r10
    17b2:	bf 92       	push	r11
    17b4:	cf 92       	push	r12
    17b6:	df 92       	push	r13
    17b8:	ef 92       	push	r14
    17ba:	ff 92       	push	r15
    17bc:	0f 93       	push	r16
    17be:	1f 93       	push	r17
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	c6 55       	subi	r28, 0x56	; 86
    17ca:	d1 09       	sbc	r29, r1
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	09 f4       	brne	.+2      	; 0x17dc <fat_open+0x3c>
    17da:	70 c2       	rjmp	.+1248   	; 0x1cbc <fat_open+0x51c>
    17dc:	dc 01       	movw	r26, r24
    17de:	14 96       	adiw	r26, 0x04	; 4
    17e0:	2d 91       	ld	r18, X+
    17e2:	3c 91       	ld	r19, X
    17e4:	15 97       	sbiw	r26, 0x05	; 5
    17e6:	23 2b       	or	r18, r19
    17e8:	09 f4       	brne	.+2      	; 0x17ec <fat_open+0x4c>
    17ea:	6b c2       	rjmp	.+1238   	; 0x1cc2 <fat_open+0x522>
    17ec:	16 96       	adiw	r26, 0x06	; 6
    17ee:	2d 91       	ld	r18, X+
    17f0:	3c 91       	ld	r19, X
    17f2:	17 97       	sbiw	r26, 0x07	; 7
    17f4:	23 2b       	or	r18, r19
    17f6:	09 f4       	brne	.+2      	; 0x17fa <fat_open+0x5a>
    17f8:	67 c2       	rjmp	.+1230   	; 0x1cc8 <fat_open+0x528>
    17fa:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <fat_fs_handles>
    17fe:	30 91 26 02 	lds	r19, 0x0226	; 0x800226 <fat_fs_handles+0x1>
    1802:	23 2b       	or	r18, r19
    1804:	09 f4       	brne	.+2      	; 0x1808 <fat_open+0x68>
    1806:	63 c2       	rjmp	.+1222   	; 0x1cce <fat_open+0x52e>
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	9c c2       	rjmp	.+1336   	; 0x1d46 <fat_open+0x5a6>
    180e:	ce 01       	movw	r24, r28
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <read16>
    1816:	9a af       	std	Y+58, r25	; 0x3a
    1818:	89 af       	std	Y+57, r24	; 0x39
    181a:	ce 01       	movw	r24, r28
    181c:	04 96       	adiw	r24, 0x04	; 4
    181e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <read16>
    1822:	9c af       	std	Y+60, r25	; 0x3c
    1824:	8b af       	std	Y+59, r24	; 0x3b
    1826:	bb 81       	ldd	r27, Y+3	; 0x03
    1828:	24 96       	adiw	r28, 0x04	; 4
    182a:	bf af       	std	Y+63, r27	; 0x3f
    182c:	24 97       	sbiw	r28, 0x04	; 4
    182e:	ee 81       	ldd	r30, Y+6	; 0x06
    1830:	25 96       	adiw	r28, 0x05	; 5
    1832:	ef af       	std	Y+63, r30	; 0x3f
    1834:	25 97       	sbiw	r28, 0x05	; 5
    1836:	ce 01       	movw	r24, r28
    1838:	07 96       	adiw	r24, 0x07	; 7
    183a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <read16>
    183e:	2f 96       	adiw	r28, 0x0f	; 15
    1840:	9f af       	std	Y+63, r25	; 0x3f
    1842:	8e af       	std	Y+62, r24	; 0x3e
    1844:	2f 97       	sbiw	r28, 0x0f	; 15
    1846:	ce 01       	movw	r24, r28
    1848:	09 96       	adiw	r24, 0x09	; 9
    184a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <read16>
    184e:	7c 01       	movw	r14, r24
    1850:	ce 01       	movw	r24, r28
    1852:	0c 96       	adiw	r24, 0x0c	; 12
    1854:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <read16>
    1858:	23 96       	adiw	r28, 0x03	; 3
    185a:	9f af       	std	Y+63, r25	; 0x3f
    185c:	8e af       	std	Y+62, r24	; 0x3e
    185e:	23 97       	sbiw	r28, 0x03	; 3
    1860:	ce 01       	movw	r24, r28
    1862:	46 96       	adiw	r24, 0x16	; 22
    1864:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <read32>
    1868:	5b 01       	movw	r10, r22
    186a:	6c 01       	movw	r12, r24
    186c:	ce 01       	movw	r24, r28
    186e:	4a 96       	adiw	r24, 0x1a	; 26
    1870:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <read32>
    1874:	21 96       	adiw	r28, 0x01	; 1
    1876:	6c af       	std	Y+60, r22	; 0x3c
    1878:	7d af       	std	Y+61, r23	; 0x3d
    187a:	8e af       	std	Y+62, r24	; 0x3e
    187c:	9f af       	std	Y+63, r25	; 0x3f
    187e:	21 97       	sbiw	r28, 0x01	; 1
    1880:	ce 01       	movw	r24, r28
    1882:	82 96       	adiw	r24, 0x22	; 34
    1884:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <read32>
    1888:	67 96       	adiw	r28, 0x17	; 23
    188a:	6c af       	std	Y+60, r22	; 0x3c
    188c:	7d af       	std	Y+61, r23	; 0x3d
    188e:	8e af       	std	Y+62, r24	; 0x3e
    1890:	9f af       	std	Y+63, r25	; 0x3f
    1892:	67 97       	sbiw	r28, 0x17	; 23
    1894:	a1 14       	cp	r10, r1
    1896:	b1 04       	cpc	r11, r1
    1898:	c1 04       	cpc	r12, r1
    189a:	d1 04       	cpc	r13, r1
    189c:	39 f4       	brne	.+14     	; 0x18ac <fat_open+0x10c>
    189e:	e1 14       	cp	r14, r1
    18a0:	f1 04       	cpc	r15, r1
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <fat_open+0x106>
    18a4:	47 c2       	rjmp	.+1166   	; 0x1d34 <fat_open+0x594>
    18a6:	57 01       	movw	r10, r14
    18a8:	c1 2c       	mov	r12, r1
    18aa:	d1 2c       	mov	r13, r1
    18ac:	23 96       	adiw	r28, 0x03	; 3
    18ae:	ee ac       	ldd	r14, Y+62	; 0x3e
    18b0:	ff ac       	ldd	r15, Y+63	; 0x3f
    18b2:	23 97       	sbiw	r28, 0x03	; 3
    18b4:	e1 14       	cp	r14, r1
    18b6:	f1 04       	cpc	r15, r1
    18b8:	51 f0       	breq	.+20     	; 0x18ce <fat_open+0x12e>
    18ba:	87 01       	movw	r16, r14
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	21 96       	adiw	r28, 0x01	; 1
    18c2:	0c af       	std	Y+60, r16	; 0x3c
    18c4:	1d af       	std	Y+61, r17	; 0x3d
    18c6:	2e af       	std	Y+62, r18	; 0x3e
    18c8:	3f af       	std	Y+63, r19	; 0x3f
    18ca:	21 97       	sbiw	r28, 0x01	; 1
    18cc:	0b c0       	rjmp	.+22     	; 0x18e4 <fat_open+0x144>
    18ce:	21 96       	adiw	r28, 0x01	; 1
    18d0:	4c ad       	ldd	r20, Y+60	; 0x3c
    18d2:	5d ad       	ldd	r21, Y+61	; 0x3d
    18d4:	6e ad       	ldd	r22, Y+62	; 0x3e
    18d6:	7f ad       	ldd	r23, Y+63	; 0x3f
    18d8:	21 97       	sbiw	r28, 0x01	; 1
    18da:	45 2b       	or	r20, r21
    18dc:	46 2b       	or	r20, r22
    18de:	47 2b       	or	r20, r23
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <fat_open+0x144>
    18e2:	28 c2       	rjmp	.+1104   	; 0x1d34 <fat_open+0x594>
    18e4:	25 96       	adiw	r28, 0x05	; 5
    18e6:	5f ad       	ldd	r21, Y+63	; 0x3f
    18e8:	25 97       	sbiw	r28, 0x05	; 5
    18ea:	a5 2f       	mov	r26, r21
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	21 96       	adiw	r28, 0x01	; 1
    18f0:	2c ad       	ldd	r18, Y+60	; 0x3c
    18f2:	3d ad       	ldd	r19, Y+61	; 0x3d
    18f4:	4e ad       	ldd	r20, Y+62	; 0x3e
    18f6:	5f ad       	ldd	r21, Y+63	; 0x3f
    18f8:	21 97       	sbiw	r28, 0x01	; 1
    18fa:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <__muluhisi3>
    18fe:	86 01       	movw	r16, r12
    1900:	75 01       	movw	r14, r10
    1902:	2b ad       	ldd	r18, Y+59	; 0x3b
    1904:	3c ad       	ldd	r19, Y+60	; 0x3c
    1906:	e2 1a       	sub	r14, r18
    1908:	f3 0a       	sbc	r15, r19
    190a:	01 09       	sbc	r16, r1
    190c:	11 09       	sbc	r17, r1
    190e:	e6 1a       	sub	r14, r22
    1910:	f7 0a       	sbc	r15, r23
    1912:	08 0b       	sbc	r16, r24
    1914:	19 0b       	sbc	r17, r25
    1916:	2f 96       	adiw	r28, 0x0f	; 15
    1918:	8e ad       	ldd	r24, Y+62	; 0x3e
    191a:	9f ad       	ldd	r25, Y+63	; 0x3f
    191c:	2f 97       	sbiw	r28, 0x0f	; 15
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	82 95       	swap	r24
    1924:	92 95       	swap	r25
    1926:	90 7f       	andi	r25, 0xF0	; 240
    1928:	98 27       	eor	r25, r24
    192a:	80 7f       	andi	r24, 0xF0	; 240
    192c:	98 27       	eor	r25, r24
    192e:	49 ad       	ldd	r20, Y+57	; 0x39
    1930:	5a ad       	ldd	r21, Y+58	; 0x3a
    1932:	41 50       	subi	r20, 0x01	; 1
    1934:	51 09       	sbc	r21, r1
    1936:	84 0f       	add	r24, r20
    1938:	95 1f       	adc	r25, r21
    193a:	69 ad       	ldd	r22, Y+57	; 0x39
    193c:	7a ad       	ldd	r23, Y+58	; 0x3a
    193e:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <__udivmodhi4>
    1942:	e6 1a       	sub	r14, r22
    1944:	f7 0a       	sbc	r15, r23
    1946:	01 09       	sbc	r16, r1
    1948:	11 09       	sbc	r17, r1
    194a:	c8 01       	movw	r24, r16
    194c:	b7 01       	movw	r22, r14
    194e:	24 96       	adiw	r28, 0x04	; 4
    1950:	4f ad       	ldd	r20, Y+63	; 0x3f
    1952:	24 97       	sbiw	r28, 0x04	; 4
    1954:	04 2f       	mov	r16, r20
    1956:	10 e0       	ldi	r17, 0x00	; 0
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	a9 01       	movw	r20, r18
    195e:	98 01       	movw	r18, r16
    1960:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__udivmodsi4>
    1964:	63 96       	adiw	r28, 0x13	; 19
    1966:	2c af       	std	Y+60, r18	; 0x3c
    1968:	3d af       	std	Y+61, r19	; 0x3d
    196a:	4e af       	std	Y+62, r20	; 0x3e
    196c:	5f af       	std	Y+63, r21	; 0x3f
    196e:	63 97       	sbiw	r28, 0x13	; 19
    1970:	da 01       	movw	r26, r20
    1972:	c9 01       	movw	r24, r18
    1974:	85 3f       	cpi	r24, 0xF5	; 245
    1976:	5f e0       	ldi	r21, 0x0F	; 15
    1978:	95 07       	cpc	r25, r21
    197a:	a1 05       	cpc	r26, r1
    197c:	b1 05       	cpc	r27, r1
    197e:	08 f4       	brcc	.+2      	; 0x1982 <fat_open+0x1e2>
    1980:	d9 c1       	rjmp	.+946    	; 0x1d34 <fat_open+0x594>
    1982:	85 3f       	cpi	r24, 0xF5	; 245
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	a1 05       	cpc	r26, r1
    1988:	b1 05       	cpc	r27, r1
    198a:	28 f4       	brcc	.+10     	; 0x1996 <fat_open+0x1f6>
    198c:	86 e0       	ldi	r24, 0x06	; 6
    198e:	d2 01       	movw	r26, r4
    1990:	18 96       	adiw	r26, 0x08	; 8
    1992:	8c 93       	st	X, r24
    1994:	03 c0       	rjmp	.+6      	; 0x199c <fat_open+0x1fc>
    1996:	8b e0       	ldi	r24, 0x0B	; 11
    1998:	f2 01       	movw	r30, r4
    199a:	80 87       	std	Z+8, r24	; 0x08
    199c:	8c e2       	ldi	r24, 0x2C	; 44
    199e:	e7 e2       	ldi	r30, 0x27	; 39
    19a0:	f2 e0       	ldi	r31, 0x02	; 2
    19a2:	df 01       	movw	r26, r30
    19a4:	1d 92       	st	X+, r1
    19a6:	8a 95       	dec	r24
    19a8:	e9 f7       	brne	.-6      	; 0x19a4 <fat_open+0x204>
    19aa:	09 ad       	ldd	r16, Y+57	; 0x39
    19ac:	1a ad       	ldd	r17, Y+58	; 0x3a
    19ae:	78 01       	movw	r14, r16
    19b0:	00 e0       	ldi	r16, 0x00	; 0
    19b2:	10 e0       	ldi	r17, 0x00	; 0
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	a9 01       	movw	r20, r18
    19ba:	e9 aa       	std	Y+49, r14	; 0x31
    19bc:	fa aa       	std	Y+50, r15	; 0x32
    19be:	0b ab       	std	Y+51, r16	; 0x33
    19c0:	1c ab       	std	Y+52, r17	; 0x34
    19c2:	2d ab       	std	Y+53, r18	; 0x35
    19c4:	3e ab       	std	Y+54, r19	; 0x36
    19c6:	4f ab       	std	Y+55, r20	; 0x37
    19c8:	58 af       	std	Y+56, r21	; 0x38
    19ca:	0f 2e       	mov	r0, r31
    19cc:	f5 e2       	ldi	r31, 0x25	; 37
    19ce:	8f 2e       	mov	r8, r31
    19d0:	f2 e0       	ldi	r31, 0x02	; 2
    19d2:	9f 2e       	mov	r9, r31
    19d4:	f0 2d       	mov	r31, r0
    19d6:	a6 01       	movw	r20, r12
    19d8:	95 01       	movw	r18, r10
    19da:	60 e0       	ldi	r22, 0x00	; 0
    19dc:	70 e0       	ldi	r23, 0x00	; 0
    19de:	cb 01       	movw	r24, r22
    19e0:	26 96       	adiw	r28, 0x06	; 6
    19e2:	af ae       	std	Y+63, r10	; 0x3f
    19e4:	26 97       	sbiw	r28, 0x06	; 6
    19e6:	27 96       	adiw	r28, 0x07	; 7
    19e8:	3f af       	std	Y+63, r19	; 0x3f
    19ea:	27 97       	sbiw	r28, 0x07	; 7
    19ec:	28 96       	adiw	r28, 0x08	; 8
    19ee:	4f af       	std	Y+63, r20	; 0x3f
    19f0:	28 97       	sbiw	r28, 0x08	; 8
    19f2:	29 96       	adiw	r28, 0x09	; 9
    19f4:	5f af       	std	Y+63, r21	; 0x3f
    19f6:	29 97       	sbiw	r28, 0x09	; 9
    19f8:	2a 96       	adiw	r28, 0x0a	; 10
    19fa:	6f af       	std	Y+63, r22	; 0x3f
    19fc:	2a 97       	sbiw	r28, 0x0a	; 10
    19fe:	2b 96       	adiw	r28, 0x0b	; 11
    1a00:	7f af       	std	Y+63, r23	; 0x3f
    1a02:	2b 97       	sbiw	r28, 0x0b	; 11
    1a04:	2c 96       	adiw	r28, 0x0c	; 12
    1a06:	8f af       	std	Y+63, r24	; 0x3f
    1a08:	2c 97       	sbiw	r28, 0x0c	; 12
    1a0a:	2d 96       	adiw	r28, 0x0d	; 13
    1a0c:	9f af       	std	Y+63, r25	; 0x3f
    1a0e:	2d 97       	sbiw	r28, 0x0d	; 13
    1a10:	ae 2c       	mov	r10, r14
    1a12:	bf 2c       	mov	r11, r15
    1a14:	c1 2c       	mov	r12, r1
    1a16:	d1 2c       	mov	r13, r1
    1a18:	e1 2c       	mov	r14, r1
    1a1a:	f1 2c       	mov	r15, r1
    1a1c:	00 e0       	ldi	r16, 0x00	; 0
    1a1e:	10 e0       	ldi	r17, 0x00	; 0
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__muldi3>
    1a2c:	d4 01       	movw	r26, r8
    1a2e:	12 96       	adiw	r26, 0x02	; 2
    1a30:	2c 93       	st	X, r18
    1a32:	12 97       	sbiw	r26, 0x02	; 2
    1a34:	13 96       	adiw	r26, 0x03	; 3
    1a36:	3c 93       	st	X, r19
    1a38:	13 97       	sbiw	r26, 0x03	; 3
    1a3a:	14 96       	adiw	r26, 0x04	; 4
    1a3c:	4c 93       	st	X, r20
    1a3e:	14 97       	sbiw	r26, 0x04	; 4
    1a40:	15 96       	adiw	r26, 0x05	; 5
    1a42:	5c 93       	st	X, r21
    1a44:	15 97       	sbiw	r26, 0x05	; 5
    1a46:	16 96       	adiw	r26, 0x06	; 6
    1a48:	6c 93       	st	X, r22
    1a4a:	16 97       	sbiw	r26, 0x06	; 6
    1a4c:	17 96       	adiw	r26, 0x07	; 7
    1a4e:	7c 93       	st	X, r23
    1a50:	17 97       	sbiw	r26, 0x07	; 7
    1a52:	18 96       	adiw	r26, 0x08	; 8
    1a54:	8c 93       	st	X, r24
    1a56:	18 97       	sbiw	r26, 0x08	; 8
    1a58:	19 96       	adiw	r26, 0x09	; 9
    1a5a:	9c 93       	st	X, r25
    1a5c:	eb ad       	ldd	r30, Y+59	; 0x3b
    1a5e:	fc ad       	ldd	r31, Y+60	; 0x3c
    1a60:	af 01       	movw	r20, r30
    1a62:	2e 2f       	mov	r18, r30
    1a64:	35 2f       	mov	r19, r21
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	50 e0       	ldi	r21, 0x00	; 0
    1a6a:	60 e0       	ldi	r22, 0x00	; 0
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__muldi3>
    1a76:	a6 2c       	mov	r10, r6
    1a78:	b7 2c       	mov	r11, r7
    1a7a:	ce a0       	ldd	r12, Y+38	; 0x26
    1a7c:	de a4       	ldd	r13, Y+46	; 0x2e
    1a7e:	ef a4       	ldd	r14, Y+47	; 0x2f
    1a80:	f8 a8       	ldd	r15, Y+48	; 0x30
    1a82:	02 2d       	mov	r16, r2
    1a84:	13 2d       	mov	r17, r3
    1a86:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
    1a8a:	72 2e       	mov	r7, r18
    1a8c:	63 2e       	mov	r6, r19
    1a8e:	4e a7       	std	Y+46, r20	; 0x2e
    1a90:	5f a7       	std	Y+47, r21	; 0x2f
    1a92:	68 ab       	std	Y+48, r22	; 0x30
    1a94:	7b af       	std	Y+59, r23	; 0x3b
    1a96:	28 2e       	mov	r2, r24
    1a98:	39 2e       	mov	r3, r25
    1a9a:	d4 01       	movw	r26, r8
    1a9c:	1a 96       	adiw	r26, 0x0a	; 10
    1a9e:	2c 93       	st	X, r18
    1aa0:	1a 97       	sbiw	r26, 0x0a	; 10
    1aa2:	1b 96       	adiw	r26, 0x0b	; 11
    1aa4:	3c 93       	st	X, r19
    1aa6:	1b 97       	sbiw	r26, 0x0b	; 11
    1aa8:	1c 96       	adiw	r26, 0x0c	; 12
    1aaa:	4c 93       	st	X, r20
    1aac:	1c 97       	sbiw	r26, 0x0c	; 12
    1aae:	1d 96       	adiw	r26, 0x0d	; 13
    1ab0:	5c 93       	st	X, r21
    1ab2:	1d 97       	sbiw	r26, 0x0d	; 13
    1ab4:	1e 96       	adiw	r26, 0x0e	; 14
    1ab6:	6c 93       	st	X, r22
    1ab8:	1e 97       	sbiw	r26, 0x0e	; 14
    1aba:	1f 96       	adiw	r26, 0x0f	; 15
    1abc:	7c 93       	st	X, r23
    1abe:	1f 97       	sbiw	r26, 0x0f	; 15
    1ac0:	50 96       	adiw	r26, 0x10	; 16
    1ac2:	8c 93       	st	X, r24
    1ac4:	50 97       	sbiw	r26, 0x10	; 16
    1ac6:	51 96       	adiw	r26, 0x11	; 17
    1ac8:	9c 93       	st	X, r25
    1aca:	63 96       	adiw	r28, 0x13	; 19
    1acc:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ace:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ad0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ad2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ad4:	63 97       	sbiw	r28, 0x13	; 19
    1ad6:	6e 5f       	subi	r22, 0xFE	; 254
    1ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    1ada:	8f 4f       	sbci	r24, 0xFF	; 255
    1adc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ade:	f2 01       	movw	r30, r4
    1ae0:	20 85       	ldd	r18, Z+8	; 0x08
    1ae2:	26 30       	cpi	r18, 0x06	; 6
    1ae4:	29 f0       	breq	.+10     	; 0x1af0 <fat_open+0x350>
    1ae6:	24 e0       	ldi	r18, 0x04	; 4
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	04 c0       	rjmp	.+8      	; 0x1af8 <fat_open+0x358>
    1af0:	22 e0       	ldi	r18, 0x02	; 2
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e0       	ldi	r20, 0x00	; 0
    1af6:	50 e0       	ldi	r21, 0x00	; 0
    1af8:	e5 e2       	ldi	r30, 0x25	; 37
    1afa:	f2 e0       	ldi	r31, 0x02	; 2
    1afc:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <__mulsi3>
    1b00:	62 8b       	std	Z+18, r22	; 0x12
    1b02:	73 8b       	std	Z+19, r23	; 0x13
    1b04:	84 8b       	std	Z+20, r24	; 0x14
    1b06:	95 8b       	std	Z+21, r25	; 0x15
    1b08:	a9 ac       	ldd	r10, Y+57	; 0x39
    1b0a:	ba ac       	ldd	r11, Y+58	; 0x3a
    1b0c:	b7 8a       	std	Z+23, r11	; 0x17
    1b0e:	a6 8a       	std	Z+22, r10	; 0x16
    1b10:	24 96       	adiw	r28, 0x04	; 4
    1b12:	cf ac       	ldd	r12, Y+63	; 0x3f
    1b14:	24 97       	sbiw	r28, 0x04	; 4
    1b16:	ca 9c       	mul	r12, r10
    1b18:	c0 01       	movw	r24, r0
    1b1a:	cb 9c       	mul	r12, r11
    1b1c:	90 0d       	add	r25, r0
    1b1e:	11 24       	eor	r1, r1
    1b20:	91 8f       	std	Z+25, r25	; 0x19
    1b22:	80 8f       	std	Z+24, r24	; 0x18
    1b24:	d2 01       	movw	r26, r4
    1b26:	18 96       	adiw	r26, 0x08	; 8
    1b28:	8c 91       	ld	r24, X
    1b2a:	86 30       	cpi	r24, 0x06	; 6
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <fat_open+0x390>
    1b2e:	63 c0       	rjmp	.+198    	; 0x1bf6 <fat_open+0x456>
    1b30:	23 96       	adiw	r28, 0x03	; 3
    1b32:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b34:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b36:	23 97       	sbiw	r28, 0x03	; 3
    1b38:	8f 01       	movw	r16, r30
    1b3a:	ae 2e       	mov	r10, r30
    1b3c:	b1 2e       	mov	r11, r17
    1b3e:	c1 2c       	mov	r12, r1
    1b40:	d1 2c       	mov	r13, r1
    1b42:	e1 2c       	mov	r14, r1
    1b44:	f1 2c       	mov	r15, r1
    1b46:	00 e0       	ldi	r16, 0x00	; 0
    1b48:	10 e0       	ldi	r17, 0x00	; 0
    1b4a:	29 a9       	ldd	r18, Y+49	; 0x31
    1b4c:	3a a9       	ldd	r19, Y+50	; 0x32
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__muldi3>
    1b5e:	25 96       	adiw	r28, 0x05	; 5
    1b60:	af ac       	ldd	r10, Y+63	; 0x3f
    1b62:	25 97       	sbiw	r28, 0x05	; 5
    1b64:	b1 2c       	mov	r11, r1
    1b66:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__muldi3>
    1b6a:	a7 2c       	mov	r10, r7
    1b6c:	b6 2c       	mov	r11, r6
    1b6e:	ce a4       	ldd	r12, Y+46	; 0x2e
    1b70:	df a4       	ldd	r13, Y+47	; 0x2f
    1b72:	e8 a8       	ldd	r14, Y+48	; 0x30
    1b74:	fb ac       	ldd	r15, Y+59	; 0x3b
    1b76:	02 2d       	mov	r16, r2
    1b78:	13 2d       	mov	r17, r3
    1b7a:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
    1b7e:	42 2e       	mov	r4, r18
    1b80:	53 2e       	mov	r5, r19
    1b82:	64 2e       	mov	r6, r20
    1b84:	75 2e       	mov	r7, r21
    1b86:	86 2e       	mov	r8, r22
    1b88:	97 2e       	mov	r9, r23
    1b8a:	b8 2f       	mov	r27, r24
    1b8c:	a9 2f       	mov	r26, r25
    1b8e:	e5 e2       	ldi	r30, 0x25	; 37
    1b90:	f2 e0       	ldi	r31, 0x02	; 2
    1b92:	22 a3       	std	Z+34, r18	; 0x22
    1b94:	33 a3       	std	Z+35, r19	; 0x23
    1b96:	44 a3       	std	Z+36, r20	; 0x24
    1b98:	55 a3       	std	Z+37, r21	; 0x25
    1b9a:	66 a3       	std	Z+38, r22	; 0x26
    1b9c:	77 a3       	std	Z+39, r23	; 0x27
    1b9e:	80 a7       	std	Z+40, r24	; 0x28
    1ba0:	91 a7       	std	Z+41, r25	; 0x29
    1ba2:	2f 96       	adiw	r28, 0x0f	; 15
    1ba4:	2e ad       	ldd	r18, Y+62	; 0x3e
    1ba6:	3f ad       	ldd	r19, Y+63	; 0x3f
    1ba8:	2f 97       	sbiw	r28, 0x0f	; 15
    1baa:	59 01       	movw	r10, r18
    1bac:	3b 2d       	mov	r19, r11
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	50 e0       	ldi	r21, 0x00	; 0
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	05 e0       	ldi	r16, 0x05	; 5
    1bbc:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <__ashldi3>
    1bc0:	a2 2e       	mov	r10, r18
    1bc2:	b3 2e       	mov	r11, r19
    1bc4:	c4 2e       	mov	r12, r20
    1bc6:	d5 2e       	mov	r13, r21
    1bc8:	e6 2e       	mov	r14, r22
    1bca:	f7 2e       	mov	r15, r23
    1bcc:	08 2f       	mov	r16, r24
    1bce:	19 2f       	mov	r17, r25
    1bd0:	24 2d       	mov	r18, r4
    1bd2:	35 2d       	mov	r19, r5
    1bd4:	46 2d       	mov	r20, r6
    1bd6:	57 2d       	mov	r21, r7
    1bd8:	68 2d       	mov	r22, r8
    1bda:	79 2d       	mov	r23, r9
    1bdc:	8b 2f       	mov	r24, r27
    1bde:	9a 2f       	mov	r25, r26
    1be0:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
    1be4:	22 8f       	std	Z+26, r18	; 0x1a
    1be6:	33 8f       	std	Z+27, r19	; 0x1b
    1be8:	44 8f       	std	Z+28, r20	; 0x1c
    1bea:	55 8f       	std	Z+29, r21	; 0x1d
    1bec:	66 8f       	std	Z+30, r22	; 0x1e
    1bee:	77 8f       	std	Z+31, r23	; 0x1f
    1bf0:	80 a3       	std	Z+32, r24	; 0x20
    1bf2:	91 a3       	std	Z+33, r25	; 0x21
    1bf4:	a6 c0       	rjmp	.+332    	; 0x1d42 <fat_open+0x5a2>
    1bf6:	0f 2e       	mov	r0, r31
    1bf8:	f5 e2       	ldi	r31, 0x25	; 37
    1bfa:	8f 2e       	mov	r8, r31
    1bfc:	f2 e0       	ldi	r31, 0x02	; 2
    1bfe:	9f 2e       	mov	r9, r31
    1c00:	f0 2d       	mov	r31, r0
    1c02:	25 96       	adiw	r28, 0x05	; 5
    1c04:	af ac       	ldd	r10, Y+63	; 0x3f
    1c06:	25 97       	sbiw	r28, 0x05	; 5
    1c08:	b1 2c       	mov	r11, r1
    1c0a:	c1 2c       	mov	r12, r1
    1c0c:	d1 2c       	mov	r13, r1
    1c0e:	e1 2c       	mov	r14, r1
    1c10:	f1 2c       	mov	r15, r1
    1c12:	00 e0       	ldi	r16, 0x00	; 0
    1c14:	10 e0       	ldi	r17, 0x00	; 0
    1c16:	29 a9       	ldd	r18, Y+49	; 0x31
    1c18:	3a a9       	ldd	r19, Y+50	; 0x32
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	50 e0       	ldi	r21, 0x00	; 0
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__muldi3>
    1c2a:	21 96       	adiw	r28, 0x01	; 1
    1c2c:	cc ac       	ldd	r12, Y+60	; 0x3c
    1c2e:	dd ac       	ldd	r13, Y+61	; 0x3d
    1c30:	ee ac       	ldd	r14, Y+62	; 0x3e
    1c32:	ff ac       	ldd	r15, Y+63	; 0x3f
    1c34:	21 97       	sbiw	r28, 0x01	; 1
    1c36:	56 01       	movw	r10, r12
    1c38:	67 01       	movw	r12, r14
    1c3a:	e1 2c       	mov	r14, r1
    1c3c:	f1 2c       	mov	r15, r1
    1c3e:	87 01       	movw	r16, r14
    1c40:	ae a2       	std	Y+38, r10	; 0x26
    1c42:	bf a2       	std	Y+39, r11	; 0x27
    1c44:	c8 a6       	std	Y+40, r12	; 0x28
    1c46:	d9 a6       	std	Y+41, r13	; 0x29
    1c48:	ea a6       	std	Y+42, r14	; 0x2a
    1c4a:	fb a6       	std	Y+43, r15	; 0x2b
    1c4c:	0c a7       	std	Y+44, r16	; 0x2c
    1c4e:	1d a7       	std	Y+45, r17	; 0x2d
    1c50:	e1 2c       	mov	r14, r1
    1c52:	f1 2c       	mov	r15, r1
    1c54:	00 e0       	ldi	r16, 0x00	; 0
    1c56:	10 e0       	ldi	r17, 0x00	; 0
    1c58:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <__muldi3>
    1c5c:	a7 2c       	mov	r10, r7
    1c5e:	b6 2c       	mov	r11, r6
    1c60:	ce a4       	ldd	r12, Y+46	; 0x2e
    1c62:	df a4       	ldd	r13, Y+47	; 0x2f
    1c64:	e8 a8       	ldd	r14, Y+48	; 0x30
    1c66:	fb ac       	ldd	r15, Y+59	; 0x3b
    1c68:	02 2d       	mov	r16, r2
    1c6a:	13 2d       	mov	r17, r3
    1c6c:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
    1c70:	d4 01       	movw	r26, r8
    1c72:	5a 96       	adiw	r26, 0x1a	; 26
    1c74:	2c 93       	st	X, r18
    1c76:	5a 97       	sbiw	r26, 0x1a	; 26
    1c78:	5b 96       	adiw	r26, 0x1b	; 27
    1c7a:	3c 93       	st	X, r19
    1c7c:	5b 97       	sbiw	r26, 0x1b	; 27
    1c7e:	5c 96       	adiw	r26, 0x1c	; 28
    1c80:	4c 93       	st	X, r20
    1c82:	5c 97       	sbiw	r26, 0x1c	; 28
    1c84:	5d 96       	adiw	r26, 0x1d	; 29
    1c86:	5c 93       	st	X, r21
    1c88:	5d 97       	sbiw	r26, 0x1d	; 29
    1c8a:	5e 96       	adiw	r26, 0x1e	; 30
    1c8c:	6c 93       	st	X, r22
    1c8e:	5e 97       	sbiw	r26, 0x1e	; 30
    1c90:	5f 96       	adiw	r26, 0x1f	; 31
    1c92:	7c 93       	st	X, r23
    1c94:	5f 97       	sbiw	r26, 0x1f	; 31
    1c96:	90 96       	adiw	r26, 0x20	; 32
    1c98:	8c 93       	st	X, r24
    1c9a:	90 97       	sbiw	r26, 0x20	; 32
    1c9c:	91 96       	adiw	r26, 0x21	; 33
    1c9e:	9c 93       	st	X, r25
    1ca0:	91 97       	sbiw	r26, 0x21	; 33
    1ca2:	67 96       	adiw	r28, 0x17	; 23
    1ca4:	ac ac       	ldd	r10, Y+60	; 0x3c
    1ca6:	bd ac       	ldd	r11, Y+61	; 0x3d
    1ca8:	ce ac       	ldd	r12, Y+62	; 0x3e
    1caa:	df ac       	ldd	r13, Y+63	; 0x3f
    1cac:	67 97       	sbiw	r28, 0x17	; 23
    1cae:	9a 96       	adiw	r26, 0x2a	; 42
    1cb0:	ad 92       	st	X+, r10
    1cb2:	bd 92       	st	X+, r11
    1cb4:	cd 92       	st	X+, r12
    1cb6:	dc 92       	st	X, r13
    1cb8:	9d 97       	sbiw	r26, 0x2d	; 45
    1cba:	43 c0       	rjmp	.+134    	; 0x1d42 <fat_open+0x5a2>
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	42 c0       	rjmp	.+132    	; 0x1d46 <fat_open+0x5a6>
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	3f c0       	rjmp	.+126    	; 0x1d46 <fat_open+0x5a6>
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	3c c0       	rjmp	.+120    	; 0x1d46 <fat_open+0x5a6>
    1cce:	2c 01       	movw	r4, r24
    1cd0:	e5 e2       	ldi	r30, 0x25	; 37
    1cd2:	f2 e0       	ldi	r31, 0x02	; 2
    1cd4:	82 e3       	ldi	r24, 0x32	; 50
    1cd6:	df 01       	movw	r26, r30
    1cd8:	1d 92       	st	X+, r1
    1cda:	8a 95       	dec	r24
    1cdc:	e9 f7       	brne	.-6      	; 0x1cd8 <fat_open+0x538>
    1cde:	51 82       	std	Z+1, r5	; 0x01
    1ce0:	40 82       	st	Z, r4
    1ce2:	f2 01       	movw	r30, r4
    1ce4:	81 84       	ldd	r8, Z+9	; 0x09
    1ce6:	92 84       	ldd	r9, Z+10	; 0x0a
    1ce8:	a3 84       	ldd	r10, Z+11	; 0x0b
    1cea:	b4 84       	ldd	r11, Z+12	; 0x0c
    1cec:	28 2d       	mov	r18, r8
    1cee:	39 2d       	mov	r19, r9
    1cf0:	4a 2d       	mov	r20, r10
    1cf2:	5b 2d       	mov	r21, r11
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	09 e0       	ldi	r16, 0x09	; 9
    1cfe:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <__ashldi3>
    1d02:	62 2e       	mov	r6, r18
    1d04:	73 2e       	mov	r7, r19
    1d06:	4e a3       	std	Y+38, r20	; 0x26
    1d08:	5e a7       	std	Y+46, r21	; 0x2e
    1d0a:	6f a7       	std	Y+47, r22	; 0x2f
    1d0c:	78 ab       	std	Y+48, r23	; 0x30
    1d0e:	28 2e       	mov	r2, r24
    1d10:	39 2e       	mov	r3, r25
    1d12:	ab e0       	ldi	r26, 0x0B	; 11
    1d14:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <__adddi3_s8>
    1d18:	01 90       	ld	r0, Z+
    1d1a:	f0 81       	ld	r31, Z
    1d1c:	e0 2d       	mov	r30, r0
    1d1e:	0f 2e       	mov	r0, r31
    1d20:	f5 e2       	ldi	r31, 0x25	; 37
    1d22:	ef 2e       	mov	r14, r31
    1d24:	f1 2c       	mov	r15, r1
    1d26:	f0 2d       	mov	r31, r0
    1d28:	8e 01       	movw	r16, r28
    1d2a:	0f 5f       	subi	r16, 0xFF	; 255
    1d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2e:	09 95       	icall
    1d30:	81 11       	cpse	r24, r1
    1d32:	6d cd       	rjmp	.-1318   	; 0x180e <fat_open+0x6e>
    1d34:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <fat_fs_handles+0x1>
    1d38:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <fat_fs_handles>
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <fat_open+0x5a6>
    1d42:	85 e2       	ldi	r24, 0x25	; 37
    1d44:	92 e0       	ldi	r25, 0x02	; 2
    1d46:	ca 5a       	subi	r28, 0xAA	; 170
    1d48:	df 4f       	sbci	r29, 0xFF	; 255
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	1f 91       	pop	r17
    1d5a:	0f 91       	pop	r16
    1d5c:	ff 90       	pop	r15
    1d5e:	ef 90       	pop	r14
    1d60:	df 90       	pop	r13
    1d62:	cf 90       	pop	r12
    1d64:	bf 90       	pop	r11
    1d66:	af 90       	pop	r10
    1d68:	9f 90       	pop	r9
    1d6a:	8f 90       	pop	r8
    1d6c:	7f 90       	pop	r7
    1d6e:	6f 90       	pop	r6
    1d70:	5f 90       	pop	r5
    1d72:	4f 90       	pop	r4
    1d74:	3f 90       	pop	r3
    1d76:	2f 90       	pop	r2
    1d78:	08 95       	ret

00001d7a <fat_close>:
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	19 f0       	breq	.+6      	; 0x1d84 <fat_close+0xa>
    1d7e:	fc 01       	movw	r30, r24
    1d80:	11 82       	std	Z+1, r1	; 0x01
    1d82:	10 82       	st	Z, r1
    1d84:	08 95       	ret

00001d86 <fat_open_file>:
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	81 f0       	breq	.+32     	; 0x1daa <fat_open_file+0x24>
    1d8a:	61 15       	cp	r22, r1
    1d8c:	71 05       	cpc	r23, r1
    1d8e:	81 f0       	breq	.+32     	; 0x1db0 <fat_open_file+0x2a>
    1d90:	fb 01       	movw	r30, r22
    1d92:	20 a1       	ldd	r18, Z+32	; 0x20
    1d94:	24 fd       	sbrc	r18, 4
    1d96:	0f c0       	rjmp	.+30     	; 0x1db6 <fat_open_file+0x30>
    1d98:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <fat_file_handles>
    1d9c:	30 91 e7 01 	lds	r19, 0x01E7	; 0x8001e7 <fat_file_handles+0x1>
    1da0:	23 2b       	or	r18, r19
    1da2:	61 f0       	breq	.+24     	; 0x1dbc <fat_open_file+0x36>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	08 95       	ret
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	08 95       	ret
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	08 95       	ret
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	08 95       	ret
    1dbc:	21 e3       	ldi	r18, 0x31	; 49
    1dbe:	fb 01       	movw	r30, r22
    1dc0:	a8 ee       	ldi	r26, 0xE8	; 232
    1dc2:	b1 e0       	ldi	r27, 0x01	; 1
    1dc4:	01 90       	ld	r0, Z+
    1dc6:	0d 92       	st	X+, r0
    1dc8:	2a 95       	dec	r18
    1dca:	e1 f7       	brne	.-8      	; 0x1dc4 <fat_open_file+0x3e>
    1dcc:	a6 ee       	ldi	r26, 0xE6	; 230
    1dce:	b1 e0       	ldi	r27, 0x01	; 1
    1dd0:	11 96       	adiw	r26, 0x01	; 1
    1dd2:	9c 93       	st	X, r25
    1dd4:	8e 93       	st	-X, r24
    1dd6:	d3 96       	adiw	r26, 0x33	; 51
    1dd8:	1c 92       	st	X, r1
    1dda:	d3 97       	sbiw	r26, 0x33	; 51
    1ddc:	d4 96       	adiw	r26, 0x34	; 52
    1dde:	1c 92       	st	X, r1
    1de0:	d4 97       	sbiw	r26, 0x34	; 52
    1de2:	d5 96       	adiw	r26, 0x35	; 53
    1de4:	1c 92       	st	X, r1
    1de6:	d5 97       	sbiw	r26, 0x35	; 53
    1de8:	d6 96       	adiw	r26, 0x36	; 54
    1dea:	1c 92       	st	X, r1
    1dec:	d6 97       	sbiw	r26, 0x36	; 54
    1dee:	d7 96       	adiw	r26, 0x37	; 55
    1df0:	1c 92       	st	X, r1
    1df2:	d7 97       	sbiw	r26, 0x37	; 55
    1df4:	d8 96       	adiw	r26, 0x38	; 56
    1df6:	1c 92       	st	X, r1
    1df8:	d8 97       	sbiw	r26, 0x38	; 56
    1dfa:	d9 96       	adiw	r26, 0x39	; 57
    1dfc:	1c 92       	st	X, r1
    1dfe:	d9 97       	sbiw	r26, 0x39	; 57
    1e00:	da 96       	adiw	r26, 0x3a	; 58
    1e02:	1c 92       	st	X, r1
    1e04:	da 97       	sbiw	r26, 0x3a	; 58
    1e06:	fb 01       	movw	r30, r22
    1e08:	41 a1       	ldd	r20, Z+33	; 0x21
    1e0a:	52 a1       	ldd	r21, Z+34	; 0x22
    1e0c:	63 a1       	ldd	r22, Z+35	; 0x23
    1e0e:	74 a1       	ldd	r23, Z+36	; 0x24
    1e10:	db 96       	adiw	r26, 0x3b	; 59
    1e12:	4d 93       	st	X+, r20
    1e14:	5d 93       	st	X+, r21
    1e16:	6d 93       	st	X+, r22
    1e18:	7c 93       	st	X, r23
    1e1a:	de 97       	sbiw	r26, 0x3e	; 62
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	08 95       	ret

00001e20 <fat_close_file>:
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	19 f0       	breq	.+6      	; 0x1e2a <fat_close_file+0xa>
    1e24:	fc 01       	movw	r30, r24
    1e26:	11 82       	std	Z+1, r1	; 0x01
    1e28:	10 82       	st	Z, r1
    1e2a:	08 95       	ret

00001e2c <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written (0 or something less than \c buffer_len on disk full) or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    1e2c:	2f 92       	push	r2
    1e2e:	3f 92       	push	r3
    1e30:	4f 92       	push	r4
    1e32:	5f 92       	push	r5
    1e34:	6f 92       	push	r6
    1e36:	7f 92       	push	r7
    1e38:	8f 92       	push	r8
    1e3a:	9f 92       	push	r9
    1e3c:	af 92       	push	r10
    1e3e:	bf 92       	push	r11
    1e40:	cf 92       	push	r12
    1e42:	df 92       	push	r13
    1e44:	ef 92       	push	r14
    1e46:	ff 92       	push	r15
    1e48:	0f 93       	push	r16
    1e4a:	1f 93       	push	r17
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	6b 97       	sbiw	r28, 0x1b	; 27
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	99 8f       	std	Y+25, r25	; 0x19
    1e62:	88 8f       	std	Y+24, r24	; 0x18
    1e64:	7a 8b       	std	Y+18, r23	; 0x12
    1e66:	69 8b       	std	Y+17, r22	; 0x11
    1e68:	5f 8b       	std	Y+23, r21	; 0x17
    1e6a:	4e 8b       	std	Y+22, r20	; 0x16
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <fat_write_file+0x46>
    1e70:	03 c2       	rjmp	.+1030   	; 0x2278 <fat_write_file+0x44c>
    1e72:	67 2b       	or	r22, r23
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <fat_write_file+0x4c>
    1e76:	03 c2       	rjmp	.+1030   	; 0x227e <fat_write_file+0x452>
    1e78:	45 2b       	or	r20, r21
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <fat_write_file+0x52>
    1e7c:	03 c2       	rjmp	.+1030   	; 0x2284 <fat_write_file+0x458>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    1e7e:	dc 01       	movw	r26, r24
    1e80:	d3 96       	adiw	r26, 0x33	; 51
    1e82:	bc 91       	ld	r27, X
    1e84:	b9 87       	std	Y+9, r27	; 0x09
    1e86:	fc 01       	movw	r30, r24
    1e88:	f4 a9       	ldd	r31, Z+52	; 0x34
    1e8a:	fa 87       	std	Y+10, r31	; 0x0a
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	d5 96       	adiw	r26, 0x35	; 53
    1e90:	bc 91       	ld	r27, X
    1e92:	bb 87       	std	Y+11, r27	; 0x0b
    1e94:	fc 01       	movw	r30, r24
    1e96:	f6 a9       	ldd	r31, Z+54	; 0x36
    1e98:	fc 87       	std	Y+12, r31	; 0x0c
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	d7 96       	adiw	r26, 0x37	; 55
    1e9e:	bc 91       	ld	r27, X
    1ea0:	bd 87       	std	Y+13, r27	; 0x0d
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	f0 ad       	ldd	r31, Z+56	; 0x38
    1ea6:	fe 87       	std	Y+14, r31	; 0x0e
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	d9 96       	adiw	r26, 0x39	; 57
    1eac:	bc 91       	ld	r27, X
    1eae:	bf 87       	std	Y+15, r27	; 0x0f
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	f2 ad       	ldd	r31, Z+58	; 0x3a
    1eb4:	f8 8b       	std	Y+16, r31	; 0x10
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	87 a1       	ldd	r24, Z+39	; 0x27
    1eba:	90 a5       	ldd	r25, Z+40	; 0x28
    1ebc:	a1 a5       	ldd	r26, Z+41	; 0x29
    1ebe:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1ec0:	1c 01       	movw	r2, r24
    1ec2:	2d 01       	movw	r4, r26
    1ec4:	29 85       	ldd	r18, Y+9	; 0x09
    1ec6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ec8:	4b 85       	ldd	r20, Y+11	; 0x0b
    1eca:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ecc:	6d 85       	ldd	r22, Y+13	; 0x0d
    1ece:	7e 85       	ldd	r23, Y+14	; 0x0e
    1ed0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ed2:	98 89       	ldd	r25, Y+16	; 0x10
    1ed4:	a2 2c       	mov	r10, r2
    1ed6:	b3 2c       	mov	r11, r3
    1ed8:	c4 2c       	mov	r12, r4
    1eda:	d5 2c       	mov	r13, r5
    1edc:	e1 2c       	mov	r14, r1
    1ede:	f1 2c       	mov	r15, r1
    1ee0:	00 e0       	ldi	r16, 0x00	; 0
    1ee2:	10 e0       	ldi	r17, 0x00	; 0
    1ee4:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__cmpdi2>
    1ee8:	11 f0       	breq	.+4      	; 0x1eee <fat_write_file+0xc2>
    1eea:	08 f0       	brcs	.+2      	; 0x1eee <fat_write_file+0xc2>
    1eec:	ce c1       	rjmp	.+924    	; 0x228a <fat_write_file+0x45e>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    1eee:	01 90       	ld	r0, Z+
    1ef0:	f0 81       	ld	r31, Z
    1ef2:	e0 2d       	mov	r30, r0
    1ef4:	e0 8c       	ldd	r14, Z+24	; 0x18
    1ef6:	f1 8c       	ldd	r15, Z+25	; 0x19
    1ef8:	fc 8a       	std	Y+20, r15	; 0x14
    1efa:	eb 8a       	std	Y+19, r14	; 0x13
    cluster_t cluster_num = fd->pos_cluster;
    1efc:	a8 8d       	ldd	r26, Y+24	; 0x18
    1efe:	b9 8d       	ldd	r27, Y+25	; 0x19
    1f00:	db 96       	adiw	r26, 0x3b	; 59
    1f02:	4d 90       	ld	r4, X+
    1f04:	5d 90       	ld	r5, X+
    1f06:	6d 90       	ld	r6, X+
    1f08:	7c 90       	ld	r7, X
    1f0a:	de 97       	sbiw	r26, 0x3e	; 62
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    1f0c:	c7 01       	movw	r24, r14
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	e9 84       	ldd	r14, Y+9	; 0x09
    1f12:	fa 84       	ldd	r15, Y+10	; 0x0a
    1f14:	e8 22       	and	r14, r24
    1f16:	f9 22       	and	r15, r25
    1f18:	fa 82       	std	Y+2, r15	; 0x02
    1f1a:	e9 82       	std	Y+1, r14	; 0x01

    /* find cluster in which to start writing */
    if(!cluster_num)
    1f1c:	41 14       	cp	r4, r1
    1f1e:	51 04       	cpc	r5, r1
    1f20:	61 04       	cpc	r6, r1
    1f22:	71 04       	cpc	r7, r1
    1f24:	09 f0       	breq	.+2      	; 0x1f28 <fat_write_file+0xfc>
    1f26:	77 c0       	rjmp	.+238    	; 0x2016 <fat_write_file+0x1ea>
    {
        cluster_num = fd->dir_entry.cluster;
    1f28:	93 96       	adiw	r26, 0x23	; 35
    1f2a:	4d 90       	ld	r4, X+
    1f2c:	5d 90       	ld	r5, X+
    1f2e:	6d 90       	ld	r6, X+
    1f30:	7c 90       	ld	r7, X
    1f32:	96 97       	sbiw	r26, 0x26	; 38
        
        if(!cluster_num)
    1f34:	41 14       	cp	r4, r1
    1f36:	51 04       	cpc	r5, r1
    1f38:	61 04       	cpc	r6, r1
    1f3a:	71 04       	cpc	r7, r1
    1f3c:	01 f5       	brne	.+64     	; 0x1f7e <fat_write_file+0x152>
        {
            if(!fd->pos)
    1f3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f40:	98 89       	ldd	r25, Y+16	; 0x10
    1f42:	a0 e0       	ldi	r26, 0x00	; 0
    1f44:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <__cmpdi2_s8>
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <fat_write_file+0x120>
    1f4a:	a2 c1       	rjmp	.+836    	; 0x2290 <fat_write_file+0x464>
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    1f4c:	01 e0       	ldi	r16, 0x01	; 1
    1f4e:	10 e0       	ldi	r17, 0x00	; 0
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e0       	ldi	r20, 0x00	; 0
    1f56:	50 e0       	ldi	r21, 0x00	; 0
    1f58:	ba 01       	movw	r22, r20
    1f5a:	cf 01       	movw	r24, r30
    1f5c:	0e 94 75 03 	call	0x6ea	; 0x6ea <fat_append_clusters>
    1f60:	2b 01       	movw	r4, r22
    1f62:	3c 01       	movw	r6, r24
    1f64:	a8 8d       	ldd	r26, Y+24	; 0x18
    1f66:	b9 8d       	ldd	r27, Y+25	; 0x19
    1f68:	93 96       	adiw	r26, 0x23	; 35
    1f6a:	6d 93       	st	X+, r22
    1f6c:	7d 93       	st	X+, r23
    1f6e:	8d 93       	st	X+, r24
    1f70:	9c 93       	st	X, r25
    1f72:	96 97       	sbiw	r26, 0x26	; 38
                if(!cluster_num)
    1f74:	67 2b       	or	r22, r23
    1f76:	68 2b       	or	r22, r24
    1f78:	69 2b       	or	r22, r25
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <fat_write_file+0x152>
    1f7c:	8c c1       	rjmp	.+792    	; 0x2296 <fat_write_file+0x46a>
            {
                return -1;
            }
        }

        if(fd->pos)
    1f7e:	e8 8d       	ldd	r30, Y+24	; 0x18
    1f80:	f9 8d       	ldd	r31, Y+25	; 0x19
    1f82:	13 a9       	ldd	r17, Z+51	; 0x33
    1f84:	b4 a9       	ldd	r27, Z+52	; 0x34
    1f86:	05 a9       	ldd	r16, Z+53	; 0x35
    1f88:	f6 a8       	ldd	r15, Z+54	; 0x36
    1f8a:	67 a9       	ldd	r22, Z+55	; 0x37
    1f8c:	70 ad       	ldd	r23, Z+56	; 0x38
    1f8e:	21 2f       	mov	r18, r17
    1f90:	3b 2f       	mov	r19, r27
    1f92:	40 2f       	mov	r20, r16
    1f94:	5f 2d       	mov	r21, r15
    1f96:	81 ad       	ldd	r24, Z+57	; 0x39
    1f98:	92 ad       	ldd	r25, Z+58	; 0x3a
    1f9a:	a0 e0       	ldi	r26, 0x00	; 0
    1f9c:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <__cmpdi2_s8>
    1fa0:	d1 f1       	breq	.+116    	; 0x2016 <fat_write_file+0x1ea>
        {
            uint32_t pos = fd->pos;
    1fa2:	c1 2e       	mov	r12, r17
    1fa4:	db 2e       	mov	r13, r27
    1fa6:	e0 2e       	mov	r14, r16
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    1fa8:	0b 89       	ldd	r16, Y+19	; 0x13
    1faa:	1c 89       	ldd	r17, Y+20	; 0x14
    1fac:	48 01       	movw	r8, r16
    1fae:	a1 2c       	mov	r10, r1
    1fb0:	b1 2c       	mov	r11, r1
    1fb2:	1f 01       	movw	r2, r30
    1fb4:	29 c0       	rjmp	.+82     	; 0x2008 <fat_write_file+0x1dc>
    1fb6:	c8 18       	sub	r12, r8
    1fb8:	d9 08       	sbc	r13, r9
    1fba:	ea 08       	sbc	r14, r10
    1fbc:	fb 08       	sbc	r15, r11
            {
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    1fbe:	b3 01       	movw	r22, r6
    1fc0:	a2 01       	movw	r20, r4
    1fc2:	d1 01       	movw	r26, r2
    1fc4:	8d 91       	ld	r24, X+
    1fc6:	9c 91       	ld	r25, X
    1fc8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fat_get_next_cluster>
                if(!cluster_num_next)
    1fcc:	61 15       	cp	r22, r1
    1fce:	71 05       	cpc	r23, r1
    1fd0:	81 05       	cpc	r24, r1
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	b9 f4       	brne	.+46     	; 0x2004 <fat_write_file+0x1d8>
                {
                    if(pos != 0)
    1fd6:	c1 14       	cp	r12, r1
    1fd8:	d1 04       	cpc	r13, r1
    1fda:	e1 04       	cpc	r14, r1
    1fdc:	f1 04       	cpc	r15, r1
    1fde:	09 f0       	breq	.+2      	; 0x1fe2 <fat_write_file+0x1b6>
    1fe0:	5d c1       	rjmp	.+698    	; 0x229c <fat_write_file+0x470>
                        return -1; /* current file position points beyond end of file */

                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    1fe2:	01 e0       	ldi	r16, 0x01	; 1
    1fe4:	10 e0       	ldi	r17, 0x00	; 0
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	b3 01       	movw	r22, r6
    1fec:	a2 01       	movw	r20, r4
    1fee:	f1 01       	movw	r30, r2
    1ff0:	80 81       	ld	r24, Z
    1ff2:	91 81       	ldd	r25, Z+1	; 0x01
    1ff4:	0e 94 75 03 	call	0x6ea	; 0x6ea <fat_append_clusters>
                    if(!cluster_num_next)
    1ff8:	61 15       	cp	r22, r1
    1ffa:	71 05       	cpc	r23, r1
    1ffc:	81 05       	cpc	r24, r1
    1ffe:	91 05       	cpc	r25, r1
    2000:	09 f4       	brne	.+2      	; 0x2004 <fat_write_file+0x1d8>
    2002:	4f c1       	rjmp	.+670    	; 0x22a2 <fat_write_file+0x476>
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written (0 or something less than \c buffer_len on disk full) or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    2004:	2b 01       	movw	r4, r22
    2006:	3c 01       	movw	r6, r24

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    2008:	c8 14       	cp	r12, r8
    200a:	d9 04       	cpc	r13, r9
    200c:	ea 04       	cpc	r14, r10
    200e:	fb 04       	cpc	r15, r11
    2010:	90 f6       	brcc	.-92     	; 0x1fb6 <fat_write_file+0x18a>
    2012:	39 8e       	std	Y+25, r3	; 0x19
    2014:	28 8e       	std	Y+24, r2	; 0x18
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    2016:	2e 88       	ldd	r2, Y+22	; 0x16
    2018:	3f 88       	ldd	r3, Y+23	; 0x17
    201a:	e8 8c       	ldd	r14, Y+24	; 0x18
    201c:	f9 8c       	ldd	r15, Y+25	; 0x19
    201e:	fb 8e       	std	Y+27, r15	; 0x1b
    2020:	ea 8e       	std	Y+26, r14	; 0x1a
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    2022:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2024:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2026:	0d 91       	ld	r16, X+
    2028:	1c 91       	ld	r17, X
    202a:	b3 01       	movw	r22, r6
    202c:	a2 01       	movw	r20, r4
    202e:	c8 01       	movw	r24, r16
    2030:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <fat_cluster_offset>
    2034:	a2 2e       	mov	r10, r18
    2036:	b3 2e       	mov	r11, r19
    2038:	c4 2e       	mov	r12, r20
    203a:	d5 2e       	mov	r13, r21
    203c:	e6 2e       	mov	r14, r22
    203e:	f7 2e       	mov	r15, r23
    2040:	89 87       	std	Y+9, r24	; 0x09
    2042:	9d 8b       	std	Y+21, r25	; 0x15
    2044:	8b 88       	ldd	r8, Y+19	; 0x13
    2046:	9c 88       	ldd	r9, Y+20	; 0x14
    2048:	e9 81       	ldd	r30, Y+1	; 0x01
    204a:	fa 81       	ldd	r31, Y+2	; 0x02
    204c:	8e 1a       	sub	r8, r30
    204e:	9f 0a       	sbc	r9, r31
    2050:	28 14       	cp	r2, r8
    2052:	39 04       	cpc	r3, r9
    2054:	08 f4       	brcc	.+2      	; 0x2058 <fat_write_file+0x22c>
    2056:	41 01       	movw	r8, r2
        uint16_t write_length = cluster_size - first_cluster_offset;
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    2058:	d8 01       	movw	r26, r16
    205a:	0d 90       	ld	r0, X+
    205c:	bc 91       	ld	r27, X
    205e:	a0 2d       	mov	r26, r0
    2060:	b9 8f       	std	Y+25, r27	; 0x19
    2062:	a8 8f       	std	Y+24, r26	; 0x18
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    2064:	e9 81       	ldd	r30, Y+1	; 0x01
    2066:	fa 81       	ldd	r31, Y+2	; 0x02
    2068:	af 01       	movw	r20, r30
    206a:	2e 2f       	mov	r18, r30
    206c:	35 2f       	mov	r19, r21
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	50 e0       	ldi	r21, 0x00	; 0
    2072:	60 e0       	ldi	r22, 0x00	; 0
    2074:	70 e0       	ldi	r23, 0x00	; 0
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	09 85       	ldd	r16, Y+9	; 0x09
    207c:	1d 89       	ldd	r17, Y+21	; 0x15
    207e:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
        uint16_t write_length = cluster_size - first_cluster_offset;
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    2082:	a8 8d       	ldd	r26, Y+24	; 0x18
    2084:	b9 8d       	ldd	r27, Y+25	; 0x19
    2086:	14 96       	adiw	r26, 0x04	; 4
    2088:	ed 91       	ld	r30, X+
    208a:	fc 91       	ld	r31, X
    208c:	15 97       	sbiw	r26, 0x05	; 5
    208e:	74 01       	movw	r14, r8
    2090:	09 89       	ldd	r16, Y+17	; 0x11
    2092:	1a 89       	ldd	r17, Y+18	; 0x12
    2094:	09 95       	icall
    2096:	88 23       	and	r24, r24
    2098:	09 f4       	brne	.+2      	; 0x209c <fat_write_file+0x270>
    209a:	8a c0       	rjmp	.+276    	; 0x21b0 <fat_write_file+0x384>
            break;

        /* calculate new file position */
        buffer += write_length;
    209c:	e9 89       	ldd	r30, Y+17	; 0x11
    209e:	fa 89       	ldd	r31, Y+18	; 0x12
    20a0:	e8 0d       	add	r30, r8
    20a2:	f9 1d       	adc	r31, r9
    20a4:	fa 8b       	std	Y+18, r31	; 0x12
    20a6:	e9 8b       	std	Y+17, r30	; 0x11
        buffer_left -= write_length;
    20a8:	28 18       	sub	r2, r8
    20aa:	39 08       	sbc	r3, r9
        fd->pos += write_length;
    20ac:	a4 01       	movw	r20, r8
    20ae:	28 2d       	mov	r18, r8
    20b0:	35 2f       	mov	r19, r21
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	50 e0       	ldi	r21, 0x00	; 0
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	70 e0       	ldi	r23, 0x00	; 0
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	aa 8d       	ldd	r26, Y+26	; 0x1a
    20c0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    20c2:	d3 96       	adiw	r26, 0x33	; 51
    20c4:	ac 90       	ld	r10, X
    20c6:	d3 97       	sbiw	r26, 0x33	; 51
    20c8:	d4 96       	adiw	r26, 0x34	; 52
    20ca:	bc 90       	ld	r11, X
    20cc:	d4 97       	sbiw	r26, 0x34	; 52
    20ce:	d5 96       	adiw	r26, 0x35	; 53
    20d0:	cc 90       	ld	r12, X
    20d2:	d5 97       	sbiw	r26, 0x35	; 53
    20d4:	d6 96       	adiw	r26, 0x36	; 54
    20d6:	dc 90       	ld	r13, X
    20d8:	d6 97       	sbiw	r26, 0x36	; 54
    20da:	d7 96       	adiw	r26, 0x37	; 55
    20dc:	ec 90       	ld	r14, X
    20de:	d7 97       	sbiw	r26, 0x37	; 55
    20e0:	d8 96       	adiw	r26, 0x38	; 56
    20e2:	fc 90       	ld	r15, X
    20e4:	d8 97       	sbiw	r26, 0x38	; 56
    20e6:	d9 96       	adiw	r26, 0x39	; 57
    20e8:	0c 91       	ld	r16, X
    20ea:	d9 97       	sbiw	r26, 0x39	; 57
    20ec:	da 96       	adiw	r26, 0x3a	; 58
    20ee:	1c 91       	ld	r17, X
    20f0:	da 97       	sbiw	r26, 0x3a	; 58
    20f2:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
    20f6:	d3 96       	adiw	r26, 0x33	; 51
    20f8:	2c 93       	st	X, r18
    20fa:	d3 97       	sbiw	r26, 0x33	; 51
    20fc:	d4 96       	adiw	r26, 0x34	; 52
    20fe:	3c 93       	st	X, r19
    2100:	d4 97       	sbiw	r26, 0x34	; 52
    2102:	d5 96       	adiw	r26, 0x35	; 53
    2104:	4c 93       	st	X, r20
    2106:	d5 97       	sbiw	r26, 0x35	; 53
    2108:	d6 96       	adiw	r26, 0x36	; 54
    210a:	5c 93       	st	X, r21
    210c:	d6 97       	sbiw	r26, 0x36	; 54
    210e:	d7 96       	adiw	r26, 0x37	; 55
    2110:	6c 93       	st	X, r22
    2112:	d7 97       	sbiw	r26, 0x37	; 55
    2114:	d8 96       	adiw	r26, 0x38	; 56
    2116:	7c 93       	st	X, r23
    2118:	d8 97       	sbiw	r26, 0x38	; 56
    211a:	d9 96       	adiw	r26, 0x39	; 57
    211c:	8c 93       	st	X, r24
    211e:	d9 97       	sbiw	r26, 0x39	; 57
    2120:	da 96       	adiw	r26, 0x3a	; 58
    2122:	9c 93       	st	X, r25
    2124:	da 97       	sbiw	r26, 0x3a	; 58

        if(first_cluster_offset + write_length >= cluster_size)
    2126:	e9 81       	ldd	r30, Y+1	; 0x01
    2128:	fa 81       	ldd	r31, Y+2	; 0x02
    212a:	8e 0e       	add	r8, r30
    212c:	9f 1e       	adc	r9, r31
    212e:	eb 88       	ldd	r14, Y+19	; 0x13
    2130:	fc 88       	ldd	r15, Y+20	; 0x14
    2132:	8e 14       	cp	r8, r14
    2134:	9f 04       	cpc	r9, r15
    2136:	78 f1       	brcs	.+94     	; 0x2196 <fat_write_file+0x36a>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    2138:	b3 01       	movw	r22, r6
    213a:	a2 01       	movw	r20, r4
    213c:	8d 91       	ld	r24, X+
    213e:	9c 91       	ld	r25, X
    2140:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
    2144:	61 15       	cp	r22, r1
    2146:	71 05       	cpc	r23, r1
    2148:	81 05       	cpc	r24, r1
    214a:	91 05       	cpc	r25, r1
    214c:	01 f5       	brne	.+64     	; 0x218e <fat_write_file+0x362>
    214e:	21 14       	cp	r2, r1
    2150:	31 04       	cpc	r3, r1
    2152:	a1 f0       	breq	.+40     	; 0x217c <fat_write_file+0x350>
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    2154:	01 e0       	ldi	r16, 0x01	; 1
    2156:	10 e0       	ldi	r17, 0x00	; 0
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	b3 01       	movw	r22, r6
    215e:	a2 01       	movw	r20, r4
    2160:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2162:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2164:	8d 91       	ld	r24, X+
    2166:	9c 91       	ld	r25, X
    2168:	0e 94 75 03 	call	0x6ea	; 0x6ea <fat_append_clusters>
    216c:	2b 01       	movw	r4, r22
    216e:	3c 01       	movw	r6, r24
            if(!cluster_num_next)
    2170:	61 15       	cp	r22, r1
    2172:	71 05       	cpc	r23, r1
    2174:	81 05       	cpc	r24, r1
    2176:	91 05       	cpc	r25, r1
    2178:	09 f0       	breq	.+2      	; 0x217c <fat_write_file+0x350>
    217a:	96 c0       	rjmp	.+300    	; 0x22a8 <fat_write_file+0x47c>
    217c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    217e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2180:	f9 8f       	std	Y+25, r31	; 0x19
    2182:	e8 8f       	std	Y+24, r30	; 0x18
            {
                fd->pos_cluster = 0;
    2184:	13 ae       	std	Z+59, r1	; 0x3b
    2186:	14 ae       	std	Z+60, r1	; 0x3c
    2188:	15 ae       	std	Z+61, r1	; 0x3d
    218a:	16 ae       	std	Z+62, r1	; 0x3e
                break;
    218c:	15 c0       	rjmp	.+42     	; 0x21b8 <fat_write_file+0x38c>
        fd->pos += write_length;

        if(first_cluster_offset + write_length >= cluster_size)
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    218e:	2b 01       	movw	r4, r22
    2190:	3c 01       	movw	r6, r24
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    2192:	19 82       	std	Y+1, r1	; 0x01
    2194:	1a 82       	std	Y+2, r1	; 0x02
        }

        fd->pos_cluster = cluster_num;
    2196:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2198:	fb 8d       	ldd	r31, Y+27	; 0x1b
    219a:	43 ae       	std	Z+59, r4	; 0x3b
    219c:	54 ae       	std	Z+60, r5	; 0x3c
    219e:	65 ae       	std	Z+61, r6	; 0x3d
    21a0:	76 ae       	std	Z+62, r7	; 0x3e

    } while(buffer_left > 0); /* check if we are done */
    21a2:	21 14       	cp	r2, r1
    21a4:	31 04       	cpc	r3, r1
    21a6:	09 f0       	breq	.+2      	; 0x21aa <fat_write_file+0x37e>
    21a8:	3c cf       	rjmp	.-392    	; 0x2022 <fat_write_file+0x1f6>
    21aa:	f9 8f       	std	Y+25, r31	; 0x19
    21ac:	e8 8f       	std	Y+24, r30	; 0x18
    21ae:	04 c0       	rjmp	.+8      	; 0x21b8 <fat_write_file+0x38c>
    21b0:	ea 8c       	ldd	r14, Y+26	; 0x1a
    21b2:	fb 8c       	ldd	r15, Y+27	; 0x1b
    21b4:	f9 8e       	std	Y+25, r15	; 0x19
    21b6:	e8 8e       	std	Y+24, r14	; 0x18

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
    21b8:	e8 8d       	ldd	r30, Y+24	; 0x18
    21ba:	f9 8d       	ldd	r31, Y+25	; 0x19
    21bc:	b3 a9       	ldd	r27, Z+51	; 0x33
    21be:	a4 a9       	ldd	r26, Z+52	; 0x34
    21c0:	85 a8       	ldd	r8, Z+53	; 0x35
    21c2:	96 a8       	ldd	r9, Z+54	; 0x36
    21c4:	67 a9       	ldd	r22, Z+55	; 0x37
    21c6:	70 ad       	ldd	r23, Z+56	; 0x38
    21c8:	47 a0       	ldd	r4, Z+39	; 0x27
    21ca:	50 a4       	ldd	r5, Z+40	; 0x28
    21cc:	61 a4       	ldd	r6, Z+41	; 0x29
    21ce:	72 a4       	ldd	r7, Z+42	; 0x2a
    21d0:	83 01       	movw	r16, r6
    21d2:	72 01       	movw	r14, r4
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	a9 01       	movw	r20, r18
    21da:	49 82       	std	Y+1, r4	; 0x01
    21dc:	fa 82       	std	Y+2, r15	; 0x02
    21de:	0b 83       	std	Y+3, r16	; 0x03
    21e0:	1c 83       	std	Y+4, r17	; 0x04
    21e2:	2d 83       	std	Y+5, r18	; 0x05
    21e4:	3e 83       	std	Y+6, r19	; 0x06
    21e6:	4f 83       	std	Y+7, r20	; 0x07
    21e8:	58 87       	std	Y+8, r21	; 0x08
    21ea:	2b 2f       	mov	r18, r27
    21ec:	3a 2f       	mov	r19, r26
    21ee:	48 2d       	mov	r20, r8
    21f0:	59 2d       	mov	r21, r9
    21f2:	81 ad       	ldd	r24, Z+57	; 0x39
    21f4:	92 ad       	ldd	r25, Z+58	; 0x3a
    21f6:	a4 2c       	mov	r10, r4
    21f8:	bf 2c       	mov	r11, r15
    21fa:	c0 2e       	mov	r12, r16
    21fc:	d1 2e       	mov	r13, r17
    21fe:	e1 2c       	mov	r14, r1
    2200:	f1 2c       	mov	r15, r1
    2202:	00 e0       	ldi	r16, 0x00	; 0
    2204:	10 e0       	ldi	r17, 0x00	; 0
    2206:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__cmpdi2>
    220a:	89 f1       	breq	.+98     	; 0x226e <fat_write_file+0x442>
    220c:	80 f1       	brcs	.+96     	; 0x226e <fat_write_file+0x442>
#if !FAT_DELAY_DIRENTRY_UPDATE
        uint32_t size_old = fd->dir_entry.file_size;
#endif

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
    220e:	b7 a3       	std	Z+39, r27	; 0x27
    2210:	a0 a7       	std	Z+40, r26	; 0x28
    2212:	81 a6       	std	Z+41, r8	; 0x29
    2214:	92 a6       	std	Z+42, r9	; 0x2a

#if !FAT_DELAY_DIRENTRY_UPDATE
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    2216:	bf 01       	movw	r22, r30
    2218:	6e 5f       	subi	r22, 0xFE	; 254
    221a:	7f 4f       	sbci	r23, 0xFF	; 255
    221c:	80 81       	ld	r24, Z
    221e:	91 81       	ldd	r25, Z+1	; 0x01
    2220:	0e 94 21 0a 	call	0x1442	; 0x1442 <fat_write_dir_entry>
    2224:	81 11       	cpse	r24, r1
    2226:	23 c0       	rjmp	.+70     	; 0x226e <fat_write_file+0x442>
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
    2228:	a8 8d       	ldd	r26, Y+24	; 0x18
    222a:	b9 8d       	ldd	r27, Y+25	; 0x19
    222c:	d3 96       	adiw	r26, 0x33	; 51
    222e:	2d 90       	ld	r2, X+
    2230:	3c 90       	ld	r3, X
    2232:	d4 97       	sbiw	r26, 0x34	; 52
    2234:	24 18       	sub	r2, r4
    2236:	35 08       	sbc	r3, r5
            fd->pos = size_old;
    2238:	e9 81       	ldd	r30, Y+1	; 0x01
    223a:	d3 96       	adiw	r26, 0x33	; 51
    223c:	ec 93       	st	X, r30
    223e:	d3 97       	sbiw	r26, 0x33	; 51
    2240:	fa 81       	ldd	r31, Y+2	; 0x02
    2242:	d4 96       	adiw	r26, 0x34	; 52
    2244:	fc 93       	st	X, r31
    2246:	d4 97       	sbiw	r26, 0x34	; 52
    2248:	eb 80       	ldd	r14, Y+3	; 0x03
    224a:	d5 96       	adiw	r26, 0x35	; 53
    224c:	ec 92       	st	X, r14
    224e:	d5 97       	sbiw	r26, 0x35	; 53
    2250:	fc 80       	ldd	r15, Y+4	; 0x04
    2252:	d6 96       	adiw	r26, 0x36	; 54
    2254:	fc 92       	st	X, r15
    2256:	d6 97       	sbiw	r26, 0x36	; 54
    2258:	d7 96       	adiw	r26, 0x37	; 55
    225a:	1c 92       	st	X, r1
    225c:	d7 97       	sbiw	r26, 0x37	; 55
    225e:	d8 96       	adiw	r26, 0x38	; 56
    2260:	1c 92       	st	X, r1
    2262:	d8 97       	sbiw	r26, 0x38	; 56
    2264:	d9 96       	adiw	r26, 0x39	; 57
    2266:	1c 92       	st	X, r1
    2268:	d9 97       	sbiw	r26, 0x39	; 57
    226a:	da 96       	adiw	r26, 0x3a	; 58
    226c:	1c 92       	st	X, r1
        }
#endif
    }

    return buffer_len - buffer_left;
    226e:	8e 89       	ldd	r24, Y+22	; 0x16
    2270:	9f 89       	ldd	r25, Y+23	; 0x17
    2272:	82 19       	sub	r24, r2
    2274:	93 09       	sbc	r25, r3
    2276:	23 c0       	rjmp	.+70     	; 0x22be <fat_write_file+0x492>
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
        return -1;
    2278:	8f ef       	ldi	r24, 0xFF	; 255
    227a:	9f ef       	ldi	r25, 0xFF	; 255
    227c:	20 c0       	rjmp	.+64     	; 0x22be <fat_write_file+0x492>
    227e:	8f ef       	ldi	r24, 0xFF	; 255
    2280:	9f ef       	ldi	r25, 0xFF	; 255
    2282:	1d c0       	rjmp	.+58     	; 0x22be <fat_write_file+0x492>
    2284:	8f ef       	ldi	r24, 0xFF	; 255
    2286:	9f ef       	ldi	r25, 0xFF	; 255
    2288:	1a c0       	rjmp	.+52     	; 0x22be <fat_write_file+0x492>
    if(fd->pos > fd->dir_entry.file_size)
        return -1;
    228a:	8f ef       	ldi	r24, 0xFF	; 255
    228c:	9f ef       	ldi	r25, 0xFF	; 255
    228e:	17 c0       	rjmp	.+46     	; 0x22be <fat_write_file+0x492>
                if(!cluster_num)
                    return 0;
            }
            else
            {
                return -1;
    2290:	8f ef       	ldi	r24, 0xFF	; 255
    2292:	9f ef       	ldi	r25, 0xFF	; 255
    2294:	14 c0       	rjmp	.+40     	; 0x22be <fat_write_file+0x492>
            if(!fd->pos)
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
                if(!cluster_num)
                    return 0;
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	11 c0       	rjmp	.+34     	; 0x22be <fat_write_file+0x492>
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num_next)
                {
                    if(pos != 0)
                        return -1; /* current file position points beyond end of file */
    229c:	8f ef       	ldi	r24, 0xFF	; 255
    229e:	9f ef       	ldi	r25, 0xFF	; 255
    22a0:	0e c0       	rjmp	.+28     	; 0x22be <fat_write_file+0x492>

                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
                    if(!cluster_num_next)
                        return 0;
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	0b c0       	rjmp	.+22     	; 0x22be <fat_write_file+0x492>

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
        }

        fd->pos_cluster = cluster_num;
    22a8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    22aa:	bb 8d       	ldd	r27, Y+27	; 0x1b
    22ac:	db 96       	adiw	r26, 0x3b	; 59
    22ae:	6d 93       	st	X+, r22
    22b0:	7d 93       	st	X+, r23
    22b2:	8d 93       	st	X+, r24
    22b4:	9c 93       	st	X, r25
    22b6:	de 97       	sbiw	r26, 0x3e	; 62
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    22b8:	19 82       	std	Y+1, r1	; 0x01
    22ba:	1a 82       	std	Y+2, r1	; 0x02
    22bc:	b2 ce       	rjmp	.-668    	; 0x2022 <fat_write_file+0x1f6>
        }
#endif
    }

    return buffer_len - buffer_left;
}
    22be:	6b 96       	adiw	r28, 0x1b	; 27
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	1f 91       	pop	r17
    22d0:	0f 91       	pop	r16
    22d2:	ff 90       	pop	r15
    22d4:	ef 90       	pop	r14
    22d6:	df 90       	pop	r13
    22d8:	cf 90       	pop	r12
    22da:	bf 90       	pop	r11
    22dc:	af 90       	pop	r10
    22de:	9f 90       	pop	r9
    22e0:	8f 90       	pop	r8
    22e2:	7f 90       	pop	r7
    22e4:	6f 90       	pop	r6
    22e6:	5f 90       	pop	r5
    22e8:	4f 90       	pop	r4
    22ea:	3f 90       	pop	r3
    22ec:	2f 90       	pop	r2
    22ee:	08 95       	ret

000022f0 <fat_resize_file>:
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    22f0:	2f 92       	push	r2
    22f2:	3f 92       	push	r3
    22f4:	4f 92       	push	r4
    22f6:	5f 92       	push	r5
    22f8:	6f 92       	push	r6
    22fa:	7f 92       	push	r7
    22fc:	8f 92       	push	r8
    22fe:	9f 92       	push	r9
    2300:	af 92       	push	r10
    2302:	bf 92       	push	r11
    2304:	cf 92       	push	r12
    2306:	df 92       	push	r13
    2308:	ef 92       	push	r14
    230a:	ff 92       	push	r15
    230c:	0f 93       	push	r16
    230e:	1f 93       	push	r17
    2310:	cf 93       	push	r28
    2312:	df 93       	push	r29
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	64 97       	sbiw	r28, 0x14	; 20
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	de bf       	out	0x3e, r29	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	cd bf       	out	0x3d, r28	; 61
    if(!fd)
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	09 f4       	brne	.+2      	; 0x232a <fat_resize_file+0x3a>
    2328:	a4 c1       	rjmp	.+840    	; 0x2672 <fat_resize_file+0x382>
    232a:	4d 83       	std	Y+5, r20	; 0x05
    232c:	5e 83       	std	Y+6, r21	; 0x06
    232e:	6f 83       	std	Y+7, r22	; 0x07
    2330:	78 87       	std	Y+8, r23	; 0x08
    2332:	1c 01       	movw	r2, r24
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    2334:	dc 01       	movw	r26, r24
    2336:	93 96       	adiw	r26, 0x23	; 35
    2338:	2d 91       	ld	r18, X+
    233a:	3d 91       	ld	r19, X+
    233c:	4d 91       	ld	r20, X+
    233e:	5c 91       	ld	r21, X
    2340:	96 97       	sbiw	r26, 0x26	; 38
    2342:	2d 87       	std	Y+13, r18	; 0x0d
    2344:	3e 87       	std	Y+14, r19	; 0x0e
    2346:	4f 87       	std	Y+15, r20	; 0x0f
    2348:	58 8b       	std	Y+16, r21	; 0x10
    uint16_t cluster_size = fd->fs->header.cluster_size;
    234a:	ed 91       	ld	r30, X+
    234c:	fc 91       	ld	r31, X
    234e:	80 8d       	ldd	r24, Z+24	; 0x18
    2350:	91 8d       	ldd	r25, Z+25	; 0x19
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    2352:	23 2b       	or	r18, r19
    2354:	24 2b       	or	r18, r20
    2356:	25 2b       	or	r18, r21
    2358:	09 f0       	breq	.+2      	; 0x235c <fat_resize_file+0x6c>
    235a:	cf c1       	rjmp	.+926    	; 0x26fa <fat_resize_file+0x40a>
    235c:	2d 81       	ldd	r18, Y+5	; 0x05
    235e:	3e 81       	ldd	r19, Y+6	; 0x06
    2360:	4f 81       	ldd	r20, Y+7	; 0x07
    2362:	58 85       	ldd	r21, Y+8	; 0x08
    2364:	23 2b       	or	r18, r19
    2366:	24 2b       	or	r18, r20
    2368:	25 2b       	or	r18, r21
    236a:	09 f4       	brne	.+2      	; 0x236e <fat_resize_file+0x7e>
    236c:	31 c1       	rjmp	.+610    	; 0x25d0 <fat_resize_file+0x2e0>
    236e:	b5 c1       	rjmp	.+874    	; 0x26da <fat_resize_file+0x3ea>
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    2370:	4d 80       	ldd	r4, Y+5	; 0x05
    2372:	5e 80       	ldd	r5, Y+6	; 0x06
    2374:	6f 80       	ldd	r6, Y+7	; 0x07
    2376:	78 84       	ldd	r7, Y+8	; 0x08
    2378:	cd 84       	ldd	r12, Y+13	; 0x0d
    237a:	de 84       	ldd	r13, Y+14	; 0x0e
    237c:	ef 84       	ldd	r14, Y+15	; 0x0f
    237e:	f8 88       	ldd	r15, Y+16	; 0x10

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    2380:	b7 01       	movw	r22, r14
    2382:	a6 01       	movw	r20, r12
    2384:	d1 01       	movw	r26, r2
    2386:	8d 91       	ld	r24, X+
    2388:	9c 91       	ld	r25, X
    238a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fat_get_next_cluster>
            if(cluster_num_next)
    238e:	61 15       	cp	r22, r1
    2390:	71 05       	cpc	r23, r1
    2392:	81 05       	cpc	r24, r1
    2394:	91 05       	cpc	r25, r1
    2396:	61 f0       	breq	.+24     	; 0x23b0 <fat_resize_file+0xc0>
            {
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
    2398:	48 18       	sub	r4, r8
    239a:	59 08       	sbc	r5, r9
    239c:	6a 08       	sbc	r6, r10
    239e:	7b 08       	sbc	r7, r11

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    23a0:	6b 01       	movw	r12, r22
    23a2:	7c 01       	movw	r14, r24
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    23a4:	84 14       	cp	r8, r4
    23a6:	95 04       	cpc	r9, r5
    23a8:	a6 04       	cpc	r10, r6
    23aa:	b7 04       	cpc	r11, r7
    23ac:	48 f3       	brcs	.-46     	; 0x2380 <fat_resize_file+0x90>
    23ae:	49 c0       	rjmp	.+146    	; 0x2442 <fat_resize_file+0x152>
    23b0:	cd 86       	std	Y+13, r12	; 0x0d
    23b2:	de 86       	std	Y+14, r13	; 0x0e
    23b4:	ef 86       	std	Y+15, r14	; 0x0f
    23b6:	f8 8a       	std	Y+16, r15	; 0x10
    23b8:	c9 8a       	std	Y+17, r12	; 0x11
    23ba:	da 8a       	std	Y+18, r13	; 0x12
    23bc:	eb 8a       	std	Y+19, r14	; 0x13
    23be:	fc 8a       	std	Y+20, r15	; 0x14
            {
                break;
            }
        }

        if(size_new > cluster_size || cluster_num == 0)
    23c0:	84 14       	cp	r8, r4
    23c2:	95 04       	cpc	r9, r5
    23c4:	a6 04       	cpc	r10, r6
    23c6:	b7 04       	cpc	r11, r7
    23c8:	38 f0       	brcs	.+14     	; 0x23d8 <fat_resize_file+0xe8>
    23ca:	c1 14       	cp	r12, r1
    23cc:	d1 04       	cpc	r13, r1
    23ce:	e1 04       	cpc	r14, r1
    23d0:	f1 04       	cpc	r15, r1
    23d2:	09 f4       	brne	.+2      	; 0x23d6 <fat_resize_file+0xe6>
    23d4:	56 c1       	rjmp	.+684    	; 0x2682 <fat_resize_file+0x392>
    23d6:	35 c0       	rjmp	.+106    	; 0x2442 <fat_resize_file+0x152>
    23d8:	d5 01       	movw	r26, r10
    23da:	c4 01       	movw	r24, r8
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	a1 09       	sbc	r26, r1
    23e0:	b1 09       	sbc	r27, r1
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	64 0d       	add	r22, r4
    23e8:	75 1d       	adc	r23, r5
    23ea:	86 1d       	adc	r24, r6
    23ec:	97 1d       	adc	r25, r7
    23ee:	a5 01       	movw	r20, r10
    23f0:	94 01       	movw	r18, r8
    23f2:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__udivmodsi4>
    23f6:	89 01       	movw	r16, r18
    23f8:	9a 01       	movw	r18, r20
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    23fa:	4d 85       	ldd	r20, Y+13	; 0x0d
    23fc:	5e 85       	ldd	r21, Y+14	; 0x0e
    23fe:	6f 85       	ldd	r22, Y+15	; 0x0f
    2400:	78 89       	ldd	r23, Y+16	; 0x10
    2402:	f1 01       	movw	r30, r2
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	0e 94 75 03 	call	0x6ea	; 0x6ea <fat_append_clusters>
    240c:	6b 01       	movw	r12, r22
    240e:	7c 01       	movw	r14, r24
            if(!cluster_new_chain)
    2410:	67 2b       	or	r22, r23
    2412:	68 2b       	or	r22, r24
    2414:	69 2b       	or	r22, r25
    2416:	09 f4       	brne	.+2      	; 0x241a <fat_resize_file+0x12a>
    2418:	2e c1       	rjmp	.+604    	; 0x2676 <fat_resize_file+0x386>
                return 0;

            if(!cluster_num)
    241a:	29 89       	ldd	r18, Y+17	; 0x11
    241c:	3a 89       	ldd	r19, Y+18	; 0x12
    241e:	4b 89       	ldd	r20, Y+19	; 0x13
    2420:	5c 89       	ldd	r21, Y+20	; 0x14
    2422:	23 2b       	or	r18, r19
    2424:	24 2b       	or	r18, r20
    2426:	25 2b       	or	r18, r21
    2428:	41 f4       	brne	.+16     	; 0x243a <fat_resize_file+0x14a>
            {
                cluster_num = cluster_new_chain;
                fd->dir_entry.cluster = cluster_num;
    242a:	d1 01       	movw	r26, r2
    242c:	93 96       	adiw	r26, 0x23	; 35
    242e:	cd 92       	st	X+, r12
    2430:	dd 92       	st	X+, r13
    2432:	ed 92       	st	X+, r14
    2434:	fc 92       	st	X, r15
    2436:	96 97       	sbiw	r26, 0x26	; 38
    2438:	04 c0       	rjmp	.+8      	; 0x2442 <fat_resize_file+0x152>
    243a:	cd 84       	ldd	r12, Y+13	; 0x0d
    243c:	de 84       	ldd	r13, Y+14	; 0x0e
    243e:	ef 84       	ldd	r14, Y+15	; 0x0f
    2440:	f8 88       	ldd	r15, Y+16	; 0x10
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
    2442:	2d 81       	ldd	r18, Y+5	; 0x05
    2444:	3e 81       	ldd	r19, Y+6	; 0x06
    2446:	4f 81       	ldd	r20, Y+7	; 0x07
    2448:	58 85       	ldd	r21, Y+8	; 0x08
    244a:	d1 01       	movw	r26, r2
    244c:	97 96       	adiw	r26, 0x27	; 39
    244e:	2d 93       	st	X+, r18
    2450:	3d 93       	st	X+, r19
    2452:	4d 93       	st	X+, r20
    2454:	5c 93       	st	X, r21
    2456:	9a 97       	sbiw	r26, 0x2a	; 42
        if(size == 0)
    2458:	23 2b       	or	r18, r19
    245a:	24 2b       	or	r18, r20
    245c:	25 2b       	or	r18, r21
    245e:	09 f0       	breq	.+2      	; 0x2462 <fat_resize_file+0x172>
    2460:	31 c1       	rjmp	.+610    	; 0x26c4 <fat_resize_file+0x3d4>
            fd->dir_entry.cluster = 0;
    2462:	f1 01       	movw	r30, r2
    2464:	13 a2       	std	Z+35, r1	; 0x23
    2466:	14 a2       	std	Z+36, r1	; 0x24
    2468:	15 a2       	std	Z+37, r1	; 0x25
    246a:	16 a2       	std	Z+38, r1	; 0x26
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    246c:	b1 01       	movw	r22, r2
    246e:	6e 5f       	subi	r22, 0xFE	; 254
    2470:	7f 4f       	sbci	r23, 0xFF	; 255
    2472:	80 81       	ld	r24, Z
    2474:	91 81       	ldd	r25, Z+1	; 0x01
    2476:	0e 94 21 0a 	call	0x1442	; 0x1442 <fat_write_dir_entry>
    247a:	88 23       	and	r24, r24
    247c:	09 f4       	brne	.+2      	; 0x2480 <fat_resize_file+0x190>
    247e:	51 c1       	rjmp	.+674    	; 0x2722 <fat_resize_file+0x432>
            return 0;

        if(size == 0)
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
    2480:	b7 01       	movw	r22, r14
    2482:	a6 01       	movw	r20, r12
    2484:	d1 01       	movw	r26, r2
    2486:	8d 91       	ld	r24, X+
    2488:	9c 91       	ld	r25, X
    248a:	0e 94 aa 01 	call	0x354	; 0x354 <fat_free_clusters>
    248e:	a0 c0       	rjmp	.+320    	; 0x25d0 <fat_resize_file+0x2e0>
        }
        else if(size_new <= cluster_size)
    2490:	84 14       	cp	r8, r4
    2492:	95 04       	cpc	r9, r5
    2494:	a6 04       	cpc	r10, r6
    2496:	b7 04       	cpc	r11, r7
    2498:	08 f4       	brcc	.+2      	; 0x249c <fat_resize_file+0x1ac>
    249a:	9a c0       	rjmp	.+308    	; 0x25d0 <fat_resize_file+0x2e0>
        {
            /* free all clusters no longer needed */
            fat_terminate_clusters(fd->fs, cluster_num);
    249c:	f1 01       	movw	r30, r2
    249e:	80 80       	ld	r8, Z
    24a0:	91 80       	ldd	r9, Z+1	; 0x01
 * \returns 0 on failure, 1 on success.
 * \see fat_free_clusters
 */
uint8_t fat_terminate_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    24a2:	81 14       	cp	r8, r1
    24a4:	91 04       	cpc	r9, r1
    24a6:	09 f4       	brne	.+2      	; 0x24aa <fat_resize_file+0x1ba>
    24a8:	93 c0       	rjmp	.+294    	; 0x25d0 <fat_resize_file+0x2e0>
    24aa:	f2 e0       	ldi	r31, 0x02	; 2
    24ac:	cf 16       	cp	r12, r31
    24ae:	d1 04       	cpc	r13, r1
    24b0:	e1 04       	cpc	r14, r1
    24b2:	f1 04       	cpc	r15, r1
    24b4:	08 f4       	brcc	.+2      	; 0x24b8 <fat_resize_file+0x1c8>
    24b6:	8c c0       	rjmp	.+280    	; 0x25d0 <fat_resize_file+0x2e0>
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
    24b8:	b7 01       	movw	r22, r14
    24ba:	a6 01       	movw	r20, r12
    24bc:	c4 01       	movw	r24, r8
    24be:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fat_get_next_cluster>
    24c2:	2b 01       	movw	r4, r22
    24c4:	3c 01       	movw	r6, r24

    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    24c6:	d4 01       	movw	r26, r8
    24c8:	ed 91       	ld	r30, X+
    24ca:	fc 91       	ld	r31, X
    24cc:	80 85       	ldd	r24, Z+8	; 0x08
    24ce:	8b 30       	cpi	r24, 0x0B	; 11
    24d0:	e9 f5       	brne	.+122    	; 0x254c <fat_resize_file+0x25c>
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
    24d2:	8f ef       	ldi	r24, 0xFF	; 255
    24d4:	9f ef       	ldi	r25, 0xFF	; 255
    24d6:	af ef       	ldi	r26, 0xFF	; 255
    24d8:	bf e0       	ldi	r27, 0x0F	; 15
    24da:	89 83       	std	Y+1, r24	; 0x01
    24dc:	9a 83       	std	Y+2, r25	; 0x02
    24de:	ab 83       	std	Y+3, r26	; 0x03
    24e0:	bc 83       	std	Y+4, r27	; 0x04
        if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    24e2:	56 01       	movw	r10, r12
    24e4:	67 01       	movw	r12, r14
    24e6:	2a 2d       	mov	r18, r10
    24e8:	3b 2d       	mov	r19, r11
    24ea:	4c 2d       	mov	r20, r12
    24ec:	5d 2d       	mov	r21, r13
    24ee:	60 e0       	ldi	r22, 0x00	; 0
    24f0:	70 e0       	ldi	r23, 0x00	; 0
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	02 e0       	ldi	r16, 0x02	; 2
    24f8:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <__ashldi3>
    24fc:	d4 01       	movw	r26, r8
    24fe:	1a 96       	adiw	r26, 0x0a	; 10
    2500:	ac 90       	ld	r10, X
    2502:	1a 97       	sbiw	r26, 0x0a	; 10
    2504:	1b 96       	adiw	r26, 0x0b	; 11
    2506:	bc 90       	ld	r11, X
    2508:	1b 97       	sbiw	r26, 0x0b	; 11
    250a:	1c 96       	adiw	r26, 0x0c	; 12
    250c:	cc 90       	ld	r12, X
    250e:	1c 97       	sbiw	r26, 0x0c	; 12
    2510:	1d 96       	adiw	r26, 0x0d	; 13
    2512:	dc 90       	ld	r13, X
    2514:	1d 97       	sbiw	r26, 0x0d	; 13
    2516:	1e 96       	adiw	r26, 0x0e	; 14
    2518:	ec 90       	ld	r14, X
    251a:	1e 97       	sbiw	r26, 0x0e	; 14
    251c:	1f 96       	adiw	r26, 0x0f	; 15
    251e:	fc 90       	ld	r15, X
    2520:	1f 97       	sbiw	r26, 0x0f	; 15
    2522:	50 96       	adiw	r26, 0x10	; 16
    2524:	0c 91       	ld	r16, X
    2526:	50 97       	sbiw	r26, 0x10	; 16
    2528:	51 96       	adiw	r26, 0x11	; 17
    252a:	1c 91       	ld	r17, X
    252c:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
    2530:	04 80       	ldd	r0, Z+4	; 0x04
    2532:	f5 81       	ldd	r31, Z+5	; 0x05
    2534:	e0 2d       	mov	r30, r0
    2536:	68 94       	set
    2538:	ee 24       	eor	r14, r14
    253a:	e2 f8       	bld	r14, 2
    253c:	f1 2c       	mov	r15, r1
    253e:	8e 01       	movw	r16, r28
    2540:	0f 5f       	subi	r16, 0xFF	; 255
    2542:	1f 4f       	sbci	r17, 0xFF	; 255
    2544:	09 95       	icall
    2546:	81 11       	cpse	r24, r1
    2548:	39 c0       	rjmp	.+114    	; 0x25bc <fat_resize_file+0x2cc>
    254a:	42 c0       	rjmp	.+132    	; 0x25d0 <fat_resize_file+0x2e0>
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
    254c:	8f ef       	ldi	r24, 0xFF	; 255
    254e:	9f ef       	ldi	r25, 0xFF	; 255
    2550:	9a 83       	std	Y+2, r25	; 0x02
    2552:	89 83       	std	Y+1, r24	; 0x01
        if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    2554:	56 01       	movw	r10, r12
    2556:	67 01       	movw	r12, r14
    2558:	2a 2d       	mov	r18, r10
    255a:	3b 2d       	mov	r19, r11
    255c:	4c 2d       	mov	r20, r12
    255e:	5d 2d       	mov	r21, r13
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	01 e0       	ldi	r16, 0x01	; 1
    256a:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <__ashldi3>
    256e:	d4 01       	movw	r26, r8
    2570:	1a 96       	adiw	r26, 0x0a	; 10
    2572:	ac 90       	ld	r10, X
    2574:	1a 97       	sbiw	r26, 0x0a	; 10
    2576:	1b 96       	adiw	r26, 0x0b	; 11
    2578:	bc 90       	ld	r11, X
    257a:	1b 97       	sbiw	r26, 0x0b	; 11
    257c:	1c 96       	adiw	r26, 0x0c	; 12
    257e:	cc 90       	ld	r12, X
    2580:	1c 97       	sbiw	r26, 0x0c	; 12
    2582:	1d 96       	adiw	r26, 0x0d	; 13
    2584:	dc 90       	ld	r13, X
    2586:	1d 97       	sbiw	r26, 0x0d	; 13
    2588:	1e 96       	adiw	r26, 0x0e	; 14
    258a:	ec 90       	ld	r14, X
    258c:	1e 97       	sbiw	r26, 0x0e	; 14
    258e:	1f 96       	adiw	r26, 0x0f	; 15
    2590:	fc 90       	ld	r15, X
    2592:	1f 97       	sbiw	r26, 0x0f	; 15
    2594:	50 96       	adiw	r26, 0x10	; 16
    2596:	0c 91       	ld	r16, X
    2598:	50 97       	sbiw	r26, 0x10	; 16
    259a:	51 96       	adiw	r26, 0x11	; 17
    259c:	1c 91       	ld	r17, X
    259e:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
    25a2:	04 80       	ldd	r0, Z+4	; 0x04
    25a4:	f5 81       	ldd	r31, Z+5	; 0x05
    25a6:	e0 2d       	mov	r30, r0
    25a8:	68 94       	set
    25aa:	ee 24       	eor	r14, r14
    25ac:	e1 f8       	bld	r14, 1
    25ae:	f1 2c       	mov	r15, r1
    25b0:	8e 01       	movw	r16, r28
    25b2:	0f 5f       	subi	r16, 0xFF	; 255
    25b4:	1f 4f       	sbci	r17, 0xFF	; 255
    25b6:	09 95       	icall
    25b8:	88 23       	and	r24, r24
    25ba:	51 f0       	breq	.+20     	; 0x25d0 <fat_resize_file+0x2e0>
            return 0;
    }

    /* free remaining clusters */
    if(cluster_num_next)
    25bc:	41 14       	cp	r4, r1
    25be:	51 04       	cpc	r5, r1
    25c0:	61 04       	cpc	r6, r1
    25c2:	71 04       	cpc	r7, r1
    25c4:	29 f0       	breq	.+10     	; 0x25d0 <fat_resize_file+0x2e0>
        return fat_free_clusters(fs, cluster_num_next);
    25c6:	b3 01       	movw	r22, r6
    25c8:	a2 01       	movw	r20, r4
    25ca:	c4 01       	movw	r24, r8
    25cc:	0e 94 aa 01 	call	0x354	; 0x354 <fat_free_clusters>
        }

    } while(0);

    /* correct file position */
    if(size < fd->pos)
    25d0:	4d 81       	ldd	r20, Y+5	; 0x05
    25d2:	5e 81       	ldd	r21, Y+6	; 0x06
    25d4:	6f 81       	ldd	r22, Y+7	; 0x07
    25d6:	78 85       	ldd	r23, Y+8	; 0x08
    25d8:	9a 01       	movw	r18, r20
    25da:	ab 01       	movw	r20, r22
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	cb 01       	movw	r24, r22
    25e2:	2d 83       	std	Y+5, r18	; 0x05
    25e4:	3e 83       	std	Y+6, r19	; 0x06
    25e6:	4f 83       	std	Y+7, r20	; 0x07
    25e8:	58 87       	std	Y+8, r21	; 0x08
    25ea:	69 87       	std	Y+9, r22	; 0x09
    25ec:	7a 87       	std	Y+10, r23	; 0x0a
    25ee:	8b 87       	std	Y+11, r24	; 0x0b
    25f0:	9c 87       	std	Y+12, r25	; 0x0c
    25f2:	d1 01       	movw	r26, r2
    25f4:	d3 96       	adiw	r26, 0x33	; 51
    25f6:	ac 90       	ld	r10, X
    25f8:	d3 97       	sbiw	r26, 0x33	; 51
    25fa:	d4 96       	adiw	r26, 0x34	; 52
    25fc:	bc 90       	ld	r11, X
    25fe:	d4 97       	sbiw	r26, 0x34	; 52
    2600:	d5 96       	adiw	r26, 0x35	; 53
    2602:	cc 90       	ld	r12, X
    2604:	d5 97       	sbiw	r26, 0x35	; 53
    2606:	d6 96       	adiw	r26, 0x36	; 54
    2608:	dc 90       	ld	r13, X
    260a:	d6 97       	sbiw	r26, 0x36	; 54
    260c:	d7 96       	adiw	r26, 0x37	; 55
    260e:	ec 90       	ld	r14, X
    2610:	d7 97       	sbiw	r26, 0x37	; 55
    2612:	d8 96       	adiw	r26, 0x38	; 56
    2614:	fc 90       	ld	r15, X
    2616:	d8 97       	sbiw	r26, 0x38	; 56
    2618:	d9 96       	adiw	r26, 0x39	; 57
    261a:	0c 91       	ld	r16, X
    261c:	d9 97       	sbiw	r26, 0x39	; 57
    261e:	da 96       	adiw	r26, 0x3a	; 58
    2620:	1c 91       	ld	r17, X
    2622:	da 97       	sbiw	r26, 0x3a	; 58
    2624:	60 e0       	ldi	r22, 0x00	; 0
    2626:	70 e0       	ldi	r23, 0x00	; 0
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__cmpdi2>
    2630:	20 f5       	brcc	.+72     	; 0x267a <fat_resize_file+0x38a>
    {
        fd->pos = size;
    2632:	d3 96       	adiw	r26, 0x33	; 51
    2634:	2c 93       	st	X, r18
    2636:	d3 97       	sbiw	r26, 0x33	; 51
    2638:	d4 96       	adiw	r26, 0x34	; 52
    263a:	3c 93       	st	X, r19
    263c:	d4 97       	sbiw	r26, 0x34	; 52
    263e:	d5 96       	adiw	r26, 0x35	; 53
    2640:	4c 93       	st	X, r20
    2642:	d5 97       	sbiw	r26, 0x35	; 53
    2644:	d6 96       	adiw	r26, 0x36	; 54
    2646:	5c 93       	st	X, r21
    2648:	d6 97       	sbiw	r26, 0x36	; 54
    264a:	d7 96       	adiw	r26, 0x37	; 55
    264c:	1c 92       	st	X, r1
    264e:	d7 97       	sbiw	r26, 0x37	; 55
    2650:	d8 96       	adiw	r26, 0x38	; 56
    2652:	1c 92       	st	X, r1
    2654:	d8 97       	sbiw	r26, 0x38	; 56
    2656:	d9 96       	adiw	r26, 0x39	; 57
    2658:	1c 92       	st	X, r1
    265a:	d9 97       	sbiw	r26, 0x39	; 57
    265c:	da 96       	adiw	r26, 0x3a	; 58
    265e:	1c 92       	st	X, r1
    2660:	da 97       	sbiw	r26, 0x3a	; 58
        fd->pos_cluster = 0;
    2662:	db 96       	adiw	r26, 0x3b	; 59
    2664:	1d 92       	st	X+, r1
    2666:	1d 92       	st	X+, r1
    2668:	1d 92       	st	X+, r1
    266a:	1c 92       	st	X, r1
    266c:	de 97       	sbiw	r26, 0x3e	; 62
    }

    return 1;
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	58 c0       	rjmp	.+176    	; 0x2722 <fat_resize_file+0x432>
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    if(!fd)
        return 0;
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	56 c0       	rjmp	.+172    	; 0x2722 <fat_resize_file+0x432>
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
            if(!cluster_new_chain)
                return 0;
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	54 c0       	rjmp	.+168    	; 0x2722 <fat_resize_file+0x432>
    {
        fd->pos = size;
        fd->pos_cluster = 0;
    }

    return 1;
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	52 c0       	rjmp	.+164    	; 0x2722 <fat_resize_file+0x432>
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
            if(!cluster_new_chain)
                return 0;
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	50 c0       	rjmp	.+160    	; 0x2722 <fat_resize_file+0x432>
    2682:	d5 01       	movw	r26, r10
    2684:	c4 01       	movw	r24, r8
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	a1 09       	sbc	r26, r1
    268a:	b1 09       	sbc	r27, r1
        if(size_new > cluster_size || cluster_num == 0)
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
    268c:	bc 01       	movw	r22, r24
    268e:	cd 01       	movw	r24, r26
    2690:	64 0d       	add	r22, r4
    2692:	75 1d       	adc	r23, r5
    2694:	86 1d       	adc	r24, r6
    2696:	97 1d       	adc	r25, r7
    2698:	a5 01       	movw	r20, r10
    269a:	94 01       	movw	r18, r8
    269c:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__udivmodsi4>
    26a0:	89 01       	movw	r16, r18
    26a2:	9a 01       	movw	r18, r20
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	50 e0       	ldi	r21, 0x00	; 0
    26a8:	ba 01       	movw	r22, r20
    26aa:	f1 01       	movw	r30, r2
    26ac:	80 81       	ld	r24, Z
    26ae:	91 81       	ldd	r25, Z+1	; 0x01
    26b0:	0e 94 75 03 	call	0x6ea	; 0x6ea <fat_append_clusters>
    26b4:	6b 01       	movw	r12, r22
    26b6:	7c 01       	movw	r14, r24
            if(!cluster_new_chain)
    26b8:	67 2b       	or	r22, r23
    26ba:	68 2b       	or	r22, r24
    26bc:	69 2b       	or	r22, r25
    26be:	09 f0       	breq	.+2      	; 0x26c2 <fat_resize_file+0x3d2>
    26c0:	b4 ce       	rjmp	.-664    	; 0x242a <fat_resize_file+0x13a>
    26c2:	dd cf       	rjmp	.-70     	; 0x267e <fat_resize_file+0x38e>

        /* write new directory entry */
        fd->dir_entry.file_size = size;
        if(size == 0)
            fd->dir_entry.cluster = 0;
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    26c4:	b1 01       	movw	r22, r2
    26c6:	6e 5f       	subi	r22, 0xFE	; 254
    26c8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ca:	d1 01       	movw	r26, r2
    26cc:	8d 91       	ld	r24, X+
    26ce:	9c 91       	ld	r25, X
    26d0:	0e 94 21 0a 	call	0x1442	; 0x1442 <fat_write_dir_entry>
    26d4:	81 11       	cpse	r24, r1
    26d6:	dc ce       	rjmp	.-584    	; 0x2490 <fat_resize_file+0x1a0>
    26d8:	24 c0       	rjmp	.+72     	; 0x2722 <fat_resize_file+0x432>
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    26da:	4c 01       	movw	r8, r24
    26dc:	a1 2c       	mov	r10, r1
    26de:	b1 2c       	mov	r11, r1
    26e0:	2d 81       	ldd	r18, Y+5	; 0x05
    26e2:	3e 81       	ldd	r19, Y+6	; 0x06
    26e4:	4f 81       	ldd	r20, Y+7	; 0x07
    26e6:	58 85       	ldd	r21, Y+8	; 0x08
    26e8:	82 16       	cp	r8, r18
    26ea:	93 06       	cpc	r9, r19
    26ec:	a4 06       	cpc	r10, r20
    26ee:	b5 06       	cpc	r11, r21
    26f0:	08 f4       	brcc	.+2      	; 0x26f4 <fat_resize_file+0x404>
    26f2:	3e ce       	rjmp	.-900    	; 0x2370 <fat_resize_file+0x80>
    26f4:	29 01       	movw	r4, r18
    26f6:	3a 01       	movw	r6, r20
    26f8:	c4 cf       	rjmp	.-120    	; 0x2682 <fat_resize_file+0x392>
    26fa:	4c 01       	movw	r8, r24
    26fc:	a1 2c       	mov	r10, r1
    26fe:	b1 2c       	mov	r11, r1
    2700:	4d 81       	ldd	r20, Y+5	; 0x05
    2702:	5e 81       	ldd	r21, Y+6	; 0x06
    2704:	6f 81       	ldd	r22, Y+7	; 0x07
    2706:	78 85       	ldd	r23, Y+8	; 0x08
    2708:	84 16       	cp	r8, r20
    270a:	95 06       	cpc	r9, r21
    270c:	a6 06       	cpc	r10, r22
    270e:	b7 06       	cpc	r11, r23
    2710:	08 f4       	brcc	.+2      	; 0x2714 <fat_resize_file+0x424>
    2712:	2e ce       	rjmp	.-932    	; 0x2370 <fat_resize_file+0x80>
    2714:	2a 01       	movw	r4, r20
    2716:	3b 01       	movw	r6, r22
    2718:	cd 84       	ldd	r12, Y+13	; 0x0d
    271a:	de 84       	ldd	r13, Y+14	; 0x0e
    271c:	ef 84       	ldd	r14, Y+15	; 0x0f
    271e:	f8 88       	ldd	r15, Y+16	; 0x10
    2720:	90 ce       	rjmp	.-736    	; 0x2442 <fat_resize_file+0x152>
        fd->pos = size;
        fd->pos_cluster = 0;
    }

    return 1;
}
    2722:	64 96       	adiw	r28, 0x14	; 20
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	df 91       	pop	r29
    2730:	cf 91       	pop	r28
    2732:	1f 91       	pop	r17
    2734:	0f 91       	pop	r16
    2736:	ff 90       	pop	r15
    2738:	ef 90       	pop	r14
    273a:	df 90       	pop	r13
    273c:	cf 90       	pop	r12
    273e:	bf 90       	pop	r11
    2740:	af 90       	pop	r10
    2742:	9f 90       	pop	r9
    2744:	8f 90       	pop	r8
    2746:	7f 90       	pop	r7
    2748:	6f 90       	pop	r6
    274a:	5f 90       	pop	r5
    274c:	4f 90       	pop	r4
    274e:	3f 90       	pop	r3
    2750:	2f 90       	pop	r2
    2752:	08 95       	ret

00002754 <fat_seek_file>:
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    2754:	af 92       	push	r10
    2756:	bf 92       	push	r11
    2758:	cf 92       	push	r12
    275a:	df 92       	push	r13
    275c:	ef 92       	push	r14
    275e:	ff 92       	push	r15
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	ec 01       	movw	r28, r24
    if(!fd || !offset)
    276a:	89 2b       	or	r24, r25
    276c:	09 f4       	brne	.+2      	; 0x2770 <fat_seek_file+0x1c>
    276e:	55 c0       	rjmp	.+170    	; 0x281a <fat_seek_file+0xc6>
    2770:	61 15       	cp	r22, r1
    2772:	71 05       	cpc	r23, r1
    2774:	09 f4       	brne	.+2      	; 0x2778 <fat_seek_file+0x24>
    2776:	53 c0       	rjmp	.+166    	; 0x281e <fat_seek_file+0xca>
        return 0;

    uint32_t new_pos = fd->pos;
    2778:	eb a9       	ldd	r30, Y+51	; 0x33
    277a:	5c a9       	ldd	r21, Y+52	; 0x34
    277c:	3d a9       	ldd	r19, Y+53	; 0x35
    277e:	2e a9       	ldd	r18, Y+54	; 0x36
    switch(whence)
    2780:	41 30       	cpi	r20, 0x01	; 1
    2782:	51 f0       	breq	.+20     	; 0x2798 <fat_seek_file+0x44>
    2784:	18 f0       	brcs	.+6      	; 0x278c <fat_seek_file+0x38>
    2786:	42 30       	cpi	r20, 0x02	; 2
    2788:	a9 f0       	breq	.+42     	; 0x27b4 <fat_seek_file+0x60>
    278a:	4b c0       	rjmp	.+150    	; 0x2822 <fat_seek_file+0xce>
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
    278c:	fb 01       	movw	r30, r22
    278e:	c0 80       	ld	r12, Z
    2790:	d1 80       	ldd	r13, Z+1	; 0x01
    2792:	e2 80       	ldd	r14, Z+2	; 0x02
    2794:	f3 80       	ldd	r15, Z+3	; 0x03
            break;
    2796:	1b c0       	rjmp	.+54     	; 0x27ce <fat_seek_file+0x7a>
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
        return 0;

    uint32_t new_pos = fd->pos;
    2798:	8e 2f       	mov	r24, r30
    279a:	95 2f       	mov	r25, r21
    279c:	a3 2f       	mov	r26, r19
    279e:	b2 2f       	mov	r27, r18
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
            break;
        case FAT_SEEK_CUR:
            new_pos += *offset;
    27a0:	fb 01       	movw	r30, r22
    27a2:	c0 80       	ld	r12, Z
    27a4:	d1 80       	ldd	r13, Z+1	; 0x01
    27a6:	e2 80       	ldd	r14, Z+2	; 0x02
    27a8:	f3 80       	ldd	r15, Z+3	; 0x03
    27aa:	c8 0e       	add	r12, r24
    27ac:	d9 1e       	adc	r13, r25
    27ae:	ea 1e       	adc	r14, r26
    27b0:	fb 1e       	adc	r15, r27
            break;
    27b2:	0d c0       	rjmp	.+26     	; 0x27ce <fat_seek_file+0x7a>
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
    27b4:	fb 01       	movw	r30, r22
    27b6:	c0 80       	ld	r12, Z
    27b8:	d1 80       	ldd	r13, Z+1	; 0x01
    27ba:	e2 80       	ldd	r14, Z+2	; 0x02
    27bc:	f3 80       	ldd	r15, Z+3	; 0x03
    27be:	8f a1       	ldd	r24, Y+39	; 0x27
    27c0:	98 a5       	ldd	r25, Y+40	; 0x28
    27c2:	a9 a5       	ldd	r26, Y+41	; 0x29
    27c4:	ba a5       	ldd	r27, Y+42	; 0x2a
    27c6:	c8 0e       	add	r12, r24
    27c8:	d9 1e       	adc	r13, r25
    27ca:	ea 1e       	adc	r14, r26
    27cc:	fb 1e       	adc	r15, r27
    27ce:	5b 01       	movw	r10, r22
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
    27d0:	8f a1       	ldd	r24, Y+39	; 0x27
    27d2:	98 a5       	ldd	r25, Y+40	; 0x28
    27d4:	a9 a5       	ldd	r26, Y+41	; 0x29
    27d6:	ba a5       	ldd	r27, Y+42	; 0x2a
    27d8:	8c 15       	cp	r24, r12
    27da:	9d 05       	cpc	r25, r13
    27dc:	ae 05       	cpc	r26, r14
    27de:	bf 05       	cpc	r27, r15
    27e0:	38 f4       	brcc	.+14     	; 0x27f0 <fat_seek_file+0x9c>
#if FAT_WRITE_SUPPORT
       && !fat_resize_file(fd, new_pos)
    27e2:	b7 01       	movw	r22, r14
    27e4:	a6 01       	movw	r20, r12
    27e6:	ce 01       	movw	r24, r28
    27e8:	0e 94 78 11 	call	0x22f0	; 0x22f0 <fat_resize_file>
    27ec:	88 23       	and	r24, r24
    27ee:	d1 f0       	breq	.+52     	; 0x2824 <fat_seek_file+0xd0>
#endif
       )
        return 0;

    fd->pos = new_pos;
    27f0:	97 01       	movw	r18, r14
    27f2:	86 01       	movw	r16, r12
    27f4:	cb aa       	std	Y+51, r12	; 0x33
    27f6:	1c ab       	std	Y+52, r17	; 0x34
    27f8:	2d ab       	std	Y+53, r18	; 0x35
    27fa:	3e ab       	std	Y+54, r19	; 0x36
    27fc:	1f aa       	std	Y+55, r1	; 0x37
    27fe:	18 ae       	std	Y+56, r1	; 0x38
    2800:	19 ae       	std	Y+57, r1	; 0x39
    2802:	1a ae       	std	Y+58, r1	; 0x3a
    fd->pos_cluster = 0;
    2804:	1b ae       	std	Y+59, r1	; 0x3b
    2806:	1c ae       	std	Y+60, r1	; 0x3c
    2808:	1d ae       	std	Y+61, r1	; 0x3d
    280a:	1e ae       	std	Y+62, r1	; 0x3e

    *offset = (int32_t) new_pos;
    280c:	f5 01       	movw	r30, r10
    280e:	c0 82       	st	Z, r12
    2810:	d1 82       	std	Z+1, r13	; 0x01
    2812:	e2 82       	std	Z+2, r14	; 0x02
    2814:	f3 82       	std	Z+3, r15	; 0x03
    return 1;
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	05 c0       	rjmp	.+10     	; 0x2824 <fat_seek_file+0xd0>
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
        return 0;
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	03 c0       	rjmp	.+6      	; 0x2824 <fat_seek_file+0xd0>
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	01 c0       	rjmp	.+2      	; 0x2824 <fat_seek_file+0xd0>
            break;
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
            break;
        default:
            return 0;
    2822:	80 e0       	ldi	r24, 0x00	; 0
    fd->pos = new_pos;
    fd->pos_cluster = 0;

    *offset = (int32_t) new_pos;
    return 1;
}
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	ff 90       	pop	r15
    282e:	ef 90       	pop	r14
    2830:	df 90       	pop	r13
    2832:	cf 90       	pop	r12
    2834:	bf 90       	pop	r11
    2836:	af 90       	pop	r10
    2838:	08 95       	ret

0000283a <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	b1 f0       	breq	.+44     	; 0x286e <fat_open_dir+0x34>
    2842:	61 15       	cp	r22, r1
    2844:	71 05       	cpc	r23, r1
    2846:	b1 f0       	breq	.+44     	; 0x2874 <fat_open_dir+0x3a>
    2848:	fb 01       	movw	r30, r22
    284a:	20 a1       	ldd	r18, Z+32	; 0x20
    284c:	24 ff       	sbrs	r18, 4
    284e:	15 c0       	rjmp	.+42     	; 0x287a <fat_open_dir+0x40>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    2850:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <__data_end>
    2854:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <__data_end+0x1>
    2858:	23 2b       	or	r18, r19
    285a:	91 f0       	breq	.+36     	; 0x2880 <fat_open_dir+0x46>
    285c:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <__data_end+0x39>
    2860:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <__data_end+0x3a>
    2864:	23 2b       	or	r18, r19
    2866:	79 f0       	breq	.+30     	; 0x2886 <fat_open_dir+0x4c>
            break;

        ++dd;
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	25 c0       	rjmp	.+74     	; 0x28b8 <fat_open_dir+0x7e>
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
        return 0;
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	22 c0       	rjmp	.+68     	; 0x28b8 <fat_open_dir+0x7e>
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	1f c0       	rjmp	.+62     	; 0x28b8 <fat_open_dir+0x7e>
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	1c c0       	rjmp	.+56     	; 0x28b8 <fat_open_dir+0x7e>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    2880:	c4 e7       	ldi	r28, 0x74	; 116
    2882:	d1 e0       	ldi	r29, 0x01	; 1
    2884:	02 c0       	rjmp	.+4      	; 0x288a <fat_open_dir+0x50>
    2886:	cd ea       	ldi	r28, 0xAD	; 173
    2888:	d1 e0       	ldi	r29, 0x01	; 1
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    288a:	de 01       	movw	r26, r28
    288c:	12 96       	adiw	r26, 0x02	; 2
    288e:	21 e3       	ldi	r18, 0x31	; 49
    2890:	fb 01       	movw	r30, r22
    2892:	01 90       	ld	r0, Z+
    2894:	0d 92       	st	X+, r0
    2896:	2a 95       	dec	r18
    2898:	e1 f7       	brne	.-8      	; 0x2892 <fat_open_dir+0x58>
    dd->fs = fs;
    289a:	99 83       	std	Y+1, r25	; 0x01
    289c:	88 83       	st	Y, r24
    dd->entry_cluster = dir_entry->cluster;
    289e:	fb 01       	movw	r30, r22
    28a0:	81 a1       	ldd	r24, Z+33	; 0x21
    28a2:	92 a1       	ldd	r25, Z+34	; 0x22
    28a4:	a3 a1       	ldd	r26, Z+35	; 0x23
    28a6:	b4 a1       	ldd	r27, Z+36	; 0x24
    28a8:	8b ab       	std	Y+51, r24	; 0x33
    28aa:	9c ab       	std	Y+52, r25	; 0x34
    28ac:	ad ab       	std	Y+53, r26	; 0x35
    28ae:	be ab       	std	Y+54, r27	; 0x36
    dd->entry_offset = 0;
    28b0:	18 ae       	std	Y+56, r1	; 0x38
    28b2:	1f aa       	std	Y+55, r1	; 0x37

    return dd;
    28b4:	8c 2f       	mov	r24, r28
    28b6:	9d 2f       	mov	r25, r29
}
    28b8:	df 91       	pop	r29
    28ba:	cf 91       	pop	r28
    28bc:	08 95       	ret

000028be <fat_close_dir>:
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    if(dd)
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	19 f0       	breq	.+6      	; 0x28c8 <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    28c2:	fc 01       	movw	r30, r24
    28c4:	11 82       	std	Z+1, r1	; 0x01
    28c6:	10 82       	st	Z, r1
    28c8:	08 95       	ret

000028ca <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    28ca:	fc 01       	movw	r30, r24
    if(!dd)
    28cc:	89 2b       	or	r24, r25
    28ce:	61 f0       	breq	.+24     	; 0x28e8 <fat_reset_dir+0x1e>
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    28d0:	83 a1       	ldd	r24, Z+35	; 0x23
    28d2:	94 a1       	ldd	r25, Z+36	; 0x24
    28d4:	a5 a1       	ldd	r26, Z+37	; 0x25
    28d6:	b6 a1       	ldd	r27, Z+38	; 0x26
    28d8:	83 ab       	std	Z+51, r24	; 0x33
    28da:	94 ab       	std	Z+52, r25	; 0x34
    28dc:	a5 ab       	std	Z+53, r26	; 0x35
    28de:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    28e0:	10 ae       	std	Z+56, r1	; 0x38
    28e2:	17 aa       	std	Z+55, r1	; 0x37
    return 1;
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	08 95       	ret
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;
    28e8:	80 e0       	ldi	r24, 0x00	; 0

    dd->entry_cluster = dd->dir_entry.cluster;
    dd->entry_offset = 0;
    return 1;
}
    28ea:	08 95       	ret

000028ec <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    28ec:	2f 92       	push	r2
    28ee:	3f 92       	push	r3
    28f0:	4f 92       	push	r4
    28f2:	5f 92       	push	r5
    28f4:	6f 92       	push	r6
    28f6:	7f 92       	push	r7
    28f8:	8f 92       	push	r8
    28fa:	9f 92       	push	r9
    28fc:	af 92       	push	r10
    28fe:	bf 92       	push	r11
    2900:	cf 92       	push	r12
    2902:	df 92       	push	r13
    2904:	ef 92       	push	r14
    2906:	ff 92       	push	r15
    2908:	0f 93       	push	r16
    290a:	1f 93       	push	r17
    290c:	cf 93       	push	r28
    290e:	df 93       	push	r29
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    2914:	e6 97       	sbiw	r28, 0x36	; 54
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	cd bf       	out	0x3d, r28	; 61
    if(!dd || !dir_entry)
    2920:	00 97       	sbiw	r24, 0x00	; 0
    2922:	09 f4       	brne	.+2      	; 0x2926 <fat_read_dir+0x3a>
    2924:	f3 c0       	rjmp	.+486    	; 0x2b0c <fat_read_dir+0x220>
    2926:	61 15       	cp	r22, r1
    2928:	71 05       	cpc	r23, r1
    292a:	09 f4       	brne	.+2      	; 0x292e <fat_read_dir+0x42>
    292c:	f1 c0       	rjmp	.+482    	; 0x2b10 <fat_read_dir+0x224>
    292e:	9e ab       	std	Y+54, r25	; 0x36
    2930:	8d ab       	std	Y+53, r24	; 0x35
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    2932:	fc 01       	movw	r30, r24
    2934:	20 80       	ld	r2, Z
    2936:	31 80       	ldd	r3, Z+1	; 0x01
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    2938:	f1 01       	movw	r30, r2
    293a:	60 8c       	ldd	r6, Z+24	; 0x18
    293c:	71 8c       	ldd	r7, Z+25	; 0x19
    cluster_t cluster_num = dd->entry_cluster;
    293e:	fc 01       	movw	r30, r24
    2940:	23 a9       	ldd	r18, Z+51	; 0x33
    2942:	34 a9       	ldd	r19, Z+52	; 0x34
    2944:	45 a9       	ldd	r20, Z+53	; 0x35
    2946:	56 a9       	ldd	r21, Z+54	; 0x36
    2948:	29 ab       	std	Y+49, r18	; 0x31
    294a:	3a ab       	std	Y+50, r19	; 0x32
    294c:	4b ab       	std	Y+51, r20	; 0x33
    294e:	5c ab       	std	Y+52, r21	; 0x34
    uint16_t cluster_offset = dd->entry_offset;
    2950:	47 a8       	ldd	r4, Z+55	; 0x37
    2952:	50 ac       	ldd	r5, Z+56	; 0x38
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
    2954:	46 14       	cp	r4, r6
    2956:	57 04       	cpc	r5, r7
    2958:	20 f0       	brcs	.+8      	; 0x2962 <fat_read_dir+0x76>
        /* The latest call hit the border of the last cluster in
         * the chain, but it still returned a directory entry.
         * So we now reset the handle and signal the caller the
         * end of the listing.
         */
        fat_reset_dir(dd);
    295a:	0e 94 65 14 	call	0x28ca	; 0x28ca <fat_reset_dir>
        return 0;
    295e:	10 e0       	ldi	r17, 0x00	; 0
    2960:	da c0       	rjmp	.+436    	; 0x2b16 <fat_read_dir+0x22a>
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    2962:	9e 01       	movw	r18, r28
    2964:	2f 5f       	subi	r18, 0xFF	; 255
    2966:	3f 4f       	sbci	r19, 0xFF	; 255
    2968:	86 e0       	ldi	r24, 0x06	; 6
    296a:	f9 01       	movw	r30, r18
    296c:	11 92       	st	Z+, r1
    296e:	8a 95       	dec	r24
    2970:	e9 f7       	brne	.-6      	; 0x296c <fat_read_dir+0x80>
    memset(dir_entry, 0, sizeof(*dir_entry));
    2972:	81 e3       	ldi	r24, 0x31	; 49
    2974:	fb 01       	movw	r30, r22
    2976:	11 92       	st	Z+, r1
    2978:	8a 95       	dec	r24
    297a:	e9 f7       	brne	.-6      	; 0x2976 <fat_read_dir+0x8a>
    arg.dir_entry = dir_entry;
    297c:	7a 83       	std	Y+2, r23	; 0x02
    297e:	69 83       	std	Y+1, r22	; 0x01

    /* check if we read from the root directory */
    if(cluster_num == 0)
    2980:	29 a9       	ldd	r18, Y+49	; 0x31
    2982:	3a a9       	ldd	r19, Y+50	; 0x32
    2984:	4b a9       	ldd	r20, Y+51	; 0x33
    2986:	5c a9       	ldd	r21, Y+52	; 0x34
    2988:	23 2b       	or	r18, r19
    298a:	24 2b       	or	r18, r20
    298c:	25 2b       	or	r18, r21
    298e:	09 f0       	breq	.+2      	; 0x2992 <fat_read_dir+0xa6>
    2990:	a7 c0       	rjmp	.+334    	; 0x2ae0 <fat_read_dir+0x1f4>
    {
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
    2992:	d1 01       	movw	r26, r2
    2994:	ed 91       	ld	r30, X+
    2996:	fc 91       	ld	r31, X
    2998:	11 97       	sbiw	r26, 0x01	; 1
    299a:	80 85       	ldd	r24, Z+8	; 0x08
    299c:	8b 30       	cpi	r24, 0x0B	; 11
    299e:	59 f4       	brne	.+22     	; 0x29b6 <fat_read_dir+0xca>
            cluster_num = header->root_dir_cluster;
    29a0:	9a 96       	adiw	r26, 0x2a	; 42
    29a2:	2d 91       	ld	r18, X+
    29a4:	3d 91       	ld	r19, X+
    29a6:	4d 91       	ld	r20, X+
    29a8:	5c 91       	ld	r21, X
    29aa:	9d 97       	sbiw	r26, 0x2d	; 45
    29ac:	29 ab       	std	Y+49, r18	; 0x31
    29ae:	3a ab       	std	Y+50, r19	; 0x32
    29b0:	4b ab       	std	Y+51, r20	; 0x33
    29b2:	5c ab       	std	Y+52, r21	; 0x34
    29b4:	95 c0       	rjmp	.+298    	; 0x2ae0 <fat_read_dir+0x1f4>
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    29b6:	f1 01       	movw	r30, r2
    29b8:	22 8d       	ldd	r18, Z+26	; 0x1a
    29ba:	33 8d       	ldd	r19, Z+27	; 0x1b
    29bc:	82 a1       	ldd	r24, Z+34	; 0x22
    29be:	93 a1       	ldd	r25, Z+35	; 0x23
    29c0:	39 01       	movw	r6, r18
    29c2:	68 1a       	sub	r6, r24
    29c4:	79 0a       	sbc	r7, r25
    29c6:	8c c0       	rjmp	.+280    	; 0x2ae0 <fat_read_dir+0x1f4>
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
    29c8:	93 01       	movw	r18, r6
    29ca:	24 19       	sub	r18, r4
    29cc:	35 09       	sbc	r19, r5
    29ce:	38 ab       	std	Y+48, r19	; 0x30
    29d0:	2f a7       	std	Y+47, r18	; 0x2f
        offset_t pos = cluster_offset;
    29d2:	a2 01       	movw	r20, r4
    29d4:	60 e0       	ldi	r22, 0x00	; 0
    29d6:	70 e0       	ldi	r23, 0x00	; 0
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	dc 01       	movw	r26, r24
    29de:	4f a2       	std	Y+39, r4	; 0x27
    29e0:	58 a7       	std	Y+40, r21	; 0x28
    29e2:	69 a7       	std	Y+41, r22	; 0x29
    29e4:	7a a7       	std	Y+42, r23	; 0x2a
    29e6:	8b a7       	std	Y+43, r24	; 0x2b
    29e8:	9c a7       	std	Y+44, r25	; 0x2c
    29ea:	ad a7       	std	Y+45, r26	; 0x2d
    29ec:	be a7       	std	Y+46, r27	; 0x2e
        if(cluster_num == 0)
    29ee:	69 a9       	ldd	r22, Y+49	; 0x31
    29f0:	7a a9       	ldd	r23, Y+50	; 0x32
    29f2:	8b a9       	ldd	r24, Y+51	; 0x33
    29f4:	9c a9       	ldd	r25, Y+52	; 0x34
    29f6:	67 2b       	or	r22, r23
    29f8:	68 2b       	or	r22, r24
    29fa:	69 2b       	or	r22, r25
    29fc:	19 f5       	brne	.+70     	; 0x2a44 <fat_read_dir+0x158>
            pos += header->root_dir_offset;
    29fe:	24 2d       	mov	r18, r4
    2a00:	35 2f       	mov	r19, r21
    2a02:	40 e0       	ldi	r20, 0x00	; 0
    2a04:	50 e0       	ldi	r21, 0x00	; 0
    2a06:	60 e0       	ldi	r22, 0x00	; 0
    2a08:	70 e0       	ldi	r23, 0x00	; 0
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	d1 01       	movw	r26, r2
    2a10:	92 96       	adiw	r26, 0x22	; 34
    2a12:	ac 90       	ld	r10, X
    2a14:	92 97       	sbiw	r26, 0x22	; 34
    2a16:	93 96       	adiw	r26, 0x23	; 35
    2a18:	bc 90       	ld	r11, X
    2a1a:	93 97       	sbiw	r26, 0x23	; 35
    2a1c:	94 96       	adiw	r26, 0x24	; 36
    2a1e:	cc 90       	ld	r12, X
    2a20:	94 97       	sbiw	r26, 0x24	; 36
    2a22:	95 96       	adiw	r26, 0x25	; 37
    2a24:	dc 90       	ld	r13, X
    2a26:	95 97       	sbiw	r26, 0x25	; 37
    2a28:	96 96       	adiw	r26, 0x26	; 38
    2a2a:	ec 90       	ld	r14, X
    2a2c:	96 97       	sbiw	r26, 0x26	; 38
    2a2e:	97 96       	adiw	r26, 0x27	; 39
    2a30:	fc 90       	ld	r15, X
    2a32:	97 97       	sbiw	r26, 0x27	; 39
    2a34:	98 96       	adiw	r26, 0x28	; 40
    2a36:	0c 91       	ld	r16, X
    2a38:	98 97       	sbiw	r26, 0x28	; 40
    2a3a:	99 96       	adiw	r26, 0x29	; 41
    2a3c:	1c 91       	ld	r17, X
    2a3e:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
    2a42:	11 c0       	rjmp	.+34     	; 0x2a66 <fat_read_dir+0x17a>
        else
            pos += fat_cluster_offset(fs, cluster_num);
    2a44:	49 a9       	ldd	r20, Y+49	; 0x31
    2a46:	5a a9       	ldd	r21, Y+50	; 0x32
    2a48:	6b a9       	ldd	r22, Y+51	; 0x33
    2a4a:	7c a9       	ldd	r23, Y+52	; 0x34
    2a4c:	c1 01       	movw	r24, r2
    2a4e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <fat_cluster_offset>
    2a52:	af a0       	ldd	r10, Y+39	; 0x27
    2a54:	b8 a4       	ldd	r11, Y+40	; 0x28
    2a56:	c1 2c       	mov	r12, r1
    2a58:	d1 2c       	mov	r13, r1
    2a5a:	e1 2c       	mov	r14, r1
    2a5c:	f1 2c       	mov	r15, r1
    2a5e:	00 e0       	ldi	r16, 0x00	; 0
    2a60:	10 e0       	ldi	r17, 0x00	; 0
    2a62:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>

        arg.bytes_read = 0;
    2a66:	1c 82       	std	Y+4, r1	; 0x04
    2a68:	1b 82       	std	Y+3, r1	; 0x03
        if(!fs->partition->device_read_interval(pos,
    2a6a:	d1 01       	movw	r26, r2
    2a6c:	ed 91       	ld	r30, X+
    2a6e:	fc 91       	ld	r31, X
    2a70:	02 80       	ldd	r0, Z+2	; 0x02
    2a72:	f3 81       	ldd	r31, Z+3	; 0x03
    2a74:	e0 2d       	mov	r30, r0
    2a76:	de 01       	movw	r26, r28
    2a78:	11 96       	adiw	r26, 0x01	; 1
    2a7a:	4d 01       	movw	r8, r26
    2a7c:	0f 2e       	mov	r0, r31
    2a7e:	f2 eb       	ldi	r31, 0xB2	; 178
    2a80:	af 2e       	mov	r10, r31
    2a82:	f6 e0       	ldi	r31, 0x06	; 6
    2a84:	bf 2e       	mov	r11, r31
    2a86:	f0 2d       	mov	r31, r0
    2a88:	cf a4       	ldd	r12, Y+47	; 0x2f
    2a8a:	d8 a8       	ldd	r13, Y+48	; 0x30
    2a8c:	68 94       	set
    2a8e:	ee 24       	eor	r14, r14
    2a90:	e5 f8       	bld	r14, 5
    2a92:	f1 2c       	mov	r15, r1
    2a94:	8e 01       	movw	r16, r28
    2a96:	09 5f       	subi	r16, 0xF9	; 249
    2a98:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9a:	09 95       	icall
    2a9c:	88 23       	and	r24, r24
    2a9e:	d1 f1       	breq	.+116    	; 0x2b14 <fat_read_dir+0x228>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa4:	48 0e       	add	r4, r24
    2aa6:	59 1e       	adc	r5, r25

        if(cluster_offset >= cluster_size)
    2aa8:	46 14       	cp	r4, r6
    2aaa:	57 04       	cpc	r5, r7
    2aac:	c8 f0       	brcs	.+50     	; 0x2ae0 <fat_read_dir+0x1f4>
        {
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
    2aae:	49 a9       	ldd	r20, Y+49	; 0x31
    2ab0:	5a a9       	ldd	r21, Y+50	; 0x32
    2ab2:	6b a9       	ldd	r22, Y+51	; 0x33
    2ab4:	7c a9       	ldd	r23, Y+52	; 0x34
    2ab6:	c1 01       	movw	r24, r2
    2ab8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fat_get_next_cluster>
    2abc:	69 ab       	std	Y+49, r22	; 0x31
    2abe:	7a ab       	std	Y+50, r23	; 0x32
    2ac0:	8b ab       	std	Y+51, r24	; 0x33
    2ac2:	9c ab       	std	Y+52, r25	; 0x34
    2ac4:	67 2b       	or	r22, r23
    2ac6:	68 2b       	or	r22, r24
    2ac8:	69 2b       	or	r22, r25
    2aca:	41 f4       	brne	.+16     	; 0x2adc <fat_read_dir+0x1f0>
                cluster_offset = 0;
                continue;
            }

            /* we are at the end of the cluster chain */
            if(!arg.finished)
    2acc:	1e 81       	ldd	r17, Y+6	; 0x06
    2ace:	11 11       	cpse	r17, r1
    2ad0:	0b c0       	rjmp	.+22     	; 0x2ae8 <fat_read_dir+0x1fc>
            {
                /* directory entry not found, reset directory handle */
                fat_reset_dir(dd);
    2ad2:	8d a9       	ldd	r24, Y+53	; 0x35
    2ad4:	9e a9       	ldd	r25, Y+54	; 0x36
    2ad6:	0e 94 65 14 	call	0x28ca	; 0x28ca <fat_reset_dir>
                return 0;
    2ada:	1d c0       	rjmp	.+58     	; 0x2b16 <fat_read_dir+0x22a>
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
            {
                cluster_offset = 0;
    2adc:	41 2c       	mov	r4, r1
    2ade:	51 2c       	mov	r5, r1
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    2ae0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ae2:	88 23       	and	r24, r24
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <fat_read_dir+0x1fc>
    2ae6:	70 cf       	rjmp	.-288    	; 0x29c8 <fat_read_dir+0xdc>

            break;
        }
    }

    dd->entry_cluster = cluster_num;
    2ae8:	29 a9       	ldd	r18, Y+49	; 0x31
    2aea:	3a a9       	ldd	r19, Y+50	; 0x32
    2aec:	4b a9       	ldd	r20, Y+51	; 0x33
    2aee:	5c a9       	ldd	r21, Y+52	; 0x34
    2af0:	ad a9       	ldd	r26, Y+53	; 0x35
    2af2:	be a9       	ldd	r27, Y+54	; 0x36
    2af4:	d3 96       	adiw	r26, 0x33	; 51
    2af6:	2d 93       	st	X+, r18
    2af8:	3d 93       	st	X+, r19
    2afa:	4d 93       	st	X+, r20
    2afc:	5c 93       	st	X, r21
    2afe:	d6 97       	sbiw	r26, 0x36	; 54
    dd->entry_offset = cluster_offset;
    2b00:	d8 96       	adiw	r26, 0x38	; 56
    2b02:	5c 92       	st	X, r5
    2b04:	4e 92       	st	-X, r4
    2b06:	d7 97       	sbiw	r26, 0x37	; 55

    return arg.finished;
    2b08:	1e 81       	ldd	r17, Y+6	; 0x06
    2b0a:	05 c0       	rjmp	.+10     	; 0x2b16 <fat_read_dir+0x22a>
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    if(!dd || !dir_entry)
        return 0;
    2b0c:	10 e0       	ldi	r17, 0x00	; 0
    2b0e:	03 c0       	rjmp	.+6      	; 0x2b16 <fat_read_dir+0x22a>
    2b10:	10 e0       	ldi	r17, 0x00	; 0
    2b12:	01 c0       	rjmp	.+2      	; 0x2b16 <fat_read_dir+0x22a>
    2b14:	18 2f       	mov	r17, r24

    dd->entry_cluster = cluster_num;
    dd->entry_offset = cluster_offset;

    return arg.finished;
}
    2b16:	81 2f       	mov	r24, r17
    2b18:	e6 96       	adiw	r28, 0x36	; 54
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	de bf       	out	0x3e, r29	; 62
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	df 91       	pop	r29
    2b26:	cf 91       	pop	r28
    2b28:	1f 91       	pop	r17
    2b2a:	0f 91       	pop	r16
    2b2c:	ff 90       	pop	r15
    2b2e:	ef 90       	pop	r14
    2b30:	df 90       	pop	r13
    2b32:	cf 90       	pop	r12
    2b34:	bf 90       	pop	r11
    2b36:	af 90       	pop	r10
    2b38:	9f 90       	pop	r9
    2b3a:	8f 90       	pop	r8
    2b3c:	7f 90       	pop	r7
    2b3e:	6f 90       	pop	r6
    2b40:	5f 90       	pop	r5
    2b42:	4f 90       	pop	r4
    2b44:	3f 90       	pop	r3
    2b46:	2f 90       	pop	r2
    2b48:	08 95       	ret

00002b4a <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    2b4a:	4f 92       	push	r4
    2b4c:	5f 92       	push	r5
    2b4e:	6f 92       	push	r6
    2b50:	7f 92       	push	r7
    2b52:	8f 92       	push	r8
    2b54:	9f 92       	push	r9
    2b56:	af 92       	push	r10
    2b58:	bf 92       	push	r11
    2b5a:	cf 92       	push	r12
    2b5c:	df 92       	push	r13
    2b5e:	ef 92       	push	r14
    2b60:	ff 92       	push	r15
    2b62:	0f 93       	push	r16
    2b64:	1f 93       	push	r17
    2b66:	cf 93       	push	r28
    2b68:	df 93       	push	r29
    2b6a:	4c 01       	movw	r8, r24
    2b6c:	6b 01       	movw	r12, r22
    2b6e:	ea 01       	movw	r28, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    2b70:	89 2b       	or	r24, r25
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <fat_get_dir_entry_of_path+0x2c>
    2b74:	76 c0       	rjmp	.+236    	; 0x2c62 <fat_get_dir_entry_of_path+0x118>
    2b76:	61 15       	cp	r22, r1
    2b78:	71 05       	cpc	r23, r1
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <fat_get_dir_entry_of_path+0x34>
    2b7c:	74 c0       	rjmp	.+232    	; 0x2c66 <fat_get_dir_entry_of_path+0x11c>
    2b7e:	fb 01       	movw	r30, r22
    2b80:	80 81       	ld	r24, Z
    2b82:	88 23       	and	r24, r24
    2b84:	09 f4       	brne	.+2      	; 0x2b88 <fat_get_dir_entry_of_path+0x3e>
    2b86:	71 c0       	rjmp	.+226    	; 0x2c6a <fat_get_dir_entry_of_path+0x120>
    2b88:	20 97       	sbiw	r28, 0x00	; 0
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <fat_get_dir_entry_of_path+0x44>
    2b8c:	70 c0       	rjmp	.+224    	; 0x2c6e <fat_get_dir_entry_of_path+0x124>
        return 0;

    if(path[0] == '/')
    2b8e:	8f 32       	cpi	r24, 0x2F	; 47
    2b90:	19 f4       	brne	.+6      	; 0x2b98 <fat_get_dir_entry_of_path+0x4e>
        ++path;
    2b92:	ff ef       	ldi	r31, 0xFF	; 255
    2b94:	cf 1a       	sub	r12, r31
    2b96:	df 0a       	sbc	r13, r31

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    2b98:	81 e3       	ldi	r24, 0x31	; 49
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	11 92       	st	Z+, r1
    2b9e:	8a 95       	dec	r24
    2ba0:	e9 f7       	brne	.-6      	; 0x2b9c <fat_get_dir_entry_of_path+0x52>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    2ba2:	80 e1       	ldi	r24, 0x10	; 16
    2ba4:	88 a3       	std	Y+32, r24	; 0x20

    while(1)
    {
        if(path[0] == '\0')
    2ba6:	f6 01       	movw	r30, r12
    2ba8:	80 81       	ld	r24, Z
    2baa:	88 23       	and	r24, r24
    2bac:	09 f4       	brne	.+2      	; 0x2bb0 <fat_get_dir_entry_of_path+0x66>
    2bae:	61 c0       	rjmp	.+194    	; 0x2c72 <fat_get_dir_entry_of_path+0x128>
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
    2bb0:	41 2c       	mov	r4, r1
    2bb2:	51 2c       	mov	r5, r1
    while(1)
    {
        if(path[0] == '\0')
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    2bb4:	be 01       	movw	r22, r28
    2bb6:	c4 01       	movw	r24, r8
    2bb8:	0e 94 1d 14 	call	0x283a	; 0x283a <fat_open_dir>
    2bbc:	8c 01       	movw	r16, r24
        if(!dd)
    2bbe:	89 2b       	or	r24, r25
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <fat_get_dir_entry_of_path+0x7a>
    2bc2:	59 c0       	rjmp	.+178    	; 0x2c76 <fat_get_dir_entry_of_path+0x12c>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    2bc4:	6f e2       	ldi	r22, 0x2F	; 47
    2bc6:	70 e0       	ldi	r23, 0x00	; 0
    2bc8:	c6 01       	movw	r24, r12
    2bca:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    2bce:	00 97       	sbiw	r24, 0x00	; 0
    2bd0:	41 f0       	breq	.+16     	; 0x2be2 <fat_get_dir_entry_of_path+0x98>
        {
            length_to_sep = sub_path - path;
    2bd2:	e8 2e       	mov	r14, r24
    2bd4:	ec 18       	sub	r14, r12
            ++sub_path;
    2bd6:	5c 01       	movw	r10, r24
    2bd8:	ff ef       	ldi	r31, 0xFF	; 255
    2bda:	af 1a       	sub	r10, r31
    2bdc:	bf 0a       	sbc	r11, r31
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    2bde:	f1 2c       	mov	r15, r1
    2be0:	2d c0       	rjmp	.+90     	; 0x2c3c <fat_get_dir_entry_of_path+0xf2>
            length_to_sep = sub_path - path;
            ++sub_path;
        }
        else
        {
            length_to_sep = strlen(path);
    2be2:	f6 01       	movw	r30, r12
    2be4:	01 90       	ld	r0, Z+
    2be6:	00 20       	and	r0, r0
    2be8:	e9 f7       	brne	.-6      	; 0x2be4 <fat_get_dir_entry_of_path+0x9a>
    2bea:	31 97       	sbiw	r30, 0x01	; 1
    2bec:	ec 19       	sub	r30, r12
    2bee:	fd 09       	sbc	r31, r13
    2bf0:	ee 2e       	mov	r14, r30
            sub_path = path + length_to_sep;
    2bf2:	56 01       	movw	r10, r12
    2bf4:	ae 0e       	add	r10, r30
    2bf6:	b1 1c       	adc	r11, r1
    2bf8:	f2 cf       	rjmp	.-28     	; 0x2bde <fat_get_dir_entry_of_path+0x94>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	01 90       	ld	r0, Z+
    2bfe:	00 20       	and	r0, r0
    2c00:	e9 f7       	brne	.-6      	; 0x2bfc <fat_get_dir_entry_of_path+0xb2>
    2c02:	31 97       	sbiw	r30, 0x01	; 1
    2c04:	3f 01       	movw	r6, r30
    2c06:	6c 1a       	sub	r6, r28
    2c08:	7d 0a       	sbc	r7, r29
    2c0a:	6e 14       	cp	r6, r14
    2c0c:	7f 04       	cpc	r7, r15
    2c0e:	b1 f4       	brne	.+44     	; 0x2c3c <fat_get_dir_entry_of_path+0xf2>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
    2c10:	a3 01       	movw	r20, r6
    2c12:	be 01       	movw	r22, r28
    2c14:	c6 01       	movw	r24, r12
    2c16:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <strncmp>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    2c1a:	89 2b       	or	r24, r25
    2c1c:	79 f4       	brne	.+30     	; 0x2c3c <fat_get_dir_entry_of_path+0xf2>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
    2c1e:	c8 01       	movw	r24, r16
    2c20:	0e 94 5f 14 	call	0x28be	; 0x28be <fat_close_dir>
            dd = 0;

            if(path[length_to_sep] == '\0')
    2c24:	f6 01       	movw	r30, r12
    2c26:	e6 0d       	add	r30, r6
    2c28:	f7 1d       	adc	r31, r7
    2c2a:	80 81       	ld	r24, Z
    2c2c:	88 23       	and	r24, r24
    2c2e:	29 f1       	breq	.+74     	; 0x2c7a <fat_get_dir_entry_of_path+0x130>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    2c30:	98 a1       	ldd	r25, Y+32	; 0x20
    2c32:	89 2f       	mov	r24, r25
    2c34:	80 71       	andi	r24, 0x10	; 16
    2c36:	94 fd       	sbrc	r25, 4
    2c38:	08 c0       	rjmp	.+16     	; 0x2c4a <fat_get_dir_entry_of_path+0x100>
    2c3a:	20 c0       	rjmp	.+64     	; 0x2c7c <fat_get_dir_entry_of_path+0x132>
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    2c3c:	be 01       	movw	r22, r28
    2c3e:	c8 01       	movw	r24, r16
    2c40:	0e 94 76 14 	call	0x28ec	; 0x28ec <fat_read_dir>
    2c44:	81 11       	cpse	r24, r1
    2c46:	d9 cf       	rjmp	.-78     	; 0x2bfa <fat_get_dir_entry_of_path+0xb0>
    2c48:	03 c0       	rjmp	.+6      	; 0x2c50 <fat_get_dir_entry_of_path+0x106>
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
            {
                /* we found a parent directory of the file we are searching for */
                path = sub_path;
    2c4a:	65 01       	movw	r12, r10
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
    2c4c:	04 2d       	mov	r16, r4
    2c4e:	15 2d       	mov	r17, r5

            /* a parent of the file exists, but not the file itself */
            return 0;
        }

        fat_close_dir(dd);
    2c50:	c8 01       	movw	r24, r16
    2c52:	0e 94 5f 14 	call	0x28be	; 0x28be <fat_close_dir>
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    2c56:	f6 01       	movw	r30, r12
    2c58:	80 81       	ld	r24, Z
    2c5a:	81 11       	cpse	r24, r1
    2c5c:	ab cf       	rjmp	.-170    	; 0x2bb4 <fat_get_dir_entry_of_path+0x6a>
            return 1;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	0d c0       	rjmp	.+26     	; 0x2c7c <fat_get_dir_entry_of_path+0x132>
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
        return 0;
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	0b c0       	rjmp	.+22     	; 0x2c7c <fat_get_dir_entry_of_path+0x132>
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	09 c0       	rjmp	.+18     	; 0x2c7c <fat_get_dir_entry_of_path+0x132>
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	07 c0       	rjmp	.+14     	; 0x2c7c <fat_get_dir_entry_of_path+0x132>
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	05 c0       	rjmp	.+10     	; 0x2c7c <fat_get_dir_entry_of_path+0x132>
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
            return 1;
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	03 c0       	rjmp	.+6      	; 0x2c7c <fat_get_dir_entry_of_path+0x132>
        }

        fat_close_dir(dd);
    }
    
    return 0;
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	01 c0       	rjmp	.+2      	; 0x2c7c <fat_get_dir_entry_of_path+0x132>
            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
                /* we iterated through the whole path and have found the file */
                return 1;
    2c7a:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
    2c7c:	df 91       	pop	r29
    2c7e:	cf 91       	pop	r28
    2c80:	1f 91       	pop	r17
    2c82:	0f 91       	pop	r16
    2c84:	ff 90       	pop	r15
    2c86:	ef 90       	pop	r14
    2c88:	df 90       	pop	r13
    2c8a:	cf 90       	pop	r12
    2c8c:	bf 90       	pop	r11
    2c8e:	af 90       	pop	r10
    2c90:	9f 90       	pop	r9
    2c92:	8f 90       	pop	r8
    2c94:	7f 90       	pop	r7
    2c96:	6f 90       	pop	r6
    2c98:	5f 90       	pop	r5
    2c9a:	4f 90       	pop	r4
    2c9c:	08 95       	ret

00002c9e <fat_create_file>:
 * \param[out] dir_entry The directory entry to fill for the new (or existing) file.
 * \returns 0 on failure, 1 on success, 2 if the file already existed.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    2c9e:	af 92       	push	r10
    2ca0:	bf 92       	push	r11
    2ca2:	cf 92       	push	r12
    2ca4:	df 92       	push	r13
    2ca6:	ef 92       	push	r14
    2ca8:	ff 92       	push	r15
    2caa:	1f 93       	push	r17
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    if(!parent || !file || !file[0] || !dir_entry)
    2cb0:	00 97       	sbiw	r24, 0x00	; 0
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <fat_create_file+0x18>
    2cb4:	49 c0       	rjmp	.+146    	; 0x2d48 <fat_create_file+0xaa>
    2cb6:	61 15       	cp	r22, r1
    2cb8:	71 05       	cpc	r23, r1
    2cba:	09 f4       	brne	.+2      	; 0x2cbe <fat_create_file+0x20>
    2cbc:	47 c0       	rjmp	.+142    	; 0x2d4c <fat_create_file+0xae>
    2cbe:	fb 01       	movw	r30, r22
    2cc0:	20 81       	ld	r18, Z
    2cc2:	22 23       	and	r18, r18
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <fat_create_file+0x2a>
    2cc6:	44 c0       	rjmp	.+136    	; 0x2d50 <fat_create_file+0xb2>
    2cc8:	ea 01       	movw	r28, r20
    2cca:	7b 01       	movw	r14, r22
    2ccc:	6c 01       	movw	r12, r24
    2cce:	20 97       	sbiw	r28, 0x00	; 0
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <fat_create_file+0x36>
    2cd2:	40 c0       	rjmp	.+128    	; 0x2d54 <fat_create_file+0xb6>
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
    2cd4:	be 01       	movw	r22, r28
    2cd6:	c6 01       	movw	r24, r12
    2cd8:	0e 94 76 14 	call	0x28ec	; 0x28ec <fat_read_dir>
    2cdc:	18 2f       	mov	r17, r24
    2cde:	88 23       	and	r24, r24
    2ce0:	59 f0       	breq	.+22     	; 0x2cf8 <fat_create_file+0x5a>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    2ce2:	be 01       	movw	r22, r28
    2ce4:	c7 01       	movw	r24, r14
    2ce6:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <strcmp>
    2cea:	89 2b       	or	r24, r25
    2cec:	99 f7       	brne	.-26     	; 0x2cd4 <fat_create_file+0x36>
        {
            fat_reset_dir(parent);
    2cee:	c6 01       	movw	r24, r12
    2cf0:	0e 94 65 14 	call	0x28ca	; 0x28ca <fat_reset_dir>
            return 2;
    2cf4:	12 e0       	ldi	r17, 0x02	; 2
    2cf6:	2f c0       	rjmp	.+94     	; 0x2d56 <fat_create_file+0xb8>
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    2cf8:	f6 01       	movw	r30, r12
    2cfa:	a0 80       	ld	r10, Z
    2cfc:	b1 80       	ldd	r11, Z+1	; 0x01

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    2cfe:	81 e3       	ldi	r24, 0x31	; 49
    2d00:	fe 01       	movw	r30, r28
    2d02:	11 92       	st	Z+, r1
    2d04:	8a 95       	dec	r24
    2d06:	e9 f7       	brne	.-6      	; 0x2d02 <fat_create_file+0x64>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    2d08:	4f e1       	ldi	r20, 0x1F	; 31
    2d0a:	50 e0       	ldi	r21, 0x00	; 0
    2d0c:	b7 01       	movw	r22, r14
    2d0e:	ce 01       	movw	r24, r28
    2d10:	0e 94 00 20 	call	0x4000	; 0x4000 <strncpy>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    2d14:	ae 01       	movw	r20, r28
    2d16:	b6 01       	movw	r22, r12
    2d18:	c5 01       	movw	r24, r10
    2d1a:	0e 94 2e 08 	call	0x105c	; 0x105c <fat_find_offset_for_dir_entry>
    2d1e:	29 a7       	std	Y+41, r18	; 0x29
    2d20:	3a a7       	std	Y+42, r19	; 0x2a
    2d22:	4b a7       	std	Y+43, r20	; 0x2b
    2d24:	5c a7       	std	Y+44, r21	; 0x2c
    2d26:	6d a7       	std	Y+45, r22	; 0x2d
    2d28:	7e a7       	std	Y+46, r23	; 0x2e
    2d2a:	8f a7       	std	Y+47, r24	; 0x2f
    2d2c:	98 ab       	std	Y+48, r25	; 0x30
    2d2e:	a0 e0       	ldi	r26, 0x00	; 0
    2d30:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <__cmpdi2_s8>
    2d34:	81 f0       	breq	.+32     	; 0x2d56 <fat_create_file+0xb8>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    2d36:	be 01       	movw	r22, r28
    2d38:	c5 01       	movw	r24, r10
    2d3a:	0e 94 21 0a 	call	0x1442	; 0x1442 <fat_write_dir_entry>
    2d3e:	11 e0       	ldi	r17, 0x01	; 1
    2d40:	81 11       	cpse	r24, r1
    2d42:	09 c0       	rjmp	.+18     	; 0x2d56 <fat_create_file+0xb8>
    2d44:	10 e0       	ldi	r17, 0x00	; 0
    2d46:	07 c0       	rjmp	.+14     	; 0x2d56 <fat_create_file+0xb8>
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !file || !file[0] || !dir_entry)
        return 0;
    2d48:	10 e0       	ldi	r17, 0x00	; 0
    2d4a:	05 c0       	rjmp	.+10     	; 0x2d56 <fat_create_file+0xb8>
    2d4c:	10 e0       	ldi	r17, 0x00	; 0
    2d4e:	03 c0       	rjmp	.+6      	; 0x2d56 <fat_create_file+0xb8>
    2d50:	10 e0       	ldi	r17, 0x00	; 0
    2d52:	01 c0       	rjmp	.+2      	; 0x2d56 <fat_create_file+0xb8>
    2d54:	10 e0       	ldi	r17, 0x00	; 0
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
        return 0;
    
    return 1;
}
    2d56:	81 2f       	mov	r24, r17
    2d58:	df 91       	pop	r29
    2d5a:	cf 91       	pop	r28
    2d5c:	1f 91       	pop	r17
    2d5e:	ff 90       	pop	r15
    2d60:	ef 90       	pop	r14
    2d62:	df 90       	pop	r13
    2d64:	cf 90       	pop	r12
    2d66:	bf 90       	pop	r11
    2d68:	af 90       	pop	r10
    2d6a:	08 95       	ret

00002d6c <main>:
static struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name); 
static uint8_t print_disk_info(const struct fat_fs_struct* fs);


int main()
{
    2d6c:	7f 92       	push	r7
    2d6e:	8f 92       	push	r8
    2d70:	9f 92       	push	r9
    2d72:	af 92       	push	r10
    2d74:	bf 92       	push	r11
    2d76:	cf 92       	push	r12
    2d78:	df 92       	push	r13
    2d7a:	ef 92       	push	r14
    2d7c:	ff 92       	push	r15
    2d7e:	0f 93       	push	r16
    2d80:	1f 93       	push	r17
    2d82:	cf 93       	push	r28
    2d84:	df 93       	push	r29
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	cf 5d       	subi	r28, 0xDF	; 223
    2d8c:	d1 09       	sbc	r29, r1
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    set_sleep_mode(SLEEP_MODE_IDLE);
    2d98:	83 b7       	in	r24, 0x33	; 51
    2d9a:	81 7f       	andi	r24, 0xF1	; 241
    2d9c:	83 bf       	out	0x33, r24	; 51
	//uart_init();
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
    2d9e:	87 e6       	ldi	r24, 0x67	; 103
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <uart_init>
	sei();
    2da6:	78 94       	sei
            //offset += 512;
        }
        fat_close_file(fd);*/


        char file1[] = "uSD_Verification.txt";
    2da8:	0f 2e       	mov	r0, r31
    2daa:	f5 e1       	ldi	r31, 0x15	; 21
    2dac:	9f 2e       	mov	r9, r31
    2dae:	f0 2d       	mov	r31, r0

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
        return 0;
    2db0:	71 2c       	mov	r7, r1
    2db2:	81 2c       	mov	r8, r1
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
	sei();

	 while(1)
    {
		uart_puts_p(PSTR("going into init\n"));
    2db4:	84 e5       	ldi	r24, 0x54	; 84
    2db6:	91 e0       	ldi	r25, 0x01	; 1
    2db8:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <uart_puts_p>
        /* setup sd card slot */
        if(!sd_raw_init())
    2dbc:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <sd_raw_init>
    2dc0:	81 11       	cpse	r24, r1
    2dc2:	04 c0       	rjmp	.+8      	; 0x2dcc <main+0x60>
        {
        	uart_puts_p(PSTR("MMC/SD initialization failed\n"));
    2dc4:	86 e3       	ldi	r24, 0x36	; 54
    2dc6:	91 e0       	ldi	r25, 0x01	; 1
    2dc8:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <uart_puts_p>
        }
        struct partition_struct* partition = partition_open(sd_raw_read,
    2dcc:	00 e0       	ldi	r16, 0x00	; 0
    2dce:	23 e3       	ldi	r18, 0x33	; 51
    2dd0:	3d e1       	ldi	r19, 0x1D	; 29
    2dd2:	49 ee       	ldi	r20, 0xE9	; 233
    2dd4:	5b e1       	ldi	r21, 0x1B	; 27
    2dd6:	69 e4       	ldi	r22, 0x49	; 73
    2dd8:	7b e1       	ldi	r23, 0x1B	; 27
    2dda:	86 e1       	ldi	r24, 0x16	; 22
    2ddc:	99 e1       	ldi	r25, 0x19	; 25
    2dde:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <partition_open>
    2de2:	6c 01       	movw	r12, r24
                                                            sd_raw_read_interval,
                                                            sd_raw_write,
                                                            sd_raw_write_interval,
                                                            0
                                                           );
        if(!partition)
    2de4:	89 2b       	or	r24, r25
    2de6:	91 f4       	brne	.+36     	; 0x2e0c <main+0xa0>
        {
            /* If the partition did not open, assume the storage device
             * is a "superfloppy", i.e. has no MBR.
             */
            partition = partition_open(sd_raw_read,
    2de8:	0f ef       	ldi	r16, 0xFF	; 255
    2dea:	23 e3       	ldi	r18, 0x33	; 51
    2dec:	3d e1       	ldi	r19, 0x1D	; 29
    2dee:	49 ee       	ldi	r20, 0xE9	; 233
    2df0:	5b e1       	ldi	r21, 0x1B	; 27
    2df2:	69 e4       	ldi	r22, 0x49	; 73
    2df4:	7b e1       	ldi	r23, 0x1B	; 27
    2df6:	86 e1       	ldi	r24, 0x16	; 22
    2df8:	99 e1       	ldi	r25, 0x19	; 25
    2dfa:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <partition_open>
    2dfe:	6c 01       	movw	r12, r24
                                       sd_raw_read_interval,
                                       sd_raw_write,
                                       sd_raw_write_interval,
                                       -1
                                      );
            if(!partition)
    2e00:	89 2b       	or	r24, r25
    2e02:	21 f4       	brne	.+8      	; 0x2e0c <main+0xa0>
            {
                uart_puts_p(PSTR("opening partition failed\n"));
    2e04:	8c e1       	ldi	r24, 0x1C	; 28
    2e06:	91 e0       	ldi	r25, 0x01	; 1
    2e08:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <uart_puts_p>
            }
        }

        /* open file system */
        struct fat_fs_struct* fs = fat_open(partition);
    2e0c:	c6 01       	movw	r24, r12
    2e0e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <fat_open>
    2e12:	5c 01       	movw	r10, r24
        if(!fs)
    2e14:	89 2b       	or	r24, r25
    2e16:	21 f4       	brne	.+8      	; 0x2e20 <main+0xb4>
        {
        	uart_puts_p(PSTR("opening filesystem failed\n"));
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	91 e0       	ldi	r25, 0x01	; 1
    2e1c:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <uart_puts_p>
        }

        /* open root directory */
        struct fat_dir_entry_struct directory;
        fat_get_dir_entry_of_path(fs, "/", &directory);
    2e20:	ae 01       	movw	r20, r28
    2e22:	4f 57       	subi	r20, 0x7F	; 127
    2e24:	5f 4f       	sbci	r21, 0xFF	; 255
    2e26:	6d e0       	ldi	r22, 0x0D	; 13
    2e28:	71 e0       	ldi	r23, 0x01	; 1
    2e2a:	c5 01       	movw	r24, r10
    2e2c:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <fat_get_dir_entry_of_path>

        struct fat_dir_struct* dd = fat_open_dir(fs, &directory);
    2e30:	be 01       	movw	r22, r28
    2e32:	6f 57       	subi	r22, 0x7F	; 127
    2e34:	7f 4f       	sbci	r23, 0xFF	; 255
    2e36:	c5 01       	movw	r24, r10
    2e38:	0e 94 1d 14 	call	0x283a	; 0x283a <fat_open_dir>
    2e3c:	8c 01       	movw	r16, r24
        if(!dd)
    2e3e:	89 2b       	or	r24, r25
    2e40:	21 f4       	brne	.+8      	; 0x2e4a <main+0xde>
        {
        	uart_puts_p(PSTR("opening root directory failed\n"));
    2e42:	82 ee       	ldi	r24, 0xE2	; 226
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <uart_puts_p>
            //offset += 512;
        }
        fat_close_file(fd);*/


        char file1[] = "uSD_Verification.txt";
    2e4a:	ef e0       	ldi	r30, 0x0F	; 15
    2e4c:	f1 e0       	ldi	r31, 0x01	; 1
    2e4e:	de 01       	movw	r26, r28
    2e50:	a9 53       	subi	r26, 0x39	; 57
    2e52:	bf 4f       	sbci	r27, 0xFF	; 255
    2e54:	89 2d       	mov	r24, r9
    2e56:	01 90       	ld	r0, Z+
    2e58:	0d 92       	st	X+, r0
    2e5a:	8a 95       	dec	r24
    2e5c:	e1 f7       	brne	.-8      	; 0x2e56 <main+0xea>

        struct fat_dir_entry_struct file_entry;
        if(!fat_create_file(dd, file1, &file_entry)){
    2e5e:	ae 01       	movw	r20, r28
    2e60:	40 5b       	subi	r20, 0xB0	; 176
    2e62:	5f 4f       	sbci	r21, 0xFF	; 255
    2e64:	be 01       	movw	r22, r28
    2e66:	69 53       	subi	r22, 0x39	; 57
    2e68:	7f 4f       	sbci	r23, 0xFF	; 255
    2e6a:	c8 01       	movw	r24, r16
    2e6c:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <fat_create_file>
    2e70:	81 11       	cpse	r24, r1
    2e72:	0c c0       	rjmp	.+24     	; 0x2e8c <main+0x120>
            uart_puts_p(PSTR("error creating file: "));
    2e74:	8c ec       	ldi	r24, 0xCC	; 204
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <uart_puts_p>
            uart_puts(file1);
    2e7c:	ce 01       	movw	r24, r28
    2e7e:	89 53       	subi	r24, 0x39	; 57
    2e80:	9f 4f       	sbci	r25, 0xFF	; 255
    2e82:	0e 94 76 1e 	call	0x3cec	; 0x3cec <uart_puts>
            uart_putc('\n');
    2e86:	8a e0       	ldi	r24, 0x0A	; 10
    2e88:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <uart_putc>
        }

		char file2[] = "uSD_Verification.txt";
    2e8c:	ef e0       	ldi	r30, 0x0F	; 15
    2e8e:	f1 e0       	ldi	r31, 0x01	; 1
    2e90:	de 01       	movw	r26, r28
    2e92:	ae 54       	subi	r26, 0x4E	; 78
    2e94:	bf 4f       	sbci	r27, 0xFF	; 255
    2e96:	89 2d       	mov	r24, r9
    2e98:	01 90       	ld	r0, Z+
    2e9a:	0d 92       	st	X+, r0
    2e9c:	8a 95       	dec	r24
    2e9e:	e1 f7       	brne	.-8      	; 0x2e98 <main+0x12c>
    2ea0:	16 c0       	rjmp	.+44     	; 0x2ece <main+0x162>

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    while(fat_read_dir(dd, dir_entry))
    {
        if(strcmp(dir_entry->long_name, name) == 0)
    2ea2:	be 01       	movw	r22, r28
    2ea4:	6e 54       	subi	r22, 0x4E	; 78
    2ea6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea8:	ce 01       	movw	r24, r28
    2eaa:	01 96       	adiw	r24, 0x01	; 1
    2eac:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <strcmp>
    2eb0:	89 2b       	or	r24, r25
    2eb2:	69 f4       	brne	.+26     	; 0x2ece <main+0x162>
        {
            fat_reset_dir(dd);
    2eb4:	c8 01       	movw	r24, r16
    2eb6:	0e 94 65 14 	call	0x28ca	; 0x28ca <fat_reset_dir>
{
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
        return 0;

    return fat_open_file(fs, &file_entry);
    2eba:	be 01       	movw	r22, r28
    2ebc:	6f 5f       	subi	r22, 0xFF	; 255
    2ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec0:	c5 01       	movw	r24, r10
    2ec2:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <fat_open_file>
    2ec6:	7c 01       	movw	r14, r24
            continue;
        }*/

        struct fat_file_struct* fd = open_file_in_dir(fs, dd, file2);

        if(fd == 0)
    2ec8:	89 2b       	or	r24, r25
    2eca:	71 f4       	brne	.+28     	; 0x2ee8 <main+0x17c>
    2ecc:	09 c0       	rjmp	.+18     	; 0x2ee0 <main+0x174>
    return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    while(fat_read_dir(dd, dir_entry))
    2ece:	be 01       	movw	r22, r28
    2ed0:	6f 5f       	subi	r22, 0xFF	; 255
    2ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed4:	c8 01       	movw	r24, r16
    2ed6:	0e 94 76 14 	call	0x28ec	; 0x28ec <fat_read_dir>
    2eda:	81 11       	cpse	r24, r1
    2edc:	e2 cf       	rjmp	.-60     	; 0x2ea2 <main+0x136>
    2ede:	56 c0       	rjmp	.+172    	; 0x2f8c <main+0x220>
        }*/

        struct fat_file_struct* fd = open_file_in_dir(fs, dd, file2);

        if(fd == 0)
            uart_puts_p(PSTR("open error\n"));
    2ee0:	80 ec       	ldi	r24, 0xC0	; 192
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <uart_puts_p>

        int32_t offset2 = 0;
    2ee8:	c4 52       	subi	r28, 0x24	; 36
    2eea:	df 4f       	sbci	r29, 0xFF	; 255
    2eec:	18 82       	st	Y, r1
    2eee:	19 82       	std	Y+1, r1	; 0x01
    2ef0:	1a 82       	std	Y+2, r1	; 0x02
    2ef2:	1b 82       	std	Y+3, r1	; 0x03
    2ef4:	cc 5d       	subi	r28, 0xDC	; 220
    2ef6:	d0 40       	sbci	r29, 0x00	; 0

        if(!fat_seek_file(fd, &offset2, FAT_SEEK_END))
    2ef8:	42 e0       	ldi	r20, 0x02	; 2
    2efa:	be 01       	movw	r22, r28
    2efc:	64 52       	subi	r22, 0x24	; 36
    2efe:	7f 4f       	sbci	r23, 0xFF	; 255
    2f00:	c7 01       	movw	r24, r14
    2f02:	0e 94 aa 13 	call	0x2754	; 0x2754 <fat_seek_file>
    2f06:	81 11       	cpse	r24, r1
    2f08:	10 c0       	rjmp	.+32     	; 0x2f2a <main+0x1be>
        {
            uart_puts_p(PSTR("error seeking on "));
    2f0a:	8e ea       	ldi	r24, 0xAE	; 174
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <uart_puts_p>
            uart_puts(file2);
    2f12:	ce 01       	movw	r24, r28
    2f14:	8e 54       	subi	r24, 0x4E	; 78
    2f16:	9f 4f       	sbci	r25, 0xFF	; 255
    2f18:	0e 94 76 1e 	call	0x3cec	; 0x3cec <uart_puts>
            uart_putc('\n');
    2f1c:	8a e0       	ldi	r24, 0x0A	; 10
    2f1e:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <uart_putc>

            fat_close_file(fd);
    2f22:	c7 01       	movw	r24, r14
    2f24:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <fat_close_file>
    2f28:	45 cf       	rjmp	.-374    	; 0x2db4 <main+0x48>
            continue;
        }
        char testwrite[] = "Device is capable of writing to the uSD connected to the SPI ports on the AVR.";
    2f2a:	8f e4       	ldi	r24, 0x4F	; 79
    2f2c:	e4 e2       	ldi	r30, 0x24	; 36
    2f2e:	f1 e0       	ldi	r31, 0x01	; 1
    2f30:	de 01       	movw	r26, r28
    2f32:	11 96       	adiw	r26, 0x01	; 1
    2f34:	01 90       	ld	r0, Z+
    2f36:	0d 92       	st	X+, r0
    2f38:	8a 95       	dec	r24
    2f3a:	e1 f7       	brne	.-8      	; 0x2f34 <main+0x1c8>
        //uart_puts(testwrite); uart_putc('\n');
        uart_puts_p(PSTR("writing happens now\n"));
    2f3c:	89 e9       	ldi	r24, 0x99	; 153
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <uart_puts_p>
        if(fat_write_file(fd, (uint8_t*) testwrite, (uint8_t)sizeof(testwrite)) != (uint8_t)sizeof(testwrite))
    2f44:	4f e4       	ldi	r20, 0x4F	; 79
    2f46:	50 e0       	ldi	r21, 0x00	; 0
    2f48:	be 01       	movw	r22, r28
    2f4a:	6f 5f       	subi	r22, 0xFF	; 255
    2f4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f4e:	c7 01       	movw	r24, r14
    2f50:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fat_write_file>
    2f54:	8f 34       	cpi	r24, 0x4F	; 79
    2f56:	91 05       	cpc	r25, r1
    2f58:	e1 f4       	brne	.+56     	; 0x2f92 <main+0x226>
            uart_puts_p(PSTR("error writing to file\n"));
            break;
        }


        fat_close_file(fd);
    2f5a:	c7 01       	movw	r24, r14
    2f5c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <fat_close_file>

        if(!sd_raw_sync())
    2f60:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <sd_raw_sync>
    2f64:	81 11       	cpse	r24, r1
    2f66:	04 c0       	rjmp	.+8      	; 0x2f70 <main+0x204>
                    uart_puts_p(PSTR("error syncing disk\n"));
    2f68:	8e e6       	ldi	r24, 0x6E	; 110
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <uart_puts_p>
		/* close directory */
		fat_close_dir(dd);
    2f70:	c8 01       	movw	r24, r16
    2f72:	0e 94 5f 14 	call	0x28be	; 0x28be <fat_close_dir>

		/* close file system */
		fat_close(fs);
    2f76:	c5 01       	movw	r24, r10
    2f78:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <fat_close>

		/* close partition */
		partition_close(partition);
    2f7c:	c6 01       	movw	r24, r12
    2f7e:	0e 94 94 18 	call	0x3128	; 0x3128 <partition_close>
		uart_puts_p(PSTR("done\n"));
    2f82:	88 e6       	ldi	r24, 0x68	; 104
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <uart_puts_p>
		while(1){
			continue;
		}
    2f8a:	ff cf       	rjmp	.-2      	; 0x2f8a <main+0x21e>

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
        return 0;
    2f8c:	e7 2c       	mov	r14, r7
    2f8e:	f8 2c       	mov	r15, r8
    2f90:	a7 cf       	rjmp	.-178    	; 0x2ee0 <main+0x174>
        char testwrite[] = "Device is capable of writing to the uSD connected to the SPI ports on the AVR.";
        //uart_puts(testwrite); uart_putc('\n');
        uart_puts_p(PSTR("writing happens now\n"));
        if(fat_write_file(fd, (uint8_t*) testwrite, (uint8_t)sizeof(testwrite)) != (uint8_t)sizeof(testwrite))
        {
            uart_puts_p(PSTR("error writing to file\n"));
    2f92:	82 e8       	ldi	r24, 0x82	; 130
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <uart_puts_p>


	}

	return 0;
}
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	c1 52       	subi	r28, 0x21	; 33
    2fa0:	df 4f       	sbci	r29, 0xFF	; 255
    2fa2:	0f b6       	in	r0, 0x3f	; 63
    2fa4:	f8 94       	cli
    2fa6:	de bf       	out	0x3e, r29	; 62
    2fa8:	0f be       	out	0x3f, r0	; 63
    2faa:	cd bf       	out	0x3d, r28	; 61
    2fac:	df 91       	pop	r29
    2fae:	cf 91       	pop	r28
    2fb0:	1f 91       	pop	r17
    2fb2:	0f 91       	pop	r16
    2fb4:	ff 90       	pop	r15
    2fb6:	ef 90       	pop	r14
    2fb8:	df 90       	pop	r13
    2fba:	cf 90       	pop	r12
    2fbc:	bf 90       	pop	r11
    2fbe:	af 90       	pop	r10
    2fc0:	9f 90       	pop	r9
    2fc2:	8f 90       	pop	r8
    2fc4:	7f 90       	pop	r7
    2fc6:	08 95       	ret

00002fc8 <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    2fc8:	6f 92       	push	r6
    2fca:	7f 92       	push	r7
    2fcc:	8f 92       	push	r8
    2fce:	9f 92       	push	r9
    2fd0:	af 92       	push	r10
    2fd2:	bf 92       	push	r11
    2fd4:	cf 92       	push	r12
    2fd6:	df 92       	push	r13
    2fd8:	ef 92       	push	r14
    2fda:	ff 92       	push	r15
    2fdc:	0f 93       	push	r16
    2fde:	1f 93       	push	r17
    2fe0:	cf 93       	push	r28
    2fe2:	df 93       	push	r29
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	60 97       	sbiw	r28, 0x10	; 16
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    2ff4:	00 97       	sbiw	r24, 0x00	; 0
    2ff6:	71 f1       	breq	.+92     	; 0x3054 <partition_open+0x8c>
    2ff8:	61 15       	cp	r22, r1
    2ffa:	71 05       	cpc	r23, r1
    2ffc:	71 f1       	breq	.+92     	; 0x305a <partition_open+0x92>
    2ffe:	04 30       	cpi	r16, 0x04	; 4
    3000:	7c f5       	brge	.+94     	; 0x3060 <partition_open+0x98>
        return 0;

    if(index >= 0)
    3002:	00 23       	and	r16, r16
    3004:	0c f4       	brge	.+2      	; 0x3008 <partition_open+0x40>
    3006:	75 c0       	rjmp	.+234    	; 0x30f2 <partition_open+0x12a>
    3008:	39 01       	movw	r6, r18
    300a:	4a 01       	movw	r8, r20
    300c:	5b 01       	movw	r10, r22
    300e:	6c 01       	movw	r12, r24
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    3010:	80 e1       	ldi	r24, 0x10	; 16
    3012:	08 02       	muls	r16, r24
    3014:	f0 01       	movw	r30, r0
    3016:	11 24       	eor	r1, r1
    3018:	e2 54       	subi	r30, 0x42	; 66
    301a:	fe 4f       	sbci	r31, 0xFE	; 254
    301c:	9f 2f       	mov	r25, r31
    301e:	99 0f       	add	r25, r25
    3020:	99 0b       	sbc	r25, r25
    3022:	68 94       	set
    3024:	ee 24       	eor	r14, r14
    3026:	e4 f8       	bld	r14, 4
    3028:	f1 2c       	mov	r15, r1
    302a:	8e 01       	movw	r16, r28
    302c:	0f 5f       	subi	r16, 0xFF	; 255
    302e:	1f 4f       	sbci	r17, 0xFF	; 255
    3030:	2e 2f       	mov	r18, r30
    3032:	3f 2f       	mov	r19, r31
    3034:	49 2f       	mov	r20, r25
    3036:	59 2f       	mov	r21, r25
    3038:	69 2f       	mov	r22, r25
    303a:	79 2f       	mov	r23, r25
    303c:	89 2f       	mov	r24, r25
    303e:	f6 01       	movw	r30, r12
    3040:	09 95       	icall
    3042:	88 23       	and	r24, r24
    3044:	81 f0       	breq	.+32     	; 0x3066 <partition_open+0x9e>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    3046:	8d 81       	ldd	r24, Y+5	; 0x05
    3048:	81 11       	cpse	r24, r1
    304a:	3a c0       	rjmp	.+116    	; 0x30c0 <partition_open+0xf8>
    304c:	0f c0       	rjmp	.+30     	; 0x306c <partition_open+0xa4>
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    304e:	87 e5       	ldi	r24, 0x57	; 87
    3050:	92 e0       	ldi	r25, 0x02	; 2
    else
    {
        new_partition->type = 0xff;
    }

    return new_partition;
    3052:	55 c0       	rjmp	.+170    	; 0x30fe <partition_open+0x136>
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
        return 0;
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	52 c0       	rjmp	.+164    	; 0x30fe <partition_open+0x136>
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	4f c0       	rjmp	.+158    	; 0x30fe <partition_open+0x136>
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	4c c0       	rjmp	.+152    	; 0x30fe <partition_open+0x136>

    if(index >= 0)
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
            return 0;
    3066:	80 e0       	ldi	r24, 0x00	; 0
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	49 c0       	rjmp	.+146    	; 0x30fe <partition_open+0x136>

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
            return 0;
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	46 c0       	rjmp	.+140    	; 0x30fe <partition_open+0x136>
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    3072:	07 e5       	ldi	r16, 0x57	; 87
    3074:	12 e0       	ldi	r17, 0x02	; 2
    3076:	81 e1       	ldi	r24, 0x11	; 17
    3078:	d8 01       	movw	r26, r16
    307a:	1d 92       	st	X+, r1
    307c:	8a 95       	dec	r24
    307e:	e9 f7       	brne	.-6      	; 0x307a <partition_open+0xb2>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    3080:	f8 01       	movw	r30, r16
    3082:	d1 82       	std	Z+1, r13	; 0x01
    3084:	c0 82       	st	Z, r12
    new_partition->device_read_interval = device_read_interval;
    3086:	b3 82       	std	Z+3, r11	; 0x03
    3088:	a2 82       	std	Z+2, r10	; 0x02
    new_partition->device_write = device_write;
    308a:	95 82       	std	Z+5, r9	; 0x05
    308c:	84 82       	std	Z+4, r8	; 0x04
    new_partition->device_write_interval = device_write_interval;
    308e:	77 82       	std	Z+7, r7	; 0x07
    3090:	66 82       	std	Z+6, r6	; 0x06

    if(index >= 0)
    {
        new_partition->type = buffer[4];
    3092:	8d 81       	ldd	r24, Y+5	; 0x05
    3094:	80 87       	std	Z+8, r24	; 0x08
        new_partition->offset = read32(&buffer[8]);
    3096:	ce 01       	movw	r24, r28
    3098:	09 96       	adiw	r24, 0x09	; 9
    309a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <read32>
    309e:	d8 01       	movw	r26, r16
    30a0:	19 96       	adiw	r26, 0x09	; 9
    30a2:	6d 93       	st	X+, r22
    30a4:	7d 93       	st	X+, r23
    30a6:	8d 93       	st	X+, r24
    30a8:	9c 93       	st	X, r25
    30aa:	1c 97       	sbiw	r26, 0x0c	; 12
        new_partition->length = read32(&buffer[12]);
    30ac:	ce 01       	movw	r24, r28
    30ae:	0d 96       	adiw	r24, 0x0d	; 13
    30b0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <read32>
    30b4:	f8 01       	movw	r30, r16
    30b6:	65 87       	std	Z+13, r22	; 0x0d
    30b8:	76 87       	std	Z+14, r23	; 0x0e
    30ba:	87 87       	std	Z+15, r24	; 0x0f
    30bc:	90 8b       	std	Z+16, r25	; 0x10
    30be:	c7 cf       	rjmp	.-114    	; 0x304e <partition_open+0x86>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    30c0:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <partition_handles+0x8>
    30c4:	88 23       	and	r24, r24
    30c6:	a9 f2       	breq	.-86     	; 0x3072 <partition_open+0xaa>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	18 c0       	rjmp	.+48     	; 0x30fe <partition_open+0x136>
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    30ce:	e7 e5       	ldi	r30, 0x57	; 87
    30d0:	f2 e0       	ldi	r31, 0x02	; 2
    30d2:	11 e1       	ldi	r17, 0x11	; 17
    30d4:	df 01       	movw	r26, r30
    30d6:	1d 92       	st	X+, r1
    30d8:	1a 95       	dec	r17
    30da:	e9 f7       	brne	.-6      	; 0x30d6 <partition_open+0x10e>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    30dc:	91 83       	std	Z+1, r25	; 0x01
    30de:	80 83       	st	Z, r24
    new_partition->device_read_interval = device_read_interval;
    30e0:	73 83       	std	Z+3, r23	; 0x03
    30e2:	62 83       	std	Z+2, r22	; 0x02
    new_partition->device_write = device_write;
    30e4:	55 83       	std	Z+5, r21	; 0x05
    30e6:	44 83       	std	Z+4, r20	; 0x04
    new_partition->device_write_interval = device_write_interval;
    30e8:	37 83       	std	Z+7, r19	; 0x07
    30ea:	26 83       	std	Z+6, r18	; 0x06
        new_partition->offset = read32(&buffer[8]);
        new_partition->length = read32(&buffer[12]);
    }
    else
    {
        new_partition->type = 0xff;
    30ec:	8f ef       	ldi	r24, 0xFF	; 255
    30ee:	80 87       	std	Z+8, r24	; 0x08
    30f0:	ae cf       	rjmp	.-164    	; 0x304e <partition_open+0x86>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    30f2:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <partition_handles+0x8>
    30f6:	ee 23       	and	r30, r30
    30f8:	51 f3       	breq	.-44     	; 0x30ce <partition_open+0x106>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
    30fe:	60 96       	adiw	r28, 0x10	; 16
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	df 91       	pop	r29
    310c:	cf 91       	pop	r28
    310e:	1f 91       	pop	r17
    3110:	0f 91       	pop	r16
    3112:	ff 90       	pop	r15
    3114:	ef 90       	pop	r14
    3116:	df 90       	pop	r13
    3118:	cf 90       	pop	r12
    311a:	bf 90       	pop	r11
    311c:	af 90       	pop	r10
    311e:	9f 90       	pop	r9
    3120:	8f 90       	pop	r8
    3122:	7f 90       	pop	r7
    3124:	6f 90       	pop	r6
    3126:	08 95       	ret

00003128 <partition_close>:
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
    3128:	00 97       	sbiw	r24, 0x00	; 0
    312a:	21 f0       	breq	.+8      	; 0x3134 <partition_close+0xc>

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
    312c:	fc 01       	movw	r30, r24
    312e:	10 86       	std	Z+8, r1	; 0x08
#endif

    return 1;
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	08 95       	ret
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
        return 0;
    3134:	80 e0       	ldi	r24, 0x00	; 0
#else
    partition->type = PARTITION_TYPE_FREE;
#endif

    return 1;
}
    3136:	08 95       	ret

00003138 <sd_raw_send_byte>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
    3138:	8e bd       	out	0x2e, r24	; 46
    313a:	0d b4       	in	r0, 0x2d	; 45
    313c:	07 fe       	sbrs	r0, 7
    313e:	fd cf       	rjmp	.-6      	; 0x313a <sd_raw_send_byte+0x2>
    3140:	8d b5       	in	r24, 0x2d	; 45
    3142:	8f 77       	andi	r24, 0x7F	; 127
    3144:	8d bd       	out	0x2d, r24	; 45
    3146:	08 95       	ret

00003148 <sd_raw_rec_byte>:
    3148:	8f ef       	ldi	r24, 0xFF	; 255
    314a:	8e bd       	out	0x2e, r24	; 46
    314c:	0d b4       	in	r0, 0x2d	; 45
    314e:	07 fe       	sbrs	r0, 7
    3150:	fd cf       	rjmp	.-6      	; 0x314c <sd_raw_rec_byte+0x4>
    3152:	8d b5       	in	r24, 0x2d	; 45
    3154:	8f 77       	andi	r24, 0x7F	; 127
    3156:	8d bd       	out	0x2d, r24	; 45
    3158:	8e b5       	in	r24, 0x2e	; 46
    315a:	08 95       	ret

0000315c <sd_raw_send_command>:
    315c:	ff 92       	push	r15
    315e:	0f 93       	push	r16
    3160:	1f 93       	push	r17
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29
    3166:	c8 2f       	mov	r28, r24
    3168:	d4 2f       	mov	r29, r20
    316a:	15 2f       	mov	r17, r21
    316c:	06 2f       	mov	r16, r22
    316e:	f7 2e       	mov	r15, r23
    3170:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>
    3174:	8c 2f       	mov	r24, r28
    3176:	80 64       	ori	r24, 0x40	; 64
    3178:	0e 94 9c 18 	call	0x3138	; 0x3138 <sd_raw_send_byte>
    317c:	8f 2d       	mov	r24, r15
    317e:	0e 94 9c 18 	call	0x3138	; 0x3138 <sd_raw_send_byte>
    3182:	80 2f       	mov	r24, r16
    3184:	0e 94 9c 18 	call	0x3138	; 0x3138 <sd_raw_send_byte>
    3188:	81 2f       	mov	r24, r17
    318a:	0e 94 9c 18 	call	0x3138	; 0x3138 <sd_raw_send_byte>
    318e:	8d 2f       	mov	r24, r29
    3190:	0e 94 9c 18 	call	0x3138	; 0x3138 <sd_raw_send_byte>
    3194:	cc 23       	and	r28, r28
    3196:	19 f0       	breq	.+6      	; 0x319e <sd_raw_send_command+0x42>
    3198:	c8 30       	cpi	r28, 0x08	; 8
    319a:	29 f0       	breq	.+10     	; 0x31a6 <sd_raw_send_command+0x4a>
    319c:	08 c0       	rjmp	.+16     	; 0x31ae <sd_raw_send_command+0x52>
    319e:	85 e9       	ldi	r24, 0x95	; 149
    31a0:	0e 94 9c 18 	call	0x3138	; 0x3138 <sd_raw_send_byte>
    31a4:	0f c0       	rjmp	.+30     	; 0x31c4 <sd_raw_send_command+0x68>
    31a6:	87 e8       	ldi	r24, 0x87	; 135
    31a8:	0e 94 9c 18 	call	0x3138	; 0x3138 <sd_raw_send_byte>
    31ac:	0b c0       	rjmp	.+22     	; 0x31c4 <sd_raw_send_command+0x68>
    31ae:	8f ef       	ldi	r24, 0xFF	; 255
    31b0:	0e 94 9c 18 	call	0x3138	; 0x3138 <sd_raw_send_byte>
    31b4:	07 c0       	rjmp	.+14     	; 0x31c4 <sd_raw_send_command+0x68>
    31b6:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>
    31ba:	8f 3f       	cpi	r24, 0xFF	; 255
    31bc:	29 f4       	brne	.+10     	; 0x31c8 <sd_raw_send_command+0x6c>
    31be:	c1 50       	subi	r28, 0x01	; 1
    31c0:	d1 f7       	brne	.-12     	; 0x31b6 <sd_raw_send_command+0x5a>
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <sd_raw_send_command+0x6c>
    31c4:	ca e0       	ldi	r28, 0x0A	; 10
    31c6:	f7 cf       	rjmp	.-18     	; 0x31b6 <sd_raw_send_command+0x5a>
    31c8:	df 91       	pop	r29
    31ca:	cf 91       	pop	r28
    31cc:	1f 91       	pop	r17
    31ce:	0f 91       	pop	r16
    31d0:	ff 90       	pop	r15
    31d2:	08 95       	ret

000031d4 <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
    31d4:	ef 92       	push	r14
    31d6:	ff 92       	push	r15
    31d8:	0f 93       	push	r16
    31da:	1f 93       	push	r17
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    31dc:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <raw_block_written>
    31e0:	81 11       	cpse	r24, r1
    31e2:	1e c0       	rjmp	.+60     	; 0x3220 <sd_raw_sync+0x4c>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    31e4:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <raw_block_address>
    31e8:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <raw_block_address+0x1>
    31ec:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <raw_block_address+0x2>
    31f0:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <raw_block_address+0x3>
    31f4:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <raw_block_address+0x4>
    31f8:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <raw_block_address+0x5>
    31fc:	e1 2c       	mov	r14, r1
    31fe:	68 94       	set
    3200:	ff 24       	eor	r15, r15
    3202:	f1 f8       	bld	r15, 1
    3204:	02 e7       	ldi	r16, 0x72	; 114
    3206:	12 e0       	ldi	r17, 0x02	; 2
    3208:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <raw_block_address+0x6>
    320c:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <raw_block_address+0x7>
    3210:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <sd_raw_write>
    3214:	88 23       	and	r24, r24
    3216:	29 f0       	breq	.+10     	; 0x3222 <sd_raw_sync+0x4e>
        return 0;
    raw_block_written = 1;
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <raw_block_written>
#endif
    return 1;
    321e:	01 c0       	rjmp	.+2      	; 0x3222 <sd_raw_sync+0x4e>
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
        return 1;
    3220:	81 e0       	ldi	r24, 0x01	; 1
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
        return 0;
    raw_block_written = 1;
#endif
    return 1;
}
    3222:	1f 91       	pop	r17
    3224:	0f 91       	pop	r16
    3226:	ff 90       	pop	r15
    3228:	ef 90       	pop	r14
    322a:	08 95       	ret

0000322c <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    322c:	2f 92       	push	r2
    322e:	3f 92       	push	r3
    3230:	4f 92       	push	r4
    3232:	5f 92       	push	r5
    3234:	6f 92       	push	r6
    3236:	7f 92       	push	r7
    3238:	8f 92       	push	r8
    323a:	9f 92       	push	r9
    323c:	af 92       	push	r10
    323e:	bf 92       	push	r11
    3240:	cf 92       	push	r12
    3242:	df 92       	push	r13
    3244:	ef 92       	push	r14
    3246:	ff 92       	push	r15
    3248:	0f 93       	push	r16
    324a:	1f 93       	push	r17
    324c:	cf 93       	push	r28
    324e:	df 93       	push	r29
    3250:	cd b7       	in	r28, 0x3d	; 61
    3252:	de b7       	in	r29, 0x3e	; 62
    3254:	6a 97       	sbiw	r28, 0x1a	; 26
    3256:	0f b6       	in	r0, 0x3f	; 63
    3258:	f8 94       	cli
    325a:	de bf       	out	0x3e, r29	; 62
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	cd bf       	out	0x3d, r28	; 61
    3260:	29 83       	std	Y+1, r18	; 0x01
    3262:	3a 83       	std	Y+2, r19	; 0x02
    3264:	4b 83       	std	Y+3, r20	; 0x03
    3266:	5c 83       	std	Y+4, r21	; 0x04
    3268:	6d 83       	std	Y+5, r22	; 0x05
    326a:	7e 83       	std	Y+6, r23	; 0x06
    326c:	8f 83       	std	Y+7, r24	; 0x07
    326e:	98 87       	std	Y+8, r25	; 0x08
    3270:	1c 8b       	std	Y+20, r17	; 0x14
    3272:	0b 8b       	std	Y+19, r16	; 0x13
    3274:	27 01       	movw	r4, r14
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    3276:	ef 28       	or	r14, r15
    3278:	09 f4       	brne	.+2      	; 0x327c <sd_raw_read+0x50>
    327a:	f8 c0       	rjmp	.+496    	; 0x346c <sd_raw_read+0x240>
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
        read_length = 512 - block_offset; /* read up to block border */
    327c:	61 2c       	mov	r6, r1
    327e:	68 94       	set
    3280:	77 24       	eor	r7, r7
    3282:	71 f8       	bld	r7, 1
    3284:	0f 2e       	mov	r0, r31
    3286:	f2 e7       	ldi	r31, 0x72	; 114
    3288:	2f 2e       	mov	r2, r31
    328a:	f4 e0       	ldi	r31, 0x04	; 4
    328c:	3f 2e       	mov	r3, r31
    328e:	f0 2d       	mov	r31, r0
    3290:	7a 8e       	std	Y+26, r7	; 0x1a
    3292:	69 8e       	std	Y+25, r6	; 0x19
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    3294:	89 80       	ldd	r8, Y+1	; 0x01
    3296:	9a 80       	ldd	r9, Y+2	; 0x02
    3298:	21 e0       	ldi	r18, 0x01	; 1
    329a:	92 22       	and	r9, r18
        block_address = offset - block_offset;
    329c:	94 01       	movw	r18, r8
    329e:	40 e0       	ldi	r20, 0x00	; 0
    32a0:	50 e0       	ldi	r21, 0x00	; 0
    32a2:	60 e0       	ldi	r22, 0x00	; 0
    32a4:	70 e0       	ldi	r23, 0x00	; 0
    32a6:	cb 01       	movw	r24, r22
    32a8:	89 86       	std	Y+9, r8	; 0x09
    32aa:	3a 87       	std	Y+10, r19	; 0x0a
    32ac:	4b 87       	std	Y+11, r20	; 0x0b
    32ae:	5c 87       	std	Y+12, r21	; 0x0c
    32b0:	6d 87       	std	Y+13, r22	; 0x0d
    32b2:	7e 87       	std	Y+14, r23	; 0x0e
    32b4:	8f 87       	std	Y+15, r24	; 0x0f
    32b6:	98 8b       	std	Y+16, r25	; 0x10
    32b8:	29 81       	ldd	r18, Y+1	; 0x01
    32ba:	3a 81       	ldd	r19, Y+2	; 0x02
    32bc:	4b 81       	ldd	r20, Y+3	; 0x03
    32be:	5c 81       	ldd	r21, Y+4	; 0x04
    32c0:	6d 81       	ldd	r22, Y+5	; 0x05
    32c2:	7e 81       	ldd	r23, Y+6	; 0x06
    32c4:	8f 81       	ldd	r24, Y+7	; 0x07
    32c6:	98 85       	ldd	r25, Y+8	; 0x08
    32c8:	a9 84       	ldd	r10, Y+9	; 0x09
    32ca:	ba 84       	ldd	r11, Y+10	; 0x0a
    32cc:	c1 2c       	mov	r12, r1
    32ce:	d1 2c       	mov	r13, r1
    32d0:	e1 2c       	mov	r14, r1
    32d2:	f1 2c       	mov	r15, r1
    32d4:	00 e0       	ldi	r16, 0x00	; 0
    32d6:	10 e0       	ldi	r17, 0x00	; 0
    32d8:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__subdi3>
    32dc:	29 8b       	std	Y+17, r18	; 0x11
    32de:	3a 8b       	std	Y+18, r19	; 0x12
    32e0:	64 2e       	mov	r6, r20
    32e2:	75 2e       	mov	r7, r21
    32e4:	6d 8b       	std	Y+21, r22	; 0x15
    32e6:	7e 8b       	std	Y+22, r23	; 0x16
    32e8:	8f 8b       	std	Y+23, r24	; 0x17
    32ea:	98 8f       	std	Y+24, r25	; 0x18
    32ec:	49 8d       	ldd	r20, Y+25	; 0x19
    32ee:	5a 8d       	ldd	r21, Y+26	; 0x1a
    32f0:	48 19       	sub	r20, r8
    32f2:	59 09       	sbc	r21, r9
    32f4:	5a 87       	std	Y+10, r21	; 0x0a
    32f6:	49 87       	std	Y+9, r20	; 0x09
    32f8:	44 16       	cp	r4, r20
    32fa:	55 06       	cpc	r5, r21
    32fc:	10 f4       	brcc	.+4      	; 0x3302 <sd_raw_read+0xd6>
    32fe:	5a 86       	std	Y+10, r5	; 0x0a
    3300:	49 86       	std	Y+9, r4	; 0x09
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    3302:	a0 90 6a 02 	lds	r10, 0x026A	; 0x80026a <raw_block_address>
    3306:	b0 90 6b 02 	lds	r11, 0x026B	; 0x80026b <raw_block_address+0x1>
    330a:	c0 90 6c 02 	lds	r12, 0x026C	; 0x80026c <raw_block_address+0x2>
    330e:	d0 90 6d 02 	lds	r13, 0x026D	; 0x80026d <raw_block_address+0x3>
    3312:	e0 90 6e 02 	lds	r14, 0x026E	; 0x80026e <raw_block_address+0x4>
    3316:	f0 90 6f 02 	lds	r15, 0x026F	; 0x80026f <raw_block_address+0x5>
    331a:	00 91 70 02 	lds	r16, 0x0270	; 0x800270 <raw_block_address+0x6>
    331e:	10 91 71 02 	lds	r17, 0x0271	; 0x800271 <raw_block_address+0x7>
    3322:	29 89       	ldd	r18, Y+17	; 0x11
    3324:	3a 89       	ldd	r19, Y+18	; 0x12
    3326:	46 2d       	mov	r20, r6
    3328:	57 2d       	mov	r21, r7
    332a:	6d 89       	ldd	r22, Y+21	; 0x15
    332c:	7e 89       	ldd	r23, Y+22	; 0x16
    332e:	8f 89       	ldd	r24, Y+23	; 0x17
    3330:	98 8d       	ldd	r25, Y+24	; 0x18
    3332:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__cmpdi2>
    3336:	09 f4       	brne	.+2      	; 0x333a <sd_raw_read+0x10e>
    3338:	63 c0       	rjmp	.+198    	; 0x3400 <sd_raw_read+0x1d4>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    333a:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <sd_raw_sync>
    333e:	88 23       	and	r24, r24
    3340:	09 f4       	brne	.+2      	; 0x3344 <sd_raw_read+0x118>
    3342:	95 c0       	rjmp	.+298    	; 0x346e <sd_raw_read+0x242>
                return 0;
#endif

            /* address card */
            select_card();
    3344:	2a 98       	cbi	0x05, 2	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    3346:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <sd_raw_card_type>
    334a:	82 ff       	sbrs	r24, 2
    334c:	10 c0       	rjmp	.+32     	; 0x336e <sd_raw_read+0x142>
    334e:	29 89       	ldd	r18, Y+17	; 0x11
    3350:	3a 89       	ldd	r19, Y+18	; 0x12
    3352:	46 2d       	mov	r20, r6
    3354:	57 2d       	mov	r21, r7
    3356:	6d 89       	ldd	r22, Y+21	; 0x15
    3358:	7e 89       	ldd	r23, Y+22	; 0x16
    335a:	8f 89       	ldd	r24, Y+23	; 0x17
    335c:	98 8d       	ldd	r25, Y+24	; 0x18
    335e:	09 e0       	ldi	r16, 0x09	; 9
    3360:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__lshrdi3>
    3364:	64 2f       	mov	r22, r20
    3366:	75 2f       	mov	r23, r21
    3368:	42 2f       	mov	r20, r18
    336a:	53 2f       	mov	r21, r19
    336c:	04 c0       	rjmp	.+8      	; 0x3376 <sd_raw_read+0x14a>
    336e:	49 89       	ldd	r20, Y+17	; 0x11
    3370:	5a 89       	ldd	r21, Y+18	; 0x12
    3372:	66 2d       	mov	r22, r6
    3374:	77 2d       	mov	r23, r7
    3376:	81 e1       	ldi	r24, 0x11	; 17
    3378:	0e 94 ae 18 	call	0x315c	; 0x315c <sd_raw_send_command>
    337c:	88 23       	and	r24, r24
    337e:	19 f0       	breq	.+6      	; 0x3386 <sd_raw_read+0x15a>
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
#endif
            {
                unselect_card();
    3380:	2a 9a       	sbi	0x05, 2	; 5
                return 0;
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	74 c0       	rjmp	.+232    	; 0x346e <sd_raw_read+0x242>
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    3386:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>
    338a:	8e 3f       	cpi	r24, 0xFE	; 254
    338c:	e1 f7       	brne	.-8      	; 0x3386 <sd_raw_read+0x15a>
    338e:	02 e7       	ldi	r16, 0x72	; 114
    3390:	12 e0       	ldi	r17, 0x02	; 2
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    3392:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>
    3396:	f8 01       	movw	r30, r16
    3398:	81 93       	st	Z+, r24
    339a:	8f 01       	movw	r16, r30
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    339c:	e2 15       	cp	r30, r2
    339e:	f3 05       	cpc	r31, r3
    33a0:	c1 f7       	brne	.-16     	; 0x3392 <sd_raw_read+0x166>
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;
    33a2:	f9 89       	ldd	r31, Y+17	; 0x11
    33a4:	f0 93 6a 02 	sts	0x026A, r31	; 0x80026a <raw_block_address>
    33a8:	2a 89       	ldd	r18, Y+18	; 0x12
    33aa:	20 93 6b 02 	sts	0x026B, r18	; 0x80026b <raw_block_address+0x1>
    33ae:	60 92 6c 02 	sts	0x026C, r6	; 0x80026c <raw_block_address+0x2>
    33b2:	70 92 6d 02 	sts	0x026D, r7	; 0x80026d <raw_block_address+0x3>
    33b6:	3d 89       	ldd	r19, Y+21	; 0x15
    33b8:	30 93 6e 02 	sts	0x026E, r19	; 0x80026e <raw_block_address+0x4>
    33bc:	4e 89       	ldd	r20, Y+22	; 0x16
    33be:	40 93 6f 02 	sts	0x026F, r20	; 0x80026f <raw_block_address+0x5>
    33c2:	5f 89       	ldd	r21, Y+23	; 0x17
    33c4:	50 93 70 02 	sts	0x0270, r21	; 0x800270 <raw_block_address+0x6>
    33c8:	68 8d       	ldd	r22, Y+24	; 0x18
    33ca:	60 93 71 02 	sts	0x0271, r22	; 0x800271 <raw_block_address+0x7>

            memcpy(buffer, raw_block + block_offset, read_length);
    33ce:	b4 01       	movw	r22, r8
    33d0:	6e 58       	subi	r22, 0x8E	; 142
    33d2:	7d 4f       	sbci	r23, 0xFD	; 253
    33d4:	49 85       	ldd	r20, Y+9	; 0x09
    33d6:	5a 85       	ldd	r21, Y+10	; 0x0a
    33d8:	8b 89       	ldd	r24, Y+19	; 0x13
    33da:	9c 89       	ldd	r25, Y+20	; 0x14
    33dc:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <memcpy>
            buffer += read_length;
    33e0:	8b 89       	ldd	r24, Y+19	; 0x13
    33e2:	9c 89       	ldd	r25, Y+20	; 0x14
    33e4:	e9 85       	ldd	r30, Y+9	; 0x09
    33e6:	fa 85       	ldd	r31, Y+10	; 0x0a
    33e8:	8e 0f       	add	r24, r30
    33ea:	9f 1f       	adc	r25, r31
    33ec:	9c 8b       	std	Y+20, r25	; 0x14
    33ee:	8b 8b       	std	Y+19, r24	; 0x13
#endif
            
            /* read crc16 */
            sd_raw_rec_byte();
    33f0:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>
            sd_raw_rec_byte();
    33f4:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>
            
            /* deaddress card */
            unselect_card();
    33f8:	2a 9a       	sbi	0x05, 2	; 5

            /* let card some time to finish */
            sd_raw_rec_byte();
    33fa:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>
    33fe:	11 c0       	rjmp	.+34     	; 0x3422 <sd_raw_read+0x1f6>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    3400:	b4 01       	movw	r22, r8
    3402:	6e 58       	subi	r22, 0x8E	; 142
    3404:	7d 4f       	sbci	r23, 0xFD	; 253
    3406:	49 85       	ldd	r20, Y+9	; 0x09
    3408:	5a 85       	ldd	r21, Y+10	; 0x0a
    340a:	8b 89       	ldd	r24, Y+19	; 0x13
    340c:	9c 89       	ldd	r25, Y+20	; 0x14
    340e:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <memcpy>
            buffer += read_length;
    3412:	2b 89       	ldd	r18, Y+19	; 0x13
    3414:	3c 89       	ldd	r19, Y+20	; 0x14
    3416:	49 85       	ldd	r20, Y+9	; 0x09
    3418:	5a 85       	ldd	r21, Y+10	; 0x0a
    341a:	24 0f       	add	r18, r20
    341c:	35 1f       	adc	r19, r21
    341e:	3c 8b       	std	Y+20, r19	; 0x14
    3420:	2b 8b       	std	Y+19, r18	; 0x13
        }
#endif

        length -= read_length;
    3422:	69 85       	ldd	r22, Y+9	; 0x09
    3424:	7a 85       	ldd	r23, Y+10	; 0x0a
    3426:	46 1a       	sub	r4, r22
    3428:	57 0a       	sbc	r5, r23
        offset += read_length;
    342a:	4b 01       	movw	r8, r22
    342c:	26 2f       	mov	r18, r22
    342e:	39 2d       	mov	r19, r9
    3430:	40 e0       	ldi	r20, 0x00	; 0
    3432:	50 e0       	ldi	r21, 0x00	; 0
    3434:	60 e0       	ldi	r22, 0x00	; 0
    3436:	70 e0       	ldi	r23, 0x00	; 0
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	a9 80       	ldd	r10, Y+1	; 0x01
    343e:	ba 80       	ldd	r11, Y+2	; 0x02
    3440:	cb 80       	ldd	r12, Y+3	; 0x03
    3442:	dc 80       	ldd	r13, Y+4	; 0x04
    3444:	ed 80       	ldd	r14, Y+5	; 0x05
    3446:	fe 80       	ldd	r15, Y+6	; 0x06
    3448:	0f 81       	ldd	r16, Y+7	; 0x07
    344a:	18 85       	ldd	r17, Y+8	; 0x08
    344c:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
    3450:	29 83       	std	Y+1, r18	; 0x01
    3452:	3a 83       	std	Y+2, r19	; 0x02
    3454:	4b 83       	std	Y+3, r20	; 0x03
    3456:	5c 83       	std	Y+4, r21	; 0x04
    3458:	6d 83       	std	Y+5, r22	; 0x05
    345a:	7e 83       	std	Y+6, r23	; 0x06
    345c:	8f 83       	std	Y+7, r24	; 0x07
    345e:	98 87       	std	Y+8, r25	; 0x08
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    3460:	41 14       	cp	r4, r1
    3462:	51 04       	cpc	r5, r1
    3464:	09 f0       	breq	.+2      	; 0x3468 <sd_raw_read+0x23c>
    3466:	16 cf       	rjmp	.-468    	; 0x3294 <sd_raw_read+0x68>

        length -= read_length;
        offset += read_length;
    }

    return 1;
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	01 c0       	rjmp	.+2      	; 0x346e <sd_raw_read+0x242>
    346c:	81 e0       	ldi	r24, 0x01	; 1
}
    346e:	6a 96       	adiw	r28, 0x1a	; 26
    3470:	0f b6       	in	r0, 0x3f	; 63
    3472:	f8 94       	cli
    3474:	de bf       	out	0x3e, r29	; 62
    3476:	0f be       	out	0x3f, r0	; 63
    3478:	cd bf       	out	0x3d, r28	; 61
    347a:	df 91       	pop	r29
    347c:	cf 91       	pop	r28
    347e:	1f 91       	pop	r17
    3480:	0f 91       	pop	r16
    3482:	ff 90       	pop	r15
    3484:	ef 90       	pop	r14
    3486:	df 90       	pop	r13
    3488:	cf 90       	pop	r12
    348a:	bf 90       	pop	r11
    348c:	af 90       	pop	r10
    348e:	9f 90       	pop	r9
    3490:	8f 90       	pop	r8
    3492:	7f 90       	pop	r7
    3494:	6f 90       	pop	r6
    3496:	5f 90       	pop	r5
    3498:	4f 90       	pop	r4
    349a:	3f 90       	pop	r3
    349c:	2f 90       	pop	r2
    349e:	08 95       	ret

000034a0 <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    34a0:	9f 92       	push	r9
    34a2:	af 92       	push	r10
    34a4:	bf 92       	push	r11
    34a6:	cf 92       	push	r12
    34a8:	df 92       	push	r13
    34aa:	ef 92       	push	r14
    34ac:	ff 92       	push	r15
    34ae:	0f 93       	push	r16
    34b0:	1f 93       	push	r17
    34b2:	cf 93       	push	r28
    34b4:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    34b6:	23 9a       	sbi	0x04, 3	; 4
    configure_pin_sck();
    34b8:	25 9a       	sbi	0x04, 5	; 4
    configure_pin_ss();
    34ba:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_miso();
    34bc:	24 98       	cbi	0x04, 4	; 4

    unselect_card();
    34be:	2a 9a       	sbi	0x05, 2	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    34c0:	83 e5       	ldi	r24, 0x53	; 83
    34c2:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    34c4:	8d b5       	in	r24, 0x2d	; 45
    34c6:	8e 7f       	andi	r24, 0xFE	; 254
    34c8:	8d bd       	out	0x2d, r24	; 45
	
    /* initialization procedure */
    sd_raw_card_type = 0;
    34ca:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <sd_raw_card_type>
    34ce:	1a e0       	ldi	r17, 0x0A	; 10

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    {
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    34d0:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>
    34d4:	11 50       	subi	r17, 0x01	; 1
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    34d6:	e1 f7       	brne	.-8      	; 0x34d0 <sd_raw_init+0x30>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    34d8:	2a 98       	cbi	0x05, 2	; 5
    34da:	c0 e0       	ldi	r28, 0x00	; 0
    34dc:	d2 e0       	ldi	r29, 0x02	; 2

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    34de:	40 e0       	ldi	r20, 0x00	; 0
    34e0:	50 e0       	ldi	r21, 0x00	; 0
    34e2:	ba 01       	movw	r22, r20
    34e4:	80 e0       	ldi	r24, 0x00	; 0
    34e6:	0e 94 ae 18 	call	0x315c	; 0x315c <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
    34ea:	81 30       	cpi	r24, 0x01	; 1
    34ec:	29 f0       	breq	.+10     	; 0x34f8 <sd_raw_init+0x58>
    34ee:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x1ff)
    34f0:	b1 f7       	brne	.-20     	; 0x34de <sd_raw_init+0x3e>
        {
            unselect_card();
    34f2:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    34f4:	01 2f       	mov	r16, r17
    34f6:	c0 c0       	rjmp	.+384    	; 0x3678 <sd_raw_init+0x1d8>
        }
    }

#if SD_RAW_SDHC
    /* check for version of SD card specification */
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    34f8:	4a ea       	ldi	r20, 0xAA	; 170
    34fa:	51 e0       	ldi	r21, 0x01	; 1
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	70 e0       	ldi	r23, 0x00	; 0
    3500:	88 e0       	ldi	r24, 0x08	; 8
    3502:	0e 94 ae 18 	call	0x315c	; 0x315c <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
    3506:	c8 2f       	mov	r28, r24
    3508:	c4 70       	andi	r28, 0x04	; 4
    350a:	82 fd       	sbrc	r24, 2
    350c:	1d c0       	rjmp	.+58     	; 0x3548 <sd_raw_init+0xa8>
    {
        sd_raw_rec_byte();
    350e:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    3512:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>
        if((sd_raw_rec_byte() & 0x01) == 0)
    3516:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>
    351a:	08 2f       	mov	r16, r24
    351c:	01 70       	andi	r16, 0x01	; 1
    351e:	80 ff       	sbrs	r24, 0
    3520:	ab c0       	rjmp	.+342    	; 0x3678 <sd_raw_init+0x1d8>
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
    3522:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>
    3526:	8a 3a       	cpi	r24, 0xAA	; 170
    3528:	09 f0       	breq	.+2      	; 0x352c <sd_raw_init+0x8c>
    352a:	a5 c0       	rjmp	.+330    	; 0x3676 <sd_raw_init+0x1d6>
            return 0; /* wrong test pattern */

        /* card conforms to SD 2 card specification */
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
    352c:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <sd_raw_card_type>
    3530:	82 60       	ori	r24, 0x02	; 2
    3532:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <sd_raw_card_type>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    3536:	c0 e0       	ldi	r28, 0x00	; 0
    3538:	d0 e8       	ldi	r29, 0x80	; 128
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
    353a:	91 2c       	mov	r9, r1
    353c:	a1 2c       	mov	r10, r1
    353e:	b1 2c       	mov	r11, r1
    3540:	68 94       	set
    3542:	cc 24       	eor	r12, r12
    3544:	c6 f8       	bld	r12, 6
    3546:	14 c0       	rjmp	.+40     	; 0x3570 <sd_raw_init+0xd0>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    3548:	40 e0       	ldi	r20, 0x00	; 0
    354a:	50 e0       	ldi	r21, 0x00	; 0
    354c:	ba 01       	movw	r22, r20
    354e:	87 e3       	ldi	r24, 0x37	; 55
    3550:	0e 94 ae 18 	call	0x315c	; 0x315c <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    3554:	40 e0       	ldi	r20, 0x00	; 0
    3556:	50 e0       	ldi	r21, 0x00	; 0
    3558:	ba 01       	movw	r22, r20
    355a:	89 e2       	ldi	r24, 0x29	; 41
    355c:	0e 94 ae 18 	call	0x315c	; 0x315c <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    3560:	82 fd       	sbrc	r24, 2
    3562:	e9 cf       	rjmp	.-46     	; 0x3536 <sd_raw_init+0x96>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    3564:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <sd_raw_card_type>
    3568:	81 60       	ori	r24, 0x01	; 1
    356a:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <sd_raw_card_type>
    356e:	e3 cf       	rjmp	.-58     	; 0x3536 <sd_raw_init+0x96>
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    3570:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <sd_raw_card_type>
    3574:	98 2f       	mov	r25, r24
    3576:	93 70       	andi	r25, 0x03	; 3
    3578:	c9 f0       	breq	.+50     	; 0x35ac <sd_raw_init+0x10c>
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    357a:	81 ff       	sbrs	r24, 1
    357c:	05 c0       	rjmp	.+10     	; 0x3588 <sd_raw_init+0xe8>
                arg = 0x40000000;
    357e:	d9 2c       	mov	r13, r9
    3580:	ea 2c       	mov	r14, r10
    3582:	fb 2c       	mov	r15, r11
    3584:	0c 2d       	mov	r16, r12
    3586:	04 c0       	rjmp	.+8      	; 0x3590 <sd_raw_init+0xf0>
    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
        {
            uint32_t arg = 0;
    3588:	d1 2c       	mov	r13, r1
    358a:	e1 2c       	mov	r14, r1
    358c:	f1 2c       	mov	r15, r1
    358e:	00 e0       	ldi	r16, 0x00	; 0
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    3590:	40 e0       	ldi	r20, 0x00	; 0
    3592:	50 e0       	ldi	r21, 0x00	; 0
    3594:	ba 01       	movw	r22, r20
    3596:	87 e3       	ldi	r24, 0x37	; 55
    3598:	0e 94 ae 18 	call	0x315c	; 0x315c <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    359c:	4d 2d       	mov	r20, r13
    359e:	5e 2d       	mov	r21, r14
    35a0:	6f 2d       	mov	r22, r15
    35a2:	70 2f       	mov	r23, r16
    35a4:	89 e2       	ldi	r24, 0x29	; 41
    35a6:	0e 94 ae 18 	call	0x315c	; 0x315c <sd_raw_send_command>
    35aa:	06 c0       	rjmp	.+12     	; 0x35b8 <sd_raw_init+0x118>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    35ac:	40 e0       	ldi	r20, 0x00	; 0
    35ae:	50 e0       	ldi	r21, 0x00	; 0
    35b0:	ba 01       	movw	r22, r20
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	0e 94 ae 18 	call	0x315c	; 0x315c <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    35b8:	08 2f       	mov	r16, r24
    35ba:	01 70       	andi	r16, 0x01	; 1
    35bc:	80 ff       	sbrs	r24, 0
    35be:	05 c0       	rjmp	.+10     	; 0x35ca <sd_raw_init+0x12a>
    35c0:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x7fff)
    35c2:	b1 f6       	brne	.-84     	; 0x3570 <sd_raw_init+0xd0>
        {
            unselect_card();
    35c4:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    35c6:	01 2f       	mov	r16, r17
    35c8:	57 c0       	rjmp	.+174    	; 0x3678 <sd_raw_init+0x1d8>
        }
    }

#if SD_RAW_SDHC
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    35ca:	c0 91 68 02 	lds	r28, 0x0268	; 0x800268 <sd_raw_card_type>
    35ce:	c1 ff       	sbrs	r28, 1
    35d0:	17 c0       	rjmp	.+46     	; 0x3600 <sd_raw_init+0x160>
    {
        if(sd_raw_send_command(CMD_READ_OCR, 0))
    35d2:	40 e0       	ldi	r20, 0x00	; 0
    35d4:	50 e0       	ldi	r21, 0x00	; 0
    35d6:	ba 01       	movw	r22, r20
    35d8:	8a e3       	ldi	r24, 0x3A	; 58
    35da:	0e 94 ae 18 	call	0x315c	; 0x315c <sd_raw_send_command>
    35de:	88 23       	and	r24, r24
    35e0:	11 f0       	breq	.+4      	; 0x35e6 <sd_raw_init+0x146>
        {
            unselect_card();
    35e2:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    35e4:	49 c0       	rjmp	.+146    	; 0x3678 <sd_raw_init+0x1d8>
        }

        if(sd_raw_rec_byte() & 0x40)
    35e6:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>
    35ea:	86 ff       	sbrs	r24, 6
    35ec:	03 c0       	rjmp	.+6      	; 0x35f4 <sd_raw_init+0x154>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
    35ee:	c4 60       	ori	r28, 0x04	; 4
    35f0:	c0 93 68 02 	sts	0x0268, r28	; 0x800268 <sd_raw_card_type>

        sd_raw_rec_byte();
    35f4:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    35f8:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    35fc:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    3600:	40 e0       	ldi	r20, 0x00	; 0
    3602:	52 e0       	ldi	r21, 0x02	; 2
    3604:	60 e0       	ldi	r22, 0x00	; 0
    3606:	70 e0       	ldi	r23, 0x00	; 0
    3608:	80 e1       	ldi	r24, 0x10	; 16
    360a:	0e 94 ae 18 	call	0x315c	; 0x315c <sd_raw_send_command>
    360e:	88 23       	and	r24, r24
    3610:	11 f0       	breq	.+4      	; 0x3616 <sd_raw_init+0x176>
    {
        unselect_card();
    3612:	2a 9a       	sbi	0x05, 2	; 5
        return 0;
    3614:	31 c0       	rjmp	.+98     	; 0x3678 <sd_raw_init+0x1d8>
    }

    /* deaddress card */
    unselect_card();
    3616:	2a 9a       	sbi	0x05, 2	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    3618:	8c b5       	in	r24, 0x2c	; 44
    361a:	8c 7f       	andi	r24, 0xFC	; 252
    361c:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    361e:	8d b5       	in	r24, 0x2d	; 45
    3620:	81 60       	ori	r24, 0x01	; 1
    3622:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    3624:	8f ef       	ldi	r24, 0xFF	; 255
    3626:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <raw_block_address>
    362a:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <raw_block_address+0x1>
    362e:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <raw_block_address+0x2>
    3632:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <raw_block_address+0x3>
    3636:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <raw_block_address+0x4>
    363a:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <raw_block_address+0x5>
    363e:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <raw_block_address+0x6>
    3642:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <raw_block_address+0x7>
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <raw_block_written>
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    364c:	e1 2c       	mov	r14, r1
    364e:	68 94       	set
    3650:	ff 24       	eor	r15, r15
    3652:	f1 f8       	bld	r15, 1
    3654:	02 e7       	ldi	r16, 0x72	; 114
    3656:	12 e0       	ldi	r17, 0x02	; 2
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	40 e0       	ldi	r20, 0x00	; 0
    365e:	50 e0       	ldi	r21, 0x00	; 0
    3660:	60 e0       	ldi	r22, 0x00	; 0
    3662:	70 e0       	ldi	r23, 0x00	; 0
    3664:	80 e0       	ldi	r24, 0x00	; 0
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	0e 94 16 19 	call	0x322c	; 0x322c <sd_raw_read>
    366c:	01 e0       	ldi	r16, 0x01	; 1
    366e:	81 11       	cpse	r24, r1
    3670:	03 c0       	rjmp	.+6      	; 0x3678 <sd_raw_init+0x1d8>
    3672:	00 e0       	ldi	r16, 0x00	; 0
    3674:	01 c0       	rjmp	.+2      	; 0x3678 <sd_raw_init+0x1d8>
        sd_raw_rec_byte();
        sd_raw_rec_byte();
        if((sd_raw_rec_byte() & 0x01) == 0)
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
            return 0; /* wrong test pattern */
    3676:	0c 2f       	mov	r16, r28
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
        return 0;
#endif

    return 1;
}
    3678:	80 2f       	mov	r24, r16
    367a:	df 91       	pop	r29
    367c:	cf 91       	pop	r28
    367e:	1f 91       	pop	r17
    3680:	0f 91       	pop	r16
    3682:	ff 90       	pop	r15
    3684:	ef 90       	pop	r14
    3686:	df 90       	pop	r13
    3688:	cf 90       	pop	r12
    368a:	bf 90       	pop	r11
    368c:	af 90       	pop	r10
    368e:	9f 90       	pop	r9
    3690:	08 95       	ret

00003692 <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    3692:	2f 92       	push	r2
    3694:	3f 92       	push	r3
    3696:	4f 92       	push	r4
    3698:	5f 92       	push	r5
    369a:	6f 92       	push	r6
    369c:	7f 92       	push	r7
    369e:	8f 92       	push	r8
    36a0:	9f 92       	push	r9
    36a2:	af 92       	push	r10
    36a4:	bf 92       	push	r11
    36a6:	cf 92       	push	r12
    36a8:	df 92       	push	r13
    36aa:	ef 92       	push	r14
    36ac:	ff 92       	push	r15
    36ae:	0f 93       	push	r16
    36b0:	1f 93       	push	r17
    36b2:	cf 93       	push	r28
    36b4:	df 93       	push	r29
    36b6:	cd b7       	in	r28, 0x3d	; 61
    36b8:	de b7       	in	r29, 0x3e	; 62
    36ba:	64 97       	sbiw	r28, 0x14	; 20
    36bc:	0f b6       	in	r0, 0x3f	; 63
    36be:	f8 94       	cli
    36c0:	de bf       	out	0x3e, r29	; 62
    36c2:	0f be       	out	0x3f, r0	; 63
    36c4:	cd bf       	out	0x3d, r28	; 61
    36c6:	2f 87       	std	Y+15, r18	; 0x0f
    36c8:	38 8b       	std	Y+16, r19	; 0x10
    36ca:	49 8b       	std	Y+17, r20	; 0x11
    36cc:	5a 8b       	std	Y+18, r21	; 0x12
    36ce:	36 2e       	mov	r3, r22
    36d0:	27 2e       	mov	r2, r23
    36d2:	8b 8b       	std	Y+19, r24	; 0x13
    36d4:	9c 8b       	std	Y+20, r25	; 0x14
    36d6:	1a 83       	std	Y+2, r17	; 0x02
    36d8:	09 83       	std	Y+1, r16	; 0x01
    36da:	37 01       	movw	r6, r14
    36dc:	26 01       	movw	r4, r12
    36de:	bc 86       	std	Y+12, r11	; 0x0c
    36e0:	ab 86       	std	Y+11, r10	; 0x0b
    if(!buffer || interval == 0 || length < interval || !callback)
    36e2:	01 2b       	or	r16, r17
    36e4:	09 f4       	brne	.+2      	; 0x36e8 <sd_raw_read_interval+0x56>
    36e6:	53 c0       	rjmp	.+166    	; 0x378e <sd_raw_read_interval+0xfc>
    36e8:	e1 14       	cp	r14, r1
    36ea:	f1 04       	cpc	r15, r1
    36ec:	09 f4       	brne	.+2      	; 0x36f0 <sd_raw_read_interval+0x5e>
    36ee:	51 c0       	rjmp	.+162    	; 0x3792 <sd_raw_read_interval+0x100>
    36f0:	ce 14       	cp	r12, r14
    36f2:	df 04       	cpc	r13, r15
    36f4:	08 f4       	brcc	.+2      	; 0x36f8 <sd_raw_read_interval+0x66>
    36f6:	4f c0       	rjmp	.+158    	; 0x3796 <sd_raw_read_interval+0x104>
    36f8:	ab 28       	or	r10, r11
    36fa:	09 f4       	brne	.+2      	; 0x36fe <sd_raw_read_interval+0x6c>
    36fc:	4e c0       	rjmp	.+156    	; 0x379a <sd_raw_read_interval+0x108>
         */
        if(!sd_raw_read(offset, buffer, interval))
            return 0;
        if(!callback(buffer, offset, p))
            break;
        offset += interval;
    36fe:	97 01       	movw	r18, r14
    3700:	eb 82       	std	Y+3, r14	; 0x03
    3702:	3c 83       	std	Y+4, r19	; 0x04
    3704:	9e 86       	std	Y+14, r9	; 0x0e
    3706:	8d 86       	std	Y+13, r8	; 0x0d
    3708:	af 84       	ldd	r10, Y+15	; 0x0f
    370a:	b8 88       	ldd	r11, Y+16	; 0x10
    370c:	c9 88       	ldd	r12, Y+17	; 0x11
    370e:	da 88       	ldd	r13, Y+18	; 0x12
    3710:	9b 88       	ldd	r9, Y+19	; 0x13
    3712:	8c 88       	ldd	r8, Y+20	; 0x14
    while(length >= interval)
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    3714:	73 01       	movw	r14, r6
    3716:	09 81       	ldd	r16, Y+1	; 0x01
    3718:	1a 81       	ldd	r17, Y+2	; 0x02
    371a:	2a 2d       	mov	r18, r10
    371c:	3b 2d       	mov	r19, r11
    371e:	4c 2d       	mov	r20, r12
    3720:	5d 2d       	mov	r21, r13
    3722:	63 2d       	mov	r22, r3
    3724:	72 2d       	mov	r23, r2
    3726:	89 2d       	mov	r24, r9
    3728:	98 2d       	mov	r25, r8
    372a:	0e 94 16 19 	call	0x322c	; 0x322c <sd_raw_read>
    372e:	88 23       	and	r24, r24
    3730:	b9 f1       	breq	.+110    	; 0x37a0 <sd_raw_read_interval+0x10e>
            return 0;
        if(!callback(buffer, offset, p))
    3732:	ed 84       	ldd	r14, Y+13	; 0x0d
    3734:	fe 84       	ldd	r15, Y+14	; 0x0e
    3736:	0a 2d       	mov	r16, r10
    3738:	1b 2d       	mov	r17, r11
    373a:	2c 2d       	mov	r18, r12
    373c:	3d 2d       	mov	r19, r13
    373e:	43 2d       	mov	r20, r3
    3740:	52 2d       	mov	r21, r2
    3742:	69 2d       	mov	r22, r9
    3744:	78 2d       	mov	r23, r8
    3746:	89 81       	ldd	r24, Y+1	; 0x01
    3748:	9a 81       	ldd	r25, Y+2	; 0x02
    374a:	eb 85       	ldd	r30, Y+11	; 0x0b
    374c:	fc 85       	ldd	r31, Y+12	; 0x0c
    374e:	09 95       	icall
    3750:	88 23       	and	r24, r24
    3752:	29 f1       	breq	.+74     	; 0x379e <sd_raw_read_interval+0x10c>
    3754:	2b 81       	ldd	r18, Y+3	; 0x03
    3756:	3c 81       	ldd	r19, Y+4	; 0x04
    3758:	40 e0       	ldi	r20, 0x00	; 0
    375a:	50 e0       	ldi	r21, 0x00	; 0
    375c:	60 e0       	ldi	r22, 0x00	; 0
    375e:	70 e0       	ldi	r23, 0x00	; 0
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	e3 2c       	mov	r14, r3
    3766:	f2 2c       	mov	r15, r2
    3768:	09 2d       	mov	r16, r9
    376a:	18 2d       	mov	r17, r8
    376c:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
    3770:	a2 2e       	mov	r10, r18
    3772:	b3 2e       	mov	r11, r19
    3774:	c4 2e       	mov	r12, r20
    3776:	d5 2e       	mov	r13, r21
    3778:	36 2e       	mov	r3, r22
    377a:	27 2e       	mov	r2, r23
    377c:	98 2e       	mov	r9, r24
    377e:	89 2e       	mov	r8, r25
            break;
        offset += interval;
        length -= interval;
    3780:	46 18       	sub	r4, r6
    3782:	57 08       	sbc	r5, r7
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    3784:	46 14       	cp	r4, r6
    3786:	57 04       	cpc	r5, r7
    3788:	28 f6       	brcc	.-118    	; 0x3714 <sd_raw_read_interval+0x82>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	09 c0       	rjmp	.+18     	; 0x37a0 <sd_raw_read_interval+0x10e>
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;
    378e:	80 e0       	ldi	r24, 0x00	; 0
    3790:	07 c0       	rjmp	.+14     	; 0x37a0 <sd_raw_read_interval+0x10e>
    3792:	80 e0       	ldi	r24, 0x00	; 0
    3794:	05 c0       	rjmp	.+10     	; 0x37a0 <sd_raw_read_interval+0x10e>
    3796:	80 e0       	ldi	r24, 0x00	; 0
    3798:	03 c0       	rjmp	.+6      	; 0x37a0 <sd_raw_read_interval+0x10e>
    379a:	80 e0       	ldi	r24, 0x00	; 0
    379c:	01 c0       	rjmp	.+2      	; 0x37a0 <sd_raw_read_interval+0x10e>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    379e:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    37a0:	64 96       	adiw	r28, 0x14	; 20
    37a2:	0f b6       	in	r0, 0x3f	; 63
    37a4:	f8 94       	cli
    37a6:	de bf       	out	0x3e, r29	; 62
    37a8:	0f be       	out	0x3f, r0	; 63
    37aa:	cd bf       	out	0x3d, r28	; 61
    37ac:	df 91       	pop	r29
    37ae:	cf 91       	pop	r28
    37b0:	1f 91       	pop	r17
    37b2:	0f 91       	pop	r16
    37b4:	ff 90       	pop	r15
    37b6:	ef 90       	pop	r14
    37b8:	df 90       	pop	r13
    37ba:	cf 90       	pop	r12
    37bc:	bf 90       	pop	r11
    37be:	af 90       	pop	r10
    37c0:	9f 90       	pop	r9
    37c2:	8f 90       	pop	r8
    37c4:	7f 90       	pop	r7
    37c6:	6f 90       	pop	r6
    37c8:	5f 90       	pop	r5
    37ca:	4f 90       	pop	r4
    37cc:	3f 90       	pop	r3
    37ce:	2f 90       	pop	r2
    37d0:	08 95       	ret

000037d2 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    37d2:	2f 92       	push	r2
    37d4:	3f 92       	push	r3
    37d6:	4f 92       	push	r4
    37d8:	5f 92       	push	r5
    37da:	6f 92       	push	r6
    37dc:	7f 92       	push	r7
    37de:	8f 92       	push	r8
    37e0:	9f 92       	push	r9
    37e2:	af 92       	push	r10
    37e4:	bf 92       	push	r11
    37e6:	cf 92       	push	r12
    37e8:	df 92       	push	r13
    37ea:	ef 92       	push	r14
    37ec:	ff 92       	push	r15
    37ee:	0f 93       	push	r16
    37f0:	1f 93       	push	r17
    37f2:	cf 93       	push	r28
    37f4:	df 93       	push	r29
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62
    37fa:	69 97       	sbiw	r28, 0x19	; 25
    37fc:	0f b6       	in	r0, 0x3f	; 63
    37fe:	f8 94       	cli
    3800:	de bf       	out	0x3e, r29	; 62
    3802:	0f be       	out	0x3f, r0	; 63
    3804:	cd bf       	out	0x3d, r28	; 61
    3806:	29 83       	std	Y+1, r18	; 0x01
    3808:	3a 83       	std	Y+2, r19	; 0x02
    380a:	4b 83       	std	Y+3, r20	; 0x03
    380c:	5c 83       	std	Y+4, r21	; 0x04
    380e:	6d 83       	std	Y+5, r22	; 0x05
    3810:	7e 83       	std	Y+6, r23	; 0x06
    3812:	8f 83       	std	Y+7, r24	; 0x07
    3814:	98 87       	std	Y+8, r25	; 0x08
    3816:	38 01       	movw	r6, r16
    3818:	27 01       	movw	r4, r14
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    381a:	ef 28       	or	r14, r15
    381c:	09 f4       	brne	.+2      	; 0x3820 <sd_raw_write+0x4e>
    381e:	07 c1       	rjmp	.+526    	; 0x3a2e <sd_raw_write+0x25c>
    3820:	0f 2e       	mov	r0, r31
    3822:	f2 e7       	ldi	r31, 0x72	; 114
    3824:	2f 2e       	mov	r2, r31
    3826:	f4 e0       	ldi	r31, 0x04	; 4
    3828:	3f 2e       	mov	r3, r31
    382a:	f0 2d       	mov	r31, r0
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    382c:	29 81       	ldd	r18, Y+1	; 0x01
    382e:	3a 81       	ldd	r19, Y+2	; 0x02
    3830:	31 70       	andi	r19, 0x01	; 1
    3832:	39 8f       	std	Y+25, r19	; 0x19
    3834:	28 8f       	std	Y+24, r18	; 0x18
        block_address = offset - block_offset;
    3836:	40 e0       	ldi	r20, 0x00	; 0
    3838:	50 e0       	ldi	r21, 0x00	; 0
    383a:	60 e0       	ldi	r22, 0x00	; 0
    383c:	70 e0       	ldi	r23, 0x00	; 0
    383e:	cb 01       	movw	r24, r22
    3840:	29 87       	std	Y+9, r18	; 0x09
    3842:	3a 87       	std	Y+10, r19	; 0x0a
    3844:	4b 87       	std	Y+11, r20	; 0x0b
    3846:	5c 87       	std	Y+12, r21	; 0x0c
    3848:	6d 87       	std	Y+13, r22	; 0x0d
    384a:	7e 87       	std	Y+14, r23	; 0x0e
    384c:	8f 87       	std	Y+15, r24	; 0x0f
    384e:	98 8b       	std	Y+16, r25	; 0x10
    3850:	29 81       	ldd	r18, Y+1	; 0x01
    3852:	3a 81       	ldd	r19, Y+2	; 0x02
    3854:	4b 81       	ldd	r20, Y+3	; 0x03
    3856:	5c 81       	ldd	r21, Y+4	; 0x04
    3858:	6d 81       	ldd	r22, Y+5	; 0x05
    385a:	7e 81       	ldd	r23, Y+6	; 0x06
    385c:	8f 81       	ldd	r24, Y+7	; 0x07
    385e:	98 85       	ldd	r25, Y+8	; 0x08
    3860:	a9 84       	ldd	r10, Y+9	; 0x09
    3862:	ba 84       	ldd	r11, Y+10	; 0x0a
    3864:	c1 2c       	mov	r12, r1
    3866:	d1 2c       	mov	r13, r1
    3868:	e1 2c       	mov	r14, r1
    386a:	f1 2c       	mov	r15, r1
    386c:	00 e0       	ldi	r16, 0x00	; 0
    386e:	10 e0       	ldi	r17, 0x00	; 0
    3870:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__subdi3>
    3874:	29 87       	std	Y+9, r18	; 0x09
    3876:	39 8b       	std	Y+17, r19	; 0x11
    3878:	4a 8b       	std	Y+18, r20	; 0x12
    387a:	5b 8b       	std	Y+19, r21	; 0x13
    387c:	6c 8b       	std	Y+20, r22	; 0x14
    387e:	7d 8b       	std	Y+21, r23	; 0x15
    3880:	8e 8b       	std	Y+22, r24	; 0x16
    3882:	9f 8b       	std	Y+23, r25	; 0x17
    3884:	81 2c       	mov	r8, r1
    3886:	68 94       	set
    3888:	99 24       	eor	r9, r9
    388a:	91 f8       	bld	r9, 1
    388c:	68 8d       	ldd	r22, Y+24	; 0x18
    388e:	79 8d       	ldd	r23, Y+25	; 0x19
    3890:	86 1a       	sub	r8, r22
    3892:	97 0a       	sbc	r9, r23
    3894:	48 14       	cp	r4, r8
    3896:	59 04       	cpc	r5, r9
    3898:	08 f4       	brcc	.+2      	; 0x389c <sd_raw_write+0xca>
    389a:	42 01       	movw	r8, r4
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    389c:	a0 90 6a 02 	lds	r10, 0x026A	; 0x80026a <raw_block_address>
    38a0:	b0 90 6b 02 	lds	r11, 0x026B	; 0x80026b <raw_block_address+0x1>
    38a4:	c0 90 6c 02 	lds	r12, 0x026C	; 0x80026c <raw_block_address+0x2>
    38a8:	d0 90 6d 02 	lds	r13, 0x026D	; 0x80026d <raw_block_address+0x3>
    38ac:	e0 90 6e 02 	lds	r14, 0x026E	; 0x80026e <raw_block_address+0x4>
    38b0:	f0 90 6f 02 	lds	r15, 0x026F	; 0x80026f <raw_block_address+0x5>
    38b4:	00 91 70 02 	lds	r16, 0x0270	; 0x800270 <raw_block_address+0x6>
    38b8:	10 91 71 02 	lds	r17, 0x0271	; 0x800271 <raw_block_address+0x7>
    38bc:	29 85       	ldd	r18, Y+9	; 0x09
    38be:	39 89       	ldd	r19, Y+17	; 0x11
    38c0:	4a 89       	ldd	r20, Y+18	; 0x12
    38c2:	5b 89       	ldd	r21, Y+19	; 0x13
    38c4:	6c 89       	ldd	r22, Y+20	; 0x14
    38c6:	7d 89       	ldd	r23, Y+21	; 0x15
    38c8:	8e 89       	ldd	r24, Y+22	; 0x16
    38ca:	9f 89       	ldd	r25, Y+23	; 0x17
    38cc:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__cmpdi2>
    38d0:	c1 f1       	breq	.+112    	; 0x3942 <sd_raw_write+0x170>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    38d2:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <sd_raw_sync>
    38d6:	88 23       	and	r24, r24
    38d8:	09 f4       	brne	.+2      	; 0x38dc <sd_raw_write+0x10a>
    38da:	ac c0       	rjmp	.+344    	; 0x3a34 <sd_raw_write+0x262>
                return 0;
#endif

            if(block_offset || write_length < 512)
    38dc:	88 8d       	ldd	r24, Y+24	; 0x18
    38de:	99 8d       	ldd	r25, Y+25	; 0x19
    38e0:	89 2b       	or	r24, r25
    38e2:	21 f4       	brne	.+8      	; 0x38ec <sd_raw_write+0x11a>
    38e4:	81 14       	cp	r8, r1
    38e6:	92 e0       	ldi	r25, 0x02	; 2
    38e8:	99 06       	cpc	r9, r25
    38ea:	98 f4       	brcc	.+38     	; 0x3912 <sd_raw_write+0x140>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    38ec:	e1 2c       	mov	r14, r1
    38ee:	68 94       	set
    38f0:	ff 24       	eor	r15, r15
    38f2:	f1 f8       	bld	r15, 1
    38f4:	02 e7       	ldi	r16, 0x72	; 114
    38f6:	12 e0       	ldi	r17, 0x02	; 2
    38f8:	29 85       	ldd	r18, Y+9	; 0x09
    38fa:	39 89       	ldd	r19, Y+17	; 0x11
    38fc:	4a 89       	ldd	r20, Y+18	; 0x12
    38fe:	5b 89       	ldd	r21, Y+19	; 0x13
    3900:	6c 89       	ldd	r22, Y+20	; 0x14
    3902:	7d 89       	ldd	r23, Y+21	; 0x15
    3904:	8e 89       	ldd	r24, Y+22	; 0x16
    3906:	9f 89       	ldd	r25, Y+23	; 0x17
    3908:	0e 94 16 19 	call	0x322c	; 0x322c <sd_raw_read>
    390c:	88 23       	and	r24, r24
    390e:	09 f4       	brne	.+2      	; 0x3912 <sd_raw_write+0x140>
    3910:	91 c0       	rjmp	.+290    	; 0x3a34 <sd_raw_write+0x262>
                    return 0;
            }
            raw_block_address = block_address;
    3912:	e9 85       	ldd	r30, Y+9	; 0x09
    3914:	e0 93 6a 02 	sts	0x026A, r30	; 0x80026a <raw_block_address>
    3918:	f9 89       	ldd	r31, Y+17	; 0x11
    391a:	f0 93 6b 02 	sts	0x026B, r31	; 0x80026b <raw_block_address+0x1>
    391e:	2a 89       	ldd	r18, Y+18	; 0x12
    3920:	20 93 6c 02 	sts	0x026C, r18	; 0x80026c <raw_block_address+0x2>
    3924:	3b 89       	ldd	r19, Y+19	; 0x13
    3926:	30 93 6d 02 	sts	0x026D, r19	; 0x80026d <raw_block_address+0x3>
    392a:	4c 89       	ldd	r20, Y+20	; 0x14
    392c:	40 93 6e 02 	sts	0x026E, r20	; 0x80026e <raw_block_address+0x4>
    3930:	5d 89       	ldd	r21, Y+21	; 0x15
    3932:	50 93 6f 02 	sts	0x026F, r21	; 0x80026f <raw_block_address+0x5>
    3936:	6e 89       	ldd	r22, Y+22	; 0x16
    3938:	60 93 70 02 	sts	0x0270, r22	; 0x800270 <raw_block_address+0x6>
    393c:	7f 89       	ldd	r23, Y+23	; 0x17
    393e:	70 93 71 02 	sts	0x0271, r23	; 0x800271 <raw_block_address+0x7>
        }

        if(buffer != raw_block)
    3942:	82 e7       	ldi	r24, 0x72	; 114
    3944:	68 16       	cp	r6, r24
    3946:	82 e0       	ldi	r24, 0x02	; 2
    3948:	78 06       	cpc	r7, r24
    394a:	71 f0       	breq	.+28     	; 0x3968 <sd_raw_write+0x196>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    394c:	a4 01       	movw	r20, r8
    394e:	b3 01       	movw	r22, r6
    3950:	88 8d       	ldd	r24, Y+24	; 0x18
    3952:	99 8d       	ldd	r25, Y+25	; 0x19
    3954:	8e 58       	subi	r24, 0x8E	; 142
    3956:	9d 4f       	sbci	r25, 0xFD	; 253
    3958:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    395c:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <raw_block_written>

            if(length == write_length)
    3960:	48 14       	cp	r4, r8
    3962:	59 04       	cpc	r5, r9
    3964:	09 f4       	brne	.+2      	; 0x3968 <sd_raw_write+0x196>
    3966:	65 c0       	rjmp	.+202    	; 0x3a32 <sd_raw_write+0x260>
                return 1;
#endif
        }

        /* address card */
        select_card();
    3968:	2a 98       	cbi	0x05, 2	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    396a:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <sd_raw_card_type>
    396e:	82 ff       	sbrs	r24, 2
    3970:	10 c0       	rjmp	.+32     	; 0x3992 <sd_raw_write+0x1c0>
    3972:	29 85       	ldd	r18, Y+9	; 0x09
    3974:	39 89       	ldd	r19, Y+17	; 0x11
    3976:	4a 89       	ldd	r20, Y+18	; 0x12
    3978:	5b 89       	ldd	r21, Y+19	; 0x13
    397a:	6c 89       	ldd	r22, Y+20	; 0x14
    397c:	7d 89       	ldd	r23, Y+21	; 0x15
    397e:	8e 89       	ldd	r24, Y+22	; 0x16
    3980:	9f 89       	ldd	r25, Y+23	; 0x17
    3982:	09 e0       	ldi	r16, 0x09	; 9
    3984:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <__lshrdi3>
    3988:	64 2f       	mov	r22, r20
    398a:	75 2f       	mov	r23, r21
    398c:	42 2f       	mov	r20, r18
    398e:	53 2f       	mov	r21, r19
    3990:	04 c0       	rjmp	.+8      	; 0x399a <sd_raw_write+0x1c8>
    3992:	49 85       	ldd	r20, Y+9	; 0x09
    3994:	59 89       	ldd	r21, Y+17	; 0x11
    3996:	6a 89       	ldd	r22, Y+18	; 0x12
    3998:	7b 89       	ldd	r23, Y+19	; 0x13
    399a:	88 e1       	ldi	r24, 0x18	; 24
    399c:	0e 94 ae 18 	call	0x315c	; 0x315c <sd_raw_send_command>
    39a0:	88 23       	and	r24, r24
    39a2:	19 f0       	breq	.+6      	; 0x39aa <sd_raw_write+0x1d8>
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
#endif
        {
            unselect_card();
    39a4:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    39a6:	80 e0       	ldi	r24, 0x00	; 0
    39a8:	45 c0       	rjmp	.+138    	; 0x3a34 <sd_raw_write+0x262>
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);
    39aa:	8e ef       	ldi	r24, 0xFE	; 254
    39ac:	0e 94 9c 18 	call	0x3138	; 0x3138 <sd_raw_send_byte>
    39b0:	02 e7       	ldi	r16, 0x72	; 114
    39b2:	12 e0       	ldi	r17, 0x02	; 2

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    39b4:	f8 01       	movw	r30, r16
    39b6:	81 91       	ld	r24, Z+
    39b8:	8f 01       	movw	r16, r30
    39ba:	0e 94 9c 18 	call	0x3138	; 0x3138 <sd_raw_send_byte>
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    39be:	02 15       	cp	r16, r2
    39c0:	13 05       	cpc	r17, r3
    39c2:	c1 f7       	brne	.-16     	; 0x39b4 <sd_raw_write+0x1e2>
            sd_raw_send_byte(*cache++);

        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
    39c4:	8f ef       	ldi	r24, 0xFF	; 255
    39c6:	0e 94 9c 18 	call	0x3138	; 0x3138 <sd_raw_send_byte>
        sd_raw_send_byte(0xff);
    39ca:	8f ef       	ldi	r24, 0xFF	; 255
    39cc:	0e 94 9c 18 	call	0x3138	; 0x3138 <sd_raw_send_byte>

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    39d0:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>
    39d4:	8f 3f       	cpi	r24, 0xFF	; 255
    39d6:	e1 f7       	brne	.-8      	; 0x39d0 <sd_raw_write+0x1fe>
        sd_raw_rec_byte();
    39d8:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_rec_byte>

        /* deaddress card */
        unselect_card();
    39dc:	2a 9a       	sbi	0x05, 2	; 5

        buffer += write_length;
    39de:	68 0c       	add	r6, r8
    39e0:	79 1c       	adc	r7, r9
        offset += write_length;
    39e2:	54 01       	movw	r10, r8
    39e4:	28 2d       	mov	r18, r8
    39e6:	3b 2d       	mov	r19, r11
    39e8:	40 e0       	ldi	r20, 0x00	; 0
    39ea:	50 e0       	ldi	r21, 0x00	; 0
    39ec:	60 e0       	ldi	r22, 0x00	; 0
    39ee:	70 e0       	ldi	r23, 0x00	; 0
    39f0:	80 e0       	ldi	r24, 0x00	; 0
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	a9 80       	ldd	r10, Y+1	; 0x01
    39f6:	ba 80       	ldd	r11, Y+2	; 0x02
    39f8:	cb 80       	ldd	r12, Y+3	; 0x03
    39fa:	dc 80       	ldd	r13, Y+4	; 0x04
    39fc:	ed 80       	ldd	r14, Y+5	; 0x05
    39fe:	fe 80       	ldd	r15, Y+6	; 0x06
    3a00:	0f 81       	ldd	r16, Y+7	; 0x07
    3a02:	18 85       	ldd	r17, Y+8	; 0x08
    3a04:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
    3a08:	29 83       	std	Y+1, r18	; 0x01
    3a0a:	3a 83       	std	Y+2, r19	; 0x02
    3a0c:	4b 83       	std	Y+3, r20	; 0x03
    3a0e:	5c 83       	std	Y+4, r21	; 0x04
    3a10:	6d 83       	std	Y+5, r22	; 0x05
    3a12:	7e 83       	std	Y+6, r23	; 0x06
    3a14:	8f 83       	std	Y+7, r24	; 0x07
    3a16:	98 87       	std	Y+8, r25	; 0x08
        length -= write_length;
    3a18:	48 18       	sub	r4, r8
    3a1a:	59 08       	sbc	r5, r9

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    3a1c:	f1 e0       	ldi	r31, 0x01	; 1
    3a1e:	f0 93 69 02 	sts	0x0269, r31	; 0x800269 <raw_block_written>
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    3a22:	41 14       	cp	r4, r1
    3a24:	51 04       	cpc	r5, r1
    3a26:	09 f0       	breq	.+2      	; 0x3a2a <sd_raw_write+0x258>
    3a28:	01 cf       	rjmp	.-510    	; 0x382c <sd_raw_write+0x5a>
#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
#endif
    }

    return 1;
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	03 c0       	rjmp	.+6      	; 0x3a34 <sd_raw_write+0x262>
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	01 c0       	rjmp	.+2      	; 0x3a34 <sd_raw_write+0x262>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;

            if(length == write_length)
                return 1;
    3a32:	81 e0       	ldi	r24, 0x01	; 1
        raw_block_written = 1;
#endif
    }

    return 1;
}
    3a34:	69 96       	adiw	r28, 0x19	; 25
    3a36:	0f b6       	in	r0, 0x3f	; 63
    3a38:	f8 94       	cli
    3a3a:	de bf       	out	0x3e, r29	; 62
    3a3c:	0f be       	out	0x3f, r0	; 63
    3a3e:	cd bf       	out	0x3d, r28	; 61
    3a40:	df 91       	pop	r29
    3a42:	cf 91       	pop	r28
    3a44:	1f 91       	pop	r17
    3a46:	0f 91       	pop	r16
    3a48:	ff 90       	pop	r15
    3a4a:	ef 90       	pop	r14
    3a4c:	df 90       	pop	r13
    3a4e:	cf 90       	pop	r12
    3a50:	bf 90       	pop	r11
    3a52:	af 90       	pop	r10
    3a54:	9f 90       	pop	r9
    3a56:	8f 90       	pop	r8
    3a58:	7f 90       	pop	r7
    3a5a:	6f 90       	pop	r6
    3a5c:	5f 90       	pop	r5
    3a5e:	4f 90       	pop	r4
    3a60:	3f 90       	pop	r3
    3a62:	2f 90       	pop	r2
    3a64:	08 95       	ret

00003a66 <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    3a66:	2f 92       	push	r2
    3a68:	3f 92       	push	r3
    3a6a:	4f 92       	push	r4
    3a6c:	5f 92       	push	r5
    3a6e:	6f 92       	push	r6
    3a70:	7f 92       	push	r7
    3a72:	8f 92       	push	r8
    3a74:	9f 92       	push	r9
    3a76:	af 92       	push	r10
    3a78:	bf 92       	push	r11
    3a7a:	cf 92       	push	r12
    3a7c:	df 92       	push	r13
    3a7e:	ef 92       	push	r14
    3a80:	ff 92       	push	r15
    3a82:	0f 93       	push	r16
    3a84:	1f 93       	push	r17
    3a86:	cf 93       	push	r28
    3a88:	df 93       	push	r29
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
    3a8e:	28 97       	sbiw	r28, 0x08	; 8
    3a90:	0f b6       	in	r0, 0x3f	; 63
    3a92:	f8 94       	cli
    3a94:	de bf       	out	0x3e, r29	; 62
    3a96:	0f be       	out	0x3f, r0	; 63
    3a98:	cd bf       	out	0x3d, r28	; 61
    3a9a:	56 2e       	mov	r5, r22
    3a9c:	47 2e       	mov	r4, r23
    3a9e:	1a 83       	std	Y+2, r17	; 0x02
    3aa0:	09 83       	std	Y+1, r16	; 0x01
    3aa2:	dc 82       	std	Y+4, r13	; 0x04
    3aa4:	cb 82       	std	Y+3, r12	; 0x03
    3aa6:	be 82       	std	Y+6, r11	; 0x06
    3aa8:	ad 82       	std	Y+5, r10	; 0x05
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    3aaa:	01 2b       	or	r16, r17
    3aac:	09 f4       	brne	.+2      	; 0x3ab0 <sd_raw_write_interval+0x4a>
    3aae:	48 c0       	rjmp	.+144    	; 0x3b40 <sd_raw_write_interval+0xda>
    3ab0:	cd 28       	or	r12, r13
    3ab2:	09 f4       	brne	.+2      	; 0x3ab6 <sd_raw_write_interval+0x50>
    3ab4:	47 c0       	rjmp	.+142    	; 0x3b44 <sd_raw_write_interval+0xde>
    3ab6:	f8 86       	std	Y+8, r15	; 0x08
    3ab8:	ef 82       	std	Y+7, r14	; 0x07
    3aba:	a2 2e       	mov	r10, r18
    3abc:	b3 2e       	mov	r11, r19
    3abe:	c4 2e       	mov	r12, r20
    3ac0:	d5 2e       	mov	r13, r21
    3ac2:	98 2e       	mov	r9, r24
    3ac4:	89 2e       	mov	r8, r25
    3ac6:	17 01       	movw	r2, r14
    3ac8:	32 c0       	rjmp	.+100    	; 0x3b2e <sd_raw_write_interval+0xc8>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
    3aca:	8f 81       	ldd	r24, Y+7	; 0x07
    3acc:	98 85       	ldd	r25, Y+8	; 0x08
    3ace:	86 15       	cp	r24, r6
    3ad0:	97 05       	cpc	r25, r7
    3ad2:	d0 f1       	brcs	.+116    	; 0x3b48 <sd_raw_write_interval+0xe2>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    3ad4:	73 01       	movw	r14, r6
    3ad6:	09 81       	ldd	r16, Y+1	; 0x01
    3ad8:	1a 81       	ldd	r17, Y+2	; 0x02
    3ada:	2a 2d       	mov	r18, r10
    3adc:	3b 2d       	mov	r19, r11
    3ade:	4c 2d       	mov	r20, r12
    3ae0:	5d 2d       	mov	r21, r13
    3ae2:	65 2d       	mov	r22, r5
    3ae4:	74 2d       	mov	r23, r4
    3ae6:	89 2d       	mov	r24, r9
    3ae8:	98 2d       	mov	r25, r8
    3aea:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <sd_raw_write>
    3aee:	88 23       	and	r24, r24
    3af0:	09 f4       	brne	.+2      	; 0x3af4 <sd_raw_write_interval+0x8e>
    3af2:	58 c0       	rjmp	.+176    	; 0x3ba4 <sd_raw_write_interval+0x13e>
            return 0;

        offset += bytes_to_write;
    3af4:	a3 01       	movw	r20, r6
    3af6:	26 2d       	mov	r18, r6
    3af8:	35 2f       	mov	r19, r21
    3afa:	40 e0       	ldi	r20, 0x00	; 0
    3afc:	50 e0       	ldi	r21, 0x00	; 0
    3afe:	60 e0       	ldi	r22, 0x00	; 0
    3b00:	70 e0       	ldi	r23, 0x00	; 0
    3b02:	80 e0       	ldi	r24, 0x00	; 0
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	e5 2c       	mov	r14, r5
    3b08:	f4 2c       	mov	r15, r4
    3b0a:	09 2d       	mov	r16, r9
    3b0c:	18 2d       	mov	r17, r8
    3b0e:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__adddi3>
    3b12:	a2 2e       	mov	r10, r18
    3b14:	b3 2e       	mov	r11, r19
    3b16:	c4 2e       	mov	r12, r20
    3b18:	d5 2e       	mov	r13, r21
    3b1a:	56 2e       	mov	r5, r22
    3b1c:	47 2e       	mov	r4, r23
    3b1e:	98 2e       	mov	r9, r24
    3b20:	89 2e       	mov	r8, r25
        length -= bytes_to_write;
    3b22:	ef 81       	ldd	r30, Y+7	; 0x07
    3b24:	f8 85       	ldd	r31, Y+8	; 0x08
    3b26:	e6 19       	sub	r30, r6
    3b28:	f7 09       	sbc	r31, r7
    3b2a:	f8 87       	std	Y+8, r31	; 0x08
    3b2c:	ef 83       	std	Y+7, r30	; 0x07

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    3b2e:	21 14       	cp	r2, r1
    3b30:	31 04       	cpc	r3, r1
    3b32:	21 f1       	breq	.+72     	; 0x3b7c <sd_raw_write_interval+0x116>
    3b34:	8f 81       	ldd	r24, Y+7	; 0x07
    3b36:	98 85       	ldd	r25, Y+8	; 0x08
    3b38:	89 2b       	or	r24, r25
    3b3a:	61 f4       	brne	.+24     	; 0x3b54 <sd_raw_write_interval+0xee>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	32 c0       	rjmp	.+100    	; 0x3ba4 <sd_raw_write_interval+0x13e>
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
        return 0;
    3b40:	80 e0       	ldi	r24, 0x00	; 0
    3b42:	30 c0       	rjmp	.+96     	; 0x3ba4 <sd_raw_write_interval+0x13e>
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    3b46:	2e c0       	rjmp	.+92     	; 0x3ba4 <sd_raw_write_interval+0x13e>
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
            return 0;
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	2c c0       	rjmp	.+88     	; 0x3ba4 <sd_raw_write_interval+0x13e>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	2a c0       	rjmp	.+84     	; 0x3ba4 <sd_raw_write_interval+0x13e>
    3b50:	81 e0       	ldi	r24, 0x01	; 1
    3b52:	28 c0       	rjmp	.+80     	; 0x3ba4 <sd_raw_write_interval+0x13e>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    3b54:	ed 80       	ldd	r14, Y+5	; 0x05
    3b56:	fe 80       	ldd	r15, Y+6	; 0x06
    3b58:	0a 2d       	mov	r16, r10
    3b5a:	1b 2d       	mov	r17, r11
    3b5c:	2c 2d       	mov	r18, r12
    3b5e:	3d 2d       	mov	r19, r13
    3b60:	45 2d       	mov	r20, r5
    3b62:	54 2d       	mov	r21, r4
    3b64:	69 2d       	mov	r22, r9
    3b66:	78 2d       	mov	r23, r8
    3b68:	89 81       	ldd	r24, Y+1	; 0x01
    3b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b6c:	eb 81       	ldd	r30, Y+3	; 0x03
    3b6e:	fc 81       	ldd	r31, Y+4	; 0x04
    3b70:	09 95       	icall
    3b72:	3c 01       	movw	r6, r24
        if(!bytes_to_write)
    3b74:	89 2b       	or	r24, r25
    3b76:	09 f0       	breq	.+2      	; 0x3b7a <sd_raw_write_interval+0x114>
    3b78:	a8 cf       	rjmp	.-176    	; 0x3aca <sd_raw_write_interval+0x64>
    3b7a:	e8 cf       	rjmp	.-48     	; 0x3b4c <sd_raw_write_interval+0xe6>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    3b7c:	ed 80       	ldd	r14, Y+5	; 0x05
    3b7e:	fe 80       	ldd	r15, Y+6	; 0x06
    3b80:	0a 2d       	mov	r16, r10
    3b82:	1b 2d       	mov	r17, r11
    3b84:	2c 2d       	mov	r18, r12
    3b86:	3d 2d       	mov	r19, r13
    3b88:	45 2d       	mov	r20, r5
    3b8a:	54 2d       	mov	r21, r4
    3b8c:	69 2d       	mov	r22, r9
    3b8e:	78 2d       	mov	r23, r8
    3b90:	89 81       	ldd	r24, Y+1	; 0x01
    3b92:	9a 81       	ldd	r25, Y+2	; 0x02
    3b94:	eb 81       	ldd	r30, Y+3	; 0x03
    3b96:	fc 81       	ldd	r31, Y+4	; 0x04
    3b98:	09 95       	icall
    3b9a:	3c 01       	movw	r6, r24
        if(!bytes_to_write)
    3b9c:	89 2b       	or	r24, r25
    3b9e:	09 f0       	breq	.+2      	; 0x3ba2 <sd_raw_write_interval+0x13c>
    3ba0:	99 cf       	rjmp	.-206    	; 0x3ad4 <sd_raw_write_interval+0x6e>
    3ba2:	d6 cf       	rjmp	.-84     	; 0x3b50 <sd_raw_write_interval+0xea>
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    3ba4:	28 96       	adiw	r28, 0x08	; 8
    3ba6:	0f b6       	in	r0, 0x3f	; 63
    3ba8:	f8 94       	cli
    3baa:	de bf       	out	0x3e, r29	; 62
    3bac:	0f be       	out	0x3f, r0	; 63
    3bae:	cd bf       	out	0x3d, r28	; 61
    3bb0:	df 91       	pop	r29
    3bb2:	cf 91       	pop	r28
    3bb4:	1f 91       	pop	r17
    3bb6:	0f 91       	pop	r16
    3bb8:	ff 90       	pop	r15
    3bba:	ef 90       	pop	r14
    3bbc:	df 90       	pop	r13
    3bbe:	cf 90       	pop	r12
    3bc0:	bf 90       	pop	r11
    3bc2:	af 90       	pop	r10
    3bc4:	9f 90       	pop	r9
    3bc6:	8f 90       	pop	r8
    3bc8:	7f 90       	pop	r7
    3bca:	6f 90       	pop	r6
    3bcc:	5f 90       	pop	r5
    3bce:	4f 90       	pop	r4
    3bd0:	3f 90       	pop	r3
    3bd2:	2f 90       	pop	r2
    3bd4:	08 95       	ret

00003bd6 <__vector_18>:
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
    3bd6:	1f 92       	push	r1
    3bd8:	0f 92       	push	r0
    3bda:	0f b6       	in	r0, 0x3f	; 63
    3bdc:	0f 92       	push	r0
    3bde:	11 24       	eor	r1, r1
    3be0:	2f 93       	push	r18
    3be2:	8f 93       	push	r24
    3be4:	9f 93       	push	r25
    3be6:	ef 93       	push	r30
    3be8:	ff 93       	push	r31
    3bea:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3bee:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    3bf2:	88 71       	andi	r24, 0x18	; 24
    3bf4:	e0 91 74 04 	lds	r30, 0x0474	; 0x800474 <UART_RxHead>
    3bf8:	ef 5f       	subi	r30, 0xFF	; 255
    3bfa:	ef 71       	andi	r30, 0x1F	; 31
    3bfc:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <UART_RxTail>
    3c00:	e9 17       	cp	r30, r25
    3c02:	39 f0       	breq	.+14     	; 0x3c12 <__vector_18+0x3c>
    3c04:	e0 93 74 04 	sts	0x0474, r30	; 0x800474 <UART_RxHead>
    3c08:	f0 e0       	ldi	r31, 0x00	; 0
    3c0a:	e9 58       	subi	r30, 0x89	; 137
    3c0c:	fb 4f       	sbci	r31, 0xFB	; 251
    3c0e:	20 83       	st	Z, r18
    3c10:	01 c0       	rjmp	.+2      	; 0x3c14 <__vector_18+0x3e>
    3c12:	82 e0       	ldi	r24, 0x02	; 2
    3c14:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <UART_LastRxError>
    3c18:	ff 91       	pop	r31
    3c1a:	ef 91       	pop	r30
    3c1c:	9f 91       	pop	r25
    3c1e:	8f 91       	pop	r24
    3c20:	2f 91       	pop	r18
    3c22:	0f 90       	pop	r0
    3c24:	0f be       	out	0x3f, r0	; 63
    3c26:	0f 90       	pop	r0
    3c28:	1f 90       	pop	r1
    3c2a:	18 95       	reti

00003c2c <__vector_19>:
    3c2c:	1f 92       	push	r1
    3c2e:	0f 92       	push	r0
    3c30:	0f b6       	in	r0, 0x3f	; 63
    3c32:	0f 92       	push	r0
    3c34:	11 24       	eor	r1, r1
    3c36:	8f 93       	push	r24
    3c38:	9f 93       	push	r25
    3c3a:	ef 93       	push	r30
    3c3c:	ff 93       	push	r31
    3c3e:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <UART_TxHead>
    3c42:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <UART_TxTail>
    3c46:	98 17       	cp	r25, r24
    3c48:	69 f0       	breq	.+26     	; 0x3c64 <__vector_19+0x38>
    3c4a:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <UART_TxTail>
    3c4e:	ef 5f       	subi	r30, 0xFF	; 255
    3c50:	ef 71       	andi	r30, 0x1F	; 31
    3c52:	e0 93 75 04 	sts	0x0475, r30	; 0x800475 <UART_TxTail>
    3c56:	f0 e0       	ldi	r31, 0x00	; 0
    3c58:	e9 56       	subi	r30, 0x69	; 105
    3c5a:	fb 4f       	sbci	r31, 0xFB	; 251
    3c5c:	80 81       	ld	r24, Z
    3c5e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    3c62:	05 c0       	rjmp	.+10     	; 0x3c6e <__vector_19+0x42>
    3c64:	e1 ec       	ldi	r30, 0xC1	; 193
    3c66:	f0 e0       	ldi	r31, 0x00	; 0
    3c68:	80 81       	ld	r24, Z
    3c6a:	8f 7d       	andi	r24, 0xDF	; 223
    3c6c:	80 83       	st	Z, r24
    3c6e:	ff 91       	pop	r31
    3c70:	ef 91       	pop	r30
    3c72:	9f 91       	pop	r25
    3c74:	8f 91       	pop	r24
    3c76:	0f 90       	pop	r0
    3c78:	0f be       	out	0x3f, r0	; 63
    3c7a:	0f 90       	pop	r0
    3c7c:	1f 90       	pop	r1
    3c7e:	18 95       	reti

00003c80 <uart_init>:
    3c80:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <UART_TxHead>
    3c84:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <UART_TxTail>
    3c88:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <UART_RxHead>
    3c8c:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <UART_RxTail>
    3c90:	99 23       	and	r25, r25
    3c92:	24 f4       	brge	.+8      	; 0x3c9c <uart_init+0x1c>
    3c94:	22 e0       	ldi	r18, 0x02	; 2
    3c96:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3c9a:	9f 77       	andi	r25, 0x7F	; 127
    3c9c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    3ca0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    3ca4:	88 e9       	ldi	r24, 0x98	; 152
    3ca6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    3caa:	86 e0       	ldi	r24, 0x06	; 6
    3cac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    3cb0:	08 95       	ret

00003cb2 <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
    3cb2:	cf 93       	push	r28
    3cb4:	c8 2f       	mov	r28, r24

    if(data == '\n')
    3cb6:	8a 30       	cpi	r24, 0x0A	; 10
    3cb8:	19 f4       	brne	.+6      	; 0x3cc0 <uart_putc+0xe>
        uart_putc('\r');
    3cba:	8d e0       	ldi	r24, 0x0D	; 13
    3cbc:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <uart_putc>
    
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    3cc0:	20 91 76 04 	lds	r18, 0x0476	; 0x800476 <UART_TxHead>
    3cc4:	2f 5f       	subi	r18, 0xFF	; 255
    3cc6:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    3cc8:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <UART_TxTail>
    3ccc:	29 17       	cp	r18, r25
    3cce:	e1 f3       	breq	.-8      	; 0x3cc8 <uart_putc+0x16>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    3cd0:	e2 2f       	mov	r30, r18
    3cd2:	f0 e0       	ldi	r31, 0x00	; 0
    3cd4:	e9 56       	subi	r30, 0x69	; 105
    3cd6:	fb 4f       	sbci	r31, 0xFB	; 251
    3cd8:	c0 83       	st	Z, r28
    UART_TxHead = tmphead;
    3cda:	20 93 76 04 	sts	0x0476, r18	; 0x800476 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    3cde:	e1 ec       	ldi	r30, 0xC1	; 193
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
    3ce2:	80 81       	ld	r24, Z
    3ce4:	80 62       	ori	r24, 0x20	; 32
    3ce6:	80 83       	st	Z, r24

}/* uart_putc */
    3ce8:	cf 91       	pop	r28
    3cea:	08 95       	ret

00003cec <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    3cec:	cf 93       	push	r28
    3cee:	df 93       	push	r29
    3cf0:	ec 01       	movw	r28, r24
    while (*s) 
    3cf2:	88 81       	ld	r24, Y
    3cf4:	88 23       	and	r24, r24
    3cf6:	31 f0       	breq	.+12     	; 0x3d04 <uart_puts+0x18>
    3cf8:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
    3cfa:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    3cfe:	89 91       	ld	r24, Y+
    3d00:	81 11       	cpse	r24, r1
    3d02:	fb cf       	rjmp	.-10     	; 0x3cfa <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
    3d04:	df 91       	pop	r29
    3d06:	cf 91       	pop	r28
    3d08:	08 95       	ret

00003d0a <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    3d0a:	cf 93       	push	r28
    3d0c:	df 93       	push	r29
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    3d0e:	ec 01       	movw	r28, r24
    3d10:	21 96       	adiw	r28, 0x01	; 1
    3d12:	fc 01       	movw	r30, r24
    3d14:	84 91       	lpm	r24, Z
    3d16:	88 23       	and	r24, r24
    3d18:	39 f0       	breq	.+14     	; 0x3d28 <uart_puts_p+0x1e>
      uart_putc(c);
    3d1a:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    3d1e:	fe 01       	movw	r30, r28
    3d20:	84 91       	lpm	r24, Z
    3d22:	21 96       	adiw	r28, 0x01	; 1
    3d24:	81 11       	cpse	r24, r1
    3d26:	f9 cf       	rjmp	.-14     	; 0x3d1a <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
    3d28:	df 91       	pop	r29
    3d2a:	cf 91       	pop	r28
    3d2c:	08 95       	ret

00003d2e <__mulsi3>:
    3d2e:	db 01       	movw	r26, r22
    3d30:	8f 93       	push	r24
    3d32:	9f 93       	push	r25
    3d34:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <__muluhisi3>
    3d38:	bf 91       	pop	r27
    3d3a:	af 91       	pop	r26
    3d3c:	a2 9f       	mul	r26, r18
    3d3e:	80 0d       	add	r24, r0
    3d40:	91 1d       	adc	r25, r1
    3d42:	a3 9f       	mul	r26, r19
    3d44:	90 0d       	add	r25, r0
    3d46:	b2 9f       	mul	r27, r18
    3d48:	90 0d       	add	r25, r0
    3d4a:	11 24       	eor	r1, r1
    3d4c:	08 95       	ret

00003d4e <__udivmodhi4>:
    3d4e:	aa 1b       	sub	r26, r26
    3d50:	bb 1b       	sub	r27, r27
    3d52:	51 e1       	ldi	r21, 0x11	; 17
    3d54:	07 c0       	rjmp	.+14     	; 0x3d64 <__udivmodhi4_ep>

00003d56 <__udivmodhi4_loop>:
    3d56:	aa 1f       	adc	r26, r26
    3d58:	bb 1f       	adc	r27, r27
    3d5a:	a6 17       	cp	r26, r22
    3d5c:	b7 07       	cpc	r27, r23
    3d5e:	10 f0       	brcs	.+4      	; 0x3d64 <__udivmodhi4_ep>
    3d60:	a6 1b       	sub	r26, r22
    3d62:	b7 0b       	sbc	r27, r23

00003d64 <__udivmodhi4_ep>:
    3d64:	88 1f       	adc	r24, r24
    3d66:	99 1f       	adc	r25, r25
    3d68:	5a 95       	dec	r21
    3d6a:	a9 f7       	brne	.-22     	; 0x3d56 <__udivmodhi4_loop>
    3d6c:	80 95       	com	r24
    3d6e:	90 95       	com	r25
    3d70:	bc 01       	movw	r22, r24
    3d72:	cd 01       	movw	r24, r26
    3d74:	08 95       	ret

00003d76 <__divmodhi4>:
    3d76:	97 fb       	bst	r25, 7
    3d78:	07 2e       	mov	r0, r23
    3d7a:	16 f4       	brtc	.+4      	; 0x3d80 <__divmodhi4+0xa>
    3d7c:	00 94       	com	r0
    3d7e:	07 d0       	rcall	.+14     	; 0x3d8e <__divmodhi4_neg1>
    3d80:	77 fd       	sbrc	r23, 7
    3d82:	09 d0       	rcall	.+18     	; 0x3d96 <__divmodhi4_neg2>
    3d84:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <__udivmodhi4>
    3d88:	07 fc       	sbrc	r0, 7
    3d8a:	05 d0       	rcall	.+10     	; 0x3d96 <__divmodhi4_neg2>
    3d8c:	3e f4       	brtc	.+14     	; 0x3d9c <__divmodhi4_exit>

00003d8e <__divmodhi4_neg1>:
    3d8e:	90 95       	com	r25
    3d90:	81 95       	neg	r24
    3d92:	9f 4f       	sbci	r25, 0xFF	; 255
    3d94:	08 95       	ret

00003d96 <__divmodhi4_neg2>:
    3d96:	70 95       	com	r23
    3d98:	61 95       	neg	r22
    3d9a:	7f 4f       	sbci	r23, 0xFF	; 255

00003d9c <__divmodhi4_exit>:
    3d9c:	08 95       	ret

00003d9e <__udivmodsi4>:
    3d9e:	a1 e2       	ldi	r26, 0x21	; 33
    3da0:	1a 2e       	mov	r1, r26
    3da2:	aa 1b       	sub	r26, r26
    3da4:	bb 1b       	sub	r27, r27
    3da6:	fd 01       	movw	r30, r26
    3da8:	0d c0       	rjmp	.+26     	; 0x3dc4 <__udivmodsi4_ep>

00003daa <__udivmodsi4_loop>:
    3daa:	aa 1f       	adc	r26, r26
    3dac:	bb 1f       	adc	r27, r27
    3dae:	ee 1f       	adc	r30, r30
    3db0:	ff 1f       	adc	r31, r31
    3db2:	a2 17       	cp	r26, r18
    3db4:	b3 07       	cpc	r27, r19
    3db6:	e4 07       	cpc	r30, r20
    3db8:	f5 07       	cpc	r31, r21
    3dba:	20 f0       	brcs	.+8      	; 0x3dc4 <__udivmodsi4_ep>
    3dbc:	a2 1b       	sub	r26, r18
    3dbe:	b3 0b       	sbc	r27, r19
    3dc0:	e4 0b       	sbc	r30, r20
    3dc2:	f5 0b       	sbc	r31, r21

00003dc4 <__udivmodsi4_ep>:
    3dc4:	66 1f       	adc	r22, r22
    3dc6:	77 1f       	adc	r23, r23
    3dc8:	88 1f       	adc	r24, r24
    3dca:	99 1f       	adc	r25, r25
    3dcc:	1a 94       	dec	r1
    3dce:	69 f7       	brne	.-38     	; 0x3daa <__udivmodsi4_loop>
    3dd0:	60 95       	com	r22
    3dd2:	70 95       	com	r23
    3dd4:	80 95       	com	r24
    3dd6:	90 95       	com	r25
    3dd8:	9b 01       	movw	r18, r22
    3dda:	ac 01       	movw	r20, r24
    3ddc:	bd 01       	movw	r22, r26
    3dde:	cf 01       	movw	r24, r30
    3de0:	08 95       	ret

00003de2 <__umulhisi3>:
    3de2:	a2 9f       	mul	r26, r18
    3de4:	b0 01       	movw	r22, r0
    3de6:	b3 9f       	mul	r27, r19
    3de8:	c0 01       	movw	r24, r0
    3dea:	a3 9f       	mul	r26, r19
    3dec:	70 0d       	add	r23, r0
    3dee:	81 1d       	adc	r24, r1
    3df0:	11 24       	eor	r1, r1
    3df2:	91 1d       	adc	r25, r1
    3df4:	b2 9f       	mul	r27, r18
    3df6:	70 0d       	add	r23, r0
    3df8:	81 1d       	adc	r24, r1
    3dfa:	11 24       	eor	r1, r1
    3dfc:	91 1d       	adc	r25, r1
    3dfe:	08 95       	ret

00003e00 <__muluhisi3>:
    3e00:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <__umulhisi3>
    3e04:	a5 9f       	mul	r26, r21
    3e06:	90 0d       	add	r25, r0
    3e08:	b4 9f       	mul	r27, r20
    3e0a:	90 0d       	add	r25, r0
    3e0c:	a4 9f       	mul	r26, r20
    3e0e:	80 0d       	add	r24, r0
    3e10:	91 1d       	adc	r25, r1
    3e12:	11 24       	eor	r1, r1
    3e14:	08 95       	ret

00003e16 <__muldi3>:
    3e16:	df 93       	push	r29
    3e18:	cf 93       	push	r28
    3e1a:	1f 93       	push	r17
    3e1c:	0f 93       	push	r16
    3e1e:	9a 9d       	mul	r25, r10
    3e20:	f0 2d       	mov	r31, r0
    3e22:	21 9f       	mul	r18, r17
    3e24:	f0 0d       	add	r31, r0
    3e26:	8b 9d       	mul	r24, r11
    3e28:	f0 0d       	add	r31, r0
    3e2a:	8a 9d       	mul	r24, r10
    3e2c:	e0 2d       	mov	r30, r0
    3e2e:	f1 0d       	add	r31, r1
    3e30:	03 9f       	mul	r16, r19
    3e32:	f0 0d       	add	r31, r0
    3e34:	02 9f       	mul	r16, r18
    3e36:	e0 0d       	add	r30, r0
    3e38:	f1 1d       	adc	r31, r1
    3e3a:	4e 9d       	mul	r20, r14
    3e3c:	e0 0d       	add	r30, r0
    3e3e:	f1 1d       	adc	r31, r1
    3e40:	5e 9d       	mul	r21, r14
    3e42:	f0 0d       	add	r31, r0
    3e44:	4f 9d       	mul	r20, r15
    3e46:	f0 0d       	add	r31, r0
    3e48:	7f 93       	push	r23
    3e4a:	6f 93       	push	r22
    3e4c:	bf 92       	push	r11
    3e4e:	af 92       	push	r10
    3e50:	5f 93       	push	r21
    3e52:	4f 93       	push	r20
    3e54:	d5 01       	movw	r26, r10
    3e56:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <__umulhisi3>
    3e5a:	8b 01       	movw	r16, r22
    3e5c:	ac 01       	movw	r20, r24
    3e5e:	d7 01       	movw	r26, r14
    3e60:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <__umulhisi3>
    3e64:	eb 01       	movw	r28, r22
    3e66:	e8 0f       	add	r30, r24
    3e68:	f9 1f       	adc	r31, r25
    3e6a:	d6 01       	movw	r26, r12
    3e6c:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <__muldi3_6>
    3e70:	2f 91       	pop	r18
    3e72:	3f 91       	pop	r19
    3e74:	d6 01       	movw	r26, r12
    3e76:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <__umulhisi3>
    3e7a:	c6 0f       	add	r28, r22
    3e7c:	d7 1f       	adc	r29, r23
    3e7e:	e8 1f       	adc	r30, r24
    3e80:	f9 1f       	adc	r31, r25
    3e82:	af 91       	pop	r26
    3e84:	bf 91       	pop	r27
    3e86:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <__muldi3_6>
    3e8a:	2f 91       	pop	r18
    3e8c:	3f 91       	pop	r19
    3e8e:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <__umulhisi3>
    3e92:	c6 0f       	add	r28, r22
    3e94:	d7 1f       	adc	r29, r23
    3e96:	e8 1f       	adc	r30, r24
    3e98:	f9 1f       	adc	r31, r25
    3e9a:	d6 01       	movw	r26, r12
    3e9c:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <__umulhisi3>
    3ea0:	e6 0f       	add	r30, r22
    3ea2:	f7 1f       	adc	r31, r23
    3ea4:	98 01       	movw	r18, r16
    3ea6:	be 01       	movw	r22, r28
    3ea8:	cf 01       	movw	r24, r30
    3eaa:	11 24       	eor	r1, r1
    3eac:	0f 91       	pop	r16
    3eae:	1f 91       	pop	r17
    3eb0:	cf 91       	pop	r28
    3eb2:	df 91       	pop	r29
    3eb4:	08 95       	ret

00003eb6 <__muldi3_6>:
    3eb6:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <__umulhisi3>
    3eba:	46 0f       	add	r20, r22
    3ebc:	57 1f       	adc	r21, r23
    3ebe:	c8 1f       	adc	r28, r24
    3ec0:	d9 1f       	adc	r29, r25
    3ec2:	08 f4       	brcc	.+2      	; 0x3ec6 <__muldi3_6+0x10>
    3ec4:	31 96       	adiw	r30, 0x01	; 1
    3ec6:	08 95       	ret

00003ec8 <__ashldi3>:
    3ec8:	0f 93       	push	r16
    3eca:	08 30       	cpi	r16, 0x08	; 8
    3ecc:	90 f0       	brcs	.+36     	; 0x3ef2 <__ashldi3+0x2a>
    3ece:	98 2f       	mov	r25, r24
    3ed0:	87 2f       	mov	r24, r23
    3ed2:	76 2f       	mov	r23, r22
    3ed4:	65 2f       	mov	r22, r21
    3ed6:	54 2f       	mov	r21, r20
    3ed8:	43 2f       	mov	r20, r19
    3eda:	32 2f       	mov	r19, r18
    3edc:	22 27       	eor	r18, r18
    3ede:	08 50       	subi	r16, 0x08	; 8
    3ee0:	f4 cf       	rjmp	.-24     	; 0x3eca <__ashldi3+0x2>
    3ee2:	22 0f       	add	r18, r18
    3ee4:	33 1f       	adc	r19, r19
    3ee6:	44 1f       	adc	r20, r20
    3ee8:	55 1f       	adc	r21, r21
    3eea:	66 1f       	adc	r22, r22
    3eec:	77 1f       	adc	r23, r23
    3eee:	88 1f       	adc	r24, r24
    3ef0:	99 1f       	adc	r25, r25
    3ef2:	0a 95       	dec	r16
    3ef4:	b2 f7       	brpl	.-20     	; 0x3ee2 <__ashldi3+0x1a>
    3ef6:	0f 91       	pop	r16
    3ef8:	08 95       	ret

00003efa <__ashrdi3>:
    3efa:	97 fb       	bst	r25, 7
    3efc:	10 f8       	bld	r1, 0

00003efe <__lshrdi3>:
    3efe:	16 94       	lsr	r1
    3f00:	00 08       	sbc	r0, r0
    3f02:	0f 93       	push	r16
    3f04:	08 30       	cpi	r16, 0x08	; 8
    3f06:	98 f0       	brcs	.+38     	; 0x3f2e <__lshrdi3+0x30>
    3f08:	08 50       	subi	r16, 0x08	; 8
    3f0a:	23 2f       	mov	r18, r19
    3f0c:	34 2f       	mov	r19, r20
    3f0e:	45 2f       	mov	r20, r21
    3f10:	56 2f       	mov	r21, r22
    3f12:	67 2f       	mov	r22, r23
    3f14:	78 2f       	mov	r23, r24
    3f16:	89 2f       	mov	r24, r25
    3f18:	90 2d       	mov	r25, r0
    3f1a:	f4 cf       	rjmp	.-24     	; 0x3f04 <__lshrdi3+0x6>
    3f1c:	05 94       	asr	r0
    3f1e:	97 95       	ror	r25
    3f20:	87 95       	ror	r24
    3f22:	77 95       	ror	r23
    3f24:	67 95       	ror	r22
    3f26:	57 95       	ror	r21
    3f28:	47 95       	ror	r20
    3f2a:	37 95       	ror	r19
    3f2c:	27 95       	ror	r18
    3f2e:	0a 95       	dec	r16
    3f30:	aa f7       	brpl	.-22     	; 0x3f1c <__lshrdi3+0x1e>
    3f32:	0f 91       	pop	r16
    3f34:	08 95       	ret

00003f36 <__adddi3>:
    3f36:	2a 0d       	add	r18, r10
    3f38:	3b 1d       	adc	r19, r11
    3f3a:	4c 1d       	adc	r20, r12
    3f3c:	5d 1d       	adc	r21, r13
    3f3e:	6e 1d       	adc	r22, r14
    3f40:	7f 1d       	adc	r23, r15
    3f42:	80 1f       	adc	r24, r16
    3f44:	91 1f       	adc	r25, r17
    3f46:	08 95       	ret

00003f48 <__adddi3_s8>:
    3f48:	00 24       	eor	r0, r0
    3f4a:	a7 fd       	sbrc	r26, 7
    3f4c:	00 94       	com	r0
    3f4e:	2a 0f       	add	r18, r26
    3f50:	30 1d       	adc	r19, r0
    3f52:	40 1d       	adc	r20, r0
    3f54:	50 1d       	adc	r21, r0
    3f56:	60 1d       	adc	r22, r0
    3f58:	70 1d       	adc	r23, r0
    3f5a:	80 1d       	adc	r24, r0
    3f5c:	90 1d       	adc	r25, r0
    3f5e:	08 95       	ret

00003f60 <__subdi3>:
    3f60:	2a 19       	sub	r18, r10
    3f62:	3b 09       	sbc	r19, r11
    3f64:	4c 09       	sbc	r20, r12
    3f66:	5d 09       	sbc	r21, r13
    3f68:	6e 09       	sbc	r22, r14
    3f6a:	7f 09       	sbc	r23, r15
    3f6c:	80 0b       	sbc	r24, r16
    3f6e:	91 0b       	sbc	r25, r17
    3f70:	08 95       	ret

00003f72 <__cmpdi2>:
    3f72:	2a 15       	cp	r18, r10
    3f74:	3b 05       	cpc	r19, r11
    3f76:	4c 05       	cpc	r20, r12
    3f78:	5d 05       	cpc	r21, r13
    3f7a:	6e 05       	cpc	r22, r14
    3f7c:	7f 05       	cpc	r23, r15
    3f7e:	80 07       	cpc	r24, r16
    3f80:	91 07       	cpc	r25, r17
    3f82:	08 95       	ret

00003f84 <__cmpdi2_s8>:
    3f84:	00 24       	eor	r0, r0
    3f86:	a7 fd       	sbrc	r26, 7
    3f88:	00 94       	com	r0
    3f8a:	2a 17       	cp	r18, r26
    3f8c:	30 05       	cpc	r19, r0
    3f8e:	40 05       	cpc	r20, r0
    3f90:	50 05       	cpc	r21, r0
    3f92:	60 05       	cpc	r22, r0
    3f94:	70 05       	cpc	r23, r0
    3f96:	80 05       	cpc	r24, r0
    3f98:	90 05       	cpc	r25, r0
    3f9a:	08 95       	ret

00003f9c <memcpy>:
    3f9c:	fb 01       	movw	r30, r22
    3f9e:	dc 01       	movw	r26, r24
    3fa0:	02 c0       	rjmp	.+4      	; 0x3fa6 <memcpy+0xa>
    3fa2:	01 90       	ld	r0, Z+
    3fa4:	0d 92       	st	X+, r0
    3fa6:	41 50       	subi	r20, 0x01	; 1
    3fa8:	50 40       	sbci	r21, 0x00	; 0
    3faa:	d8 f7       	brcc	.-10     	; 0x3fa2 <memcpy+0x6>
    3fac:	08 95       	ret

00003fae <memset>:
    3fae:	dc 01       	movw	r26, r24
    3fb0:	01 c0       	rjmp	.+2      	; 0x3fb4 <memset+0x6>
    3fb2:	6d 93       	st	X+, r22
    3fb4:	41 50       	subi	r20, 0x01	; 1
    3fb6:	50 40       	sbci	r21, 0x00	; 0
    3fb8:	e0 f7       	brcc	.-8      	; 0x3fb2 <memset+0x4>
    3fba:	08 95       	ret

00003fbc <strchr>:
    3fbc:	fc 01       	movw	r30, r24
    3fbe:	81 91       	ld	r24, Z+
    3fc0:	86 17       	cp	r24, r22
    3fc2:	21 f0       	breq	.+8      	; 0x3fcc <strchr+0x10>
    3fc4:	88 23       	and	r24, r24
    3fc6:	d9 f7       	brne	.-10     	; 0x3fbe <strchr+0x2>
    3fc8:	99 27       	eor	r25, r25
    3fca:	08 95       	ret
    3fcc:	31 97       	sbiw	r30, 0x01	; 1
    3fce:	cf 01       	movw	r24, r30
    3fd0:	08 95       	ret

00003fd2 <strcmp>:
    3fd2:	fb 01       	movw	r30, r22
    3fd4:	dc 01       	movw	r26, r24
    3fd6:	8d 91       	ld	r24, X+
    3fd8:	01 90       	ld	r0, Z+
    3fda:	80 19       	sub	r24, r0
    3fdc:	01 10       	cpse	r0, r1
    3fde:	d9 f3       	breq	.-10     	; 0x3fd6 <strcmp+0x4>
    3fe0:	99 0b       	sbc	r25, r25
    3fe2:	08 95       	ret

00003fe4 <strncmp>:
    3fe4:	fb 01       	movw	r30, r22
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	41 50       	subi	r20, 0x01	; 1
    3fea:	50 40       	sbci	r21, 0x00	; 0
    3fec:	30 f0       	brcs	.+12     	; 0x3ffa <strncmp+0x16>
    3fee:	8d 91       	ld	r24, X+
    3ff0:	01 90       	ld	r0, Z+
    3ff2:	80 19       	sub	r24, r0
    3ff4:	19 f4       	brne	.+6      	; 0x3ffc <strncmp+0x18>
    3ff6:	00 20       	and	r0, r0
    3ff8:	b9 f7       	brne	.-18     	; 0x3fe8 <strncmp+0x4>
    3ffa:	88 1b       	sub	r24, r24
    3ffc:	99 0b       	sbc	r25, r25
    3ffe:	08 95       	ret

00004000 <strncpy>:
    4000:	fb 01       	movw	r30, r22
    4002:	dc 01       	movw	r26, r24
    4004:	41 50       	subi	r20, 0x01	; 1
    4006:	50 40       	sbci	r21, 0x00	; 0
    4008:	48 f0       	brcs	.+18     	; 0x401c <strncpy+0x1c>
    400a:	01 90       	ld	r0, Z+
    400c:	0d 92       	st	X+, r0
    400e:	00 20       	and	r0, r0
    4010:	c9 f7       	brne	.-14     	; 0x4004 <strncpy+0x4>
    4012:	01 c0       	rjmp	.+2      	; 0x4016 <strncpy+0x16>
    4014:	1d 92       	st	X+, r1
    4016:	41 50       	subi	r20, 0x01	; 1
    4018:	50 40       	sbci	r21, 0x00	; 0
    401a:	e0 f7       	brcc	.-8      	; 0x4014 <strncpy+0x14>
    401c:	08 95       	ret

0000401e <strrchr>:
    401e:	fc 01       	movw	r30, r24
    4020:	81 e0       	ldi	r24, 0x01	; 1
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	01 90       	ld	r0, Z+
    4026:	06 16       	cp	r0, r22
    4028:	09 f4       	brne	.+2      	; 0x402c <strrchr+0xe>
    402a:	cf 01       	movw	r24, r30
    402c:	00 20       	and	r0, r0
    402e:	d1 f7       	brne	.-12     	; 0x4024 <strrchr+0x6>
    4030:	01 97       	sbiw	r24, 0x01	; 1
    4032:	08 95       	ret

00004034 <_exit>:
    4034:	f8 94       	cli

00004036 <__stop_program>:
    4036:	ff cf       	rjmp	.-2      	; 0x4036 <__stop_program>
