
uSD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00003cee  00003d82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003cee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c8  00800110  00800110  00003d92  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003d92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003dc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00003e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005a7c  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001115  00000000  00000000  00009b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029f2  00000000  00000000  0000ac1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d8c  00000000  00000000  0000d610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f13  00000000  00000000  0000e39c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005ecb  00000000  00000000  0000f2af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  0001517a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__ctors_end>
       4:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
       8:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
       c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      10:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      14:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      18:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      1c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      20:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      24:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      28:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      2c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      30:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      34:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      38:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      3c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      40:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      44:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      48:	0c 94 97 1d 	jmp	0x3b2e	; 0x3b2e <__vector_18>
      4c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      50:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      54:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      58:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      5c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      60:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      64:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      68:	89 1b       	sub	r24, r25
      6a:	8c 1b       	sub	r24, r28
      6c:	8c 1b       	sub	r24, r28
      6e:	90 1b       	sub	r25, r16
      70:	90 1b       	sub	r25, r16
      72:	90 1b       	sub	r25, r16
      74:	90 1b       	sub	r25, r16
      76:	90 1b       	sub	r25, r16
      78:	92 1b       	sub	r25, r18
      7a:	95 1b       	sub	r25, r21
      7c:	95 1b       	sub	r25, r21
      7e:	95 1b       	sub	r25, r21
      80:	95 1b       	sub	r25, r21
      82:	ae 1b       	sub	r26, r30
      84:	b3 1b       	sub	r27, r19

00000086 <__trampolines_end>:
      86:	66 72       	andi	r22, 0x26	; 38
      88:	65 65       	ori	r22, 0x55	; 85
      8a:	3a 20       	and	r3, r10
      8c:	20 20       	and	r2, r0
	...

0000008f <__c.2148>:
      8f:	66 6f 72 6d 61 74 3a 20 00                          format: .

00000098 <__c.2146>:
      98:	77 72 2e 70 72 2e 3a 20 00                          wr.pr.: .

000000a1 <__c.2144>:
      a1:	63 6f 70 79 3a 20 20 20 00                          copy:   .

000000aa <__c.2142>:
      aa:	4d 42 0a 00                                         MB..

000000ae <__c.2140>:
      ae:	73 69 7a 65 3a 20 20 20 00                          size:   .

000000b7 <__c.2138>:
      b7:	64 61 74 65 3a 20 20 20 00                          date:   .

000000c0 <__c.2136>:
      c0:	73 65 72 69 61 6c 3a 20 30 78 00                    serial: 0x.

000000cb <__c.2134>:
      cb:	72 65 76 3a 20 20 20 20 00                          rev:    .

000000d4 <__c.2132>:
      d4:	70 72 6f 64 3a 20 20 20 00                          prod:   .

000000dd <__c.2130>:
      dd:	6f 65 6d 3a 20 20 20 20 00                          oem:    .

000000e6 <__c.2128>:
      e6:	6d 61 6e 75 66 3a 20 20 30 78 00                    manuf:  0x.

000000f1 <__c.2089>:
      f1:	75 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 3a     unknown command:
     101:	20 00                                                .

00000103 <__c.2087>:
     103:	65 72 72 6f 72 20 73 79 6e 63 69 6e 67 20 64 69     error syncing di
     113:	73 6b 0a 00                                         sk..

00000117 <__c.2085>:
     117:	73 79 6e 63 00                                      sync.

0000011c <__c.2083>:
     11c:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 64     error creating d
     12c:	69 72 65 63 74 6f 72 79 3a 20 00                    irectory: .

00000137 <__c.2080>:
     137:	6d 6b 64 69 72 20 00                                mkdir .

0000013e <__c.2077>:
     13e:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     14e:	20 66 69 6c 65 0a 00                                 file..

00000155 <__c.2073>:
     155:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
     165:	20 00                                                .

00000167 <__c.2070>:
     167:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

00000176 <__c.2063>:
     176:	77 72 69 74 65 20 00                                write .

0000017d <__c.2061>:
     17d:	65 72 72 6f 72 20 6d 6f 76 69 6e 67 20 66 69 6c     error moving fil
     18d:	65 3a 20 00                                         e: .

00000191 <__c.2054>:
     191:	6d 76 20 00                                         mv .

00000195 <__c.2052>:
     195:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 66     error creating f
     1a5:	69 6c 65 3a 20 00                                   ile: .

000001ab <__c.2049>:
     1ab:	74 6f 75 63 68 20 00                                touch .

000001b2 <__c.2047>:
     1b2:	65 72 72 6f 72 20 64 65 6c 65 74 69 6e 67 20 66     error deleting f
     1c2:	69 6c 65 3a 20 00                                   ile: .

000001c8 <__c.2044>:
     1c8:	72 6d 20 00                                         rm .

000001cc <__c.2042>:
     1cc:	65 72 72 6f 72 20 72 65 61 64 69 6e 67 20 64 69     error reading di
     1dc:	73 6b 20 69 6e 66 6f 0a 00                          sk info..

000001e5 <__c.2040>:
     1e5:	64 69 73 6b 00                                      disk.

000001ea <__c.2028>:
     1ea:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

000001f9 <__c.2025>:
     1f9:	63 61 74 20 00                                      cat .

000001fe <__c.2015>:
     1fe:	6c 73 00                                            ls.

00000201 <__c.2013>:
     201:	64 69 72 65 63 74 6f 72 79 20 6e 6f 74 20 66 6f     directory not fo
     211:	75 6e 64 3a 20 00                                   und: .

00000217 <__c.2009>:
     217:	63 64 20 00                                         cd .

0000021b <__c.2006>:
     21b:	69 6e 69 74 00                                      init.

00000220 <__c.2001>:
     220:	6f 70 65 6e 69 6e 67 20 72 6f 6f 74 20 64 69 72     opening root dir
     230:	65 63 74 6f 72 79 20 66 61 69 6c 65 64 0a 00        ectory failed..

0000023f <__c.1997>:
     23f:	6f 70 65 6e 69 6e 67 20 66 69 6c 65 73 79 73 74     opening filesyst
     24f:	65 6d 20 66 61 69 6c 65 64 0a 00                    em failed..

0000025a <__c.1994>:
     25a:	6f 70 65 6e 69 6e 67 20 70 61 72 74 69 74 69 6f     opening partitio
     26a:	6e 20 66 61 69 6c 65 64 0a 00                       n failed..

00000274 <__c.1991>:
     274:	77 6f 72 6b 69 6e 67 3f 0a 00                       working?..

0000027e <__c.1988>:
     27e:	4d 4d 43 2f 53 44 20 69 6e 69 74 69 61 6c 69 7a     MMC/SD initializ
     28e:	61 74 69 6f 6e 20 66 61 69 6c 65 64 0a 00           ation failed..

0000029c <__ctors_end>:
     29c:	11 24       	eor	r1, r1
     29e:	1f be       	out	0x3f, r1	; 63
     2a0:	cf ef       	ldi	r28, 0xFF	; 255
     2a2:	d8 e0       	ldi	r29, 0x08	; 8
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	cd bf       	out	0x3d, r28	; 61

000002a8 <__do_copy_data>:
     2a8:	11 e0       	ldi	r17, 0x01	; 1
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b1 e0       	ldi	r27, 0x01	; 1
     2ae:	ee ee       	ldi	r30, 0xEE	; 238
     2b0:	fc e3       	ldi	r31, 0x3C	; 60
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <__do_copy_data+0x10>
     2b4:	05 90       	lpm	r0, Z+
     2b6:	0d 92       	st	X+, r0
     2b8:	a0 31       	cpi	r26, 0x10	; 16
     2ba:	b1 07       	cpc	r27, r17
     2bc:	d9 f7       	brne	.-10     	; 0x2b4 <__do_copy_data+0xc>

000002be <__do_clear_bss>:
     2be:	23 e0       	ldi	r18, 0x03	; 3
     2c0:	a0 e1       	ldi	r26, 0x10	; 16
     2c2:	b1 e0       	ldi	r27, 0x01	; 1
     2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <.do_clear_bss_start>

000002c6 <.do_clear_bss_loop>:
     2c6:	1d 92       	st	X+, r1

000002c8 <.do_clear_bss_start>:
     2c8:	a8 3d       	cpi	r26, 0xD8	; 216
     2ca:	b2 07       	cpc	r27, r18
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <.do_clear_bss_loop>
     2ce:	0e 94 bb 13 	call	0x2776	; 0x2776 <main>
     2d2:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <_exit>

000002d6 <__bad_interrupt>:
     2d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002da <read16>:
 * \param[in] p Pointer from where to read the integer.
 * \returns The 16-bit integer read from memory.
 */
uint16_t read16(const uint8_t* p)
{
    return (((uint16_t) p[1]) << 8) |
     2da:	fc 01       	movw	r30, r24
     2dc:	21 81       	ldd	r18, Z+1	; 0x01
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	32 2f       	mov	r19, r18
     2e2:	22 27       	eor	r18, r18
           (((uint16_t) p[0]) << 0);
     2e4:	80 81       	ld	r24, Z
}
     2e6:	a9 01       	movw	r20, r18
     2e8:	48 2b       	or	r20, r24
     2ea:	ca 01       	movw	r24, r20
     2ec:	08 95       	ret

000002ee <read32>:
 *
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
     2ee:	fc 01       	movw	r30, r24
    return (((uint32_t) p[3]) << 24) |
     2f0:	23 81       	ldd	r18, Z+3	; 0x03
           (((uint32_t) p[2]) << 16) |
     2f2:	62 81       	ldd	r22, Z+2	; 0x02
     2f4:	86 2f       	mov	r24, r22
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	a0 e0       	ldi	r26, 0x00	; 0
     2fa:	b0 e0       	ldi	r27, 0x00	; 0
     2fc:	dc 01       	movw	r26, r24
     2fe:	99 27       	eor	r25, r25
     300:	88 27       	eor	r24, r24
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
     302:	b2 2b       	or	r27, r18
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
     304:	20 81       	ld	r18, Z
     306:	82 2b       	or	r24, r18
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
     308:	21 81       	ldd	r18, Z+1	; 0x01
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
     30a:	bc 01       	movw	r22, r24
     30c:	cd 01       	movw	r24, r26
     30e:	72 2b       	or	r23, r18
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
}
     310:	08 95       	ret

00000312 <write16>:
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 16-bit integer to write.
 */
void write16(uint8_t* p, uint16_t i)
{
    p[1] = (uint8_t) ((i & 0xff00) >> 8);
     312:	fc 01       	movw	r30, r24
     314:	71 83       	std	Z+1, r23	; 0x01
    p[0] = (uint8_t) ((i & 0x00ff) >> 0);
     316:	60 83       	st	Z, r22
     318:	08 95       	ret

0000031a <write32>:
 *
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 32-bit integer to write.
 */
void write32(uint8_t* p, uint32_t i)
{
     31a:	fc 01       	movw	r30, r24
    p[3] = (uint8_t) ((i & 0xff000000) >> 24);
     31c:	73 83       	std	Z+3, r23	; 0x03
    p[2] = (uint8_t) ((i & 0x00ff0000) >> 16);
     31e:	62 83       	std	Z+2, r22	; 0x02
    p[1] = (uint8_t) ((i & 0x0000ff00) >>  8);
     320:	51 83       	std	Z+1, r21	; 0x01
    p[0] = (uint8_t) ((i & 0x000000ff) >>  0);
     322:	40 83       	st	Z, r20
     324:	08 95       	ret

00000326 <fat_get_next_cluster>:
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	00 d0       	rcall	.+0      	; 0x330 <fat_get_next_cluster+0xa>
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
    if(!fs || cluster_num < 2)
     334:	00 97       	sbiw	r24, 0x00	; 0
     336:	61 f1       	breq	.+88     	; 0x390 <fat_get_next_cluster+0x6a>
     338:	62 30       	cpi	r22, 0x02	; 2
     33a:	71 05       	cpc	r23, r1
     33c:	60 f1       	brcs	.+88     	; 0x396 <fat_get_next_cluster+0x70>
     33e:	fc 01       	movw	r30, r24
    else
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
     340:	a0 81       	ld	r26, Z
     342:	b1 81       	ldd	r27, Z+1	; 0x01
     344:	ab 01       	movw	r20, r22
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	44 0f       	add	r20, r20
     34c:	55 1f       	adc	r21, r21
     34e:	66 1f       	adc	r22, r22
     350:	77 1f       	adc	r23, r23
     352:	06 81       	ldd	r16, Z+6	; 0x06
     354:	17 81       	ldd	r17, Z+7	; 0x07
     356:	20 85       	ldd	r18, Z+8	; 0x08
     358:	31 85       	ldd	r19, Z+9	; 0x09
     35a:	cb 01       	movw	r24, r22
     35c:	ba 01       	movw	r22, r20
     35e:	60 0f       	add	r22, r16
     360:	71 1f       	adc	r23, r17
     362:	82 1f       	adc	r24, r18
     364:	93 1f       	adc	r25, r19
     366:	ed 91       	ld	r30, X+
     368:	fc 91       	ld	r31, X
     36a:	22 e0       	ldi	r18, 0x02	; 2
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	ae 01       	movw	r20, r28
     370:	4f 5f       	subi	r20, 0xFF	; 255
     372:	5f 4f       	sbci	r21, 0xFF	; 255
     374:	09 95       	icall
     376:	88 23       	and	r24, r24
     378:	41 f0       	breq	.+16     	; 0x38a <fat_get_next_cluster+0x64>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	9a 81       	ldd	r25, Y+2	; 0x02
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
     37e:	9c 01       	movw	r18, r24
     380:	21 50       	subi	r18, 0x01	; 1
     382:	31 09       	sbc	r19, r1
     384:	2f 3e       	cpi	r18, 0xEF	; 239
     386:	3f 4f       	sbci	r19, 0xFF	; 255
     388:	40 f0       	brcs	.+16     	; 0x39a <fat_get_next_cluster+0x74>
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
            return 0;
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	05 c0       	rjmp	.+10     	; 0x39a <fat_get_next_cluster+0x74>
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	02 c0       	rjmp	.+4      	; 0x39a <fat_get_next_cluster+0x74>
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    }

    return cluster_num;
}
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	08 95       	ret

000003a8 <fat_free_clusters>:
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
     3a8:	4f 92       	push	r4
     3aa:	5f 92       	push	r5
     3ac:	6f 92       	push	r6
     3ae:	7f 92       	push	r7
     3b0:	af 92       	push	r10
     3b2:	bf 92       	push	r11
     3b4:	cf 92       	push	r12
     3b6:	df 92       	push	r13
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	00 d0       	rcall	.+0      	; 0x3c6 <fat_free_clusters+0x1e>
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	5c 01       	movw	r10, r24
     3cc:	8b 01       	movw	r16, r22
    if(!fs || cluster_num < 2)
     3ce:	00 97       	sbiw	r24, 0x00	; 0
     3d0:	d9 f1       	breq	.+118    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     3d2:	62 30       	cpi	r22, 0x02	; 2
     3d4:	71 05       	cpc	r23, r1
     3d6:	d0 f1       	brcs	.+116    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
     3d8:	dc 01       	movw	r26, r24
     3da:	16 96       	adiw	r26, 0x06	; 6
     3dc:	4d 90       	ld	r4, X+
     3de:	5d 90       	ld	r5, X+
     3e0:	6d 90       	ld	r6, X+
     3e2:	7c 90       	ld	r7, X
     3e4:	19 97       	sbiw	r26, 0x09	; 9
    }
    else
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
     3e6:	67 2b       	or	r22, r23
     3e8:	49 f1       	breq	.+82     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
        {
            if(!fs->partition->device_read(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
     3ea:	68 01       	movw	r12, r16
     3ec:	e1 2c       	mov	r14, r1
     3ee:	f1 2c       	mov	r15, r1
     3f0:	cc 0c       	add	r12, r12
     3f2:	dd 1c       	adc	r13, r13
     3f4:	ee 1c       	adc	r14, r14
     3f6:	ff 1c       	adc	r15, r15
     3f8:	c4 0c       	add	r12, r4
     3fa:	d5 1c       	adc	r13, r5
     3fc:	e6 1c       	adc	r14, r6
     3fe:	f7 1c       	adc	r15, r7
     400:	d5 01       	movw	r26, r10
     402:	ed 91       	ld	r30, X+
     404:	fc 91       	ld	r31, X
     406:	01 90       	ld	r0, Z+
     408:	f0 81       	ld	r31, Z
     40a:	e0 2d       	mov	r30, r0
     40c:	22 e0       	ldi	r18, 0x02	; 2
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	ae 01       	movw	r20, r28
     412:	4f 5f       	subi	r20, 0xFF	; 255
     414:	5f 4f       	sbci	r21, 0xFF	; 255
     416:	c7 01       	movw	r24, r14
     418:	b6 01       	movw	r22, r12
     41a:	09 95       	icall
     41c:	88 23       	and	r24, r24
     41e:	d1 f1       	breq	.+116    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);
     420:	09 81       	ldd	r16, Y+1	; 0x01
     422:	1a 81       	ldd	r17, Y+2	; 0x02

            if(cluster_num_next == FAT16_CLUSTER_FREE)
     424:	01 15       	cp	r16, r1
     426:	11 05       	cpc	r17, r1
     428:	59 f0       	breq	.+22     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
     42a:	c8 01       	movw	r24, r16
     42c:	40 96       	adiw	r24, 0x10	; 16
     42e:	08 97       	sbiw	r24, 0x08	; 8
     430:	48 f0       	brcs	.+18     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
     432:	08 3f       	cpi	r16, 0xF8	; 248
     434:	bf ef       	ldi	r27, 0xFF	; 255
     436:	1b 07       	cpc	r17, r27
     438:	e0 f4       	brcc	.+56     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>

            cluster_num = cluster_num_next;
        }
    }

    return 1;
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	2a c0       	rjmp	.+84     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);

            if(cluster_num_next == FAT16_CLUSTER_FREE)
                return 1;
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	28 c0       	rjmp	.+80     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	26 c0       	rjmp	.+76     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	24 c0       	rjmp	.+72     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	22 c0       	rjmp	.+68     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
     450:	1a 82       	std	Y+2, r1	; 0x02
     452:	19 82       	std	Y+1, r1	; 0x01
            fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
     454:	d5 01       	movw	r26, r10
     456:	ed 91       	ld	r30, X+
     458:	fc 91       	ld	r31, X
     45a:	04 80       	ldd	r0, Z+4	; 0x04
     45c:	f5 81       	ldd	r31, Z+5	; 0x05
     45e:	e0 2d       	mov	r30, r0
     460:	22 e0       	ldi	r18, 0x02	; 2
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	ae 01       	movw	r20, r28
     466:	4f 5f       	subi	r20, 0xFF	; 255
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	c7 01       	movw	r24, r14
     46c:	b6 01       	movw	r22, r12
     46e:	09 95       	icall
     470:	bc cf       	rjmp	.-136    	; 0x3ea <fat_free_clusters+0x42>
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
     472:	1a 82       	std	Y+2, r1	; 0x02
     474:	19 82       	std	Y+1, r1	; 0x01
            fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
     476:	d5 01       	movw	r26, r10
     478:	ed 91       	ld	r30, X+
     47a:	fc 91       	ld	r31, X
     47c:	04 80       	ldd	r0, Z+4	; 0x04
     47e:	f5 81       	ldd	r31, Z+5	; 0x05
     480:	e0 2d       	mov	r30, r0
     482:	22 e0       	ldi	r18, 0x02	; 2
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	ae 01       	movw	r20, r28
     488:	4f 5f       	subi	r20, 0xFF	; 255
     48a:	5f 4f       	sbci	r21, 0xFF	; 255
     48c:	c7 01       	movw	r24, r14
     48e:	b6 01       	movw	r22, r12
     490:	09 95       	icall
     492:	d4 cf       	rjmp	.-88     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
            cluster_num = cluster_num_next;
        }
    }

    return 1;
}
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	ff 90       	pop	r15
     4a2:	ef 90       	pop	r14
     4a4:	df 90       	pop	r13
     4a6:	cf 90       	pop	r12
     4a8:	bf 90       	pop	r11
     4aa:	af 90       	pop	r10
     4ac:	7f 90       	pop	r7
     4ae:	6f 90       	pop	r6
     4b0:	5f 90       	pop	r5
     4b2:	4f 90       	pop	r4
     4b4:	08 95       	ret

000004b6 <fat_append_clusters>:
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
     4b6:	2f 92       	push	r2
     4b8:	3f 92       	push	r3
     4ba:	4f 92       	push	r4
     4bc:	5f 92       	push	r5
     4be:	6f 92       	push	r6
     4c0:	7f 92       	push	r7
     4c2:	8f 92       	push	r8
     4c4:	9f 92       	push	r9
     4c6:	af 92       	push	r10
     4c8:	bf 92       	push	r11
     4ca:	cf 92       	push	r12
     4cc:	df 92       	push	r13
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	2e 97       	sbiw	r28, 0x0e	; 14
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	de bf       	out	0x3e, r29	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	cd bf       	out	0x3d, r28	; 61
     4ea:	9c 87       	std	Y+12, r25	; 0x0c
     4ec:	8b 87       	std	Y+11, r24	; 0x0b
     4ee:	7e 87       	std	Y+14, r23	; 0x0e
     4f0:	6d 87       	std	Y+13, r22	; 0x0d
     4f2:	6a 01       	movw	r12, r20
    if(!fs)
     4f4:	00 97       	sbiw	r24, 0x00	; 0
     4f6:	09 f4       	brne	.+2      	; 0x4fa <fat_append_clusters+0x44>
     4f8:	bf c0       	rjmp	.+382    	; 0x678 <fat_append_clusters+0x1c2>
        return 0;

    device_read_t device_read = fs->partition->device_read;
     4fa:	dc 01       	movw	r26, r24
     4fc:	ed 91       	ld	r30, X+
     4fe:	fc 91       	ld	r31, X
     500:	11 97       	sbiw	r26, 0x01	; 1
     502:	20 81       	ld	r18, Z
     504:	31 81       	ldd	r19, Z+1	; 0x01
     506:	3e 83       	std	Y+6, r19	; 0x06
     508:	2d 83       	std	Y+5, r18	; 0x05
    device_write_t device_write = fs->partition->device_write;
     50a:	84 81       	ldd	r24, Z+4	; 0x04
     50c:	95 81       	ldd	r25, Z+5	; 0x05
     50e:	9a 87       	std	Y+10, r25	; 0x0a
     510:	89 87       	std	Y+9, r24	; 0x09
    offset_t fat_offset = fs->header.fat_offset;
     512:	16 96       	adiw	r26, 0x06	; 6
     514:	8d 90       	ld	r8, X+
     516:	9d 90       	ld	r9, X+
     518:	ad 90       	ld	r10, X+
     51a:	bc 90       	ld	r11, X
     51c:	19 97       	sbiw	r26, 0x09	; 9
    cluster_t count_left = count;
    cluster_t cluster_current = fs->cluster_free;
     51e:	5a 96       	adiw	r26, 0x1a	; 26
     520:	0d 91       	ld	r16, X+
     522:	1c 91       	ld	r17, X
     524:	5b 97       	sbiw	r26, 0x1b	; 27

    if(is_fat32)
        cluster_count = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);
     526:	fd 01       	movw	r30, r26
     528:	82 85       	ldd	r24, Z+10	; 0x0a
     52a:	93 85       	ldd	r25, Z+11	; 0x0b
     52c:	a4 85       	ldd	r26, Z+12	; 0x0c
     52e:	b5 85       	ldd	r27, Z+13	; 0x0d
     530:	b6 95       	lsr	r27
     532:	a7 95       	ror	r26
     534:	97 95       	ror	r25
     536:	87 95       	ror	r24
     538:	98 87       	std	Y+8, r25	; 0x08
     53a:	8f 83       	std	Y+7, r24	; 0x07

    fs->cluster_free = 0;
     53c:	13 8e       	std	Z+27, r1	; 0x1b
     53e:	12 8e       	std	Z+26, r1	; 0x1a
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
     540:	00 97       	sbiw	r24, 0x00	; 0
     542:	09 f4       	brne	.+2      	; 0x546 <fat_append_clusters+0x90>
     544:	6a c0       	rjmp	.+212    	; 0x61a <fat_append_clusters+0x164>
     546:	1c 82       	std	Y+4, r1	; 0x04
     548:	1b 82       	std	Y+3, r1	; 0x03
    {
        if(cluster_current < 2 || cluster_current >= cluster_count)
            cluster_current = 2;
     54a:	68 94       	set
     54c:	22 24       	eor	r2, r2
     54e:	21 f8       	bld	r2, 1
     550:	31 2c       	mov	r3, r1
                break;
            }

            /* allocate cluster */
            if(cluster_next == 0)
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
     552:	24 01       	movw	r4, r8
     554:	35 01       	movw	r6, r10
     556:	5c 01       	movw	r10, r24
     558:	4a 01       	movw	r8, r20
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
    {
        if(cluster_current < 2 || cluster_current >= cluster_count)
     55a:	02 30       	cpi	r16, 0x02	; 2
     55c:	11 05       	cpc	r17, r1
     55e:	40 f0       	brcs	.+16     	; 0x570 <fat_append_clusters+0xba>
     560:	8f 81       	ldd	r24, Y+7	; 0x07
     562:	98 85       	ldd	r25, Y+8	; 0x08
     564:	08 17       	cp	r16, r24
     566:	19 07       	cpc	r17, r25
     568:	28 f0       	brcs	.+10     	; 0x574 <fat_append_clusters+0xbe>
            cluster_current = 2;
     56a:	02 2d       	mov	r16, r2
     56c:	13 2d       	mov	r17, r3
     56e:	02 c0       	rjmp	.+4      	; 0x574 <fat_append_clusters+0xbe>
     570:	02 2d       	mov	r16, r2
     572:	13 2d       	mov	r17, r3
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
     574:	68 01       	movw	r12, r16
     576:	e1 2c       	mov	r14, r1
     578:	f1 2c       	mov	r15, r1
     57a:	cc 0c       	add	r12, r12
     57c:	dd 1c       	adc	r13, r13
     57e:	ee 1c       	adc	r14, r14
     580:	ff 1c       	adc	r15, r15
     582:	c4 0c       	add	r12, r4
     584:	d5 1c       	adc	r13, r5
     586:	e6 1c       	adc	r14, r6
     588:	f7 1c       	adc	r15, r7
     58a:	22 2d       	mov	r18, r2
     58c:	33 2d       	mov	r19, r3
     58e:	ae 01       	movw	r20, r28
     590:	4f 5f       	subi	r20, 0xFF	; 255
     592:	5f 4f       	sbci	r21, 0xFF	; 255
     594:	c7 01       	movw	r24, r14
     596:	b6 01       	movw	r22, r12
     598:	ed 81       	ldd	r30, Y+5	; 0x05
     59a:	fe 81       	ldd	r31, Y+6	; 0x06
     59c:	09 95       	icall
     59e:	88 23       	and	r24, r24
     5a0:	09 f4       	brne	.+2      	; 0x5a4 <fat_append_clusters+0xee>
     5a2:	6d c0       	rjmp	.+218    	; 0x67e <fat_append_clusters+0x1c8>
        }
        else
#endif
        {
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
     5a4:	89 81       	ldd	r24, Y+1	; 0x01
     5a6:	9a 81       	ldd	r25, Y+2	; 0x02
     5a8:	89 2b       	or	r24, r25
     5aa:	51 f5       	brne	.+84     	; 0x600 <fat_append_clusters+0x14a>

            /* If we don't need this free cluster for the
             * current allocation, we keep it in mind for
             * the next time.
             */
            if(count_left == 0)
     5ac:	81 14       	cp	r8, r1
     5ae:	91 04       	cpc	r9, r1
     5b0:	49 f4       	brne	.+18     	; 0x5c4 <fat_append_clusters+0x10e>
     5b2:	53 01       	movw	r10, r6
     5b4:	42 01       	movw	r8, r4
            {
                fs->cluster_free = cluster_current;
     5b6:	ab 85       	ldd	r26, Y+11	; 0x0b
     5b8:	bc 85       	ldd	r27, Y+12	; 0x0c
     5ba:	5b 96       	adiw	r26, 0x1b	; 27
     5bc:	1c 93       	st	X, r17
     5be:	0e 93       	st	-X, r16
     5c0:	5a 97       	sbiw	r26, 0x1a	; 26
     5c2:	2f c0       	rjmp	.+94     	; 0x622 <fat_append_clusters+0x16c>
                break;
            }

            /* allocate cluster */
            if(cluster_next == 0)
     5c4:	eb 81       	ldd	r30, Y+3	; 0x03
     5c6:	fc 81       	ldd	r31, Y+4	; 0x04
     5c8:	ef 2b       	or	r30, r31
     5ca:	29 f4       	brne	.+10     	; 0x5d6 <fat_append_clusters+0x120>
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
     5cc:	2f ef       	ldi	r18, 0xFF	; 255
     5ce:	3f ef       	ldi	r19, 0xFF	; 255
     5d0:	3a 83       	std	Y+2, r19	; 0x02
     5d2:	29 83       	std	Y+1, r18	; 0x01
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <fat_append_clusters+0x128>
            else
                fat_entry16 = htol16((uint16_t) cluster_next);
     5d6:	8b 81       	ldd	r24, Y+3	; 0x03
     5d8:	9c 81       	ldd	r25, Y+4	; 0x04
     5da:	9a 83       	std	Y+2, r25	; 0x02
     5dc:	89 83       	std	Y+1, r24	; 0x01

            if(!device_write(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
     5de:	22 2d       	mov	r18, r2
     5e0:	33 2d       	mov	r19, r3
     5e2:	ae 01       	movw	r20, r28
     5e4:	4f 5f       	subi	r20, 0xFF	; 255
     5e6:	5f 4f       	sbci	r21, 0xFF	; 255
     5e8:	c7 01       	movw	r24, r14
     5ea:	b6 01       	movw	r22, r12
     5ec:	e9 85       	ldd	r30, Y+9	; 0x09
     5ee:	fa 85       	ldd	r31, Y+10	; 0x0a
     5f0:	09 95       	icall
     5f2:	88 23       	and	r24, r24
     5f4:	c1 f1       	breq	.+112    	; 0x666 <fat_append_clusters+0x1b0>
                break;
        }

        cluster_next = cluster_current;
        --count_left;
     5f6:	f1 e0       	ldi	r31, 0x01	; 1
     5f8:	8f 1a       	sub	r8, r31
     5fa:	91 08       	sbc	r9, r1
     5fc:	1c 83       	std	Y+4, r17	; 0x04
     5fe:	0b 83       	std	Y+3, r16	; 0x03
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
     600:	21 e0       	ldi	r18, 0x01	; 1
     602:	a2 1a       	sub	r10, r18
     604:	b1 08       	sbc	r11, r1
     606:	0f 5f       	subi	r16, 0xFF	; 255
     608:	1f 4f       	sbci	r17, 0xFF	; 255
     60a:	a1 14       	cp	r10, r1
     60c:	b1 04       	cpc	r11, r1
     60e:	09 f0       	breq	.+2      	; 0x612 <fat_append_clusters+0x15c>
     610:	a4 cf       	rjmp	.-184    	; 0x55a <fat_append_clusters+0xa4>
     612:	64 01       	movw	r12, r8
     614:	53 01       	movw	r10, r6
     616:	42 01       	movw	r8, r4
     618:	02 c0       	rjmp	.+4      	; 0x61e <fat_append_clusters+0x168>
    device_read_t device_read = fs->partition->device_read;
    device_write_t device_write = fs->partition->device_write;
    offset_t fat_offset = fs->header.fat_offset;
    cluster_t count_left = count;
    cluster_t cluster_current = fs->cluster_free;
    cluster_t cluster_next = 0;
     61a:	1c 82       	std	Y+4, r1	; 0x04
     61c:	1b 82       	std	Y+3, r1	; 0x03
        --count_left;
    }

    do
    {
        if(count_left > 0)
     61e:	cd 28       	or	r12, r13
     620:	11 f5       	brne	.+68     	; 0x666 <fat_append_clusters+0x1b0>
            break;

        /* We allocated a new cluster chain. Now join
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
     622:	8d 85       	ldd	r24, Y+13	; 0x0d
     624:	9e 85       	ldd	r25, Y+14	; 0x0e
     626:	82 30       	cpi	r24, 0x02	; 2
     628:	91 05       	cpc	r25, r1
     62a:	d0 f0       	brcs	.+52     	; 0x660 <fat_append_clusters+0x1aa>
                    break;
            }
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);
     62c:	ab 81       	ldd	r26, Y+3	; 0x03
     62e:	bc 81       	ldd	r27, Y+4	; 0x04
     630:	ba 83       	std	Y+2, r27	; 0x02
     632:	a9 83       	std	Y+1, r26	; 0x01

                if(!device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
     634:	a0 e0       	ldi	r26, 0x00	; 0
     636:	b0 e0       	ldi	r27, 0x00	; 0
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	aa 1f       	adc	r26, r26
     63e:	bb 1f       	adc	r27, r27
     640:	bc 01       	movw	r22, r24
     642:	cd 01       	movw	r24, r26
     644:	68 0d       	add	r22, r8
     646:	79 1d       	adc	r23, r9
     648:	8a 1d       	adc	r24, r10
     64a:	9b 1d       	adc	r25, r11
     64c:	22 e0       	ldi	r18, 0x02	; 2
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	ae 01       	movw	r20, r28
     652:	4f 5f       	subi	r20, 0xFF	; 255
     654:	5f 4f       	sbci	r21, 0xFF	; 255
     656:	e9 85       	ldd	r30, Y+9	; 0x09
     658:	fa 85       	ldd	r31, Y+10	; 0x0a
     65a:	09 95       	icall
     65c:	88 23       	and	r24, r24
     65e:	19 f0       	breq	.+6      	; 0x666 <fat_append_clusters+0x1b0>
                    break;
            }
        }

        return cluster_next;
     660:	8b 81       	ldd	r24, Y+3	; 0x03
     662:	9c 81       	ldd	r25, Y+4	; 0x04
     664:	0e c0       	rjmp	.+28     	; 0x682 <fat_append_clusters+0x1cc>
    } while(0);

    /* No space left on device or writing error.
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);
     666:	6b 81       	ldd	r22, Y+3	; 0x03
     668:	7c 81       	ldd	r23, Y+4	; 0x04
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <fat_free_clusters>

    return 0;
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	05 c0       	rjmp	.+10     	; 0x682 <fat_append_clusters+0x1cc>
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
    if(!fs)
        return 0;
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	02 c0       	rjmp	.+4      	; 0x682 <fat_append_clusters+0x1cc>
        }
        else
#endif
        {
            if(!device_read(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
                return 0;
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);

    return 0;
}
     682:	2e 96       	adiw	r28, 0x0e	; 14
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
     688:	de bf       	out	0x3e, r29	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd bf       	out	0x3d, r28	; 61
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	df 90       	pop	r13
     69c:	cf 90       	pop	r12
     69e:	bf 90       	pop	r11
     6a0:	af 90       	pop	r10
     6a2:	9f 90       	pop	r9
     6a4:	8f 90       	pop	r8
     6a6:	7f 90       	pop	r7
     6a8:	6f 90       	pop	r6
     6aa:	5f 90       	pop	r5
     6ac:	4f 90       	pop	r4
     6ae:	3f 90       	pop	r3
     6b0:	2f 90       	pop	r2
     6b2:	08 95       	ret

000006b4 <fat_clear_cluster_callback>:
 * Callback function for clearing a cluster.
 */
uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
{
    return 16;
}
     6b4:	80 e1       	ldi	r24, 0x10	; 16
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	08 95       	ret

000006ba <fat_cluster_offset>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	fc 01       	movw	r30, r24
    if(!fs || cluster_num < 2)
     6c0:	89 2b       	or	r24, r25
     6c2:	99 f0       	breq	.+38     	; 0x6ea <fat_cluster_offset+0x30>
     6c4:	62 30       	cpi	r22, 0x02	; 2
     6c6:	71 05       	cpc	r23, r1
     6c8:	a0 f0       	brcs	.+40     	; 0x6f2 <fat_cluster_offset+0x38>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
     6ca:	9b 01       	movw	r18, r22
     6cc:	22 50       	subi	r18, 0x02	; 2
     6ce:	31 09       	sbc	r19, r1
     6d0:	a0 89       	ldd	r26, Z+16	; 0x10
     6d2:	b1 89       	ldd	r27, Z+17	; 0x11
     6d4:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__umulhisi3>
     6d8:	02 89       	ldd	r16, Z+18	; 0x12
     6da:	13 89       	ldd	r17, Z+19	; 0x13
     6dc:	24 89       	ldd	r18, Z+20	; 0x14
     6de:	35 89       	ldd	r19, Z+21	; 0x15
     6e0:	60 0f       	add	r22, r16
     6e2:	71 1f       	adc	r23, r17
     6e4:	82 1f       	adc	r24, r18
     6e6:	93 1f       	adc	r25, r19
     6e8:	07 c0       	rjmp	.+14     	; 0x6f8 <fat_cluster_offset+0x3e>
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	cb 01       	movw	r24, r22
     6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <fat_cluster_offset+0x3e>
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	cb 01       	movw	r24, r22

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
}
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	08 95       	ret

000006fe <fat_calc_83_checksum>:
 *
 * \param[in] file_name_83 The 11-byte file name buffer.
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
     6fe:	ac 01       	movw	r20, r24
    uint8_t checksum = file_name_83[0];
     700:	fc 01       	movw	r30, r24
     702:	81 91       	ld	r24, Z+
     704:	45 5f       	subi	r20, 0xF5	; 245
     706:	5f 4f       	sbci	r21, 0xFF	; 255
    for(uint8_t i = 1; i < 11; ++i)
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
     708:	90 e8       	ldi	r25, 0x80	; 128
     70a:	89 9f       	mul	r24, r25
     70c:	90 01       	movw	r18, r0
     70e:	11 24       	eor	r1, r1
     710:	98 2f       	mov	r25, r24
     712:	96 95       	lsr	r25
     714:	92 2b       	or	r25, r18
     716:	21 91       	ld	r18, Z+
     718:	89 2f       	mov	r24, r25
     71a:	82 0f       	add	r24, r18
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
     71c:	e4 17       	cp	r30, r20
     71e:	f5 07       	cpc	r31, r21
     720:	99 f7       	brne	.-26     	; 0x708 <fat_calc_83_checksum+0xa>
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];

    return checksum;
}
     722:	08 95       	ret

00000724 <fat_clear_cluster>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	60 97       	sbiw	r28, 0x10	; 16
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	f8 94       	cli
     73a:	de bf       	out	0x3e, r29	; 62
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	cd bf       	out	0x3d, r28	; 61
    if(cluster_num < 2)
     740:	62 30       	cpi	r22, 0x02	; 2
     742:	71 05       	cpc	r23, r1
     744:	e0 f0       	brcs	.+56     	; 0x77e <fat_clear_cluster+0x5a>
     746:	8c 01       	movw	r16, r24
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);
     748:	0e 94 5d 03 	call	0x6ba	; 0x6ba <fat_cluster_offset>

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
     74c:	ae 01       	movw	r20, r28
     74e:	4f 5f       	subi	r20, 0xFF	; 255
     750:	5f 4f       	sbci	r21, 0xFF	; 255
     752:	20 e1       	ldi	r18, 0x10	; 16
     754:	da 01       	movw	r26, r20
     756:	1d 92       	st	X+, r1
     758:	2a 95       	dec	r18
     75a:	e9 f7       	brne	.-6      	; 0x756 <fat_clear_cluster+0x32>
    return fs->partition->device_write_interval(cluster_offset,
     75c:	d8 01       	movw	r26, r16
     75e:	ed 91       	ld	r30, X+
     760:	fc 91       	ld	r31, X
     762:	11 97       	sbiw	r26, 0x01	; 1
     764:	50 96       	adiw	r26, 0x10	; 16
     766:	2d 91       	ld	r18, X+
     768:	3c 91       	ld	r19, X
     76a:	51 97       	sbiw	r26, 0x11	; 17
     76c:	06 80       	ldd	r0, Z+6	; 0x06
     76e:	f7 81       	ldd	r31, Z+7	; 0x07
     770:	e0 2d       	mov	r30, r0
     772:	e1 2c       	mov	r14, r1
     774:	f1 2c       	mov	r15, r1
     776:	0a e5       	ldi	r16, 0x5A	; 90
     778:	13 e0       	ldi	r17, 0x03	; 3
     77a:	09 95       	icall
     77c:	01 c0       	rjmp	.+2      	; 0x780 <fat_clear_cluster+0x5c>
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(cluster_num < 2)
        return 0;
     77e:	80 e0       	ldi	r24, 0x00	; 0
                                                zero,
                                                fs->header.cluster_size,
                                                fat_clear_cluster_callback,
                                                0
                                               );
}
     780:	60 96       	adiw	r28, 0x10	; 16
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14
     798:	08 95       	ret

0000079a <fat_get_fs_free_16_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT.
 */
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;
     7aa:	f9 01       	movw	r30, r18
     7ac:	c2 80       	ldd	r12, Z+2	; 0x02
     7ae:	d3 80       	ldd	r13, Z+3	; 0x03

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
     7b0:	c1 14       	cp	r12, r1
     7b2:	d1 04       	cpc	r13, r1
     7b4:	b1 f0       	breq	.+44     	; 0x7e2 <fat_get_fs_free_16_callback+0x48>
     7b6:	89 01       	movw	r16, r18
     7b8:	7c 01       	movw	r14, r24
     7ba:	c0 e0       	ldi	r28, 0x00	; 0
     7bc:	d0 e0       	ldi	r29, 0x00	; 0
    {
        uint16_t cluster = read16(buffer);
     7be:	c7 01       	movw	r24, r14
     7c0:	8c 0f       	add	r24, r28
     7c2:	9d 1f       	adc	r25, r29
     7c4:	0e 94 6d 01 	call	0x2da	; 0x2da <read16>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
     7c8:	89 2b       	or	r24, r25
     7ca:	39 f4       	brne	.+14     	; 0x7da <fat_get_fs_free_16_callback+0x40>
            ++(count_arg->cluster_count);
     7cc:	f8 01       	movw	r30, r16
     7ce:	40 81       	ld	r20, Z
     7d0:	51 81       	ldd	r21, Z+1	; 0x01
     7d2:	4f 5f       	subi	r20, 0xFF	; 255
     7d4:	5f 4f       	sbci	r21, 0xFF	; 255
     7d6:	51 83       	std	Z+1, r21	; 0x01
     7d8:	40 83       	st	Z, r20
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
     7da:	22 96       	adiw	r28, 0x02	; 2
     7dc:	cc 15       	cp	r28, r12
     7de:	dd 05       	cpc	r29, r13
     7e0:	70 f3       	brcs	.-36     	; 0x7be <fat_get_fs_free_16_callback+0x24>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
     7f0:	df 90       	pop	r13
     7f2:	cf 90       	pop	r12
     7f4:	08 95       	ret

000007f6 <fat_dir_entry_read_callback>:
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
     7f6:	4f 92       	push	r4
     7f8:	5f 92       	push	r5
     7fa:	6f 92       	push	r6
     7fc:	7f 92       	push	r7
     7fe:	af 92       	push	r10
     800:	bf 92       	push	r11
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	2d 97       	sbiw	r28, 0x0d	; 13
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	f9 01       	movw	r30, r18
    struct fat_read_dir_callback_arg* arg = p;
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
     824:	c0 80       	ld	r12, Z
     826:	d1 80       	ldd	r13, Z+1	; 0x01

    arg->bytes_read += 32;
     828:	22 81       	ldd	r18, Z+2	; 0x02
     82a:	33 81       	ldd	r19, Z+3	; 0x03
     82c:	20 5e       	subi	r18, 0xE0	; 224
     82e:	3f 4f       	sbci	r19, 0xFF	; 255
     830:	33 83       	std	Z+3, r19	; 0x03
     832:	22 83       	std	Z+2, r18	; 0x02

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
     834:	dc 01       	movw	r26, r24
     836:	2c 91       	ld	r18, X
     838:	25 3e       	cpi	r18, 0xE5	; 229
     83a:	11 f0       	breq	.+4      	; 0x840 <fat_dir_entry_read_callback+0x4a>
     83c:	21 11       	cpse	r18, r1
     83e:	03 c0       	rjmp	.+6      	; 0x846 <fat_dir_entry_read_callback+0x50>
    {
#if FAT_LFN_SUPPORT
        arg->checksum = 0;
     840:	14 82       	std	Z+4, r1	; 0x04
#endif
        return 1;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	01 c1       	rjmp	.+514    	; 0xa48 <__stack+0x149>
    /* skip lfn entries */
    if(buffer[11] == 0x0f)
        return 1;
#endif

    char* long_name = dir_entry->long_name;
     846:	56 01       	movw	r10, r12
#if FAT_LFN_SUPPORT
    if(buffer[11] == 0x0f)
     848:	dc 01       	movw	r26, r24
     84a:	1b 96       	adiw	r26, 0x0b	; 11
     84c:	2c 91       	ld	r18, X
     84e:	1b 97       	sbiw	r26, 0x0b	; 11
     850:	2f 30       	cpi	r18, 0x0F	; 15
     852:	09 f0       	breq	.+2      	; 0x856 <fat_dir_entry_read_callback+0x60>
     854:	40 c0       	rjmp	.+128    	; 0x8d6 <fat_dir_entry_read_callback+0xe0>
    {
        /* checksum validation */
        if(arg->checksum == 0 || arg->checksum != buffer[13])
     856:	24 81       	ldd	r18, Z+4	; 0x04
     858:	22 23       	and	r18, r18
     85a:	21 f0       	breq	.+8      	; 0x864 <fat_dir_entry_read_callback+0x6e>
     85c:	1d 96       	adiw	r26, 0x0d	; 13
     85e:	3c 91       	ld	r19, X
     860:	23 17       	cp	r18, r19
     862:	71 f0       	breq	.+28     	; 0x880 <fat_dir_entry_read_callback+0x8a>
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
     864:	2b e2       	ldi	r18, 0x2B	; 43
     866:	d6 01       	movw	r26, r12
     868:	1d 92       	st	X+, r1
     86a:	2a 95       	dec	r18
     86c:	e9 f7       	brne	.-6      	; 0x868 <fat_dir_entry_read_callback+0x72>

            arg->checksum = buffer[13];
     86e:	dc 01       	movw	r26, r24
     870:	1d 96       	adiw	r26, 0x0d	; 13
     872:	2c 91       	ld	r18, X
     874:	24 83       	std	Z+4, r18	; 0x04
            dir_entry->entry_offset = offset;
     876:	f6 01       	movw	r30, r12
     878:	47 a3       	std	Z+39, r20	; 0x27
     87a:	50 a7       	std	Z+40, r21	; 0x28
     87c:	61 a7       	std	Z+41, r22	; 0x29
     87e:	72 a7       	std	Z+42, r23	; 0x2a

        /* lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
     880:	dc 01       	movw	r26, r24
     882:	2c 91       	ld	r18, X
     884:	2f 73       	andi	r18, 0x3F	; 63
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	21 50       	subi	r18, 0x01	; 1
     88a:	31 09       	sbc	r19, r1
     88c:	4d e0       	ldi	r20, 0x0D	; 13
     88e:	42 9f       	mul	r20, r18
     890:	b0 01       	movw	r22, r0
     892:	43 9f       	mul	r20, r19
     894:	70 0d       	add	r23, r0
     896:	11 24       	eor	r1, r1
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
     898:	2d e0       	ldi	r18, 0x0D	; 13
     89a:	e0 e0       	ldi	r30, 0x00	; 0
     89c:	f1 e0       	ldi	r31, 0x01	; 1
     89e:	de 01       	movw	r26, r28
     8a0:	11 96       	adiw	r26, 0x01	; 1
     8a2:	01 90       	ld	r0, Z+
     8a4:	0d 92       	st	X+, r0
     8a6:	2a 95       	dec	r18
     8a8:	e1 f7       	brne	.-8      	; 0x8a2 <fat_dir_entry_read_callback+0xac>
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
     8aa:	6f 31       	cpi	r22, 0x1F	; 31
     8ac:	71 05       	cpc	r23, r1
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <fat_dir_entry_read_callback+0xbc>
     8b0:	ae c0       	rjmp	.+348    	; 0xa0e <__stack+0x10f>
     8b2:	0f c0       	rjmp	.+30     	; 0x8d2 <fat_dir_entry_read_callback+0xdc>
            long_name[char_offset + i] = buffer[char_mapping[i]];
     8b4:	21 91       	ld	r18, Z+
     8b6:	8c 01       	movw	r16, r24
     8b8:	02 0f       	add	r16, r18
     8ba:	11 1d       	adc	r17, r1
     8bc:	d8 01       	movw	r26, r16
     8be:	2c 91       	ld	r18, X
     8c0:	d6 01       	movw	r26, r12
     8c2:	2d 93       	st	X+, r18
     8c4:	6d 01       	movw	r12, r26
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
     8c6:	e6 17       	cp	r30, r22
     8c8:	f7 07       	cpc	r31, r23
     8ca:	19 f0       	breq	.+6      	; 0x8d2 <fat_dir_entry_read_callback+0xdc>
     8cc:	e4 17       	cp	r30, r20
     8ce:	f5 07       	cpc	r31, r21
     8d0:	89 f7       	brne	.-30     	; 0x8b4 <fat_dir_entry_read_callback+0xbe>
            long_name[char_offset + i] = buffer[char_mapping[i]];

        return 1;
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	b9 c0       	rjmp	.+370    	; 0xa48 <__stack+0x149>
     8d6:	7f 01       	movw	r14, r30
     8d8:	2a 01       	movw	r4, r20
     8da:	3b 01       	movw	r6, r22
     8dc:	8c 01       	movw	r16, r24
    else
#endif
    {
#if FAT_LFN_SUPPORT
        /* if we do not have a long name or the previous lfn does not match, take the 8.3 name */
        if(long_name[0] == '\0' || arg->checksum != fat_calc_83_checksum(buffer))
     8de:	f6 01       	movw	r30, r12
     8e0:	80 81       	ld	r24, Z
     8e2:	88 23       	and	r24, r24
     8e4:	49 f0       	breq	.+18     	; 0x8f8 <fat_dir_entry_read_callback+0x102>
     8e6:	cd 01       	movw	r24, r26
     8e8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <fat_calc_83_checksum>
     8ec:	d7 01       	movw	r26, r14
     8ee:	14 96       	adiw	r26, 0x04	; 4
     8f0:	9c 91       	ld	r25, X
     8f2:	98 17       	cp	r25, r24
     8f4:	09 f4       	brne	.+2      	; 0x8f8 <fat_dir_entry_read_callback+0x102>
     8f6:	6f c0       	rjmp	.+222    	; 0x9d6 <__stack+0xd7>
#endif
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
     8f8:	8b e2       	ldi	r24, 0x2B	; 43
     8fa:	f6 01       	movw	r30, r12
     8fc:	11 92       	st	Z+, r1
     8fe:	8a 95       	dec	r24
     900:	e9 f7       	brne	.-6      	; 0x8fc <fat_dir_entry_read_callback+0x106>
            dir_entry->entry_offset = offset;
     902:	d6 01       	movw	r26, r12
     904:	97 96       	adiw	r26, 0x27	; 39
     906:	4d 92       	st	X+, r4
     908:	5d 92       	st	X+, r5
     90a:	6d 92       	st	X+, r6
     90c:	7c 92       	st	X, r7
     90e:	9a 97       	sbiw	r26, 0x2a	; 42

            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(buffer[i] == ' ')
     910:	f8 01       	movw	r30, r16
     912:	80 81       	ld	r24, Z
     914:	80 32       	cpi	r24, 0x20	; 32
     916:	19 f1       	breq	.+70     	; 0x95e <__stack+0x5f>
     918:	6c 2d       	mov	r22, r12
     91a:	98 01       	movw	r18, r16
     91c:	29 5f       	subi	r18, 0xF9	; 249
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	6c 2c       	mov	r6, r12
     922:	7d 2c       	mov	r7, r13
     924:	04 c0       	rjmp	.+8      	; 0x92e <__stack+0x2f>
     926:	31 96       	adiw	r30, 0x01	; 1
     928:	80 81       	ld	r24, Z
     92a:	80 32       	cpi	r24, 0x20	; 32
     92c:	c9 f0       	breq	.+50     	; 0x960 <__stack+0x61>
                    break;
                long_name[i] = buffer[i];
     92e:	d3 01       	movw	r26, r6
     930:	8d 93       	st	X+, r24
     932:	3d 01       	movw	r6, r26
                /* Windows NT and later versions do not store lfn entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
     934:	d8 01       	movw	r26, r16
     936:	1c 96       	adiw	r26, 0x0c	; 12
     938:	9c 91       	ld	r25, X
     93a:	93 ff       	sbrs	r25, 3
     93c:	0a c0       	rjmp	.+20     	; 0x952 <__stack+0x53>
     93e:	90 81       	ld	r25, Z
     940:	91 54       	subi	r25, 0x41	; 65
     942:	9a 31       	cpi	r25, 0x1A	; 26
     944:	30 f4       	brcc	.+12     	; 0x952 <__stack+0x53>
     946:	a3 01       	movw	r20, r6
     948:	41 50       	subi	r20, 0x01	; 1
     94a:	51 09       	sbc	r21, r1
                    long_name[i] += 'a' - 'A';
     94c:	80 5e       	subi	r24, 0xE0	; 224
     94e:	da 01       	movw	r26, r20
     950:	8c 93       	st	X, r24
     952:	96 2d       	mov	r25, r6
     954:	96 1b       	sub	r25, r22
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
            dir_entry->entry_offset = offset;

            uint8_t i;
            for(i = 0; i < 8; ++i)
     956:	e2 17       	cp	r30, r18
     958:	f3 07       	cpc	r31, r19
     95a:	29 f7       	brne	.-54     	; 0x926 <__stack+0x27>
     95c:	01 c0       	rjmp	.+2      	; 0x960 <__stack+0x61>
     95e:	90 e0       	ldi	r25, 0x00	; 0
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
     960:	f6 01       	movw	r30, r12
     962:	80 81       	ld	r24, Z
     964:	85 30       	cpi	r24, 0x05	; 5
     966:	11 f4       	brne	.+4      	; 0x96c <__stack+0x6d>
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
     968:	85 ee       	ldi	r24, 0xE5	; 229
     96a:	80 83       	st	Z, r24

            if(buffer[8] != ' ')
     96c:	d8 01       	movw	r26, r16
     96e:	18 96       	adiw	r26, 0x08	; 8
     970:	8c 91       	ld	r24, X
     972:	18 97       	sbiw	r26, 0x08	; 8
     974:	80 32       	cpi	r24, 0x20	; 32
     976:	59 f1       	breq	.+86     	; 0x9ce <__stack+0xcf>
            {
                long_name[i++] = '.';
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	89 0f       	add	r24, r25
     97c:	2e e2       	ldi	r18, 0x2E	; 46
     97e:	f6 01       	movw	r30, r12
     980:	e9 0f       	add	r30, r25
     982:	f1 1d       	adc	r31, r1
     984:	20 83       	st	Z, r18

                uint8_t j = 8;
                for(; j < 11; ++j)
                {
                    if(buffer[j] == ' ')
     986:	f8 01       	movw	r30, r16
     988:	38 96       	adiw	r30, 0x08	; 8
     98a:	18 96       	adiw	r26, 0x08	; 8
     98c:	2c 91       	ld	r18, X
     98e:	20 32       	cpi	r18, 0x20	; 32
     990:	d9 f0       	breq	.+54     	; 0x9c8 <__stack+0xc9>
     992:	9c 5f       	subi	r25, 0xFC	; 252
     994:	04 c0       	rjmp	.+8      	; 0x99e <__stack+0x9f>
     996:	31 96       	adiw	r30, 0x01	; 1
     998:	20 81       	ld	r18, Z
     99a:	20 32       	cpi	r18, 0x20	; 32
     99c:	b9 f0       	breq	.+46     	; 0x9cc <__stack+0xcd>
                        break;
                    long_name[i] = buffer[j];
     99e:	a5 01       	movw	r20, r10
     9a0:	48 0f       	add	r20, r24
     9a2:	51 1d       	adc	r21, r1
     9a4:	da 01       	movw	r26, r20
     9a6:	2c 93       	st	X, r18

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((buffer[12] & 0x10) && buffer[j] >= 'A' && buffer[j] <= 'Z')
     9a8:	d8 01       	movw	r26, r16
     9aa:	1c 96       	adiw	r26, 0x0c	; 12
     9ac:	3c 91       	ld	r19, X
     9ae:	34 ff       	sbrs	r19, 4
     9b0:	07 c0       	rjmp	.+14     	; 0x9c0 <__stack+0xc1>
     9b2:	30 81       	ld	r19, Z
     9b4:	31 54       	subi	r19, 0x41	; 65
     9b6:	3a 31       	cpi	r19, 0x1A	; 26
     9b8:	18 f4       	brcc	.+6      	; 0x9c0 <__stack+0xc1>
                        long_name[i] += 'a' - 'A';
     9ba:	20 5e       	subi	r18, 0xE0	; 224
     9bc:	da 01       	movw	r26, r20
     9be:	2c 93       	st	X, r18

                    ++i;
     9c0:	8f 5f       	subi	r24, 0xFF	; 255
            if(buffer[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
     9c2:	89 13       	cpse	r24, r25
     9c4:	e8 cf       	rjmp	.-48     	; 0x996 <__stack+0x97>
     9c6:	03 c0       	rjmp	.+6      	; 0x9ce <__stack+0xcf>
            if(long_name[0] == 0x05)
                long_name[0] = (char) FAT_DIRENTRY_DELETED;

            if(buffer[8] != ' ')
            {
                long_name[i++] = '.';
     9c8:	98 2f       	mov	r25, r24
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <__stack+0xcf>
                     * Windows NT and later.
                     */
                    if((buffer[12] & 0x10) && buffer[j] >= 'A' && buffer[j] <= 'Z')
                        long_name[i] += 'a' - 'A';

                    ++i;
     9cc:	98 2f       	mov	r25, r24
                }
            } 

            long_name[i] = '\0';
     9ce:	f6 01       	movw	r30, r12
     9d0:	e9 0f       	add	r30, r25
     9d2:	f1 1d       	adc	r31, r1
     9d4:	10 82       	st	Z, r1
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = buffer[11];
     9d6:	f8 01       	movw	r30, r16
     9d8:	83 85       	ldd	r24, Z+11	; 0x0b
     9da:	d6 01       	movw	r26, r12
     9dc:	90 96       	adiw	r26, 0x20	; 32
     9de:	8c 93       	st	X, r24
        dir_entry->cluster = read16(&buffer[26]);
     9e0:	c8 01       	movw	r24, r16
     9e2:	4a 96       	adiw	r24, 0x1a	; 26
     9e4:	0e 94 6d 01 	call	0x2da	; 0x2da <read16>
     9e8:	f6 01       	movw	r30, r12
     9ea:	92 a3       	std	Z+34, r25	; 0x22
     9ec:	81 a3       	std	Z+33, r24	; 0x21
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) read16(&buffer[20])) << 16;
#endif
        dir_entry->file_size = read32(&buffer[28]);
     9ee:	c8 01       	movw	r24, r16
     9f0:	4c 96       	adiw	r24, 0x1c	; 28
     9f2:	0e 94 77 01 	call	0x2ee	; 0x2ee <read32>
     9f6:	d6 01       	movw	r26, r12
     9f8:	93 96       	adiw	r26, 0x23	; 35
     9fa:	6d 93       	st	X+, r22
     9fc:	7d 93       	st	X+, r23
     9fe:	8d 93       	st	X+, r24
     a00:	9c 93       	st	X, r25
     a02:	96 97       	sbiw	r26, 0x26	; 38
#if FAT_DATETIME_SUPPORT
        dir_entry->modification_time = read16(&buffer[22]);
        dir_entry->modification_date = read16(&buffer[24]);
#endif

        arg->finished = 1;
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	f7 01       	movw	r30, r14
     a08:	85 83       	std	Z+5, r24	; 0x05
        return 0;
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	1d c0       	rjmp	.+58     	; 0xa48 <__stack+0x149>
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = buffer[char_mapping[i]];
     a0e:	29 81       	ldd	r18, Y+1	; 0x01
     a10:	fc 01       	movw	r30, r24
     a12:	e2 0f       	add	r30, r18
     a14:	f1 1d       	adc	r31, r1
     a16:	20 81       	ld	r18, Z
     a18:	f6 01       	movw	r30, r12
     a1a:	e6 0f       	add	r30, r22
     a1c:	f7 1f       	adc	r31, r23
     a1e:	20 83       	st	Z, r18
     a20:	fe 01       	movw	r30, r28
     a22:	32 96       	adiw	r30, 0x02	; 2
     a24:	db 01       	movw	r26, r22
     a26:	11 96       	adiw	r26, 0x01	; 1
     a28:	ca 0e       	add	r12, r26
     a2a:	db 1e       	adc	r13, r27
     a2c:	4f e1       	ldi	r20, 0x1F	; 31
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	46 1b       	sub	r20, r22
     a32:	57 0b       	sbc	r21, r23
     a34:	01 e0       	ldi	r16, 0x01	; 1
     a36:	10 e0       	ldi	r17, 0x00	; 0
     a38:	0c 0f       	add	r16, r28
     a3a:	1d 1f       	adc	r17, r29
     a3c:	40 0f       	add	r20, r16
     a3e:	51 1f       	adc	r21, r17
     a40:	be 01       	movw	r22, r28
     a42:	62 5f       	subi	r22, 0xF2	; 242
     a44:	7f 4f       	sbci	r23, 0xFF	; 255
     a46:	42 cf       	rjmp	.-380    	; 0x8cc <fat_dir_entry_read_callback+0xd6>
#endif

        arg->finished = 1;
        return 0;
    }
}
     a48:	2d 96       	adiw	r28, 0x0d	; 13
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	de bf       	out	0x3e, r29	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	cd bf       	out	0x3d, r28	; 61
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	bf 90       	pop	r11
     a66:	af 90       	pop	r10
     a68:	7f 90       	pop	r7
     a6a:	6f 90       	pop	r6
     a6c:	5f 90       	pop	r5
     a6e:	4f 90       	pop	r4
     a70:	08 95       	ret

00000a72 <fat_find_offset_for_dir_entry>:
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
     a72:	3f 92       	push	r3
     a74:	4f 92       	push	r4
     a76:	5f 92       	push	r5
     a78:	6f 92       	push	r6
     a7a:	7f 92       	push	r7
     a7c:	8f 92       	push	r8
     a7e:	9f 92       	push	r9
     a80:	af 92       	push	r10
     a82:	bf 92       	push	r11
     a84:	cf 92       	push	r12
     a86:	df 92       	push	r13
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	00 d0       	rcall	.+0      	; 0xa96 <fat_find_offset_for_dir_entry+0x24>
     a96:	00 d0       	rcall	.+0      	; 0xa98 <fat_find_offset_for_dir_entry+0x26>
     a98:	1f 92       	push	r1
     a9a:	cd b7       	in	r28, 0x3d	; 61
     a9c:	de b7       	in	r29, 0x3e	; 62
     a9e:	fc 01       	movw	r30, r24
     aa0:	7b 01       	movw	r14, r22
    if(!fs || !dir_entry)
     aa2:	89 2b       	or	r24, r25
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <fat_find_offset_for_dir_entry+0x36>
     aa6:	bc c0       	rjmp	.+376    	; 0xc20 <fat_find_offset_for_dir_entry+0x1ae>
     aa8:	41 15       	cp	r20, r1
     aaa:	51 05       	cpc	r21, r1
     aac:	09 f4       	brne	.+2      	; 0xab0 <fat_find_offset_for_dir_entry+0x3e>
     aae:	bd c0       	rjmp	.+378    	; 0xc2a <fat_find_offset_for_dir_entry+0x1b8>
        return 0;

    /* search for a place where to write the directory entry to disk */
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
     ab0:	da 01       	movw	r26, r20
     ab2:	0d 90       	ld	r0, X+
     ab4:	00 20       	and	r0, r0
     ab6:	e9 f7       	brne	.-6      	; 0xab2 <fat_find_offset_for_dir_entry+0x40>
     ab8:	9d 01       	movw	r18, r26
     aba:	24 1b       	sub	r18, r20
     abc:	35 0b       	sbc	r19, r21
     abe:	25 5f       	subi	r18, 0xF5	; 245
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	a5 ec       	ldi	r26, 0xC5	; 197
     ac4:	be e4       	ldi	r27, 0x4E	; 78
     ac6:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__umulhisi3>
     aca:	96 95       	lsr	r25
     acc:	87 95       	ror	r24
     ace:	96 95       	lsr	r25
     ad0:	87 95       	ror	r24
     ad2:	01 e0       	ldi	r16, 0x01	; 1
     ad4:	08 0f       	add	r16, r24
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
     ad6:	d7 01       	movw	r26, r14
     ad8:	93 96       	adiw	r26, 0x23	; 35
     ada:	0d 90       	ld	r0, X+
     adc:	bc 91       	ld	r27, X
     ade:	a0 2d       	mov	r26, r0
     ae0:	bd 83       	std	Y+5, r27	; 0x05
     ae2:	ac 83       	std	Y+4, r26	; 0x04
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
#endif

    if(cluster_num == 0)
     ae4:	ab 2b       	or	r26, r27
     ae6:	49 f4       	brne	.+18     	; 0xafa <fat_find_offset_for_dir_entry+0x88>
        }
        else
#endif
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
     ae8:	46 88       	ldd	r4, Z+22	; 0x16
     aea:	57 88       	ldd	r5, Z+23	; 0x17
     aec:	60 8c       	ldd	r6, Z+24	; 0x18
     aee:	71 8c       	ldd	r7, Z+25	; 0x19
            offset_to = fs->header.cluster_zero_offset;
     af0:	82 88       	ldd	r8, Z+18	; 0x12
     af2:	93 88       	ldd	r9, Z+19	; 0x13
     af4:	a4 88       	ldd	r10, Z+20	; 0x14
     af6:	b5 88       	ldd	r11, Z+21	; 0x15
     af8:	06 c0       	rjmp	.+12     	; 0xb06 <fat_find_offset_for_dir_entry+0x94>
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
     afa:	81 2c       	mov	r8, r1
     afc:	91 2c       	mov	r9, r1
     afe:	54 01       	movw	r10, r8
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
     b00:	41 2c       	mov	r4, r1
     b02:	51 2c       	mov	r5, r1
     b04:	32 01       	movw	r6, r4
     b06:	fb 83       	std	Y+3, r31	; 0x03
     b08:	ea 83       	std	Y+2, r30	; 0x02
     b0a:	73 01       	movw	r14, r6
     b0c:	62 01       	movw	r12, r4
     b0e:	10 e0       	ldi	r17, 0x00	; 0

            offset = fat_cluster_offset(fs, cluster_num);
            offset_to = offset + fs->header.cluster_size;
            dir_entry_offset = offset;
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
     b10:	31 2c       	mov	r3, r1
        }
    }
    
    while(1)
    {
        if(offset == offset_to)
     b12:	c8 14       	cp	r12, r8
     b14:	d9 04       	cpc	r13, r9
     b16:	ea 04       	cpc	r14, r10
     b18:	fb 04       	cpc	r15, r11
     b1a:	09 f0       	breq	.+2      	; 0xb1e <fat_find_offset_for_dir_entry+0xac>
     b1c:	4d c0       	rjmp	.+154    	; 0xbb8 <fat_find_offset_for_dir_entry+0x146>
        {
            if(cluster_num == 0)
     b1e:	ec 81       	ldd	r30, Y+4	; 0x04
     b20:	fd 81       	ldd	r31, Y+5	; 0x05
     b22:	30 97       	sbiw	r30, 0x00	; 0
     b24:	09 f4       	brne	.+2      	; 0xb28 <fat_find_offset_for_dir_entry+0xb6>
     b26:	72 c0       	rjmp	.+228    	; 0xc0c <fat_find_offset_for_dir_entry+0x19a>
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;

            if(offset)
     b28:	cd 28       	or	r12, r13
     b2a:	ce 28       	or	r12, r14
     b2c:	cf 28       	or	r12, r15
     b2e:	69 f1       	breq	.+90     	; 0xb8a <fat_find_offset_for_dir_entry+0x118>
            {
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
     b30:	bf 01       	movw	r22, r30
     b32:	8a 81       	ldd	r24, Y+2	; 0x02
     b34:	9b 81       	ldd	r25, Y+3	; 0x03
     b36:	0e 94 93 01 	call	0x326	; 0x326 <fat_get_next_cluster>
                if(!cluster_next)
     b3a:	00 97       	sbiw	r24, 0x00	; 0
     b3c:	21 f5       	brne	.+72     	; 0xb86 <fat_find_offset_for_dir_entry+0x114>
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
     b3e:	41 e0       	ldi	r20, 0x01	; 1
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	6c 81       	ldd	r22, Y+4	; 0x04
     b44:	7d 81       	ldd	r23, Y+5	; 0x05
     b46:	8a 81       	ldd	r24, Y+2	; 0x02
     b48:	9b 81       	ldd	r25, Y+3	; 0x03
     b4a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <fat_append_clusters>
     b4e:	ac 01       	movw	r20, r24
                    if(!cluster_next)
     b50:	00 97       	sbiw	r24, 0x00	; 0
     b52:	09 f4       	brne	.+2      	; 0xb56 <fat_find_offset_for_dir_entry+0xe4>
     b54:	5b c0       	rjmp	.+182    	; 0xc0c <fat_find_offset_for_dir_entry+0x19a>
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;
     b56:	9c 01       	movw	r18, r24
     b58:	22 50       	subi	r18, 0x02	; 2
     b5a:	31 09       	sbc	r19, r1
     b5c:	ea 81       	ldd	r30, Y+2	; 0x02
     b5e:	fb 81       	ldd	r31, Y+3	; 0x03
     b60:	a0 89       	ldd	r26, Z+16	; 0x10
     b62:	b1 89       	ldd	r27, Z+17	; 0x11
     b64:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__umulhisi3>
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
                    if(!cluster_next)
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
     b68:	02 89       	ldd	r16, Z+18	; 0x12
     b6a:	13 89       	ldd	r17, Z+19	; 0x13
     b6c:	24 89       	ldd	r18, Z+20	; 0x14
     b6e:	35 89       	ldd	r19, Z+21	; 0x15
     b70:	2b 01       	movw	r4, r22
     b72:	3c 01       	movw	r6, r24
     b74:	40 0e       	add	r4, r16
     b76:	51 1e       	adc	r5, r17
     b78:	62 1e       	adc	r6, r18
     b7a:	73 1e       	adc	r7, r19
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;

                    /* clear cluster to avoid garbage directory entries */
                    fat_clear_cluster(fs, cluster_next);
     b7c:	ba 01       	movw	r22, r20
     b7e:	cf 01       	movw	r24, r30
     b80:	0e 94 92 03 	call	0x724	; 0x724 <fat_clear_cluster>

                    break;
     b84:	48 c0       	rjmp	.+144    	; 0xc16 <fat_find_offset_for_dir_entry+0x1a4>
                }
                cluster_num = cluster_next;
     b86:	9d 83       	std	Y+5, r25	; 0x05
     b88:	8c 83       	std	Y+4, r24	; 0x04
            }

            offset = fat_cluster_offset(fs, cluster_num);
     b8a:	6c 81       	ldd	r22, Y+4	; 0x04
     b8c:	7d 81       	ldd	r23, Y+5	; 0x05
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	9b 81       	ldd	r25, Y+3	; 0x03
     b92:	0e 94 5d 03 	call	0x6ba	; 0x6ba <fat_cluster_offset>
     b96:	2b 01       	movw	r4, r22
     b98:	3c 01       	movw	r6, r24
            offset_to = offset + fs->header.cluster_size;
     b9a:	aa 81       	ldd	r26, Y+2	; 0x02
     b9c:	bb 81       	ldd	r27, Y+3	; 0x03
     b9e:	50 96       	adiw	r26, 0x10	; 16
     ba0:	8d 91       	ld	r24, X+
     ba2:	9c 91       	ld	r25, X
     ba4:	51 97       	sbiw	r26, 0x11	; 17
     ba6:	53 01       	movw	r10, r6
     ba8:	42 01       	movw	r8, r4
     baa:	88 0e       	add	r8, r24
     bac:	99 1e       	adc	r9, r25
     bae:	a1 1c       	adc	r10, r1
     bb0:	b1 1c       	adc	r11, r1
                    break;
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
     bb2:	73 01       	movw	r14, r6
     bb4:	62 01       	movw	r12, r4
            offset_to = offset + fs->header.cluster_size;
            dir_entry_offset = offset;
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
     bb6:	13 2d       	mov	r17, r3
#endif
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
     bb8:	aa 81       	ldd	r26, Y+2	; 0x02
     bba:	bb 81       	ldd	r27, Y+3	; 0x03
     bbc:	ed 91       	ld	r30, X+
     bbe:	fc 91       	ld	r31, X
     bc0:	01 90       	ld	r0, Z+
     bc2:	f0 81       	ld	r31, Z
     bc4:	e0 2d       	mov	r30, r0
     bc6:	21 e0       	ldi	r18, 0x01	; 1
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	ae 01       	movw	r20, r28
     bcc:	4f 5f       	subi	r20, 0xFF	; 255
     bce:	5f 4f       	sbci	r21, 0xFF	; 255
     bd0:	c7 01       	movw	r24, r14
     bd2:	b6 01       	movw	r22, r12
     bd4:	09 95       	icall
     bd6:	88 23       	and	r24, r24
     bd8:	c9 f0       	breq	.+50     	; 0xc0c <fat_find_offset_for_dir_entry+0x19a>
            return 0;

        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	85 3e       	cpi	r24, 0xE5	; 229
     bde:	11 f0       	breq	.+4      	; 0xbe4 <fat_find_offset_for_dir_entry+0x172>
     be0:	81 11       	cpse	r24, r1
     be2:	09 c0       	rjmp	.+18     	; 0xbf6 <fat_find_offset_for_dir_entry+0x184>
        {
            /* check if we have the needed number of available entries */
#if FAT_LFN_SUPPORT
            ++free_dir_entries_found;
     be4:	1f 5f       	subi	r17, 0xFF	; 255
            if(free_dir_entries_found >= free_dir_entries_needed)
     be6:	10 17       	cp	r17, r16
     be8:	b0 f4       	brcc	.+44     	; 0xc16 <fat_find_offset_for_dir_entry+0x1a4>
#endif
                break;

            offset += 32;
     bea:	b0 e2       	ldi	r27, 0x20	; 32
     bec:	cb 0e       	add	r12, r27
     bee:	d1 1c       	adc	r13, r1
     bf0:	e1 1c       	adc	r14, r1
     bf2:	f1 1c       	adc	r15, r1
     bf4:	8e cf       	rjmp	.-228    	; 0xb12 <fat_find_offset_for_dir_entry+0xa0>
        }
        else
        {
            offset += 32;
     bf6:	26 01       	movw	r4, r12
     bf8:	37 01       	movw	r6, r14
     bfa:	e0 e2       	ldi	r30, 0x20	; 32
     bfc:	4e 0e       	add	r4, r30
     bfe:	51 1c       	adc	r5, r1
     c00:	61 1c       	adc	r6, r1
     c02:	71 1c       	adc	r7, r1
     c04:	73 01       	movw	r14, r6
     c06:	62 01       	movw	r12, r4
            dir_entry_offset = offset;
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
     c08:	13 2d       	mov	r17, r3
#endif
        }
    }
     c0a:	83 cf       	rjmp	.-250    	; 0xb12 <fat_find_offset_for_dir_entry+0xa0>
        {
            if(cluster_num == 0)
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e c0       	rjmp	.+28     	; 0xc32 <fat_find_offset_for_dir_entry+0x1c0>
            free_dir_entries_found = 0;
#endif
        }
    }

    return dir_entry_offset;
     c16:	64 2d       	mov	r22, r4
     c18:	75 2d       	mov	r23, r5
     c1a:	86 2d       	mov	r24, r6
     c1c:	97 2d       	mov	r25, r7
     c1e:	09 c0       	rjmp	.+18     	; 0xc32 <fat_find_offset_for_dir_entry+0x1c0>
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
        return 0;
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	04 c0       	rjmp	.+8      	; 0xc32 <fat_find_offset_for_dir_entry+0x1c0>
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	90 e0       	ldi	r25, 0x00	; 0
#endif
        }
    }

    return dir_entry_offset;
}
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	df 90       	pop	r13
     c4a:	cf 90       	pop	r12
     c4c:	bf 90       	pop	r11
     c4e:	af 90       	pop	r10
     c50:	9f 90       	pop	r9
     c52:	8f 90       	pop	r8
     c54:	7f 90       	pop	r7
     c56:	6f 90       	pop	r6
     c58:	5f 90       	pop	r5
     c5a:	4f 90       	pop	r4
     c5c:	3f 90       	pop	r3
     c5e:	08 95       	ret

00000c60 <fat_write_dir_entry>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
     c60:	2f 92       	push	r2
     c62:	3f 92       	push	r3
     c64:	4f 92       	push	r4
     c66:	5f 92       	push	r5
     c68:	6f 92       	push	r6
     c6a:	7f 92       	push	r7
     c6c:	8f 92       	push	r8
     c6e:	9f 92       	push	r9
     c70:	af 92       	push	r10
     c72:	bf 92       	push	r11
     c74:	cf 92       	push	r12
     c76:	df 92       	push	r13
     c78:	ef 92       	push	r14
     c7a:	ff 92       	push	r15
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	a1 97       	sbiw	r28, 0x21	; 33
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
    if(!fs || !dir_entry)
     c94:	00 97       	sbiw	r24, 0x00	; 0
     c96:	09 f4       	brne	.+2      	; 0xc9a <fat_write_dir_entry+0x3a>
     c98:	2c c1       	rjmp	.+600    	; 0xef2 <fat_write_dir_entry+0x292>
     c9a:	61 15       	cp	r22, r1
     c9c:	71 05       	cpc	r23, r1
     c9e:	09 f4       	brne	.+2      	; 0xca2 <fat_write_dir_entry+0x42>
     ca0:	2a c1       	rjmp	.+596    	; 0xef6 <fat_write_dir_entry+0x296>
     ca2:	8b 01       	movw	r16, r22
     ca4:	fc 01       	movw	r30, r24
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
     ca6:	01 90       	ld	r0, Z+
     ca8:	f0 81       	ld	r31, Z
     caa:	e0 2d       	mov	r30, r0
     cac:	c4 80       	ldd	r12, Z+4	; 0x04
     cae:	d5 80       	ldd	r13, Z+5	; 0x05
    offset_t offset = dir_entry->entry_offset;
     cb0:	db 01       	movw	r26, r22
     cb2:	97 96       	adiw	r26, 0x27	; 39
     cb4:	4d 90       	ld	r4, X+
     cb6:	5d 90       	ld	r5, X+
     cb8:	6d 90       	ld	r6, X+
     cba:	7c 90       	ld	r7, X
     cbc:	9a 97       	sbiw	r26, 0x2a	; 42
    const char* name = dir_entry->long_name;
     cbe:	5b 01       	movw	r10, r22
    uint8_t name_len = strlen(name);
     cc0:	fb 01       	movw	r30, r22
     cc2:	01 90       	ld	r0, Z+
     cc4:	00 20       	and	r0, r0
     cc6:	e9 f7       	brne	.-6      	; 0xcc2 <fat_write_dir_entry+0x62>
     cc8:	31 97       	sbiw	r30, 0x01	; 1
     cca:	7f 01       	movw	r14, r30
     ccc:	e6 1a       	sub	r14, r22
     cce:	f7 0a       	sbc	r15, r23
     cd0:	8e 2c       	mov	r8, r14
     cd2:	c7 01       	movw	r24, r14
     cd4:	99 27       	eor	r25, r25
#if FAT_LFN_SUPPORT
    uint8_t lfn_entry_count = (name_len + 12) / 13;
     cd6:	0c 96       	adiw	r24, 0x0c	; 12
     cd8:	6d e0       	ldi	r22, 0x0D	; 13
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__divmodhi4>
     ce0:	96 2e       	mov	r9, r22
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
     ce2:	4b e0       	ldi	r20, 0x0B	; 11
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	60 e2       	ldi	r22, 0x20	; 32
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	ce 01       	movw	r24, r28
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <memset>
    char* name_ext = strrchr(name, '.');
     cf2:	6e e2       	ldi	r22, 0x2E	; 46
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	c8 01       	movw	r24, r16
     cf8:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <strrchr>
    if(name_ext && *++name_ext)
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	d1 f0       	breq	.+52     	; 0xd34 <fat_write_dir_entry+0xd4>
     d00:	fc 01       	movw	r30, r24
     d02:	21 81       	ldd	r18, Z+1	; 0x01
     d04:	22 23       	and	r18, r18
     d06:	b1 f0       	breq	.+44     	; 0xd34 <fat_write_dir_entry+0xd4>
     d08:	bc 01       	movw	r22, r24
     d0a:	6f 5f       	subi	r22, 0xFF	; 255
     d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    {
        uint8_t name_ext_len = strlen(name_ext);
     d0e:	fb 01       	movw	r30, r22
     d10:	01 90       	ld	r0, Z+
     d12:	00 20       	and	r0, r0
     d14:	e9 f7       	brne	.-6      	; 0xd10 <fat_write_dir_entry+0xb0>
     d16:	31 97       	sbiw	r30, 0x01	; 1
     d18:	e6 1b       	sub	r30, r22
     d1a:	f7 0b       	sbc	r31, r23
     d1c:	ea 94       	dec	r14
        name_len -= name_ext_len + 1;
     d1e:	8e 2c       	mov	r8, r14
     d20:	8e 1a       	sub	r8, r30
     d22:	e4 30       	cpi	r30, 0x04	; 4
     d24:	08 f0       	brcs	.+2      	; 0xd28 <fat_write_dir_entry+0xc8>
     d26:	e3 e0       	ldi	r30, 0x03	; 3
            name_ext_len = 3;
#else
            return 0;
#endif
        
        memcpy(&buffer[8], name_ext, name_ext_len);
     d28:	4e 2f       	mov	r20, r30
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	ce 01       	movw	r24, r28
     d2e:	09 96       	adiw	r24, 0x09	; 9
     d30:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <memcpy>
    }
    
    if(name_len <= 8)
     d34:	f8 e0       	ldi	r31, 0x08	; 8
     d36:	f8 15       	cp	r31, r8
     d38:	d0 f0       	brcs	.+52     	; 0xd6e <fat_write_dir_entry+0x10e>
    {
        memcpy(buffer, name, name_len);
     d3a:	48 2d       	mov	r20, r8
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	b8 01       	movw	r22, r16
     d40:	ce 01       	movw	r24, r28
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <memcpy>
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
     d48:	d8 01       	movw	r26, r16
     d4a:	8c 91       	ld	r24, X
     d4c:	8e 32       	cpi	r24, 0x2E	; 46
     d4e:	61 f5       	brne	.+88     	; 0xda8 <fat_write_dir_entry+0x148>
           ((name[1] == '.' && name[2] == '\0') ||
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	8c 91       	ld	r24, X
     d54:	11 97       	sbiw	r26, 0x01	; 1
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
     d56:	8e 32       	cpi	r24, 0x2E	; 46
     d58:	31 f4       	brne	.+12     	; 0xd66 <fat_write_dir_entry+0x106>
           ((name[1] == '.' && name[2] == '\0') ||
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8c 91       	ld	r24, X
     d5e:	81 11       	cpse	r24, r1
     d60:	23 c0       	rjmp	.+70     	; 0xda8 <fat_write_dir_entry+0x148>
            name[1] == '\0')
          )
            lfn_entry_count = 0;
     d62:	91 2c       	mov	r9, r1
     d64:	21 c0       	rjmp	.+66     	; 0xda8 <fat_write_dir_entry+0x148>
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
           ((name[1] == '.' && name[2] == '\0') ||
     d66:	81 11       	cpse	r24, r1
     d68:	1f c0       	rjmp	.+62     	; 0xda8 <fat_write_dir_entry+0x148>
            name[1] == '\0')
          )
            lfn_entry_count = 0;
     d6a:	91 2c       	mov	r9, r1
     d6c:	1d c0       	rjmp	.+58     	; 0xda8 <fat_write_dir_entry+0x148>
#endif
    }
    else
    {
#if FAT_LFN_SUPPORT
        memcpy(buffer, name, 8);
     d6e:	88 e0       	ldi	r24, 0x08	; 8
     d70:	f8 01       	movw	r30, r16
     d72:	de 01       	movw	r26, r28
     d74:	11 96       	adiw	r26, 0x01	; 1
     d76:	01 90       	ld	r0, Z+
     d78:	0d 92       	st	X+, r0
     d7a:	8a 95       	dec	r24
     d7c:	e1 f7       	brne	.-8      	; 0xd76 <fat_write_dir_entry+0x116>

        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;
     d7e:	f8 01       	movw	r30, r16
     d80:	81 a1       	ldd	r24, Z+33	; 0x21

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
     d82:	80 3a       	cpi	r24, 0xA0	; 160
     d84:	28 f4       	brcc	.+10     	; 0xd90 <fat_write_dir_entry+0x130>
     d86:	98 2f       	mov	r25, r24
     d88:	92 95       	swap	r25
     d8a:	9f 70       	andi	r25, 0x0F	; 15
     d8c:	90 5d       	subi	r25, 0xD0	; 208
     d8e:	04 c0       	rjmp	.+8      	; 0xd98 <fat_write_dir_entry+0x138>
     d90:	98 2f       	mov	r25, r24
     d92:	92 95       	swap	r25
     d94:	9f 70       	andi	r25, 0x0F	; 15
     d96:	9f 59       	subi	r25, 0x9F	; 159
     d98:	9f 83       	std	Y+7, r25	; 0x07
        num &= 0x0f;
     d9a:	8f 70       	andi	r24, 0x0F	; 15
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
     d9c:	8a 30       	cpi	r24, 0x0A	; 10
     d9e:	10 f4       	brcc	.+4      	; 0xda4 <fat_write_dir_entry+0x144>
     da0:	80 5d       	subi	r24, 0xD0	; 208
     da2:	01 c0       	rjmp	.+2      	; 0xda6 <fat_write_dir_entry+0x146>
     da4:	8f 59       	subi	r24, 0x9F	; 159
     da6:	88 87       	std	Y+8, r24	; 0x08
#else
        return 0;
#endif
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	85 3e       	cpi	r24, 0xE5	; 229
     dac:	11 f4       	brne	.+4      	; 0xdb2 <fat_write_dir_entry+0x152>
        buffer[0] = 0x05;
     dae:	85 e0       	ldi	r24, 0x05	; 5
     db0:	89 83       	std	Y+1, r24	; 0x01

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
     db2:	fe 01       	movw	r30, r28
     db4:	3c 96       	adiw	r30, 0x0c	; 12
     db6:	85 e1       	ldi	r24, 0x15	; 21
     db8:	df 01       	movw	r26, r30
     dba:	1d 92       	st	X+, r1
     dbc:	8a 95       	dec	r24
     dbe:	e9 f7       	brne	.-6      	; 0xdba <fat_write_dir_entry+0x15a>
    buffer[0x0b] = dir_entry->attributes;
     dc0:	f8 01       	movw	r30, r16
     dc2:	80 a1       	ldd	r24, Z+32	; 0x20
     dc4:	8c 87       	std	Y+12, r24	; 0x0c
    write16(&buffer[0x18], dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    write16(&buffer[0x14], (uint16_t) (dir_entry->cluster >> 16));
#endif
    write16(&buffer[0x1a], dir_entry->cluster);
     dc6:	61 a1       	ldd	r22, Z+33	; 0x21
     dc8:	72 a1       	ldd	r23, Z+34	; 0x22
     dca:	ce 01       	movw	r24, r28
     dcc:	4b 96       	adiw	r24, 0x1b	; 27
     dce:	0e 94 89 01 	call	0x312	; 0x312 <write16>
    write32(&buffer[0x1c], dir_entry->file_size);
     dd2:	d8 01       	movw	r26, r16
     dd4:	93 96       	adiw	r26, 0x23	; 35
     dd6:	4d 91       	ld	r20, X+
     dd8:	5d 91       	ld	r21, X+
     dda:	6d 91       	ld	r22, X+
     ddc:	7c 91       	ld	r23, X
     dde:	96 97       	sbiw	r26, 0x26	; 38
     de0:	ce 01       	movw	r24, r28
     de2:	4d 96       	adiw	r24, 0x1d	; 29
     de4:	0e 94 8d 01 	call	0x31a	; 0x31a <write32>

    /* write to disk */
#if FAT_LFN_SUPPORT
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
     de8:	b0 e2       	ldi	r27, 0x20	; 32
     dea:	9b 9e       	mul	r9, r27
     dec:	c0 01       	movw	r24, r0
     dee:	11 24       	eor	r1, r1
     df0:	a3 01       	movw	r20, r6
     df2:	92 01       	movw	r18, r4
     df4:	28 0f       	add	r18, r24
     df6:	39 1f       	adc	r19, r25
     df8:	41 1d       	adc	r20, r1
     dfa:	51 1d       	adc	r21, r1
     dfc:	ca 01       	movw	r24, r20
     dfe:	b9 01       	movw	r22, r18
     e00:	20 e2       	ldi	r18, 0x20	; 32
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	ae 01       	movw	r20, r28
     e06:	4f 5f       	subi	r20, 0xFF	; 255
     e08:	5f 4f       	sbci	r21, 0xFF	; 255
     e0a:	f6 01       	movw	r30, r12
     e0c:	09 95       	icall
     e0e:	88 23       	and	r24, r24
     e10:	09 f4       	brne	.+2      	; 0xe14 <fat_write_dir_entry+0x1b4>
     e12:	7a c0       	rjmp	.+244    	; 0xf08 <fat_write_dir_entry+0x2a8>
#endif
        return 0;
    
#if FAT_LFN_SUPPORT
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
     e14:	ce 01       	movw	r24, r28
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	0e 94 7f 03 	call	0x6fe	; 0x6fe <fat_calc_83_checksum>
     e1c:	28 2e       	mov	r2, r24
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
     e1e:	99 20       	and	r9, r9
     e20:	09 f4       	brne	.+2      	; 0xe24 <fat_write_dir_entry+0x1c4>
     e22:	6b c0       	rjmp	.+214    	; 0xefa <fat_write_dir_entry+0x29a>
     e24:	19 2d       	mov	r17, r9
    {
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
     e26:	0f 2e       	mov	r0, r31
     e28:	fd e0       	ldi	r31, 0x0D	; 13
     e2a:	3f 2e       	mov	r3, r31
     e2c:	f0 2d       	mov	r31, r0
        uint8_t i = 1;
     e2e:	88 24       	eor	r8, r8
     e30:	83 94       	inc	r8
            buffer[i++] = 0;

            switch(i)
            {
                case 0x0b:
                    i = 0x0e;
     e32:	0f 2e       	mov	r0, r31
     e34:	fe e0       	ldi	r31, 0x0E	; 14
     e36:	ff 2e       	mov	r15, r31
     e38:	f0 2d       	mov	r31, r0
                    break;
                case 0x1a:
                    i = 0x1c;
     e3a:	0c e1       	ldi	r16, 0x1C	; 28
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
        if(lfn_entry == lfn_entry_count)
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
     e3c:	f9 2d       	mov	r31, r9
     e3e:	f0 64       	ori	r31, 0x40	; 64
     e40:	f9 a3       	std	Y+33, r31	; 0x21

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
     e42:	0f 2e       	mov	r0, r31
     e44:	ff e0       	ldi	r31, 0x0F	; 15
     e46:	ef 2e       	mov	r14, r31
     e48:	f0 2d       	mov	r31, r0
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
     e4a:	40 e2       	ldi	r20, 0x20	; 32
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	6f ef       	ldi	r22, 0xFF	; 255
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	ce 01       	movw	r24, r28
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <memset>
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
     e5a:	81 2f       	mov	r24, r17
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	38 9e       	mul	r3, r24
     e62:	f0 01       	movw	r30, r0
     e64:	39 9e       	mul	r3, r25
     e66:	f0 0d       	add	r31, r0
     e68:	11 24       	eor	r1, r1
     e6a:	ea 0d       	add	r30, r10
     e6c:	fb 1d       	adc	r31, r11
     e6e:	bf 01       	movw	r22, r30
        uint8_t i = 1;
     e70:	88 2d       	mov	r24, r8
     e72:	01 c0       	rjmp	.+2      	; 0xe76 <fat_write_dir_entry+0x216>
     e74:	31 96       	adiw	r30, 0x01	; 1
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	98 0f       	add	r25, r24
     e7a:	db 01       	movw	r26, r22
     e7c:	4d 91       	ld	r20, X+
     e7e:	bd 01       	movw	r22, r26
     e80:	21 e0       	ldi	r18, 0x01	; 1
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	2c 0f       	add	r18, r28
     e86:	3d 1f       	adc	r19, r29
     e88:	28 0f       	add	r18, r24
     e8a:	31 1d       	adc	r19, r1
     e8c:	d9 01       	movw	r26, r18
     e8e:	4c 93       	st	X, r20
            buffer[i++] = 0;
     e90:	8e 5f       	subi	r24, 0xFE	; 254
     e92:	21 e0       	ldi	r18, 0x01	; 1
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	2c 0f       	add	r18, r28
     e98:	3d 1f       	adc	r19, r29
     e9a:	29 0f       	add	r18, r25
     e9c:	31 1d       	adc	r19, r1
     e9e:	d9 01       	movw	r26, r18
     ea0:	1c 92       	st	X, r1

            switch(i)
     ea2:	8b 30       	cpi	r24, 0x0B	; 11
     ea4:	61 f1       	breq	.+88     	; 0xefe <fat_write_dir_entry+0x29e>
     ea6:	8a 31       	cpi	r24, 0x1A	; 26
     ea8:	11 f4       	brne	.+4      	; 0xeae <fat_write_dir_entry+0x24e>
            {
                case 0x0b:
                    i = 0x0e;
                    break;
                case 0x1a:
                    i = 0x1c;
     eaa:	80 2f       	mov	r24, r16
     eac:	29 c0       	rjmp	.+82     	; 0xf00 <fat_write_dir_entry+0x2a0>
                    break;
            }

            if(!*long_name_curr++)
     eae:	90 81       	ld	r25, Z
     eb0:	99 23       	and	r25, r25
     eb2:	11 f0       	breq	.+4      	; 0xeb8 <fat_write_dir_entry+0x258>
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
     eb4:	8f 31       	cpi	r24, 0x1F	; 31
     eb6:	f0 f2       	brcs	.-68     	; 0xe74 <fat_write_dir_entry+0x214>
            if(!*long_name_curr++)
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
     eb8:	19 83       	std	Y+1, r17	; 0x01
        if(lfn_entry == lfn_entry_count)
     eba:	19 11       	cpse	r17, r9
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <fat_write_dir_entry+0x262>
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
     ebe:	b9 a1       	ldd	r27, Y+33	; 0x21
     ec0:	b9 83       	std	Y+1, r27	; 0x01

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
     ec2:	ec 86       	std	Y+12, r14	; 0x0c

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
     ec4:	2e 86       	std	Y+14, r2	; 0x0e

        /* clear reserved bytes */
        buffer[0x0c] = 0;
     ec6:	1d 86       	std	Y+13, r1	; 0x0d
        buffer[0x1a] = 0;
     ec8:	1b 8e       	std	Y+27, r1	; 0x1b
        buffer[0x1b] = 0;
     eca:	1c 8e       	std	Y+28, r1	; 0x1c

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
     ecc:	20 e2       	ldi	r18, 0x20	; 32
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	ae 01       	movw	r20, r28
     ed2:	4f 5f       	subi	r20, 0xFF	; 255
     ed4:	5f 4f       	sbci	r21, 0xFF	; 255
     ed6:	c3 01       	movw	r24, r6
     ed8:	b2 01       	movw	r22, r4
     eda:	f6 01       	movw	r30, r12
     edc:	09 95       	icall
    
        offset += sizeof(buffer);
     ede:	f0 e2       	ldi	r31, 0x20	; 32
     ee0:	4f 0e       	add	r4, r31
     ee2:	51 1c       	adc	r5, r1
     ee4:	61 1c       	adc	r6, r1
     ee6:	71 1c       	adc	r7, r1
#if FAT_LFN_SUPPORT
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
     ee8:	11 50       	subi	r17, 0x01	; 1
     eea:	09 f0       	breq	.+2      	; 0xeee <fat_write_dir_entry+0x28e>
     eec:	ae cf       	rjmp	.-164    	; 0xe4a <fat_write_dir_entry+0x1ea>
    
        offset += sizeof(buffer);
    }
#endif
    
    return 1;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	0b c0       	rjmp	.+22     	; 0xf08 <fat_write_dir_entry+0x2a8>
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
        return 0;
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	09 c0       	rjmp	.+18     	; 0xf08 <fat_write_dir_entry+0x2a8>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	07 c0       	rjmp	.+14     	; 0xf08 <fat_write_dir_entry+0x2a8>
    
        offset += sizeof(buffer);
    }
#endif
    
    return 1;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	05 c0       	rjmp	.+10     	; 0xf08 <fat_write_dir_entry+0x2a8>
            buffer[i++] = 0;

            switch(i)
            {
                case 0x0b:
                    i = 0x0e;
     efe:	8f 2d       	mov	r24, r15
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
     f00:	90 81       	ld	r25, Z
     f02:	91 11       	cpse	r25, r1
     f04:	b7 cf       	rjmp	.-146    	; 0xe74 <fat_write_dir_entry+0x214>
     f06:	d8 cf       	rjmp	.-80     	; 0xeb8 <fat_write_dir_entry+0x258>
        offset += sizeof(buffer);
    }
#endif
    
    return 1;
}
     f08:	a1 96       	adiw	r28, 0x21	; 33
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	df 90       	pop	r13
     f22:	cf 90       	pop	r12
     f24:	bf 90       	pop	r11
     f26:	af 90       	pop	r10
     f28:	9f 90       	pop	r9
     f2a:	8f 90       	pop	r8
     f2c:	7f 90       	pop	r7
     f2e:	6f 90       	pop	r6
     f30:	5f 90       	pop	r5
     f32:	4f 90       	pop	r4
     f34:	3f 90       	pop	r3
     f36:	2f 90       	pop	r2
     f38:	08 95       	ret

00000f3a <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
     f3a:	2f 92       	push	r2
     f3c:	3f 92       	push	r3
     f3e:	4f 92       	push	r4
     f40:	5f 92       	push	r5
     f42:	6f 92       	push	r6
     f44:	7f 92       	push	r7
     f46:	8f 92       	push	r8
     f48:	9f 92       	push	r9
     f4a:	af 92       	push	r10
     f4c:	bf 92       	push	r11
     f4e:	cf 92       	push	r12
     f50:	df 92       	push	r13
     f52:	ef 92       	push	r14
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	a8 97       	sbiw	r28, 0x28	; 40
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
    if(!partition ||
     f6e:	00 97       	sbiw	r24, 0x00	; 0
     f70:	09 f4       	brne	.+2      	; 0xf74 <fat_open+0x3a>
     f72:	37 c1       	rjmp	.+622    	; 0x11e2 <fat_open+0x2a8>
     f74:	dc 01       	movw	r26, r24
     f76:	14 96       	adiw	r26, 0x04	; 4
     f78:	2d 91       	ld	r18, X+
     f7a:	3c 91       	ld	r19, X
     f7c:	15 97       	sbiw	r26, 0x05	; 5
     f7e:	23 2b       	or	r18, r19
     f80:	09 f4       	brne	.+2      	; 0xf84 <fat_open+0x4a>
     f82:	32 c1       	rjmp	.+612    	; 0x11e8 <fat_open+0x2ae>
#if FAT_WRITE_SUPPORT
       !partition->device_write ||
     f84:	16 96       	adiw	r26, 0x06	; 6
     f86:	2d 91       	ld	r18, X+
     f88:	3c 91       	ld	r19, X
     f8a:	17 97       	sbiw	r26, 0x07	; 7
     f8c:	23 2b       	or	r18, r19
     f8e:	09 f4       	brne	.+2      	; 0xf92 <fat_open+0x58>
     f90:	2e c1       	rjmp	.+604    	; 0x11ee <fat_open+0x2b4>
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!fs->partition)
     f92:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <fat_fs_handles>
     f96:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <fat_fs_handles+0x1>
     f9a:	23 2b       	or	r18, r19
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <fat_open+0x66>
     f9e:	2a c1       	rjmp	.+596    	; 0x11f4 <fat_open+0x2ba>
            break;

        ++fs;
    }
    if(i >= FAT_FS_COUNT)
        return 0;
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	56 c1       	rjmp	.+684    	; 0x1252 <fat_open+0x318>
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
        return 0;

    uint16_t bytes_per_sector = read16(&buffer[0x00]);
     fa6:	ce 01       	movw	r24, r28
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	0e 94 6d 01 	call	0x2da	; 0x2da <read16>
     fae:	1c 01       	movw	r2, r24
    uint16_t reserved_sectors = read16(&buffer[0x03]);
     fb0:	ce 01       	movw	r24, r28
     fb2:	04 96       	adiw	r24, 0x04	; 4
     fb4:	0e 94 6d 01 	call	0x2da	; 0x2da <read16>
     fb8:	9b 8f       	std	Y+27, r25	; 0x1b
     fba:	8a 8f       	std	Y+26, r24	; 0x1a
    uint8_t sectors_per_cluster = buffer[0x02];
     fbc:	bb 81       	ldd	r27, Y+3	; 0x03
     fbe:	be a3       	std	Y+38, r27	; 0x26
    uint8_t fat_copies = buffer[0x05];
     fc0:	ee 81       	ldd	r30, Y+6	; 0x06
     fc2:	ee 8f       	std	Y+30, r30	; 0x1e
    uint16_t max_root_entries = read16(&buffer[0x06]);
     fc4:	ce 01       	movw	r24, r28
     fc6:	07 96       	adiw	r24, 0x07	; 7
     fc8:	0e 94 6d 01 	call	0x2da	; 0x2da <read16>
     fcc:	98 a7       	std	Y+40, r25	; 0x28
     fce:	8f a3       	std	Y+39, r24	; 0x27
    uint16_t sector_count_16 = read16(&buffer[0x08]);
     fd0:	ce 01       	movw	r24, r28
     fd2:	09 96       	adiw	r24, 0x09	; 9
     fd4:	0e 94 6d 01 	call	0x2da	; 0x2da <read16>
     fd8:	7c 01       	movw	r14, r24
    uint16_t sectors_per_fat = read16(&buffer[0x0b]);
     fda:	ce 01       	movw	r24, r28
     fdc:	0c 96       	adiw	r24, 0x0c	; 12
     fde:	0e 94 6d 01 	call	0x2da	; 0x2da <read16>
     fe2:	6c 01       	movw	r12, r24
    uint32_t sector_count = read32(&buffer[0x15]);
     fe4:	ce 01       	movw	r24, r28
     fe6:	46 96       	adiw	r24, 0x16	; 22
     fe8:	0e 94 77 01 	call	0x2ee	; 0x2ee <read32>
     fec:	2b 01       	movw	r4, r22
     fee:	3c 01       	movw	r6, r24
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = read32(&buffer[0x19]);
    uint32_t cluster_root_dir = read32(&buffer[0x21]);
#endif

    if(sector_count == 0)
     ff0:	67 2b       	or	r22, r23
     ff2:	68 2b       	or	r22, r24
     ff4:	69 2b       	or	r22, r25
     ff6:	39 f4       	brne	.+14     	; 0x1006 <fat_open+0xcc>
    {
        if(sector_count_16 == 0)
     ff8:	e1 14       	cp	r14, r1
     ffa:	f1 04       	cpc	r15, r1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <fat_open+0xc6>
     ffe:	23 c1       	rjmp	.+582    	; 0x1246 <fat_open+0x30c>
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
    1000:	27 01       	movw	r4, r14
    1002:	61 2c       	mov	r6, r1
    1004:	71 2c       	mov	r7, r1
        sectors_per_fat32 = sectors_per_fat;
    else if(sectors_per_fat32 == 0)
        /* this is neither FAT16 nor FAT32 */
        return 0;
#else
    if(sectors_per_fat == 0)
    1006:	c1 14       	cp	r12, r1
    1008:	d1 04       	cpc	r13, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <fat_open+0xd4>
    100c:	1c c1       	rjmp	.+568    	; 0x1246 <fat_open+0x30c>
        return 0;
#endif

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
                                 - reserved_sectors
    100e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1010:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1012:	9a 01       	movw	r18, r20
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	2a 8f       	std	Y+26, r18	; 0x1a
    101a:	3b 8f       	std	Y+27, r19	; 0x1b
    101c:	4c 8f       	std	Y+28, r20	; 0x1c
    101e:	5d 8f       	std	Y+29, r21	; 0x1d
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
    1020:	96 01       	movw	r18, r12
    1022:	5e 8d       	ldd	r21, Y+30	; 0x1e
    1024:	a5 2f       	mov	r26, r21
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__umulhisi3>
    102c:	6e 8f       	std	Y+30, r22	; 0x1e
    102e:	7f 8f       	std	Y+31, r23	; 0x1f
    1030:	88 a3       	std	Y+32, r24	; 0x20
    1032:	99 a3       	std	Y+33, r25	; 0x21
        return 0;
#endif

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
                                 - reserved_sectors
    1034:	73 01       	movw	r14, r6
    1036:	62 01       	movw	r12, r4
    1038:	8a 8d       	ldd	r24, Y+26	; 0x1a
    103a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    103c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    103e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1040:	c8 1a       	sub	r12, r24
    1042:	d9 0a       	sbc	r13, r25
    1044:	ea 0a       	sbc	r14, r26
    1046:	fb 0a       	sbc	r15, r27
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
    1048:	2e 8d       	ldd	r18, Y+30	; 0x1e
    104a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    104c:	48 a1       	ldd	r20, Y+32	; 0x20
    104e:	59 a1       	ldd	r21, Y+33	; 0x21
    1050:	c2 1a       	sub	r12, r18
    1052:	d3 0a       	sbc	r13, r19
    1054:	e4 0a       	sbc	r14, r20
    1056:	f5 0a       	sbc	r15, r21
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    1058:	8f a1       	ldd	r24, Y+39	; 0x27
    105a:	98 a5       	ldd	r25, Y+40	; 0x28
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	82 95       	swap	r24
    1062:	92 95       	swap	r25
    1064:	90 7f       	andi	r25, 0xF0	; 240
    1066:	98 27       	eor	r25, r24
    1068:	80 7f       	andi	r24, 0xF0	; 240
    106a:	98 27       	eor	r25, r24
    106c:	91 01       	movw	r18, r2
    106e:	21 50       	subi	r18, 0x01	; 1
    1070:	31 09       	sbc	r19, r1
    1072:	82 0f       	add	r24, r18
    1074:	93 1f       	adc	r25, r19
    1076:	b1 01       	movw	r22, r2
    1078:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <__udivmodhi4>
        /* this is not a FAT16 */
        return 0;
#endif

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
    107c:	a7 01       	movw	r20, r14
    107e:	96 01       	movw	r18, r12
    1080:	26 1b       	sub	r18, r22
    1082:	37 0b       	sbc	r19, r23
    1084:	41 09       	sbc	r20, r1
    1086:	51 09       	sbc	r21, r1
    1088:	ca 01       	movw	r24, r20
    108a:	b9 01       	movw	r22, r18
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    108c:	3e a1       	ldd	r19, Y+38	; 0x26
    108e:	c3 2e       	mov	r12, r19
    1090:	d1 2c       	mov	r13, r1
    1092:	e1 2c       	mov	r14, r1
    1094:	f1 2c       	mov	r15, r1
    1096:	a7 01       	movw	r20, r14
    1098:	96 01       	movw	r18, r12
    109a:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__udivmodsi4>
    109e:	69 01       	movw	r12, r18
    10a0:	7a 01       	movw	r14, r20
    if(data_cluster_count < 4085)
    10a2:	45 ef       	ldi	r20, 0xF5	; 245
    10a4:	c4 16       	cp	r12, r20
    10a6:	4f e0       	ldi	r20, 0x0F	; 15
    10a8:	d4 06       	cpc	r13, r20
    10aa:	e1 04       	cpc	r14, r1
    10ac:	f1 04       	cpc	r15, r1
    10ae:	08 f4       	brcc	.+2      	; 0x10b2 <fat_open+0x178>
    10b0:	ca c0       	rjmp	.+404    	; 0x1246 <fat_open+0x30c>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
    10b2:	55 ef       	ldi	r21, 0xF5	; 245
    10b4:	c5 16       	cp	r12, r21
    10b6:	5f ef       	ldi	r21, 0xFF	; 255
    10b8:	d5 06       	cpc	r13, r21
    10ba:	e1 04       	cpc	r14, r1
    10bc:	f1 04       	cpc	r15, r1
    10be:	28 f4       	brcc	.+10     	; 0x10ca <fat_open+0x190>
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
    10c0:	86 e0       	ldi	r24, 0x06	; 6
    10c2:	d8 01       	movw	r26, r16
    10c4:	18 96       	adiw	r26, 0x08	; 8
    10c6:	8c 93       	st	X, r24
    10c8:	03 c0       	rjmp	.+6      	; 0x10d0 <fat_open+0x196>
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;
    10ca:	8b e0       	ldi	r24, 0x0B	; 11
    10cc:	f8 01       	movw	r30, r16
    10ce:	80 87       	std	Z+8, r24	; 0x08

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    10d0:	88 e1       	ldi	r24, 0x18	; 24
    10d2:	e7 ea       	ldi	r30, 0xA7	; 167
    10d4:	f1 e0       	ldi	r31, 0x01	; 1
    10d6:	df 01       	movw	r26, r30
    10d8:	1d 92       	st	X+, r1
    10da:	8a 95       	dec	r24
    10dc:	e9 f7       	brne	.-6      	; 0x10d8 <fat_open+0x19e>
    
    header->size = (offset_t) sector_count * bytes_per_sector;
    10de:	91 01       	movw	r18, r2
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	2a a3       	std	Y+34, r18	; 0x22
    10e6:	3b a3       	std	Y+35, r19	; 0x23
    10e8:	4c a3       	std	Y+36, r20	; 0x24
    10ea:	5d a3       	std	Y+37, r21	; 0x25
    10ec:	e5 ea       	ldi	r30, 0xA5	; 165
    10ee:	f1 e0       	ldi	r31, 0x01	; 1
    10f0:	a3 01       	movw	r20, r6
    10f2:	92 01       	movw	r18, r4
    10f4:	6a a1       	ldd	r22, Y+34	; 0x22
    10f6:	7b a1       	ldd	r23, Y+35	; 0x23
    10f8:	8c a1       	ldd	r24, Y+36	; 0x24
    10fa:	9d a1       	ldd	r25, Y+37	; 0x25
    10fc:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    1100:	62 83       	std	Z+2, r22	; 0x02
    1102:	73 83       	std	Z+3, r23	; 0x03
    1104:	84 83       	std	Z+4, r24	; 0x04
    1106:	95 83       	std	Z+5, r25	; 0x05

    header->fat_offset = /* jump to partition */
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    1108:	2a a1       	ldd	r18, Y+34	; 0x22
    110a:	3b a1       	ldd	r19, Y+35	; 0x23
    110c:	4c a1       	ldd	r20, Y+36	; 0x24
    110e:	5d a1       	ldd	r21, Y+37	; 0x25
    1110:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1112:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1114:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1116:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1118:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    memset(header, 0, sizeof(*header));
    
    header->size = (offset_t) sector_count * bytes_per_sector;

    header->fat_offset = /* jump to partition */
                         partition_offset +
    111c:	86 0e       	add	r8, r22
    111e:	97 1e       	adc	r9, r23
    1120:	a8 1e       	adc	r10, r24
    1122:	b9 1e       	adc	r11, r25
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    
    header->size = (offset_t) sector_count * bytes_per_sector;

    header->fat_offset = /* jump to partition */
    1124:	86 82       	std	Z+6, r8	; 0x06
    1126:	97 82       	std	Z+7, r9	; 0x07
    1128:	a0 86       	std	Z+8, r10	; 0x08
    112a:	b1 86       	std	Z+9, r11	; 0x09
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    112c:	c7 01       	movw	r24, r14
    112e:	b6 01       	movw	r22, r12
    1130:	6e 5f       	subi	r22, 0xFE	; 254
    1132:	7f 4f       	sbci	r23, 0xFF	; 255
    1134:	8f 4f       	sbci	r24, 0xFF	; 255
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	d8 01       	movw	r26, r16
    113a:	18 96       	adiw	r26, 0x08	; 8
    113c:	2c 91       	ld	r18, X
    113e:	26 30       	cpi	r18, 0x06	; 6
    1140:	29 f0       	breq	.+10     	; 0x114c <fat_open+0x212>
    1142:	24 e0       	ldi	r18, 0x04	; 4
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <fat_open+0x21a>
    114c:	22 e0       	ldi	r18, 0x02	; 2
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	e5 ea       	ldi	r30, 0xA5	; 165
    1156:	f1 e0       	ldi	r31, 0x01	; 1
    1158:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    115c:	62 87       	std	Z+10, r22	; 0x0a
    115e:	73 87       	std	Z+11, r23	; 0x0b
    1160:	84 87       	std	Z+12, r24	; 0x0c
    1162:	95 87       	std	Z+13, r25	; 0x0d

    header->sector_size = bytes_per_sector;
    1164:	37 86       	std	Z+15, r3	; 0x0f
    1166:	26 86       	std	Z+14, r2	; 0x0e
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
    1168:	be a1       	ldd	r27, Y+38	; 0x26
    116a:	b2 9d       	mul	r27, r2
    116c:	c0 01       	movw	r24, r0
    116e:	b3 9d       	mul	r27, r3
    1170:	90 0d       	add	r25, r0
    1172:	11 24       	eor	r1, r1
    1174:	91 8b       	std	Z+17, r25	; 0x11
    1176:	80 8b       	std	Z+16, r24	; 0x10
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;
    1178:	2e 8d       	ldd	r18, Y+30	; 0x1e
    117a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    117c:	48 a1       	ldd	r20, Y+32	; 0x20
    117e:	59 a1       	ldd	r21, Y+33	; 0x21
    1180:	6a a1       	ldd	r22, Y+34	; 0x22
    1182:	7b a1       	ldd	r23, Y+35	; 0x23
    1184:	8c a1       	ldd	r24, Y+36	; 0x24
    1186:	9d a1       	ldd	r25, Y+37	; 0x25
    1188:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
    118c:	86 0e       	add	r8, r22
    118e:	97 1e       	adc	r9, r23
    1190:	a8 1e       	adc	r10, r24
    1192:	b9 1e       	adc	r11, r25

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
    1194:	86 8a       	std	Z+22, r8	; 0x16
    1196:	97 8a       	std	Z+23, r9	; 0x17
    1198:	a0 8e       	std	Z+24, r10	; 0x18
    119a:	b1 8e       	std	Z+25, r11	; 0x19
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
                                      /* skip root directory entries */
                                      (offset_t) max_root_entries * 32;
    119c:	2f a1       	ldd	r18, Y+39	; 0x27
    119e:	38 a5       	ldd	r19, Y+40	; 0x28
    11a0:	c9 01       	movw	r24, r18
    11a2:	a0 e0       	ldi	r26, 0x00	; 0
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	aa 1f       	adc	r26, r26
    11ac:	bb 1f       	adc	r27, r27
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	aa 1f       	adc	r26, r26
    11b4:	bb 1f       	adc	r27, r27
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	aa 1f       	adc	r26, r26
    11bc:	bb 1f       	adc	r27, r27
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	aa 1f       	adc	r26, r26
    11c4:	bb 1f       	adc	r27, r27
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	aa 1f       	adc	r26, r26
    11cc:	bb 1f       	adc	r27, r27
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
    11ce:	88 0e       	add	r8, r24
    11d0:	99 1e       	adc	r9, r25
    11d2:	aa 1e       	adc	r10, r26
    11d4:	bb 1e       	adc	r11, r27
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
    11d6:	82 8a       	std	Z+18, r8	; 0x12
    11d8:	93 8a       	std	Z+19, r9	; 0x13
    11da:	a4 8a       	std	Z+20, r10	; 0x14
    11dc:	b5 8a       	std	Z+21, r11	; 0x15
        fs->partition = 0;
#endif
        return 0;
    }
    
    return fs;
    11de:	cf 01       	movw	r24, r30
    11e0:	38 c0       	rjmp	.+112    	; 0x1252 <fat_open+0x318>
       !partition->device_write_interval
#else
       0
#endif
      )
        return 0;
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	35 c0       	rjmp	.+106    	; 0x1252 <fat_open+0x318>
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	32 c0       	rjmp	.+100    	; 0x1252 <fat_open+0x318>
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	2f c0       	rjmp	.+94     	; 0x1252 <fat_open+0x318>
    11f4:	8c 01       	movw	r16, r24
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif

    memset(fs, 0, sizeof(*fs));
    11f6:	e5 ea       	ldi	r30, 0xA5	; 165
    11f8:	f1 e0       	ldi	r31, 0x01	; 1
    11fa:	8c e1       	ldi	r24, 0x1C	; 28
    11fc:	df 01       	movw	r26, r30
    11fe:	1d 92       	st	X+, r1
    1200:	8a 95       	dec	r24
    1202:	e9 f7       	brne	.-6      	; 0x11fe <fat_open+0x2c4>

    fs->partition = partition;
    1204:	11 83       	std	Z+1, r17	; 0x01
    1206:	00 83       	st	Z, r16
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    1208:	f8 01       	movw	r30, r16
    120a:	81 84       	ldd	r8, Z+9	; 0x09
    120c:	92 84       	ldd	r9, Z+10	; 0x0a
    120e:	a3 84       	ldd	r10, Z+11	; 0x0b
    1210:	b4 84       	ldd	r11, Z+12	; 0x0c
    1212:	07 2e       	mov	r0, r23
    1214:	79 e0       	ldi	r23, 0x09	; 9
    1216:	88 0c       	add	r8, r8
    1218:	99 1c       	adc	r9, r9
    121a:	aa 1c       	adc	r10, r10
    121c:	bb 1c       	adc	r11, r11
    121e:	7a 95       	dec	r23
    1220:	d1 f7       	brne	.-12     	; 0x1216 <fat_open+0x2dc>
    1222:	70 2d       	mov	r23, r0
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
    1224:	c5 01       	movw	r24, r10
    1226:	b4 01       	movw	r22, r8
    1228:	65 5f       	subi	r22, 0xF5	; 245
    122a:	7f 4f       	sbci	r23, 0xFF	; 255
    122c:	8f 4f       	sbci	r24, 0xFF	; 255
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	01 90       	ld	r0, Z+
    1232:	f0 81       	ld	r31, Z
    1234:	e0 2d       	mov	r30, r0
    1236:	29 e1       	ldi	r18, 0x19	; 25
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	ae 01       	movw	r20, r28
    123c:	4f 5f       	subi	r20, 0xFF	; 255
    123e:	5f 4f       	sbci	r21, 0xFF	; 255
    1240:	09 95       	icall
    1242:	81 11       	cpse	r24, r1
    1244:	b0 ce       	rjmp	.-672    	; 0xfa6 <fat_open+0x6c>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
    1246:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <fat_fs_handles+0x1>
    124a:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <fat_fs_handles>
#endif
        return 0;
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    }
    
    return fs;
}
    1252:	a8 96       	adiw	r28, 0x28	; 40
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	df 90       	pop	r13
    126c:	cf 90       	pop	r12
    126e:	bf 90       	pop	r11
    1270:	af 90       	pop	r10
    1272:	9f 90       	pop	r9
    1274:	8f 90       	pop	r8
    1276:	7f 90       	pop	r7
    1278:	6f 90       	pop	r6
    127a:	5f 90       	pop	r5
    127c:	4f 90       	pop	r4
    127e:	3f 90       	pop	r3
    1280:	2f 90       	pop	r2
    1282:	08 95       	ret

00001284 <fat_close>:
 * \param[in] fs The filesystem to close.
 * \see fat_open
 */
void fat_close(struct fat_fs_struct* fs)
{
    if(!fs)
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	19 f0       	breq	.+6      	; 0x128e <fat_close+0xa>
        return;

#if USE_DYNAMIC_MEMORY
    free(fs);
#else
    fs->partition = 0;
    1288:	fc 01       	movw	r30, r24
    128a:	11 82       	std	Z+1, r1	; 0x01
    128c:	10 82       	st	Z, r1
    128e:	08 95       	ret

00001290 <fat_open_file>:
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	89 f0       	breq	.+34     	; 0x12b6 <fat_open_file+0x26>
    1294:	61 15       	cp	r22, r1
    1296:	71 05       	cpc	r23, r1
    1298:	89 f0       	breq	.+34     	; 0x12bc <fat_open_file+0x2c>
    129a:	db 01       	movw	r26, r22
    129c:	90 96       	adiw	r26, 0x20	; 32
    129e:	2c 91       	ld	r18, X
    12a0:	24 fd       	sbrc	r18, 4
    12a2:	0f c0       	rjmp	.+30     	; 0x12c2 <fat_open_file+0x32>
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
    12a4:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <fat_file_handles>
    12a8:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <fat_file_handles+0x1>
    12ac:	23 2b       	or	r18, r19
    12ae:	61 f0       	breq	.+24     	; 0x12c8 <fat_open_file+0x38>
            break;

        ++fd;
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	08 95       	ret
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
        return 0;
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	08 95       	ret
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	08 95       	ret
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	08 95       	ret
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    12c8:	2b e2       	ldi	r18, 0x2B	; 43
    12ca:	fb 01       	movw	r30, r22
    12cc:	a4 e7       	ldi	r26, 0x74	; 116
    12ce:	b1 e0       	ldi	r27, 0x01	; 1
    12d0:	01 90       	ld	r0, Z+
    12d2:	0d 92       	st	X+, r0
    12d4:	2a 95       	dec	r18
    12d6:	e1 f7       	brne	.-8      	; 0x12d0 <fat_open_file+0x40>
    fd->fs = fs;
    12d8:	e2 e7       	ldi	r30, 0x72	; 114
    12da:	f1 e0       	ldi	r31, 0x01	; 1
    12dc:	91 83       	std	Z+1, r25	; 0x01
    12de:	80 83       	st	Z, r24
    fd->pos = 0;
    12e0:	15 a6       	std	Z+45, r1	; 0x2d
    12e2:	16 a6       	std	Z+46, r1	; 0x2e
    12e4:	17 a6       	std	Z+47, r1	; 0x2f
    12e6:	10 aa       	std	Z+48, r1	; 0x30
    fd->pos_cluster = dir_entry->cluster;
    12e8:	db 01       	movw	r26, r22
    12ea:	91 96       	adiw	r26, 0x21	; 33
    12ec:	8d 91       	ld	r24, X+
    12ee:	9c 91       	ld	r25, X
    12f0:	92 97       	sbiw	r26, 0x22	; 34
    12f2:	92 ab       	std	Z+50, r25	; 0x32
    12f4:	81 ab       	std	Z+49, r24	; 0x31

    return fd;
    12f6:	cf 01       	movw	r24, r30
}
    12f8:	08 95       	ret

000012fa <fat_close_file>:
 * \param[in] fd The file handle of the file to close.
 * \see fat_open_file
 */
void fat_close_file(struct fat_file_struct* fd)
{
    if(fd)
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	19 f0       	breq	.+6      	; 0x1304 <fat_close_file+0xa>
#endif

#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
    12fe:	fc 01       	movw	r30, r24
    1300:	11 82       	std	Z+1, r1	; 0x01
    1302:	10 82       	st	Z, r1
    1304:	08 95       	ret

00001306 <fat_read_file>:
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
    1306:	2f 92       	push	r2
    1308:	3f 92       	push	r3
    130a:	4f 92       	push	r4
    130c:	5f 92       	push	r5
    130e:	6f 92       	push	r6
    1310:	7f 92       	push	r7
    1312:	8f 92       	push	r8
    1314:	9f 92       	push	r9
    1316:	af 92       	push	r10
    1318:	bf 92       	push	r11
    131a:	cf 92       	push	r12
    131c:	df 92       	push	r13
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	28 97       	sbiw	r28, 0x08	; 8
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	8c 01       	movw	r16, r24
    133c:	3b 01       	movw	r6, r22
    133e:	1a 01       	movw	r2, r20
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	09 f4       	brne	.+2      	; 0x1346 <fat_read_file+0x40>
    1344:	dd c0       	rjmp	.+442    	; 0x1500 <fat_read_file+0x1fa>
    1346:	67 2b       	or	r22, r23
    1348:	09 f4       	brne	.+2      	; 0x134c <fat_read_file+0x46>
    134a:	dd c0       	rjmp	.+442    	; 0x1506 <fat_read_file+0x200>
    134c:	45 2b       	or	r20, r21
    134e:	09 f4       	brne	.+2      	; 0x1352 <fat_read_file+0x4c>
    1350:	dd c0       	rjmp	.+442    	; 0x150c <fat_read_file+0x206>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
    1352:	dc 01       	movw	r26, r24
    1354:	9d 96       	adiw	r26, 0x2d	; 45
    1356:	cd 90       	ld	r12, X+
    1358:	dd 90       	ld	r13, X+
    135a:	ed 90       	ld	r14, X+
    135c:	fc 90       	ld	r15, X
    135e:	d0 97       	sbiw	r26, 0x30	; 48
    1360:	95 96       	adiw	r26, 0x25	; 37
    1362:	8d 91       	ld	r24, X+
    1364:	9d 91       	ld	r25, X+
    1366:	0d 90       	ld	r0, X+
    1368:	bc 91       	ld	r27, X
    136a:	a0 2d       	mov	r26, r0
    136c:	b7 01       	movw	r22, r14
    136e:	a6 01       	movw	r20, r12
    1370:	42 0d       	add	r20, r2
    1372:	53 1d       	adc	r21, r3
    1374:	61 1d       	adc	r22, r1
    1376:	71 1d       	adc	r23, r1
    1378:	84 17       	cp	r24, r20
    137a:	95 07       	cpc	r25, r21
    137c:	a6 07       	cpc	r26, r22
    137e:	b7 07       	cpc	r27, r23
    1380:	28 f4       	brcc	.+10     	; 0x138c <fat_read_file+0x86>
        buffer_len = fd->dir_entry.file_size - fd->pos;
    1382:	1c 01       	movw	r2, r24
    1384:	2c 18       	sub	r2, r12
    1386:	3d 08       	sbc	r3, r13
    if(buffer_len == 0)
    1388:	09 f4       	brne	.+2      	; 0x138c <fat_read_file+0x86>
    138a:	c3 c0       	rjmp	.+390    	; 0x1512 <fat_read_file+0x20c>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    138c:	d8 01       	movw	r26, r16
    138e:	ed 91       	ld	r30, X+
    1390:	fc 91       	ld	r31, X
    1392:	11 97       	sbiw	r26, 0x01	; 1
    1394:	40 88       	ldd	r4, Z+16	; 0x10
    1396:	51 88       	ldd	r5, Z+17	; 0x11
    cluster_t cluster_num = fd->pos_cluster;
    1398:	d1 96       	adiw	r26, 0x31	; 49
    139a:	8d 90       	ld	r8, X+
    139c:	9c 90       	ld	r9, X
    139e:	d2 97       	sbiw	r26, 0x32	; 50
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
    13a0:	81 14       	cp	r8, r1
    13a2:	91 04       	cpc	r9, r1
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <fat_read_file+0xa2>
    13a6:	4b c0       	rjmp	.+150    	; 0x143e <fat_read_file+0x138>
    {
        cluster_num = fd->dir_entry.cluster;
    13a8:	93 96       	adiw	r26, 0x23	; 35
    13aa:	8d 90       	ld	r8, X+
    13ac:	9c 90       	ld	r9, X
    13ae:	94 97       	sbiw	r26, 0x24	; 36
        
        if(!cluster_num)
    13b0:	81 14       	cp	r8, r1
    13b2:	91 04       	cpc	r9, r1
    13b4:	61 f4       	brne	.+24     	; 0x13ce <fat_read_file+0xc8>
        {
            if(!fd->pos)
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	cd 28       	or	r12, r13
    13bc:	ce 28       	or	r12, r14
    13be:	cf 28       	or	r12, r15
    13c0:	11 f4       	brne	.+4      	; 0x13c6 <fat_read_file+0xc0>
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	91 95       	neg	r25
    13c8:	81 95       	neg	r24
    13ca:	91 09       	sbc	r25, r1
    13cc:	a7 c0       	rjmp	.+334    	; 0x151c <fat_read_file+0x216>
                return 0;
            else
                return -1;
        }

        if(fd->pos)
    13ce:	c1 14       	cp	r12, r1
    13d0:	d1 04       	cpc	r13, r1
    13d2:	e1 04       	cpc	r14, r1
    13d4:	f1 04       	cpc	r15, r1
    13d6:	d9 f4       	brne	.+54     	; 0x140e <fat_read_file+0x108>
    13d8:	32 c0       	rjmp	.+100    	; 0x143e <fat_read_file+0x138>
    13da:	29 81       	ldd	r18, Y+1	; 0x01
    13dc:	3a 81       	ldd	r19, Y+2	; 0x02
    13de:	4b 81       	ldd	r20, Y+3	; 0x03
    13e0:	5c 81       	ldd	r21, Y+4	; 0x04
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	af 81       	ldd	r26, Y+7	; 0x07
    13e8:	b8 85       	ldd	r27, Y+8	; 0x08
    13ea:	28 1b       	sub	r18, r24
    13ec:	39 0b       	sbc	r19, r25
    13ee:	4a 0b       	sbc	r20, r26
    13f0:	5b 0b       	sbc	r21, r27
    13f2:	29 83       	std	Y+1, r18	; 0x01
    13f4:	3a 83       	std	Y+2, r19	; 0x02
    13f6:	4b 83       	std	Y+3, r20	; 0x03
    13f8:	5c 83       	std	Y+4, r21	; 0x04
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
    13fa:	b4 01       	movw	r22, r8
    13fc:	d8 01       	movw	r26, r16
    13fe:	8d 91       	ld	r24, X+
    1400:	9c 91       	ld	r25, X
    1402:	0e 94 93 01 	call	0x326	; 0x326 <fat_get_next_cluster>
    1406:	4c 01       	movw	r8, r24
                if(!cluster_num)
    1408:	89 2b       	or	r24, r25
    140a:	61 f4       	brne	.+24     	; 0x1424 <fat_read_file+0x11e>
    140c:	85 c0       	rjmp	.+266    	; 0x1518 <fat_read_file+0x212>
    140e:	c9 82       	std	Y+1, r12	; 0x01
    1410:	da 82       	std	Y+2, r13	; 0x02
    1412:	eb 82       	std	Y+3, r14	; 0x03
    1414:	fc 82       	std	Y+4, r15	; 0x04
        }

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
    1416:	92 01       	movw	r18, r4
    1418:	40 e0       	ldi	r20, 0x00	; 0
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	2d 83       	std	Y+5, r18	; 0x05
    141e:	3e 83       	std	Y+6, r19	; 0x06
    1420:	4f 83       	std	Y+7, r20	; 0x07
    1422:	58 87       	std	Y+8, r21	; 0x08
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	ab 81       	ldd	r26, Y+3	; 0x03
    142a:	bc 81       	ldd	r27, Y+4	; 0x04
    142c:	2d 81       	ldd	r18, Y+5	; 0x05
    142e:	3e 81       	ldd	r19, Y+6	; 0x06
    1430:	4f 81       	ldd	r20, Y+7	; 0x07
    1432:	58 85       	ldd	r21, Y+8	; 0x08
    1434:	82 17       	cp	r24, r18
    1436:	93 07       	cpc	r25, r19
    1438:	a4 07       	cpc	r26, r20
    143a:	b5 07       	cpc	r27, r21
    143c:	70 f6       	brcc	.-100    	; 0x13da <fat_read_file+0xd4>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    143e:	c2 01       	movw	r24, r4
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	c8 22       	and	r12, r24
    1444:	d9 22       	and	r13, r25
    1446:	71 01       	movw	r14, r2
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    1448:	d8 01       	movw	r26, r16
    144a:	ad 90       	ld	r10, X+
    144c:	bc 90       	ld	r11, X
    144e:	b4 01       	movw	r22, r8
    1450:	c5 01       	movw	r24, r10
    1452:	0e 94 5d 03 	call	0x6ba	; 0x6ba <fat_cluster_offset>
    1456:	f2 01       	movw	r30, r4
    1458:	ec 19       	sub	r30, r12
    145a:	fd 09       	sbc	r31, r13
    145c:	fa 83       	std	Y+2, r31	; 0x02
    145e:	e9 83       	std	Y+1, r30	; 0x01
    1460:	ee 16       	cp	r14, r30
    1462:	ff 06       	cpc	r15, r31
    1464:	10 f4       	brcc	.+4      	; 0x146a <fat_read_file+0x164>
    1466:	fa 82       	std	Y+2, r15	; 0x02
    1468:	e9 82       	std	Y+1, r14	; 0x01
        uint16_t copy_length = cluster_size - first_cluster_offset;
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
    146a:	d5 01       	movw	r26, r10
    146c:	ed 91       	ld	r30, X+
    146e:	fc 91       	ld	r31, X
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    1470:	6c 0d       	add	r22, r12
    1472:	7d 1d       	adc	r23, r13
    1474:	81 1d       	adc	r24, r1
    1476:	91 1d       	adc	r25, r1
        uint16_t copy_length = cluster_size - first_cluster_offset;
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
    1478:	01 90       	ld	r0, Z+
    147a:	f0 81       	ld	r31, Z
    147c:	e0 2d       	mov	r30, r0
    147e:	29 81       	ldd	r18, Y+1	; 0x01
    1480:	3a 81       	ldd	r19, Y+2	; 0x02
    1482:	a3 01       	movw	r20, r6
    1484:	09 95       	icall
    1486:	81 11       	cpse	r24, r1
    1488:	04 c0       	rjmp	.+8      	; 0x1492 <fat_read_file+0x18c>
            return buffer_len - buffer_left;
    148a:	c1 01       	movw	r24, r2
    148c:	8e 19       	sub	r24, r14
    148e:	9f 09       	sbc	r25, r15
    1490:	45 c0       	rjmp	.+138    	; 0x151c <fat_read_file+0x216>

        /* calculate new file position */
        buffer += copy_length;
    1492:	e9 81       	ldd	r30, Y+1	; 0x01
    1494:	fa 81       	ldd	r31, Y+2	; 0x02
    1496:	6e 0e       	add	r6, r30
    1498:	7f 1e       	adc	r7, r31
        buffer_left -= copy_length;
    149a:	ee 1a       	sub	r14, r30
    149c:	ff 0a       	sbc	r15, r31
        fd->pos += copy_length;
    149e:	f8 01       	movw	r30, r16
    14a0:	85 a5       	ldd	r24, Z+45	; 0x2d
    14a2:	96 a5       	ldd	r25, Z+46	; 0x2e
    14a4:	a7 a5       	ldd	r26, Z+47	; 0x2f
    14a6:	b0 a9       	ldd	r27, Z+48	; 0x30
    14a8:	29 81       	ldd	r18, Y+1	; 0x01
    14aa:	3a 81       	ldd	r19, Y+2	; 0x02
    14ac:	82 0f       	add	r24, r18
    14ae:	93 1f       	adc	r25, r19
    14b0:	a1 1d       	adc	r26, r1
    14b2:	b1 1d       	adc	r27, r1
    14b4:	85 a7       	std	Z+45, r24	; 0x2d
    14b6:	96 a7       	std	Z+46, r25	; 0x2e
    14b8:	a7 a7       	std	Z+47, r26	; 0x2f
    14ba:	b0 ab       	std	Z+48, r27	; 0x30

        if(first_cluster_offset + copy_length >= cluster_size)
    14bc:	c9 01       	movw	r24, r18
    14be:	8c 0d       	add	r24, r12
    14c0:	9d 1d       	adc	r25, r13
    14c2:	84 15       	cp	r24, r4
    14c4:	95 05       	cpc	r25, r5
    14c6:	98 f0       	brcs	.+38     	; 0x14ee <fat_read_file+0x1e8>
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
    14c8:	b4 01       	movw	r22, r8
    14ca:	80 81       	ld	r24, Z
    14cc:	91 81       	ldd	r25, Z+1	; 0x01
    14ce:	0e 94 93 01 	call	0x326	; 0x326 <fat_get_next_cluster>
    14d2:	4c 01       	movw	r8, r24
    14d4:	89 2b       	or	r24, r25
    14d6:	49 f4       	brne	.+18     	; 0x14ea <fat_read_file+0x1e4>
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
    14d8:	d8 01       	movw	r26, r16
    14da:	d2 96       	adiw	r26, 0x32	; 50
    14dc:	1c 92       	st	X, r1
    14de:	1e 92       	st	-X, r1
    14e0:	d1 97       	sbiw	r26, 0x31	; 49
                return buffer_len - buffer_left;
    14e2:	c1 01       	movw	r24, r2
    14e4:	8e 19       	sub	r24, r14
    14e6:	9f 09       	sbc	r25, r15
    14e8:	19 c0       	rjmp	.+50     	; 0x151c <fat_read_file+0x216>
        if(first_cluster_offset + copy_length >= cluster_size)
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
            {
                first_cluster_offset = 0;
    14ea:	c1 2c       	mov	r12, r1
    14ec:	d1 2c       	mov	r13, r1
                fd->pos_cluster = 0;
                return buffer_len - buffer_left;
            }
        }

        fd->pos_cluster = cluster_num;
    14ee:	f8 01       	movw	r30, r16
    14f0:	92 aa       	std	Z+50, r9	; 0x32
    14f2:	81 aa       	std	Z+49, r8	; 0x31

    } while(buffer_left > 0); /* check if we are done */
    14f4:	e1 14       	cp	r14, r1
    14f6:	f1 04       	cpc	r15, r1
    14f8:	09 f0       	breq	.+2      	; 0x14fc <fat_read_file+0x1f6>
    14fa:	a6 cf       	rjmp	.-180    	; 0x1448 <fat_read_file+0x142>

    return buffer_len;
    14fc:	c1 01       	movw	r24, r2
    14fe:	0e c0       	rjmp	.+28     	; 0x151c <fat_read_file+0x216>
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
        return -1;
    1500:	8f ef       	ldi	r24, 0xFF	; 255
    1502:	9f ef       	ldi	r25, 0xFF	; 255
    1504:	0b c0       	rjmp	.+22     	; 0x151c <fat_read_file+0x216>
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	9f ef       	ldi	r25, 0xFF	; 255
    150a:	08 c0       	rjmp	.+16     	; 0x151c <fat_read_file+0x216>
    150c:	8f ef       	ldi	r24, 0xFF	; 255
    150e:	9f ef       	ldi	r25, 0xFF	; 255
    1510:	05 c0       	rjmp	.+10     	; 0x151c <fat_read_file+0x216>

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
        buffer_len = fd->dir_entry.file_size - fd->pos;
    if(buffer_len == 0)
        return 0;
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	02 c0       	rjmp	.+4      	; 0x151c <fat_read_file+0x216>
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
                    return -1;
    1518:	8f ef       	ldi	r24, 0xFF	; 255
    151a:	9f ef       	ldi	r25, 0xFF	; 255
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
}
    151c:	28 96       	adiw	r28, 0x08	; 8
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	bf 90       	pop	r11
    153a:	af 90       	pop	r10
    153c:	9f 90       	pop	r9
    153e:	8f 90       	pop	r8
    1540:	7f 90       	pop	r7
    1542:	6f 90       	pop	r6
    1544:	5f 90       	pop	r5
    1546:	4f 90       	pop	r4
    1548:	3f 90       	pop	r3
    154a:	2f 90       	pop	r2
    154c:	08 95       	ret

0000154e <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written (0 or something less than \c buffer_len on disk full) or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    154e:	2f 92       	push	r2
    1550:	3f 92       	push	r3
    1552:	4f 92       	push	r4
    1554:	5f 92       	push	r5
    1556:	6f 92       	push	r6
    1558:	7f 92       	push	r7
    155a:	8f 92       	push	r8
    155c:	9f 92       	push	r9
    155e:	af 92       	push	r10
    1560:	bf 92       	push	r11
    1562:	cf 92       	push	r12
    1564:	df 92       	push	r13
    1566:	ef 92       	push	r14
    1568:	ff 92       	push	r15
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	00 d0       	rcall	.+0      	; 0x1574 <fat_write_file+0x26>
    1574:	00 d0       	rcall	.+0      	; 0x1576 <fat_write_file+0x28>
    1576:	00 d0       	rcall	.+0      	; 0x1578 <fat_write_file+0x2a>
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	8c 01       	movw	r16, r24
    157e:	3b 01       	movw	r6, r22
    1580:	1a 01       	movw	r2, r20
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	09 f4       	brne	.+2      	; 0x1588 <fat_write_file+0x3a>
    1586:	17 c1       	rjmp	.+558    	; 0x17b6 <fat_write_file+0x268>
    1588:	67 2b       	or	r22, r23
    158a:	09 f4       	brne	.+2      	; 0x158e <fat_write_file+0x40>
    158c:	17 c1       	rjmp	.+558    	; 0x17bc <fat_write_file+0x26e>
    158e:	45 2b       	or	r20, r21
    1590:	09 f4       	brne	.+2      	; 0x1594 <fat_write_file+0x46>
    1592:	17 c1       	rjmp	.+558    	; 0x17c2 <fat_write_file+0x274>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    1594:	fc 01       	movw	r30, r24
    1596:	85 a5       	ldd	r24, Z+45	; 0x2d
    1598:	96 a5       	ldd	r25, Z+46	; 0x2e
    159a:	a7 a5       	ldd	r26, Z+47	; 0x2f
    159c:	b0 a9       	ldd	r27, Z+48	; 0x30
    159e:	45 a1       	ldd	r20, Z+37	; 0x25
    15a0:	56 a1       	ldd	r21, Z+38	; 0x26
    15a2:	67 a1       	ldd	r22, Z+39	; 0x27
    15a4:	70 a5       	ldd	r23, Z+40	; 0x28
    15a6:	48 17       	cp	r20, r24
    15a8:	59 07       	cpc	r21, r25
    15aa:	6a 07       	cpc	r22, r26
    15ac:	7b 07       	cpc	r23, r27
    15ae:	08 f4       	brcc	.+2      	; 0x15b2 <fat_write_file+0x64>
    15b0:	0b c1       	rjmp	.+534    	; 0x17c8 <fat_write_file+0x27a>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    15b2:	e0 80       	ld	r14, Z
    15b4:	f1 80       	ldd	r15, Z+1	; 0x01
    15b6:	f7 01       	movw	r30, r14
    15b8:	40 88       	ldd	r4, Z+16	; 0x10
    15ba:	51 88       	ldd	r5, Z+17	; 0x11
    cluster_t cluster_num = fd->pos_cluster;
    15bc:	f8 01       	movw	r30, r16
    15be:	01 a8       	ldd	r0, Z+49	; 0x31
    15c0:	f2 a9       	ldd	r31, Z+50	; 0x32
    15c2:	e0 2d       	mov	r30, r0
    15c4:	fa 83       	std	Y+2, r31	; 0x02
    15c6:	e9 83       	std	Y+1, r30	; 0x01
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    15c8:	62 01       	movw	r12, r4
    15ca:	f1 e0       	ldi	r31, 0x01	; 1
    15cc:	cf 1a       	sub	r12, r31
    15ce:	d1 08       	sbc	r13, r1
    15d0:	c8 22       	and	r12, r24
    15d2:	d9 22       	and	r13, r25

    /* find cluster in which to start writing */
    if(!cluster_num)
    15d4:	29 81       	ldd	r18, Y+1	; 0x01
    15d6:	3a 81       	ldd	r19, Y+2	; 0x02
    15d8:	23 2b       	or	r18, r19
    15da:	09 f0       	breq	.+2      	; 0x15de <fat_write_file+0x90>
    15dc:	5f c0       	rjmp	.+190    	; 0x169c <fat_write_file+0x14e>
    {
        cluster_num = fd->dir_entry.cluster;
    15de:	f8 01       	movw	r30, r16
    15e0:	03 a0       	ldd	r0, Z+35	; 0x23
    15e2:	f4 a1       	ldd	r31, Z+36	; 0x24
    15e4:	e0 2d       	mov	r30, r0
    15e6:	fa 83       	std	Y+2, r31	; 0x02
    15e8:	e9 83       	std	Y+1, r30	; 0x01
        
        if(!cluster_num)
    15ea:	ef 2b       	or	r30, r31
    15ec:	b1 f4       	brne	.+44     	; 0x161a <fat_write_file+0xcc>
        {
            if(!fd->pos)
    15ee:	89 2b       	or	r24, r25
    15f0:	8a 2b       	or	r24, r26
    15f2:	8b 2b       	or	r24, r27
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <fat_write_file+0xaa>
    15f6:	eb c0       	rjmp	.+470    	; 0x17ce <fat_write_file+0x280>
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    15f8:	41 e0       	ldi	r20, 0x01	; 1
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	c7 01       	movw	r24, r14
    1602:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <fat_append_clusters>
    1606:	9a 83       	std	Y+2, r25	; 0x02
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	d8 01       	movw	r26, r16
    160c:	94 96       	adiw	r26, 0x24	; 36
    160e:	9c 93       	st	X, r25
    1610:	8e 93       	st	-X, r24
    1612:	93 97       	sbiw	r26, 0x23	; 35
                if(!cluster_num)
    1614:	89 2b       	or	r24, r25
    1616:	09 f4       	brne	.+2      	; 0x161a <fat_write_file+0xcc>
    1618:	dd c0       	rjmp	.+442    	; 0x17d4 <fat_write_file+0x286>
            {
                return -1;
            }
        }

        if(fd->pos)
    161a:	f8 01       	movw	r30, r16
    161c:	85 a4       	ldd	r8, Z+45	; 0x2d
    161e:	96 a4       	ldd	r9, Z+46	; 0x2e
    1620:	a7 a4       	ldd	r10, Z+47	; 0x2f
    1622:	b0 a8       	ldd	r11, Z+48	; 0x30
    1624:	81 14       	cp	r8, r1
    1626:	91 04       	cpc	r9, r1
    1628:	a1 04       	cpc	r10, r1
    162a:	b1 04       	cpc	r11, r1
    162c:	39 f5       	brne	.+78     	; 0x167c <fat_write_file+0x12e>
    162e:	36 c0       	rjmp	.+108    	; 0x169c <fat_write_file+0x14e>
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	ad 81       	ldd	r26, Y+5	; 0x05
    1636:	be 81       	ldd	r27, Y+6	; 0x06
    1638:	88 1a       	sub	r8, r24
    163a:	99 0a       	sbc	r9, r25
    163c:	aa 0a       	sbc	r10, r26
    163e:	bb 0a       	sbc	r11, r27
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    1640:	69 81       	ldd	r22, Y+1	; 0x01
    1642:	7a 81       	ldd	r23, Y+2	; 0x02
    1644:	d8 01       	movw	r26, r16
    1646:	8d 91       	ld	r24, X+
    1648:	9c 91       	ld	r25, X
    164a:	0e 94 93 01 	call	0x326	; 0x326 <fat_get_next_cluster>
                if(!cluster_num_next)
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	91 f4       	brne	.+36     	; 0x1676 <fat_write_file+0x128>
                {
                    if(pos != 0)
    1652:	81 14       	cp	r8, r1
    1654:	91 04       	cpc	r9, r1
    1656:	a1 04       	cpc	r10, r1
    1658:	b1 04       	cpc	r11, r1
    165a:	09 f0       	breq	.+2      	; 0x165e <fat_write_file+0x110>
    165c:	be c0       	rjmp	.+380    	; 0x17da <fat_write_file+0x28c>
                        return -1; /* current file position points beyond end of file */

                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    165e:	41 e0       	ldi	r20, 0x01	; 1
    1660:	50 e0       	ldi	r21, 0x00	; 0
    1662:	69 81       	ldd	r22, Y+1	; 0x01
    1664:	7a 81       	ldd	r23, Y+2	; 0x02
    1666:	f8 01       	movw	r30, r16
    1668:	80 81       	ld	r24, Z
    166a:	91 81       	ldd	r25, Z+1	; 0x01
    166c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <fat_append_clusters>
                    if(!cluster_num_next)
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	09 f4       	brne	.+2      	; 0x1676 <fat_write_file+0x128>
    1674:	b5 c0       	rjmp	.+362    	; 0x17e0 <fat_write_file+0x292>
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written (0 or something less than \c buffer_len on disk full) or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    1676:	9a 83       	std	Y+2, r25	; 0x02
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	07 c0       	rjmp	.+14     	; 0x168a <fat_write_file+0x13c>

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    167c:	c2 01       	movw	r24, r4
    167e:	a0 e0       	ldi	r26, 0x00	; 0
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	8b 83       	std	Y+3, r24	; 0x03
    1684:	9c 83       	std	Y+4, r25	; 0x04
    1686:	ad 83       	std	Y+5, r26	; 0x05
    1688:	be 83       	std	Y+6, r27	; 0x06
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	ad 81       	ldd	r26, Y+5	; 0x05
    1690:	be 81       	ldd	r27, Y+6	; 0x06
    1692:	88 16       	cp	r8, r24
    1694:	99 06       	cpc	r9, r25
    1696:	aa 06       	cpc	r10, r26
    1698:	bb 06       	cpc	r11, r27
    169a:	50 f6       	brcc	.-108    	; 0x1630 <fat_write_file+0xe2>
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    169c:	71 01       	movw	r14, r2
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    169e:	d8 01       	movw	r26, r16
    16a0:	ad 90       	ld	r10, X+
    16a2:	bc 90       	ld	r11, X
    16a4:	69 81       	ldd	r22, Y+1	; 0x01
    16a6:	7a 81       	ldd	r23, Y+2	; 0x02
    16a8:	c5 01       	movw	r24, r10
    16aa:	0e 94 5d 03 	call	0x6ba	; 0x6ba <fat_cluster_offset>
    16ae:	42 01       	movw	r8, r4
    16b0:	8c 18       	sub	r8, r12
    16b2:	9d 08       	sbc	r9, r13
    16b4:	e8 14       	cp	r14, r8
    16b6:	f9 04       	cpc	r15, r9
    16b8:	08 f4       	brcc	.+2      	; 0x16bc <fat_write_file+0x16e>
    16ba:	47 01       	movw	r8, r14
        uint16_t write_length = cluster_size - first_cluster_offset;
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    16bc:	d5 01       	movw	r26, r10
    16be:	ed 91       	ld	r30, X+
    16c0:	fc 91       	ld	r31, X
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    16c2:	6c 0d       	add	r22, r12
    16c4:	7d 1d       	adc	r23, r13
    16c6:	81 1d       	adc	r24, r1
    16c8:	91 1d       	adc	r25, r1
        uint16_t write_length = cluster_size - first_cluster_offset;
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    16ca:	04 80       	ldd	r0, Z+4	; 0x04
    16cc:	f5 81       	ldd	r31, Z+5	; 0x05
    16ce:	e0 2d       	mov	r30, r0
    16d0:	94 01       	movw	r18, r8
    16d2:	a3 01       	movw	r20, r6
    16d4:	09 95       	icall
    16d6:	88 23       	and	r24, r24
    16d8:	09 f4       	brne	.+2      	; 0x16dc <fat_write_file+0x18e>
    16da:	42 c0       	rjmp	.+132    	; 0x1760 <fat_write_file+0x212>
            break;

        /* calculate new file position */
        buffer += write_length;
    16dc:	68 0c       	add	r6, r8
    16de:	79 1c       	adc	r7, r9
        buffer_left -= write_length;
    16e0:	e8 18       	sub	r14, r8
    16e2:	f9 08       	sbc	r15, r9
        fd->pos += write_length;
    16e4:	f8 01       	movw	r30, r16
    16e6:	85 a5       	ldd	r24, Z+45	; 0x2d
    16e8:	96 a5       	ldd	r25, Z+46	; 0x2e
    16ea:	a7 a5       	ldd	r26, Z+47	; 0x2f
    16ec:	b0 a9       	ldd	r27, Z+48	; 0x30
    16ee:	88 0d       	add	r24, r8
    16f0:	99 1d       	adc	r25, r9
    16f2:	a1 1d       	adc	r26, r1
    16f4:	b1 1d       	adc	r27, r1
    16f6:	85 a7       	std	Z+45, r24	; 0x2d
    16f8:	96 a7       	std	Z+46, r25	; 0x2e
    16fa:	a7 a7       	std	Z+47, r26	; 0x2f
    16fc:	b0 ab       	std	Z+48, r27	; 0x30

        if(first_cluster_offset + write_length >= cluster_size)
    16fe:	8c 0c       	add	r8, r12
    1700:	9d 1c       	adc	r9, r13
    1702:	84 14       	cp	r8, r4
    1704:	95 04       	cpc	r9, r5
    1706:	08 f1       	brcs	.+66     	; 0x174a <fat_write_file+0x1fc>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    1708:	69 81       	ldd	r22, Y+1	; 0x01
    170a:	7a 81       	ldd	r23, Y+2	; 0x02
    170c:	80 81       	ld	r24, Z
    170e:	91 81       	ldd	r25, Z+1	; 0x01
    1710:	0e 94 93 01 	call	0x326	; 0x326 <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	a9 f4       	brne	.+42     	; 0x1742 <fat_write_file+0x1f4>
    1718:	e1 14       	cp	r14, r1
    171a:	f1 04       	cpc	r15, r1
    171c:	71 f0       	breq	.+28     	; 0x173a <fat_write_file+0x1ec>
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    171e:	41 e0       	ldi	r20, 0x01	; 1
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	69 81       	ldd	r22, Y+1	; 0x01
    1724:	7a 81       	ldd	r23, Y+2	; 0x02
    1726:	d8 01       	movw	r26, r16
    1728:	8d 91       	ld	r24, X+
    172a:	9c 91       	ld	r25, X
    172c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <fat_append_clusters>
    1730:	9a 83       	std	Y+2, r25	; 0x02
    1732:	89 83       	std	Y+1, r24	; 0x01
            if(!cluster_num_next)
    1734:	89 2b       	or	r24, r25
    1736:	09 f0       	breq	.+2      	; 0x173a <fat_write_file+0x1ec>
    1738:	56 c0       	rjmp	.+172    	; 0x17e6 <fat_write_file+0x298>
            {
                fd->pos_cluster = 0;
    173a:	f8 01       	movw	r30, r16
    173c:	12 aa       	std	Z+50, r1	; 0x32
    173e:	11 aa       	std	Z+49, r1	; 0x31
                break;
    1740:	0f c0       	rjmp	.+30     	; 0x1760 <fat_write_file+0x212>
        fd->pos += write_length;

        if(first_cluster_offset + write_length >= cluster_size)
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    1742:	9a 83       	std	Y+2, r25	; 0x02
    1744:	89 83       	std	Y+1, r24	; 0x01
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    1746:	c1 2c       	mov	r12, r1
    1748:	d1 2c       	mov	r13, r1
        }

        fd->pos_cluster = cluster_num;
    174a:	e9 81       	ldd	r30, Y+1	; 0x01
    174c:	fa 81       	ldd	r31, Y+2	; 0x02
    174e:	d8 01       	movw	r26, r16
    1750:	d2 96       	adiw	r26, 0x32	; 50
    1752:	fc 93       	st	X, r31
    1754:	ee 93       	st	-X, r30
    1756:	d1 97       	sbiw	r26, 0x31	; 49

    } while(buffer_left > 0); /* check if we are done */
    1758:	e1 14       	cp	r14, r1
    175a:	f1 04       	cpc	r15, r1
    175c:	09 f0       	breq	.+2      	; 0x1760 <fat_write_file+0x212>
    175e:	9f cf       	rjmp	.-194    	; 0x169e <fat_write_file+0x150>

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
    1760:	f8 01       	movw	r30, r16
    1762:	85 a5       	ldd	r24, Z+45	; 0x2d
    1764:	96 a5       	ldd	r25, Z+46	; 0x2e
    1766:	a7 a5       	ldd	r26, Z+47	; 0x2f
    1768:	b0 a9       	ldd	r27, Z+48	; 0x30
    176a:	85 a0       	ldd	r8, Z+37	; 0x25
    176c:	96 a0       	ldd	r9, Z+38	; 0x26
    176e:	a7 a0       	ldd	r10, Z+39	; 0x27
    1770:	b0 a4       	ldd	r11, Z+40	; 0x28
    1772:	88 16       	cp	r8, r24
    1774:	99 06       	cpc	r9, r25
    1776:	aa 06       	cpc	r10, r26
    1778:	bb 06       	cpc	r11, r27
    177a:	c8 f4       	brcc	.+50     	; 0x17ae <fat_write_file+0x260>
#if !FAT_DELAY_DIRENTRY_UPDATE
        uint32_t size_old = fd->dir_entry.file_size;
#endif

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
    177c:	85 a3       	std	Z+37, r24	; 0x25
    177e:	96 a3       	std	Z+38, r25	; 0x26
    1780:	a7 a3       	std	Z+39, r26	; 0x27
    1782:	b0 a7       	std	Z+40, r27	; 0x28

#if !FAT_DELAY_DIRENTRY_UPDATE
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    1784:	b8 01       	movw	r22, r16
    1786:	6e 5f       	subi	r22, 0xFE	; 254
    1788:	7f 4f       	sbci	r23, 0xFF	; 255
    178a:	80 81       	ld	r24, Z
    178c:	91 81       	ldd	r25, Z+1	; 0x01
    178e:	0e 94 30 06 	call	0xc60	; 0xc60 <fat_write_dir_entry>
    1792:	81 11       	cpse	r24, r1
    1794:	0c c0       	rjmp	.+24     	; 0x17ae <fat_write_file+0x260>
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
    1796:	d8 01       	movw	r26, r16
    1798:	9d 96       	adiw	r26, 0x2d	; 45
    179a:	ed 90       	ld	r14, X+
    179c:	fc 90       	ld	r15, X
    179e:	9e 97       	sbiw	r26, 0x2e	; 46
    17a0:	e8 18       	sub	r14, r8
    17a2:	f9 08       	sbc	r15, r9
            fd->pos = size_old;
    17a4:	f8 01       	movw	r30, r16
    17a6:	85 a6       	std	Z+45, r8	; 0x2d
    17a8:	96 a6       	std	Z+46, r9	; 0x2e
    17aa:	a7 a6       	std	Z+47, r10	; 0x2f
    17ac:	b0 aa       	std	Z+48, r11	; 0x30
        }
#endif
    }

    return buffer_len - buffer_left;
    17ae:	c1 01       	movw	r24, r2
    17b0:	8e 19       	sub	r24, r14
    17b2:	9f 09       	sbc	r25, r15
    17b4:	22 c0       	rjmp	.+68     	; 0x17fa <fat_write_file+0x2ac>
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
        return -1;
    17b6:	8f ef       	ldi	r24, 0xFF	; 255
    17b8:	9f ef       	ldi	r25, 0xFF	; 255
    17ba:	1f c0       	rjmp	.+62     	; 0x17fa <fat_write_file+0x2ac>
    17bc:	8f ef       	ldi	r24, 0xFF	; 255
    17be:	9f ef       	ldi	r25, 0xFF	; 255
    17c0:	1c c0       	rjmp	.+56     	; 0x17fa <fat_write_file+0x2ac>
    17c2:	8f ef       	ldi	r24, 0xFF	; 255
    17c4:	9f ef       	ldi	r25, 0xFF	; 255
    17c6:	19 c0       	rjmp	.+50     	; 0x17fa <fat_write_file+0x2ac>
    if(fd->pos > fd->dir_entry.file_size)
        return -1;
    17c8:	8f ef       	ldi	r24, 0xFF	; 255
    17ca:	9f ef       	ldi	r25, 0xFF	; 255
    17cc:	16 c0       	rjmp	.+44     	; 0x17fa <fat_write_file+0x2ac>
                if(!cluster_num)
                    return 0;
            }
            else
            {
                return -1;
    17ce:	8f ef       	ldi	r24, 0xFF	; 255
    17d0:	9f ef       	ldi	r25, 0xFF	; 255
    17d2:	13 c0       	rjmp	.+38     	; 0x17fa <fat_write_file+0x2ac>
            if(!fd->pos)
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
                if(!cluster_num)
                    return 0;
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	10 c0       	rjmp	.+32     	; 0x17fa <fat_write_file+0x2ac>
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num_next)
                {
                    if(pos != 0)
                        return -1; /* current file position points beyond end of file */
    17da:	8f ef       	ldi	r24, 0xFF	; 255
    17dc:	9f ef       	ldi	r25, 0xFF	; 255
    17de:	0d c0       	rjmp	.+26     	; 0x17fa <fat_write_file+0x2ac>

                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
                    if(!cluster_num_next)
                        return 0;
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0a c0       	rjmp	.+20     	; 0x17fa <fat_write_file+0x2ac>

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
        }

        fd->pos_cluster = cluster_num;
    17e6:	e9 81       	ldd	r30, Y+1	; 0x01
    17e8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ea:	d8 01       	movw	r26, r16
    17ec:	d2 96       	adiw	r26, 0x32	; 50
    17ee:	fc 93       	st	X, r31
    17f0:	ee 93       	st	-X, r30
    17f2:	d1 97       	sbiw	r26, 0x31	; 49
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    17f4:	c1 2c       	mov	r12, r1
    17f6:	d1 2c       	mov	r13, r1
    17f8:	52 cf       	rjmp	.-348    	; 0x169e <fat_write_file+0x150>
        }
#endif
    }

    return buffer_len - buffer_left;
}
    17fa:	26 96       	adiw	r28, 0x06	; 6
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	0f 91       	pop	r16
    180e:	ff 90       	pop	r15
    1810:	ef 90       	pop	r14
    1812:	df 90       	pop	r13
    1814:	cf 90       	pop	r12
    1816:	bf 90       	pop	r11
    1818:	af 90       	pop	r10
    181a:	9f 90       	pop	r9
    181c:	8f 90       	pop	r8
    181e:	7f 90       	pop	r7
    1820:	6f 90       	pop	r6
    1822:	5f 90       	pop	r5
    1824:	4f 90       	pop	r4
    1826:	3f 90       	pop	r3
    1828:	2f 90       	pop	r2
    182a:	08 95       	ret

0000182c <fat_resize_file>:
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    182c:	2f 92       	push	r2
    182e:	3f 92       	push	r3
    1830:	4f 92       	push	r4
    1832:	5f 92       	push	r5
    1834:	6f 92       	push	r6
    1836:	7f 92       	push	r7
    1838:	8f 92       	push	r8
    183a:	9f 92       	push	r9
    183c:	af 92       	push	r10
    183e:	bf 92       	push	r11
    1840:	cf 92       	push	r12
    1842:	df 92       	push	r13
    1844:	ef 92       	push	r14
    1846:	ff 92       	push	r15
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	00 d0       	rcall	.+0      	; 0x1852 <fat_resize_file+0x26>
    1852:	00 d0       	rcall	.+0      	; 0x1854 <fat_resize_file+0x28>
    1854:	00 d0       	rcall	.+0      	; 0x1856 <fat_resize_file+0x2a>
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    if(!fd)
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	09 f4       	brne	.+2      	; 0x1860 <fat_resize_file+0x34>
    185e:	d8 c0       	rjmp	.+432    	; 0x1a10 <fat_resize_file+0x1e4>
    1860:	4b 83       	std	Y+3, r20	; 0x03
    1862:	5c 83       	std	Y+4, r21	; 0x04
    1864:	6d 83       	std	Y+5, r22	; 0x05
    1866:	7e 83       	std	Y+6, r23	; 0x06
    1868:	5c 01       	movw	r10, r24
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    186a:	dc 01       	movw	r26, r24
    186c:	93 96       	adiw	r26, 0x23	; 35
    186e:	8d 90       	ld	r8, X+
    1870:	9c 90       	ld	r9, X
    1872:	94 97       	sbiw	r26, 0x24	; 36
    uint16_t cluster_size = fd->fs->header.cluster_size;
    1874:	ed 91       	ld	r30, X+
    1876:	fc 91       	ld	r31, X
    1878:	40 88       	ldd	r4, Z+16	; 0x10
    187a:	51 88       	ldd	r5, Z+17	; 0x11
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    187c:	81 14       	cp	r8, r1
    187e:	91 04       	cpc	r9, r1
    1880:	09 f0       	breq	.+2      	; 0x1884 <fat_resize_file+0x58>
    1882:	04 c1       	rjmp	.+520    	; 0x1a8c <fat_resize_file+0x260>
    1884:	45 2b       	or	r20, r21
    1886:	46 2b       	or	r20, r22
    1888:	47 2b       	or	r20, r23
    188a:	09 f4       	brne	.+2      	; 0x188e <fat_resize_file+0x62>
    188c:	ab c0       	rjmp	.+342    	; 0x19e4 <fat_resize_file+0x1b8>
    188e:	ef c0       	rjmp	.+478    	; 0x1a6e <fat_resize_file+0x242>
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    1890:	cb 80       	ldd	r12, Y+3	; 0x03
    1892:	dc 80       	ldd	r13, Y+4	; 0x04
    1894:	ed 80       	ldd	r14, Y+5	; 0x05
    1896:	fe 80       	ldd	r15, Y+6	; 0x06

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    1898:	b4 01       	movw	r22, r8
    189a:	f5 01       	movw	r30, r10
    189c:	80 81       	ld	r24, Z
    189e:	91 81       	ldd	r25, Z+1	; 0x01
    18a0:	0e 94 93 01 	call	0x326	; 0x326 <fat_get_next_cluster>
    18a4:	8c 01       	movw	r16, r24
            if(cluster_num_next)
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	59 f0       	breq	.+22     	; 0x18c0 <fat_resize_file+0x94>
            {
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
    18aa:	c4 18       	sub	r12, r4
    18ac:	d5 08       	sbc	r13, r5
    18ae:	e6 08       	sbc	r14, r6
    18b0:	f7 08       	sbc	r15, r7

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    18b2:	4c 01       	movw	r8, r24
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    18b4:	4c 14       	cp	r4, r12
    18b6:	5d 04       	cpc	r5, r13
    18b8:	6e 04       	cpc	r6, r14
    18ba:	7f 04       	cpc	r7, r15
    18bc:	68 f3       	brcs	.-38     	; 0x1898 <fat_resize_file+0x6c>
    18be:	2c c0       	rjmp	.+88     	; 0x1918 <fat_resize_file+0xec>
            {
                break;
            }
        }

        if(size_new > cluster_size || cluster_num == 0)
    18c0:	4c 14       	cp	r4, r12
    18c2:	5d 04       	cpc	r5, r13
    18c4:	6e 04       	cpc	r6, r14
    18c6:	7f 04       	cpc	r7, r15
    18c8:	28 f0       	brcs	.+10     	; 0x18d4 <fat_resize_file+0xa8>
    18ca:	84 01       	movw	r16, r8
    18cc:	89 28       	or	r8, r9
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <fat_resize_file+0xa6>
    18d0:	a7 c0       	rjmp	.+334    	; 0x1a20 <fat_resize_file+0x1f4>
    18d2:	22 c0       	rjmp	.+68     	; 0x1918 <fat_resize_file+0xec>
    18d4:	d3 01       	movw	r26, r6
    18d6:	c2 01       	movw	r24, r4
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	a1 09       	sbc	r26, r1
    18dc:	b1 09       	sbc	r27, r1
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
    18de:	bc 01       	movw	r22, r24
    18e0:	cd 01       	movw	r24, r26
    18e2:	6c 0d       	add	r22, r12
    18e4:	7d 1d       	adc	r23, r13
    18e6:	8e 1d       	adc	r24, r14
    18e8:	9f 1d       	adc	r25, r15
    18ea:	a3 01       	movw	r20, r6
    18ec:	92 01       	movw	r18, r4
    18ee:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__udivmodsi4>
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    18f2:	a9 01       	movw	r20, r18
    18f4:	b4 01       	movw	r22, r8
    18f6:	d5 01       	movw	r26, r10
    18f8:	8d 91       	ld	r24, X+
    18fa:	9c 91       	ld	r25, X
    18fc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <fat_append_clusters>
    1900:	8c 01       	movw	r16, r24
            if(!cluster_new_chain)
    1902:	89 2b       	or	r24, r25
    1904:	09 f4       	brne	.+2      	; 0x1908 <fat_resize_file+0xdc>
    1906:	86 c0       	rjmp	.+268    	; 0x1a14 <fat_resize_file+0x1e8>
                return 0;

            if(!cluster_num)
    1908:	81 14       	cp	r8, r1
    190a:	91 04       	cpc	r9, r1
    190c:	21 f4       	brne	.+8      	; 0x1916 <fat_resize_file+0xea>
            {
                cluster_num = cluster_new_chain;
                fd->dir_entry.cluster = cluster_num;
    190e:	f5 01       	movw	r30, r10
    1910:	14 a3       	std	Z+36, r17	; 0x24
    1912:	03 a3       	std	Z+35, r16	; 0x23
    1914:	01 c0       	rjmp	.+2      	; 0x1918 <fat_resize_file+0xec>
    1916:	84 01       	movw	r16, r8
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
    1918:	2b 81       	ldd	r18, Y+3	; 0x03
    191a:	3c 81       	ldd	r19, Y+4	; 0x04
    191c:	4d 81       	ldd	r20, Y+5	; 0x05
    191e:	5e 81       	ldd	r21, Y+6	; 0x06
    1920:	d5 01       	movw	r26, r10
    1922:	95 96       	adiw	r26, 0x25	; 37
    1924:	2d 93       	st	X+, r18
    1926:	3d 93       	st	X+, r19
    1928:	4d 93       	st	X+, r20
    192a:	5c 93       	st	X, r21
    192c:	98 97       	sbiw	r26, 0x28	; 40
        if(size == 0)
    192e:	23 2b       	or	r18, r19
    1930:	24 2b       	or	r18, r20
    1932:	25 2b       	or	r18, r21
    1934:	09 f0       	breq	.+2      	; 0x1938 <fat_resize_file+0x10c>
    1936:	90 c0       	rjmp	.+288    	; 0x1a58 <fat_resize_file+0x22c>
            fd->dir_entry.cluster = 0;
    1938:	94 96       	adiw	r26, 0x24	; 36
    193a:	1c 92       	st	X, r1
    193c:	1e 92       	st	-X, r1
    193e:	93 97       	sbiw	r26, 0x23	; 35
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    1940:	b5 01       	movw	r22, r10
    1942:	6e 5f       	subi	r22, 0xFE	; 254
    1944:	7f 4f       	sbci	r23, 0xFF	; 255
    1946:	8d 91       	ld	r24, X+
    1948:	9c 91       	ld	r25, X
    194a:	0e 94 30 06 	call	0xc60	; 0xc60 <fat_write_dir_entry>
    194e:	88 23       	and	r24, r24
    1950:	09 f4       	brne	.+2      	; 0x1954 <fat_resize_file+0x128>
    1952:	ac c0       	rjmp	.+344    	; 0x1aac <fat_resize_file+0x280>
            return 0;

        if(size == 0)
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
    1954:	b8 01       	movw	r22, r16
    1956:	f5 01       	movw	r30, r10
    1958:	80 81       	ld	r24, Z
    195a:	91 81       	ldd	r25, Z+1	; 0x01
    195c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <fat_free_clusters>
    1960:	41 c0       	rjmp	.+130    	; 0x19e4 <fat_resize_file+0x1b8>
        }
        else if(size_new <= cluster_size)
    1962:	4c 14       	cp	r4, r12
    1964:	5d 04       	cpc	r5, r13
    1966:	6e 04       	cpc	r6, r14
    1968:	7f 04       	cpc	r7, r15
    196a:	e0 f1       	brcs	.+120    	; 0x19e4 <fat_resize_file+0x1b8>
        {
            /* free all clusters no longer needed */
            fat_terminate_clusters(fd->fs, cluster_num);
    196c:	d5 01       	movw	r26, r10
    196e:	ed 90       	ld	r14, X+
    1970:	fc 90       	ld	r15, X
 * \returns 0 on failure, 1 on success.
 * \see fat_free_clusters
 */
uint8_t fat_terminate_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    1972:	e1 14       	cp	r14, r1
    1974:	f1 04       	cpc	r15, r1
    1976:	b1 f1       	breq	.+108    	; 0x19e4 <fat_resize_file+0x1b8>
    1978:	02 30       	cpi	r16, 0x02	; 2
    197a:	11 05       	cpc	r17, r1
    197c:	98 f1       	brcs	.+102    	; 0x19e4 <fat_resize_file+0x1b8>
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
    197e:	b8 01       	movw	r22, r16
    1980:	c7 01       	movw	r24, r14
    1982:	0e 94 93 01 	call	0x326	; 0x326 <fat_get_next_cluster>
    1986:	6c 01       	movw	r12, r24
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
    1988:	8f ef       	ldi	r24, 0xFF	; 255
    198a:	9f ef       	ldi	r25, 0xFF	; 255
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	89 83       	std	Y+1, r24	; 0x01
        if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    1990:	f7 01       	movw	r30, r14
    1992:	40 81       	ld	r20, Z
    1994:	51 81       	ldd	r21, Z+1	; 0x01
    1996:	c8 01       	movw	r24, r16
    1998:	a0 e0       	ldi	r26, 0x00	; 0
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	8c 01       	movw	r16, r24
    199e:	9d 01       	movw	r18, r26
    19a0:	00 0f       	add	r16, r16
    19a2:	11 1f       	adc	r17, r17
    19a4:	22 1f       	adc	r18, r18
    19a6:	33 1f       	adc	r19, r19
    19a8:	86 81       	ldd	r24, Z+6	; 0x06
    19aa:	97 81       	ldd	r25, Z+7	; 0x07
    19ac:	a0 85       	ldd	r26, Z+8	; 0x08
    19ae:	b1 85       	ldd	r27, Z+9	; 0x09
    19b0:	bc 01       	movw	r22, r24
    19b2:	cd 01       	movw	r24, r26
    19b4:	60 0f       	add	r22, r16
    19b6:	71 1f       	adc	r23, r17
    19b8:	82 1f       	adc	r24, r18
    19ba:	93 1f       	adc	r25, r19
    19bc:	da 01       	movw	r26, r20
    19be:	14 96       	adiw	r26, 0x04	; 4
    19c0:	ed 91       	ld	r30, X+
    19c2:	fc 91       	ld	r31, X
    19c4:	15 97       	sbiw	r26, 0x05	; 5
    19c6:	22 e0       	ldi	r18, 0x02	; 2
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	ae 01       	movw	r20, r28
    19cc:	4f 5f       	subi	r20, 0xFF	; 255
    19ce:	5f 4f       	sbci	r21, 0xFF	; 255
    19d0:	09 95       	icall
    19d2:	88 23       	and	r24, r24
    19d4:	39 f0       	breq	.+14     	; 0x19e4 <fat_resize_file+0x1b8>
            return 0;
    }

    /* free remaining clusters */
    if(cluster_num_next)
    19d6:	c1 14       	cp	r12, r1
    19d8:	d1 04       	cpc	r13, r1
    19da:	21 f0       	breq	.+8      	; 0x19e4 <fat_resize_file+0x1b8>
        return fat_free_clusters(fs, cluster_num_next);
    19dc:	b6 01       	movw	r22, r12
    19de:	c7 01       	movw	r24, r14
    19e0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <fat_free_clusters>
        }

    } while(0);

    /* correct file position */
    if(size < fd->pos)
    19e4:	f5 01       	movw	r30, r10
    19e6:	85 a5       	ldd	r24, Z+45	; 0x2d
    19e8:	96 a5       	ldd	r25, Z+46	; 0x2e
    19ea:	a7 a5       	ldd	r26, Z+47	; 0x2f
    19ec:	b0 a9       	ldd	r27, Z+48	; 0x30
    19ee:	2b 81       	ldd	r18, Y+3	; 0x03
    19f0:	3c 81       	ldd	r19, Y+4	; 0x04
    19f2:	4d 81       	ldd	r20, Y+5	; 0x05
    19f4:	5e 81       	ldd	r21, Y+6	; 0x06
    19f6:	28 17       	cp	r18, r24
    19f8:	39 07       	cpc	r19, r25
    19fa:	4a 07       	cpc	r20, r26
    19fc:	5b 07       	cpc	r21, r27
    19fe:	60 f4       	brcc	.+24     	; 0x1a18 <fat_resize_file+0x1ec>
    {
        fd->pos = size;
    1a00:	25 a7       	std	Z+45, r18	; 0x2d
    1a02:	36 a7       	std	Z+46, r19	; 0x2e
    1a04:	47 a7       	std	Z+47, r20	; 0x2f
    1a06:	50 ab       	std	Z+48, r21	; 0x30
        fd->pos_cluster = 0;
    1a08:	12 aa       	std	Z+50, r1	; 0x32
    1a0a:	11 aa       	std	Z+49, r1	; 0x31
    }

    return 1;
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	4e c0       	rjmp	.+156    	; 0x1aac <fat_resize_file+0x280>
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    if(!fd)
        return 0;
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	4c c0       	rjmp	.+152    	; 0x1aac <fat_resize_file+0x280>
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
            if(!cluster_new_chain)
                return 0;
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	4a c0       	rjmp	.+148    	; 0x1aac <fat_resize_file+0x280>
    {
        fd->pos = size;
        fd->pos_cluster = 0;
    }

    return 1;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	48 c0       	rjmp	.+144    	; 0x1aac <fat_resize_file+0x280>
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
            if(!cluster_new_chain)
                return 0;
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	46 c0       	rjmp	.+140    	; 0x1aac <fat_resize_file+0x280>
    1a20:	d3 01       	movw	r26, r6
    1a22:	c2 01       	movw	r24, r4
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	a1 09       	sbc	r26, r1
    1a28:	b1 09       	sbc	r27, r1
        if(size_new > cluster_size || cluster_num == 0)
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
    1a2a:	bc 01       	movw	r22, r24
    1a2c:	cd 01       	movw	r24, r26
    1a2e:	6c 0d       	add	r22, r12
    1a30:	7d 1d       	adc	r23, r13
    1a32:	8e 1d       	adc	r24, r14
    1a34:	9f 1d       	adc	r25, r15
    1a36:	a3 01       	movw	r20, r6
    1a38:	92 01       	movw	r18, r4
    1a3a:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__udivmodsi4>
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    1a3e:	a9 01       	movw	r20, r18
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	f5 01       	movw	r30, r10
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <fat_append_clusters>
    1a4e:	8c 01       	movw	r16, r24
            if(!cluster_new_chain)
    1a50:	89 2b       	or	r24, r25
    1a52:	09 f0       	breq	.+2      	; 0x1a56 <fat_resize_file+0x22a>
    1a54:	5c cf       	rjmp	.-328    	; 0x190e <fat_resize_file+0xe2>
    1a56:	e2 cf       	rjmp	.-60     	; 0x1a1c <fat_resize_file+0x1f0>

        /* write new directory entry */
        fd->dir_entry.file_size = size;
        if(size == 0)
            fd->dir_entry.cluster = 0;
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    1a58:	b5 01       	movw	r22, r10
    1a5a:	6e 5f       	subi	r22, 0xFE	; 254
    1a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5e:	d5 01       	movw	r26, r10
    1a60:	8d 91       	ld	r24, X+
    1a62:	9c 91       	ld	r25, X
    1a64:	0e 94 30 06 	call	0xc60	; 0xc60 <fat_write_dir_entry>
    1a68:	81 11       	cpse	r24, r1
    1a6a:	7b cf       	rjmp	.-266    	; 0x1962 <fat_resize_file+0x136>
    1a6c:	1f c0       	rjmp	.+62     	; 0x1aac <fat_resize_file+0x280>
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    1a6e:	61 2c       	mov	r6, r1
    1a70:	71 2c       	mov	r7, r1
    1a72:	2b 81       	ldd	r18, Y+3	; 0x03
    1a74:	3c 81       	ldd	r19, Y+4	; 0x04
    1a76:	4d 81       	ldd	r20, Y+5	; 0x05
    1a78:	5e 81       	ldd	r21, Y+6	; 0x06
    1a7a:	42 16       	cp	r4, r18
    1a7c:	53 06       	cpc	r5, r19
    1a7e:	64 06       	cpc	r6, r20
    1a80:	75 06       	cpc	r7, r21
    1a82:	08 f4       	brcc	.+2      	; 0x1a86 <fat_resize_file+0x25a>
    1a84:	05 cf       	rjmp	.-502    	; 0x1890 <fat_resize_file+0x64>
    1a86:	69 01       	movw	r12, r18
    1a88:	7a 01       	movw	r14, r20
    1a8a:	ca cf       	rjmp	.-108    	; 0x1a20 <fat_resize_file+0x1f4>
    1a8c:	61 2c       	mov	r6, r1
    1a8e:	71 2c       	mov	r7, r1
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	ad 81       	ldd	r26, Y+5	; 0x05
    1a96:	be 81       	ldd	r27, Y+6	; 0x06
    1a98:	48 16       	cp	r4, r24
    1a9a:	59 06       	cpc	r5, r25
    1a9c:	6a 06       	cpc	r6, r26
    1a9e:	7b 06       	cpc	r7, r27
    1aa0:	08 f4       	brcc	.+2      	; 0x1aa4 <fat_resize_file+0x278>
    1aa2:	f6 ce       	rjmp	.-532    	; 0x1890 <fat_resize_file+0x64>
    1aa4:	6c 01       	movw	r12, r24
    1aa6:	7d 01       	movw	r14, r26
    1aa8:	84 01       	movw	r16, r8
    1aaa:	36 cf       	rjmp	.-404    	; 0x1918 <fat_resize_file+0xec>
        fd->pos = size;
        fd->pos_cluster = 0;
    }

    return 1;
}
    1aac:	26 96       	adiw	r28, 0x06	; 6
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	1f 91       	pop	r17
    1abe:	0f 91       	pop	r16
    1ac0:	ff 90       	pop	r15
    1ac2:	ef 90       	pop	r14
    1ac4:	df 90       	pop	r13
    1ac6:	cf 90       	pop	r12
    1ac8:	bf 90       	pop	r11
    1aca:	af 90       	pop	r10
    1acc:	9f 90       	pop	r9
    1ace:	8f 90       	pop	r8
    1ad0:	7f 90       	pop	r7
    1ad2:	6f 90       	pop	r6
    1ad4:	5f 90       	pop	r5
    1ad6:	4f 90       	pop	r4
    1ad8:	3f 90       	pop	r3
    1ada:	2f 90       	pop	r2
    1adc:	08 95       	ret

00001ade <fat_seek_file>:
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    1ade:	cf 92       	push	r12
    1ae0:	df 92       	push	r13
    1ae2:	ef 92       	push	r14
    1ae4:	ff 92       	push	r15
    1ae6:	0f 93       	push	r16
    1ae8:	1f 93       	push	r17
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    if(!fd || !offset)
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <fat_seek_file+0x16>
    1af2:	4c c0       	rjmp	.+152    	; 0x1b8c <fat_seek_file+0xae>
    1af4:	61 15       	cp	r22, r1
    1af6:	71 05       	cpc	r23, r1
    1af8:	09 f4       	brne	.+2      	; 0x1afc <fat_seek_file+0x1e>
    1afa:	4a c0       	rjmp	.+148    	; 0x1b90 <fat_seek_file+0xb2>
        return 0;

    uint32_t new_pos = fd->pos;
    1afc:	fc 01       	movw	r30, r24
    1afe:	05 a5       	ldd	r16, Z+45	; 0x2d
    1b00:	16 a5       	ldd	r17, Z+46	; 0x2e
    1b02:	27 a5       	ldd	r18, Z+47	; 0x2f
    1b04:	30 a9       	ldd	r19, Z+48	; 0x30
    switch(whence)
    1b06:	41 30       	cpi	r20, 0x01	; 1
    1b08:	51 f0       	breq	.+20     	; 0x1b1e <fat_seek_file+0x40>
    1b0a:	18 f0       	brcs	.+6      	; 0x1b12 <fat_seek_file+0x34>
    1b0c:	42 30       	cpi	r20, 0x02	; 2
    1b0e:	89 f0       	breq	.+34     	; 0x1b32 <fat_seek_file+0x54>
    1b10:	41 c0       	rjmp	.+130    	; 0x1b94 <fat_seek_file+0xb6>
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
    1b12:	fb 01       	movw	r30, r22
    1b14:	c0 80       	ld	r12, Z
    1b16:	d1 80       	ldd	r13, Z+1	; 0x01
    1b18:	e2 80       	ldd	r14, Z+2	; 0x02
    1b1a:	f3 80       	ldd	r15, Z+3	; 0x03
            break;
    1b1c:	18 c0       	rjmp	.+48     	; 0x1b4e <fat_seek_file+0x70>
        case FAT_SEEK_CUR:
            new_pos += *offset;
    1b1e:	fb 01       	movw	r30, r22
    1b20:	c0 80       	ld	r12, Z
    1b22:	d1 80       	ldd	r13, Z+1	; 0x01
    1b24:	e2 80       	ldd	r14, Z+2	; 0x02
    1b26:	f3 80       	ldd	r15, Z+3	; 0x03
    1b28:	c0 0e       	add	r12, r16
    1b2a:	d1 1e       	adc	r13, r17
    1b2c:	e2 1e       	adc	r14, r18
    1b2e:	f3 1e       	adc	r15, r19
            break;
    1b30:	0e c0       	rjmp	.+28     	; 0x1b4e <fat_seek_file+0x70>
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
    1b32:	fb 01       	movw	r30, r22
    1b34:	c0 80       	ld	r12, Z
    1b36:	d1 80       	ldd	r13, Z+1	; 0x01
    1b38:	e2 80       	ldd	r14, Z+2	; 0x02
    1b3a:	f3 80       	ldd	r15, Z+3	; 0x03
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	05 a1       	ldd	r16, Z+37	; 0x25
    1b40:	16 a1       	ldd	r17, Z+38	; 0x26
    1b42:	27 a1       	ldd	r18, Z+39	; 0x27
    1b44:	30 a5       	ldd	r19, Z+40	; 0x28
    1b46:	c0 0e       	add	r12, r16
    1b48:	d1 1e       	adc	r13, r17
    1b4a:	e2 1e       	adc	r14, r18
    1b4c:	f3 1e       	adc	r15, r19
    1b4e:	8b 01       	movw	r16, r22
    1b50:	ec 01       	movw	r28, r24
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
    1b52:	8d a1       	ldd	r24, Y+37	; 0x25
    1b54:	9e a1       	ldd	r25, Y+38	; 0x26
    1b56:	af a1       	ldd	r26, Y+39	; 0x27
    1b58:	b8 a5       	ldd	r27, Y+40	; 0x28
    1b5a:	8c 15       	cp	r24, r12
    1b5c:	9d 05       	cpc	r25, r13
    1b5e:	ae 05       	cpc	r26, r14
    1b60:	bf 05       	cpc	r27, r15
    1b62:	38 f4       	brcc	.+14     	; 0x1b72 <fat_seek_file+0x94>
#if FAT_WRITE_SUPPORT
       && !fat_resize_file(fd, new_pos)
    1b64:	b7 01       	movw	r22, r14
    1b66:	a6 01       	movw	r20, r12
    1b68:	ce 01       	movw	r24, r28
    1b6a:	0e 94 16 0c 	call	0x182c	; 0x182c <fat_resize_file>
    1b6e:	88 23       	and	r24, r24
    1b70:	91 f0       	breq	.+36     	; 0x1b96 <fat_seek_file+0xb8>
#endif
       )
        return 0;

    fd->pos = new_pos;
    1b72:	cd a6       	std	Y+45, r12	; 0x2d
    1b74:	de a6       	std	Y+46, r13	; 0x2e
    1b76:	ef a6       	std	Y+47, r14	; 0x2f
    1b78:	f8 aa       	std	Y+48, r15	; 0x30
    fd->pos_cluster = 0;
    1b7a:	1a aa       	std	Y+50, r1	; 0x32
    1b7c:	19 aa       	std	Y+49, r1	; 0x31

    *offset = (int32_t) new_pos;
    1b7e:	f8 01       	movw	r30, r16
    1b80:	c0 82       	st	Z, r12
    1b82:	d1 82       	std	Z+1, r13	; 0x01
    1b84:	e2 82       	std	Z+2, r14	; 0x02
    1b86:	f3 82       	std	Z+3, r15	; 0x03
    return 1;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	05 c0       	rjmp	.+10     	; 0x1b96 <fat_seek_file+0xb8>
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
        return 0;
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	03 c0       	rjmp	.+6      	; 0x1b96 <fat_seek_file+0xb8>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	01 c0       	rjmp	.+2      	; 0x1b96 <fat_seek_file+0xb8>
            break;
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
            break;
        default:
            return 0;
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    fd->pos = new_pos;
    fd->pos_cluster = 0;

    *offset = (int32_t) new_pos;
    return 1;
}
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	ff 90       	pop	r15
    1ba0:	ef 90       	pop	r14
    1ba2:	df 90       	pop	r13
    1ba4:	cf 90       	pop	r12
    1ba6:	08 95       	ret

00001ba8 <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	b1 f0       	breq	.+44     	; 0x1bdc <fat_open_dir+0x34>
    1bb0:	61 15       	cp	r22, r1
    1bb2:	71 05       	cpc	r23, r1
    1bb4:	b1 f0       	breq	.+44     	; 0x1be2 <fat_open_dir+0x3a>
    1bb6:	fb 01       	movw	r30, r22
    1bb8:	20 a1       	ldd	r18, Z+32	; 0x20
    1bba:	24 ff       	sbrs	r18, 4
    1bbc:	15 c0       	rjmp	.+42     	; 0x1be8 <fat_open_dir+0x40>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    1bbe:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
    1bc2:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
    1bc6:	23 2b       	or	r18, r19
    1bc8:	91 f0       	breq	.+36     	; 0x1bee <fat_open_dir+0x46>
    1bca:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <__data_end+0x31>
    1bce:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <__data_end+0x32>
    1bd2:	23 2b       	or	r18, r19
    1bd4:	79 f0       	breq	.+30     	; 0x1bf4 <fat_open_dir+0x4c>
            break;

        ++dd;
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	21 c0       	rjmp	.+66     	; 0x1c1e <fat_open_dir+0x76>
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
        return 0;
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	1e c0       	rjmp	.+60     	; 0x1c1e <fat_open_dir+0x76>
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	1b c0       	rjmp	.+54     	; 0x1c1e <fat_open_dir+0x76>
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	18 c0       	rjmp	.+48     	; 0x1c1e <fat_open_dir+0x76>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    1bee:	c0 e1       	ldi	r28, 0x10	; 16
    1bf0:	d1 e0       	ldi	r29, 0x01	; 1
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <fat_open_dir+0x50>
    1bf4:	c1 e4       	ldi	r28, 0x41	; 65
    1bf6:	d1 e0       	ldi	r29, 0x01	; 1
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    1bf8:	de 01       	movw	r26, r28
    1bfa:	12 96       	adiw	r26, 0x02	; 2
    1bfc:	2b e2       	ldi	r18, 0x2B	; 43
    1bfe:	fb 01       	movw	r30, r22
    1c00:	01 90       	ld	r0, Z+
    1c02:	0d 92       	st	X+, r0
    1c04:	2a 95       	dec	r18
    1c06:	e1 f7       	brne	.-8      	; 0x1c00 <fat_open_dir+0x58>
    dd->fs = fs;
    1c08:	99 83       	std	Y+1, r25	; 0x01
    1c0a:	88 83       	st	Y, r24
    dd->entry_cluster = dir_entry->cluster;
    1c0c:	fb 01       	movw	r30, r22
    1c0e:	81 a1       	ldd	r24, Z+33	; 0x21
    1c10:	92 a1       	ldd	r25, Z+34	; 0x22
    1c12:	9e a7       	std	Y+46, r25	; 0x2e
    1c14:	8d a7       	std	Y+45, r24	; 0x2d
    dd->entry_offset = 0;
    1c16:	18 aa       	std	Y+48, r1	; 0x30
    1c18:	1f a6       	std	Y+47, r1	; 0x2f

    return dd;
    1c1a:	8c 2f       	mov	r24, r28
    1c1c:	9d 2f       	mov	r25, r29
}
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	08 95       	ret

00001c24 <fat_close_dir>:
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    if(dd)
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	19 f0       	breq	.+6      	; 0x1c2e <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    1c28:	fc 01       	movw	r30, r24
    1c2a:	11 82       	std	Z+1, r1	; 0x01
    1c2c:	10 82       	st	Z, r1
    1c2e:	08 95       	ret

00001c30 <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    1c30:	fc 01       	movw	r30, r24
    if(!dd)
    1c32:	89 2b       	or	r24, r25
    1c34:	41 f0       	breq	.+16     	; 0x1c46 <fat_reset_dir+0x16>
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    1c36:	83 a1       	ldd	r24, Z+35	; 0x23
    1c38:	94 a1       	ldd	r25, Z+36	; 0x24
    1c3a:	96 a7       	std	Z+46, r25	; 0x2e
    1c3c:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
    1c3e:	10 aa       	std	Z+48, r1	; 0x30
    1c40:	17 a6       	std	Z+47, r1	; 0x2f
    return 1;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	08 95       	ret
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;
    1c46:	80 e0       	ldi	r24, 0x00	; 0

    dd->entry_cluster = dd->dir_entry.cluster;
    dd->entry_offset = 0;
    return 1;
}
    1c48:	08 95       	ret

00001c4a <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    1c4a:	2f 92       	push	r2
    1c4c:	3f 92       	push	r3
    1c4e:	4f 92       	push	r4
    1c50:	5f 92       	push	r5
    1c52:	6f 92       	push	r6
    1c54:	7f 92       	push	r7
    1c56:	8f 92       	push	r8
    1c58:	9f 92       	push	r9
    1c5a:	af 92       	push	r10
    1c5c:	bf 92       	push	r11
    1c5e:	cf 92       	push	r12
    1c60:	df 92       	push	r13
    1c62:	ef 92       	push	r14
    1c64:	ff 92       	push	r15
    1c66:	0f 93       	push	r16
    1c68:	1f 93       	push	r17
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	a6 97       	sbiw	r28, 0x26	; 38
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    if(!dd || !dir_entry)
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <fat_read_dir+0x3a>
    1c82:	94 c0       	rjmp	.+296    	; 0x1dac <fat_read_dir+0x162>
    1c84:	61 15       	cp	r22, r1
    1c86:	71 05       	cpc	r23, r1
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <fat_read_dir+0x42>
    1c8a:	92 c0       	rjmp	.+292    	; 0x1db0 <fat_read_dir+0x166>
    1c8c:	1c 01       	movw	r2, r24
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    1c8e:	fc 01       	movw	r30, r24
    1c90:	40 80       	ld	r4, Z
    1c92:	51 80       	ldd	r5, Z+1	; 0x01
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    1c94:	f2 01       	movw	r30, r4
    1c96:	80 88       	ldd	r8, Z+16	; 0x10
    1c98:	91 88       	ldd	r9, Z+17	; 0x11
    cluster_t cluster_num = dd->entry_cluster;
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	65 a4       	ldd	r6, Z+45	; 0x2d
    1c9e:	76 a4       	ldd	r7, Z+46	; 0x2e
    uint16_t cluster_offset = dd->entry_offset;
    1ca0:	a7 a4       	ldd	r10, Z+47	; 0x2f
    1ca2:	b0 a8       	ldd	r11, Z+48	; 0x30
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
    1ca4:	a8 14       	cp	r10, r8
    1ca6:	b9 04       	cpc	r11, r9
    1ca8:	20 f0       	brcs	.+8      	; 0x1cb2 <fat_read_dir+0x68>
        /* The latest call hit the border of the last cluster in
         * the chain, but it still returned a directory entry.
         * So we now reset the handle and signal the caller the
         * end of the listing.
         */
        fat_reset_dir(dd);
    1caa:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <fat_reset_dir>
        return 0;
    1cae:	10 e0       	ldi	r17, 0x00	; 0
    1cb0:	80 c0       	rjmp	.+256    	; 0x1db2 <fat_read_dir+0x168>
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    1cb2:	9e 01       	movw	r18, r28
    1cb4:	2f 5f       	subi	r18, 0xFF	; 255
    1cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb8:	86 e0       	ldi	r24, 0x06	; 6
    1cba:	f9 01       	movw	r30, r18
    1cbc:	11 92       	st	Z+, r1
    1cbe:	8a 95       	dec	r24
    1cc0:	e9 f7       	brne	.-6      	; 0x1cbc <fat_read_dir+0x72>
    memset(dir_entry, 0, sizeof(*dir_entry));
    1cc2:	8b e2       	ldi	r24, 0x2B	; 43
    1cc4:	fb 01       	movw	r30, r22
    1cc6:	11 92       	st	Z+, r1
    1cc8:	8a 95       	dec	r24
    1cca:	e9 f7       	brne	.-6      	; 0x1cc6 <fat_read_dir+0x7c>
    arg.dir_entry = dir_entry;
    1ccc:	7a 83       	std	Y+2, r23	; 0x02
    1cce:	69 83       	std	Y+1, r22	; 0x01

    /* check if we read from the root directory */
    if(cluster_num == 0)
    1cd0:	61 14       	cp	r6, r1
    1cd2:	71 04       	cpc	r7, r1
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <fat_read_dir+0x8e>
    1cd6:	5b c0       	rjmp	.+182    	; 0x1d8e <fat_read_dir+0x144>
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
            cluster_num = header->root_dir_cluster;
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    1cd8:	d2 01       	movw	r26, r4
    1cda:	52 96       	adiw	r26, 0x12	; 18
    1cdc:	8d 90       	ld	r8, X+
    1cde:	9c 90       	ld	r9, X
    1ce0:	53 97       	sbiw	r26, 0x13	; 19
    1ce2:	56 96       	adiw	r26, 0x16	; 22
    1ce4:	8d 91       	ld	r24, X+
    1ce6:	9c 91       	ld	r25, X
    1ce8:	57 97       	sbiw	r26, 0x17	; 23
    1cea:	88 1a       	sub	r8, r24
    1cec:	99 0a       	sbc	r9, r25
    1cee:	4f c0       	rjmp	.+158    	; 0x1d8e <fat_read_dir+0x144>
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
    1cf0:	84 01       	movw	r16, r8
    1cf2:	0a 19       	sub	r16, r10
    1cf4:	1b 09       	sbc	r17, r11
        offset_t pos = cluster_offset;
    1cf6:	65 01       	movw	r12, r10
    1cf8:	e1 2c       	mov	r14, r1
    1cfa:	f1 2c       	mov	r15, r1
        if(cluster_num == 0)
    1cfc:	61 14       	cp	r6, r1
    1cfe:	71 04       	cpc	r7, r1
    1d00:	61 f4       	brne	.+24     	; 0x1d1a <fat_read_dir+0xd0>
            pos += header->root_dir_offset;
    1d02:	f2 01       	movw	r30, r4
    1d04:	86 89       	ldd	r24, Z+22	; 0x16
    1d06:	97 89       	ldd	r25, Z+23	; 0x17
    1d08:	a0 8d       	ldd	r26, Z+24	; 0x18
    1d0a:	b1 8d       	ldd	r27, Z+25	; 0x19
    1d0c:	bc 01       	movw	r22, r24
    1d0e:	cd 01       	movw	r24, r26
    1d10:	6c 0d       	add	r22, r12
    1d12:	7d 1d       	adc	r23, r13
    1d14:	8e 1d       	adc	r24, r14
    1d16:	9f 1d       	adc	r25, r15
    1d18:	08 c0       	rjmp	.+16     	; 0x1d2a <fat_read_dir+0xe0>
        else
            pos += fat_cluster_offset(fs, cluster_num);
    1d1a:	b3 01       	movw	r22, r6
    1d1c:	c2 01       	movw	r24, r4
    1d1e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <fat_cluster_offset>
    1d22:	6c 0d       	add	r22, r12
    1d24:	7d 1d       	adc	r23, r13
    1d26:	8e 1d       	adc	r24, r14
    1d28:	9f 1d       	adc	r25, r15

        arg.bytes_read = 0;
    1d2a:	1c 82       	std	Y+4, r1	; 0x04
    1d2c:	1b 82       	std	Y+3, r1	; 0x03
        if(!fs->partition->device_read_interval(pos,
    1d2e:	d2 01       	movw	r26, r4
    1d30:	ed 91       	ld	r30, X+
    1d32:	fc 91       	ld	r31, X
    1d34:	02 80       	ldd	r0, Z+2	; 0x02
    1d36:	f3 81       	ldd	r31, Z+3	; 0x03
    1d38:	e0 2d       	mov	r30, r0
    1d3a:	9e 01       	movw	r18, r28
    1d3c:	2f 5f       	subi	r18, 0xFF	; 255
    1d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d40:	69 01       	movw	r12, r18
    1d42:	0f 2e       	mov	r0, r31
    1d44:	fb ef       	ldi	r31, 0xFB	; 251
    1d46:	ef 2e       	mov	r14, r31
    1d48:	f3 e0       	ldi	r31, 0x03	; 3
    1d4a:	ff 2e       	mov	r15, r31
    1d4c:	f0 2d       	mov	r31, r0
    1d4e:	20 e2       	ldi	r18, 0x20	; 32
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	ae 01       	movw	r20, r28
    1d54:	49 5f       	subi	r20, 0xF9	; 249
    1d56:	5f 4f       	sbci	r21, 0xFF	; 255
    1d58:	09 95       	icall
    1d5a:	18 2f       	mov	r17, r24
    1d5c:	88 23       	and	r24, r24
    1d5e:	49 f1       	breq	.+82     	; 0x1db2 <fat_read_dir+0x168>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	a8 0e       	add	r10, r24
    1d66:	b9 1e       	adc	r11, r25

        if(cluster_offset >= cluster_size)
    1d68:	a8 14       	cp	r10, r8
    1d6a:	b9 04       	cpc	r11, r9
    1d6c:	80 f0       	brcs	.+32     	; 0x1d8e <fat_read_dir+0x144>
        {
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
    1d6e:	b3 01       	movw	r22, r6
    1d70:	c2 01       	movw	r24, r4
    1d72:	0e 94 93 01 	call	0x326	; 0x326 <fat_get_next_cluster>
    1d76:	3c 01       	movw	r6, r24
    1d78:	89 2b       	or	r24, r25
    1d7a:	39 f4       	brne	.+14     	; 0x1d8a <fat_read_dir+0x140>
                cluster_offset = 0;
                continue;
            }

            /* we are at the end of the cluster chain */
            if(!arg.finished)
    1d7c:	1e 81       	ldd	r17, Y+6	; 0x06
    1d7e:	11 11       	cpse	r17, r1
    1d80:	0a c0       	rjmp	.+20     	; 0x1d96 <fat_read_dir+0x14c>
            {
                /* directory entry not found, reset directory handle */
                fat_reset_dir(dd);
    1d82:	c1 01       	movw	r24, r2
    1d84:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <fat_reset_dir>
                return 0;
    1d88:	14 c0       	rjmp	.+40     	; 0x1db2 <fat_read_dir+0x168>
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
            {
                cluster_offset = 0;
    1d8a:	a1 2c       	mov	r10, r1
    1d8c:	b1 2c       	mov	r11, r1
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    1d8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d90:	88 23       	and	r24, r24
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <fat_read_dir+0x14c>
    1d94:	ad cf       	rjmp	.-166    	; 0x1cf0 <fat_read_dir+0xa6>

            break;
        }
    }

    dd->entry_cluster = cluster_num;
    1d96:	d1 01       	movw	r26, r2
    1d98:	9e 96       	adiw	r26, 0x2e	; 46
    1d9a:	7c 92       	st	X, r7
    1d9c:	6e 92       	st	-X, r6
    1d9e:	9d 97       	sbiw	r26, 0x2d	; 45
    dd->entry_offset = cluster_offset;
    1da0:	d0 96       	adiw	r26, 0x30	; 48
    1da2:	bc 92       	st	X, r11
    1da4:	ae 92       	st	-X, r10
    1da6:	9f 97       	sbiw	r26, 0x2f	; 47

    return arg.finished;
    1da8:	1e 81       	ldd	r17, Y+6	; 0x06
    1daa:	03 c0       	rjmp	.+6      	; 0x1db2 <fat_read_dir+0x168>
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    if(!dd || !dir_entry)
        return 0;
    1dac:	10 e0       	ldi	r17, 0x00	; 0
    1dae:	01 c0       	rjmp	.+2      	; 0x1db2 <fat_read_dir+0x168>
    1db0:	10 e0       	ldi	r17, 0x00	; 0

    dd->entry_cluster = cluster_num;
    dd->entry_offset = cluster_offset;

    return arg.finished;
}
    1db2:	81 2f       	mov	r24, r17
    1db4:	a6 96       	adiw	r28, 0x26	; 38
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	1f 91       	pop	r17
    1dc6:	0f 91       	pop	r16
    1dc8:	ff 90       	pop	r15
    1dca:	ef 90       	pop	r14
    1dcc:	df 90       	pop	r13
    1dce:	cf 90       	pop	r12
    1dd0:	bf 90       	pop	r11
    1dd2:	af 90       	pop	r10
    1dd4:	9f 90       	pop	r9
    1dd6:	8f 90       	pop	r8
    1dd8:	7f 90       	pop	r7
    1dda:	6f 90       	pop	r6
    1ddc:	5f 90       	pop	r5
    1dde:	4f 90       	pop	r4
    1de0:	3f 90       	pop	r3
    1de2:	2f 90       	pop	r2
    1de4:	08 95       	ret

00001de6 <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    1de6:	4f 92       	push	r4
    1de8:	5f 92       	push	r5
    1dea:	6f 92       	push	r6
    1dec:	7f 92       	push	r7
    1dee:	8f 92       	push	r8
    1df0:	9f 92       	push	r9
    1df2:	af 92       	push	r10
    1df4:	bf 92       	push	r11
    1df6:	cf 92       	push	r12
    1df8:	df 92       	push	r13
    1dfa:	ef 92       	push	r14
    1dfc:	ff 92       	push	r15
    1dfe:	0f 93       	push	r16
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	4c 01       	movw	r8, r24
    1e08:	6b 01       	movw	r12, r22
    1e0a:	ea 01       	movw	r28, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    1e0c:	89 2b       	or	r24, r25
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <fat_get_dir_entry_of_path+0x2c>
    1e10:	76 c0       	rjmp	.+236    	; 0x1efe <fat_get_dir_entry_of_path+0x118>
    1e12:	61 15       	cp	r22, r1
    1e14:	71 05       	cpc	r23, r1
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <fat_get_dir_entry_of_path+0x34>
    1e18:	74 c0       	rjmp	.+232    	; 0x1f02 <fat_get_dir_entry_of_path+0x11c>
    1e1a:	fb 01       	movw	r30, r22
    1e1c:	80 81       	ld	r24, Z
    1e1e:	88 23       	and	r24, r24
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <fat_get_dir_entry_of_path+0x3e>
    1e22:	71 c0       	rjmp	.+226    	; 0x1f06 <fat_get_dir_entry_of_path+0x120>
    1e24:	20 97       	sbiw	r28, 0x00	; 0
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <fat_get_dir_entry_of_path+0x44>
    1e28:	70 c0       	rjmp	.+224    	; 0x1f0a <fat_get_dir_entry_of_path+0x124>
        return 0;

    if(path[0] == '/')
    1e2a:	8f 32       	cpi	r24, 0x2F	; 47
    1e2c:	19 f4       	brne	.+6      	; 0x1e34 <fat_get_dir_entry_of_path+0x4e>
        ++path;
    1e2e:	ff ef       	ldi	r31, 0xFF	; 255
    1e30:	cf 1a       	sub	r12, r31
    1e32:	df 0a       	sbc	r13, r31

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    1e34:	8b e2       	ldi	r24, 0x2B	; 43
    1e36:	fe 01       	movw	r30, r28
    1e38:	11 92       	st	Z+, r1
    1e3a:	8a 95       	dec	r24
    1e3c:	e9 f7       	brne	.-6      	; 0x1e38 <fat_get_dir_entry_of_path+0x52>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    1e3e:	80 e1       	ldi	r24, 0x10	; 16
    1e40:	88 a3       	std	Y+32, r24	; 0x20

    while(1)
    {
        if(path[0] == '\0')
    1e42:	f6 01       	movw	r30, r12
    1e44:	80 81       	ld	r24, Z
    1e46:	88 23       	and	r24, r24
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <fat_get_dir_entry_of_path+0x66>
    1e4a:	61 c0       	rjmp	.+194    	; 0x1f0e <fat_get_dir_entry_of_path+0x128>
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
    1e4c:	41 2c       	mov	r4, r1
    1e4e:	51 2c       	mov	r5, r1
    while(1)
    {
        if(path[0] == '\0')
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    1e50:	be 01       	movw	r22, r28
    1e52:	c4 01       	movw	r24, r8
    1e54:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <fat_open_dir>
    1e58:	8c 01       	movw	r16, r24
        if(!dd)
    1e5a:	89 2b       	or	r24, r25
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <fat_get_dir_entry_of_path+0x7a>
    1e5e:	59 c0       	rjmp	.+178    	; 0x1f12 <fat_get_dir_entry_of_path+0x12c>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    1e60:	6f e2       	ldi	r22, 0x2F	; 47
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	c6 01       	movw	r24, r12
    1e66:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	41 f0       	breq	.+16     	; 0x1e7e <fat_get_dir_entry_of_path+0x98>
        {
            length_to_sep = sub_path - path;
    1e6e:	e8 2e       	mov	r14, r24
    1e70:	ec 18       	sub	r14, r12
            ++sub_path;
    1e72:	5c 01       	movw	r10, r24
    1e74:	ff ef       	ldi	r31, 0xFF	; 255
    1e76:	af 1a       	sub	r10, r31
    1e78:	bf 0a       	sbc	r11, r31
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    1e7a:	f1 2c       	mov	r15, r1
    1e7c:	2d c0       	rjmp	.+90     	; 0x1ed8 <fat_get_dir_entry_of_path+0xf2>
            length_to_sep = sub_path - path;
            ++sub_path;
        }
        else
        {
            length_to_sep = strlen(path);
    1e7e:	f6 01       	movw	r30, r12
    1e80:	01 90       	ld	r0, Z+
    1e82:	00 20       	and	r0, r0
    1e84:	e9 f7       	brne	.-6      	; 0x1e80 <fat_get_dir_entry_of_path+0x9a>
    1e86:	31 97       	sbiw	r30, 0x01	; 1
    1e88:	ec 19       	sub	r30, r12
    1e8a:	fd 09       	sbc	r31, r13
    1e8c:	ee 2e       	mov	r14, r30
            sub_path = path + length_to_sep;
    1e8e:	56 01       	movw	r10, r12
    1e90:	ae 0e       	add	r10, r30
    1e92:	b1 1c       	adc	r11, r1
    1e94:	f2 cf       	rjmp	.-28     	; 0x1e7a <fat_get_dir_entry_of_path+0x94>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    1e96:	fe 01       	movw	r30, r28
    1e98:	01 90       	ld	r0, Z+
    1e9a:	00 20       	and	r0, r0
    1e9c:	e9 f7       	brne	.-6      	; 0x1e98 <fat_get_dir_entry_of_path+0xb2>
    1e9e:	31 97       	sbiw	r30, 0x01	; 1
    1ea0:	3f 01       	movw	r6, r30
    1ea2:	6c 1a       	sub	r6, r28
    1ea4:	7d 0a       	sbc	r7, r29
    1ea6:	6e 14       	cp	r6, r14
    1ea8:	7f 04       	cpc	r7, r15
    1eaa:	b1 f4       	brne	.+44     	; 0x1ed8 <fat_get_dir_entry_of_path+0xf2>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
    1eac:	a3 01       	movw	r20, r6
    1eae:	be 01       	movw	r22, r28
    1eb0:	c6 01       	movw	r24, r12
    1eb2:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <strncmp>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    1eb6:	89 2b       	or	r24, r25
    1eb8:	79 f4       	brne	.+30     	; 0x1ed8 <fat_get_dir_entry_of_path+0xf2>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
    1eba:	c8 01       	movw	r24, r16
    1ebc:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <fat_close_dir>
            dd = 0;

            if(path[length_to_sep] == '\0')
    1ec0:	f6 01       	movw	r30, r12
    1ec2:	e6 0d       	add	r30, r6
    1ec4:	f7 1d       	adc	r31, r7
    1ec6:	80 81       	ld	r24, Z
    1ec8:	88 23       	and	r24, r24
    1eca:	29 f1       	breq	.+74     	; 0x1f16 <fat_get_dir_entry_of_path+0x130>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    1ecc:	98 a1       	ldd	r25, Y+32	; 0x20
    1ece:	89 2f       	mov	r24, r25
    1ed0:	80 71       	andi	r24, 0x10	; 16
    1ed2:	94 fd       	sbrc	r25, 4
    1ed4:	08 c0       	rjmp	.+16     	; 0x1ee6 <fat_get_dir_entry_of_path+0x100>
    1ed6:	20 c0       	rjmp	.+64     	; 0x1f18 <fat_get_dir_entry_of_path+0x132>
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    1ed8:	be 01       	movw	r22, r28
    1eda:	c8 01       	movw	r24, r16
    1edc:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <fat_read_dir>
    1ee0:	81 11       	cpse	r24, r1
    1ee2:	d9 cf       	rjmp	.-78     	; 0x1e96 <fat_get_dir_entry_of_path+0xb0>
    1ee4:	03 c0       	rjmp	.+6      	; 0x1eec <fat_get_dir_entry_of_path+0x106>
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
            {
                /* we found a parent directory of the file we are searching for */
                path = sub_path;
    1ee6:	65 01       	movw	r12, r10
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
    1ee8:	04 2d       	mov	r16, r4
    1eea:	15 2d       	mov	r17, r5

            /* a parent of the file exists, but not the file itself */
            return 0;
        }

        fat_close_dir(dd);
    1eec:	c8 01       	movw	r24, r16
    1eee:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <fat_close_dir>
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    1ef2:	f6 01       	movw	r30, r12
    1ef4:	80 81       	ld	r24, Z
    1ef6:	81 11       	cpse	r24, r1
    1ef8:	ab cf       	rjmp	.-170    	; 0x1e50 <fat_get_dir_entry_of_path+0x6a>
            return 1;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	0d c0       	rjmp	.+26     	; 0x1f18 <fat_get_dir_entry_of_path+0x132>
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
        return 0;
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	0b c0       	rjmp	.+22     	; 0x1f18 <fat_get_dir_entry_of_path+0x132>
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	09 c0       	rjmp	.+18     	; 0x1f18 <fat_get_dir_entry_of_path+0x132>
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	07 c0       	rjmp	.+14     	; 0x1f18 <fat_get_dir_entry_of_path+0x132>
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	05 c0       	rjmp	.+10     	; 0x1f18 <fat_get_dir_entry_of_path+0x132>
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
            return 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	03 c0       	rjmp	.+6      	; 0x1f18 <fat_get_dir_entry_of_path+0x132>
        }

        fat_close_dir(dd);
    }
    
    return 0;
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	01 c0       	rjmp	.+2      	; 0x1f18 <fat_get_dir_entry_of_path+0x132>
            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
                /* we iterated through the whole path and have found the file */
                return 1;
    1f16:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	ff 90       	pop	r15
    1f22:	ef 90       	pop	r14
    1f24:	df 90       	pop	r13
    1f26:	cf 90       	pop	r12
    1f28:	bf 90       	pop	r11
    1f2a:	af 90       	pop	r10
    1f2c:	9f 90       	pop	r9
    1f2e:	8f 90       	pop	r8
    1f30:	7f 90       	pop	r7
    1f32:	6f 90       	pop	r6
    1f34:	5f 90       	pop	r5
    1f36:	4f 90       	pop	r4
    1f38:	08 95       	ret

00001f3a <fat_create_file>:
 * \param[out] dir_entry The directory entry to fill for the new (or existing) file.
 * \returns 0 on failure, 1 on success, 2 if the file already existed.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    1f3a:	af 92       	push	r10
    1f3c:	bf 92       	push	r11
    1f3e:	cf 92       	push	r12
    1f40:	df 92       	push	r13
    1f42:	ef 92       	push	r14
    1f44:	ff 92       	push	r15
    1f46:	1f 93       	push	r17
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    if(!parent || !file || !file[0] || !dir_entry)
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <fat_create_file+0x18>
    1f50:	44 c0       	rjmp	.+136    	; 0x1fda <fat_create_file+0xa0>
    1f52:	61 15       	cp	r22, r1
    1f54:	71 05       	cpc	r23, r1
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <fat_create_file+0x20>
    1f58:	42 c0       	rjmp	.+132    	; 0x1fde <fat_create_file+0xa4>
    1f5a:	fb 01       	movw	r30, r22
    1f5c:	20 81       	ld	r18, Z
    1f5e:	22 23       	and	r18, r18
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <fat_create_file+0x2a>
    1f62:	3f c0       	rjmp	.+126    	; 0x1fe2 <fat_create_file+0xa8>
    1f64:	ea 01       	movw	r28, r20
    1f66:	7b 01       	movw	r14, r22
    1f68:	6c 01       	movw	r12, r24
    1f6a:	20 97       	sbiw	r28, 0x00	; 0
    1f6c:	e1 f1       	breq	.+120    	; 0x1fe6 <fat_create_file+0xac>
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
    1f6e:	be 01       	movw	r22, r28
    1f70:	c6 01       	movw	r24, r12
    1f72:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <fat_read_dir>
    1f76:	18 2f       	mov	r17, r24
    1f78:	88 23       	and	r24, r24
    1f7a:	59 f0       	breq	.+22     	; 0x1f92 <fat_create_file+0x58>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    1f7c:	be 01       	movw	r22, r28
    1f7e:	c7 01       	movw	r24, r14
    1f80:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <strcmp>
    1f84:	89 2b       	or	r24, r25
    1f86:	99 f7       	brne	.-26     	; 0x1f6e <fat_create_file+0x34>
        {
            fat_reset_dir(parent);
    1f88:	c6 01       	movw	r24, r12
    1f8a:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <fat_reset_dir>
            return 2;
    1f8e:	12 e0       	ldi	r17, 0x02	; 2
    1f90:	2b c0       	rjmp	.+86     	; 0x1fe8 <fat_create_file+0xae>
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    1f92:	f6 01       	movw	r30, r12
    1f94:	a0 80       	ld	r10, Z
    1f96:	b1 80       	ldd	r11, Z+1	; 0x01

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    1f98:	8b e2       	ldi	r24, 0x2B	; 43
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	11 92       	st	Z+, r1
    1f9e:	8a 95       	dec	r24
    1fa0:	e9 f7       	brne	.-6      	; 0x1f9c <fat_create_file+0x62>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    1fa2:	4f e1       	ldi	r20, 0x1F	; 31
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	b7 01       	movw	r22, r14
    1fa8:	ce 01       	movw	r24, r28
    1faa:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <strncpy>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    1fae:	ae 01       	movw	r20, r28
    1fb0:	b6 01       	movw	r22, r12
    1fb2:	c5 01       	movw	r24, r10
    1fb4:	0e 94 39 05 	call	0xa72	; 0xa72 <fat_find_offset_for_dir_entry>
    1fb8:	6f a3       	std	Y+39, r22	; 0x27
    1fba:	78 a7       	std	Y+40, r23	; 0x28
    1fbc:	89 a7       	std	Y+41, r24	; 0x29
    1fbe:	9a a7       	std	Y+42, r25	; 0x2a
    1fc0:	67 2b       	or	r22, r23
    1fc2:	68 2b       	or	r22, r24
    1fc4:	69 2b       	or	r22, r25
    1fc6:	81 f0       	breq	.+32     	; 0x1fe8 <fat_create_file+0xae>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    1fc8:	be 01       	movw	r22, r28
    1fca:	c5 01       	movw	r24, r10
    1fcc:	0e 94 30 06 	call	0xc60	; 0xc60 <fat_write_dir_entry>
    1fd0:	11 e0       	ldi	r17, 0x01	; 1
    1fd2:	81 11       	cpse	r24, r1
    1fd4:	09 c0       	rjmp	.+18     	; 0x1fe8 <fat_create_file+0xae>
    1fd6:	10 e0       	ldi	r17, 0x00	; 0
    1fd8:	07 c0       	rjmp	.+14     	; 0x1fe8 <fat_create_file+0xae>
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !file || !file[0] || !dir_entry)
        return 0;
    1fda:	10 e0       	ldi	r17, 0x00	; 0
    1fdc:	05 c0       	rjmp	.+10     	; 0x1fe8 <fat_create_file+0xae>
    1fde:	10 e0       	ldi	r17, 0x00	; 0
    1fe0:	03 c0       	rjmp	.+6      	; 0x1fe8 <fat_create_file+0xae>
    1fe2:	10 e0       	ldi	r17, 0x00	; 0
    1fe4:	01 c0       	rjmp	.+2      	; 0x1fe8 <fat_create_file+0xae>
    1fe6:	10 e0       	ldi	r17, 0x00	; 0
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
        return 0;
    
    return 1;
}
    1fe8:	81 2f       	mov	r24, r17
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	ff 90       	pop	r15
    1ff2:	ef 90       	pop	r14
    1ff4:	df 90       	pop	r13
    1ff6:	cf 90       	pop	r12
    1ff8:	bf 90       	pop	r11
    1ffa:	af 90       	pop	r10
    1ffc:	08 95       	ret

00001ffe <fat_delete_file>:
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    1ffe:	9f 92       	push	r9
    2000:	af 92       	push	r10
    2002:	bf 92       	push	r11
    2004:	cf 92       	push	r12
    2006:	df 92       	push	r13
    2008:	ef 92       	push	r14
    200a:	ff 92       	push	r15
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	2c 97       	sbiw	r28, 0x0c	; 12
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    if(!fs || !dir_entry)
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	09 f4       	brne	.+2      	; 0x202a <fat_delete_file+0x2c>
    2028:	52 c0       	rjmp	.+164    	; 0x20ce <fat_delete_file+0xd0>
    202a:	61 15       	cp	r22, r1
    202c:	71 05       	cpc	r23, r1
    202e:	09 f4       	brne	.+2      	; 0x2032 <fat_delete_file+0x34>
    2030:	50 c0       	rjmp	.+160    	; 0x20d2 <fat_delete_file+0xd4>
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    2032:	db 01       	movw	r26, r22
    2034:	97 96       	adiw	r26, 0x27	; 39
    2036:	cd 90       	ld	r12, X+
    2038:	dd 90       	ld	r13, X+
    203a:	ed 90       	ld	r14, X+
    203c:	fc 90       	ld	r15, X
    203e:	9a 97       	sbiw	r26, 0x2a	; 42
    if(!dir_entry_offset)
    2040:	c1 14       	cp	r12, r1
    2042:	d1 04       	cpc	r13, r1
    2044:	e1 04       	cpc	r14, r1
    2046:	f1 04       	cpc	r15, r1
    2048:	09 f4       	brne	.+2      	; 0x204c <fat_delete_file+0x4e>
    204a:	45 c0       	rjmp	.+138    	; 0x20d6 <fat_delete_file+0xd8>
    204c:	5b 01       	movw	r10, r22
    204e:	8c 01       	movw	r16, r24
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    2050:	0f 2e       	mov	r0, r31
    2052:	f5 ee       	ldi	r31, 0xE5	; 229
    2054:	9f 2e       	mov	r9, r31
    2056:	f0 2d       	mov	r31, r0
#if FAT_LFN_SUPPORT
    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    2058:	d8 01       	movw	r26, r16
    205a:	ed 91       	ld	r30, X+
    205c:	fc 91       	ld	r31, X
    205e:	01 90       	ld	r0, Z+
    2060:	f0 81       	ld	r31, Z
    2062:	e0 2d       	mov	r30, r0
    2064:	2c e0       	ldi	r18, 0x0C	; 12
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	ae 01       	movw	r20, r28
    206a:	4f 5f       	subi	r20, 0xFF	; 255
    206c:	5f 4f       	sbci	r21, 0xFF	; 255
    206e:	c7 01       	movw	r24, r14
    2070:	b6 01       	movw	r22, r12
    2072:	09 95       	icall
    2074:	88 23       	and	r24, r24
    2076:	81 f1       	breq	.+96     	; 0x20d8 <fat_delete_file+0xda>
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    2078:	99 82       	std	Y+1, r9	; 0x01
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
    207a:	d8 01       	movw	r26, r16
    207c:	ed 91       	ld	r30, X+
    207e:	fc 91       	ld	r31, X
    2080:	04 80       	ldd	r0, Z+4	; 0x04
    2082:	f5 81       	ldd	r31, Z+5	; 0x05
    2084:	e0 2d       	mov	r30, r0
    2086:	2c e0       	ldi	r18, 0x0C	; 12
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	ae 01       	movw	r20, r28
    208c:	4f 5f       	subi	r20, 0xFF	; 255
    208e:	5f 4f       	sbci	r21, 0xFF	; 255
    2090:	c7 01       	movw	r24, r14
    2092:	b6 01       	movw	r22, r12
    2094:	09 95       	icall
    2096:	88 23       	and	r24, r24
    2098:	f9 f0       	breq	.+62     	; 0x20d8 <fat_delete_file+0xda>
            return 0;

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
    209a:	8c 85       	ldd	r24, Y+12	; 0x0c
    209c:	8f 30       	cpi	r24, 0x0F	; 15
    209e:	31 f4       	brne	.+12     	; 0x20ac <fat_delete_file+0xae>
            break;

        dir_entry_offset += 32;
    20a0:	b0 e2       	ldi	r27, 0x20	; 32
    20a2:	cb 0e       	add	r12, r27
    20a4:	d1 1c       	adc	r13, r1
    20a6:	e1 1c       	adc	r14, r1
    20a8:	f1 1c       	adc	r15, r1
    }
    20aa:	d6 cf       	rjmp	.-84     	; 0x2058 <fat_delete_file+0x5a>
#endif

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
    20ac:	f5 01       	movw	r30, r10
    20ae:	61 a1       	ldd	r22, Z+33	; 0x21
    20b0:	72 a1       	ldd	r23, Z+34	; 0x22
    20b2:	61 15       	cp	r22, r1
    20b4:	71 05       	cpc	r23, r1
    20b6:	49 f0       	breq	.+18     	; 0x20ca <fat_delete_file+0xcc>
    20b8:	c8 01       	movw	r24, r16
    20ba:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <fat_free_clusters>
    20be:	91 e0       	ldi	r25, 0x01	; 1
    20c0:	81 11       	cpse	r24, r1
    20c2:	01 c0       	rjmp	.+2      	; 0x20c6 <fat_delete_file+0xc8>
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	89 2f       	mov	r24, r25
    20c8:	07 c0       	rjmp	.+14     	; 0x20d8 <fat_delete_file+0xda>
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	05 c0       	rjmp	.+10     	; 0x20d8 <fat_delete_file+0xda>
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
        return 0;
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	03 c0       	rjmp	.+6      	; 0x20d8 <fat_delete_file+0xda>
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	01 c0       	rjmp	.+2      	; 0x20d8 <fat_delete_file+0xda>

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    if(!dir_entry_offset)
        return 0;
    20d6:	80 e0       	ldi	r24, 0x00	; 0

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
}
    20d8:	2c 96       	adiw	r28, 0x0c	; 12
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	1f 91       	pop	r17
    20ea:	0f 91       	pop	r16
    20ec:	ff 90       	pop	r15
    20ee:	ef 90       	pop	r14
    20f0:	df 90       	pop	r13
    20f2:	cf 90       	pop	r12
    20f4:	bf 90       	pop	r11
    20f6:	af 90       	pop	r10
    20f8:	9f 90       	pop	r9
    20fa:	08 95       	ret

000020fc <fat_move_file>:
 * \param[in] file_new The file's new name.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file, fat_delete_file, fat_move_dir
 */
uint8_t fat_move_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry, struct fat_dir_struct* parent_new, const char* file_new)
{
    20fc:	cf 92       	push	r12
    20fe:	df 92       	push	r13
    2100:	ef 92       	push	r14
    2102:	ff 92       	push	r15
    2104:	1f 93       	push	r17
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	ab 97       	sbiw	r28, 0x2b	; 43
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	f8 94       	cli
    2114:	de bf       	out	0x3e, r29	; 62
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	cd bf       	out	0x3d, r28	; 61
    211a:	7b 01       	movw	r14, r22
    211c:	fa 01       	movw	r30, r20
    if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	09 f4       	brne	.+2      	; 0x2124 <fat_move_file+0x28>
    2122:	50 c0       	rjmp	.+160    	; 0x21c4 <fat_move_file+0xc8>
    2124:	67 2b       	or	r22, r23
    2126:	09 f4       	brne	.+2      	; 0x212a <fat_move_file+0x2e>
    2128:	4f c0       	rjmp	.+158    	; 0x21c8 <fat_move_file+0xcc>
    212a:	30 97       	sbiw	r30, 0x00	; 0
    212c:	09 f4       	brne	.+2      	; 0x2130 <fat_move_file+0x34>
    212e:	4e c0       	rjmp	.+156    	; 0x21cc <fat_move_file+0xd0>
    2130:	21 15       	cp	r18, r1
    2132:	31 05       	cpc	r19, r1
    2134:	09 f4       	brne	.+2      	; 0x2138 <fat_move_file+0x3c>
    2136:	52 c0       	rjmp	.+164    	; 0x21dc <fat_move_file+0xe0>
    2138:	d9 01       	movw	r26, r18
    213a:	4c 91       	ld	r20, X
    213c:	41 11       	cpse	r20, r1
    213e:	54 c0       	rjmp	.+168    	; 0x21e8 <fat_move_file+0xec>
    2140:	47 c0       	rjmp	.+142    	; 0x21d0 <fat_move_file+0xd4>
    if(fs != parent_new->fs)
        return 0;

    /* use existing file name if none has been specified */
    if(!file_new)
        file_new = dir_entry->long_name;
    2142:	97 01       	movw	r18, r14

    /* create file with new file name */
    struct fat_dir_entry_struct dir_entry_new;
    if(!fat_create_file(parent_new, file_new, &dir_entry_new))
    2144:	ae 01       	movw	r20, r28
    2146:	4f 5f       	subi	r20, 0xFF	; 255
    2148:	5f 4f       	sbci	r21, 0xFF	; 255
    214a:	b9 01       	movw	r22, r18
    214c:	cf 01       	movw	r24, r30
    214e:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <fat_create_file>
    2152:	18 2f       	mov	r17, r24
    2154:	88 23       	and	r24, r24
    2156:	09 f4       	brne	.+2      	; 0x215a <fat_move_file+0x5e>
    2158:	4d c0       	rjmp	.+154    	; 0x21f4 <fat_move_file+0xf8>
        return 0;

    /* copy members of directory entry which do not change with rename */
    dir_entry_new.attributes = dir_entry->attributes;
    215a:	f7 01       	movw	r30, r14
    215c:	80 a1       	ldd	r24, Z+32	; 0x20
    215e:	89 a3       	std	Y+33, r24	; 0x21
#if FAT_DATETIME_SUPPORT
    dir_entry_new.modification_time = dir_entry->modification_time;
    dir_entry_new.modification_date = dir_entry->modification_date;
#endif
    dir_entry_new.cluster = dir_entry->cluster;
    2160:	81 a1       	ldd	r24, Z+33	; 0x21
    2162:	92 a1       	ldd	r25, Z+34	; 0x22
    2164:	9b a3       	std	Y+35, r25	; 0x23
    2166:	8a a3       	std	Y+34, r24	; 0x22
    dir_entry_new.file_size = dir_entry->file_size;
    2168:	83 a1       	ldd	r24, Z+35	; 0x23
    216a:	94 a1       	ldd	r25, Z+36	; 0x24
    216c:	a5 a1       	ldd	r26, Z+37	; 0x25
    216e:	b6 a1       	ldd	r27, Z+38	; 0x26
    2170:	8c a3       	std	Y+36, r24	; 0x24
    2172:	9d a3       	std	Y+37, r25	; 0x25
    2174:	ae a3       	std	Y+38, r26	; 0x26
    2176:	bf a3       	std	Y+39, r27	; 0x27

    /* make the new file name point to the old file's content */
    if(!fat_write_dir_entry(fs, &dir_entry_new))
    2178:	be 01       	movw	r22, r28
    217a:	6f 5f       	subi	r22, 0xFF	; 255
    217c:	7f 4f       	sbci	r23, 0xFF	; 255
    217e:	c6 01       	movw	r24, r12
    2180:	0e 94 30 06 	call	0xc60	; 0xc60 <fat_write_dir_entry>
    2184:	18 2f       	mov	r17, r24
    2186:	81 11       	cpse	r24, r1
    2188:	07 c0       	rjmp	.+14     	; 0x2198 <fat_move_file+0x9c>
    {
        fat_delete_file(fs, &dir_entry_new);
    218a:	be 01       	movw	r22, r28
    218c:	6f 5f       	subi	r22, 0xFF	; 255
    218e:	7f 4f       	sbci	r23, 0xFF	; 255
    2190:	c6 01       	movw	r24, r12
    2192:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <fat_delete_file>
        return 0;
    2196:	2e c0       	rjmp	.+92     	; 0x21f4 <fat_move_file+0xf8>
    }
    
    /* delete the old file, but not its clusters, which have already been remapped above */
    dir_entry->cluster = 0;
    2198:	d7 01       	movw	r26, r14
    219a:	92 96       	adiw	r26, 0x22	; 34
    219c:	1c 92       	st	X, r1
    219e:	1e 92       	st	-X, r1
    21a0:	91 97       	sbiw	r26, 0x21	; 33
    if(!fat_delete_file(fs, dir_entry))
    21a2:	b7 01       	movw	r22, r14
    21a4:	c6 01       	movw	r24, r12
    21a6:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <fat_delete_file>
    21aa:	18 2f       	mov	r17, r24
    21ac:	88 23       	and	r24, r24
    21ae:	11 f1       	breq	.+68     	; 0x21f4 <fat_move_file+0xf8>
        return 0;

    *dir_entry = dir_entry_new;
    21b0:	8b e2       	ldi	r24, 0x2B	; 43
    21b2:	fe 01       	movw	r30, r28
    21b4:	31 96       	adiw	r30, 0x01	; 1
    21b6:	d7 01       	movw	r26, r14
    21b8:	01 90       	ld	r0, Z+
    21ba:	0d 92       	st	X+, r0
    21bc:	8a 95       	dec	r24
    21be:	e1 f7       	brne	.-8      	; 0x21b8 <fat_move_file+0xbc>
    return 1;
    21c0:	11 e0       	ldi	r17, 0x01	; 1
    21c2:	18 c0       	rjmp	.+48     	; 0x21f4 <fat_move_file+0xf8>
 * \see fat_create_file, fat_delete_file, fat_move_dir
 */
uint8_t fat_move_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry, struct fat_dir_struct* parent_new, const char* file_new)
{
    if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
        return 0;
    21c4:	10 e0       	ldi	r17, 0x00	; 0
    21c6:	16 c0       	rjmp	.+44     	; 0x21f4 <fat_move_file+0xf8>
    21c8:	10 e0       	ldi	r17, 0x00	; 0
    21ca:	14 c0       	rjmp	.+40     	; 0x21f4 <fat_move_file+0xf8>
    21cc:	10 e0       	ldi	r17, 0x00	; 0
    21ce:	12 c0       	rjmp	.+36     	; 0x21f4 <fat_move_file+0xf8>
    21d0:	10 e0       	ldi	r17, 0x00	; 0
    21d2:	10 c0       	rjmp	.+32     	; 0x21f4 <fat_move_file+0xf8>
    if(fs != parent_new->fs)
        return 0;
    21d4:	10 e0       	ldi	r17, 0x00	; 0
    21d6:	0e c0       	rjmp	.+28     	; 0x21f4 <fat_move_file+0xf8>
    21d8:	10 e0       	ldi	r17, 0x00	; 0
    21da:	0c c0       	rjmp	.+24     	; 0x21f4 <fat_move_file+0xf8>
 */
uint8_t fat_move_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry, struct fat_dir_struct* parent_new, const char* file_new)
{
    if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
        return 0;
    if(fs != parent_new->fs)
    21dc:	c0 80       	ld	r12, Z
    21de:	d1 80       	ldd	r13, Z+1	; 0x01
    21e0:	c8 16       	cp	r12, r24
    21e2:	d9 06       	cpc	r13, r25
    21e4:	b9 f7       	brne	.-18     	; 0x21d4 <fat_move_file+0xd8>
    21e6:	ad cf       	rjmp	.-166    	; 0x2142 <fat_move_file+0x46>
    21e8:	c0 80       	ld	r12, Z
    21ea:	d1 80       	ldd	r13, Z+1	; 0x01
    21ec:	c8 16       	cp	r12, r24
    21ee:	d9 06       	cpc	r13, r25
    21f0:	99 f7       	brne	.-26     	; 0x21d8 <fat_move_file+0xdc>
    21f2:	a8 cf       	rjmp	.-176    	; 0x2144 <fat_move_file+0x48>
    if(!fat_delete_file(fs, dir_entry))
        return 0;

    *dir_entry = dir_entry_new;
    return 1;
}
    21f4:	81 2f       	mov	r24, r17
    21f6:	ab 96       	adiw	r28, 0x2b	; 43
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	df 91       	pop	r29
    2204:	cf 91       	pop	r28
    2206:	1f 91       	pop	r17
    2208:	ff 90       	pop	r15
    220a:	ef 90       	pop	r14
    220c:	df 90       	pop	r13
    220e:	cf 90       	pop	r12
    2210:	08 95       	ret

00002212 <fat_create_dir>:
 * \param[out] dir_entry The directory entry to fill for the new directory.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_dir
 */
uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct* dir_entry)
{
    2212:	4f 92       	push	r4
    2214:	5f 92       	push	r5
    2216:	6f 92       	push	r6
    2218:	7f 92       	push	r7
    221a:	8f 92       	push	r8
    221c:	9f 92       	push	r9
    221e:	af 92       	push	r10
    2220:	bf 92       	push	r11
    2222:	cf 92       	push	r12
    2224:	df 92       	push	r13
    2226:	ef 92       	push	r14
    2228:	ff 92       	push	r15
    222a:	0f 93       	push	r16
    222c:	1f 93       	push	r17
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
    if(!parent || !dir || !dir[0] || !dir_entry)
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	09 f4       	brne	.+2      	; 0x2238 <fat_create_dir+0x26>
    2236:	a6 c0       	rjmp	.+332    	; 0x2384 <fat_create_dir+0x172>
    2238:	61 15       	cp	r22, r1
    223a:	71 05       	cpc	r23, r1
    223c:	09 f4       	brne	.+2      	; 0x2240 <fat_create_dir+0x2e>
    223e:	a4 c0       	rjmp	.+328    	; 0x2388 <fat_create_dir+0x176>
    2240:	fb 01       	movw	r30, r22
    2242:	20 81       	ld	r18, Z
    2244:	22 23       	and	r18, r18
    2246:	09 f4       	brne	.+2      	; 0x224a <fat_create_dir+0x38>
    2248:	a1 c0       	rjmp	.+322    	; 0x238c <fat_create_dir+0x17a>
    224a:	ea 01       	movw	r28, r20
    224c:	6b 01       	movw	r12, r22
    224e:	7c 01       	movw	r14, r24
    2250:	20 97       	sbiw	r28, 0x00	; 0
    2252:	61 f4       	brne	.+24     	; 0x226c <fat_create_dir+0x5a>
    2254:	9d c0       	rjmp	.+314    	; 0x2390 <fat_create_dir+0x17e>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    2256:	be 01       	movw	r22, r28
    2258:	c6 01       	movw	r24, r12
    225a:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <strcmp>
    225e:	89 2b       	or	r24, r25
    2260:	29 f4       	brne	.+10     	; 0x226c <fat_create_dir+0x5a>
        {
            fat_reset_dir(parent);
    2262:	c7 01       	movw	r24, r14
    2264:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <fat_reset_dir>
            return 0;
    2268:	10 e0       	ldi	r17, 0x00	; 0
    226a:	95 c0       	rjmp	.+298    	; 0x2396 <fat_create_dir+0x184>
{
    if(!parent || !dir || !dir[0] || !dir_entry)
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    226c:	be 01       	movw	r22, r28
    226e:	c7 01       	movw	r24, r14
    2270:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <fat_read_dir>
    2274:	18 2f       	mov	r17, r24
    2276:	81 11       	cpse	r24, r1
    2278:	ee cf       	rjmp	.-36     	; 0x2256 <fat_create_dir+0x44>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    227a:	f7 01       	movw	r30, r14
    227c:	a0 80       	ld	r10, Z
    227e:	b1 80       	ldd	r11, Z+1	; 0x01

    /* allocate cluster which will hold directory entries */
    cluster_t dir_cluster = fat_append_clusters(fs, 0, 1);
    2280:	41 e0       	ldi	r20, 0x01	; 1
    2282:	50 e0       	ldi	r21, 0x00	; 0
    2284:	60 e0       	ldi	r22, 0x00	; 0
    2286:	70 e0       	ldi	r23, 0x00	; 0
    2288:	c5 01       	movw	r24, r10
    228a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <fat_append_clusters>
    228e:	4c 01       	movw	r8, r24
    if(!dir_cluster)
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	09 f4       	brne	.+2      	; 0x2296 <fat_create_dir+0x84>
    2294:	80 c0       	rjmp	.+256    	; 0x2396 <fat_create_dir+0x184>
        return 0;

    /* clear cluster to prevent bogus directory entries */
    fat_clear_cluster(fs, dir_cluster);
    2296:	bc 01       	movw	r22, r24
    2298:	c5 01       	movw	r24, r10
    229a:	0e 94 92 03 	call	0x724	; 0x724 <fat_clear_cluster>
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    229e:	8b e2       	ldi	r24, 0x2B	; 43
    22a0:	fe 01       	movw	r30, r28
    22a2:	11 92       	st	Z+, r1
    22a4:	8a 95       	dec	r24
    22a6:	e9 f7       	brne	.-6      	; 0x22a2 <fat_create_dir+0x90>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    22a8:	80 e1       	ldi	r24, 0x10	; 16
    22aa:	88 a3       	std	Y+32, r24	; 0x20

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    22ac:	f5 01       	movw	r30, r10
    22ae:	a0 89       	ldd	r26, Z+16	; 0x10
    22b0:	b1 89       	ldd	r27, Z+17	; 0x11
    22b2:	94 01       	movw	r18, r8
    22b4:	22 50       	subi	r18, 0x02	; 2
    22b6:	31 09       	sbc	r19, r1
    22b8:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__umulhisi3>
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
    22bc:	42 88       	ldd	r4, Z+18	; 0x12
    22be:	53 88       	ldd	r5, Z+19	; 0x13
    22c0:	64 88       	ldd	r6, Z+20	; 0x14
    22c2:	75 88       	ldd	r7, Z+21	; 0x15
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	84 0d       	add	r24, r4
    22ca:	95 1d       	adc	r25, r5
    22cc:	a6 1d       	adc	r26, r6
    22ce:	b7 1d       	adc	r27, r7
    22d0:	8f a3       	std	Y+39, r24	; 0x27
    22d2:	98 a7       	std	Y+40, r25	; 0x28
    22d4:	a9 a7       	std	Y+41, r26	; 0x29
    22d6:	ba a7       	std	Y+42, r27	; 0x2a
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    dir_entry->long_name[0] = '.';
    22d8:	8e e2       	ldi	r24, 0x2E	; 46
    22da:	88 83       	st	Y, r24
    dir_entry->cluster = dir_cluster;
    22dc:	9a a2       	std	Y+34, r9	; 0x22
    22de:	89 a2       	std	Y+33, r8	; 0x21
    if(!fat_write_dir_entry(fs, dir_entry))
    22e0:	be 01       	movw	r22, r28
    22e2:	c5 01       	movw	r24, r10
    22e4:	0e 94 30 06 	call	0xc60	; 0xc60 <fat_write_dir_entry>
    22e8:	08 2f       	mov	r16, r24
    22ea:	81 11       	cpse	r24, r1
    22ec:	06 c0       	rjmp	.+12     	; 0x22fa <fat_create_dir+0xe8>
    {
        fat_free_clusters(fs, dir_cluster);
    22ee:	b4 01       	movw	r22, r8
    22f0:	c5 01       	movw	r24, r10
    22f2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <fat_free_clusters>
        return 0;
    22f6:	10 2f       	mov	r17, r16
    22f8:	4e c0       	rjmp	.+156    	; 0x2396 <fat_create_dir+0x184>
    }

    /* create ".." parent directory reference */
    dir_entry->entry_offset += 32;
    22fa:	8f a1       	ldd	r24, Y+39	; 0x27
    22fc:	98 a5       	ldd	r25, Y+40	; 0x28
    22fe:	a9 a5       	ldd	r26, Y+41	; 0x29
    2300:	ba a5       	ldd	r27, Y+42	; 0x2a
    2302:	80 96       	adiw	r24, 0x20	; 32
    2304:	a1 1d       	adc	r26, r1
    2306:	b1 1d       	adc	r27, r1
    2308:	8f a3       	std	Y+39, r24	; 0x27
    230a:	98 a7       	std	Y+40, r25	; 0x28
    230c:	a9 a7       	std	Y+41, r26	; 0x29
    230e:	ba a7       	std	Y+42, r27	; 0x2a
    dir_entry->long_name[1] = '.';
    2310:	8e e2       	ldi	r24, 0x2E	; 46
    2312:	89 83       	std	Y+1, r24	; 0x01
    dir_entry->cluster = parent->dir_entry.cluster;
    2314:	f7 01       	movw	r30, r14
    2316:	83 a1       	ldd	r24, Z+35	; 0x23
    2318:	94 a1       	ldd	r25, Z+36	; 0x24
    231a:	9a a3       	std	Y+34, r25	; 0x22
    231c:	89 a3       	std	Y+33, r24	; 0x21
    if(!fat_write_dir_entry(fs, dir_entry))
    231e:	be 01       	movw	r22, r28
    2320:	c5 01       	movw	r24, r10
    2322:	0e 94 30 06 	call	0xc60	; 0xc60 <fat_write_dir_entry>
    2326:	08 2f       	mov	r16, r24
    2328:	81 11       	cpse	r24, r1
    232a:	06 c0       	rjmp	.+12     	; 0x2338 <fat_create_dir+0x126>
    {
        fat_free_clusters(fs, dir_cluster);
    232c:	b4 01       	movw	r22, r8
    232e:	c5 01       	movw	r24, r10
    2330:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <fat_free_clusters>
        return 0;
    2334:	10 2f       	mov	r17, r16
    2336:	2f c0       	rjmp	.+94     	; 0x2396 <fat_create_dir+0x184>
    }

    /* fill directory entry */
    strncpy(dir_entry->long_name, dir, sizeof(dir_entry->long_name) - 1);
    2338:	4f e1       	ldi	r20, 0x1F	; 31
    233a:	50 e0       	ldi	r21, 0x00	; 0
    233c:	b6 01       	movw	r22, r12
    233e:	ce 01       	movw	r24, r28
    2340:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <strncpy>
    dir_entry->cluster = dir_cluster;
    2344:	9a a2       	std	Y+34, r9	; 0x22
    2346:	89 a2       	std	Y+33, r8	; 0x21

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    2348:	ae 01       	movw	r20, r28
    234a:	b7 01       	movw	r22, r14
    234c:	c5 01       	movw	r24, r10
    234e:	0e 94 39 05 	call	0xa72	; 0xa72 <fat_find_offset_for_dir_entry>
    2352:	6f a3       	std	Y+39, r22	; 0x27
    2354:	78 a7       	std	Y+40, r23	; 0x28
    2356:	89 a7       	std	Y+41, r24	; 0x29
    2358:	9a a7       	std	Y+42, r25	; 0x2a
    235a:	67 2b       	or	r22, r23
    235c:	68 2b       	or	r22, r24
    235e:	69 2b       	or	r22, r25
    2360:	29 f4       	brne	.+10     	; 0x236c <fat_create_dir+0x15a>
    {
        fat_free_clusters(fs, dir_cluster);
    2362:	b4 01       	movw	r22, r8
    2364:	c5 01       	movw	r24, r10
    2366:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <fat_free_clusters>
        return 0;
    236a:	15 c0       	rjmp	.+42     	; 0x2396 <fat_create_dir+0x184>
    }

    /* write directory to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    236c:	be 01       	movw	r22, r28
    236e:	c5 01       	movw	r24, r10
    2370:	0e 94 30 06 	call	0xc60	; 0xc60 <fat_write_dir_entry>
    2374:	18 2f       	mov	r17, r24
    2376:	81 11       	cpse	r24, r1
    2378:	0d c0       	rjmp	.+26     	; 0x2394 <fat_create_dir+0x182>
    {
        fat_free_clusters(fs, dir_cluster);
    237a:	b4 01       	movw	r22, r8
    237c:	c5 01       	movw	r24, r10
    237e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <fat_free_clusters>
        return 0;
    2382:	09 c0       	rjmp	.+18     	; 0x2396 <fat_create_dir+0x184>
 * \see fat_delete_dir
 */
uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !dir || !dir[0] || !dir_entry)
        return 0;
    2384:	10 e0       	ldi	r17, 0x00	; 0
    2386:	07 c0       	rjmp	.+14     	; 0x2396 <fat_create_dir+0x184>
    2388:	10 e0       	ldi	r17, 0x00	; 0
    238a:	05 c0       	rjmp	.+10     	; 0x2396 <fat_create_dir+0x184>
    238c:	10 e0       	ldi	r17, 0x00	; 0
    238e:	03 c0       	rjmp	.+6      	; 0x2396 <fat_create_dir+0x184>
    2390:	10 e0       	ldi	r17, 0x00	; 0
    2392:	01 c0       	rjmp	.+2      	; 0x2396 <fat_create_dir+0x184>
    {
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    return 1;
    2394:	11 e0       	ldi	r17, 0x01	; 1
}
    2396:	81 2f       	mov	r24, r17
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	1f 91       	pop	r17
    239e:	0f 91       	pop	r16
    23a0:	ff 90       	pop	r15
    23a2:	ef 90       	pop	r14
    23a4:	df 90       	pop	r13
    23a6:	cf 90       	pop	r12
    23a8:	bf 90       	pop	r11
    23aa:	af 90       	pop	r10
    23ac:	9f 90       	pop	r9
    23ae:	8f 90       	pop	r8
    23b0:	7f 90       	pop	r7
    23b2:	6f 90       	pop	r6
    23b4:	5f 90       	pop	r5
    23b6:	4f 90       	pop	r4
    23b8:	08 95       	ret

000023ba <fat_get_fs_size>:
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    if(!fs)
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	a1 f0       	breq	.+40     	; 0x23e6 <fat_get_fs_size+0x2c>
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
    23be:	fc 01       	movw	r30, r24
    23c0:	42 85       	ldd	r20, Z+10	; 0x0a
    23c2:	53 85       	ldd	r21, Z+11	; 0x0b
    23c4:	64 85       	ldd	r22, Z+12	; 0x0c
    23c6:	75 85       	ldd	r23, Z+13	; 0x0d
    23c8:	76 95       	lsr	r23
    23ca:	67 95       	ror	r22
    23cc:	57 95       	ror	r21
    23ce:	47 95       	ror	r20
    23d0:	9a 01       	movw	r18, r20
    23d2:	ab 01       	movw	r20, r22
    23d4:	22 50       	subi	r18, 0x02	; 2
    23d6:	31 09       	sbc	r19, r1
    23d8:	41 09       	sbc	r20, r1
    23da:	51 09       	sbc	r21, r1
    23dc:	a0 89       	ldd	r26, Z+16	; 0x10
    23de:	b1 89       	ldd	r27, Z+17	; 0x11
    23e0:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__muluhisi3>
    23e4:	08 95       	ret
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    if(!fs)
        return 0;
    23e6:	60 e0       	ldi	r22, 0x00	; 0
    23e8:	70 e0       	ldi	r23, 0x00	; 0
    23ea:	cb 01       	movw	r24, r22
    if(fs->partition->type == PARTITION_TYPE_FAT32)
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
}
    23ec:	08 95       	ret

000023ee <fat_get_fs_free>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
    23ee:	2f 92       	push	r2
    23f0:	3f 92       	push	r3
    23f2:	4f 92       	push	r4
    23f4:	5f 92       	push	r5
    23f6:	6f 92       	push	r6
    23f8:	7f 92       	push	r7
    23fa:	8f 92       	push	r8
    23fc:	9f 92       	push	r9
    23fe:	af 92       	push	r10
    2400:	bf 92       	push	r11
    2402:	cf 92       	push	r12
    2404:	df 92       	push	r13
    2406:	ef 92       	push	r14
    2408:	ff 92       	push	r15
    240a:	0f 93       	push	r16
    240c:	1f 93       	push	r17
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	a6 97       	sbiw	r28, 0x26	; 38
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	f8 94       	cli
    241c:	de bf       	out	0x3e, r29	; 62
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	cd bf       	out	0x3d, r28	; 61
    if(!fs)
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	09 f4       	brne	.+2      	; 0x2428 <fat_get_fs_free+0x3a>
    2426:	5c c0       	rjmp	.+184    	; 0x24e0 <fat_get_fs_free+0xf2>
    2428:	9e a3       	std	Y+38, r25	; 0x26
    242a:	8d a3       	std	Y+37, r24	; 0x25
        return 0;

    uint8_t fat[32];
    struct fat_usage_count_callback_arg count_arg;
    count_arg.cluster_count = 0;
    242c:	1a a2       	std	Y+34, r1	; 0x22
    242e:	19 a2       	std	Y+33, r1	; 0x21
    count_arg.buffer_size = sizeof(fat);
    2430:	80 e2       	ldi	r24, 0x20	; 32
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9c a3       	std	Y+36, r25	; 0x24
    2436:	8b a3       	std	Y+35, r24	; 0x23

    offset_t fat_offset = fs->header.fat_offset;
    2438:	ad a1       	ldd	r26, Y+37	; 0x25
    243a:	be a1       	ldd	r27, Y+38	; 0x26
    243c:	16 96       	adiw	r26, 0x06	; 6
    243e:	8d 90       	ld	r8, X+
    2440:	9d 90       	ld	r9, X+
    2442:	ad 90       	ld	r10, X+
    2444:	bc 90       	ld	r11, X
    2446:	19 97       	sbiw	r26, 0x09	; 9
    uint32_t fat_size = fs->header.fat_size;
    2448:	1a 96       	adiw	r26, 0x0a	; 10
    244a:	4d 90       	ld	r4, X+
    244c:	5d 90       	ld	r5, X+
    244e:	6d 90       	ld	r6, X+
    2450:	7c 90       	ld	r7, X
    2452:	1d 97       	sbiw	r26, 0x0d	; 13
    while(fat_size > 0)
    2454:	41 14       	cp	r4, r1
    2456:	51 04       	cpc	r5, r1
    2458:	61 04       	cpc	r6, r1
    245a:	71 04       	cpc	r7, r1
    245c:	b1 f1       	breq	.+108    	; 0x24ca <fat_get_fs_free+0xdc>
    {
        uintptr_t length = UINTPTR_MAX - 1;
        if(fat_size < length)
    245e:	be ef       	ldi	r27, 0xFE	; 254
    2460:	4b 16       	cp	r4, r27
    2462:	bf ef       	ldi	r27, 0xFF	; 255
    2464:	5b 06       	cpc	r5, r27
    2466:	61 04       	cpc	r6, r1
    2468:	71 04       	cpc	r7, r1
    246a:	10 f4       	brcc	.+4      	; 0x2470 <fat_get_fs_free+0x82>
            length = fat_size;
    246c:	12 01       	movw	r2, r4
    246e:	06 c0       	rjmp	.+12     	; 0x247c <fat_get_fs_free+0x8e>

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    {
        uintptr_t length = UINTPTR_MAX - 1;
    2470:	0f 2e       	mov	r0, r31
    2472:	fe ef       	ldi	r31, 0xFE	; 254
    2474:	2f 2e       	mov	r2, r31
    2476:	f0 2d       	mov	r31, r0
    2478:	33 24       	eor	r3, r3
    247a:	3a 94       	dec	r3
        if(fat_size < length)
            length = fat_size;

        if(!fs->partition->device_read_interval(fat_offset,
    247c:	ad a1       	ldd	r26, Y+37	; 0x25
    247e:	be a1       	ldd	r27, Y+38	; 0x26
    2480:	ed 91       	ld	r30, X+
    2482:	fc 91       	ld	r31, X
    2484:	02 80       	ldd	r0, Z+2	; 0x02
    2486:	f3 81       	ldd	r31, Z+3	; 0x03
    2488:	e0 2d       	mov	r30, r0
    248a:	ce 01       	movw	r24, r28
    248c:	81 96       	adiw	r24, 0x21	; 33
    248e:	6c 01       	movw	r12, r24
    2490:	0f 2e       	mov	r0, r31
    2492:	fd ec       	ldi	r31, 0xCD	; 205
    2494:	ef 2e       	mov	r14, r31
    2496:	f3 e0       	ldi	r31, 0x03	; 3
    2498:	ff 2e       	mov	r15, r31
    249a:	f0 2d       	mov	r31, r0
    249c:	81 01       	movw	r16, r2
    249e:	20 e2       	ldi	r18, 0x20	; 32
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	ae 01       	movw	r20, r28
    24a4:	4f 5f       	subi	r20, 0xFF	; 255
    24a6:	5f 4f       	sbci	r21, 0xFF	; 255
    24a8:	c5 01       	movw	r24, r10
    24aa:	b4 01       	movw	r22, r8
    24ac:	09 95       	icall
    24ae:	88 23       	and	r24, r24
    24b0:	d9 f0       	breq	.+54     	; 0x24e8 <fat_get_fs_free+0xfa>
                                                &count_arg
                                               )
          )
            return 0;

        fat_offset += length;
    24b2:	c1 01       	movw	r24, r2
    24b4:	a0 e0       	ldi	r26, 0x00	; 0
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	88 0e       	add	r8, r24
    24ba:	99 1e       	adc	r9, r25
    24bc:	aa 1e       	adc	r10, r26
    24be:	bb 1e       	adc	r11, r27
        fat_size -= length;
    24c0:	48 1a       	sub	r4, r24
    24c2:	59 0a       	sbc	r5, r25
    24c4:	6a 0a       	sbc	r6, r26
    24c6:	7b 0a       	sbc	r7, r27
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    24c8:	51 f6       	brne	.-108    	; 0x245e <fat_get_fs_free+0x70>

        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
    24ca:	ad a1       	ldd	r26, Y+37	; 0x25
    24cc:	be a1       	ldd	r27, Y+38	; 0x26
    24ce:	50 96       	adiw	r26, 0x10	; 16
    24d0:	2d 91       	ld	r18, X+
    24d2:	3c 91       	ld	r19, X
    24d4:	51 97       	sbiw	r26, 0x11	; 17
    24d6:	a9 a1       	ldd	r26, Y+33	; 0x21
    24d8:	ba a1       	ldd	r27, Y+34	; 0x22
    24da:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__umulhisi3>
    24de:	07 c0       	rjmp	.+14     	; 0x24ee <fat_get_fs_free+0x100>
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
    if(!fs)
        return 0;
    24e0:	60 e0       	ldi	r22, 0x00	; 0
    24e2:	70 e0       	ldi	r23, 0x00	; 0
    24e4:	cb 01       	movw	r24, r22
    24e6:	03 c0       	rjmp	.+6      	; 0x24ee <fat_get_fs_free+0x100>
                                                fat_get_fs_free_16_callback,
#endif
                                                &count_arg
                                               )
          )
            return 0;
    24e8:	60 e0       	ldi	r22, 0x00	; 0
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	cb 01       	movw	r24, r22
        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
}
    24ee:	a6 96       	adiw	r28, 0x26	; 38
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	cd bf       	out	0x3d, r28	; 61
    24fa:	df 91       	pop	r29
    24fc:	cf 91       	pop	r28
    24fe:	1f 91       	pop	r17
    2500:	0f 91       	pop	r16
    2502:	ff 90       	pop	r15
    2504:	ef 90       	pop	r14
    2506:	df 90       	pop	r13
    2508:	cf 90       	pop	r12
    250a:	bf 90       	pop	r11
    250c:	af 90       	pop	r10
    250e:	9f 90       	pop	r9
    2510:	8f 90       	pop	r8
    2512:	7f 90       	pop	r7
    2514:	6f 90       	pop	r6
    2516:	5f 90       	pop	r5
    2518:	4f 90       	pop	r4
    251a:	3f 90       	pop	r3
    251c:	2f 90       	pop	r2
    251e:	08 95       	ret

00002520 <print_disk_info>:

    return fat_open_file(fs, &file_entry);
}

uint8_t print_disk_info(const struct fat_fs_struct* fs)
{
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	69 97       	sbiw	r28, 0x19	; 25
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    if(!fs)
    2538:	00 97       	sbiw	r24, 0x00	; 0
    253a:	09 f4       	brne	.+2      	; 0x253e <print_disk_info+0x1e>
    253c:	a8 c0       	rjmp	.+336    	; 0x268e <print_disk_info+0x16e>
    253e:	8c 01       	movw	r16, r24
        return 0;

    struct sd_raw_info disk_info;
    if(!sd_raw_get_info(&disk_info))
    2540:	ce 01       	movw	r24, r28
    2542:	01 96       	adiw	r24, 0x01	; 1
    2544:	0e 94 4a 1b 	call	0x3694	; 0x3694 <sd_raw_get_info>
    2548:	88 23       	and	r24, r24
    254a:	09 f4       	brne	.+2      	; 0x254e <print_disk_info+0x2e>
    254c:	a1 c0       	rjmp	.+322    	; 0x2690 <print_disk_info+0x170>
        return 0;

    uart_puts_p(PSTR("manuf:  0x")); uart_putc_hex(disk_info.manufacturer); uart_putc('\n');
    254e:	86 ee       	ldi	r24, 0xE6	; 230
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart_putc_hex>
    255c:	8a e0       	ldi	r24, 0x0A	; 10
    255e:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    uart_puts_p(PSTR("oem:    ")); uart_puts((char*) disk_info.oem); uart_putc('\n');
    2562:	8d ed       	ldi	r24, 0xDD	; 221
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
    256a:	ce 01       	movw	r24, r28
    256c:	02 96       	adiw	r24, 0x02	; 2
    256e:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <uart_puts>
    2572:	8a e0       	ldi	r24, 0x0A	; 10
    2574:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    uart_puts_p(PSTR("prod:   ")); uart_puts((char*) disk_info.product); uart_putc('\n');
    2578:	84 ed       	ldi	r24, 0xD4	; 212
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
    2580:	ce 01       	movw	r24, r28
    2582:	05 96       	adiw	r24, 0x05	; 5
    2584:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <uart_puts>
    2588:	8a e0       	ldi	r24, 0x0A	; 10
    258a:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    uart_puts_p(PSTR("rev:    ")); uart_putc_hex(disk_info.revision); uart_putc('\n');
    258e:	8b ec       	ldi	r24, 0xCB	; 203
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
    2596:	8b 85       	ldd	r24, Y+11	; 0x0b
    2598:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart_putc_hex>
    259c:	8a e0       	ldi	r24, 0x0A	; 10
    259e:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    uart_puts_p(PSTR("serial: 0x")); uart_putdw_hex(disk_info.serial); uart_putc('\n');
    25a2:	80 ec       	ldi	r24, 0xC0	; 192
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
    25aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    25ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    25ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    25b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    25b2:	0e 94 a4 1c 	call	0x3948	; 0x3948 <uart_putdw_hex>
    25b6:	8a e0       	ldi	r24, 0x0A	; 10
    25b8:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    uart_puts_p(PSTR("date:   ")); uart_putw_dec(disk_info.manufacturing_month); uart_putc('/');
    25bc:	87 eb       	ldi	r24, 0xB7	; 183
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
    25c4:	89 89       	ldd	r24, Y+17	; 0x11
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	0e 94 b5 1c 	call	0x396a	; 0x396a <uart_putw_dec>
    25cc:	8f e2       	ldi	r24, 0x2F	; 47
    25ce:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
                                   uart_putw_dec(disk_info.manufacturing_year); uart_putc('\n');
    25d2:	88 89       	ldd	r24, Y+16	; 0x10
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	0e 94 b5 1c 	call	0x396a	; 0x396a <uart_putw_dec>
    25da:	8a e0       	ldi	r24, 0x0A	; 10
    25dc:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    uart_puts_p(PSTR("size:   ")); uart_putdw_dec(disk_info.capacity / 1024 / 1024); uart_puts_p(PSTR("MB\n"));
    25e0:	8e ea       	ldi	r24, 0xAE	; 174
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
    25e8:	8a 89       	ldd	r24, Y+18	; 0x12
    25ea:	9b 89       	ldd	r25, Y+19	; 0x13
    25ec:	ac 89       	ldd	r26, Y+20	; 0x14
    25ee:	bd 89       	ldd	r27, Y+21	; 0x15
    25f0:	bc 01       	movw	r22, r24
    25f2:	cd 01       	movw	r24, r26
    25f4:	05 2e       	mov	r0, r21
    25f6:	54 e1       	ldi	r21, 0x14	; 20
    25f8:	96 95       	lsr	r25
    25fa:	87 95       	ror	r24
    25fc:	77 95       	ror	r23
    25fe:	67 95       	ror	r22
    2600:	5a 95       	dec	r21
    2602:	d1 f7       	brne	.-12     	; 0x25f8 <print_disk_info+0xd8>
    2604:	50 2d       	mov	r21, r0
    2606:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <uart_putdw_dec>
    260a:	8a ea       	ldi	r24, 0xAA	; 170
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
    uart_puts_p(PSTR("copy:   ")); uart_putw_dec(disk_info.flag_copy); uart_putc('\n');
    2612:	81 ea       	ldi	r24, 0xA1	; 161
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
    261a:	8e 89       	ldd	r24, Y+22	; 0x16
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	0e 94 b5 1c 	call	0x396a	; 0x396a <uart_putw_dec>
    2622:	8a e0       	ldi	r24, 0x0A	; 10
    2624:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    uart_puts_p(PSTR("wr.pr.: ")); uart_putw_dec(disk_info.flag_write_protect_temp); uart_putc('/');
    2628:	88 e9       	ldi	r24, 0x98	; 152
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
    2630:	88 8d       	ldd	r24, Y+24	; 0x18
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	0e 94 b5 1c 	call	0x396a	; 0x396a <uart_putw_dec>
    2638:	8f e2       	ldi	r24, 0x2F	; 47
    263a:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
                                   uart_putw_dec(disk_info.flag_write_protect); uart_putc('\n');
    263e:	8f 89       	ldd	r24, Y+23	; 0x17
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0e 94 b5 1c 	call	0x396a	; 0x396a <uart_putw_dec>
    2646:	8a e0       	ldi	r24, 0x0A	; 10
    2648:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    uart_puts_p(PSTR("format: ")); uart_putw_dec(disk_info.format); uart_putc('\n');
    264c:	8f e8       	ldi	r24, 0x8F	; 143
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
    2654:	89 8d       	ldd	r24, Y+25	; 0x19
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	0e 94 b5 1c 	call	0x396a	; 0x396a <uart_putw_dec>
    265c:	8a e0       	ldi	r24, 0x0A	; 10
    265e:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    uart_puts_p(PSTR("free:   ")); uart_putdw_dec(fat_get_fs_free(fs)); uart_putc('/');
    2662:	86 e8       	ldi	r24, 0x86	; 134
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
    266a:	c8 01       	movw	r24, r16
    266c:	0e 94 f7 11 	call	0x23ee	; 0x23ee <fat_get_fs_free>
    2670:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <uart_putdw_dec>
    2674:	8f e2       	ldi	r24, 0x2F	; 47
    2676:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
                                   uart_putdw_dec(fat_get_fs_size(fs)); uart_putc('\n');
    267a:	c8 01       	movw	r24, r16
    267c:	0e 94 dd 11 	call	0x23ba	; 0x23ba <fat_get_fs_size>
    2680:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <uart_putdw_dec>
    2684:	8a e0       	ldi	r24, 0x0A	; 10
    2686:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>

    return 1;
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	01 c0       	rjmp	.+2      	; 0x2690 <print_disk_info+0x170>
}

uint8_t print_disk_info(const struct fat_fs_struct* fs)
{
    if(!fs)
        return 0;
    268e:	80 e0       	ldi	r24, 0x00	; 0
    uart_puts_p(PSTR("format: ")); uart_putw_dec(disk_info.format); uart_putc('\n');
    uart_puts_p(PSTR("free:   ")); uart_putdw_dec(fat_get_fs_free(fs)); uart_putc('/');
                                   uart_putdw_dec(fat_get_fs_size(fs)); uart_putc('\n');

    return 1;
}
    2690:	69 96       	adiw	r28, 0x19	; 25
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	08 95       	ret

000026a6 <find_file_in_dir>:

    return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    26a6:	ef 92       	push	r14
    26a8:	ff 92       	push	r15
    26aa:	0f 93       	push	r16
    26ac:	1f 93       	push	r17
    26ae:	cf 93       	push	r28
    26b0:	df 93       	push	r29
    26b2:	8b 01       	movw	r16, r22
    26b4:	7a 01       	movw	r14, r20
    26b6:	e9 01       	movw	r28, r18
    while(fat_read_dir(dd, dir_entry))
    26b8:	0b c0       	rjmp	.+22     	; 0x26d0 <find_file_in_dir+0x2a>
    {
        if(strcmp(dir_entry->long_name, name) == 0)
    26ba:	b7 01       	movw	r22, r14
    26bc:	ce 01       	movw	r24, r28
    26be:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <strcmp>
    26c2:	89 2b       	or	r24, r25
    26c4:	29 f4       	brne	.+10     	; 0x26d0 <find_file_in_dir+0x2a>
        {
            fat_reset_dir(dd);
    26c6:	c8 01       	movw	r24, r16
    26c8:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <fat_reset_dir>
            return 1;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	06 c0       	rjmp	.+12     	; 0x26dc <find_file_in_dir+0x36>
    return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    while(fat_read_dir(dd, dir_entry))
    26d0:	be 01       	movw	r22, r28
    26d2:	c8 01       	movw	r24, r16
    26d4:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <fat_read_dir>
    26d8:	81 11       	cpse	r24, r1
    26da:	ef cf       	rjmp	.-34     	; 0x26ba <find_file_in_dir+0x14>
            return 1;
        }
    }

    return 0;
}
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	1f 91       	pop	r17
    26e2:	0f 91       	pop	r16
    26e4:	ff 90       	pop	r15
    26e6:	ef 90       	pop	r14
    26e8:	08 95       	ret

000026ea <read_line>:
    
    return 0;
}

uint8_t read_line(char* buffer, uint8_t buffer_length)
{
    26ea:	ef 92       	push	r14
    26ec:	ff 92       	push	r15
    26ee:	0f 93       	push	r16
    26f0:	1f 93       	push	r17
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	7c 01       	movw	r14, r24
    26f8:	06 2f       	mov	r16, r22
    memset(buffer, 0, buffer_length);
    26fa:	46 2f       	mov	r20, r22
    26fc:	50 e0       	ldi	r21, 0x00	; 0
    26fe:	60 e0       	ldi	r22, 0x00	; 0
    2700:	70 e0       	ldi	r23, 0x00	; 0
    2702:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <memset>

    uint8_t read_length = 0;
    2706:	d0 e0       	ldi	r29, 0x00	; 0
    while(read_length < buffer_length - 1)
    2708:	10 e0       	ldi	r17, 0x00	; 0
    270a:	01 50       	subi	r16, 0x01	; 1
    270c:	11 09       	sbc	r17, r1
    270e:	26 c0       	rjmp	.+76     	; 0x275c <read_line+0x72>
    {
        uint8_t c = uart_getc();
    2710:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <uart_getc>
    2714:	c8 2f       	mov	r28, r24

        if(c == 0x08 || c == 0x7f)
    2716:	88 30       	cpi	r24, 0x08	; 8
    2718:	11 f0       	breq	.+4      	; 0x271e <read_line+0x34>
    271a:	8f 37       	cpi	r24, 0x7F	; 127
    271c:	89 f4       	brne	.+34     	; 0x2740 <read_line+0x56>
        {
            if(read_length < 1)
    271e:	dd 23       	and	r29, r29
    2720:	e9 f0       	breq	.+58     	; 0x275c <read_line+0x72>
                continue;

            --read_length;
    2722:	d1 50       	subi	r29, 0x01	; 1
            buffer[read_length] = '\0';
    2724:	f7 01       	movw	r30, r14
    2726:	ed 0f       	add	r30, r29
    2728:	f1 1d       	adc	r31, r1
    272a:	10 82       	st	Z, r1

            uart_putc(0x08);
    272c:	88 e0       	ldi	r24, 0x08	; 8
    272e:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
            uart_putc(' ');
    2732:	80 e2       	ldi	r24, 0x20	; 32
    2734:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
            uart_putc(0x08);
    2738:	88 e0       	ldi	r24, 0x08	; 8
    273a:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>

            continue;
    273e:	0e c0       	rjmp	.+28     	; 0x275c <read_line+0x72>
        }

        uart_putc(c);
    2740:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>

        if(c == '\n')
    2744:	ca 30       	cpi	r28, 0x0A	; 10
    2746:	29 f4       	brne	.+10     	; 0x2752 <read_line+0x68>
        {
            buffer[read_length] = '\0';
    2748:	f7 01       	movw	r30, r14
    274a:	ed 0f       	add	r30, r29
    274c:	f1 1d       	adc	r31, r1
    274e:	10 82       	st	Z, r1
            break;
    2750:	0a c0       	rjmp	.+20     	; 0x2766 <read_line+0x7c>
        }
        else
        {
            buffer[read_length] = c;
    2752:	f7 01       	movw	r30, r14
    2754:	ed 0f       	add	r30, r29
    2756:	f1 1d       	adc	r31, r1
    2758:	c0 83       	st	Z, r28
            ++read_length;
    275a:	df 5f       	subi	r29, 0xFF	; 255
uint8_t read_line(char* buffer, uint8_t buffer_length)
{
    memset(buffer, 0, buffer_length);

    uint8_t read_length = 0;
    while(read_length < buffer_length - 1)
    275c:	2d 2f       	mov	r18, r29
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	20 17       	cp	r18, r16
    2762:	31 07       	cpc	r19, r17
    2764:	ac f2       	brlt	.-86     	; 0x2710 <read_line+0x26>
            ++read_length;
        }
    }

    return read_length;
}
    2766:	8d 2f       	mov	r24, r29
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	1f 91       	pop	r17
    276e:	0f 91       	pop	r16
    2770:	ff 90       	pop	r15
    2772:	ef 90       	pop	r14
    2774:	08 95       	ret

00002776 <main>:
static uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry);
static struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name); 
static uint8_t print_disk_info(const struct fat_fs_struct* fs);

int main()
{
    2776:	cf 93       	push	r28
    2778:	df 93       	push	r29
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    277e:	c1 58       	subi	r28, 0x81	; 129
    2780:	d1 09       	sbc	r29, r1
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	f8 94       	cli
    2786:	de bf       	out	0x3e, r29	; 62
    2788:	0f be       	out	0x3f, r0	; 63
    278a:	cd bf       	out	0x3d, r28	; 61
    /* we will just use ordinary idle mode */
    set_sleep_mode(SLEEP_MODE_IDLE);
    278c:	83 b7       	in	r24, 0x33	; 51
    278e:	81 7f       	andi	r24, 0xF1	; 241
    2790:	83 bf       	out	0x33, r24	; 51

    /* setup uart */
    uart_init();
    2792:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <uart_init>
            uart_putc('>');
            uart_putc(' ');

            /* read command */
            char* command = buffer;
            if(read_line(command, sizeof(buffer)) < 1)
    2796:	ce 01       	movw	r24, r28
    2798:	89 5a       	subi	r24, 0xA9	; 169
    279a:	9f 4f       	sbci	r25, 0xFF	; 255
    279c:	e1 96       	adiw	r28, 0x31	; 49
    279e:	9f af       	std	Y+63, r25	; 0x3f
    27a0:	8e af       	std	Y+62, r24	; 0x3e
    27a2:	e1 97       	sbiw	r28, 0x31	; 49
            }
            else if(strcmp_P(command, PSTR("ls")) == 0)
            {
                /* print directory listing */
                struct fat_dir_entry_struct dir_entry;
                while(fat_read_dir(dd, &dir_entry))
    27a4:	fe 01       	movw	r30, r28
    27a6:	31 96       	adiw	r30, 0x01	; 1
    27a8:	6f 01       	movw	r12, r30
                command += 6;
                if(command[0] == '\0')
                    continue;

                struct fat_dir_entry_struct dir_entry;
                if(!fat_create_dir(dd, command, &dir_entry))
    27aa:	87 e5       	ldi	r24, 0x57	; 87
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	8c 0f       	add	r24, r28
    27b0:	9d 1f       	adc	r25, r29
    27b2:	06 96       	adiw	r24, 0x06	; 6
    27b4:	eb 96       	adiw	r28, 0x3b	; 59
    27b6:	9f af       	std	Y+63, r25	; 0x3f
    27b8:	8e af       	std	Y+62, r24	; 0x3e
    27ba:	eb 97       	sbiw	r28, 0x3b	; 59
    27bc:	e7 e5       	ldi	r30, 0x57	; 87
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	ec 0f       	add	r30, r28
    27c2:	fd 1f       	adc	r31, r29
    27c4:	37 96       	adiw	r30, 0x07	; 7
    27c6:	c1 58       	subi	r28, 0x81	; 129
    27c8:	df 4f       	sbci	r29, 0xFF	; 255
    27ca:	f9 83       	std	Y+1, r31	; 0x01
    27cc:	e8 83       	st	Y, r30
    27ce:	cf 57       	subi	r28, 0x7F	; 127
    27d0:	d0 40       	sbci	r29, 0x00	; 0
                    *target++ = '\0';
                else
                    continue;

                struct fat_dir_entry_struct file_entry;
                if(find_file_in_dir(fs, dd, command, &file_entry))
    27d2:	87 e5       	ldi	r24, 0x57	; 87
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	8c 0f       	add	r24, r28
    27d8:	9d 1f       	adc	r25, r29
    27da:	03 96       	adiw	r24, 0x03	; 3
    27dc:	e9 96       	adiw	r28, 0x39	; 57
    27de:	9f af       	std	Y+63, r25	; 0x3f
    27e0:	8e af       	std	Y+62, r24	; 0x3e
    27e2:	e9 97       	sbiw	r28, 0x39	; 57
    27e4:	bc 2c       	mov	r11, r12
    27e6:	2d 2c       	mov	r2, r13
    uart_init();

    while(1)
    {
        /* setup sd card slot */
        if(!sd_raw_init())
    27e8:	0e 94 4d 19 	call	0x329a	; 0x329a <sd_raw_init>
    27ec:	81 11       	cpse	r24, r1
    27ee:	05 c0       	rjmp	.+10     	; 0x27fa <main+0x84>
        {
#if DEBUG
            uart_puts_p(PSTR("MMC/SD initialization failed\n"));
    27f0:	8e e7       	ldi	r24, 0x7E	; 126
    27f2:	92 e0       	ldi	r25, 0x02	; 2
    27f4:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
#endif
            continue;
    27f8:	f7 cf       	rjmp	.-18     	; 0x27e8 <main+0x72>
        }
		uart_puts_p(PSTR("working?\n"));
    27fa:	84 e7       	ldi	r24, 0x74	; 116
    27fc:	92 e0       	ldi	r25, 0x02	; 2
    27fe:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
        /* open first partition */
        struct partition_struct* partition = partition_open(sd_raw_read,
    2802:	00 e0       	ldi	r16, 0x00	; 0
    2804:	26 ee       	ldi	r18, 0xE6	; 230
    2806:	3a e1       	ldi	r19, 0x1A	; 26
    2808:	44 e3       	ldi	r20, 0x34	; 52
    280a:	5a e1       	ldi	r21, 0x1A	; 26
    280c:	6a ed       	ldi	r22, 0xDA	; 218
    280e:	79 e1       	ldi	r23, 0x19	; 25
    2810:	8a e9       	ldi	r24, 0x9A	; 154
    2812:	98 e1       	ldi	r25, 0x18	; 24
    2814:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <partition_open>
    2818:	e7 96       	adiw	r28, 0x37	; 55
    281a:	9f af       	std	Y+63, r25	; 0x3f
    281c:	8e af       	std	Y+62, r24	; 0x3e
    281e:	e7 97       	sbiw	r28, 0x37	; 55
                                                            0,
#endif
                                                            0
                                                           );

        if(!partition)
    2820:	89 2b       	or	r24, r25
    2822:	b1 f4       	brne	.+44     	; 0x2850 <main+0xda>
        {
            /* If the partition did not open, assume the storage device
             * is a "superfloppy", i.e. has no MBR.
             */
            partition = partition_open(sd_raw_read,
    2824:	0f ef       	ldi	r16, 0xFF	; 255
    2826:	26 ee       	ldi	r18, 0xE6	; 230
    2828:	3a e1       	ldi	r19, 0x1A	; 26
    282a:	44 e3       	ldi	r20, 0x34	; 52
    282c:	5a e1       	ldi	r21, 0x1A	; 26
    282e:	6a ed       	ldi	r22, 0xDA	; 218
    2830:	79 e1       	ldi	r23, 0x19	; 25
    2832:	8a e9       	ldi	r24, 0x9A	; 154
    2834:	98 e1       	ldi	r25, 0x18	; 24
    2836:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <partition_open>
    283a:	e7 96       	adiw	r28, 0x37	; 55
    283c:	9f af       	std	Y+63, r25	; 0x3f
    283e:	8e af       	std	Y+62, r24	; 0x3e
    2840:	e7 97       	sbiw	r28, 0x37	; 55
                                       0,
                                       0,
#endif
                                       -1
                                      );
            if(!partition)
    2842:	89 2b       	or	r24, r25
    2844:	29 f4       	brne	.+10     	; 0x2850 <main+0xda>
            {
#if DEBUG
                uart_puts_p(PSTR("opening partition failed\n"));
    2846:	8a e5       	ldi	r24, 0x5A	; 90
    2848:	92 e0       	ldi	r25, 0x02	; 2
    284a:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
#endif
                continue;
    284e:	cc cf       	rjmp	.-104    	; 0x27e8 <main+0x72>
            }
        }

        /* open file system */
        struct fat_fs_struct* fs = fat_open(partition);
    2850:	e7 96       	adiw	r28, 0x37	; 55
    2852:	8e ad       	ldd	r24, Y+62	; 0x3e
    2854:	9f ad       	ldd	r25, Y+63	; 0x3f
    2856:	e7 97       	sbiw	r28, 0x37	; 55
    2858:	0e 94 9d 07 	call	0xf3a	; 0xf3a <fat_open>
    285c:	e3 96       	adiw	r28, 0x33	; 51
    285e:	9f af       	std	Y+63, r25	; 0x3f
    2860:	8e af       	std	Y+62, r24	; 0x3e
    2862:	e3 97       	sbiw	r28, 0x33	; 51
        if(!fs)
    2864:	89 2b       	or	r24, r25
    2866:	29 f4       	brne	.+10     	; 0x2872 <main+0xfc>
        {
#if DEBUG
            uart_puts_p(PSTR("opening filesystem failed\n"));
    2868:	8f e3       	ldi	r24, 0x3F	; 63
    286a:	92 e0       	ldi	r25, 0x02	; 2
    286c:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
#endif
            continue;
    2870:	bb cf       	rjmp	.-138    	; 0x27e8 <main+0x72>
        }

        /* open root directory */
        struct fat_dir_entry_struct directory;
        fat_get_dir_entry_of_path(fs, "/", &directory);
    2872:	ae 01       	movw	r20, r28
    2874:	44 5d       	subi	r20, 0xD4	; 212
    2876:	5f 4f       	sbci	r21, 0xFF	; 255
    2878:	6d e0       	ldi	r22, 0x0D	; 13
    287a:	71 e0       	ldi	r23, 0x01	; 1
    287c:	e3 96       	adiw	r28, 0x33	; 51
    287e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2880:	9f ad       	ldd	r25, Y+63	; 0x3f
    2882:	e3 97       	sbiw	r28, 0x33	; 51
    2884:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <fat_get_dir_entry_of_path>

        struct fat_dir_struct* dd = fat_open_dir(fs, &directory);
    2888:	be 01       	movw	r22, r28
    288a:	64 5d       	subi	r22, 0xD4	; 212
    288c:	7f 4f       	sbci	r23, 0xFF	; 255
    288e:	e3 96       	adiw	r28, 0x33	; 51
    2890:	8e ad       	ldd	r24, Y+62	; 0x3e
    2892:	9f ad       	ldd	r25, Y+63	; 0x3f
    2894:	e3 97       	sbiw	r28, 0x33	; 51
    2896:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <fat_open_dir>
    289a:	e5 96       	adiw	r28, 0x35	; 53
    289c:	9f af       	std	Y+63, r25	; 0x3f
    289e:	8e af       	std	Y+62, r24	; 0x3e
    28a0:	e5 97       	sbiw	r28, 0x35	; 53
        if(!dd)
    28a2:	89 2b       	or	r24, r25
    28a4:	29 f4       	brne	.+10     	; 0x28b0 <main+0x13a>
        {
#if DEBUG
            uart_puts_p(PSTR("opening root directory failed\n"));
    28a6:	80 e2       	ldi	r24, 0x20	; 32
    28a8:	92 e0       	ldi	r25, 0x02	; 2
    28aa:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
#endif
            continue;
    28ae:	9c cf       	rjmp	.-200    	; 0x27e8 <main+0x72>
        }
        
        /* print some card information as a boot message */
        print_disk_info(fs);
    28b0:	e3 96       	adiw	r28, 0x33	; 51
    28b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    28b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    28b6:	e3 97       	sbiw	r28, 0x33	; 51
    28b8:	0e 94 90 12 	call	0x2520	; 0x2520 <print_disk_info>
            uart_putc('>');
            uart_putc(' ');

            /* read command */
            char* command = buffer;
            if(read_line(command, sizeof(buffer)) < 1)
    28bc:	e0 96       	adiw	r28, 0x30	; 48
    28be:	9f ac       	ldd	r9, Y+63	; 0x3f
    28c0:	e0 97       	sbiw	r28, 0x30	; 48
    28c2:	e1 96       	adiw	r28, 0x31	; 49
    28c4:	af ac       	ldd	r10, Y+63	; 0x3f
    28c6:	e1 97       	sbiw	r28, 0x31	; 49
                {
                    uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;

                    uart_puts(dir_entry.long_name);
                    uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
                    while(spaces--)
    28c8:	0f 2e       	mov	r0, r31
    28ca:	f3 e2       	ldi	r31, 0x23	; 35
    28cc:	3f 2e       	mov	r3, r31
    28ce:	f0 2d       	mov	r31, r0
    28d0:	e7 e5       	ldi	r30, 0x57	; 87
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	ec 0f       	add	r30, r28
    28d6:	fd 1f       	adc	r31, r29
    28d8:	34 96       	adiw	r30, 0x04	; 4
    28da:	ed 96       	adiw	r28, 0x3d	; 61
    28dc:	ff af       	std	Y+63, r31	; 0x3f
    28de:	ee af       	std	Y+62, r30	; 0x3e
    28e0:	ed 97       	sbiw	r28, 0x3d	; 61
        /* provide a simple shell */
        char buffer[24];
        while(1)
        {
            /* print prompt */
            uart_putc('>');
    28e2:	8e e3       	ldi	r24, 0x3E	; 62
    28e4:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
            uart_putc(' ');
    28e8:	80 e2       	ldi	r24, 0x20	; 32
    28ea:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>

            /* read command */
            char* command = buffer;
            if(read_line(command, sizeof(buffer)) < 1)
    28ee:	68 e1       	ldi	r22, 0x18	; 24
    28f0:	89 2d       	mov	r24, r9
    28f2:	9a 2d       	mov	r25, r10
    28f4:	0e 94 75 13 	call	0x26ea	; 0x26ea <read_line>
    28f8:	88 23       	and	r24, r24
    28fa:	99 f3       	breq	.-26     	; 0x28e2 <main+0x16c>
                continue;

            /* execute command */
            if(strcmp_P(command, PSTR("init")) == 0)
    28fc:	6b e1       	ldi	r22, 0x1B	; 27
    28fe:	72 e0       	ldi	r23, 0x02	; 2
    2900:	89 2d       	mov	r24, r9
    2902:	9a 2d       	mov	r25, r10
    2904:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <strcmp_P>
    2908:	89 2b       	or	r24, r25
    290a:	09 f4       	brne	.+2      	; 0x290e <main+0x198>
    290c:	ba c2       	rjmp	.+1396   	; 0x2e82 <main+0x70c>
            {
                break;
            }
            else if(strncmp_P(command, PSTR("cd "), 3) == 0)
    290e:	43 e0       	ldi	r20, 0x03	; 3
    2910:	50 e0       	ldi	r21, 0x00	; 0
    2912:	67 e1       	ldi	r22, 0x17	; 23
    2914:	72 e0       	ldi	r23, 0x02	; 2
    2916:	89 2d       	mov	r24, r9
    2918:	9a 2d       	mov	r25, r10
    291a:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <strncmp_P>
    291e:	89 2b       	or	r24, r25
    2920:	d9 f5       	brne	.+118    	; 0x2998 <main+0x222>
            {
                command += 3;
                if(command[0] == '\0')
    2922:	6b 96       	adiw	r28, 0x1b	; 27
    2924:	8f ad       	ldd	r24, Y+63	; 0x3f
    2926:	6b 97       	sbiw	r28, 0x1b	; 27
    2928:	88 23       	and	r24, r24
    292a:	d9 f2       	breq	.-74     	; 0x28e2 <main+0x16c>
                    continue;

                /* change directory */
                struct fat_dir_entry_struct subdir_entry;
                if(find_file_in_dir(fs, dd, command, &subdir_entry))
    292c:	2b 2d       	mov	r18, r11
    292e:	32 2d       	mov	r19, r2
    2930:	e9 96       	adiw	r28, 0x39	; 57
    2932:	4e ad       	ldd	r20, Y+62	; 0x3e
    2934:	5f ad       	ldd	r21, Y+63	; 0x3f
    2936:	e9 97       	sbiw	r28, 0x39	; 57
    2938:	e5 96       	adiw	r28, 0x35	; 53
    293a:	6e ad       	ldd	r22, Y+62	; 0x3e
    293c:	7f ad       	ldd	r23, Y+63	; 0x3f
    293e:	e5 97       	sbiw	r28, 0x35	; 53
    2940:	e3 96       	adiw	r28, 0x33	; 51
    2942:	8e ad       	ldd	r24, Y+62	; 0x3e
    2944:	9f ad       	ldd	r25, Y+63	; 0x3f
    2946:	e3 97       	sbiw	r28, 0x33	; 51
    2948:	0e 94 53 13 	call	0x26a6	; 0x26a6 <find_file_in_dir>
    294c:	88 23       	and	r24, r24
    294e:	b1 f0       	breq	.+44     	; 0x297c <main+0x206>
                {
                    struct fat_dir_struct* dd_new = fat_open_dir(fs, &subdir_entry);
    2950:	6b 2d       	mov	r22, r11
    2952:	72 2d       	mov	r23, r2
    2954:	e3 96       	adiw	r28, 0x33	; 51
    2956:	8e ad       	ldd	r24, Y+62	; 0x3e
    2958:	9f ad       	ldd	r25, Y+63	; 0x3f
    295a:	e3 97       	sbiw	r28, 0x33	; 51
    295c:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <fat_open_dir>
    2960:	8c 01       	movw	r16, r24
                    if(dd_new)
    2962:	89 2b       	or	r24, r25
    2964:	59 f0       	breq	.+22     	; 0x297c <main+0x206>
                    {
                        fat_close_dir(dd);
    2966:	e5 96       	adiw	r28, 0x35	; 53
    2968:	8e ad       	ldd	r24, Y+62	; 0x3e
    296a:	9f ad       	ldd	r25, Y+63	; 0x3f
    296c:	e5 97       	sbiw	r28, 0x35	; 53
    296e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <fat_close_dir>
                        dd = dd_new;
    2972:	e5 96       	adiw	r28, 0x35	; 53
    2974:	1f af       	std	Y+63, r17	; 0x3f
    2976:	0e af       	std	Y+62, r16	; 0x3e
    2978:	e5 97       	sbiw	r28, 0x35	; 53
                        continue;
    297a:	b3 cf       	rjmp	.-154    	; 0x28e2 <main+0x16c>
                    }
                }

                uart_puts_p(PSTR("directory not found: "));
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	92 e0       	ldi	r25, 0x02	; 2
    2980:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
                uart_puts(command);
    2984:	e9 96       	adiw	r28, 0x39	; 57
    2986:	8e ad       	ldd	r24, Y+62	; 0x3e
    2988:	9f ad       	ldd	r25, Y+63	; 0x3f
    298a:	e9 97       	sbiw	r28, 0x39	; 57
    298c:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <uart_puts>
                uart_putc('\n');
    2990:	8a e0       	ldi	r24, 0x0A	; 10
    2992:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    2996:	a5 cf       	rjmp	.-182    	; 0x28e2 <main+0x16c>
            }
            else if(strcmp_P(command, PSTR("ls")) == 0)
    2998:	6e ef       	ldi	r22, 0xFE	; 254
    299a:	71 e0       	ldi	r23, 0x01	; 1
    299c:	89 2d       	mov	r24, r9
    299e:	9a 2d       	mov	r25, r10
    29a0:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <strcmp_P>
    29a4:	89 2b       	or	r24, r25
    29a6:	61 f1       	breq	.+88     	; 0x2a00 <main+0x28a>
    29a8:	37 c0       	rjmp	.+110    	; 0x2a18 <main+0x2a2>
            {
                /* print directory listing */
                struct fat_dir_entry_struct dir_entry;
                while(fat_read_dir(dd, &dir_entry))
                {
                    uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;
    29aa:	f6 01       	movw	r30, r12
    29ac:	01 90       	ld	r0, Z+
    29ae:	00 20       	and	r0, r0
    29b0:	e9 f7       	brne	.-6      	; 0x29ac <main+0x236>
    29b2:	31 97       	sbiw	r30, 0x01	; 1
    29b4:	8f 01       	movw	r16, r30
    29b6:	0c 19       	sub	r16, r12
    29b8:	1d 09       	sbc	r17, r13
    29ba:	80 2e       	mov	r8, r16

                    uart_puts(dir_entry.long_name);
    29bc:	8b 2d       	mov	r24, r11
    29be:	92 2d       	mov	r25, r2
    29c0:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <uart_puts>
                    uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
    29c4:	89 a1       	ldd	r24, Y+33	; 0x21
    29c6:	84 fd       	sbrc	r24, 4
    29c8:	02 c0       	rjmp	.+4      	; 0x29ce <main+0x258>
    29ca:	80 e2       	ldi	r24, 0x20	; 32
    29cc:	01 c0       	rjmp	.+2      	; 0x29d0 <main+0x25a>
    29ce:	8f e2       	ldi	r24, 0x2F	; 47
    29d0:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
                    while(spaces--)
    29d4:	13 2d       	mov	r17, r3
    29d6:	10 1b       	sub	r17, r16
    29d8:	f4 e2       	ldi	r31, 0x24	; 36
    29da:	8f 16       	cp	r8, r31
    29dc:	39 f0       	breq	.+14     	; 0x29ec <main+0x276>
                        uart_putc(' ');
    29de:	80 e2       	ldi	r24, 0x20	; 32
    29e0:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    29e4:	81 2f       	mov	r24, r17
                {
                    uint8_t spaces = sizeof(dir_entry.long_name) - strlen(dir_entry.long_name) + 4;

                    uart_puts(dir_entry.long_name);
                    uart_putc(dir_entry.attributes & FAT_ATTRIB_DIR ? '/' : ' ');
                    while(spaces--)
    29e6:	11 50       	subi	r17, 0x01	; 1
    29e8:	81 11       	cpse	r24, r1
    29ea:	f9 cf       	rjmp	.-14     	; 0x29de <main+0x268>
                        uart_putc(' ');
                    uart_putdw_dec(dir_entry.file_size);
    29ec:	6c a1       	ldd	r22, Y+36	; 0x24
    29ee:	7d a1       	ldd	r23, Y+37	; 0x25
    29f0:	8e a1       	ldd	r24, Y+38	; 0x26
    29f2:	9f a1       	ldd	r25, Y+39	; 0x27
    29f4:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <uart_putdw_dec>
                    uart_putc('\n');
    29f8:	8a e0       	ldi	r24, 0x0A	; 10
    29fa:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    29fe:	04 c0       	rjmp	.+8      	; 0x2a08 <main+0x292>
    2a00:	e5 96       	adiw	r28, 0x35	; 53
    2a02:	ee ac       	ldd	r14, Y+62	; 0x3e
    2a04:	ff ac       	ldd	r15, Y+63	; 0x3f
    2a06:	e5 97       	sbiw	r28, 0x35	; 53
            }
            else if(strcmp_P(command, PSTR("ls")) == 0)
            {
                /* print directory listing */
                struct fat_dir_entry_struct dir_entry;
                while(fat_read_dir(dd, &dir_entry))
    2a08:	6b 2d       	mov	r22, r11
    2a0a:	72 2d       	mov	r23, r2
    2a0c:	c7 01       	movw	r24, r14
    2a0e:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <fat_read_dir>
    2a12:	81 11       	cpse	r24, r1
    2a14:	ca cf       	rjmp	.-108    	; 0x29aa <main+0x234>
    2a16:	65 cf       	rjmp	.-310    	; 0x28e2 <main+0x16c>
                        uart_putc(' ');
                    uart_putdw_dec(dir_entry.file_size);
                    uart_putc('\n');
                }
            }
            else if(strncmp_P(command, PSTR("cat "), 4) == 0)
    2a18:	44 e0       	ldi	r20, 0x04	; 4
    2a1a:	50 e0       	ldi	r21, 0x00	; 0
    2a1c:	69 ef       	ldi	r22, 0xF9	; 249
    2a1e:	71 e0       	ldi	r23, 0x01	; 1
    2a20:	89 2d       	mov	r24, r9
    2a22:	9a 2d       	mov	r25, r10
    2a24:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <strncmp_P>
    2a28:	89 2b       	or	r24, r25
    2a2a:	09 f0       	breq	.+2      	; 0x2a2e <main+0x2b8>
    2a2c:	77 c0       	rjmp	.+238    	; 0x2b1c <main+0x3a6>
            {
                command += 4;
                if(command[0] == '\0')
    2a2e:	6c 96       	adiw	r28, 0x1c	; 28
    2a30:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a32:	6c 97       	sbiw	r28, 0x1c	; 28
    2a34:	88 23       	and	r24, r24
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <main+0x2c4>
    2a38:	54 cf       	rjmp	.-344    	; 0x28e2 <main+0x16c>
}

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
    2a3a:	2b 2d       	mov	r18, r11
    2a3c:	32 2d       	mov	r19, r2
    2a3e:	ed 96       	adiw	r28, 0x3d	; 61
    2a40:	4e ad       	ldd	r20, Y+62	; 0x3e
    2a42:	5f ad       	ldd	r21, Y+63	; 0x3f
    2a44:	ed 97       	sbiw	r28, 0x3d	; 61
    2a46:	e5 96       	adiw	r28, 0x35	; 53
    2a48:	6e ad       	ldd	r22, Y+62	; 0x3e
    2a4a:	7f ad       	ldd	r23, Y+63	; 0x3f
    2a4c:	e5 97       	sbiw	r28, 0x35	; 53
    2a4e:	e3 96       	adiw	r28, 0x33	; 51
    2a50:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a52:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a54:	e3 97       	sbiw	r28, 0x33	; 51
    2a56:	0e 94 53 13 	call	0x26a6	; 0x26a6 <find_file_in_dir>
    2a5a:	88 23       	and	r24, r24
    2a5c:	71 f0       	breq	.+28     	; 0x2a7a <main+0x304>
        return 0;

    return fat_open_file(fs, &file_entry);
    2a5e:	6b 2d       	mov	r22, r11
    2a60:	72 2d       	mov	r23, r2
    2a62:	e3 96       	adiw	r28, 0x33	; 51
    2a64:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a66:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a68:	e3 97       	sbiw	r28, 0x33	; 51
    2a6a:	0e 94 48 09 	call	0x1290	; 0x1290 <fat_open_file>
    2a6e:	ef 96       	adiw	r28, 0x3f	; 63
    2a70:	9f af       	std	Y+63, r25	; 0x3f
    2a72:	8e af       	std	Y+62, r24	; 0x3e
    2a74:	ef 97       	sbiw	r28, 0x3f	; 63
                if(command[0] == '\0')
                    continue;
                
                /* search file in current directory and open it */
                struct fat_file_struct* fd = open_file_in_dir(fs, dd, command);
                if(!fd)
    2a76:	89 2b       	or	r24, r25
    2a78:	69 f5       	brne	.+90     	; 0x2ad4 <main+0x35e>
                {
                    uart_puts_p(PSTR("error opening "));
    2a7a:	8a ee       	ldi	r24, 0xEA	; 234
    2a7c:	91 e0       	ldi	r25, 0x01	; 1
    2a7e:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
                    uart_puts(command);
    2a82:	ed 96       	adiw	r28, 0x3d	; 61
    2a84:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a86:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a88:	ed 97       	sbiw	r28, 0x3d	; 61
    2a8a:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <uart_puts>
                    uart_putc('\n');
    2a8e:	8a e0       	ldi	r24, 0x0A	; 10
    2a90:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
                    continue;
    2a94:	26 cf       	rjmp	.-436    	; 0x28e2 <main+0x16c>
                uint8_t buffer[8];
                uint32_t offset = 0;
                intptr_t count;
                while((count = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
                {
                    uart_putdw_hex(offset);
    2a96:	c3 01       	movw	r24, r6
    2a98:	b2 01       	movw	r22, r4
    2a9a:	0e 94 a4 1c 	call	0x3948	; 0x3948 <uart_putdw_hex>
                    uart_putc(':');
    2a9e:	8a e3       	ldi	r24, 0x3A	; 58
    2aa0:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    2aa4:	0b 2d       	mov	r16, r11
    2aa6:	12 2d       	mov	r17, r2
    2aa8:	ec 0c       	add	r14, r12
    2aaa:	fd 1c       	adc	r15, r13
                    for(intptr_t i = 0; i < count; ++i)
                    {
                        uart_putc(' ');
    2aac:	80 e2       	ldi	r24, 0x20	; 32
    2aae:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
                        uart_putc_hex(buffer[i]);
    2ab2:	f8 01       	movw	r30, r16
    2ab4:	81 91       	ld	r24, Z+
    2ab6:	8f 01       	movw	r16, r30
    2ab8:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart_putc_hex>
                intptr_t count;
                while((count = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
                {
                    uart_putdw_hex(offset);
                    uart_putc(':');
                    for(intptr_t i = 0; i < count; ++i)
    2abc:	0e 15       	cp	r16, r14
    2abe:	1f 05       	cpc	r17, r15
    2ac0:	a9 f7       	brne	.-22     	; 0x2aac <main+0x336>
                    {
                        uart_putc(' ');
                        uart_putc_hex(buffer[i]);
                    }
                    uart_putc('\n');
    2ac2:	8a e0       	ldi	r24, 0x0A	; 10
    2ac4:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
                    offset += 8;
    2ac8:	f8 e0       	ldi	r31, 0x08	; 8
    2aca:	4f 0e       	add	r4, r31
    2acc:	51 1c       	adc	r5, r1
    2ace:	61 1c       	adc	r6, r1
    2ad0:	71 1c       	adc	r7, r1
    2ad2:	0d c0       	rjmp	.+26     	; 0x2aee <main+0x378>
    2ad4:	41 2c       	mov	r4, r1
    2ad6:	51 2c       	mov	r5, r1
    2ad8:	61 2c       	mov	r6, r1
    2ada:	71 2c       	mov	r7, r1
    2adc:	cf 57       	subi	r28, 0x7F	; 127
    2ade:	df 4f       	sbci	r29, 0xFF	; 255
    2ae0:	98 82       	st	Y, r9
    2ae2:	c1 58       	subi	r28, 0x81	; 129
    2ae4:	d0 40       	sbci	r29, 0x00	; 0
    2ae6:	ef 96       	adiw	r28, 0x3f	; 63
    2ae8:	8e ac       	ldd	r8, Y+62	; 0x3e
    2aea:	9f ac       	ldd	r9, Y+63	; 0x3f
    2aec:	ef 97       	sbiw	r28, 0x3f	; 63

                /* print file contents */
                uint8_t buffer[8];
                uint32_t offset = 0;
                intptr_t count;
                while((count = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
    2aee:	48 e0       	ldi	r20, 0x08	; 8
    2af0:	50 e0       	ldi	r21, 0x00	; 0
    2af2:	6b 2d       	mov	r22, r11
    2af4:	72 2d       	mov	r23, r2
    2af6:	c4 01       	movw	r24, r8
    2af8:	0e 94 83 09 	call	0x1306	; 0x1306 <fat_read_file>
    2afc:	7c 01       	movw	r14, r24
    2afe:	18 16       	cp	r1, r24
    2b00:	19 06       	cpc	r1, r25
    2b02:	4c f2       	brlt	.-110    	; 0x2a96 <main+0x320>
    2b04:	cf 57       	subi	r28, 0x7F	; 127
    2b06:	df 4f       	sbci	r29, 0xFF	; 255
    2b08:	98 80       	ld	r9, Y
    2b0a:	c1 58       	subi	r28, 0x81	; 129
    2b0c:	d0 40       	sbci	r29, 0x00	; 0
                    }
                    uart_putc('\n');
                    offset += 8;
                }

                fat_close_file(fd);
    2b0e:	ef 96       	adiw	r28, 0x3f	; 63
    2b10:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b12:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b14:	ef 97       	sbiw	r28, 0x3f	; 63
    2b16:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fat_close_file>
    2b1a:	e3 ce       	rjmp	.-570    	; 0x28e2 <main+0x16c>
            }
            else if(strcmp_P(command, PSTR("disk")) == 0)
    2b1c:	65 ee       	ldi	r22, 0xE5	; 229
    2b1e:	71 e0       	ldi	r23, 0x01	; 1
    2b20:	89 2d       	mov	r24, r9
    2b22:	9a 2d       	mov	r25, r10
    2b24:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <strcmp_P>
    2b28:	89 2b       	or	r24, r25
    2b2a:	69 f4       	brne	.+26     	; 0x2b46 <main+0x3d0>
            {
                if(!print_disk_info(fs))
    2b2c:	e3 96       	adiw	r28, 0x33	; 51
    2b2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b30:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b32:	e3 97       	sbiw	r28, 0x33	; 51
    2b34:	0e 94 90 12 	call	0x2520	; 0x2520 <print_disk_info>
    2b38:	81 11       	cpse	r24, r1
    2b3a:	d3 ce       	rjmp	.-602    	; 0x28e2 <main+0x16c>
                    uart_puts_p(PSTR("error reading disk info\n"));
    2b3c:	8c ec       	ldi	r24, 0xCC	; 204
    2b3e:	91 e0       	ldi	r25, 0x01	; 1
    2b40:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
    2b44:	ce ce       	rjmp	.-612    	; 0x28e2 <main+0x16c>
            }
#if FAT_WRITE_SUPPORT
            else if(strncmp_P(command, PSTR("rm "), 3) == 0)
    2b46:	43 e0       	ldi	r20, 0x03	; 3
    2b48:	50 e0       	ldi	r21, 0x00	; 0
    2b4a:	68 ec       	ldi	r22, 0xC8	; 200
    2b4c:	71 e0       	ldi	r23, 0x01	; 1
    2b4e:	89 2d       	mov	r24, r9
    2b50:	9a 2d       	mov	r25, r10
    2b52:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <strncmp_P>
    2b56:	89 2b       	or	r24, r25
    2b58:	81 f5       	brne	.+96     	; 0x2bba <main+0x444>
            {
                command += 3;
                if(command[0] == '\0')
    2b5a:	6b 96       	adiw	r28, 0x1b	; 27
    2b5c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b5e:	6b 97       	sbiw	r28, 0x1b	; 27
    2b60:	88 23       	and	r24, r24
    2b62:	09 f4       	brne	.+2      	; 0x2b66 <main+0x3f0>
    2b64:	be ce       	rjmp	.-644    	; 0x28e2 <main+0x16c>
                    continue;
                
                struct fat_dir_entry_struct file_entry;
                if(find_file_in_dir(fs, dd, command, &file_entry))
    2b66:	2b 2d       	mov	r18, r11
    2b68:	32 2d       	mov	r19, r2
    2b6a:	e9 96       	adiw	r28, 0x39	; 57
    2b6c:	4e ad       	ldd	r20, Y+62	; 0x3e
    2b6e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2b70:	e9 97       	sbiw	r28, 0x39	; 57
    2b72:	e5 96       	adiw	r28, 0x35	; 53
    2b74:	6e ad       	ldd	r22, Y+62	; 0x3e
    2b76:	7f ad       	ldd	r23, Y+63	; 0x3f
    2b78:	e5 97       	sbiw	r28, 0x35	; 53
    2b7a:	e3 96       	adiw	r28, 0x33	; 51
    2b7c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b80:	e3 97       	sbiw	r28, 0x33	; 51
    2b82:	0e 94 53 13 	call	0x26a6	; 0x26a6 <find_file_in_dir>
    2b86:	88 23       	and	r24, r24
    2b88:	51 f0       	breq	.+20     	; 0x2b9e <main+0x428>
                {
                    if(fat_delete_file(fs, &file_entry))
    2b8a:	6b 2d       	mov	r22, r11
    2b8c:	72 2d       	mov	r23, r2
    2b8e:	e3 96       	adiw	r28, 0x33	; 51
    2b90:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b92:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b94:	e3 97       	sbiw	r28, 0x33	; 51
    2b96:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <fat_delete_file>
    2b9a:	81 11       	cpse	r24, r1
    2b9c:	a2 ce       	rjmp	.-700    	; 0x28e2 <main+0x16c>
                        continue;
                }

                uart_puts_p(PSTR("error deleting file: "));
    2b9e:	82 eb       	ldi	r24, 0xB2	; 178
    2ba0:	91 e0       	ldi	r25, 0x01	; 1
    2ba2:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
                uart_puts(command);
    2ba6:	e9 96       	adiw	r28, 0x39	; 57
    2ba8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2baa:	9f ad       	ldd	r25, Y+63	; 0x3f
    2bac:	e9 97       	sbiw	r28, 0x39	; 57
    2bae:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <uart_puts>
                uart_putc('\n');
    2bb2:	8a e0       	ldi	r24, 0x0A	; 10
    2bb4:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    2bb8:	94 ce       	rjmp	.-728    	; 0x28e2 <main+0x16c>
            }
            else if(strncmp_P(command, PSTR("touch "), 6) == 0)
    2bba:	46 e0       	ldi	r20, 0x06	; 6
    2bbc:	50 e0       	ldi	r21, 0x00	; 0
    2bbe:	6b ea       	ldi	r22, 0xAB	; 171
    2bc0:	71 e0       	ldi	r23, 0x01	; 1
    2bc2:	89 2d       	mov	r24, r9
    2bc4:	9a 2d       	mov	r25, r10
    2bc6:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <strncmp_P>
    2bca:	89 2b       	or	r24, r25
    2bcc:	11 f5       	brne	.+68     	; 0x2c12 <main+0x49c>
            {
                command += 6;
                if(command[0] == '\0')
    2bce:	6e 96       	adiw	r28, 0x1e	; 30
    2bd0:	8f ad       	ldd	r24, Y+63	; 0x3f
    2bd2:	6e 97       	sbiw	r28, 0x1e	; 30
    2bd4:	88 23       	and	r24, r24
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <main+0x464>
    2bd8:	84 ce       	rjmp	.-760    	; 0x28e2 <main+0x16c>
                    continue;

                struct fat_dir_entry_struct file_entry;
                if(!fat_create_file(dd, command, &file_entry))
    2bda:	4b 2d       	mov	r20, r11
    2bdc:	52 2d       	mov	r21, r2
    2bde:	eb 96       	adiw	r28, 0x3b	; 59
    2be0:	6e ad       	ldd	r22, Y+62	; 0x3e
    2be2:	7f ad       	ldd	r23, Y+63	; 0x3f
    2be4:	eb 97       	sbiw	r28, 0x3b	; 59
    2be6:	e5 96       	adiw	r28, 0x35	; 53
    2be8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2bea:	9f ad       	ldd	r25, Y+63	; 0x3f
    2bec:	e5 97       	sbiw	r28, 0x35	; 53
    2bee:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <fat_create_file>
    2bf2:	81 11       	cpse	r24, r1
    2bf4:	76 ce       	rjmp	.-788    	; 0x28e2 <main+0x16c>
                {
                    uart_puts_p(PSTR("error creating file: "));
    2bf6:	85 e9       	ldi	r24, 0x95	; 149
    2bf8:	91 e0       	ldi	r25, 0x01	; 1
    2bfa:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
                    uart_puts(command);
    2bfe:	eb 96       	adiw	r28, 0x3b	; 59
    2c00:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c02:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c04:	eb 97       	sbiw	r28, 0x3b	; 59
    2c06:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <uart_puts>
                    uart_putc('\n');
    2c0a:	8a e0       	ldi	r24, 0x0A	; 10
    2c0c:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    2c10:	68 ce       	rjmp	.-816    	; 0x28e2 <main+0x16c>
                }
            }
            else if(strncmp_P(command, PSTR("mv "), 3) == 0)
    2c12:	43 e0       	ldi	r20, 0x03	; 3
    2c14:	50 e0       	ldi	r21, 0x00	; 0
    2c16:	61 e9       	ldi	r22, 0x91	; 145
    2c18:	71 e0       	ldi	r23, 0x01	; 1
    2c1a:	89 2d       	mov	r24, r9
    2c1c:	9a 2d       	mov	r25, r10
    2c1e:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <strncmp_P>
    2c22:	89 2b       	or	r24, r25
    2c24:	a1 f5       	brne	.+104    	; 0x2c8e <main+0x518>
            {
                command += 3;
                if(command[0] == '\0')
    2c26:	6b 96       	adiw	r28, 0x1b	; 27
    2c28:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c2a:	6b 97       	sbiw	r28, 0x1b	; 27
    2c2c:	88 23       	and	r24, r24
    2c2e:	09 f4       	brne	.+2      	; 0x2c32 <main+0x4bc>
    2c30:	58 ce       	rjmp	.-848    	; 0x28e2 <main+0x16c>
                    continue;

                char* target = command;
                while(*target != ' ' && *target != '\0')
    2c32:	80 32       	cpi	r24, 0x20	; 32
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <main+0x4c2>
    2c36:	38 c1       	rjmp	.+624    	; 0x2ea8 <main+0x732>
    2c38:	ed 96       	adiw	r28, 0x3d	; 61
    2c3a:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c3c:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c3e:	ed 97       	sbiw	r28, 0x3d	; 61
                    ++target;
    2c40:	8f 01       	movw	r16, r30
                command += 3;
                if(command[0] == '\0')
                    continue;

                char* target = command;
                while(*target != ' ' && *target != '\0')
    2c42:	81 91       	ld	r24, Z+
    2c44:	80 32       	cpi	r24, 0x20	; 32
    2c46:	09 f4       	brne	.+2      	; 0x2c4a <main+0x4d4>
    2c48:	33 c1       	rjmp	.+614    	; 0x2eb0 <main+0x73a>
    2c4a:	81 11       	cpse	r24, r1
    2c4c:	f9 cf       	rjmp	.-14     	; 0x2c40 <main+0x4ca>
    2c4e:	49 ce       	rjmp	.-878    	; 0x28e2 <main+0x16c>
                    ++target;

                if(*target == ' ')
                    *target++ = '\0';
    2c50:	98 01       	movw	r18, r16
    2c52:	2f 5f       	subi	r18, 0xFF	; 255
    2c54:	3f 4f       	sbci	r19, 0xFF	; 255
                    continue;

                struct fat_dir_entry_struct file_entry;
                if(find_file_in_dir(fs, dd, command, &file_entry))
                {
                    if(fat_move_file(fs, &file_entry, dd, target))
    2c56:	e5 96       	adiw	r28, 0x35	; 53
    2c58:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c5a:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c5c:	e5 97       	sbiw	r28, 0x35	; 53
    2c5e:	6b 2d       	mov	r22, r11
    2c60:	72 2d       	mov	r23, r2
    2c62:	e3 96       	adiw	r28, 0x33	; 51
    2c64:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c66:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c68:	e3 97       	sbiw	r28, 0x33	; 51
    2c6a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fat_move_file>
    2c6e:	81 11       	cpse	r24, r1
    2c70:	38 ce       	rjmp	.-912    	; 0x28e2 <main+0x16c>
                        continue;
                }

                uart_puts_p(PSTR("error moving file: "));
    2c72:	8d e7       	ldi	r24, 0x7D	; 125
    2c74:	91 e0       	ldi	r25, 0x01	; 1
    2c76:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
                uart_puts(command);
    2c7a:	e9 96       	adiw	r28, 0x39	; 57
    2c7c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c80:	e9 97       	sbiw	r28, 0x39	; 57
    2c82:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <uart_puts>
                uart_putc('\n');
    2c86:	8a e0       	ldi	r24, 0x0A	; 10
    2c88:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    2c8c:	2a ce       	rjmp	.-940    	; 0x28e2 <main+0x16c>
            }
            else if(strncmp_P(command, PSTR("write "), 6) == 0)
    2c8e:	46 e0       	ldi	r20, 0x06	; 6
    2c90:	50 e0       	ldi	r21, 0x00	; 0
    2c92:	66 e7       	ldi	r22, 0x76	; 118
    2c94:	71 e0       	ldi	r23, 0x01	; 1
    2c96:	89 2d       	mov	r24, r9
    2c98:	9a 2d       	mov	r25, r10
    2c9a:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <strncmp_P>
    2c9e:	89 2b       	or	r24, r25
    2ca0:	09 f0       	breq	.+2      	; 0x2ca4 <main+0x52e>
    2ca2:	a6 c0       	rjmp	.+332    	; 0x2df0 <main+0x67a>
            {
                command += 6;
                if(command[0] == '\0')
    2ca4:	6e 96       	adiw	r28, 0x1e	; 30
    2ca6:	8f ad       	ldd	r24, Y+63	; 0x3f
    2ca8:	6e 97       	sbiw	r28, 0x1e	; 30
    2caa:	88 23       	and	r24, r24
    2cac:	09 f4       	brne	.+2      	; 0x2cb0 <main+0x53a>
    2cae:	19 ce       	rjmp	.-974    	; 0x28e2 <main+0x16c>
                    continue;

                char* offset_value = command;
                while(*offset_value != ' ' && *offset_value != '\0')
    2cb0:	80 32       	cpi	r24, 0x20	; 32
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <main+0x540>
    2cb4:	12 c1       	rjmp	.+548    	; 0x2eda <main+0x764>
    2cb6:	c1 58       	subi	r28, 0x81	; 129
    2cb8:	df 4f       	sbci	r29, 0xFF	; 255
    2cba:	e8 81       	ld	r30, Y
    2cbc:	f9 81       	ldd	r31, Y+1	; 0x01
    2cbe:	cf 57       	subi	r28, 0x7F	; 127
    2cc0:	d0 40       	sbci	r29, 0x00	; 0
                    ++offset_value;
    2cc2:	8f 01       	movw	r16, r30
                command += 6;
                if(command[0] == '\0')
                    continue;

                char* offset_value = command;
                while(*offset_value != ' ' && *offset_value != '\0')
    2cc4:	81 91       	ld	r24, Z+
    2cc6:	80 32       	cpi	r24, 0x20	; 32
    2cc8:	09 f4       	brne	.+2      	; 0x2ccc <main+0x556>
    2cca:	0b c1       	rjmp	.+534    	; 0x2ee2 <main+0x76c>
    2ccc:	81 11       	cpse	r24, r1
    2cce:	f9 cf       	rjmp	.-14     	; 0x2cc2 <main+0x54c>
    2cd0:	08 ce       	rjmp	.-1008   	; 0x28e2 <main+0x16c>
{
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
        return 0;

    return fat_open_file(fs, &file_entry);
    2cd2:	6b 2d       	mov	r22, r11
    2cd4:	72 2d       	mov	r23, r2
    2cd6:	e3 96       	adiw	r28, 0x33	; 51
    2cd8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2cda:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cdc:	e3 97       	sbiw	r28, 0x33	; 51
    2cde:	0e 94 48 09 	call	0x1290	; 0x1290 <fat_open_file>
    2ce2:	7c 01       	movw	r14, r24
                else
                    continue;

                /* search file in current directory and open it */
                struct fat_file_struct* fd = open_file_in_dir(fs, dd, command);
                if(!fd)
    2ce4:	89 2b       	or	r24, r25
    2ce6:	59 f0       	breq	.+22     	; 0x2cfe <main+0x588>
}

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
    2ce8:	f8 01       	movw	r30, r16
    2cea:	41 81       	ldd	r20, Z+1	; 0x01
    2cec:	80 ed       	ldi	r24, 0xD0	; 208
    2cee:	84 0f       	add	r24, r20
    2cf0:	8a 30       	cpi	r24, 0x0A	; 10
    2cf2:	98 f0       	brcs	.+38     	; 0x2d1a <main+0x5a4>
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	a0 e0       	ldi	r26, 0x00	; 0
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	3c c0       	rjmp	.+120    	; 0x2d76 <main+0x600>

                /* search file in current directory and open it */
                struct fat_file_struct* fd = open_file_in_dir(fs, dd, command);
                if(!fd)
                {
                    uart_puts_p(PSTR("error opening "));
    2cfe:	87 e6       	ldi	r24, 0x67	; 103
    2d00:	91 e0       	ldi	r25, 0x01	; 1
    2d02:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
                    uart_puts(command);
    2d06:	eb 96       	adiw	r28, 0x3b	; 59
    2d08:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d0c:	eb 97       	sbiw	r28, 0x3b	; 59
    2d0e:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <uart_puts>
                    uart_putc('\n');
    2d12:	8a e0       	ldi	r24, 0x0A	; 10
    2d14:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
                    continue;
    2d18:	e4 cd       	rjmp	.-1080   	; 0x28e2 <main+0x16c>
    2d1a:	f8 01       	movw	r30, r16
    2d1c:	32 96       	adiw	r30, 0x02	; 2
}

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	a0 e0       	ldi	r26, 0x00	; 0
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	24 2f       	mov	r18, r20
    2d28:	ac 01       	movw	r20, r24
    2d2a:	bd 01       	movw	r22, r26
        l = l * 10 + (*str++ - '0');
    2d2c:	44 0f       	add	r20, r20
    2d2e:	55 1f       	adc	r21, r21
    2d30:	66 1f       	adc	r22, r22
    2d32:	77 1f       	adc	r23, r23
    2d34:	db 01       	movw	r26, r22
    2d36:	ca 01       	movw	r24, r20
    2d38:	88 0f       	add	r24, r24
    2d3a:	99 1f       	adc	r25, r25
    2d3c:	aa 1f       	adc	r26, r26
    2d3e:	bb 1f       	adc	r27, r27
    2d40:	88 0f       	add	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	aa 1f       	adc	r26, r26
    2d46:	bb 1f       	adc	r27, r27
    2d48:	84 0f       	add	r24, r20
    2d4a:	95 1f       	adc	r25, r21
    2d4c:	a6 1f       	adc	r26, r22
    2d4e:	b7 1f       	adc	r27, r23
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	a9 01       	movw	r20, r18
    2d54:	40 53       	subi	r20, 0x30	; 48
    2d56:	51 09       	sbc	r21, r1
    2d58:	05 2e       	mov	r0, r21
    2d5a:	00 0c       	add	r0, r0
    2d5c:	66 0b       	sbc	r22, r22
    2d5e:	77 0b       	sbc	r23, r23
    2d60:	48 0f       	add	r20, r24
    2d62:	59 1f       	adc	r21, r25
    2d64:	6a 1f       	adc	r22, r26
    2d66:	7b 1f       	adc	r23, r27
}

uint32_t strtolong(const char* str)
{
    uint32_t l = 0;
    while(*str >= '0' && *str <= '9')
    2d68:	21 91       	ld	r18, Z+
    2d6a:	80 ed       	ldi	r24, 0xD0	; 208
    2d6c:	82 0f       	add	r24, r18
    2d6e:	8a 30       	cpi	r24, 0x0A	; 10
    2d70:	e8 f2       	brcs	.-70     	; 0x2d2c <main+0x5b6>
    2d72:	db 01       	movw	r26, r22
    2d74:	ca 01       	movw	r24, r20
                    uart_puts(command);
                    uart_putc('\n');
                    continue;
                }

                int32_t offset = strtolong(offset_value);
    2d76:	89 83       	std	Y+1, r24	; 0x01
    2d78:	9a 83       	std	Y+2, r25	; 0x02
    2d7a:	ab 83       	std	Y+3, r26	; 0x03
    2d7c:	bc 83       	std	Y+4, r27	; 0x04
                if(!fat_seek_file(fd, &offset, FAT_SEEK_SET))
    2d7e:	40 e0       	ldi	r20, 0x00	; 0
    2d80:	6b 2d       	mov	r22, r11
    2d82:	72 2d       	mov	r23, r2
    2d84:	c7 01       	movw	r24, r14
    2d86:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <fat_seek_file>
    2d8a:	81 11       	cpse	r24, r1
    2d8c:	11 c0       	rjmp	.+34     	; 0x2db0 <main+0x63a>
                {
                    uart_puts_p(PSTR("error seeking on "));
    2d8e:	85 e5       	ldi	r24, 0x55	; 85
    2d90:	91 e0       	ldi	r25, 0x01	; 1
    2d92:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
                    uart_puts(command);
    2d96:	eb 96       	adiw	r28, 0x3b	; 59
    2d98:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d9c:	eb 97       	sbiw	r28, 0x3b	; 59
    2d9e:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <uart_puts>
                    uart_putc('\n');
    2da2:	8a e0       	ldi	r24, 0x0A	; 10
    2da4:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>

                    fat_close_file(fd);
    2da8:	c7 01       	movw	r24, r14
    2daa:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fat_close_file>
                    continue;
    2dae:	99 cd       	rjmp	.-1230   	; 0x28e2 <main+0x16c>
                /* read text from the shell and write it to the file */
                uint8_t data_len;
                while(1)
                {
                    /* give a different prompt */
                    uart_putc('<');
    2db0:	8c e3       	ldi	r24, 0x3C	; 60
    2db2:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
                    uart_putc(' ');
    2db6:	80 e2       	ldi	r24, 0x20	; 32
    2db8:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>

                    /* read one line of text */
                    data_len = read_line(buffer, sizeof(buffer));
    2dbc:	68 e1       	ldi	r22, 0x18	; 24
    2dbe:	89 2d       	mov	r24, r9
    2dc0:	9a 2d       	mov	r25, r10
    2dc2:	0e 94 75 13 	call	0x26ea	; 0x26ea <read_line>
                    if(!data_len)
    2dc6:	88 23       	and	r24, r24
    2dc8:	79 f0       	breq	.+30     	; 0x2de8 <main+0x672>
                        break;

                    /* write text to file */
                    if(fat_write_file(fd, (uint8_t*) buffer, data_len) != data_len)
    2dca:	08 2f       	mov	r16, r24
    2dcc:	10 e0       	ldi	r17, 0x00	; 0
    2dce:	a8 01       	movw	r20, r16
    2dd0:	69 2d       	mov	r22, r9
    2dd2:	7a 2d       	mov	r23, r10
    2dd4:	c7 01       	movw	r24, r14
    2dd6:	0e 94 a7 0a 	call	0x154e	; 0x154e <fat_write_file>
    2dda:	80 17       	cp	r24, r16
    2ddc:	91 07       	cpc	r25, r17
    2dde:	41 f3       	breq	.-48     	; 0x2db0 <main+0x63a>
                    {
                        uart_puts_p(PSTR("error writing to file\n"));
    2de0:	8e e3       	ldi	r24, 0x3E	; 62
    2de2:	91 e0       	ldi	r25, 0x01	; 1
    2de4:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
                        break;
                    }
                }

                fat_close_file(fd);
    2de8:	c7 01       	movw	r24, r14
    2dea:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fat_close_file>
    2dee:	79 cd       	rjmp	.-1294   	; 0x28e2 <main+0x16c>
            }
            else if(strncmp_P(command, PSTR("mkdir "), 6) == 0)
    2df0:	46 e0       	ldi	r20, 0x06	; 6
    2df2:	50 e0       	ldi	r21, 0x00	; 0
    2df4:	67 e3       	ldi	r22, 0x37	; 55
    2df6:	71 e0       	ldi	r23, 0x01	; 1
    2df8:	89 2d       	mov	r24, r9
    2dfa:	9a 2d       	mov	r25, r10
    2dfc:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <strncmp_P>
    2e00:	89 2b       	or	r24, r25
    2e02:	11 f5       	brne	.+68     	; 0x2e48 <main+0x6d2>
            {
                command += 6;
                if(command[0] == '\0')
    2e04:	6e 96       	adiw	r28, 0x1e	; 30
    2e06:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e08:	6e 97       	sbiw	r28, 0x1e	; 30
    2e0a:	88 23       	and	r24, r24
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <main+0x69a>
    2e0e:	69 cd       	rjmp	.-1326   	; 0x28e2 <main+0x16c>
                    continue;

                struct fat_dir_entry_struct dir_entry;
                if(!fat_create_dir(dd, command, &dir_entry))
    2e10:	4b 2d       	mov	r20, r11
    2e12:	52 2d       	mov	r21, r2
    2e14:	eb 96       	adiw	r28, 0x3b	; 59
    2e16:	6e ad       	ldd	r22, Y+62	; 0x3e
    2e18:	7f ad       	ldd	r23, Y+63	; 0x3f
    2e1a:	eb 97       	sbiw	r28, 0x3b	; 59
    2e1c:	e5 96       	adiw	r28, 0x35	; 53
    2e1e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e20:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e22:	e5 97       	sbiw	r28, 0x35	; 53
    2e24:	0e 94 09 11 	call	0x2212	; 0x2212 <fat_create_dir>
    2e28:	81 11       	cpse	r24, r1
    2e2a:	5b cd       	rjmp	.-1354   	; 0x28e2 <main+0x16c>
                {
                    uart_puts_p(PSTR("error creating directory: "));
    2e2c:	8c e1       	ldi	r24, 0x1C	; 28
    2e2e:	91 e0       	ldi	r25, 0x01	; 1
    2e30:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
                    uart_puts(command);
    2e34:	eb 96       	adiw	r28, 0x3b	; 59
    2e36:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e38:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e3a:	eb 97       	sbiw	r28, 0x3b	; 59
    2e3c:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <uart_puts>
                    uart_putc('\n');
    2e40:	8a e0       	ldi	r24, 0x0A	; 10
    2e42:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    2e46:	4d cd       	rjmp	.-1382   	; 0x28e2 <main+0x16c>
                }
            }
#endif
#if SD_RAW_WRITE_BUFFERING
            else if(strcmp_P(command, PSTR("sync")) == 0)
    2e48:	67 e1       	ldi	r22, 0x17	; 23
    2e4a:	71 e0       	ldi	r23, 0x01	; 1
    2e4c:	89 2d       	mov	r24, r9
    2e4e:	9a 2d       	mov	r25, r10
    2e50:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <strcmp_P>
    2e54:	89 2b       	or	r24, r25
    2e56:	49 f4       	brne	.+18     	; 0x2e6a <main+0x6f4>
            {
                if(!sd_raw_sync())
    2e58:	0e 94 80 18 	call	0x3100	; 0x3100 <sd_raw_sync>
    2e5c:	81 11       	cpse	r24, r1
    2e5e:	41 cd       	rjmp	.-1406   	; 0x28e2 <main+0x16c>
                    uart_puts_p(PSTR("error syncing disk\n"));
    2e60:	83 e0       	ldi	r24, 0x03	; 3
    2e62:	91 e0       	ldi	r25, 0x01	; 1
    2e64:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
    2e68:	3c cd       	rjmp	.-1416   	; 0x28e2 <main+0x16c>
            }
#endif
            else
            {
                uart_puts_p(PSTR("unknown command: "));
    2e6a:	81 ef       	ldi	r24, 0xF1	; 241
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <uart_puts_p>
                uart_puts(command);
    2e72:	89 2d       	mov	r24, r9
    2e74:	9a 2d       	mov	r25, r10
    2e76:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <uart_puts>
                uart_putc('\n');
    2e7a:	8a e0       	ldi	r24, 0x0A	; 10
    2e7c:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    2e80:	30 cd       	rjmp	.-1440   	; 0x28e2 <main+0x16c>
            }
        }

        /* close directory */
        fat_close_dir(dd);
    2e82:	e5 96       	adiw	r28, 0x35	; 53
    2e84:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e86:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e88:	e5 97       	sbiw	r28, 0x35	; 53
    2e8a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <fat_close_dir>

        /* close file system */
        fat_close(fs);
    2e8e:	e3 96       	adiw	r28, 0x33	; 51
    2e90:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e92:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e94:	e3 97       	sbiw	r28, 0x33	; 51
    2e96:	0e 94 42 09 	call	0x1284	; 0x1284 <fat_close>

        /* close partition */
        partition_close(partition);
    2e9a:	e7 96       	adiw	r28, 0x37	; 55
    2e9c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ea0:	e7 97       	sbiw	r28, 0x37	; 55
    2ea2:	0e 94 2a 18 	call	0x3054	; 0x3054 <partition_close>
    2ea6:	a0 cc       	rjmp	.-1728   	; 0x27e8 <main+0x72>
                command += 3;
                if(command[0] == '\0')
                    continue;

                char* target = command;
                while(*target != ' ' && *target != '\0')
    2ea8:	e9 96       	adiw	r28, 0x39	; 57
    2eaa:	0e ad       	ldd	r16, Y+62	; 0x3e
    2eac:	1f ad       	ldd	r17, Y+63	; 0x3f
    2eae:	e9 97       	sbiw	r28, 0x39	; 57
                    ++target;

                if(*target == ' ')
                    *target++ = '\0';
    2eb0:	f8 01       	movw	r30, r16
    2eb2:	10 82       	st	Z, r1
                else
                    continue;

                struct fat_dir_entry_struct file_entry;
                if(find_file_in_dir(fs, dd, command, &file_entry))
    2eb4:	2b 2d       	mov	r18, r11
    2eb6:	32 2d       	mov	r19, r2
    2eb8:	e9 96       	adiw	r28, 0x39	; 57
    2eba:	4e ad       	ldd	r20, Y+62	; 0x3e
    2ebc:	5f ad       	ldd	r21, Y+63	; 0x3f
    2ebe:	e9 97       	sbiw	r28, 0x39	; 57
    2ec0:	e5 96       	adiw	r28, 0x35	; 53
    2ec2:	6e ad       	ldd	r22, Y+62	; 0x3e
    2ec4:	7f ad       	ldd	r23, Y+63	; 0x3f
    2ec6:	e5 97       	sbiw	r28, 0x35	; 53
    2ec8:	e3 96       	adiw	r28, 0x33	; 51
    2eca:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ecc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ece:	e3 97       	sbiw	r28, 0x33	; 51
    2ed0:	0e 94 53 13 	call	0x26a6	; 0x26a6 <find_file_in_dir>
    2ed4:	81 11       	cpse	r24, r1
    2ed6:	bc ce       	rjmp	.-648    	; 0x2c50 <main+0x4da>
    2ed8:	cc ce       	rjmp	.-616    	; 0x2c72 <main+0x4fc>
                command += 6;
                if(command[0] == '\0')
                    continue;

                char* offset_value = command;
                while(*offset_value != ' ' && *offset_value != '\0')
    2eda:	eb 96       	adiw	r28, 0x3b	; 59
    2edc:	0e ad       	ldd	r16, Y+62	; 0x3e
    2ede:	1f ad       	ldd	r17, Y+63	; 0x3f
    2ee0:	eb 97       	sbiw	r28, 0x3b	; 59
                    ++offset_value;

                if(*offset_value == ' ')
                    *offset_value++ = '\0';
    2ee2:	f8 01       	movw	r30, r16
    2ee4:	10 82       	st	Z, r1
}

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
    2ee6:	2b 2d       	mov	r18, r11
    2ee8:	32 2d       	mov	r19, r2
    2eea:	eb 96       	adiw	r28, 0x3b	; 59
    2eec:	4e ad       	ldd	r20, Y+62	; 0x3e
    2eee:	5f ad       	ldd	r21, Y+63	; 0x3f
    2ef0:	eb 97       	sbiw	r28, 0x3b	; 59
    2ef2:	e5 96       	adiw	r28, 0x35	; 53
    2ef4:	6e ad       	ldd	r22, Y+62	; 0x3e
    2ef6:	7f ad       	ldd	r23, Y+63	; 0x3f
    2ef8:	e5 97       	sbiw	r28, 0x35	; 53
    2efa:	e3 96       	adiw	r28, 0x33	; 51
    2efc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2efe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f00:	e3 97       	sbiw	r28, 0x33	; 51
    2f02:	0e 94 53 13 	call	0x26a6	; 0x26a6 <find_file_in_dir>
    2f06:	81 11       	cpse	r24, r1
    2f08:	e4 ce       	rjmp	.-568    	; 0x2cd2 <main+0x55c>
    2f0a:	f9 ce       	rjmp	.-526    	; 0x2cfe <main+0x588>

00002f0c <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    2f0c:	8f 92       	push	r8
    2f0e:	9f 92       	push	r9
    2f10:	af 92       	push	r10
    2f12:	bf 92       	push	r11
    2f14:	cf 92       	push	r12
    2f16:	df 92       	push	r13
    2f18:	ef 92       	push	r14
    2f1a:	ff 92       	push	r15
    2f1c:	0f 93       	push	r16
    2f1e:	1f 93       	push	r17
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	60 97       	sbiw	r28, 0x10	; 16
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	f8 94       	cli
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	cd bf       	out	0x3d, r28	; 61
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	31 f1       	breq	.+76     	; 0x2f84 <partition_open+0x78>
    2f38:	61 15       	cp	r22, r1
    2f3a:	71 05       	cpc	r23, r1
    2f3c:	31 f1       	breq	.+76     	; 0x2f8a <partition_open+0x7e>
    2f3e:	04 30       	cpi	r16, 0x04	; 4
    2f40:	3c f5       	brge	.+78     	; 0x2f90 <partition_open+0x84>
        return 0;

    if(index >= 0)
    2f42:	00 23       	and	r16, r16
    2f44:	0c f4       	brge	.+2      	; 0x2f48 <partition_open+0x3c>
    2f46:	6d c0       	rjmp	.+218    	; 0x3022 <partition_open+0x116>
    2f48:	49 01       	movw	r8, r18
    2f4a:	5a 01       	movw	r10, r20
    2f4c:	6b 01       	movw	r12, r22
    2f4e:	7c 01       	movw	r14, r24
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    2f50:	80 e1       	ldi	r24, 0x10	; 16
    2f52:	08 02       	muls	r16, r24
    2f54:	b0 01       	movw	r22, r0
    2f56:	11 24       	eor	r1, r1
    2f58:	62 54       	subi	r22, 0x42	; 66
    2f5a:	7e 4f       	sbci	r23, 0xFE	; 254
    2f5c:	07 2e       	mov	r0, r23
    2f5e:	00 0c       	add	r0, r0
    2f60:	88 0b       	sbc	r24, r24
    2f62:	99 0b       	sbc	r25, r25
    2f64:	20 e1       	ldi	r18, 0x10	; 16
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	ae 01       	movw	r20, r28
    2f6a:	4f 5f       	subi	r20, 0xFF	; 255
    2f6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f6e:	f7 01       	movw	r30, r14
    2f70:	09 95       	icall
    2f72:	88 23       	and	r24, r24
    2f74:	81 f0       	breq	.+32     	; 0x2f96 <partition_open+0x8a>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    2f76:	8d 81       	ldd	r24, Y+5	; 0x05
    2f78:	81 11       	cpse	r24, r1
    2f7a:	3a c0       	rjmp	.+116    	; 0x2ff0 <partition_open+0xe4>
    2f7c:	0f c0       	rjmp	.+30     	; 0x2f9c <partition_open+0x90>
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    2f7e:	81 ec       	ldi	r24, 0xC1	; 193
    2f80:	91 e0       	ldi	r25, 0x01	; 1
    else
    {
        new_partition->type = 0xff;
    }

    return new_partition;
    2f82:	55 c0       	rjmp	.+170    	; 0x302e <partition_open+0x122>
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
        return 0;
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	52 c0       	rjmp	.+164    	; 0x302e <partition_open+0x122>
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	4f c0       	rjmp	.+158    	; 0x302e <partition_open+0x122>
    2f90:	80 e0       	ldi	r24, 0x00	; 0
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	4c c0       	rjmp	.+152    	; 0x302e <partition_open+0x122>

    if(index >= 0)
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
            return 0;
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	49 c0       	rjmp	.+146    	; 0x302e <partition_open+0x122>

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
            return 0;
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	46 c0       	rjmp	.+140    	; 0x302e <partition_open+0x122>
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    2fa2:	01 ec       	ldi	r16, 0xC1	; 193
    2fa4:	11 e0       	ldi	r17, 0x01	; 1
    2fa6:	81 e1       	ldi	r24, 0x11	; 17
    2fa8:	d8 01       	movw	r26, r16
    2faa:	1d 92       	st	X+, r1
    2fac:	8a 95       	dec	r24
    2fae:	e9 f7       	brne	.-6      	; 0x2faa <partition_open+0x9e>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    2fb0:	f8 01       	movw	r30, r16
    2fb2:	f1 82       	std	Z+1, r15	; 0x01
    2fb4:	e0 82       	st	Z, r14
    new_partition->device_read_interval = device_read_interval;
    2fb6:	d3 82       	std	Z+3, r13	; 0x03
    2fb8:	c2 82       	std	Z+2, r12	; 0x02
    new_partition->device_write = device_write;
    2fba:	b5 82       	std	Z+5, r11	; 0x05
    2fbc:	a4 82       	std	Z+4, r10	; 0x04
    new_partition->device_write_interval = device_write_interval;
    2fbe:	97 82       	std	Z+7, r9	; 0x07
    2fc0:	86 82       	std	Z+6, r8	; 0x06

    if(index >= 0)
    {
        new_partition->type = buffer[4];
    2fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc4:	80 87       	std	Z+8, r24	; 0x08
        new_partition->offset = read32(&buffer[8]);
    2fc6:	ce 01       	movw	r24, r28
    2fc8:	09 96       	adiw	r24, 0x09	; 9
    2fca:	0e 94 77 01 	call	0x2ee	; 0x2ee <read32>
    2fce:	d8 01       	movw	r26, r16
    2fd0:	19 96       	adiw	r26, 0x09	; 9
    2fd2:	6d 93       	st	X+, r22
    2fd4:	7d 93       	st	X+, r23
    2fd6:	8d 93       	st	X+, r24
    2fd8:	9c 93       	st	X, r25
    2fda:	1c 97       	sbiw	r26, 0x0c	; 12
        new_partition->length = read32(&buffer[12]);
    2fdc:	ce 01       	movw	r24, r28
    2fde:	0d 96       	adiw	r24, 0x0d	; 13
    2fe0:	0e 94 77 01 	call	0x2ee	; 0x2ee <read32>
    2fe4:	f8 01       	movw	r30, r16
    2fe6:	65 87       	std	Z+13, r22	; 0x0d
    2fe8:	76 87       	std	Z+14, r23	; 0x0e
    2fea:	87 87       	std	Z+15, r24	; 0x0f
    2fec:	90 8b       	std	Z+16, r25	; 0x10
    2fee:	c7 cf       	rjmp	.-114    	; 0x2f7e <partition_open+0x72>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    2ff0:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <partition_handles+0x8>
    2ff4:	88 23       	and	r24, r24
    2ff6:	a9 f2       	breq	.-86     	; 0x2fa2 <partition_open+0x96>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	18 c0       	rjmp	.+48     	; 0x302e <partition_open+0x122>
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    2ffe:	e1 ec       	ldi	r30, 0xC1	; 193
    3000:	f1 e0       	ldi	r31, 0x01	; 1
    3002:	11 e1       	ldi	r17, 0x11	; 17
    3004:	df 01       	movw	r26, r30
    3006:	1d 92       	st	X+, r1
    3008:	1a 95       	dec	r17
    300a:	e9 f7       	brne	.-6      	; 0x3006 <partition_open+0xfa>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    300c:	91 83       	std	Z+1, r25	; 0x01
    300e:	80 83       	st	Z, r24
    new_partition->device_read_interval = device_read_interval;
    3010:	73 83       	std	Z+3, r23	; 0x03
    3012:	62 83       	std	Z+2, r22	; 0x02
    new_partition->device_write = device_write;
    3014:	55 83       	std	Z+5, r21	; 0x05
    3016:	44 83       	std	Z+4, r20	; 0x04
    new_partition->device_write_interval = device_write_interval;
    3018:	37 83       	std	Z+7, r19	; 0x07
    301a:	26 83       	std	Z+6, r18	; 0x06
        new_partition->offset = read32(&buffer[8]);
        new_partition->length = read32(&buffer[12]);
    }
    else
    {
        new_partition->type = 0xff;
    301c:	8f ef       	ldi	r24, 0xFF	; 255
    301e:	80 87       	std	Z+8, r24	; 0x08
    3020:	ae cf       	rjmp	.-164    	; 0x2f7e <partition_open+0x72>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    3022:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <partition_handles+0x8>
    3026:	ee 23       	and	r30, r30
    3028:	51 f3       	breq	.-44     	; 0x2ffe <partition_open+0xf2>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	90 e0       	ldi	r25, 0x00	; 0
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
    302e:	60 96       	adiw	r28, 0x10	; 16
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	f8 94       	cli
    3034:	de bf       	out	0x3e, r29	; 62
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	cd bf       	out	0x3d, r28	; 61
    303a:	df 91       	pop	r29
    303c:	cf 91       	pop	r28
    303e:	1f 91       	pop	r17
    3040:	0f 91       	pop	r16
    3042:	ff 90       	pop	r15
    3044:	ef 90       	pop	r14
    3046:	df 90       	pop	r13
    3048:	cf 90       	pop	r12
    304a:	bf 90       	pop	r11
    304c:	af 90       	pop	r10
    304e:	9f 90       	pop	r9
    3050:	8f 90       	pop	r8
    3052:	08 95       	ret

00003054 <partition_close>:
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	21 f0       	breq	.+8      	; 0x3060 <partition_close+0xc>

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
    3058:	fc 01       	movw	r30, r24
    305a:	10 86       	std	Z+8, r1	; 0x08
#endif

    return 1;
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	08 95       	ret
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
        return 0;
    3060:	80 e0       	ldi	r24, 0x00	; 0
#else
    partition->type = PARTITION_TYPE_FREE;
#endif

    return 1;
}
    3062:	08 95       	ret

00003064 <sd_raw_send_byte>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
    3064:	8e bd       	out	0x2e, r24	; 46
    3066:	0d b4       	in	r0, 0x2d	; 45
    3068:	07 fe       	sbrs	r0, 7
    306a:	fd cf       	rjmp	.-6      	; 0x3066 <sd_raw_send_byte+0x2>
    306c:	8d b5       	in	r24, 0x2d	; 45
    306e:	8f 77       	andi	r24, 0x7F	; 127
    3070:	8d bd       	out	0x2d, r24	; 45
    3072:	08 95       	ret

00003074 <sd_raw_rec_byte>:
    3074:	8f ef       	ldi	r24, 0xFF	; 255
    3076:	8e bd       	out	0x2e, r24	; 46
    3078:	0d b4       	in	r0, 0x2d	; 45
    307a:	07 fe       	sbrs	r0, 7
    307c:	fd cf       	rjmp	.-6      	; 0x3078 <sd_raw_rec_byte+0x4>
    307e:	8d b5       	in	r24, 0x2d	; 45
    3080:	8f 77       	andi	r24, 0x7F	; 127
    3082:	8d bd       	out	0x2d, r24	; 45
    3084:	8e b5       	in	r24, 0x2e	; 46
    3086:	08 95       	ret

00003088 <sd_raw_send_command>:
    3088:	ff 92       	push	r15
    308a:	0f 93       	push	r16
    308c:	1f 93       	push	r17
    308e:	cf 93       	push	r28
    3090:	df 93       	push	r29
    3092:	c8 2f       	mov	r28, r24
    3094:	d4 2f       	mov	r29, r20
    3096:	15 2f       	mov	r17, r21
    3098:	06 2f       	mov	r16, r22
    309a:	f7 2e       	mov	r15, r23
    309c:	0e 94 3a 18 	call	0x3074	; 0x3074 <sd_raw_rec_byte>
    30a0:	8c 2f       	mov	r24, r28
    30a2:	80 64       	ori	r24, 0x40	; 64
    30a4:	0e 94 32 18 	call	0x3064	; 0x3064 <sd_raw_send_byte>
    30a8:	8f 2d       	mov	r24, r15
    30aa:	0e 94 32 18 	call	0x3064	; 0x3064 <sd_raw_send_byte>
    30ae:	80 2f       	mov	r24, r16
    30b0:	0e 94 32 18 	call	0x3064	; 0x3064 <sd_raw_send_byte>
    30b4:	81 2f       	mov	r24, r17
    30b6:	0e 94 32 18 	call	0x3064	; 0x3064 <sd_raw_send_byte>
    30ba:	8d 2f       	mov	r24, r29
    30bc:	0e 94 32 18 	call	0x3064	; 0x3064 <sd_raw_send_byte>
    30c0:	cc 23       	and	r28, r28
    30c2:	19 f0       	breq	.+6      	; 0x30ca <sd_raw_send_command+0x42>
    30c4:	c8 30       	cpi	r28, 0x08	; 8
    30c6:	29 f0       	breq	.+10     	; 0x30d2 <sd_raw_send_command+0x4a>
    30c8:	08 c0       	rjmp	.+16     	; 0x30da <sd_raw_send_command+0x52>
    30ca:	85 e9       	ldi	r24, 0x95	; 149
    30cc:	0e 94 32 18 	call	0x3064	; 0x3064 <sd_raw_send_byte>
    30d0:	0f c0       	rjmp	.+30     	; 0x30f0 <sd_raw_send_command+0x68>
    30d2:	87 e8       	ldi	r24, 0x87	; 135
    30d4:	0e 94 32 18 	call	0x3064	; 0x3064 <sd_raw_send_byte>
    30d8:	0b c0       	rjmp	.+22     	; 0x30f0 <sd_raw_send_command+0x68>
    30da:	8f ef       	ldi	r24, 0xFF	; 255
    30dc:	0e 94 32 18 	call	0x3064	; 0x3064 <sd_raw_send_byte>
    30e0:	07 c0       	rjmp	.+14     	; 0x30f0 <sd_raw_send_command+0x68>
    30e2:	0e 94 3a 18 	call	0x3074	; 0x3074 <sd_raw_rec_byte>
    30e6:	8f 3f       	cpi	r24, 0xFF	; 255
    30e8:	29 f4       	brne	.+10     	; 0x30f4 <sd_raw_send_command+0x6c>
    30ea:	c1 50       	subi	r28, 0x01	; 1
    30ec:	d1 f7       	brne	.-12     	; 0x30e2 <sd_raw_send_command+0x5a>
    30ee:	02 c0       	rjmp	.+4      	; 0x30f4 <sd_raw_send_command+0x6c>
    30f0:	ca e0       	ldi	r28, 0x0A	; 10
    30f2:	f7 cf       	rjmp	.-18     	; 0x30e2 <sd_raw_send_command+0x5a>
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	1f 91       	pop	r17
    30fa:	0f 91       	pop	r16
    30fc:	ff 90       	pop	r15
    30fe:	08 95       	ret

00003100 <sd_raw_sync>:
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    3100:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <raw_block_written>
    3104:	81 11       	cpse	r24, r1
    3106:	14 c0       	rjmp	.+40     	; 0x3130 <sd_raw_sync+0x30>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    3108:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <raw_block_address>
    310c:	70 91 d5 01 	lds	r23, 0x01D5	; 0x8001d5 <raw_block_address+0x1>
    3110:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <raw_block_address+0x2>
    3114:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <raw_block_address+0x3>
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	32 e0       	ldi	r19, 0x02	; 2
    311c:	48 ed       	ldi	r20, 0xD8	; 216
    311e:	51 e0       	ldi	r21, 0x01	; 1
    3120:	0e 94 34 1a 	call	0x3468	; 0x3468 <sd_raw_write>
    3124:	88 23       	and	r24, r24
    3126:	29 f0       	breq	.+10     	; 0x3132 <sd_raw_sync+0x32>
        return 0;
    raw_block_written = 1;
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <raw_block_written>
#endif
    return 1;
    312e:	08 95       	ret
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
        return 1;
    3130:	81 e0       	ldi	r24, 0x01	; 1
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
        return 0;
    raw_block_written = 1;
#endif
    return 1;
}
    3132:	08 95       	ret

00003134 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    3134:	2f 92       	push	r2
    3136:	3f 92       	push	r3
    3138:	4f 92       	push	r4
    313a:	5f 92       	push	r5
    313c:	6f 92       	push	r6
    313e:	7f 92       	push	r7
    3140:	8f 92       	push	r8
    3142:	9f 92       	push	r9
    3144:	af 92       	push	r10
    3146:	bf 92       	push	r11
    3148:	cf 92       	push	r12
    314a:	df 92       	push	r13
    314c:	ef 92       	push	r14
    314e:	ff 92       	push	r15
    3150:	0f 93       	push	r16
    3152:	1f 93       	push	r17
    3154:	cf 93       	push	r28
    3156:	df 93       	push	r29
    3158:	00 d0       	rcall	.+0      	; 0x315a <sd_raw_read+0x26>
    315a:	00 d0       	rcall	.+0      	; 0x315c <sd_raw_read+0x28>
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62
    3160:	4b 01       	movw	r8, r22
    3162:	5c 01       	movw	r10, r24
    3164:	5a 83       	std	Y+2, r21	; 0x02
    3166:	49 83       	std	Y+1, r20	; 0x01
    3168:	79 01       	movw	r14, r18
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    316a:	23 2b       	or	r18, r19
    316c:	09 f4       	brne	.+2      	; 0x3170 <sd_raw_read+0x3c>
    316e:	7d c0       	rjmp	.+250    	; 0x326a <sd_raw_read+0x136>
    3170:	08 ed       	ldi	r16, 0xD8	; 216
    3172:	13 e0       	ldi	r17, 0x03	; 3
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    3174:	14 01       	movw	r2, r8
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	38 22       	and	r3, r24
        block_address = offset - block_offset;
    317a:	24 01       	movw	r4, r8
    317c:	35 01       	movw	r6, r10
    317e:	42 18       	sub	r4, r2
    3180:	53 08       	sbc	r5, r3
    3182:	61 08       	sbc	r6, r1
    3184:	71 08       	sbc	r7, r1
    3186:	c1 2c       	mov	r12, r1
    3188:	68 94       	set
    318a:	dd 24       	eor	r13, r13
    318c:	d1 f8       	bld	r13, 1
    318e:	c2 18       	sub	r12, r2
    3190:	d3 08       	sbc	r13, r3
    3192:	ec 14       	cp	r14, r12
    3194:	fd 04       	cpc	r15, r13
    3196:	08 f4       	brcc	.+2      	; 0x319a <sd_raw_read+0x66>
    3198:	67 01       	movw	r12, r14
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    319a:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <raw_block_address>
    319e:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <raw_block_address+0x1>
    31a2:	a0 91 d6 01 	lds	r26, 0x01D6	; 0x8001d6 <raw_block_address+0x2>
    31a6:	b0 91 d7 01 	lds	r27, 0x01D7	; 0x8001d7 <raw_block_address+0x3>
    31aa:	48 16       	cp	r4, r24
    31ac:	59 06       	cpc	r5, r25
    31ae:	6a 06       	cpc	r6, r26
    31b0:	7b 06       	cpc	r7, r27
    31b2:	09 f4       	brne	.+2      	; 0x31b6 <sd_raw_read+0x82>
    31b4:	40 c0       	rjmp	.+128    	; 0x3236 <sd_raw_read+0x102>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    31b6:	0e 94 80 18 	call	0x3100	; 0x3100 <sd_raw_sync>
    31ba:	88 23       	and	r24, r24
    31bc:	09 f4       	brne	.+2      	; 0x31c0 <sd_raw_read+0x8c>
    31be:	56 c0       	rjmp	.+172    	; 0x326c <sd_raw_read+0x138>
                return 0;
#endif

            /* address card */
            select_card();
    31c0:	2a 98       	cbi	0x05, 2	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
    31c2:	b3 01       	movw	r22, r6
    31c4:	a2 01       	movw	r20, r4
    31c6:	81 e1       	ldi	r24, 0x11	; 17
    31c8:	0e 94 44 18 	call	0x3088	; 0x3088 <sd_raw_send_command>
    31cc:	88 23       	and	r24, r24
    31ce:	19 f0       	breq	.+6      	; 0x31d6 <sd_raw_read+0xa2>
#endif
            {
                unselect_card();
    31d0:	2a 9a       	sbi	0x05, 2	; 5
                return 0;
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	4b c0       	rjmp	.+150    	; 0x326c <sd_raw_read+0x138>
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    31d6:	0e 94 3a 18 	call	0x3074	; 0x3074 <sd_raw_rec_byte>
    31da:	8e 3f       	cpi	r24, 0xFE	; 254
    31dc:	e1 f7       	brne	.-8      	; 0x31d6 <sd_raw_read+0xa2>
    31de:	e8 ed       	ldi	r30, 0xD8	; 216
    31e0:	f1 e0       	ldi	r31, 0x01	; 1
    31e2:	fc 83       	std	Y+4, r31	; 0x04
    31e4:	eb 83       	std	Y+3, r30	; 0x03
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    31e6:	0e 94 3a 18 	call	0x3074	; 0x3074 <sd_raw_rec_byte>
    31ea:	eb 81       	ldd	r30, Y+3	; 0x03
    31ec:	fc 81       	ldd	r31, Y+4	; 0x04
    31ee:	81 93       	st	Z+, r24
    31f0:	fc 83       	std	Y+4, r31	; 0x04
    31f2:	eb 83       	std	Y+3, r30	; 0x03
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    31f4:	e0 17       	cp	r30, r16
    31f6:	f1 07       	cpc	r31, r17
    31f8:	b1 f7       	brne	.-20     	; 0x31e6 <sd_raw_read+0xb2>
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;
    31fa:	40 92 d4 01 	sts	0x01D4, r4	; 0x8001d4 <raw_block_address>
    31fe:	50 92 d5 01 	sts	0x01D5, r5	; 0x8001d5 <raw_block_address+0x1>
    3202:	60 92 d6 01 	sts	0x01D6, r6	; 0x8001d6 <raw_block_address+0x2>
    3206:	70 92 d7 01 	sts	0x01D7, r7	; 0x8001d7 <raw_block_address+0x3>

            memcpy(buffer, raw_block + block_offset, read_length);
    320a:	b1 01       	movw	r22, r2
    320c:	68 52       	subi	r22, 0x28	; 40
    320e:	7e 4f       	sbci	r23, 0xFE	; 254
    3210:	a6 01       	movw	r20, r12
    3212:	89 81       	ldd	r24, Y+1	; 0x01
    3214:	9a 81       	ldd	r25, Y+2	; 0x02
    3216:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <memcpy>
            buffer += read_length;
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	9a 81       	ldd	r25, Y+2	; 0x02
    321e:	8c 0d       	add	r24, r12
    3220:	9d 1d       	adc	r25, r13
    3222:	9a 83       	std	Y+2, r25	; 0x02
    3224:	89 83       	std	Y+1, r24	; 0x01
#endif
            
            /* read crc16 */
            sd_raw_rec_byte();
    3226:	0e 94 3a 18 	call	0x3074	; 0x3074 <sd_raw_rec_byte>
            sd_raw_rec_byte();
    322a:	0e 94 3a 18 	call	0x3074	; 0x3074 <sd_raw_rec_byte>
            
            /* deaddress card */
            unselect_card();
    322e:	2a 9a       	sbi	0x05, 2	; 5

            /* let card some time to finish */
            sd_raw_rec_byte();
    3230:	0e 94 3a 18 	call	0x3074	; 0x3074 <sd_raw_rec_byte>
    3234:	0e c0       	rjmp	.+28     	; 0x3252 <sd_raw_read+0x11e>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    3236:	b1 01       	movw	r22, r2
    3238:	68 52       	subi	r22, 0x28	; 40
    323a:	7e 4f       	sbci	r23, 0xFE	; 254
    323c:	a6 01       	movw	r20, r12
    323e:	89 81       	ldd	r24, Y+1	; 0x01
    3240:	9a 81       	ldd	r25, Y+2	; 0x02
    3242:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <memcpy>
            buffer += read_length;
    3246:	e9 81       	ldd	r30, Y+1	; 0x01
    3248:	fa 81       	ldd	r31, Y+2	; 0x02
    324a:	ec 0d       	add	r30, r12
    324c:	fd 1d       	adc	r31, r13
    324e:	fa 83       	std	Y+2, r31	; 0x02
    3250:	e9 83       	std	Y+1, r30	; 0x01
        }
#endif

        length -= read_length;
    3252:	ec 18       	sub	r14, r12
    3254:	fd 08       	sbc	r15, r13
        offset += read_length;
    3256:	8c 0c       	add	r8, r12
    3258:	9d 1c       	adc	r9, r13
    325a:	a1 1c       	adc	r10, r1
    325c:	b1 1c       	adc	r11, r1
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    325e:	e1 14       	cp	r14, r1
    3260:	f1 04       	cpc	r15, r1
    3262:	09 f0       	breq	.+2      	; 0x3266 <sd_raw_read+0x132>
    3264:	87 cf       	rjmp	.-242    	; 0x3174 <sd_raw_read+0x40>

        length -= read_length;
        offset += read_length;
    }

    return 1;
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	01 c0       	rjmp	.+2      	; 0x326c <sd_raw_read+0x138>
    326a:	81 e0       	ldi	r24, 0x01	; 1
}
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	df 91       	pop	r29
    3276:	cf 91       	pop	r28
    3278:	1f 91       	pop	r17
    327a:	0f 91       	pop	r16
    327c:	ff 90       	pop	r15
    327e:	ef 90       	pop	r14
    3280:	df 90       	pop	r13
    3282:	cf 90       	pop	r12
    3284:	bf 90       	pop	r11
    3286:	af 90       	pop	r10
    3288:	9f 90       	pop	r9
    328a:	8f 90       	pop	r8
    328c:	7f 90       	pop	r7
    328e:	6f 90       	pop	r6
    3290:	5f 90       	pop	r5
    3292:	4f 90       	pop	r4
    3294:	3f 90       	pop	r3
    3296:	2f 90       	pop	r2
    3298:	08 95       	ret

0000329a <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    329a:	0f 93       	push	r16
    329c:	1f 93       	push	r17
    329e:	cf 93       	push	r28
    32a0:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    32a2:	23 9a       	sbi	0x04, 3	; 4
    configure_pin_sck();
    32a4:	25 9a       	sbi	0x04, 5	; 4
    configure_pin_ss();
    32a6:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_miso();
    32a8:	24 98       	cbi	0x04, 4	; 4

    unselect_card();
    32aa:	2a 9a       	sbi	0x05, 2	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    32ac:	83 e5       	ldi	r24, 0x53	; 83
    32ae:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    32b0:	8d b5       	in	r24, 0x2d	; 45
    32b2:	8e 7f       	andi	r24, 0xFE	; 254
    32b4:	8d bd       	out	0x2d, r24	; 45
	
    /* initialization procedure */
    sd_raw_card_type = 0;
    32b6:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <sd_raw_card_type>
    32ba:	1a e0       	ldi	r17, 0x0A	; 10

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    {
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    32bc:	0e 94 3a 18 	call	0x3074	; 0x3074 <sd_raw_rec_byte>
    32c0:	11 50       	subi	r17, 0x01	; 1
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    32c2:	e1 f7       	brne	.-8      	; 0x32bc <sd_raw_init+0x22>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    32c4:	2a 98       	cbi	0x05, 2	; 5
    32c6:	c0 e0       	ldi	r28, 0x00	; 0
    32c8:	d2 e0       	ldi	r29, 0x02	; 2

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    32ca:	40 e0       	ldi	r20, 0x00	; 0
    32cc:	50 e0       	ldi	r21, 0x00	; 0
    32ce:	ba 01       	movw	r22, r20
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	0e 94 44 18 	call	0x3088	; 0x3088 <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
    32d6:	81 30       	cpi	r24, 0x01	; 1
    32d8:	29 f0       	breq	.+10     	; 0x32e4 <sd_raw_init+0x4a>
    32da:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x1ff)
    32dc:	b1 f7       	brne	.-20     	; 0x32ca <sd_raw_init+0x30>
        {
            unselect_card();
    32de:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    32e0:	01 2f       	mov	r16, r17
    32e2:	62 c0       	rjmp	.+196    	; 0x33a8 <sd_raw_init+0x10e>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    32e4:	40 e0       	ldi	r20, 0x00	; 0
    32e6:	50 e0       	ldi	r21, 0x00	; 0
    32e8:	ba 01       	movw	r22, r20
    32ea:	87 e3       	ldi	r24, 0x37	; 55
    32ec:	0e 94 44 18 	call	0x3088	; 0x3088 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    32f0:	40 e0       	ldi	r20, 0x00	; 0
    32f2:	50 e0       	ldi	r21, 0x00	; 0
    32f4:	ba 01       	movw	r22, r20
    32f6:	89 e2       	ldi	r24, 0x29	; 41
    32f8:	0e 94 44 18 	call	0x3088	; 0x3088 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    32fc:	82 fd       	sbrc	r24, 2
    32fe:	05 c0       	rjmp	.+10     	; 0x330a <sd_raw_init+0x70>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    3300:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <sd_raw_card_type>
    3304:	81 60       	ori	r24, 0x01	; 1
    3306:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <sd_raw_card_type>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    330a:	c0 e0       	ldi	r28, 0x00	; 0
    330c:	d0 e8       	ldi	r29, 0x80	; 128
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    330e:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <sd_raw_card_type>
    3312:	83 70       	andi	r24, 0x03	; 3
    3314:	69 f0       	breq	.+26     	; 0x3330 <sd_raw_init+0x96>
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    3316:	40 e0       	ldi	r20, 0x00	; 0
    3318:	50 e0       	ldi	r21, 0x00	; 0
    331a:	ba 01       	movw	r22, r20
    331c:	87 e3       	ldi	r24, 0x37	; 55
    331e:	0e 94 44 18 	call	0x3088	; 0x3088 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    3322:	40 e0       	ldi	r20, 0x00	; 0
    3324:	50 e0       	ldi	r21, 0x00	; 0
    3326:	ba 01       	movw	r22, r20
    3328:	89 e2       	ldi	r24, 0x29	; 41
    332a:	0e 94 44 18 	call	0x3088	; 0x3088 <sd_raw_send_command>
    332e:	06 c0       	rjmp	.+12     	; 0x333c <sd_raw_init+0xa2>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    3330:	40 e0       	ldi	r20, 0x00	; 0
    3332:	50 e0       	ldi	r21, 0x00	; 0
    3334:	ba 01       	movw	r22, r20
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	0e 94 44 18 	call	0x3088	; 0x3088 <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    333c:	08 2f       	mov	r16, r24
    333e:	01 70       	andi	r16, 0x01	; 1
    3340:	80 ff       	sbrs	r24, 0
    3342:	05 c0       	rjmp	.+10     	; 0x334e <sd_raw_init+0xb4>
    3344:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x7fff)
    3346:	19 f7       	brne	.-58     	; 0x330e <sd_raw_init+0x74>
        {
            unselect_card();
    3348:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    334a:	01 2f       	mov	r16, r17
    334c:	2d c0       	rjmp	.+90     	; 0x33a8 <sd_raw_init+0x10e>
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    334e:	40 e0       	ldi	r20, 0x00	; 0
    3350:	52 e0       	ldi	r21, 0x02	; 2
    3352:	60 e0       	ldi	r22, 0x00	; 0
    3354:	70 e0       	ldi	r23, 0x00	; 0
    3356:	80 e1       	ldi	r24, 0x10	; 16
    3358:	0e 94 44 18 	call	0x3088	; 0x3088 <sd_raw_send_command>
    335c:	88 23       	and	r24, r24
    335e:	11 f0       	breq	.+4      	; 0x3364 <sd_raw_init+0xca>
    {
        unselect_card();
    3360:	2a 9a       	sbi	0x05, 2	; 5
        return 0;
    3362:	22 c0       	rjmp	.+68     	; 0x33a8 <sd_raw_init+0x10e>
    }

    /* deaddress card */
    unselect_card();
    3364:	2a 9a       	sbi	0x05, 2	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    3366:	8c b5       	in	r24, 0x2c	; 44
    3368:	8c 7f       	andi	r24, 0xFC	; 252
    336a:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    336c:	8d b5       	in	r24, 0x2d	; 45
    336e:	81 60       	ori	r24, 0x01	; 1
    3370:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    3372:	8f ef       	ldi	r24, 0xFF	; 255
    3374:	9f ef       	ldi	r25, 0xFF	; 255
    3376:	dc 01       	movw	r26, r24
    3378:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <raw_block_address>
    337c:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <raw_block_address+0x1>
    3380:	a0 93 d6 01 	sts	0x01D6, r26	; 0x8001d6 <raw_block_address+0x2>
    3384:	b0 93 d7 01 	sts	0x01D7, r27	; 0x8001d7 <raw_block_address+0x3>
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    3388:	81 e0       	ldi	r24, 0x01	; 1
    338a:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <raw_block_written>
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	32 e0       	ldi	r19, 0x02	; 2
    3392:	48 ed       	ldi	r20, 0xD8	; 216
    3394:	51 e0       	ldi	r21, 0x01	; 1
    3396:	60 e0       	ldi	r22, 0x00	; 0
    3398:	70 e0       	ldi	r23, 0x00	; 0
    339a:	cb 01       	movw	r24, r22
    339c:	0e 94 9a 18 	call	0x3134	; 0x3134 <sd_raw_read>
    33a0:	01 e0       	ldi	r16, 0x01	; 1
    33a2:	81 11       	cpse	r24, r1
    33a4:	01 c0       	rjmp	.+2      	; 0x33a8 <sd_raw_init+0x10e>
    33a6:	00 e0       	ldi	r16, 0x00	; 0
        return 0;
#endif

    return 1;
}
    33a8:	80 2f       	mov	r24, r16
    33aa:	df 91       	pop	r29
    33ac:	cf 91       	pop	r28
    33ae:	1f 91       	pop	r17
    33b0:	0f 91       	pop	r16
    33b2:	08 95       	ret

000033b4 <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    33b4:	2f 92       	push	r2
    33b6:	3f 92       	push	r3
    33b8:	4f 92       	push	r4
    33ba:	5f 92       	push	r5
    33bc:	6f 92       	push	r6
    33be:	7f 92       	push	r7
    33c0:	8f 92       	push	r8
    33c2:	9f 92       	push	r9
    33c4:	af 92       	push	r10
    33c6:	bf 92       	push	r11
    33c8:	cf 92       	push	r12
    33ca:	df 92       	push	r13
    33cc:	ef 92       	push	r14
    33ce:	ff 92       	push	r15
    33d0:	0f 93       	push	r16
    33d2:	1f 93       	push	r17
    33d4:	cf 93       	push	r28
    33d6:	df 93       	push	r29
    33d8:	4b 01       	movw	r8, r22
    33da:	5c 01       	movw	r10, r24
    33dc:	1a 01       	movw	r2, r20
    33de:	e9 01       	movw	r28, r18
    if(!buffer || interval == 0 || length < interval || !callback)
    33e0:	45 2b       	or	r20, r21
    33e2:	31 f1       	breq	.+76     	; 0x3430 <sd_raw_read_interval+0x7c>
    33e4:	20 97       	sbiw	r28, 0x00	; 0
    33e6:	31 f1       	breq	.+76     	; 0x3434 <sd_raw_read_interval+0x80>
    33e8:	02 17       	cp	r16, r18
    33ea:	13 07       	cpc	r17, r19
    33ec:	28 f1       	brcs	.+74     	; 0x3438 <sd_raw_read_interval+0x84>
    33ee:	e1 14       	cp	r14, r1
    33f0:	f1 04       	cpc	r15, r1
    33f2:	21 f1       	breq	.+72     	; 0x343c <sd_raw_read_interval+0x88>
         */
        if(!sd_raw_read(offset, buffer, interval))
            return 0;
        if(!callback(buffer, offset, p))
            break;
        offset += interval;
    33f4:	29 01       	movw	r4, r18
    33f6:	61 2c       	mov	r6, r1
    33f8:	71 2c       	mov	r7, r1
    while(length >= interval)
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    33fa:	9e 01       	movw	r18, r28
    33fc:	a1 01       	movw	r20, r2
    33fe:	c5 01       	movw	r24, r10
    3400:	b4 01       	movw	r22, r8
    3402:	0e 94 9a 18 	call	0x3134	; 0x3134 <sd_raw_read>
    3406:	88 23       	and	r24, r24
    3408:	e1 f0       	breq	.+56     	; 0x3442 <sd_raw_read_interval+0x8e>
            return 0;
        if(!callback(buffer, offset, p))
    340a:	96 01       	movw	r18, r12
    340c:	b5 01       	movw	r22, r10
    340e:	a4 01       	movw	r20, r8
    3410:	c1 01       	movw	r24, r2
    3412:	f7 01       	movw	r30, r14
    3414:	09 95       	icall
    3416:	88 23       	and	r24, r24
    3418:	99 f0       	breq	.+38     	; 0x3440 <sd_raw_read_interval+0x8c>
    341a:	84 0c       	add	r8, r4
    341c:	95 1c       	adc	r9, r5
    341e:	a6 1c       	adc	r10, r6
    3420:	b7 1c       	adc	r11, r7
            break;
        offset += interval;
        length -= interval;
    3422:	0c 1b       	sub	r16, r28
    3424:	1d 0b       	sbc	r17, r29
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    3426:	0c 17       	cp	r16, r28
    3428:	1d 07       	cpc	r17, r29
    342a:	38 f7       	brcc	.-50     	; 0x33fa <sd_raw_read_interval+0x46>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	09 c0       	rjmp	.+18     	; 0x3442 <sd_raw_read_interval+0x8e>
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	07 c0       	rjmp	.+14     	; 0x3442 <sd_raw_read_interval+0x8e>
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	05 c0       	rjmp	.+10     	; 0x3442 <sd_raw_read_interval+0x8e>
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	03 c0       	rjmp	.+6      	; 0x3442 <sd_raw_read_interval+0x8e>
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	01 c0       	rjmp	.+2      	; 0x3442 <sd_raw_read_interval+0x8e>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    3440:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    3442:	df 91       	pop	r29
    3444:	cf 91       	pop	r28
    3446:	1f 91       	pop	r17
    3448:	0f 91       	pop	r16
    344a:	ff 90       	pop	r15
    344c:	ef 90       	pop	r14
    344e:	df 90       	pop	r13
    3450:	cf 90       	pop	r12
    3452:	bf 90       	pop	r11
    3454:	af 90       	pop	r10
    3456:	9f 90       	pop	r9
    3458:	8f 90       	pop	r8
    345a:	7f 90       	pop	r7
    345c:	6f 90       	pop	r6
    345e:	5f 90       	pop	r5
    3460:	4f 90       	pop	r4
    3462:	3f 90       	pop	r3
    3464:	2f 90       	pop	r2
    3466:	08 95       	ret

00003468 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    3468:	2f 92       	push	r2
    346a:	3f 92       	push	r3
    346c:	4f 92       	push	r4
    346e:	5f 92       	push	r5
    3470:	6f 92       	push	r6
    3472:	7f 92       	push	r7
    3474:	8f 92       	push	r8
    3476:	9f 92       	push	r9
    3478:	af 92       	push	r10
    347a:	bf 92       	push	r11
    347c:	cf 92       	push	r12
    347e:	df 92       	push	r13
    3480:	ef 92       	push	r14
    3482:	ff 92       	push	r15
    3484:	0f 93       	push	r16
    3486:	1f 93       	push	r17
    3488:	cf 93       	push	r28
    348a:	df 93       	push	r29
    348c:	4b 01       	movw	r8, r22
    348e:	5c 01       	movw	r10, r24
    3490:	1a 01       	movw	r2, r20
    3492:	69 01       	movw	r12, r18
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    3494:	23 2b       	or	r18, r19
    3496:	09 f4       	brne	.+2      	; 0x349a <sd_raw_write+0x32>
    3498:	83 c0       	rjmp	.+262    	; 0x35a0 <sd_raw_write+0x138>
    349a:	08 ed       	ldi	r16, 0xD8	; 216
    349c:	13 e0       	ldi	r17, 0x03	; 3
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    349e:	e4 01       	movw	r28, r8
    34a0:	d1 70       	andi	r29, 0x01	; 1
        block_address = offset - block_offset;
    34a2:	24 01       	movw	r4, r8
    34a4:	35 01       	movw	r6, r10
    34a6:	4c 1a       	sub	r4, r28
    34a8:	5d 0a       	sbc	r5, r29
    34aa:	61 08       	sbc	r6, r1
    34ac:	71 08       	sbc	r7, r1
    34ae:	e1 2c       	mov	r14, r1
    34b0:	68 94       	set
    34b2:	ff 24       	eor	r15, r15
    34b4:	f1 f8       	bld	r15, 1
    34b6:	ec 1a       	sub	r14, r28
    34b8:	fd 0a       	sbc	r15, r29
    34ba:	ce 14       	cp	r12, r14
    34bc:	df 04       	cpc	r13, r15
    34be:	08 f4       	brcc	.+2      	; 0x34c2 <sd_raw_write+0x5a>
    34c0:	76 01       	movw	r14, r12
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    34c2:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <raw_block_address>
    34c6:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <raw_block_address+0x1>
    34ca:	a0 91 d6 01 	lds	r26, 0x01D6	; 0x8001d6 <raw_block_address+0x2>
    34ce:	b0 91 d7 01 	lds	r27, 0x01D7	; 0x8001d7 <raw_block_address+0x3>
    34d2:	48 16       	cp	r4, r24
    34d4:	59 06       	cpc	r5, r25
    34d6:	6a 06       	cpc	r6, r26
    34d8:	7b 06       	cpc	r7, r27
    34da:	f1 f0       	breq	.+60     	; 0x3518 <sd_raw_write+0xb0>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    34dc:	0e 94 80 18 	call	0x3100	; 0x3100 <sd_raw_sync>
    34e0:	88 23       	and	r24, r24
    34e2:	09 f4       	brne	.+2      	; 0x34e6 <sd_raw_write+0x7e>
    34e4:	60 c0       	rjmp	.+192    	; 0x35a6 <sd_raw_write+0x13e>
                return 0;
#endif

            if(block_offset || write_length < 512)
    34e6:	20 97       	sbiw	r28, 0x00	; 0
    34e8:	21 f4       	brne	.+8      	; 0x34f2 <sd_raw_write+0x8a>
    34ea:	e1 14       	cp	r14, r1
    34ec:	82 e0       	ldi	r24, 0x02	; 2
    34ee:	f8 06       	cpc	r15, r24
    34f0:	58 f4       	brcc	.+22     	; 0x3508 <sd_raw_write+0xa0>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	32 e0       	ldi	r19, 0x02	; 2
    34f6:	48 ed       	ldi	r20, 0xD8	; 216
    34f8:	51 e0       	ldi	r21, 0x01	; 1
    34fa:	c3 01       	movw	r24, r6
    34fc:	b2 01       	movw	r22, r4
    34fe:	0e 94 9a 18 	call	0x3134	; 0x3134 <sd_raw_read>
    3502:	88 23       	and	r24, r24
    3504:	09 f4       	brne	.+2      	; 0x3508 <sd_raw_write+0xa0>
    3506:	4f c0       	rjmp	.+158    	; 0x35a6 <sd_raw_write+0x13e>
                    return 0;
            }
            raw_block_address = block_address;
    3508:	40 92 d4 01 	sts	0x01D4, r4	; 0x8001d4 <raw_block_address>
    350c:	50 92 d5 01 	sts	0x01D5, r5	; 0x8001d5 <raw_block_address+0x1>
    3510:	60 92 d6 01 	sts	0x01D6, r6	; 0x8001d6 <raw_block_address+0x2>
    3514:	70 92 d7 01 	sts	0x01D7, r7	; 0x8001d7 <raw_block_address+0x3>
        }

        if(buffer != raw_block)
    3518:	88 ed       	ldi	r24, 0xD8	; 216
    351a:	28 16       	cp	r2, r24
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	38 06       	cpc	r3, r24
    3520:	61 f0       	breq	.+24     	; 0x353a <sd_raw_write+0xd2>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    3522:	a7 01       	movw	r20, r14
    3524:	b1 01       	movw	r22, r2
    3526:	ce 01       	movw	r24, r28
    3528:	88 52       	subi	r24, 0x28	; 40
    352a:	9e 4f       	sbci	r25, 0xFE	; 254
    352c:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    3530:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <raw_block_written>

            if(length == write_length)
    3534:	ce 14       	cp	r12, r14
    3536:	df 04       	cpc	r13, r15
    3538:	a9 f1       	breq	.+106    	; 0x35a4 <sd_raw_write+0x13c>
                return 1;
#endif
        }

        /* address card */
        select_card();
    353a:	2a 98       	cbi	0x05, 2	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
    353c:	b3 01       	movw	r22, r6
    353e:	a2 01       	movw	r20, r4
    3540:	88 e1       	ldi	r24, 0x18	; 24
    3542:	0e 94 44 18 	call	0x3088	; 0x3088 <sd_raw_send_command>
    3546:	88 23       	and	r24, r24
    3548:	19 f0       	breq	.+6      	; 0x3550 <sd_raw_write+0xe8>
#endif
        {
            unselect_card();
    354a:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    354c:	80 e0       	ldi	r24, 0x00	; 0
    354e:	2b c0       	rjmp	.+86     	; 0x35a6 <sd_raw_write+0x13e>
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);
    3550:	8e ef       	ldi	r24, 0xFE	; 254
    3552:	0e 94 32 18 	call	0x3064	; 0x3064 <sd_raw_send_byte>
    3556:	c8 ed       	ldi	r28, 0xD8	; 216
    3558:	d1 e0       	ldi	r29, 0x01	; 1

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    355a:	89 91       	ld	r24, Y+
    355c:	0e 94 32 18 	call	0x3064	; 0x3064 <sd_raw_send_byte>
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    3560:	c0 17       	cp	r28, r16
    3562:	d1 07       	cpc	r29, r17
    3564:	d1 f7       	brne	.-12     	; 0x355a <sd_raw_write+0xf2>
            sd_raw_send_byte(*cache++);

        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
    3566:	8f ef       	ldi	r24, 0xFF	; 255
    3568:	0e 94 32 18 	call	0x3064	; 0x3064 <sd_raw_send_byte>
        sd_raw_send_byte(0xff);
    356c:	8f ef       	ldi	r24, 0xFF	; 255
    356e:	0e 94 32 18 	call	0x3064	; 0x3064 <sd_raw_send_byte>

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    3572:	0e 94 3a 18 	call	0x3074	; 0x3074 <sd_raw_rec_byte>
    3576:	8f 3f       	cpi	r24, 0xFF	; 255
    3578:	e1 f7       	brne	.-8      	; 0x3572 <sd_raw_write+0x10a>
        sd_raw_rec_byte();
    357a:	0e 94 3a 18 	call	0x3074	; 0x3074 <sd_raw_rec_byte>

        /* deaddress card */
        unselect_card();
    357e:	2a 9a       	sbi	0x05, 2	; 5

        buffer += write_length;
    3580:	2e 0c       	add	r2, r14
    3582:	3f 1c       	adc	r3, r15
        offset += write_length;
    3584:	8e 0c       	add	r8, r14
    3586:	9f 1c       	adc	r9, r15
    3588:	a1 1c       	adc	r10, r1
    358a:	b1 1c       	adc	r11, r1
        length -= write_length;
    358c:	ce 18       	sub	r12, r14
    358e:	df 08       	sbc	r13, r15

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <raw_block_written>
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    3596:	c1 14       	cp	r12, r1
    3598:	d1 04       	cpc	r13, r1
    359a:	09 f0       	breq	.+2      	; 0x359e <sd_raw_write+0x136>
    359c:	80 cf       	rjmp	.-256    	; 0x349e <sd_raw_write+0x36>
    359e:	03 c0       	rjmp	.+6      	; 0x35a6 <sd_raw_write+0x13e>
#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
#endif
    }

    return 1;
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	01 c0       	rjmp	.+2      	; 0x35a6 <sd_raw_write+0x13e>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;

            if(length == write_length)
                return 1;
    35a4:	81 e0       	ldi	r24, 0x01	; 1
        raw_block_written = 1;
#endif
    }

    return 1;
}
    35a6:	df 91       	pop	r29
    35a8:	cf 91       	pop	r28
    35aa:	1f 91       	pop	r17
    35ac:	0f 91       	pop	r16
    35ae:	ff 90       	pop	r15
    35b0:	ef 90       	pop	r14
    35b2:	df 90       	pop	r13
    35b4:	cf 90       	pop	r12
    35b6:	bf 90       	pop	r11
    35b8:	af 90       	pop	r10
    35ba:	9f 90       	pop	r9
    35bc:	8f 90       	pop	r8
    35be:	7f 90       	pop	r7
    35c0:	6f 90       	pop	r6
    35c2:	5f 90       	pop	r5
    35c4:	4f 90       	pop	r4
    35c6:	3f 90       	pop	r3
    35c8:	2f 90       	pop	r2
    35ca:	08 95       	ret

000035cc <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    35cc:	4f 92       	push	r4
    35ce:	5f 92       	push	r5
    35d0:	6f 92       	push	r6
    35d2:	7f 92       	push	r7
    35d4:	8f 92       	push	r8
    35d6:	9f 92       	push	r9
    35d8:	af 92       	push	r10
    35da:	bf 92       	push	r11
    35dc:	cf 92       	push	r12
    35de:	df 92       	push	r13
    35e0:	ef 92       	push	r14
    35e2:	ff 92       	push	r15
    35e4:	0f 93       	push	r16
    35e6:	1f 93       	push	r17
    35e8:	cf 93       	push	r28
    35ea:	df 93       	push	r29
    35ec:	4b 01       	movw	r8, r22
    35ee:	5c 01       	movw	r10, r24
    35f0:	6a 01       	movw	r12, r20
    35f2:	39 01       	movw	r6, r18
    35f4:	27 01       	movw	r4, r14
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    35f6:	45 2b       	or	r20, r21
    35f8:	f1 f0       	breq	.+60     	; 0x3636 <sd_raw_write_interval+0x6a>
    35fa:	01 15       	cp	r16, r1
    35fc:	11 05       	cpc	r17, r1
    35fe:	e9 f0       	breq	.+58     	; 0x363a <sd_raw_write_interval+0x6e>
    3600:	79 01       	movw	r14, r18
    3602:	11 c0       	rjmp	.+34     	; 0x3626 <sd_raw_write_interval+0x5a>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
    3604:	ec 16       	cp	r14, r28
    3606:	fd 06       	cpc	r15, r29
    3608:	d0 f0       	brcs	.+52     	; 0x363e <sd_raw_write_interval+0x72>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    360a:	9e 01       	movw	r18, r28
    360c:	a6 01       	movw	r20, r12
    360e:	c5 01       	movw	r24, r10
    3610:	b4 01       	movw	r22, r8
    3612:	0e 94 34 1a 	call	0x3468	; 0x3468 <sd_raw_write>
    3616:	88 23       	and	r24, r24
    3618:	61 f1       	breq	.+88     	; 0x3672 <sd_raw_write_interval+0xa6>
            return 0;

        offset += bytes_to_write;
    361a:	8c 0e       	add	r8, r28
    361c:	9d 1e       	adc	r9, r29
    361e:	a1 1c       	adc	r10, r1
    3620:	b1 1c       	adc	r11, r1
        length -= bytes_to_write;
    3622:	ec 1a       	sub	r14, r28
    3624:	fd 0a       	sbc	r15, r29

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    3626:	61 14       	cp	r6, r1
    3628:	71 04       	cpc	r7, r1
    362a:	c9 f0       	breq	.+50     	; 0x365e <sd_raw_write_interval+0x92>
    362c:	e1 14       	cp	r14, r1
    362e:	f1 04       	cpc	r15, r1
    3630:	61 f4       	brne	.+24     	; 0x364a <sd_raw_write_interval+0x7e>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	1e c0       	rjmp	.+60     	; 0x3672 <sd_raw_write_interval+0xa6>
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
        return 0;
    3636:	80 e0       	ldi	r24, 0x00	; 0
    3638:	1c c0       	rjmp	.+56     	; 0x3672 <sd_raw_write_interval+0xa6>
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	1a c0       	rjmp	.+52     	; 0x3672 <sd_raw_write_interval+0xa6>
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
            return 0;
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	18 c0       	rjmp	.+48     	; 0x3672 <sd_raw_write_interval+0xa6>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	16 c0       	rjmp	.+44     	; 0x3672 <sd_raw_write_interval+0xa6>
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	14 c0       	rjmp	.+40     	; 0x3672 <sd_raw_write_interval+0xa6>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    364a:	92 01       	movw	r18, r4
    364c:	b5 01       	movw	r22, r10
    364e:	a4 01       	movw	r20, r8
    3650:	c6 01       	movw	r24, r12
    3652:	f8 01       	movw	r30, r16
    3654:	09 95       	icall
    3656:	ec 01       	movw	r28, r24
        if(!bytes_to_write)
    3658:	89 2b       	or	r24, r25
    365a:	a1 f6       	brne	.-88     	; 0x3604 <sd_raw_write_interval+0x38>
    365c:	f2 cf       	rjmp	.-28     	; 0x3642 <sd_raw_write_interval+0x76>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    365e:	92 01       	movw	r18, r4
    3660:	b5 01       	movw	r22, r10
    3662:	a4 01       	movw	r20, r8
    3664:	c6 01       	movw	r24, r12
    3666:	f8 01       	movw	r30, r16
    3668:	09 95       	icall
    366a:	ec 01       	movw	r28, r24
        if(!bytes_to_write)
    366c:	89 2b       	or	r24, r25
    366e:	69 f6       	brne	.-102    	; 0x360a <sd_raw_write_interval+0x3e>
    3670:	ea cf       	rjmp	.-44     	; 0x3646 <sd_raw_write_interval+0x7a>
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    3672:	df 91       	pop	r29
    3674:	cf 91       	pop	r28
    3676:	1f 91       	pop	r17
    3678:	0f 91       	pop	r16
    367a:	ff 90       	pop	r15
    367c:	ef 90       	pop	r14
    367e:	df 90       	pop	r13
    3680:	cf 90       	pop	r12
    3682:	bf 90       	pop	r11
    3684:	af 90       	pop	r10
    3686:	9f 90       	pop	r9
    3688:	8f 90       	pop	r8
    368a:	7f 90       	pop	r7
    368c:	6f 90       	pop	r6
    368e:	5f 90       	pop	r5
    3690:	4f 90       	pop	r4
    3692:	08 95       	ret

00003694 <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    3694:	8f 92       	push	r8
    3696:	9f 92       	push	r9
    3698:	af 92       	push	r10
    369a:	bf 92       	push	r11
    369c:	cf 92       	push	r12
    369e:	df 92       	push	r13
    36a0:	ef 92       	push	r14
    36a2:	ff 92       	push	r15
    36a4:	0f 93       	push	r16
    36a6:	1f 93       	push	r17
    36a8:	cf 93       	push	r28
    36aa:	df 93       	push	r29
    if(!info || !sd_raw_available())
    36ac:	00 97       	sbiw	r24, 0x00	; 0
    36ae:	09 f4       	brne	.+2      	; 0x36b2 <sd_raw_get_info+0x1e>
    36b0:	f9 c0       	rjmp	.+498    	; 0x38a4 <sd_raw_get_info+0x210>
    36b2:	7c 01       	movw	r14, r24
        return 0;

    memset(info, 0, sizeof(*info));
    36b4:	89 e1       	ldi	r24, 0x19	; 25
    36b6:	f7 01       	movw	r30, r14
    36b8:	11 92       	st	Z+, r1
    36ba:	8a 95       	dec	r24
    36bc:	e9 f7       	brne	.-6      	; 0x36b8 <sd_raw_get_info+0x24>

    select_card();
    36be:	2a 98       	cbi	0x05, 2	; 5

    /* read cid register */
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    36c0:	40 e0       	ldi	r20, 0x00	; 0
    36c2:	50 e0       	ldi	r21, 0x00	; 0
    36c4:	ba 01       	movw	r22, r20
    36c6:	8a e0       	ldi	r24, 0x0A	; 10
    36c8:	0e 94 44 18 	call	0x3088	; 0x3088 <sd_raw_send_command>
    36cc:	c8 2e       	mov	r12, r24
    36ce:	88 23       	and	r24, r24
    36d0:	19 f0       	breq	.+6      	; 0x36d8 <sd_raw_get_info+0x44>
    {
        unselect_card();
    36d2:	2a 9a       	sbi	0x05, 2	; 5
        return 0;
    36d4:	c1 2c       	mov	r12, r1
    36d6:	e7 c0       	rjmp	.+462    	; 0x38a6 <sd_raw_get_info+0x212>
    }
    while(sd_raw_rec_byte() != 0xfe);
    36d8:	0e 94 3a 18 	call	0x3074	; 0x3074 <sd_raw_rec_byte>
    36dc:	8e 3f       	cpi	r24, 0xFE	; 254
    36de:	e1 f7       	brne	.-8      	; 0x36d8 <sd_raw_get_info+0x44>
    36e0:	e7 01       	movw	r28, r14
    36e2:	21 96       	adiw	r28, 0x01	; 1
    36e4:	00 e6       	ldi	r16, 0x60	; 96
    36e6:	10 e0       	ldi	r17, 0x00	; 0
    36e8:	dd 24       	eor	r13, r13
    36ea:	d3 94       	inc	r13
    36ec:	04 c0       	rjmp	.+8      	; 0x36f6 <sd_raw_get_info+0x62>
    36ee:	d3 94       	inc	r13
    36f0:	08 50       	subi	r16, 0x08	; 8
    36f2:	11 09       	sbc	r17, r1
    36f4:	21 96       	adiw	r28, 0x01	; 1
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();
    36f6:	0e 94 3a 18 	call	0x3074	; 0x3074 <sd_raw_rec_byte>
    36fa:	ef ef       	ldi	r30, 0xFF	; 255
    36fc:	ed 0d       	add	r30, r13

        switch(i)
    36fe:	4e 2f       	mov	r20, r30
    3700:	50 e0       	ldi	r21, 0x00	; 0
    3702:	4f 30       	cpi	r20, 0x0F	; 15
    3704:	51 05       	cpc	r21, r1
    3706:	c8 f5       	brcc	.+114    	; 0x377a <sd_raw_get_info+0xe6>
    3708:	fa 01       	movw	r30, r20
    370a:	ec 5c       	subi	r30, 0xCC	; 204
    370c:	ff 4f       	sbci	r31, 0xFF	; 255
    370e:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <__tablejump2__>
        {
            case 0:
                info->manufacturer = b;
    3712:	f7 01       	movw	r30, r14
    3714:	80 83       	st	Z, r24
                break;
    3716:	eb cf       	rjmp	.-42     	; 0x36ee <sd_raw_get_info+0x5a>
    3718:	fe 01       	movw	r30, r28
    371a:	31 97       	sbiw	r30, 0x01	; 1
            case 1:
            case 2:
                info->oem[i - 1] = b;
    371c:	80 83       	st	Z, r24
                break;
    371e:	2d c0       	rjmp	.+90     	; 0x377a <sd_raw_get_info+0xe6>
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
    3720:	88 83       	st	Y, r24
                break;
    3722:	2b c0       	rjmp	.+86     	; 0x377a <sd_raw_get_info+0xe6>
            case 8:
                info->revision = b;
    3724:	f7 01       	movw	r30, r14
    3726:	82 87       	std	Z+10, r24	; 0x0a
                break;
    3728:	e2 cf       	rjmp	.-60     	; 0x36ee <sd_raw_get_info+0x5a>
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (uint32_t) b << ((12 - i) * 8);
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	a0 e0       	ldi	r26, 0x00	; 0
    372e:	b0 e0       	ldi	r27, 0x00	; 0
    3730:	00 2e       	mov	r0, r16
    3732:	04 c0       	rjmp	.+8      	; 0x373c <sd_raw_get_info+0xa8>
    3734:	88 0f       	add	r24, r24
    3736:	99 1f       	adc	r25, r25
    3738:	aa 1f       	adc	r26, r26
    373a:	bb 1f       	adc	r27, r27
    373c:	0a 94       	dec	r0
    373e:	d2 f7       	brpl	.-12     	; 0x3734 <sd_raw_get_info+0xa0>
    3740:	f7 01       	movw	r30, r14
    3742:	43 85       	ldd	r20, Z+11	; 0x0b
    3744:	54 85       	ldd	r21, Z+12	; 0x0c
    3746:	65 85       	ldd	r22, Z+13	; 0x0d
    3748:	76 85       	ldd	r23, Z+14	; 0x0e
    374a:	84 2b       	or	r24, r20
    374c:	95 2b       	or	r25, r21
    374e:	a6 2b       	or	r26, r22
    3750:	b7 2b       	or	r27, r23
    3752:	83 87       	std	Z+11, r24	; 0x0b
    3754:	94 87       	std	Z+12, r25	; 0x0c
    3756:	a5 87       	std	Z+13, r26	; 0x0d
    3758:	b6 87       	std	Z+14, r27	; 0x0e
                break;
    375a:	0f c0       	rjmp	.+30     	; 0x377a <sd_raw_get_info+0xe6>
            case 13:
                info->manufacturing_year = b << 4;
    375c:	82 95       	swap	r24
    375e:	80 7f       	andi	r24, 0xF0	; 240
    3760:	f7 01       	movw	r30, r14
    3762:	87 87       	std	Z+15, r24	; 0x0f
                break;
    3764:	c4 cf       	rjmp	.-120    	; 0x36ee <sd_raw_get_info+0x5a>
            case 14:
                info->manufacturing_year |= b >> 4;
    3766:	98 2f       	mov	r25, r24
    3768:	92 95       	swap	r25
    376a:	9f 70       	andi	r25, 0x0F	; 15
    376c:	f7 01       	movw	r30, r14
    376e:	27 85       	ldd	r18, Z+15	; 0x0f
    3770:	92 2b       	or	r25, r18
    3772:	97 87       	std	Z+15, r25	; 0x0f
                info->manufacturing_month = b & 0x0f;
    3774:	8f 70       	andi	r24, 0x0F	; 15
    3776:	80 8b       	std	Z+16, r24	; 0x10
                break;
    3778:	ba cf       	rjmp	.-140    	; 0x36ee <sd_raw_get_info+0x5a>
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    377a:	f1 e1       	ldi	r31, 0x11	; 17
    377c:	fd 15       	cp	r31, r13
    377e:	08 f0       	brcs	.+2      	; 0x3782 <sd_raw_get_info+0xee>
    3780:	b6 cf       	rjmp	.-148    	; 0x36ee <sd_raw_get_info+0x5a>
    uint16_t csd_c_size = 0;
#else
    uint32_t csd_c_size = 0;
#endif
    uint8_t csd_structure = 0;
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    3782:	40 e0       	ldi	r20, 0x00	; 0
    3784:	50 e0       	ldi	r21, 0x00	; 0
    3786:	ba 01       	movw	r22, r20
    3788:	89 e0       	ldi	r24, 0x09	; 9
    378a:	0e 94 44 18 	call	0x3088	; 0x3088 <sd_raw_send_command>
    378e:	c8 2f       	mov	r28, r24
    3790:	88 23       	and	r24, r24
    3792:	11 f0       	breq	.+4      	; 0x3798 <sd_raw_get_info+0x104>
    {
        unselect_card();
    3794:	2a 9a       	sbi	0x05, 2	; 5
        return 0;
    3796:	87 c0       	rjmp	.+270    	; 0x38a6 <sd_raw_get_info+0x212>
    }
    while(sd_raw_rec_byte() != 0xfe);
    3798:	0e 94 3a 18 	call	0x3074	; 0x3074 <sd_raw_rec_byte>
    379c:	8e 3f       	cpi	r24, 0xFE	; 254
    379e:	e1 f7       	brne	.-8      	; 0x3798 <sd_raw_get_info+0x104>
    37a0:	d1 e0       	ldi	r29, 0x01	; 1
    37a2:	81 2c       	mov	r8, r1
    37a4:	91 2c       	mov	r9, r1
    37a6:	54 01       	movw	r10, r8
    37a8:	10 e0       	ldi	r17, 0x00	; 0
    37aa:	00 e0       	ldi	r16, 0x00	; 0
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
    37ac:	dd 24       	eor	r13, r13
    37ae:	d3 94       	inc	r13
    37b0:	02 c0       	rjmp	.+4      	; 0x37b6 <sd_raw_get_info+0x122>
    37b2:	cf 5f       	subi	r28, 0xFF	; 255
    37b4:	df 5f       	subi	r29, 0xFF	; 255
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();
    37b6:	0e 94 3a 18 	call	0x3074	; 0x3074 <sd_raw_rec_byte>

        if(i == 0)
    37ba:	cc 23       	and	r28, r28
    37bc:	d1 f3       	breq	.-12     	; 0x37b2 <sd_raw_get_info+0x11e>
        {
            csd_structure = b >> 6;
        }
        else if(i == 14)
    37be:	ce 30       	cpi	r28, 0x0E	; 14
    37c0:	b1 f4       	brne	.+44     	; 0x37ee <sd_raw_get_info+0x15a>
        {
            if(b & 0x40)
    37c2:	86 ff       	sbrs	r24, 6
    37c4:	02 c0       	rjmp	.+4      	; 0x37ca <sd_raw_get_info+0x136>
                info->flag_copy = 1;
    37c6:	f7 01       	movw	r30, r14
    37c8:	d5 8a       	std	Z+21, r13	; 0x15
            if(b & 0x20)
    37ca:	85 ff       	sbrs	r24, 5
    37cc:	02 c0       	rjmp	.+4      	; 0x37d2 <sd_raw_get_info+0x13e>
                info->flag_write_protect = 1;
    37ce:	f7 01       	movw	r30, r14
    37d0:	d6 8a       	std	Z+22, r13	; 0x16
            if(b & 0x10)
    37d2:	84 ff       	sbrs	r24, 4
    37d4:	02 c0       	rjmp	.+4      	; 0x37da <sd_raw_get_info+0x146>
                info->flag_write_protect_temp = 1;
    37d6:	f7 01       	movw	r30, r14
    37d8:	d7 8a       	std	Z+23, r13	; 0x17
            info->format = (b & 0x0c) >> 2;
    37da:	28 2f       	mov	r18, r24
    37dc:	2c 70       	andi	r18, 0x0C	; 12
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	35 95       	asr	r19
    37e2:	27 95       	ror	r18
    37e4:	35 95       	asr	r19
    37e6:	27 95       	ror	r18
    37e8:	f7 01       	movw	r30, r14
    37ea:	20 8f       	std	Z+24, r18	; 0x18
    37ec:	e2 cf       	rjmp	.-60     	; 0x37b2 <sd_raw_get_info+0x11e>
                }
            }
            else if(csd_structure == 0x00)
#endif
            {
                switch(i)
    37ee:	c7 30       	cpi	r28, 0x07	; 7
    37f0:	c9 f0       	breq	.+50     	; 0x3824 <sd_raw_get_info+0x190>
    37f2:	28 f4       	brcc	.+10     	; 0x37fe <sd_raw_get_info+0x16a>
    37f4:	c5 30       	cpi	r28, 0x05	; 5
    37f6:	49 f0       	breq	.+18     	; 0x380a <sd_raw_get_info+0x176>
    37f8:	c6 30       	cpi	r28, 0x06	; 6
    37fa:	51 f0       	breq	.+20     	; 0x3810 <sd_raw_get_info+0x17c>
    37fc:	4c c0       	rjmp	.+152    	; 0x3896 <sd_raw_get_info+0x202>
    37fe:	c9 30       	cpi	r28, 0x09	; 9
    3800:	71 f1       	breq	.+92     	; 0x385e <sd_raw_get_info+0x1ca>
    3802:	f0 f0       	brcs	.+60     	; 0x3840 <sd_raw_get_info+0x1ac>
    3804:	ca 30       	cpi	r28, 0x0A	; 10
    3806:	79 f1       	breq	.+94     	; 0x3866 <sd_raw_get_info+0x1d2>
    3808:	46 c0       	rjmp	.+140    	; 0x3896 <sd_raw_get_info+0x202>
                {
                    case 5:
                        csd_read_bl_len = b & 0x0f;
    380a:	08 2f       	mov	r16, r24
    380c:	0f 70       	andi	r16, 0x0F	; 15
                        break;
    380e:	d1 cf       	rjmp	.-94     	; 0x37b2 <sd_raw_get_info+0x11e>
                    case 6:
                        csd_c_size = b & 0x03;
    3810:	48 2f       	mov	r20, r24
    3812:	43 70       	andi	r20, 0x03	; 3
    3814:	50 e0       	ldi	r21, 0x00	; 0
    3816:	60 e0       	ldi	r22, 0x00	; 0
    3818:	70 e0       	ldi	r23, 0x00	; 0
                        csd_c_size <<= 8;
    381a:	88 24       	eor	r8, r8
    381c:	94 2e       	mov	r9, r20
    381e:	a5 2e       	mov	r10, r21
    3820:	b6 2e       	mov	r11, r22
                        break;
    3822:	c7 cf       	rjmp	.-114    	; 0x37b2 <sd_raw_get_info+0x11e>
                    case 7:
                        csd_c_size |= b;
    3824:	b5 01       	movw	r22, r10
    3826:	a4 01       	movw	r20, r8
    3828:	48 2b       	or	r20, r24
                        csd_c_size <<= 2;
    382a:	4a 01       	movw	r8, r20
    382c:	5b 01       	movw	r10, r22
    382e:	88 0c       	add	r8, r8
    3830:	99 1c       	adc	r9, r9
    3832:	aa 1c       	adc	r10, r10
    3834:	bb 1c       	adc	r11, r11
    3836:	88 0c       	add	r8, r8
    3838:	99 1c       	adc	r9, r9
    383a:	aa 1c       	adc	r10, r10
    383c:	bb 1c       	adc	r11, r11
                        break;
    383e:	b9 cf       	rjmp	.-142    	; 0x37b2 <sd_raw_get_info+0x11e>
                    case 8:
                        csd_c_size |= b >> 6;
    3840:	82 95       	swap	r24
    3842:	86 95       	lsr	r24
    3844:	86 95       	lsr	r24
    3846:	83 70       	andi	r24, 0x03	; 3
    3848:	b5 01       	movw	r22, r10
    384a:	a4 01       	movw	r20, r8
    384c:	48 2b       	or	r20, r24
                        ++csd_c_size;
    384e:	4a 01       	movw	r8, r20
    3850:	5b 01       	movw	r10, r22
    3852:	ff ef       	ldi	r31, 0xFF	; 255
    3854:	8f 1a       	sub	r8, r31
    3856:	9f 0a       	sbc	r9, r31
    3858:	af 0a       	sbc	r10, r31
    385a:	bf 0a       	sbc	r11, r31
                        break;
    385c:	aa cf       	rjmp	.-172    	; 0x37b2 <sd_raw_get_info+0x11e>
                    case 9:
                        csd_c_size_mult = b & 0x03;
    385e:	83 70       	andi	r24, 0x03	; 3
                        csd_c_size_mult <<= 1;
    3860:	18 2f       	mov	r17, r24
    3862:	11 0f       	add	r17, r17
                        break;
    3864:	a6 cf       	rjmp	.-180    	; 0x37b2 <sd_raw_get_info+0x11e>
                    case 10:
                        csd_c_size_mult |= b >> 7;
    3866:	88 1f       	adc	r24, r24
    3868:	88 27       	eor	r24, r24
    386a:	88 1f       	adc	r24, r24
    386c:	18 2b       	or	r17, r24

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
    386e:	80 2f       	mov	r24, r16
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	81 0f       	add	r24, r17
    3874:	91 1d       	adc	r25, r1
    3876:	02 96       	adiw	r24, 0x02	; 2
    3878:	a5 01       	movw	r20, r10
    387a:	94 01       	movw	r18, r8
    387c:	04 c0       	rjmp	.+8      	; 0x3886 <sd_raw_get_info+0x1f2>
    387e:	22 0f       	add	r18, r18
    3880:	33 1f       	adc	r19, r19
    3882:	44 1f       	adc	r20, r20
    3884:	55 1f       	adc	r21, r21
    3886:	8a 95       	dec	r24
    3888:	d2 f7       	brpl	.-12     	; 0x387e <sd_raw_get_info+0x1ea>
    388a:	f7 01       	movw	r30, r14
    388c:	21 8b       	std	Z+17, r18	; 0x11
    388e:	32 8b       	std	Z+18, r19	; 0x12
    3890:	43 8b       	std	Z+19, r20	; 0x13
    3892:	54 8b       	std	Z+20, r21	; 0x14
                        break;
    3894:	8e cf       	rjmp	.-228    	; 0x37b2 <sd_raw_get_info+0x11e>
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    3896:	d2 31       	cpi	r29, 0x12	; 18
    3898:	08 f4       	brcc	.+2      	; 0x389c <sd_raw_get_info+0x208>
    389a:	8b cf       	rjmp	.-234    	; 0x37b2 <sd_raw_get_info+0x11e>
                }
            }
        }
    }

    unselect_card();
    389c:	2a 9a       	sbi	0x05, 2	; 5

    return 1;
    389e:	cc 24       	eor	r12, r12
    38a0:	c3 94       	inc	r12
    38a2:	01 c0       	rjmp	.+2      	; 0x38a6 <sd_raw_get_info+0x212>
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    if(!info || !sd_raw_available())
        return 0;
    38a4:	c1 2c       	mov	r12, r1
    }

    unselect_card();

    return 1;
}
    38a6:	8c 2d       	mov	r24, r12
    38a8:	df 91       	pop	r29
    38aa:	cf 91       	pop	r28
    38ac:	1f 91       	pop	r17
    38ae:	0f 91       	pop	r16
    38b0:	ff 90       	pop	r15
    38b2:	ef 90       	pop	r14
    38b4:	df 90       	pop	r13
    38b6:	cf 90       	pop	r12
    38b8:	bf 90       	pop	r11
    38ba:	af 90       	pop	r10
    38bc:	9f 90       	pop	r9
    38be:	8f 90       	pop	r8
    38c0:	08 95       	ret

000038c2 <uart_init>:
#define USE_SLEEP 1

void uart_init()
{
    /* set baud rate */
    UBRRH = UBRRVAL >> 8;
    38c2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRRL = UBRRVAL & 0xff;
    38c6:	87 e6       	ldi	r24, 0x67	; 103
    38c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    /* set frame format: 8 bit, no parity, 1 bit */
    UCSRC = UCSRC_SELECT | (1 << UCSZ1) | (1 << UCSZ0);
    38cc:	86 e0       	ldi	r24, 0x06	; 6
    38ce:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    /* enable serial receiver and transmitter */
#if !USE_SLEEP
    UCSRB = (1 << RXEN) | (1 << TXEN);
#else
    UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    38d2:	88 e9       	ldi	r24, 0x98	; 152
    38d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    38d8:	08 95       	ret

000038da <uart_putc>:
#endif
}

void uart_putc(uint8_t c)
{
    38da:	cf 93       	push	r28
    38dc:	c8 2f       	mov	r28, r24
    if(c == '\n')
    38de:	8a 30       	cpi	r24, 0x0A	; 10
    38e0:	19 f4       	brne	.+6      	; 0x38e8 <uart_putc+0xe>
        uart_putc('\r');
    38e2:	8d e0       	ldi	r24, 0x0D	; 13
    38e4:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>

    /* wait until transmit buffer is empty */
    while(!(UCSRA & (1 << UDRE)));
    38e8:	e0 ec       	ldi	r30, 0xC0	; 192
    38ea:	f0 e0       	ldi	r31, 0x00	; 0
    38ec:	90 81       	ld	r25, Z
    38ee:	95 ff       	sbrs	r25, 5
    38f0:	fd cf       	rjmp	.-6      	; 0x38ec <uart_putc+0x12>

    /* send next byte */
    UDR = c;
    38f2:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    38f6:	cf 91       	pop	r28
    38f8:	08 95       	ret

000038fa <uart_putc_hex>:

void uart_putc_hex(uint8_t b)
{
    38fa:	cf 93       	push	r28
    38fc:	c8 2f       	mov	r28, r24
    /* upper nibble */
    if((b >> 4) < 0x0a)
    38fe:	82 95       	swap	r24
    3900:	8f 70       	andi	r24, 0x0F	; 15
    3902:	8a 30       	cpi	r24, 0x0A	; 10
    3904:	20 f4       	brcc	.+8      	; 0x390e <uart_putc_hex+0x14>
        uart_putc((b >> 4) + '0');
    3906:	80 5d       	subi	r24, 0xD0	; 208
    3908:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    390c:	03 c0       	rjmp	.+6      	; 0x3914 <uart_putc_hex+0x1a>
    else
        uart_putc((b >> 4) - 0x0a + 'a');
    390e:	89 5a       	subi	r24, 0xA9	; 169
    3910:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
    3914:	8c 2f       	mov	r24, r28
    3916:	8f 70       	andi	r24, 0x0F	; 15
    3918:	28 2f       	mov	r18, r24
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	2a 30       	cpi	r18, 0x0A	; 10
    391e:	31 05       	cpc	r19, r1
    3920:	24 f4       	brge	.+8      	; 0x392a <uart_putc_hex+0x30>
        uart_putc((b & 0x0f) + '0');
    3922:	80 5d       	subi	r24, 0xD0	; 208
    3924:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    3928:	03 c0       	rjmp	.+6      	; 0x3930 <uart_putc_hex+0x36>
    else
        uart_putc((b & 0x0f) - 0x0a + 'a');
    392a:	89 5a       	subi	r24, 0xA9	; 169
    392c:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
}
    3930:	cf 91       	pop	r28
    3932:	08 95       	ret

00003934 <uart_putw_hex>:

void uart_putw_hex(uint16_t w)
{
    3934:	cf 93       	push	r28
    3936:	c8 2f       	mov	r28, r24
    uart_putc_hex((uint8_t) (w >> 8));
    3938:	89 2f       	mov	r24, r25
    393a:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart_putc_hex>
    uart_putc_hex((uint8_t) (w & 0xff));
    393e:	8c 2f       	mov	r24, r28
    3940:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart_putc_hex>
}
    3944:	cf 91       	pop	r28
    3946:	08 95       	ret

00003948 <uart_putdw_hex>:

void uart_putdw_hex(uint32_t dw)
{
    3948:	cf 92       	push	r12
    394a:	df 92       	push	r13
    394c:	ef 92       	push	r14
    394e:	ff 92       	push	r15
    3950:	6b 01       	movw	r12, r22
    3952:	7c 01       	movw	r14, r24
    uart_putw_hex((uint16_t) (dw >> 16));
    3954:	c7 01       	movw	r24, r14
    3956:	0e 94 9a 1c 	call	0x3934	; 0x3934 <uart_putw_hex>
    uart_putw_hex((uint16_t) (dw & 0xffff));
    395a:	c6 01       	movw	r24, r12
    395c:	0e 94 9a 1c 	call	0x3934	; 0x3934 <uart_putw_hex>
}
    3960:	ff 90       	pop	r15
    3962:	ef 90       	pop	r14
    3964:	df 90       	pop	r13
    3966:	cf 90       	pop	r12
    3968:	08 95       	ret

0000396a <uart_putw_dec>:

void uart_putw_dec(uint16_t w)
{
    396a:	cf 92       	push	r12
    396c:	df 92       	push	r13
    396e:	ef 92       	push	r14
    3970:	ff 92       	push	r15
    3972:	0f 93       	push	r16
    3974:	1f 93       	push	r17
    3976:	cf 93       	push	r28
    3978:	df 93       	push	r29
    397a:	6c 01       	movw	r12, r24
    397c:	0f 2e       	mov	r0, r31
    397e:	f5 e0       	ldi	r31, 0x05	; 5
    3980:	ef 2e       	mov	r14, r31
    3982:	f1 2c       	mov	r15, r1
    3984:	f0 2d       	mov	r31, r0
    uint16_t num = 10000;
    uint8_t started = 0;
    3986:	40 e0       	ldi	r20, 0x00	; 0
    uart_putw_hex((uint16_t) (dw & 0xffff));
}

void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    3988:	c0 e1       	ldi	r28, 0x10	; 16
    398a:	d7 e2       	ldi	r29, 0x27	; 39
    {
        uint8_t b = w / num;
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
    398c:	01 e0       	ldi	r16, 0x01	; 1
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = w / num;
    398e:	c6 01       	movw	r24, r12
    3990:	be 01       	movw	r22, r28
    3992:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <__udivmodhi4>
    3996:	16 2f       	mov	r17, r22
        if(b > 0 || started || num == 1)
    3998:	61 11       	cpse	r22, r1
    399a:	05 c0       	rjmp	.+10     	; 0x39a6 <uart_putw_dec+0x3c>
    399c:	41 11       	cpse	r20, r1
    399e:	03 c0       	rjmp	.+6      	; 0x39a6 <uart_putw_dec+0x3c>
    39a0:	c1 30       	cpi	r28, 0x01	; 1
    39a2:	d1 05       	cpc	r29, r1
    39a4:	29 f4       	brne	.+10     	; 0x39b0 <uart_putw_dec+0x46>
        {
            uart_putc('0' + b);
    39a6:	80 e3       	ldi	r24, 0x30	; 48
    39a8:	81 0f       	add	r24, r17
    39aa:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
            started = 1;
    39ae:	40 2f       	mov	r20, r16
        }
        w -= b * num;
    39b0:	1c 9f       	mul	r17, r28
    39b2:	c0 01       	movw	r24, r0
    39b4:	1d 9f       	mul	r17, r29
    39b6:	90 0d       	add	r25, r0
    39b8:	11 24       	eor	r1, r1
    39ba:	c8 1a       	sub	r12, r24
    39bc:	d9 0a       	sbc	r13, r25

        num /= 10;
    39be:	9e 01       	movw	r18, r28
    39c0:	ad ec       	ldi	r26, 0xCD	; 205
    39c2:	bc ec       	ldi	r27, 0xCC	; 204
    39c4:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__umulhisi3>
    39c8:	ec 01       	movw	r28, r24
    39ca:	d6 95       	lsr	r29
    39cc:	c7 95       	ror	r28
    39ce:	d6 95       	lsr	r29
    39d0:	c7 95       	ror	r28
    39d2:	d6 95       	lsr	r29
    39d4:	c7 95       	ror	r28
    39d6:	81 e0       	ldi	r24, 0x01	; 1
    39d8:	e8 1a       	sub	r14, r24
    39da:	f1 08       	sbc	r15, r1
void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    39dc:	c1 f6       	brne	.-80     	; 0x398e <uart_putw_dec+0x24>
        }
        w -= b * num;

        num /= 10;
    }
}
    39de:	df 91       	pop	r29
    39e0:	cf 91       	pop	r28
    39e2:	1f 91       	pop	r17
    39e4:	0f 91       	pop	r16
    39e6:	ff 90       	pop	r15
    39e8:	ef 90       	pop	r14
    39ea:	df 90       	pop	r13
    39ec:	cf 90       	pop	r12
    39ee:	08 95       	ret

000039f0 <uart_putdw_dec>:

void uart_putdw_dec(uint32_t dw)
{
    39f0:	3f 92       	push	r3
    39f2:	4f 92       	push	r4
    39f4:	5f 92       	push	r5
    39f6:	6f 92       	push	r6
    39f8:	7f 92       	push	r7
    39fa:	8f 92       	push	r8
    39fc:	9f 92       	push	r9
    39fe:	af 92       	push	r10
    3a00:	bf 92       	push	r11
    3a02:	cf 92       	push	r12
    3a04:	df 92       	push	r13
    3a06:	ef 92       	push	r14
    3a08:	ff 92       	push	r15
    3a0a:	0f 93       	push	r16
    3a0c:	1f 93       	push	r17
    3a0e:	cf 93       	push	r28
    3a10:	df 93       	push	r29
    3a12:	4b 01       	movw	r8, r22
    3a14:	5c 01       	movw	r10, r24
    3a16:	0a e0       	ldi	r16, 0x0A	; 10
    3a18:	10 e0       	ldi	r17, 0x00	; 0
    uint32_t num = 1000000000;
    uint8_t started = 0;
    3a1a:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    3a1c:	0f 2e       	mov	r0, r31
    3a1e:	c1 2c       	mov	r12, r1
    3a20:	fa ec       	ldi	r31, 0xCA	; 202
    3a22:	df 2e       	mov	r13, r31
    3a24:	fa e9       	ldi	r31, 0x9A	; 154
    3a26:	ef 2e       	mov	r14, r31
    3a28:	fb e3       	ldi	r31, 0x3B	; 59
    3a2a:	ff 2e       	mov	r15, r31
    3a2c:	f0 2d       	mov	r31, r0
    {
        uint8_t b = dw / num;
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
    3a2e:	33 24       	eor	r3, r3
    3a30:	33 94       	inc	r3
        }
        dw -= b * num;

        num /= 10;
    3a32:	0f 2e       	mov	r0, r31
    3a34:	fa e0       	ldi	r31, 0x0A	; 10
    3a36:	4f 2e       	mov	r4, r31
    3a38:	51 2c       	mov	r5, r1
    3a3a:	61 2c       	mov	r6, r1
    3a3c:	71 2c       	mov	r7, r1
    3a3e:	f0 2d       	mov	r31, r0
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = dw / num;
    3a40:	c5 01       	movw	r24, r10
    3a42:	b4 01       	movw	r22, r8
    3a44:	a7 01       	movw	r20, r14
    3a46:	96 01       	movw	r18, r12
    3a48:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__udivmodsi4>
    3a4c:	c2 2f       	mov	r28, r18
        if(b > 0 || started || num == 1)
    3a4e:	21 11       	cpse	r18, r1
    3a50:	08 c0       	rjmp	.+16     	; 0x3a62 <uart_putdw_dec+0x72>
    3a52:	d1 11       	cpse	r29, r1
    3a54:	06 c0       	rjmp	.+12     	; 0x3a62 <uart_putdw_dec+0x72>
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	c8 16       	cp	r12, r24
    3a5a:	d1 04       	cpc	r13, r1
    3a5c:	e1 04       	cpc	r14, r1
    3a5e:	f1 04       	cpc	r15, r1
    3a60:	29 f4       	brne	.+10     	; 0x3a6c <uart_putdw_dec+0x7c>
        {
            uart_putc('0' + b);
    3a62:	80 e3       	ldi	r24, 0x30	; 48
    3a64:	8c 0f       	add	r24, r28
    3a66:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
            started = 1;
    3a6a:	d3 2d       	mov	r29, r3
        }
        dw -= b * num;
    3a6c:	ac 2f       	mov	r26, r28
    3a6e:	b0 e0       	ldi	r27, 0x00	; 0
    3a70:	a7 01       	movw	r20, r14
    3a72:	96 01       	movw	r18, r12
    3a74:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__muluhisi3>
    3a78:	86 1a       	sub	r8, r22
    3a7a:	97 0a       	sbc	r9, r23
    3a7c:	a8 0a       	sbc	r10, r24
    3a7e:	b9 0a       	sbc	r11, r25

        num /= 10;
    3a80:	c7 01       	movw	r24, r14
    3a82:	b6 01       	movw	r22, r12
    3a84:	a3 01       	movw	r20, r6
    3a86:	92 01       	movw	r18, r4
    3a88:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__udivmodsi4>
    3a8c:	69 01       	movw	r12, r18
    3a8e:	7a 01       	movw	r14, r20
    3a90:	01 50       	subi	r16, 0x01	; 1
    3a92:	11 09       	sbc	r17, r1
void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    3a94:	a9 f6       	brne	.-86     	; 0x3a40 <uart_putdw_dec+0x50>
        }
        dw -= b * num;

        num /= 10;
    }
}
    3a96:	df 91       	pop	r29
    3a98:	cf 91       	pop	r28
    3a9a:	1f 91       	pop	r17
    3a9c:	0f 91       	pop	r16
    3a9e:	ff 90       	pop	r15
    3aa0:	ef 90       	pop	r14
    3aa2:	df 90       	pop	r13
    3aa4:	cf 90       	pop	r12
    3aa6:	bf 90       	pop	r11
    3aa8:	af 90       	pop	r10
    3aaa:	9f 90       	pop	r9
    3aac:	8f 90       	pop	r8
    3aae:	7f 90       	pop	r7
    3ab0:	6f 90       	pop	r6
    3ab2:	5f 90       	pop	r5
    3ab4:	4f 90       	pop	r4
    3ab6:	3f 90       	pop	r3
    3ab8:	08 95       	ret

00003aba <uart_puts>:

void uart_puts(const char* str)
{
    3aba:	cf 93       	push	r28
    3abc:	df 93       	push	r29
    3abe:	ec 01       	movw	r28, r24
    while(*str)
    3ac0:	88 81       	ld	r24, Y
    3ac2:	88 23       	and	r24, r24
    3ac4:	31 f0       	breq	.+12     	; 0x3ad2 <uart_puts+0x18>
    3ac6:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*str++);
    3ac8:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>
    }
}

void uart_puts(const char* str)
{
    while(*str)
    3acc:	89 91       	ld	r24, Y+
    3ace:	81 11       	cpse	r24, r1
    3ad0:	fb cf       	rjmp	.-10     	; 0x3ac8 <uart_puts+0xe>
        uart_putc(*str++);
}
    3ad2:	df 91       	pop	r29
    3ad4:	cf 91       	pop	r28
    3ad6:	08 95       	ret

00003ad8 <uart_puts_p>:

void uart_puts_p(PGM_P str)
{
    3ad8:	cf 93       	push	r28
    3ada:	df 93       	push	r29
    while(1)
    {
        uint8_t b = pgm_read_byte_near(str++);
    3adc:	ec 01       	movw	r28, r24
    3ade:	21 96       	adiw	r28, 0x01	; 1
    3ae0:	fc 01       	movw	r30, r24
    3ae2:	84 91       	lpm	r24, Z
        if(!b)
    3ae4:	88 23       	and	r24, r24
    3ae6:	39 f0       	breq	.+14     	; 0x3af6 <uart_puts_p+0x1e>
            break;

        uart_putc(b);
    3ae8:	0e 94 6d 1c 	call	0x38da	; 0x38da <uart_putc>

void uart_puts_p(PGM_P str)
{
    while(1)
    {
        uint8_t b = pgm_read_byte_near(str++);
    3aec:	fe 01       	movw	r30, r28
    3aee:	84 91       	lpm	r24, Z
    3af0:	21 96       	adiw	r28, 0x01	; 1
        if(!b)
    3af2:	81 11       	cpse	r24, r1
    3af4:	f9 cf       	rjmp	.-14     	; 0x3ae8 <uart_puts_p+0x10>
            break;

        uart_putc(b);
    }
}
    3af6:	df 91       	pop	r29
    3af8:	cf 91       	pop	r28
    3afa:	08 95       	ret

00003afc <uart_getc>:

uint8_t uart_getc()
{
    /* wait until receive buffer is full */
#if USE_SLEEP
    uint8_t sreg = SREG;
    3afc:	9f b7       	in	r25, 0x3f	; 63
    sei();
    3afe:	78 94       	sei

    while(!(UCSRA & (1 << RXC)))
    3b00:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3b04:	88 23       	and	r24, r24
    3b06:	64 f0       	brlt	.+24     	; 0x3b20 <uart_getc+0x24>
    3b08:	e0 ec       	ldi	r30, 0xC0	; 192
    3b0a:	f0 e0       	ldi	r31, 0x00	; 0
        sleep_mode();
    3b0c:	83 b7       	in	r24, 0x33	; 51
    3b0e:	81 60       	ori	r24, 0x01	; 1
    3b10:	83 bf       	out	0x33, r24	; 51
    3b12:	88 95       	sleep
    3b14:	83 b7       	in	r24, 0x33	; 51
    3b16:	8e 7f       	andi	r24, 0xFE	; 254
    3b18:	83 bf       	out	0x33, r24	; 51
    /* wait until receive buffer is full */
#if USE_SLEEP
    uint8_t sreg = SREG;
    sei();

    while(!(UCSRA & (1 << RXC)))
    3b1a:	80 81       	ld	r24, Z
    3b1c:	88 23       	and	r24, r24
    3b1e:	b4 f7       	brge	.-20     	; 0x3b0c <uart_getc+0x10>
        sleep_mode();

    SREG = sreg;
    3b20:	9f bf       	out	0x3f, r25	; 63
#else
    while(!(UCSRA & (1 << RXC)));
#endif

    uint8_t b = UDR;
    3b22:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    if(b == '\r')
    3b26:	8d 30       	cpi	r24, 0x0D	; 13
    3b28:	09 f4       	brne	.+2      	; 0x3b2c <uart_getc+0x30>
        b = '\n';
    3b2a:	8a e0       	ldi	r24, 0x0A	; 10

    return b;
}
    3b2c:	08 95       	ret

00003b2e <__vector_18>:

EMPTY_INTERRUPT(USART_RXC_vect)
    3b2e:	18 95       	reti

00003b30 <__mulsi3>:
    3b30:	db 01       	movw	r26, r22
    3b32:	8f 93       	push	r24
    3b34:	9f 93       	push	r25
    3b36:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__muluhisi3>
    3b3a:	bf 91       	pop	r27
    3b3c:	af 91       	pop	r26
    3b3e:	a2 9f       	mul	r26, r18
    3b40:	80 0d       	add	r24, r0
    3b42:	91 1d       	adc	r25, r1
    3b44:	a3 9f       	mul	r26, r19
    3b46:	90 0d       	add	r25, r0
    3b48:	b2 9f       	mul	r27, r18
    3b4a:	90 0d       	add	r25, r0
    3b4c:	11 24       	eor	r1, r1
    3b4e:	08 95       	ret

00003b50 <__udivmodhi4>:
    3b50:	aa 1b       	sub	r26, r26
    3b52:	bb 1b       	sub	r27, r27
    3b54:	51 e1       	ldi	r21, 0x11	; 17
    3b56:	07 c0       	rjmp	.+14     	; 0x3b66 <__udivmodhi4_ep>

00003b58 <__udivmodhi4_loop>:
    3b58:	aa 1f       	adc	r26, r26
    3b5a:	bb 1f       	adc	r27, r27
    3b5c:	a6 17       	cp	r26, r22
    3b5e:	b7 07       	cpc	r27, r23
    3b60:	10 f0       	brcs	.+4      	; 0x3b66 <__udivmodhi4_ep>
    3b62:	a6 1b       	sub	r26, r22
    3b64:	b7 0b       	sbc	r27, r23

00003b66 <__udivmodhi4_ep>:
    3b66:	88 1f       	adc	r24, r24
    3b68:	99 1f       	adc	r25, r25
    3b6a:	5a 95       	dec	r21
    3b6c:	a9 f7       	brne	.-22     	; 0x3b58 <__udivmodhi4_loop>
    3b6e:	80 95       	com	r24
    3b70:	90 95       	com	r25
    3b72:	bc 01       	movw	r22, r24
    3b74:	cd 01       	movw	r24, r26
    3b76:	08 95       	ret

00003b78 <__divmodhi4>:
    3b78:	97 fb       	bst	r25, 7
    3b7a:	07 2e       	mov	r0, r23
    3b7c:	16 f4       	brtc	.+4      	; 0x3b82 <__divmodhi4+0xa>
    3b7e:	00 94       	com	r0
    3b80:	07 d0       	rcall	.+14     	; 0x3b90 <__divmodhi4_neg1>
    3b82:	77 fd       	sbrc	r23, 7
    3b84:	09 d0       	rcall	.+18     	; 0x3b98 <__divmodhi4_neg2>
    3b86:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <__udivmodhi4>
    3b8a:	07 fc       	sbrc	r0, 7
    3b8c:	05 d0       	rcall	.+10     	; 0x3b98 <__divmodhi4_neg2>
    3b8e:	3e f4       	brtc	.+14     	; 0x3b9e <__divmodhi4_exit>

00003b90 <__divmodhi4_neg1>:
    3b90:	90 95       	com	r25
    3b92:	81 95       	neg	r24
    3b94:	9f 4f       	sbci	r25, 0xFF	; 255
    3b96:	08 95       	ret

00003b98 <__divmodhi4_neg2>:
    3b98:	70 95       	com	r23
    3b9a:	61 95       	neg	r22
    3b9c:	7f 4f       	sbci	r23, 0xFF	; 255

00003b9e <__divmodhi4_exit>:
    3b9e:	08 95       	ret

00003ba0 <__udivmodsi4>:
    3ba0:	a1 e2       	ldi	r26, 0x21	; 33
    3ba2:	1a 2e       	mov	r1, r26
    3ba4:	aa 1b       	sub	r26, r26
    3ba6:	bb 1b       	sub	r27, r27
    3ba8:	fd 01       	movw	r30, r26
    3baa:	0d c0       	rjmp	.+26     	; 0x3bc6 <__udivmodsi4_ep>

00003bac <__udivmodsi4_loop>:
    3bac:	aa 1f       	adc	r26, r26
    3bae:	bb 1f       	adc	r27, r27
    3bb0:	ee 1f       	adc	r30, r30
    3bb2:	ff 1f       	adc	r31, r31
    3bb4:	a2 17       	cp	r26, r18
    3bb6:	b3 07       	cpc	r27, r19
    3bb8:	e4 07       	cpc	r30, r20
    3bba:	f5 07       	cpc	r31, r21
    3bbc:	20 f0       	brcs	.+8      	; 0x3bc6 <__udivmodsi4_ep>
    3bbe:	a2 1b       	sub	r26, r18
    3bc0:	b3 0b       	sbc	r27, r19
    3bc2:	e4 0b       	sbc	r30, r20
    3bc4:	f5 0b       	sbc	r31, r21

00003bc6 <__udivmodsi4_ep>:
    3bc6:	66 1f       	adc	r22, r22
    3bc8:	77 1f       	adc	r23, r23
    3bca:	88 1f       	adc	r24, r24
    3bcc:	99 1f       	adc	r25, r25
    3bce:	1a 94       	dec	r1
    3bd0:	69 f7       	brne	.-38     	; 0x3bac <__udivmodsi4_loop>
    3bd2:	60 95       	com	r22
    3bd4:	70 95       	com	r23
    3bd6:	80 95       	com	r24
    3bd8:	90 95       	com	r25
    3bda:	9b 01       	movw	r18, r22
    3bdc:	ac 01       	movw	r20, r24
    3bde:	bd 01       	movw	r22, r26
    3be0:	cf 01       	movw	r24, r30
    3be2:	08 95       	ret

00003be4 <__tablejump2__>:
    3be4:	ee 0f       	add	r30, r30
    3be6:	ff 1f       	adc	r31, r31
    3be8:	05 90       	lpm	r0, Z+
    3bea:	f4 91       	lpm	r31, Z
    3bec:	e0 2d       	mov	r30, r0
    3bee:	09 94       	ijmp

00003bf0 <__umulhisi3>:
    3bf0:	a2 9f       	mul	r26, r18
    3bf2:	b0 01       	movw	r22, r0
    3bf4:	b3 9f       	mul	r27, r19
    3bf6:	c0 01       	movw	r24, r0
    3bf8:	a3 9f       	mul	r26, r19
    3bfa:	70 0d       	add	r23, r0
    3bfc:	81 1d       	adc	r24, r1
    3bfe:	11 24       	eor	r1, r1
    3c00:	91 1d       	adc	r25, r1
    3c02:	b2 9f       	mul	r27, r18
    3c04:	70 0d       	add	r23, r0
    3c06:	81 1d       	adc	r24, r1
    3c08:	11 24       	eor	r1, r1
    3c0a:	91 1d       	adc	r25, r1
    3c0c:	08 95       	ret

00003c0e <__muluhisi3>:
    3c0e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__umulhisi3>
    3c12:	a5 9f       	mul	r26, r21
    3c14:	90 0d       	add	r25, r0
    3c16:	b4 9f       	mul	r27, r20
    3c18:	90 0d       	add	r25, r0
    3c1a:	a4 9f       	mul	r26, r20
    3c1c:	80 0d       	add	r24, r0
    3c1e:	91 1d       	adc	r25, r1
    3c20:	11 24       	eor	r1, r1
    3c22:	08 95       	ret

00003c24 <strcmp_P>:
    3c24:	fb 01       	movw	r30, r22
    3c26:	dc 01       	movw	r26, r24
    3c28:	8d 91       	ld	r24, X+
    3c2a:	05 90       	lpm	r0, Z+
    3c2c:	80 19       	sub	r24, r0
    3c2e:	01 10       	cpse	r0, r1
    3c30:	d9 f3       	breq	.-10     	; 0x3c28 <strcmp_P+0x4>
    3c32:	99 0b       	sbc	r25, r25
    3c34:	08 95       	ret

00003c36 <strncmp_P>:
    3c36:	fb 01       	movw	r30, r22
    3c38:	dc 01       	movw	r26, r24
    3c3a:	41 50       	subi	r20, 0x01	; 1
    3c3c:	50 40       	sbci	r21, 0x00	; 0
    3c3e:	30 f0       	brcs	.+12     	; 0x3c4c <strncmp_P+0x16>
    3c40:	8d 91       	ld	r24, X+
    3c42:	05 90       	lpm	r0, Z+
    3c44:	80 19       	sub	r24, r0
    3c46:	19 f4       	brne	.+6      	; 0x3c4e <strncmp_P+0x18>
    3c48:	00 20       	and	r0, r0
    3c4a:	b9 f7       	brne	.-18     	; 0x3c3a <strncmp_P+0x4>
    3c4c:	88 1b       	sub	r24, r24
    3c4e:	99 0b       	sbc	r25, r25
    3c50:	08 95       	ret

00003c52 <memcpy>:
    3c52:	fb 01       	movw	r30, r22
    3c54:	dc 01       	movw	r26, r24
    3c56:	02 c0       	rjmp	.+4      	; 0x3c5c <memcpy+0xa>
    3c58:	01 90       	ld	r0, Z+
    3c5a:	0d 92       	st	X+, r0
    3c5c:	41 50       	subi	r20, 0x01	; 1
    3c5e:	50 40       	sbci	r21, 0x00	; 0
    3c60:	d8 f7       	brcc	.-10     	; 0x3c58 <memcpy+0x6>
    3c62:	08 95       	ret

00003c64 <memset>:
    3c64:	dc 01       	movw	r26, r24
    3c66:	01 c0       	rjmp	.+2      	; 0x3c6a <memset+0x6>
    3c68:	6d 93       	st	X+, r22
    3c6a:	41 50       	subi	r20, 0x01	; 1
    3c6c:	50 40       	sbci	r21, 0x00	; 0
    3c6e:	e0 f7       	brcc	.-8      	; 0x3c68 <memset+0x4>
    3c70:	08 95       	ret

00003c72 <strchr>:
    3c72:	fc 01       	movw	r30, r24
    3c74:	81 91       	ld	r24, Z+
    3c76:	86 17       	cp	r24, r22
    3c78:	21 f0       	breq	.+8      	; 0x3c82 <strchr+0x10>
    3c7a:	88 23       	and	r24, r24
    3c7c:	d9 f7       	brne	.-10     	; 0x3c74 <strchr+0x2>
    3c7e:	99 27       	eor	r25, r25
    3c80:	08 95       	ret
    3c82:	31 97       	sbiw	r30, 0x01	; 1
    3c84:	cf 01       	movw	r24, r30
    3c86:	08 95       	ret

00003c88 <strcmp>:
    3c88:	fb 01       	movw	r30, r22
    3c8a:	dc 01       	movw	r26, r24
    3c8c:	8d 91       	ld	r24, X+
    3c8e:	01 90       	ld	r0, Z+
    3c90:	80 19       	sub	r24, r0
    3c92:	01 10       	cpse	r0, r1
    3c94:	d9 f3       	breq	.-10     	; 0x3c8c <strcmp+0x4>
    3c96:	99 0b       	sbc	r25, r25
    3c98:	08 95       	ret

00003c9a <strncmp>:
    3c9a:	fb 01       	movw	r30, r22
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	41 50       	subi	r20, 0x01	; 1
    3ca0:	50 40       	sbci	r21, 0x00	; 0
    3ca2:	30 f0       	brcs	.+12     	; 0x3cb0 <strncmp+0x16>
    3ca4:	8d 91       	ld	r24, X+
    3ca6:	01 90       	ld	r0, Z+
    3ca8:	80 19       	sub	r24, r0
    3caa:	19 f4       	brne	.+6      	; 0x3cb2 <strncmp+0x18>
    3cac:	00 20       	and	r0, r0
    3cae:	b9 f7       	brne	.-18     	; 0x3c9e <strncmp+0x4>
    3cb0:	88 1b       	sub	r24, r24
    3cb2:	99 0b       	sbc	r25, r25
    3cb4:	08 95       	ret

00003cb6 <strncpy>:
    3cb6:	fb 01       	movw	r30, r22
    3cb8:	dc 01       	movw	r26, r24
    3cba:	41 50       	subi	r20, 0x01	; 1
    3cbc:	50 40       	sbci	r21, 0x00	; 0
    3cbe:	48 f0       	brcs	.+18     	; 0x3cd2 <strncpy+0x1c>
    3cc0:	01 90       	ld	r0, Z+
    3cc2:	0d 92       	st	X+, r0
    3cc4:	00 20       	and	r0, r0
    3cc6:	c9 f7       	brne	.-14     	; 0x3cba <strncpy+0x4>
    3cc8:	01 c0       	rjmp	.+2      	; 0x3ccc <strncpy+0x16>
    3cca:	1d 92       	st	X+, r1
    3ccc:	41 50       	subi	r20, 0x01	; 1
    3cce:	50 40       	sbci	r21, 0x00	; 0
    3cd0:	e0 f7       	brcc	.-8      	; 0x3cca <strncpy+0x14>
    3cd2:	08 95       	ret

00003cd4 <strrchr>:
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	01 90       	ld	r0, Z+
    3cdc:	06 16       	cp	r0, r22
    3cde:	09 f4       	brne	.+2      	; 0x3ce2 <strrchr+0xe>
    3ce0:	cf 01       	movw	r24, r30
    3ce2:	00 20       	and	r0, r0
    3ce4:	d1 f7       	brne	.-12     	; 0x3cda <strrchr+0x6>
    3ce6:	01 97       	sbiw	r24, 0x01	; 1
    3ce8:	08 95       	ret

00003cea <_exit>:
    3cea:	f8 94       	cli

00003cec <__stop_program>:
    3cec:	ff cf       	rjmp	.-2      	; 0x3cec <__stop_program>
