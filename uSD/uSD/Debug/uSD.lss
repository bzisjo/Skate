
uSD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000043b2  00004446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000043b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002fe  00800124  00800124  0000446a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000446a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000449c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  000044dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000054d8  00000000  00000000  00004754  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001131  00000000  00000000  00009c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000028a1  00000000  00000000  0000ad5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ef8  00000000  00000000  0000d600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f87  00000000  00000000  0000e4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000076ac  00000000  00000000  0000f47f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d8  00000000  00000000  00016b2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__ctors_end>
       4:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
       8:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
       c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      10:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      14:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      18:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      1c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      20:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      24:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      28:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      2c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      30:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      34:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      38:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      3c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      40:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      44:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      48:	0c 94 5c 20 	jmp	0x40b8	; 0x40b8 <__vector_18>
      4c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      50:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      54:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      58:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      5c:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      60:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      64:	0c 94 09 01 	jmp	0x212	; 0x212 <__bad_interrupt>
      68:	3d 1e       	adc	r3, r29
      6a:	40 1e       	adc	r4, r16
      6c:	40 1e       	adc	r4, r16
      6e:	44 1e       	adc	r4, r20
      70:	44 1e       	adc	r4, r20
      72:	44 1e       	adc	r4, r20
      74:	44 1e       	adc	r4, r20
      76:	44 1e       	adc	r4, r20
      78:	46 1e       	adc	r4, r22
      7a:	49 1e       	adc	r4, r25
      7c:	49 1e       	adc	r4, r25
      7e:	49 1e       	adc	r4, r25
      80:	49 1e       	adc	r4, r25
      82:	62 1e       	adc	r6, r18
      84:	67 1e       	adc	r6, r23

00000086 <__trampolines_end>:
      86:	66 72       	andi	r22, 0x26	; 38
      88:	65 65       	ori	r22, 0x55	; 85
      8a:	3a 20       	and	r3, r10
      8c:	20 20       	and	r2, r0
	...

0000008f <__c.2078>:
      8f:	66 6f 72 6d 61 74 3a 20 00                          format: .

00000098 <__c.2076>:
      98:	77 72 2e 70 72 2e 3a 20 00                          wr.pr.: .

000000a1 <__c.2074>:
      a1:	63 6f 70 79 3a 20 20 20 00                          copy:   .

000000aa <__c.2072>:
      aa:	4d 42 0a 00                                         MB..

000000ae <__c.2070>:
      ae:	73 69 7a 65 3a 20 20 20 00                          size:   .

000000b7 <__c.2068>:
      b7:	64 61 74 65 3a 20 20 20 00                          date:   .

000000c0 <__c.2066>:
      c0:	73 65 72 69 61 6c 3a 20 30 78 00                    serial: 0x.

000000cb <__c.2064>:
      cb:	72 65 76 3a 20 20 20 20 00                          rev:    .

000000d4 <__c.2062>:
      d4:	70 72 6f 64 3a 20 20 20 00                          prod:   .

000000dd <__c.2060>:
      dd:	6f 65 6d 3a 20 20 20 20 00                          oem:    .

000000e6 <__c.2058>:
      e6:	6d 61 6e 75 66 3a 20 20 30 78 00                    manuf:  0x.

000000f1 <__c.2018>:
      f1:	64 6f 6e 65 0a 00                                   done..

000000f7 <__c.2016>:
      f7:	65 72 72 6f 72 20 73 79 6e 63 69 6e 67 20 64 69     error syncing di
     107:	73 6b 0a 00                                         sk..

0000010b <__c.2013>:
     10b:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     11b:	20 66 69 6c 65 0a 00                                 file..

00000122 <__c.2011>:
     122:	77 72 69 74 69 6e 67 20 68 61 70 70 65 6e 73 20     writing happens 
     132:	6e 6f 77 0a 00                                      now..

00000137 <__c.2007>:
     137:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
     147:	20 00                                                .

00000149 <__c.2004>:
     149:	6f 70 65 6e 20 65 72 72 6f 72 0a 00                 open error..

00000155 <__c.2000>:
     155:	6f 70 65 6e 69 6e 67 20 72 6f 6f 74 20 64 69 72     opening root dir
     165:	65 63 74 6f 72 79 20 66 61 69 6c 65 64 0a 00        ectory failed..

00000174 <__c.1996>:
     174:	6f 70 65 6e 69 6e 67 20 66 69 6c 65 73 79 73 74     opening filesyst
     184:	65 6d 20 66 61 69 6c 65 64 0a 00                    em failed..

0000018f <__c.1993>:
     18f:	6f 70 65 6e 69 6e 67 20 70 61 72 74 69 74 69 6f     opening partitio
     19f:	6e 20 66 61 69 6c 65 64 0a 00                       n failed..

000001a9 <__c.1990>:
     1a9:	4d 4d 43 2f 53 44 20 69 6e 69 74 69 61 6c 69 7a     MMC/SD initializ
     1b9:	61 74 69 6f 6e 20 66 61 69 6c 65 64 0a 00           ation failed..

000001c7 <__c.1988>:
     1c7:	67 6f 69 6e 67 20 69 6e 74 6f 20 69 6e 69 74 0a     going into init.
	...

000001d8 <__ctors_end>:
     1d8:	11 24       	eor	r1, r1
     1da:	1f be       	out	0x3f, r1	; 63
     1dc:	cf ef       	ldi	r28, 0xFF	; 255
     1de:	d8 e0       	ldi	r29, 0x08	; 8
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	cd bf       	out	0x3d, r28	; 61

000001e4 <__do_copy_data>:
     1e4:	11 e0       	ldi	r17, 0x01	; 1
     1e6:	a0 e0       	ldi	r26, 0x00	; 0
     1e8:	b1 e0       	ldi	r27, 0x01	; 1
     1ea:	e2 eb       	ldi	r30, 0xB2	; 178
     1ec:	f3 e4       	ldi	r31, 0x43	; 67
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <__do_copy_data+0x10>
     1f0:	05 90       	lpm	r0, Z+
     1f2:	0d 92       	st	X+, r0
     1f4:	a4 32       	cpi	r26, 0x24	; 36
     1f6:	b1 07       	cpc	r27, r17
     1f8:	d9 f7       	brne	.-10     	; 0x1f0 <__do_copy_data+0xc>

000001fa <__do_clear_bss>:
     1fa:	24 e0       	ldi	r18, 0x04	; 4
     1fc:	a4 e2       	ldi	r26, 0x24	; 36
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	01 c0       	rjmp	.+2      	; 0x204 <.do_clear_bss_start>

00000202 <.do_clear_bss_loop>:
     202:	1d 92       	st	X+, r1

00000204 <.do_clear_bss_start>:
     204:	a2 32       	cpi	r26, 0x22	; 34
     206:	b2 07       	cpc	r27, r18
     208:	e1 f7       	brne	.-8      	; 0x202 <.do_clear_bss_loop>
     20a:	0e 94 33 16 	call	0x2c66	; 0x2c66 <main>
     20e:	0c 94 d7 21 	jmp	0x43ae	; 0x43ae <_exit>

00000212 <__bad_interrupt>:
     212:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000216 <read16>:
 * \param[in] p Pointer from where to read the integer.
 * \returns The 16-bit integer read from memory.
 */
uint16_t read16(const uint8_t* p)
{
    return (((uint16_t) p[1]) << 8) |
     216:	fc 01       	movw	r30, r24
     218:	21 81       	ldd	r18, Z+1	; 0x01
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	32 2f       	mov	r19, r18
     21e:	22 27       	eor	r18, r18
           (((uint16_t) p[0]) << 0);
     220:	80 81       	ld	r24, Z
}
     222:	a9 01       	movw	r20, r18
     224:	48 2b       	or	r20, r24
     226:	ca 01       	movw	r24, r20
     228:	08 95       	ret

0000022a <read32>:
 *
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
     22a:	fc 01       	movw	r30, r24
    return (((uint32_t) p[3]) << 24) |
     22c:	23 81       	ldd	r18, Z+3	; 0x03
           (((uint32_t) p[2]) << 16) |
     22e:	62 81       	ldd	r22, Z+2	; 0x02
     230:	86 2f       	mov	r24, r22
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	a0 e0       	ldi	r26, 0x00	; 0
     236:	b0 e0       	ldi	r27, 0x00	; 0
     238:	dc 01       	movw	r26, r24
     23a:	99 27       	eor	r25, r25
     23c:	88 27       	eor	r24, r24
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
     23e:	b2 2b       	or	r27, r18
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
     240:	20 81       	ld	r18, Z
     242:	82 2b       	or	r24, r18
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
     244:	21 81       	ldd	r18, Z+1	; 0x01
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
     246:	bc 01       	movw	r22, r24
     248:	cd 01       	movw	r24, r26
     24a:	72 2b       	or	r23, r18
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
}
     24c:	08 95       	ret

0000024e <write16>:
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 16-bit integer to write.
 */
void write16(uint8_t* p, uint16_t i)
{
    p[1] = (uint8_t) ((i & 0xff00) >> 8);
     24e:	fc 01       	movw	r30, r24
     250:	71 83       	std	Z+1, r23	; 0x01
    p[0] = (uint8_t) ((i & 0x00ff) >> 0);
     252:	60 83       	st	Z, r22
     254:	08 95       	ret

00000256 <write32>:
 *
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 32-bit integer to write.
 */
void write32(uint8_t* p, uint32_t i)
{
     256:	fc 01       	movw	r30, r24
    p[3] = (uint8_t) ((i & 0xff000000) >> 24);
     258:	73 83       	std	Z+3, r23	; 0x03
    p[2] = (uint8_t) ((i & 0x00ff0000) >> 16);
     25a:	62 83       	std	Z+2, r22	; 0x02
    p[1] = (uint8_t) ((i & 0x0000ff00) >>  8);
     25c:	51 83       	std	Z+1, r21	; 0x01
    p[0] = (uint8_t) ((i & 0x000000ff) >>  0);
     25e:	40 83       	st	Z, r20
     260:	08 95       	ret

00000262 <fat_get_next_cluster>:
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    return 1;
}
     262:	8f 92       	push	r8
     264:	9f 92       	push	r9
     266:	af 92       	push	r10
     268:	bf 92       	push	r11
     26a:	cf 92       	push	r12
     26c:	df 92       	push	r13
     26e:	ef 92       	push	r14
     270:	ff 92       	push	r15
     272:	0f 93       	push	r16
     274:	1f 93       	push	r17
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	00 d0       	rcall	.+0      	; 0x27c <fat_get_next_cluster+0x1a>
     27c:	00 d0       	rcall	.+0      	; 0x27e <fat_get_next_cluster+0x1c>
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
     282:	00 97       	sbiw	r24, 0x00	; 0
     284:	09 f4       	brne	.+2      	; 0x288 <fat_get_next_cluster+0x26>
     286:	85 c0       	rjmp	.+266    	; 0x392 <fat_get_next_cluster+0x130>
     288:	42 30       	cpi	r20, 0x02	; 2
     28a:	51 05       	cpc	r21, r1
     28c:	61 05       	cpc	r22, r1
     28e:	71 05       	cpc	r23, r1
     290:	08 f4       	brcc	.+2      	; 0x294 <fat_get_next_cluster+0x32>
     292:	84 c0       	rjmp	.+264    	; 0x39c <fat_get_next_cluster+0x13a>
     294:	fc 01       	movw	r30, r24
     296:	a0 81       	ld	r26, Z
     298:	b1 81       	ldd	r27, Z+1	; 0x01
     29a:	18 96       	adiw	r26, 0x08	; 8
     29c:	8c 91       	ld	r24, X
     29e:	18 97       	sbiw	r26, 0x08	; 8
     2a0:	8b 30       	cpi	r24, 0x0B	; 11
     2a2:	09 f0       	breq	.+2      	; 0x2a6 <fat_get_next_cluster+0x44>
     2a4:	40 c0       	rjmp	.+128    	; 0x326 <fat_get_next_cluster+0xc4>
     2a6:	4a 01       	movw	r8, r20
     2a8:	5b 01       	movw	r10, r22
     2aa:	24 2f       	mov	r18, r20
     2ac:	39 2d       	mov	r19, r9
     2ae:	4a 2d       	mov	r20, r10
     2b0:	5b 2d       	mov	r21, r11
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	70 e0       	ldi	r23, 0x00	; 0
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	02 e0       	ldi	r16, 0x02	; 2
     2bc:	0e 94 30 21 	call	0x4260	; 0x4260 <__ashldi3>
     2c0:	a2 84       	ldd	r10, Z+10	; 0x0a
     2c2:	b3 84       	ldd	r11, Z+11	; 0x0b
     2c4:	c4 84       	ldd	r12, Z+12	; 0x0c
     2c6:	d5 84       	ldd	r13, Z+13	; 0x0d
     2c8:	e6 84       	ldd	r14, Z+14	; 0x0e
     2ca:	f7 84       	ldd	r15, Z+15	; 0x0f
     2cc:	00 89       	ldd	r16, Z+16	; 0x10
     2ce:	11 89       	ldd	r17, Z+17	; 0x11
     2d0:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
     2d4:	ed 91       	ld	r30, X+
     2d6:	fc 91       	ld	r31, X
     2d8:	68 94       	set
     2da:	ee 24       	eor	r14, r14
     2dc:	e2 f8       	bld	r14, 2
     2de:	f1 2c       	mov	r15, r1
     2e0:	8e 01       	movw	r16, r28
     2e2:	0f 5f       	subi	r16, 0xFF	; 255
     2e4:	1f 4f       	sbci	r17, 0xFF	; 255
     2e6:	09 95       	icall
     2e8:	88 23       	and	r24, r24
     2ea:	c1 f0       	breq	.+48     	; 0x31c <fat_get_next_cluster+0xba>
     2ec:	c9 80       	ldd	r12, Y+1	; 0x01
     2ee:	da 80       	ldd	r13, Y+2	; 0x02
     2f0:	eb 80       	ldd	r14, Y+3	; 0x03
     2f2:	fc 80       	ldd	r15, Y+4	; 0x04
     2f4:	c1 14       	cp	r12, r1
     2f6:	d1 04       	cpc	r13, r1
     2f8:	e1 04       	cpc	r14, r1
     2fa:	f1 04       	cpc	r15, r1
     2fc:	79 f0       	breq	.+30     	; 0x31c <fat_get_next_cluster+0xba>
     2fe:	d7 01       	movw	r26, r14
     300:	c6 01       	movw	r24, r12
     302:	80 5f       	subi	r24, 0xF0	; 240
     304:	9f 4f       	sbci	r25, 0xFF	; 255
     306:	af 4f       	sbci	r26, 0xFF	; 255
     308:	bf 40       	sbci	r27, 0x0F	; 15
     30a:	40 97       	sbiw	r24, 0x10	; 16
     30c:	a1 05       	cpc	r26, r1
     30e:	b1 05       	cpc	r27, r1
     310:	28 f0       	brcs	.+10     	; 0x31c <fat_get_next_cluster+0xba>
     312:	6c 2d       	mov	r22, r12
     314:	7d 2d       	mov	r23, r13
     316:	8e 2d       	mov	r24, r14
     318:	9f 2d       	mov	r25, r15
     31a:	44 c0       	rjmp	.+136    	; 0x3a4 <fat_get_next_cluster+0x142>
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	3f c0       	rjmp	.+126    	; 0x3a4 <fat_get_next_cluster+0x142>
     326:	4a 01       	movw	r8, r20
     328:	5b 01       	movw	r10, r22
     32a:	24 2f       	mov	r18, r20
     32c:	39 2d       	mov	r19, r9
     32e:	4a 2d       	mov	r20, r10
     330:	5b 2d       	mov	r21, r11
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	01 e0       	ldi	r16, 0x01	; 1
     33c:	0e 94 30 21 	call	0x4260	; 0x4260 <__ashldi3>
     340:	a2 84       	ldd	r10, Z+10	; 0x0a
     342:	b3 84       	ldd	r11, Z+11	; 0x0b
     344:	c4 84       	ldd	r12, Z+12	; 0x0c
     346:	d5 84       	ldd	r13, Z+13	; 0x0d
     348:	e6 84       	ldd	r14, Z+14	; 0x0e
     34a:	f7 84       	ldd	r15, Z+15	; 0x0f
     34c:	00 89       	ldd	r16, Z+16	; 0x10
     34e:	11 89       	ldd	r17, Z+17	; 0x11
     350:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
     354:	ed 91       	ld	r30, X+
     356:	fc 91       	ld	r31, X
     358:	68 94       	set
     35a:	ee 24       	eor	r14, r14
     35c:	e1 f8       	bld	r14, 1
     35e:	f1 2c       	mov	r15, r1
     360:	8e 01       	movw	r16, r28
     362:	0f 5f       	subi	r16, 0xFF	; 255
     364:	1f 4f       	sbci	r17, 0xFF	; 255
     366:	09 95       	icall
     368:	88 23       	and	r24, r24
     36a:	71 f0       	breq	.+28     	; 0x388 <fat_get_next_cluster+0x126>
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	9a 81       	ldd	r25, Y+2	; 0x02
     370:	6c 01       	movw	r12, r24
     372:	e1 2c       	mov	r14, r1
     374:	f1 2c       	mov	r15, r1
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	8f 3e       	cpi	r24, 0xEF	; 239
     37a:	9f 4f       	sbci	r25, 0xFF	; 255
     37c:	28 f4       	brcc	.+10     	; 0x388 <fat_get_next_cluster+0x126>
     37e:	6c 2d       	mov	r22, r12
     380:	7d 2d       	mov	r23, r13
     382:	8e 2d       	mov	r24, r14
     384:	9f 2d       	mov	r25, r15
     386:	0e c0       	rjmp	.+28     	; 0x3a4 <fat_get_next_cluster+0x142>
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	09 c0       	rjmp	.+18     	; 0x3a4 <fat_get_next_cluster+0x142>
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	04 c0       	rjmp	.+8      	; 0x3a4 <fat_get_next_cluster+0x142>
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	df 90       	pop	r13
     3ba:	cf 90       	pop	r12
     3bc:	bf 90       	pop	r11
     3be:	af 90       	pop	r10
     3c0:	9f 90       	pop	r9
     3c2:	8f 90       	pop	r8
     3c4:	08 95       	ret

000003c6 <fat_free_clusters>:
     3c6:	2f 92       	push	r2
     3c8:	3f 92       	push	r3
     3ca:	4f 92       	push	r4
     3cc:	5f 92       	push	r5
     3ce:	6f 92       	push	r6
     3d0:	7f 92       	push	r7
     3d2:	8f 92       	push	r8
     3d4:	9f 92       	push	r9
     3d6:	af 92       	push	r10
     3d8:	bf 92       	push	r11
     3da:	cf 92       	push	r12
     3dc:	df 92       	push	r13
     3de:	ef 92       	push	r14
     3e0:	ff 92       	push	r15
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	62 97       	sbiw	r28, 0x12	; 18
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	3c 01       	movw	r6, r24
     3fc:	1a 01       	movw	r2, r20
     3fe:	2b 01       	movw	r4, r22
     400:	89 2b       	or	r24, r25
     402:	09 f4       	brne	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     404:	eb c0       	rjmp	.+470    	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
     406:	42 30       	cpi	r20, 0x02	; 2
     408:	51 05       	cpc	r21, r1
     40a:	61 05       	cpc	r22, r1
     40c:	71 05       	cpc	r23, r1
     40e:	08 f4       	brcc	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     410:	e7 c0       	rjmp	.+462    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     412:	d3 01       	movw	r26, r6
     414:	1a 96       	adiw	r26, 0x0a	; 10
     416:	bc 91       	ld	r27, X
     418:	bd 83       	std	Y+5, r27	; 0x05
     41a:	f3 01       	movw	r30, r6
     41c:	f3 85       	ldd	r31, Z+11	; 0x0b
     41e:	fe 83       	std	Y+6, r31	; 0x06
     420:	d3 01       	movw	r26, r6
     422:	1c 96       	adiw	r26, 0x0c	; 12
     424:	bc 91       	ld	r27, X
     426:	bf 83       	std	Y+7, r27	; 0x07
     428:	f3 01       	movw	r30, r6
     42a:	f5 85       	ldd	r31, Z+13	; 0x0d
     42c:	f8 87       	std	Y+8, r31	; 0x08
     42e:	d3 01       	movw	r26, r6
     430:	1e 96       	adiw	r26, 0x0e	; 14
     432:	bc 91       	ld	r27, X
     434:	b9 87       	std	Y+9, r27	; 0x09
     436:	f3 01       	movw	r30, r6
     438:	f7 85       	ldd	r31, Z+15	; 0x0f
     43a:	fa 87       	std	Y+10, r31	; 0x0a
     43c:	d3 01       	movw	r26, r6
     43e:	50 96       	adiw	r26, 0x10	; 16
     440:	bc 91       	ld	r27, X
     442:	bb 87       	std	Y+11, r27	; 0x0b
     444:	f3 01       	movw	r30, r6
     446:	f1 89       	ldd	r31, Z+17	; 0x11
     448:	fc 87       	std	Y+12, r31	; 0x0c
     44a:	d3 01       	movw	r26, r6
     44c:	ed 91       	ld	r30, X+
     44e:	fc 91       	ld	r31, X
     450:	80 85       	ldd	r24, Z+8	; 0x08
     452:	8b 30       	cpi	r24, 0x0B	; 11
     454:	39 f0       	breq	.+14     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     456:	41 15       	cp	r20, r1
     458:	51 05       	cpc	r21, r1
     45a:	61 05       	cpc	r22, r1
     45c:	71 05       	cpc	r23, r1
     45e:	09 f0       	breq	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     460:	5d c0       	rjmp	.+186    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     462:	b6 c0       	rjmp	.+364    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     464:	45 2b       	or	r20, r21
     466:	46 2b       	or	r20, r22
     468:	47 2b       	or	r20, r23
     46a:	19 f4       	brne	.+6      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     46c:	51 c0       	rjmp	.+162    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     46e:	14 01       	movw	r2, r8
     470:	25 01       	movw	r4, r10
     472:	52 01       	movw	r10, r4
     474:	41 01       	movw	r8, r2
     476:	22 2d       	mov	r18, r2
     478:	39 2d       	mov	r19, r9
     47a:	4a 2d       	mov	r20, r10
     47c:	5b 2d       	mov	r21, r11
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	02 e0       	ldi	r16, 0x02	; 2
     488:	0e 94 30 21 	call	0x4260	; 0x4260 <__ashldi3>
     48c:	ad 80       	ldd	r10, Y+5	; 0x05
     48e:	be 80       	ldd	r11, Y+6	; 0x06
     490:	cf 80       	ldd	r12, Y+7	; 0x07
     492:	d8 84       	ldd	r13, Y+8	; 0x08
     494:	e9 84       	ldd	r14, Y+9	; 0x09
     496:	fa 84       	ldd	r15, Y+10	; 0x0a
     498:	0b 85       	ldd	r16, Y+11	; 0x0b
     49a:	1c 85       	ldd	r17, Y+12	; 0x0c
     49c:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
     4a0:	d2 2e       	mov	r13, r18
     4a2:	c3 2e       	mov	r12, r19
     4a4:	4d 87       	std	Y+13, r20	; 0x0d
     4a6:	5e 87       	std	Y+14, r21	; 0x0e
     4a8:	6f 87       	std	Y+15, r22	; 0x0f
     4aa:	78 8b       	std	Y+16, r23	; 0x10
     4ac:	89 8b       	std	Y+17, r24	; 0x11
     4ae:	9a 8b       	std	Y+18, r25	; 0x12
     4b0:	d3 01       	movw	r26, r6
     4b2:	ed 91       	ld	r30, X+
     4b4:	fc 91       	ld	r31, X
     4b6:	01 90       	ld	r0, Z+
     4b8:	f0 81       	ld	r31, Z
     4ba:	e0 2d       	mov	r30, r0
     4bc:	68 94       	set
     4be:	ee 24       	eor	r14, r14
     4c0:	e2 f8       	bld	r14, 2
     4c2:	f1 2c       	mov	r15, r1
     4c4:	8e 01       	movw	r16, r28
     4c6:	0f 5f       	subi	r16, 0xFF	; 255
     4c8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ca:	09 95       	icall
     4cc:	88 23       	and	r24, r24
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4d0:	2c c1       	rjmp	.+600    	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     4d2:	89 80       	ldd	r8, Y+1	; 0x01
     4d4:	9a 80       	ldd	r9, Y+2	; 0x02
     4d6:	ab 80       	ldd	r10, Y+3	; 0x03
     4d8:	bc 80       	ldd	r11, Y+4	; 0x04
     4da:	81 14       	cp	r8, r1
     4dc:	91 04       	cpc	r9, r1
     4de:	a1 04       	cpc	r10, r1
     4e0:	b1 04       	cpc	r11, r1
     4e2:	c1 f0       	breq	.+48     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     4e4:	d5 01       	movw	r26, r10
     4e6:	c4 01       	movw	r24, r8
     4e8:	80 5f       	subi	r24, 0xF0	; 240
     4ea:	9f 4f       	sbci	r25, 0xFF	; 255
     4ec:	af 4f       	sbci	r26, 0xFF	; 255
     4ee:	bf 40       	sbci	r27, 0x0F	; 15
     4f0:	08 97       	sbiw	r24, 0x08	; 8
     4f2:	a1 05       	cpc	r26, r1
     4f4:	b1 05       	cpc	r27, r1
     4f6:	80 f0       	brcs	.+32     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     4f8:	d5 01       	movw	r26, r10
     4fa:	c4 01       	movw	r24, r8
     4fc:	88 5f       	subi	r24, 0xF8	; 248
     4fe:	9f 4f       	sbci	r25, 0xFF	; 255
     500:	af 4f       	sbci	r26, 0xFF	; 255
     502:	bf 40       	sbci	r27, 0x0F	; 15
     504:	08 97       	sbiw	r24, 0x08	; 8
     506:	a1 05       	cpc	r26, r1
     508:	b1 05       	cpc	r27, r1
     50a:	08 f4       	brcc	.+2      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     50c:	86 c0       	rjmp	.+268    	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
     50e:	ab c0       	rjmp	.+342    	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	0b c1       	rjmp	.+534    	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	09 c1       	rjmp	.+530    	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	07 c1       	rjmp	.+526    	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     51c:	db 01       	movw	r26, r22
     51e:	ca 01       	movw	r24, r20
     520:	4c 01       	movw	r8, r24
     522:	5d 01       	movw	r10, r26
     524:	28 2f       	mov	r18, r24
     526:	39 2d       	mov	r19, r9
     528:	4a 2d       	mov	r20, r10
     52a:	5b 2d       	mov	r21, r11
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	01 e0       	ldi	r16, 0x01	; 1
     536:	0e 94 30 21 	call	0x4260	; 0x4260 <__ashldi3>
     53a:	ad 80       	ldd	r10, Y+5	; 0x05
     53c:	be 80       	ldd	r11, Y+6	; 0x06
     53e:	cf 80       	ldd	r12, Y+7	; 0x07
     540:	d8 84       	ldd	r13, Y+8	; 0x08
     542:	e9 84       	ldd	r14, Y+9	; 0x09
     544:	fa 84       	ldd	r15, Y+10	; 0x0a
     546:	0b 85       	ldd	r16, Y+11	; 0x0b
     548:	1c 85       	ldd	r17, Y+12	; 0x0c
     54a:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
     54e:	22 2e       	mov	r2, r18
     550:	33 2e       	mov	r3, r19
     552:	44 2e       	mov	r4, r20
     554:	55 2e       	mov	r5, r21
     556:	d6 2e       	mov	r13, r22
     558:	c7 2e       	mov	r12, r23
     55a:	a8 2e       	mov	r10, r24
     55c:	b9 2e       	mov	r11, r25
     55e:	d3 01       	movw	r26, r6
     560:	ed 91       	ld	r30, X+
     562:	fc 91       	ld	r31, X
     564:	01 90       	ld	r0, Z+
     566:	f0 81       	ld	r31, Z
     568:	e0 2d       	mov	r30, r0
     56a:	68 94       	set
     56c:	ee 24       	eor	r14, r14
     56e:	e1 f8       	bld	r14, 1
     570:	f1 2c       	mov	r15, r1
     572:	8e 01       	movw	r16, r28
     574:	0f 5f       	subi	r16, 0xFF	; 255
     576:	1f 4f       	sbci	r17, 0xFF	; 255
     578:	09 95       	icall
     57a:	88 23       	and	r24, r24
     57c:	09 f4       	brne	.+2      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     57e:	d5 c0       	rjmp	.+426    	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     580:	89 80       	ldd	r8, Y+1	; 0x01
     582:	9a 80       	ldd	r9, Y+2	; 0x02
     584:	81 14       	cp	r8, r1
     586:	91 04       	cpc	r9, r1
     588:	29 f1       	breq	.+74     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
     58a:	c4 01       	movw	r24, r8
     58c:	40 96       	adiw	r24, 0x10	; 16
     58e:	08 97       	sbiw	r24, 0x08	; 8
     590:	18 f1       	brcs	.+70     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
     592:	b8 ef       	ldi	r27, 0xF8	; 248
     594:	8b 16       	cp	r8, r27
     596:	bf ef       	ldi	r27, 0xFF	; 255
     598:	9b 06       	cpc	r9, r27
     59a:	08 f0       	brcs	.+2      	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
     59c:	6e c0       	rjmp	.+220    	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
     59e:	1a 82       	std	Y+2, r1	; 0x02
     5a0:	19 82       	std	Y+1, r1	; 0x01
     5a2:	d3 01       	movw	r26, r6
     5a4:	ed 91       	ld	r30, X+
     5a6:	fc 91       	ld	r31, X
     5a8:	04 80       	ldd	r0, Z+4	; 0x04
     5aa:	f5 81       	ldd	r31, Z+5	; 0x05
     5ac:	e0 2d       	mov	r30, r0
     5ae:	22 2d       	mov	r18, r2
     5b0:	33 2d       	mov	r19, r3
     5b2:	44 2d       	mov	r20, r4
     5b4:	55 2d       	mov	r21, r5
     5b6:	6d 2d       	mov	r22, r13
     5b8:	7c 2d       	mov	r23, r12
     5ba:	8a 2d       	mov	r24, r10
     5bc:	9b 2d       	mov	r25, r11
     5be:	09 95       	icall
     5c0:	c4 01       	movw	r24, r8
     5c2:	a0 e0       	ldi	r26, 0x00	; 0
     5c4:	b0 e0       	ldi	r27, 0x00	; 0
     5c6:	00 97       	sbiw	r24, 0x00	; 0
     5c8:	a1 05       	cpc	r26, r1
     5ca:	b1 05       	cpc	r27, r1
     5cc:	09 f0       	breq	.+2      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     5ce:	a8 cf       	rjmp	.-176    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	ab c0       	rjmp	.+342    	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	a9 c0       	rjmp	.+338    	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	a7 c0       	rjmp	.+334    	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	a5 c0       	rjmp	.+330    	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	a3 c0       	rjmp	.+326    	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     5e4:	19 82       	std	Y+1, r1	; 0x01
     5e6:	1a 82       	std	Y+2, r1	; 0x02
     5e8:	1b 82       	std	Y+3, r1	; 0x03
     5ea:	1c 82       	std	Y+4, r1	; 0x04
     5ec:	d3 01       	movw	r26, r6
     5ee:	ed 91       	ld	r30, X+
     5f0:	fc 91       	ld	r31, X
     5f2:	04 80       	ldd	r0, Z+4	; 0x04
     5f4:	f5 81       	ldd	r31, Z+5	; 0x05
     5f6:	e0 2d       	mov	r30, r0
     5f8:	68 94       	set
     5fa:	ee 24       	eor	r14, r14
     5fc:	e2 f8       	bld	r14, 2
     5fe:	f1 2c       	mov	r15, r1
     600:	8e 01       	movw	r16, r28
     602:	0f 5f       	subi	r16, 0xFF	; 255
     604:	1f 4f       	sbci	r17, 0xFF	; 255
     606:	2d 2d       	mov	r18, r13
     608:	3c 2d       	mov	r19, r12
     60a:	4d 85       	ldd	r20, Y+13	; 0x0d
     60c:	5e 85       	ldd	r21, Y+14	; 0x0e
     60e:	6f 85       	ldd	r22, Y+15	; 0x0f
     610:	78 89       	ldd	r23, Y+16	; 0x10
     612:	89 89       	ldd	r24, Y+17	; 0x11
     614:	9a 89       	ldd	r25, Y+18	; 0x12
     616:	09 95       	icall
     618:	7b cf       	rjmp	.-266    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     61a:	f3 01       	movw	r30, r6
     61c:	86 a5       	ldd	r24, Z+46	; 0x2e
     61e:	97 a5       	ldd	r25, Z+47	; 0x2f
     620:	a0 a9       	ldd	r26, Z+48	; 0x30
     622:	b1 a9       	ldd	r27, Z+49	; 0x31
     624:	89 2b       	or	r24, r25
     626:	8a 2b       	or	r24, r26
     628:	8b 2b       	or	r24, r27
     62a:	09 f4       	brne	.+2      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
     62c:	5f c0       	rjmp	.+190    	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
     62e:	da cf       	rjmp	.-76     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
     630:	19 82       	std	Y+1, r1	; 0x01
     632:	1a 82       	std	Y+2, r1	; 0x02
     634:	1b 82       	std	Y+3, r1	; 0x03
     636:	1c 82       	std	Y+4, r1	; 0x04
     638:	d3 01       	movw	r26, r6
     63a:	ed 91       	ld	r30, X+
     63c:	fc 91       	ld	r31, X
     63e:	04 80       	ldd	r0, Z+4	; 0x04
     640:	f5 81       	ldd	r31, Z+5	; 0x05
     642:	e0 2d       	mov	r30, r0
     644:	68 94       	set
     646:	ee 24       	eor	r14, r14
     648:	e2 f8       	bld	r14, 2
     64a:	f1 2c       	mov	r15, r1
     64c:	8e 01       	movw	r16, r28
     64e:	0f 5f       	subi	r16, 0xFF	; 255
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	2d 2d       	mov	r18, r13
     654:	3c 2d       	mov	r19, r12
     656:	4d 85       	ldd	r20, Y+13	; 0x0d
     658:	5e 85       	ldd	r21, Y+14	; 0x0e
     65a:	6f 85       	ldd	r22, Y+15	; 0x0f
     65c:	78 89       	ldd	r23, Y+16	; 0x10
     65e:	89 89       	ldd	r24, Y+17	; 0x11
     660:	9a 89       	ldd	r25, Y+18	; 0x12
     662:	09 95       	icall
     664:	04 cf       	rjmp	.-504    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     666:	f3 01       	movw	r30, r6
     668:	86 a5       	ldd	r24, Z+46	; 0x2e
     66a:	97 a5       	ldd	r25, Z+47	; 0x2f
     66c:	a0 a9       	ldd	r26, Z+48	; 0x30
     66e:	b1 a9       	ldd	r27, Z+49	; 0x31
     670:	89 2b       	or	r24, r25
     672:	8a 2b       	or	r24, r26
     674:	8b 2b       	or	r24, r27
     676:	d1 f0       	breq	.+52     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
     678:	db cf       	rjmp	.-74     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     67a:	1a 82       	std	Y+2, r1	; 0x02
     67c:	19 82       	std	Y+1, r1	; 0x01
     67e:	d3 01       	movw	r26, r6
     680:	ed 91       	ld	r30, X+
     682:	fc 91       	ld	r31, X
     684:	04 80       	ldd	r0, Z+4	; 0x04
     686:	f5 81       	ldd	r31, Z+5	; 0x05
     688:	e0 2d       	mov	r30, r0
     68a:	68 94       	set
     68c:	ee 24       	eor	r14, r14
     68e:	e1 f8       	bld	r14, 1
     690:	f1 2c       	mov	r15, r1
     692:	8e 01       	movw	r16, r28
     694:	0f 5f       	subi	r16, 0xFF	; 255
     696:	1f 4f       	sbci	r17, 0xFF	; 255
     698:	22 2d       	mov	r18, r2
     69a:	33 2d       	mov	r19, r3
     69c:	44 2d       	mov	r20, r4
     69e:	55 2d       	mov	r21, r5
     6a0:	6d 2d       	mov	r22, r13
     6a2:	7c 2d       	mov	r23, r12
     6a4:	8a 2d       	mov	r24, r10
     6a6:	9b 2d       	mov	r25, r11
     6a8:	09 95       	icall
     6aa:	92 cf       	rjmp	.-220    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     6ac:	f3 01       	movw	r30, r6
     6ae:	26 a6       	std	Z+46, r2	; 0x2e
     6b0:	37 a6       	std	Z+47, r3	; 0x2f
     6b2:	40 aa       	std	Z+48, r4	; 0x30
     6b4:	51 aa       	std	Z+49, r5	; 0x31
     6b6:	19 82       	std	Y+1, r1	; 0x01
     6b8:	1a 82       	std	Y+2, r1	; 0x02
     6ba:	1b 82       	std	Y+3, r1	; 0x03
     6bc:	1c 82       	std	Y+4, r1	; 0x04
     6be:	01 90       	ld	r0, Z+
     6c0:	f0 81       	ld	r31, Z
     6c2:	e0 2d       	mov	r30, r0
     6c4:	04 80       	ldd	r0, Z+4	; 0x04
     6c6:	f5 81       	ldd	r31, Z+5	; 0x05
     6c8:	e0 2d       	mov	r30, r0
     6ca:	68 94       	set
     6cc:	ee 24       	eor	r14, r14
     6ce:	e2 f8       	bld	r14, 2
     6d0:	f1 2c       	mov	r15, r1
     6d2:	8e 01       	movw	r16, r28
     6d4:	0f 5f       	subi	r16, 0xFF	; 255
     6d6:	1f 4f       	sbci	r17, 0xFF	; 255
     6d8:	2d 2d       	mov	r18, r13
     6da:	3c 2d       	mov	r19, r12
     6dc:	4d 85       	ldd	r20, Y+13	; 0x0d
     6de:	5e 85       	ldd	r21, Y+14	; 0x0e
     6e0:	6f 85       	ldd	r22, Y+15	; 0x0f
     6e2:	78 89       	ldd	r23, Y+16	; 0x10
     6e4:	89 89       	ldd	r24, Y+17	; 0x11
     6e6:	9a 89       	ldd	r25, Y+18	; 0x12
     6e8:	09 95       	icall
     6ea:	c1 ce       	rjmp	.-638    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     6ec:	26 a6       	std	Z+46, r2	; 0x2e
     6ee:	37 a6       	std	Z+47, r3	; 0x2f
     6f0:	40 aa       	std	Z+48, r4	; 0x30
     6f2:	51 aa       	std	Z+49, r5	; 0x31
     6f4:	19 82       	std	Y+1, r1	; 0x01
     6f6:	1a 82       	std	Y+2, r1	; 0x02
     6f8:	1b 82       	std	Y+3, r1	; 0x03
     6fa:	1c 82       	std	Y+4, r1	; 0x04
     6fc:	01 90       	ld	r0, Z+
     6fe:	f0 81       	ld	r31, Z
     700:	e0 2d       	mov	r30, r0
     702:	04 80       	ldd	r0, Z+4	; 0x04
     704:	f5 81       	ldd	r31, Z+5	; 0x05
     706:	e0 2d       	mov	r30, r0
     708:	68 94       	set
     70a:	ee 24       	eor	r14, r14
     70c:	e2 f8       	bld	r14, 2
     70e:	f1 2c       	mov	r15, r1
     710:	8e 01       	movw	r16, r28
     712:	0f 5f       	subi	r16, 0xFF	; 255
     714:	1f 4f       	sbci	r17, 0xFF	; 255
     716:	2d 2d       	mov	r18, r13
     718:	3c 2d       	mov	r19, r12
     71a:	4d 85       	ldd	r20, Y+13	; 0x0d
     71c:	5e 85       	ldd	r21, Y+14	; 0x0e
     71e:	6f 85       	ldd	r22, Y+15	; 0x0f
     720:	78 89       	ldd	r23, Y+16	; 0x10
     722:	89 89       	ldd	r24, Y+17	; 0x11
     724:	9a 89       	ldd	r25, Y+18	; 0x12
     726:	09 95       	icall
     728:	f3 ce       	rjmp	.-538    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     72a:	62 96       	adiw	r28, 0x12	; 18
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	df 90       	pop	r13
     744:	cf 90       	pop	r12
     746:	bf 90       	pop	r11
     748:	af 90       	pop	r10
     74a:	9f 90       	pop	r9
     74c:	8f 90       	pop	r8
     74e:	7f 90       	pop	r7
     750:	6f 90       	pop	r6
     752:	5f 90       	pop	r5
     754:	4f 90       	pop	r4
     756:	3f 90       	pop	r3
     758:	2f 90       	pop	r2
     75a:	08 95       	ret

0000075c <fat_append_clusters>:
     75c:	2f 92       	push	r2
     75e:	3f 92       	push	r3
     760:	4f 92       	push	r4
     762:	5f 92       	push	r5
     764:	6f 92       	push	r6
     766:	7f 92       	push	r7
     768:	8f 92       	push	r8
     76a:	9f 92       	push	r9
     76c:	af 92       	push	r10
     76e:	bf 92       	push	r11
     770:	cf 92       	push	r12
     772:	df 92       	push	r13
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	a9 97       	sbiw	r28, 0x29	; 41
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	9b a3       	std	Y+35, r25	; 0x23
     792:	8a a3       	std	Y+34, r24	; 0x22
     794:	4e a3       	std	Y+38, r20	; 0x26
     796:	5f a3       	std	Y+39, r21	; 0x27
     798:	68 a7       	std	Y+40, r22	; 0x28
     79a:	79 a7       	std	Y+41, r23	; 0x29
     79c:	0b 87       	std	Y+11, r16	; 0x0b
     79e:	1c 87       	std	Y+12, r17	; 0x0c
     7a0:	2d 87       	std	Y+13, r18	; 0x0d
     7a2:	3e 87       	std	Y+14, r19	; 0x0e
     7a4:	00 97       	sbiw	r24, 0x00	; 0
     7a6:	09 f4       	brne	.+2      	; 0x7aa <fat_append_clusters+0x4e>
     7a8:	1c c2       	rjmp	.+1080   	; 0xbe2 <__stack+0x2e3>
     7aa:	dc 01       	movw	r26, r24
     7ac:	ed 91       	ld	r30, X+
     7ae:	fc 91       	ld	r31, X
     7b0:	11 97       	sbiw	r26, 0x01	; 1
     7b2:	20 81       	ld	r18, Z
     7b4:	31 81       	ldd	r19, Z+1	; 0x01
     7b6:	3d 8f       	std	Y+29, r19	; 0x1d
     7b8:	2c 8f       	std	Y+28, r18	; 0x1c
     7ba:	44 81       	ldd	r20, Z+4	; 0x04
     7bc:	55 81       	ldd	r21, Z+5	; 0x05
     7be:	5d a3       	std	Y+37, r21	; 0x25
     7c0:	4c a3       	std	Y+36, r20	; 0x24
     7c2:	1a 96       	adiw	r26, 0x0a	; 10
     7c4:	5c 91       	ld	r21, X
     7c6:	1a 97       	sbiw	r26, 0x0a	; 10
     7c8:	5c 8b       	std	Y+20, r21	; 0x14
     7ca:	1b 96       	adiw	r26, 0x0b	; 11
     7cc:	8c 91       	ld	r24, X
     7ce:	1b 97       	sbiw	r26, 0x0b	; 11
     7d0:	8d 8b       	std	Y+21, r24	; 0x15
     7d2:	1c 96       	adiw	r26, 0x0c	; 12
     7d4:	9c 91       	ld	r25, X
     7d6:	1c 97       	sbiw	r26, 0x0c	; 12
     7d8:	9e 8b       	std	Y+22, r25	; 0x16
     7da:	1d 96       	adiw	r26, 0x0d	; 13
     7dc:	ac 91       	ld	r26, X
     7de:	af 8b       	std	Y+23, r26	; 0x17
     7e0:	aa a1       	ldd	r26, Y+34	; 0x22
     7e2:	bb a1       	ldd	r27, Y+35	; 0x23
     7e4:	1e 96       	adiw	r26, 0x0e	; 14
     7e6:	bc 91       	ld	r27, X
     7e8:	b8 8f       	std	Y+24, r27	; 0x18
     7ea:	aa a1       	ldd	r26, Y+34	; 0x22
     7ec:	bb a1       	ldd	r27, Y+35	; 0x23
     7ee:	1f 96       	adiw	r26, 0x0f	; 15
     7f0:	bc 91       	ld	r27, X
     7f2:	b9 8f       	std	Y+25, r27	; 0x19
     7f4:	aa a1       	ldd	r26, Y+34	; 0x22
     7f6:	bb a1       	ldd	r27, Y+35	; 0x23
     7f8:	50 96       	adiw	r26, 0x10	; 16
     7fa:	bc 91       	ld	r27, X
     7fc:	ba 8f       	std	Y+26, r27	; 0x1a
     7fe:	aa a1       	ldd	r26, Y+34	; 0x22
     800:	bb a1       	ldd	r27, Y+35	; 0x23
     802:	51 96       	adiw	r26, 0x11	; 17
     804:	bc 91       	ld	r27, X
     806:	bb 8f       	std	Y+27, r27	; 0x1b
     808:	aa a1       	ldd	r26, Y+34	; 0x22
     80a:	bb a1       	ldd	r27, Y+35	; 0x23
     80c:	9e 96       	adiw	r26, 0x2e	; 46
     80e:	4d 90       	ld	r4, X+
     810:	5d 90       	ld	r5, X+
     812:	6d 90       	ld	r6, X+
     814:	7c 90       	ld	r7, X
     816:	d1 97       	sbiw	r26, 0x31	; 49
     818:	b1 e0       	ldi	r27, 0x01	; 1
     81a:	bb 8b       	std	Y+19, r27	; 0x13
     81c:	80 85       	ldd	r24, Z+8	; 0x08
     81e:	8b 30       	cpi	r24, 0x0B	; 11
     820:	09 f0       	breq	.+2      	; 0x824 <fat_append_clusters+0xc8>
     822:	1b 8a       	std	Y+19, r1	; 0x13
     824:	eb 89       	ldd	r30, Y+19	; 0x13
     826:	ee 23       	and	r30, r30
     828:	a9 f0       	breq	.+42     	; 0x854 <fat_append_clusters+0xf8>
     82a:	ea a1       	ldd	r30, Y+34	; 0x22
     82c:	fb a1       	ldd	r31, Y+35	; 0x23
     82e:	82 89       	ldd	r24, Z+18	; 0x12
     830:	93 89       	ldd	r25, Z+19	; 0x13
     832:	a4 89       	ldd	r26, Z+20	; 0x14
     834:	b5 89       	ldd	r27, Z+21	; 0x15
     836:	9c 01       	movw	r18, r24
     838:	ad 01       	movw	r20, r26
     83a:	56 95       	lsr	r21
     83c:	47 95       	ror	r20
     83e:	37 95       	ror	r19
     840:	27 95       	ror	r18
     842:	56 95       	lsr	r21
     844:	47 95       	ror	r20
     846:	37 95       	ror	r19
     848:	27 95       	ror	r18
     84a:	2e 8f       	std	Y+30, r18	; 0x1e
     84c:	3f 8f       	std	Y+31, r19	; 0x1f
     84e:	48 a3       	std	Y+32, r20	; 0x20
     850:	59 a3       	std	Y+33, r21	; 0x21
     852:	10 c0       	rjmp	.+32     	; 0x874 <fat_append_clusters+0x118>
     854:	ea a1       	ldd	r30, Y+34	; 0x22
     856:	fb a1       	ldd	r31, Y+35	; 0x23
     858:	82 89       	ldd	r24, Z+18	; 0x12
     85a:	93 89       	ldd	r25, Z+19	; 0x13
     85c:	a4 89       	ldd	r26, Z+20	; 0x14
     85e:	b5 89       	ldd	r27, Z+21	; 0x15
     860:	9c 01       	movw	r18, r24
     862:	ad 01       	movw	r20, r26
     864:	56 95       	lsr	r21
     866:	47 95       	ror	r20
     868:	37 95       	ror	r19
     86a:	27 95       	ror	r18
     86c:	2e 8f       	std	Y+30, r18	; 0x1e
     86e:	3f 8f       	std	Y+31, r19	; 0x1f
     870:	48 a3       	std	Y+32, r20	; 0x20
     872:	59 a3       	std	Y+33, r21	; 0x21
     874:	aa a1       	ldd	r26, Y+34	; 0x22
     876:	bb a1       	ldd	r27, Y+35	; 0x23
     878:	9e 96       	adiw	r26, 0x2e	; 46
     87a:	1d 92       	st	X+, r1
     87c:	1d 92       	st	X+, r1
     87e:	1d 92       	st	X+, r1
     880:	1c 92       	st	X, r1
     882:	d1 97       	sbiw	r26, 0x31	; 49
     884:	2e 8d       	ldd	r18, Y+30	; 0x1e
     886:	3f 8d       	ldd	r19, Y+31	; 0x1f
     888:	48 a1       	ldd	r20, Y+32	; 0x20
     88a:	59 a1       	ldd	r21, Y+33	; 0x21
     88c:	21 15       	cp	r18, r1
     88e:	31 05       	cpc	r19, r1
     890:	41 05       	cpc	r20, r1
     892:	51 05       	cpc	r21, r1
     894:	09 f4       	brne	.+2      	; 0x898 <fat_append_clusters+0x13c>
     896:	1f c1       	rjmp	.+574    	; 0xad6 <__stack+0x1d7>
     898:	2f 83       	std	Y+7, r18	; 0x07
     89a:	38 87       	std	Y+8, r19	; 0x08
     89c:	49 87       	std	Y+9, r20	; 0x09
     89e:	5a 87       	std	Y+10, r21	; 0x0a
     8a0:	1f 86       	std	Y+15, r1	; 0x0f
     8a2:	18 8a       	std	Y+16, r1	; 0x10
     8a4:	19 8a       	std	Y+17, r1	; 0x11
     8a6:	1a 8a       	std	Y+18, r1	; 0x12
     8a8:	32 e0       	ldi	r19, 0x02	; 2
     8aa:	43 16       	cp	r4, r19
     8ac:	51 04       	cpc	r5, r1
     8ae:	61 04       	cpc	r6, r1
     8b0:	71 04       	cpc	r7, r1
     8b2:	80 f0       	brcs	.+32     	; 0x8d4 <fat_append_clusters+0x178>
     8b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     8b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     8b8:	a8 a1       	ldd	r26, Y+32	; 0x20
     8ba:	b9 a1       	ldd	r27, Y+33	; 0x21
     8bc:	48 16       	cp	r4, r24
     8be:	59 06       	cpc	r5, r25
     8c0:	6a 06       	cpc	r6, r26
     8c2:	7b 06       	cpc	r7, r27
     8c4:	68 f0       	brcs	.+26     	; 0x8e0 <fat_append_clusters+0x184>
     8c6:	68 94       	set
     8c8:	44 24       	eor	r4, r4
     8ca:	41 f8       	bld	r4, 1
     8cc:	51 2c       	mov	r5, r1
     8ce:	61 2c       	mov	r6, r1
     8d0:	71 2c       	mov	r7, r1
     8d2:	06 c0       	rjmp	.+12     	; 0x8e0 <fat_append_clusters+0x184>
     8d4:	68 94       	set
     8d6:	44 24       	eor	r4, r4
     8d8:	41 f8       	bld	r4, 1
     8da:	51 2c       	mov	r5, r1
     8dc:	61 2c       	mov	r6, r1
     8de:	71 2c       	mov	r7, r1
     8e0:	9b 89       	ldd	r25, Y+19	; 0x13
     8e2:	99 23       	and	r25, r25
     8e4:	61 f1       	breq	.+88     	; 0x93e <__stack+0x3f>
     8e6:	53 01       	movw	r10, r6
     8e8:	42 01       	movw	r8, r4
     8ea:	24 2d       	mov	r18, r4
     8ec:	39 2d       	mov	r19, r9
     8ee:	4a 2d       	mov	r20, r10
     8f0:	5b 2d       	mov	r21, r11
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	02 e0       	ldi	r16, 0x02	; 2
     8fc:	0e 94 30 21 	call	0x4260	; 0x4260 <__ashldi3>
     900:	ac 88       	ldd	r10, Y+20	; 0x14
     902:	bd 88       	ldd	r11, Y+21	; 0x15
     904:	ce 88       	ldd	r12, Y+22	; 0x16
     906:	df 88       	ldd	r13, Y+23	; 0x17
     908:	e8 8c       	ldd	r14, Y+24	; 0x18
     90a:	f9 8c       	ldd	r15, Y+25	; 0x19
     90c:	0a 8d       	ldd	r16, Y+26	; 0x1a
     90e:	1b 8d       	ldd	r17, Y+27	; 0x1b
     910:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
     914:	d2 2e       	mov	r13, r18
     916:	c3 2e       	mov	r12, r19
     918:	b4 2e       	mov	r11, r20
     91a:	a5 2e       	mov	r10, r21
     91c:	96 2e       	mov	r9, r22
     91e:	87 2e       	mov	r8, r23
     920:	38 2e       	mov	r3, r24
     922:	29 2e       	mov	r2, r25
     924:	68 94       	set
     926:	ee 24       	eor	r14, r14
     928:	e2 f8       	bld	r14, 2
     92a:	f1 2c       	mov	r15, r1
     92c:	8e 01       	movw	r16, r28
     92e:	0d 5f       	subi	r16, 0xFD	; 253
     930:	1f 4f       	sbci	r17, 0xFF	; 255
     932:	ec 8d       	ldd	r30, Y+28	; 0x1c
     934:	fd 8d       	ldd	r31, Y+29	; 0x1d
     936:	09 95       	icall
     938:	81 11       	cpse	r24, r1
     93a:	62 c1       	rjmp	.+708    	; 0xc00 <__stack+0x301>
     93c:	57 c1       	rjmp	.+686    	; 0xbec <__stack+0x2ed>
     93e:	53 01       	movw	r10, r6
     940:	42 01       	movw	r8, r4
     942:	24 2d       	mov	r18, r4
     944:	39 2d       	mov	r19, r9
     946:	4a 2d       	mov	r20, r10
     948:	5b 2d       	mov	r21, r11
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	01 e0       	ldi	r16, 0x01	; 1
     954:	0e 94 30 21 	call	0x4260	; 0x4260 <__ashldi3>
     958:	ac 88       	ldd	r10, Y+20	; 0x14
     95a:	bd 88       	ldd	r11, Y+21	; 0x15
     95c:	ce 88       	ldd	r12, Y+22	; 0x16
     95e:	df 88       	ldd	r13, Y+23	; 0x17
     960:	e8 8c       	ldd	r14, Y+24	; 0x18
     962:	f9 8c       	ldd	r15, Y+25	; 0x19
     964:	0a 8d       	ldd	r16, Y+26	; 0x1a
     966:	1b 8d       	ldd	r17, Y+27	; 0x1b
     968:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
     96c:	d2 2e       	mov	r13, r18
     96e:	c3 2e       	mov	r12, r19
     970:	b4 2e       	mov	r11, r20
     972:	a5 2e       	mov	r10, r21
     974:	96 2e       	mov	r9, r22
     976:	87 2e       	mov	r8, r23
     978:	38 2e       	mov	r3, r24
     97a:	29 2e       	mov	r2, r25
     97c:	68 94       	set
     97e:	ee 24       	eor	r14, r14
     980:	e1 f8       	bld	r14, 1
     982:	f1 2c       	mov	r15, r1
     984:	8e 01       	movw	r16, r28
     986:	0f 5f       	subi	r16, 0xFF	; 255
     988:	1f 4f       	sbci	r17, 0xFF	; 255
     98a:	ec 8d       	ldd	r30, Y+28	; 0x1c
     98c:	fd 8d       	ldd	r31, Y+29	; 0x1d
     98e:	09 95       	icall
     990:	81 11       	cpse	r24, r1
     992:	40 c1       	rjmp	.+640    	; 0xc14 <__stack+0x315>
     994:	30 c1       	rjmp	.+608    	; 0xbf6 <__stack+0x2f7>
     996:	2b 85       	ldd	r18, Y+11	; 0x0b
     998:	3c 85       	ldd	r19, Y+12	; 0x0c
     99a:	4d 85       	ldd	r20, Y+13	; 0x0d
     99c:	5e 85       	ldd	r21, Y+14	; 0x0e
     99e:	23 2b       	or	r18, r19
     9a0:	24 2b       	or	r18, r20
     9a2:	25 2b       	or	r18, r21
     9a4:	49 f4       	brne	.+18     	; 0x9b8 <__stack+0xb9>
     9a6:	aa a1       	ldd	r26, Y+34	; 0x22
     9a8:	bb a1       	ldd	r27, Y+35	; 0x23
     9aa:	9e 96       	adiw	r26, 0x2e	; 46
     9ac:	4d 92       	st	X+, r4
     9ae:	5d 92       	st	X+, r5
     9b0:	6d 92       	st	X+, r6
     9b2:	7c 92       	st	X, r7
     9b4:	d1 97       	sbiw	r26, 0x31	; 49
     9b6:	9c c0       	rjmp	.+312    	; 0xaf0 <__stack+0x1f1>
     9b8:	2f 85       	ldd	r18, Y+15	; 0x0f
     9ba:	38 89       	ldd	r19, Y+16	; 0x10
     9bc:	49 89       	ldd	r20, Y+17	; 0x11
     9be:	5a 89       	ldd	r21, Y+18	; 0x12
     9c0:	23 2b       	or	r18, r19
     9c2:	24 2b       	or	r18, r20
     9c4:	25 2b       	or	r18, r21
     9c6:	49 f4       	brne	.+18     	; 0x9da <__stack+0xdb>
     9c8:	8f ef       	ldi	r24, 0xFF	; 255
     9ca:	9f ef       	ldi	r25, 0xFF	; 255
     9cc:	af ef       	ldi	r26, 0xFF	; 255
     9ce:	bf e0       	ldi	r27, 0x0F	; 15
     9d0:	8b 83       	std	Y+3, r24	; 0x03
     9d2:	9c 83       	std	Y+4, r25	; 0x04
     9d4:	ad 83       	std	Y+5, r26	; 0x05
     9d6:	be 83       	std	Y+6, r27	; 0x06
     9d8:	08 c0       	rjmp	.+16     	; 0x9ea <__stack+0xeb>
     9da:	2f 85       	ldd	r18, Y+15	; 0x0f
     9dc:	38 89       	ldd	r19, Y+16	; 0x10
     9de:	49 89       	ldd	r20, Y+17	; 0x11
     9e0:	5a 89       	ldd	r21, Y+18	; 0x12
     9e2:	2b 83       	std	Y+3, r18	; 0x03
     9e4:	3c 83       	std	Y+4, r19	; 0x04
     9e6:	4d 83       	std	Y+5, r20	; 0x05
     9e8:	5e 83       	std	Y+6, r21	; 0x06
     9ea:	68 94       	set
     9ec:	ee 24       	eor	r14, r14
     9ee:	e2 f8       	bld	r14, 2
     9f0:	f1 2c       	mov	r15, r1
     9f2:	8e 01       	movw	r16, r28
     9f4:	0d 5f       	subi	r16, 0xFD	; 253
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	2d 2d       	mov	r18, r13
     9fa:	3c 2d       	mov	r19, r12
     9fc:	4b 2d       	mov	r20, r11
     9fe:	5a 2d       	mov	r21, r10
     a00:	69 2d       	mov	r22, r9
     a02:	78 2d       	mov	r23, r8
     a04:	83 2d       	mov	r24, r3
     a06:	92 2d       	mov	r25, r2
     a08:	ec a1       	ldd	r30, Y+36	; 0x24
     a0a:	fd a1       	ldd	r31, Y+37	; 0x25
     a0c:	09 95       	icall
     a0e:	81 11       	cpse	r24, r1
     a10:	38 c0       	rjmp	.+112    	; 0xa82 <__stack+0x183>
     a12:	da c0       	rjmp	.+436    	; 0xbc8 <__stack+0x2c9>
     a14:	2b 85       	ldd	r18, Y+11	; 0x0b
     a16:	3c 85       	ldd	r19, Y+12	; 0x0c
     a18:	4d 85       	ldd	r20, Y+13	; 0x0d
     a1a:	5e 85       	ldd	r21, Y+14	; 0x0e
     a1c:	23 2b       	or	r18, r19
     a1e:	24 2b       	or	r18, r20
     a20:	25 2b       	or	r18, r21
     a22:	49 f4       	brne	.+18     	; 0xa36 <__stack+0x137>
     a24:	aa a1       	ldd	r26, Y+34	; 0x22
     a26:	bb a1       	ldd	r27, Y+35	; 0x23
     a28:	9e 96       	adiw	r26, 0x2e	; 46
     a2a:	4d 92       	st	X+, r4
     a2c:	5d 92       	st	X+, r5
     a2e:	6d 92       	st	X+, r6
     a30:	7c 92       	st	X, r7
     a32:	d1 97       	sbiw	r26, 0x31	; 49
     a34:	5d c0       	rjmp	.+186    	; 0xaf0 <__stack+0x1f1>
     a36:	2f 85       	ldd	r18, Y+15	; 0x0f
     a38:	38 89       	ldd	r19, Y+16	; 0x10
     a3a:	49 89       	ldd	r20, Y+17	; 0x11
     a3c:	5a 89       	ldd	r21, Y+18	; 0x12
     a3e:	23 2b       	or	r18, r19
     a40:	24 2b       	or	r18, r20
     a42:	25 2b       	or	r18, r21
     a44:	29 f4       	brne	.+10     	; 0xa50 <__stack+0x151>
     a46:	4f ef       	ldi	r20, 0xFF	; 255
     a48:	5f ef       	ldi	r21, 0xFF	; 255
     a4a:	5a 83       	std	Y+2, r21	; 0x02
     a4c:	49 83       	std	Y+1, r20	; 0x01
     a4e:	04 c0       	rjmp	.+8      	; 0xa58 <__stack+0x159>
     a50:	8f 85       	ldd	r24, Y+15	; 0x0f
     a52:	98 89       	ldd	r25, Y+16	; 0x10
     a54:	9a 83       	std	Y+2, r25	; 0x02
     a56:	89 83       	std	Y+1, r24	; 0x01
     a58:	68 94       	set
     a5a:	ee 24       	eor	r14, r14
     a5c:	e1 f8       	bld	r14, 1
     a5e:	f1 2c       	mov	r15, r1
     a60:	8e 01       	movw	r16, r28
     a62:	0f 5f       	subi	r16, 0xFF	; 255
     a64:	1f 4f       	sbci	r17, 0xFF	; 255
     a66:	2d 2d       	mov	r18, r13
     a68:	3c 2d       	mov	r19, r12
     a6a:	4b 2d       	mov	r20, r11
     a6c:	5a 2d       	mov	r21, r10
     a6e:	69 2d       	mov	r22, r9
     a70:	78 2d       	mov	r23, r8
     a72:	83 2d       	mov	r24, r3
     a74:	92 2d       	mov	r25, r2
     a76:	ec a1       	ldd	r30, Y+36	; 0x24
     a78:	fd a1       	ldd	r31, Y+37	; 0x25
     a7a:	09 95       	icall
     a7c:	88 23       	and	r24, r24
     a7e:	09 f4       	brne	.+2      	; 0xa82 <__stack+0x183>
     a80:	a3 c0       	rjmp	.+326    	; 0xbc8 <__stack+0x2c9>
     a82:	2b 85       	ldd	r18, Y+11	; 0x0b
     a84:	3c 85       	ldd	r19, Y+12	; 0x0c
     a86:	4d 85       	ldd	r20, Y+13	; 0x0d
     a88:	5e 85       	ldd	r21, Y+14	; 0x0e
     a8a:	21 50       	subi	r18, 0x01	; 1
     a8c:	31 09       	sbc	r19, r1
     a8e:	41 09       	sbc	r20, r1
     a90:	51 09       	sbc	r21, r1
     a92:	2b 87       	std	Y+11, r18	; 0x0b
     a94:	3c 87       	std	Y+12, r19	; 0x0c
     a96:	4d 87       	std	Y+13, r20	; 0x0d
     a98:	5e 87       	std	Y+14, r21	; 0x0e
     a9a:	4f 86       	std	Y+15, r4	; 0x0f
     a9c:	58 8a       	std	Y+16, r5	; 0x10
     a9e:	69 8a       	std	Y+17, r6	; 0x11
     aa0:	7a 8a       	std	Y+18, r7	; 0x12
     aa2:	8f 81       	ldd	r24, Y+7	; 0x07
     aa4:	98 85       	ldd	r25, Y+8	; 0x08
     aa6:	a9 85       	ldd	r26, Y+9	; 0x09
     aa8:	ba 85       	ldd	r27, Y+10	; 0x0a
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	a1 09       	sbc	r26, r1
     aae:	b1 09       	sbc	r27, r1
     ab0:	8f 83       	std	Y+7, r24	; 0x07
     ab2:	98 87       	std	Y+8, r25	; 0x08
     ab4:	a9 87       	std	Y+9, r26	; 0x09
     ab6:	ba 87       	std	Y+10, r27	; 0x0a
     ab8:	9f ef       	ldi	r25, 0xFF	; 255
     aba:	49 1a       	sub	r4, r25
     abc:	59 0a       	sbc	r5, r25
     abe:	69 0a       	sbc	r6, r25
     ac0:	79 0a       	sbc	r7, r25
     ac2:	2f 81       	ldd	r18, Y+7	; 0x07
     ac4:	38 85       	ldd	r19, Y+8	; 0x08
     ac6:	49 85       	ldd	r20, Y+9	; 0x09
     ac8:	5a 85       	ldd	r21, Y+10	; 0x0a
     aca:	23 2b       	or	r18, r19
     acc:	24 2b       	or	r18, r20
     ace:	25 2b       	or	r18, r21
     ad0:	09 f0       	breq	.+2      	; 0xad4 <__stack+0x1d5>
     ad2:	ea ce       	rjmp	.-556    	; 0x8a8 <fat_append_clusters+0x14c>
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__stack+0x1df>
     ad6:	1f 86       	std	Y+15, r1	; 0x0f
     ad8:	18 8a       	std	Y+16, r1	; 0x10
     ada:	19 8a       	std	Y+17, r1	; 0x11
     adc:	1a 8a       	std	Y+18, r1	; 0x12
     ade:	8b 85       	ldd	r24, Y+11	; 0x0b
     ae0:	9c 85       	ldd	r25, Y+12	; 0x0c
     ae2:	ad 85       	ldd	r26, Y+13	; 0x0d
     ae4:	be 85       	ldd	r27, Y+14	; 0x0e
     ae6:	89 2b       	or	r24, r25
     ae8:	8a 2b       	or	r24, r26
     aea:	8b 2b       	or	r24, r27
     aec:	09 f0       	breq	.+2      	; 0xaf0 <__stack+0x1f1>
     aee:	6c c0       	rjmp	.+216    	; 0xbc8 <__stack+0x2c9>
     af0:	2e a1       	ldd	r18, Y+38	; 0x26
     af2:	3f a1       	ldd	r19, Y+39	; 0x27
     af4:	48 a5       	ldd	r20, Y+40	; 0x28
     af6:	59 a5       	ldd	r21, Y+41	; 0x29
     af8:	22 30       	cpi	r18, 0x02	; 2
     afa:	31 05       	cpc	r19, r1
     afc:	41 05       	cpc	r20, r1
     afe:	51 05       	cpc	r21, r1
     b00:	08 f4       	brcc	.+2      	; 0xb04 <__stack+0x205>
     b02:	5d c0       	rjmp	.+186    	; 0xbbe <__stack+0x2bf>
     b04:	3b 89       	ldd	r19, Y+19	; 0x13
     b06:	33 23       	and	r19, r19
     b08:	79 f1       	breq	.+94     	; 0xb68 <__stack+0x269>
     b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b0c:	98 89       	ldd	r25, Y+16	; 0x10
     b0e:	a9 89       	ldd	r26, Y+17	; 0x11
     b10:	ba 89       	ldd	r27, Y+18	; 0x12
     b12:	8b 83       	std	Y+3, r24	; 0x03
     b14:	9c 83       	std	Y+4, r25	; 0x04
     b16:	ad 83       	std	Y+5, r26	; 0x05
     b18:	be 83       	std	Y+6, r27	; 0x06
     b1a:	2e a1       	ldd	r18, Y+38	; 0x26
     b1c:	3f a1       	ldd	r19, Y+39	; 0x27
     b1e:	48 a5       	ldd	r20, Y+40	; 0x28
     b20:	59 a5       	ldd	r21, Y+41	; 0x29
     b22:	49 01       	movw	r8, r18
     b24:	5a 01       	movw	r10, r20
     b26:	39 2d       	mov	r19, r9
     b28:	4a 2d       	mov	r20, r10
     b2a:	5b 2d       	mov	r21, r11
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	02 e0       	ldi	r16, 0x02	; 2
     b36:	0e 94 30 21 	call	0x4260	; 0x4260 <__ashldi3>
     b3a:	ac 88       	ldd	r10, Y+20	; 0x14
     b3c:	bd 88       	ldd	r11, Y+21	; 0x15
     b3e:	ce 88       	ldd	r12, Y+22	; 0x16
     b40:	df 88       	ldd	r13, Y+23	; 0x17
     b42:	e8 8c       	ldd	r14, Y+24	; 0x18
     b44:	f9 8c       	ldd	r15, Y+25	; 0x19
     b46:	0a 8d       	ldd	r16, Y+26	; 0x1a
     b48:	1b 8d       	ldd	r17, Y+27	; 0x1b
     b4a:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
     b4e:	68 94       	set
     b50:	ee 24       	eor	r14, r14
     b52:	e2 f8       	bld	r14, 2
     b54:	f1 2c       	mov	r15, r1
     b56:	8e 01       	movw	r16, r28
     b58:	0d 5f       	subi	r16, 0xFD	; 253
     b5a:	1f 4f       	sbci	r17, 0xFF	; 255
     b5c:	ec a1       	ldd	r30, Y+36	; 0x24
     b5e:	fd a1       	ldd	r31, Y+37	; 0x25
     b60:	09 95       	icall
     b62:	88 23       	and	r24, r24
     b64:	89 f1       	breq	.+98     	; 0xbc8 <__stack+0x2c9>
     b66:	2b c0       	rjmp	.+86     	; 0xbbe <__stack+0x2bf>
     b68:	2f 85       	ldd	r18, Y+15	; 0x0f
     b6a:	38 89       	ldd	r19, Y+16	; 0x10
     b6c:	3a 83       	std	Y+2, r19	; 0x02
     b6e:	29 83       	std	Y+1, r18	; 0x01
     b70:	8e a1       	ldd	r24, Y+38	; 0x26
     b72:	9f a1       	ldd	r25, Y+39	; 0x27
     b74:	a8 a5       	ldd	r26, Y+40	; 0x28
     b76:	b9 a5       	ldd	r27, Y+41	; 0x29
     b78:	4c 01       	movw	r8, r24
     b7a:	5d 01       	movw	r10, r26
     b7c:	28 2f       	mov	r18, r24
     b7e:	39 2d       	mov	r19, r9
     b80:	4a 2d       	mov	r20, r10
     b82:	5b 2d       	mov	r21, r11
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	01 e0       	ldi	r16, 0x01	; 1
     b8e:	0e 94 30 21 	call	0x4260	; 0x4260 <__ashldi3>
     b92:	ac 88       	ldd	r10, Y+20	; 0x14
     b94:	bd 88       	ldd	r11, Y+21	; 0x15
     b96:	ce 88       	ldd	r12, Y+22	; 0x16
     b98:	df 88       	ldd	r13, Y+23	; 0x17
     b9a:	e8 8c       	ldd	r14, Y+24	; 0x18
     b9c:	f9 8c       	ldd	r15, Y+25	; 0x19
     b9e:	0a 8d       	ldd	r16, Y+26	; 0x1a
     ba0:	1b 8d       	ldd	r17, Y+27	; 0x1b
     ba2:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
     ba6:	68 94       	set
     ba8:	ee 24       	eor	r14, r14
     baa:	e1 f8       	bld	r14, 1
     bac:	f1 2c       	mov	r15, r1
     bae:	8e 01       	movw	r16, r28
     bb0:	0f 5f       	subi	r16, 0xFF	; 255
     bb2:	1f 4f       	sbci	r17, 0xFF	; 255
     bb4:	ec a1       	ldd	r30, Y+36	; 0x24
     bb6:	fd a1       	ldd	r31, Y+37	; 0x25
     bb8:	09 95       	icall
     bba:	88 23       	and	r24, r24
     bbc:	29 f0       	breq	.+10     	; 0xbc8 <__stack+0x2c9>
     bbe:	6f 85       	ldd	r22, Y+15	; 0x0f
     bc0:	78 89       	ldd	r23, Y+16	; 0x10
     bc2:	89 89       	ldd	r24, Y+17	; 0x11
     bc4:	9a 89       	ldd	r25, Y+18	; 0x12
     bc6:	2c c0       	rjmp	.+88     	; 0xc20 <__stack+0x321>
     bc8:	4f 85       	ldd	r20, Y+15	; 0x0f
     bca:	58 89       	ldd	r21, Y+16	; 0x10
     bcc:	69 89       	ldd	r22, Y+17	; 0x11
     bce:	7a 89       	ldd	r23, Y+18	; 0x12
     bd0:	8a a1       	ldd	r24, Y+34	; 0x22
     bd2:	9b a1       	ldd	r25, Y+35	; 0x23
     bd4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <fat_free_clusters>
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	1f c0       	rjmp	.+62     	; 0xc20 <__stack+0x321>
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	1a c0       	rjmp	.+52     	; 0xc20 <__stack+0x321>
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	15 c0       	rjmp	.+42     	; 0xc20 <__stack+0x321>
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	10 c0       	rjmp	.+32     	; 0xc20 <__stack+0x321>
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	ad 81       	ldd	r26, Y+5	; 0x05
     c06:	be 81       	ldd	r27, Y+6	; 0x06
     c08:	89 2b       	or	r24, r25
     c0a:	8a 2b       	or	r24, r26
     c0c:	8b 2b       	or	r24, r27
     c0e:	09 f0       	breq	.+2      	; 0xc12 <__stack+0x313>
     c10:	48 cf       	rjmp	.-368    	; 0xaa2 <__stack+0x1a3>
     c12:	c1 ce       	rjmp	.-638    	; 0x996 <__stack+0x97>
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	89 2b       	or	r24, r25
     c1a:	09 f0       	breq	.+2      	; 0xc1e <__stack+0x31f>
     c1c:	42 cf       	rjmp	.-380    	; 0xaa2 <__stack+0x1a3>
     c1e:	fa ce       	rjmp	.-524    	; 0xa14 <__stack+0x115>
     c20:	a9 96       	adiw	r28, 0x29	; 41
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	ff 90       	pop	r15
     c36:	ef 90       	pop	r14
     c38:	df 90       	pop	r13
     c3a:	cf 90       	pop	r12
     c3c:	bf 90       	pop	r11
     c3e:	af 90       	pop	r10
     c40:	9f 90       	pop	r9
     c42:	8f 90       	pop	r8
     c44:	7f 90       	pop	r7
     c46:	6f 90       	pop	r6
     c48:	5f 90       	pop	r5
     c4a:	4f 90       	pop	r4
     c4c:	3f 90       	pop	r3
     c4e:	2f 90       	pop	r2
     c50:	08 95       	ret

00000c52 <fat_cluster_offset>:
     c52:	2f 92       	push	r2
     c54:	3f 92       	push	r3
     c56:	4f 92       	push	r4
     c58:	5f 92       	push	r5
     c5a:	6f 92       	push	r6
     c5c:	7f 92       	push	r7
     c5e:	8f 92       	push	r8
     c60:	9f 92       	push	r9
     c62:	af 92       	push	r10
     c64:	bf 92       	push	r11
     c66:	cf 92       	push	r12
     c68:	df 92       	push	r13
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	59 f1       	breq	.+86     	; 0xcd0 <fat_cluster_offset+0x7e>
     c7a:	42 30       	cpi	r20, 0x02	; 2
     c7c:	51 05       	cpc	r21, r1
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	78 f1       	brcs	.+94     	; 0xce2 <fat_cluster_offset+0x90>
     c84:	ec 01       	movw	r28, r24
     c86:	42 50       	subi	r20, 0x02	; 2
     c88:	51 09       	sbc	r21, r1
     c8a:	61 09       	sbc	r22, r1
     c8c:	71 09       	sbc	r23, r1
     c8e:	1a 01       	movw	r2, r20
     c90:	2b 01       	movw	r4, r22
     c92:	08 8d       	ldd	r16, Y+24	; 0x18
     c94:	19 8d       	ldd	r17, Y+25	; 0x19
     c96:	a0 2e       	mov	r10, r16
     c98:	b1 2e       	mov	r11, r17
     c9a:	c1 2c       	mov	r12, r1
     c9c:	d1 2c       	mov	r13, r1
     c9e:	e1 2c       	mov	r14, r1
     ca0:	f1 2c       	mov	r15, r1
     ca2:	00 e0       	ldi	r16, 0x00	; 0
     ca4:	10 e0       	ldi	r17, 0x00	; 0
     ca6:	22 2d       	mov	r18, r2
     ca8:	33 2d       	mov	r19, r3
     caa:	44 2d       	mov	r20, r4
     cac:	55 2d       	mov	r21, r5
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 d7 20 	call	0x41ae	; 0x41ae <__muldi3>
     cba:	aa 8c       	ldd	r10, Y+26	; 0x1a
     cbc:	bb 8c       	ldd	r11, Y+27	; 0x1b
     cbe:	cc 8c       	ldd	r12, Y+28	; 0x1c
     cc0:	dd 8c       	ldd	r13, Y+29	; 0x1d
     cc2:	ee 8c       	ldd	r14, Y+30	; 0x1e
     cc4:	ff 8c       	ldd	r15, Y+31	; 0x1f
     cc6:	08 a1       	ldd	r16, Y+32	; 0x20
     cc8:	19 a1       	ldd	r17, Y+33	; 0x21
     cca:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
     cce:	11 c0       	rjmp	.+34     	; 0xcf2 <fat_cluster_offset+0xa0>
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	08 c0       	rjmp	.+16     	; 0xcf2 <fat_cluster_offset+0xa0>
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	ff 90       	pop	r15
     cfc:	ef 90       	pop	r14
     cfe:	df 90       	pop	r13
     d00:	cf 90       	pop	r12
     d02:	bf 90       	pop	r11
     d04:	af 90       	pop	r10
     d06:	9f 90       	pop	r9
     d08:	8f 90       	pop	r8
     d0a:	7f 90       	pop	r7
     d0c:	6f 90       	pop	r6
     d0e:	5f 90       	pop	r5
     d10:	4f 90       	pop	r4
     d12:	3f 90       	pop	r3
     d14:	2f 90       	pop	r2
     d16:	08 95       	ret

00000d18 <fat_calc_83_checksum>:
     d18:	ac 01       	movw	r20, r24
     d1a:	fc 01       	movw	r30, r24
     d1c:	81 91       	ld	r24, Z+
     d1e:	45 5f       	subi	r20, 0xF5	; 245
     d20:	5f 4f       	sbci	r21, 0xFF	; 255
     d22:	90 e8       	ldi	r25, 0x80	; 128
     d24:	89 9f       	mul	r24, r25
     d26:	90 01       	movw	r18, r0
     d28:	11 24       	eor	r1, r1
     d2a:	98 2f       	mov	r25, r24
     d2c:	96 95       	lsr	r25
     d2e:	92 2b       	or	r25, r18
     d30:	21 91       	ld	r18, Z+
     d32:	89 2f       	mov	r24, r25
     d34:	82 0f       	add	r24, r18
     d36:	e4 17       	cp	r30, r20
     d38:	f5 07       	cpc	r31, r21
     d3a:	99 f7       	brne	.-26     	; 0xd22 <fat_calc_83_checksum+0xa>
     d3c:	08 95       	ret

00000d3e <fat_get_fs_free_16_callback>:
     d3e:	cf 92       	push	r12
     d40:	df 92       	push	r13
     d42:	ef 92       	push	r14
     d44:	ff 92       	push	r15
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	f7 01       	movw	r30, r14
     d50:	c4 80       	ldd	r12, Z+4	; 0x04
     d52:	d5 80       	ldd	r13, Z+5	; 0x05
     d54:	c1 14       	cp	r12, r1
     d56:	d1 04       	cpc	r13, r1
     d58:	d1 f0       	breq	.+52     	; 0xd8e <fat_get_fs_free_16_callback+0x50>
     d5a:	8c 01       	movw	r16, r24
     d5c:	c0 e0       	ldi	r28, 0x00	; 0
     d5e:	d0 e0       	ldi	r29, 0x00	; 0
     d60:	c8 01       	movw	r24, r16
     d62:	8c 0f       	add	r24, r28
     d64:	9d 1f       	adc	r25, r29
     d66:	0e 94 0b 01 	call	0x216	; 0x216 <read16>
     d6a:	89 2b       	or	r24, r25
     d6c:	61 f4       	brne	.+24     	; 0xd86 <fat_get_fs_free_16_callback+0x48>
     d6e:	f7 01       	movw	r30, r14
     d70:	80 81       	ld	r24, Z
     d72:	91 81       	ldd	r25, Z+1	; 0x01
     d74:	a2 81       	ldd	r26, Z+2	; 0x02
     d76:	b3 81       	ldd	r27, Z+3	; 0x03
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	a1 1d       	adc	r26, r1
     d7c:	b1 1d       	adc	r27, r1
     d7e:	80 83       	st	Z, r24
     d80:	91 83       	std	Z+1, r25	; 0x01
     d82:	a2 83       	std	Z+2, r26	; 0x02
     d84:	b3 83       	std	Z+3, r27	; 0x03
     d86:	22 96       	adiw	r28, 0x02	; 2
     d88:	cc 15       	cp	r28, r12
     d8a:	dd 05       	cpc	r29, r13
     d8c:	48 f3       	brcs	.-46     	; 0xd60 <fat_get_fs_free_16_callback+0x22>
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	df 90       	pop	r13
     d9e:	cf 90       	pop	r12
     da0:	08 95       	ret

00000da2 <fat_dir_entry_read_callback>:
     da2:	2f 92       	push	r2
     da4:	3f 92       	push	r3
     da6:	4f 92       	push	r4
     da8:	5f 92       	push	r5
     daa:	6f 92       	push	r6
     dac:	7f 92       	push	r7
     dae:	8f 92       	push	r8
     db0:	9f 92       	push	r9
     db2:	af 92       	push	r10
     db4:	bf 92       	push	r11
     db6:	cf 92       	push	r12
     db8:	df 92       	push	r13
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	2d 97       	sbiw	r28, 0x0d	; 13
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	f7 01       	movw	r30, r14
     dd8:	a0 80       	ld	r10, Z
     dda:	b1 80       	ldd	r11, Z+1	; 0x01
     ddc:	a2 81       	ldd	r26, Z+2	; 0x02
     dde:	b3 81       	ldd	r27, Z+3	; 0x03
     de0:	90 96       	adiw	r26, 0x20	; 32
     de2:	b3 83       	std	Z+3, r27	; 0x03
     de4:	a2 83       	std	Z+2, r26	; 0x02
     de6:	dc 01       	movw	r26, r24
     de8:	fc 90       	ld	r15, X
     dea:	b5 ee       	ldi	r27, 0xE5	; 229
     dec:	fb 16       	cp	r15, r27
     dee:	11 f0       	breq	.+4      	; 0xdf4 <fat_dir_entry_read_callback+0x52>
     df0:	f1 10       	cpse	r15, r1
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <fat_dir_entry_read_callback+0x58>
     df4:	14 82       	std	Z+4, r1	; 0x04
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	37 c1       	rjmp	.+622    	; 0x1068 <fat_dir_entry_read_callback+0x2c6>
     dfa:	45 01       	movw	r8, r10
     dfc:	dc 01       	movw	r26, r24
     dfe:	1b 96       	adiw	r26, 0x0b	; 11
     e00:	fc 90       	ld	r15, X
     e02:	bf e0       	ldi	r27, 0x0F	; 15
     e04:	fb 12       	cpse	r15, r27
     e06:	48 c0       	rjmp	.+144    	; 0xe98 <fat_dir_entry_read_callback+0xf6>
     e08:	f4 80       	ldd	r15, Z+4	; 0x04
     e0a:	ff 20       	and	r15, r15
     e0c:	29 f0       	breq	.+10     	; 0xe18 <fat_dir_entry_read_callback+0x76>
     e0e:	dc 01       	movw	r26, r24
     e10:	1d 96       	adiw	r26, 0x0d	; 13
     e12:	ec 90       	ld	r14, X
     e14:	fe 14       	cp	r15, r14
     e16:	a9 f0       	breq	.+42     	; 0xe42 <fat_dir_entry_read_callback+0xa0>
     e18:	0f 2e       	mov	r0, r31
     e1a:	f1 e3       	ldi	r31, 0x31	; 49
     e1c:	ff 2e       	mov	r15, r31
     e1e:	f0 2d       	mov	r31, r0
     e20:	d5 01       	movw	r26, r10
     e22:	1d 92       	st	X+, r1
     e24:	fa 94       	dec	r15
     e26:	e9 f7       	brne	.-6      	; 0xe22 <fat_dir_entry_read_callback+0x80>
     e28:	dc 01       	movw	r26, r24
     e2a:	1d 96       	adiw	r26, 0x0d	; 13
     e2c:	fc 90       	ld	r15, X
     e2e:	f4 82       	std	Z+4, r15	; 0x04
     e30:	f5 01       	movw	r30, r10
     e32:	01 a7       	std	Z+41, r16	; 0x29
     e34:	12 a7       	std	Z+42, r17	; 0x2a
     e36:	23 a7       	std	Z+43, r18	; 0x2b
     e38:	34 a7       	std	Z+44, r19	; 0x2c
     e3a:	45 a7       	std	Z+45, r20	; 0x2d
     e3c:	56 a7       	std	Z+46, r21	; 0x2e
     e3e:	67 a7       	std	Z+47, r22	; 0x2f
     e40:	70 ab       	std	Z+48, r23	; 0x30
     e42:	dc 01       	movw	r26, r24
     e44:	2c 91       	ld	r18, X
     e46:	2f 73       	andi	r18, 0x3F	; 63
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	21 50       	subi	r18, 0x01	; 1
     e4c:	31 09       	sbc	r19, r1
     e4e:	4d e0       	ldi	r20, 0x0D	; 13
     e50:	42 9f       	mul	r20, r18
     e52:	b0 01       	movw	r22, r0
     e54:	43 9f       	mul	r20, r19
     e56:	70 0d       	add	r23, r0
     e58:	11 24       	eor	r1, r1
     e5a:	2d e0       	ldi	r18, 0x0D	; 13
     e5c:	e0 e0       	ldi	r30, 0x00	; 0
     e5e:	f1 e0       	ldi	r31, 0x01	; 1
     e60:	de 01       	movw	r26, r28
     e62:	11 96       	adiw	r26, 0x01	; 1
     e64:	01 90       	ld	r0, Z+
     e66:	0d 92       	st	X+, r0
     e68:	2a 95       	dec	r18
     e6a:	e1 f7       	brne	.-8      	; 0xe64 <fat_dir_entry_read_callback+0xc2>
     e6c:	6f 31       	cpi	r22, 0x1F	; 31
     e6e:	71 05       	cpc	r23, r1
     e70:	08 f4       	brcc	.+2      	; 0xe74 <fat_dir_entry_read_callback+0xd2>
     e72:	dd c0       	rjmp	.+442    	; 0x102e <fat_dir_entry_read_callback+0x28c>
     e74:	0f c0       	rjmp	.+30     	; 0xe94 <fat_dir_entry_read_callback+0xf2>
     e76:	21 91       	ld	r18, Z+
     e78:	8c 01       	movw	r16, r24
     e7a:	02 0f       	add	r16, r18
     e7c:	11 1d       	adc	r17, r1
     e7e:	d8 01       	movw	r26, r16
     e80:	2c 91       	ld	r18, X
     e82:	d5 01       	movw	r26, r10
     e84:	2d 93       	st	X+, r18
     e86:	5d 01       	movw	r10, r26
     e88:	e6 17       	cp	r30, r22
     e8a:	f7 07       	cpc	r31, r23
     e8c:	19 f0       	breq	.+6      	; 0xe94 <fat_dir_entry_read_callback+0xf2>
     e8e:	e4 17       	cp	r30, r20
     e90:	f5 07       	cpc	r31, r21
     e92:	89 f7       	brne	.-30     	; 0xe76 <fat_dir_entry_read_callback+0xd4>
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	e8 c0       	rjmp	.+464    	; 0x1068 <fat_dir_entry_read_callback+0x2c6>
     e98:	7f 01       	movw	r14, r30
     e9a:	77 2e       	mov	r7, r23
     e9c:	66 2e       	mov	r6, r22
     e9e:	55 2e       	mov	r5, r21
     ea0:	44 2e       	mov	r4, r20
     ea2:	33 2e       	mov	r3, r19
     ea4:	22 2e       	mov	r2, r18
     ea6:	6c 01       	movw	r12, r24
     ea8:	f5 01       	movw	r30, r10
     eaa:	80 81       	ld	r24, Z
     eac:	88 23       	and	r24, r24
     eae:	49 f0       	breq	.+18     	; 0xec2 <fat_dir_entry_read_callback+0x120>
     eb0:	c6 01       	movw	r24, r12
     eb2:	0e 94 8c 06 	call	0xd18	; 0xd18 <fat_calc_83_checksum>
     eb6:	d7 01       	movw	r26, r14
     eb8:	14 96       	adiw	r26, 0x04	; 4
     eba:	9c 91       	ld	r25, X
     ebc:	98 17       	cp	r25, r24
     ebe:	09 f4       	brne	.+2      	; 0xec2 <fat_dir_entry_read_callback+0x120>
     ec0:	80 c0       	rjmp	.+256    	; 0xfc2 <fat_dir_entry_read_callback+0x220>
     ec2:	81 e3       	ldi	r24, 0x31	; 49
     ec4:	f5 01       	movw	r30, r10
     ec6:	11 92       	st	Z+, r1
     ec8:	8a 95       	dec	r24
     eca:	e9 f7       	brne	.-6      	; 0xec6 <fat_dir_entry_read_callback+0x124>
     ecc:	d5 01       	movw	r26, r10
     ece:	99 96       	adiw	r26, 0x29	; 41
     ed0:	0c 93       	st	X, r16
     ed2:	99 97       	sbiw	r26, 0x29	; 41
     ed4:	9a 96       	adiw	r26, 0x2a	; 42
     ed6:	1c 93       	st	X, r17
     ed8:	9a 97       	sbiw	r26, 0x2a	; 42
     eda:	9b 96       	adiw	r26, 0x2b	; 43
     edc:	2c 92       	st	X, r2
     ede:	9b 97       	sbiw	r26, 0x2b	; 43
     ee0:	9c 96       	adiw	r26, 0x2c	; 44
     ee2:	3c 92       	st	X, r3
     ee4:	9c 97       	sbiw	r26, 0x2c	; 44
     ee6:	9d 96       	adiw	r26, 0x2d	; 45
     ee8:	4c 92       	st	X, r4
     eea:	9d 97       	sbiw	r26, 0x2d	; 45
     eec:	9e 96       	adiw	r26, 0x2e	; 46
     eee:	5c 92       	st	X, r5
     ef0:	9e 97       	sbiw	r26, 0x2e	; 46
     ef2:	9f 96       	adiw	r26, 0x2f	; 47
     ef4:	6c 92       	st	X, r6
     ef6:	9f 97       	sbiw	r26, 0x2f	; 47
     ef8:	d0 96       	adiw	r26, 0x30	; 48
     efa:	7c 92       	st	X, r7
     efc:	f6 01       	movw	r30, r12
     efe:	80 81       	ld	r24, Z
     f00:	80 32       	cpi	r24, 0x20	; 32
     f02:	19 f1       	breq	.+70     	; 0xf4a <fat_dir_entry_read_callback+0x1a8>
     f04:	6a 2d       	mov	r22, r10
     f06:	96 01       	movw	r18, r12
     f08:	29 5f       	subi	r18, 0xF9	; 249
     f0a:	3f 4f       	sbci	r19, 0xFF	; 255
     f0c:	0a 2d       	mov	r16, r10
     f0e:	1b 2d       	mov	r17, r11
     f10:	04 c0       	rjmp	.+8      	; 0xf1a <fat_dir_entry_read_callback+0x178>
     f12:	31 96       	adiw	r30, 0x01	; 1
     f14:	80 81       	ld	r24, Z
     f16:	80 32       	cpi	r24, 0x20	; 32
     f18:	c9 f0       	breq	.+50     	; 0xf4c <fat_dir_entry_read_callback+0x1aa>
     f1a:	d8 01       	movw	r26, r16
     f1c:	8d 93       	st	X+, r24
     f1e:	8d 01       	movw	r16, r26
     f20:	d6 01       	movw	r26, r12
     f22:	1c 96       	adiw	r26, 0x0c	; 12
     f24:	9c 91       	ld	r25, X
     f26:	93 ff       	sbrs	r25, 3
     f28:	0a c0       	rjmp	.+20     	; 0xf3e <fat_dir_entry_read_callback+0x19c>
     f2a:	90 81       	ld	r25, Z
     f2c:	91 54       	subi	r25, 0x41	; 65
     f2e:	9a 31       	cpi	r25, 0x1A	; 26
     f30:	30 f4       	brcc	.+12     	; 0xf3e <fat_dir_entry_read_callback+0x19c>
     f32:	a8 01       	movw	r20, r16
     f34:	41 50       	subi	r20, 0x01	; 1
     f36:	51 09       	sbc	r21, r1
     f38:	80 5e       	subi	r24, 0xE0	; 224
     f3a:	da 01       	movw	r26, r20
     f3c:	8c 93       	st	X, r24
     f3e:	90 2f       	mov	r25, r16
     f40:	96 1b       	sub	r25, r22
     f42:	e2 17       	cp	r30, r18
     f44:	f3 07       	cpc	r31, r19
     f46:	29 f7       	brne	.-54     	; 0xf12 <fat_dir_entry_read_callback+0x170>
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <fat_dir_entry_read_callback+0x1aa>
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	f5 01       	movw	r30, r10
     f4e:	80 81       	ld	r24, Z
     f50:	85 30       	cpi	r24, 0x05	; 5
     f52:	11 f4       	brne	.+4      	; 0xf58 <fat_dir_entry_read_callback+0x1b6>
     f54:	85 ee       	ldi	r24, 0xE5	; 229
     f56:	80 83       	st	Z, r24
     f58:	d6 01       	movw	r26, r12
     f5a:	18 96       	adiw	r26, 0x08	; 8
     f5c:	8c 91       	ld	r24, X
     f5e:	18 97       	sbiw	r26, 0x08	; 8
     f60:	80 32       	cpi	r24, 0x20	; 32
     f62:	59 f1       	breq	.+86     	; 0xfba <fat_dir_entry_read_callback+0x218>
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	89 0f       	add	r24, r25
     f68:	2e e2       	ldi	r18, 0x2E	; 46
     f6a:	f5 01       	movw	r30, r10
     f6c:	e9 0f       	add	r30, r25
     f6e:	f1 1d       	adc	r31, r1
     f70:	20 83       	st	Z, r18
     f72:	f6 01       	movw	r30, r12
     f74:	38 96       	adiw	r30, 0x08	; 8
     f76:	18 96       	adiw	r26, 0x08	; 8
     f78:	2c 91       	ld	r18, X
     f7a:	20 32       	cpi	r18, 0x20	; 32
     f7c:	d9 f0       	breq	.+54     	; 0xfb4 <fat_dir_entry_read_callback+0x212>
     f7e:	9c 5f       	subi	r25, 0xFC	; 252
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <fat_dir_entry_read_callback+0x1e8>
     f82:	31 96       	adiw	r30, 0x01	; 1
     f84:	20 81       	ld	r18, Z
     f86:	20 32       	cpi	r18, 0x20	; 32
     f88:	b9 f0       	breq	.+46     	; 0xfb8 <fat_dir_entry_read_callback+0x216>
     f8a:	a4 01       	movw	r20, r8
     f8c:	48 0f       	add	r20, r24
     f8e:	51 1d       	adc	r21, r1
     f90:	da 01       	movw	r26, r20
     f92:	2c 93       	st	X, r18
     f94:	d6 01       	movw	r26, r12
     f96:	1c 96       	adiw	r26, 0x0c	; 12
     f98:	3c 91       	ld	r19, X
     f9a:	34 ff       	sbrs	r19, 4
     f9c:	07 c0       	rjmp	.+14     	; 0xfac <fat_dir_entry_read_callback+0x20a>
     f9e:	30 81       	ld	r19, Z
     fa0:	31 54       	subi	r19, 0x41	; 65
     fa2:	3a 31       	cpi	r19, 0x1A	; 26
     fa4:	18 f4       	brcc	.+6      	; 0xfac <fat_dir_entry_read_callback+0x20a>
     fa6:	20 5e       	subi	r18, 0xE0	; 224
     fa8:	da 01       	movw	r26, r20
     faa:	2c 93       	st	X, r18
     fac:	8f 5f       	subi	r24, 0xFF	; 255
     fae:	89 13       	cpse	r24, r25
     fb0:	e8 cf       	rjmp	.-48     	; 0xf82 <fat_dir_entry_read_callback+0x1e0>
     fb2:	03 c0       	rjmp	.+6      	; 0xfba <fat_dir_entry_read_callback+0x218>
     fb4:	98 2f       	mov	r25, r24
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <fat_dir_entry_read_callback+0x218>
     fb8:	98 2f       	mov	r25, r24
     fba:	f5 01       	movw	r30, r10
     fbc:	e9 0f       	add	r30, r25
     fbe:	f1 1d       	adc	r31, r1
     fc0:	10 82       	st	Z, r1
     fc2:	f6 01       	movw	r30, r12
     fc4:	83 85       	ldd	r24, Z+11	; 0x0b
     fc6:	d5 01       	movw	r26, r10
     fc8:	90 96       	adiw	r26, 0x20	; 32
     fca:	8c 93       	st	X, r24
     fcc:	c6 01       	movw	r24, r12
     fce:	4a 96       	adiw	r24, 0x1a	; 26
     fd0:	0e 94 0b 01 	call	0x216	; 0x216 <read16>
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	f5 01       	movw	r30, r10
     fda:	81 a3       	std	Z+33, r24	; 0x21
     fdc:	92 a3       	std	Z+34, r25	; 0x22
     fde:	a3 a3       	std	Z+35, r26	; 0x23
     fe0:	b4 a3       	std	Z+36, r27	; 0x24
     fe2:	c6 01       	movw	r24, r12
     fe4:	44 96       	adiw	r24, 0x14	; 20
     fe6:	0e 94 0b 01 	call	0x216	; 0x216 <read16>
     fea:	a0 e0       	ldi	r26, 0x00	; 0
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	dc 01       	movw	r26, r24
     ff0:	99 27       	eor	r25, r25
     ff2:	88 27       	eor	r24, r24
     ff4:	f5 01       	movw	r30, r10
     ff6:	41 a1       	ldd	r20, Z+33	; 0x21
     ff8:	52 a1       	ldd	r21, Z+34	; 0x22
     ffa:	63 a1       	ldd	r22, Z+35	; 0x23
     ffc:	74 a1       	ldd	r23, Z+36	; 0x24
     ffe:	84 2b       	or	r24, r20
    1000:	95 2b       	or	r25, r21
    1002:	a6 2b       	or	r26, r22
    1004:	b7 2b       	or	r27, r23
    1006:	81 a3       	std	Z+33, r24	; 0x21
    1008:	92 a3       	std	Z+34, r25	; 0x22
    100a:	a3 a3       	std	Z+35, r26	; 0x23
    100c:	b4 a3       	std	Z+36, r27	; 0x24
    100e:	c6 01       	movw	r24, r12
    1010:	4c 96       	adiw	r24, 0x1c	; 28
    1012:	0e 94 15 01 	call	0x22a	; 0x22a <read32>
    1016:	d5 01       	movw	r26, r10
    1018:	95 96       	adiw	r26, 0x25	; 37
    101a:	6d 93       	st	X+, r22
    101c:	7d 93       	st	X+, r23
    101e:	8d 93       	st	X+, r24
    1020:	9c 93       	st	X, r25
    1022:	98 97       	sbiw	r26, 0x28	; 40
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	f7 01       	movw	r30, r14
    1028:	85 83       	std	Z+5, r24	; 0x05
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	1d c0       	rjmp	.+58     	; 0x1068 <fat_dir_entry_read_callback+0x2c6>
    102e:	29 81       	ldd	r18, Y+1	; 0x01
    1030:	fc 01       	movw	r30, r24
    1032:	e2 0f       	add	r30, r18
    1034:	f1 1d       	adc	r31, r1
    1036:	20 81       	ld	r18, Z
    1038:	f5 01       	movw	r30, r10
    103a:	e6 0f       	add	r30, r22
    103c:	f7 1f       	adc	r31, r23
    103e:	20 83       	st	Z, r18
    1040:	fe 01       	movw	r30, r28
    1042:	32 96       	adiw	r30, 0x02	; 2
    1044:	db 01       	movw	r26, r22
    1046:	11 96       	adiw	r26, 0x01	; 1
    1048:	aa 0e       	add	r10, r26
    104a:	bb 1e       	adc	r11, r27
    104c:	4f e1       	ldi	r20, 0x1F	; 31
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	46 1b       	sub	r20, r22
    1052:	57 0b       	sbc	r21, r23
    1054:	01 e0       	ldi	r16, 0x01	; 1
    1056:	10 e0       	ldi	r17, 0x00	; 0
    1058:	0c 0f       	add	r16, r28
    105a:	1d 1f       	adc	r17, r29
    105c:	40 0f       	add	r20, r16
    105e:	51 1f       	adc	r21, r17
    1060:	be 01       	movw	r22, r28
    1062:	62 5f       	subi	r22, 0xF2	; 242
    1064:	7f 4f       	sbci	r23, 0xFF	; 255
    1066:	13 cf       	rjmp	.-474    	; 0xe8e <fat_dir_entry_read_callback+0xec>
    1068:	2d 96       	adiw	r28, 0x0d	; 13
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	df 90       	pop	r13
    1082:	cf 90       	pop	r12
    1084:	bf 90       	pop	r11
    1086:	af 90       	pop	r10
    1088:	9f 90       	pop	r9
    108a:	8f 90       	pop	r8
    108c:	7f 90       	pop	r7
    108e:	6f 90       	pop	r6
    1090:	5f 90       	pop	r5
    1092:	4f 90       	pop	r4
    1094:	3f 90       	pop	r3
    1096:	2f 90       	pop	r2
    1098:	08 95       	ret

0000109a <fat_get_fs_free_32_callback>:
    109a:	cf 92       	push	r12
    109c:	df 92       	push	r13
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	f7 01       	movw	r30, r14
    10ac:	c4 80       	ldd	r12, Z+4	; 0x04
    10ae:	d5 80       	ldd	r13, Z+5	; 0x05
    10b0:	c1 14       	cp	r12, r1
    10b2:	d1 04       	cpc	r13, r1
    10b4:	e1 f0       	breq	.+56     	; 0x10ee <fat_get_fs_free_32_callback+0x54>
    10b6:	8c 01       	movw	r16, r24
    10b8:	c0 e0       	ldi	r28, 0x00	; 0
    10ba:	d0 e0       	ldi	r29, 0x00	; 0
    10bc:	c8 01       	movw	r24, r16
    10be:	8c 0f       	add	r24, r28
    10c0:	9d 1f       	adc	r25, r29
    10c2:	0e 94 15 01 	call	0x22a	; 0x22a <read32>
    10c6:	67 2b       	or	r22, r23
    10c8:	68 2b       	or	r22, r24
    10ca:	69 2b       	or	r22, r25
    10cc:	61 f4       	brne	.+24     	; 0x10e6 <fat_get_fs_free_32_callback+0x4c>
    10ce:	f7 01       	movw	r30, r14
    10d0:	80 81       	ld	r24, Z
    10d2:	91 81       	ldd	r25, Z+1	; 0x01
    10d4:	a2 81       	ldd	r26, Z+2	; 0x02
    10d6:	b3 81       	ldd	r27, Z+3	; 0x03
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	a1 1d       	adc	r26, r1
    10dc:	b1 1d       	adc	r27, r1
    10de:	80 83       	st	Z, r24
    10e0:	91 83       	std	Z+1, r25	; 0x01
    10e2:	a2 83       	std	Z+2, r26	; 0x02
    10e4:	b3 83       	std	Z+3, r27	; 0x03
    10e6:	24 96       	adiw	r28, 0x04	; 4
    10e8:	cc 15       	cp	r28, r12
    10ea:	dd 05       	cpc	r29, r13
    10ec:	38 f3       	brcs	.-50     	; 0x10bc <fat_get_fs_free_32_callback+0x22>
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	ff 90       	pop	r15
    10fa:	ef 90       	pop	r14
    10fc:	df 90       	pop	r13
    10fe:	cf 90       	pop	r12
    1100:	08 95       	ret

00001102 <fat_write_dir_entry>:
    1102:	2f 92       	push	r2
    1104:	3f 92       	push	r3
    1106:	4f 92       	push	r4
    1108:	5f 92       	push	r5
    110a:	6f 92       	push	r6
    110c:	7f 92       	push	r7
    110e:	8f 92       	push	r8
    1110:	9f 92       	push	r9
    1112:	af 92       	push	r10
    1114:	bf 92       	push	r11
    1116:	cf 92       	push	r12
    1118:	df 92       	push	r13
    111a:	ef 92       	push	r14
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	a6 97       	sbiw	r28, 0x26	; 38
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	09 f4       	brne	.+2      	; 0x113c <fat_write_dir_entry+0x3a>
    113a:	6e c1       	rjmp	.+732    	; 0x1418 <fat_write_dir_entry+0x316>
    113c:	61 15       	cp	r22, r1
    113e:	71 05       	cpc	r23, r1
    1140:	09 f4       	brne	.+2      	; 0x1144 <fat_write_dir_entry+0x42>
    1142:	6c c1       	rjmp	.+728    	; 0x141c <fat_write_dir_entry+0x31a>
    1144:	6b 01       	movw	r12, r22
    1146:	fc 01       	movw	r30, r24
    1148:	01 90       	ld	r0, Z+
    114a:	f0 81       	ld	r31, Z
    114c:	e0 2d       	mov	r30, r0
    114e:	84 81       	ldd	r24, Z+4	; 0x04
    1150:	95 81       	ldd	r25, Z+5	; 0x05
    1152:	9b a3       	std	Y+35, r25	; 0x23
    1154:	8a a3       	std	Y+34, r24	; 0x22
    1156:	db 01       	movw	r26, r22
    1158:	99 96       	adiw	r26, 0x29	; 41
    115a:	9c 90       	ld	r9, X
    115c:	99 97       	sbiw	r26, 0x29	; 41
    115e:	9a 96       	adiw	r26, 0x2a	; 42
    1160:	8c 90       	ld	r8, X
    1162:	9a 97       	sbiw	r26, 0x2a	; 42
    1164:	9b 96       	adiw	r26, 0x2b	; 43
    1166:	7c 90       	ld	r7, X
    1168:	9b 97       	sbiw	r26, 0x2b	; 43
    116a:	9c 96       	adiw	r26, 0x2c	; 44
    116c:	6c 90       	ld	r6, X
    116e:	9c 97       	sbiw	r26, 0x2c	; 44
    1170:	9d 96       	adiw	r26, 0x2d	; 45
    1172:	5c 90       	ld	r5, X
    1174:	9d 97       	sbiw	r26, 0x2d	; 45
    1176:	9e 96       	adiw	r26, 0x2e	; 46
    1178:	4c 90       	ld	r4, X
    117a:	9e 97       	sbiw	r26, 0x2e	; 46
    117c:	9f 96       	adiw	r26, 0x2f	; 47
    117e:	3c 90       	ld	r3, X
    1180:	9f 97       	sbiw	r26, 0x2f	; 47
    1182:	d0 96       	adiw	r26, 0x30	; 48
    1184:	2c 90       	ld	r2, X
    1186:	7d a3       	std	Y+37, r23	; 0x25
    1188:	6c a3       	std	Y+36, r22	; 0x24
    118a:	fb 01       	movw	r30, r22
    118c:	01 90       	ld	r0, Z+
    118e:	00 20       	and	r0, r0
    1190:	e9 f7       	brne	.-6      	; 0x118c <fat_write_dir_entry+0x8a>
    1192:	31 97       	sbiw	r30, 0x01	; 1
    1194:	5f 01       	movw	r10, r30
    1196:	a6 1a       	sub	r10, r22
    1198:	b7 0a       	sbc	r11, r23
    119a:	1a 2d       	mov	r17, r10
    119c:	c5 01       	movw	r24, r10
    119e:	99 27       	eor	r25, r25
    11a0:	0c 96       	adiw	r24, 0x0c	; 12
    11a2:	6d e0       	ldi	r22, 0x0D	; 13
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	0e 94 81 20 	call	0x4102	; 0x4102 <__divmodhi4>
    11aa:	69 a3       	std	Y+33, r22	; 0x21
    11ac:	4b e0       	ldi	r20, 0x0B	; 11
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	60 e2       	ldi	r22, 0x20	; 32
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	ce 01       	movw	r24, r28
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	0e 94 a3 21 	call	0x4346	; 0x4346 <memset>
    11bc:	6e e2       	ldi	r22, 0x2E	; 46
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	c6 01       	movw	r24, r12
    11c2:	0e 94 cc 21 	call	0x4398	; 0x4398 <strrchr>
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	d1 f0       	breq	.+52     	; 0x11fe <fat_write_dir_entry+0xfc>
    11ca:	fc 01       	movw	r30, r24
    11cc:	21 81       	ldd	r18, Z+1	; 0x01
    11ce:	22 23       	and	r18, r18
    11d0:	b1 f0       	breq	.+44     	; 0x11fe <fat_write_dir_entry+0xfc>
    11d2:	bc 01       	movw	r22, r24
    11d4:	6f 5f       	subi	r22, 0xFF	; 255
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
    11d8:	fb 01       	movw	r30, r22
    11da:	01 90       	ld	r0, Z+
    11dc:	00 20       	and	r0, r0
    11de:	e9 f7       	brne	.-6      	; 0x11da <fat_write_dir_entry+0xd8>
    11e0:	31 97       	sbiw	r30, 0x01	; 1
    11e2:	e6 1b       	sub	r30, r22
    11e4:	f7 0b       	sbc	r31, r23
    11e6:	aa 94       	dec	r10
    11e8:	1a 2d       	mov	r17, r10
    11ea:	1e 1b       	sub	r17, r30
    11ec:	e4 30       	cpi	r30, 0x04	; 4
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <fat_write_dir_entry+0xf0>
    11f0:	e3 e0       	ldi	r30, 0x03	; 3
    11f2:	4e 2f       	mov	r20, r30
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	ce 01       	movw	r24, r28
    11f8:	09 96       	adiw	r24, 0x09	; 9
    11fa:	0e 94 9a 21 	call	0x4334	; 0x4334 <memcpy>
    11fe:	19 30       	cpi	r17, 0x09	; 9
    1200:	d0 f4       	brcc	.+52     	; 0x1236 <fat_write_dir_entry+0x134>
    1202:	41 2f       	mov	r20, r17
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	b6 01       	movw	r22, r12
    1208:	ce 01       	movw	r24, r28
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	0e 94 9a 21 	call	0x4334	; 0x4334 <memcpy>
    1210:	d6 01       	movw	r26, r12
    1212:	8c 91       	ld	r24, X
    1214:	8e 32       	cpi	r24, 0x2E	; 46
    1216:	61 f5       	brne	.+88     	; 0x1270 <fat_write_dir_entry+0x16e>
    1218:	11 96       	adiw	r26, 0x01	; 1
    121a:	8c 91       	ld	r24, X
    121c:	11 97       	sbiw	r26, 0x01	; 1
    121e:	8e 32       	cpi	r24, 0x2E	; 46
    1220:	31 f4       	brne	.+12     	; 0x122e <fat_write_dir_entry+0x12c>
    1222:	12 96       	adiw	r26, 0x02	; 2
    1224:	8c 91       	ld	r24, X
    1226:	81 11       	cpse	r24, r1
    1228:	23 c0       	rjmp	.+70     	; 0x1270 <fat_write_dir_entry+0x16e>
    122a:	19 a2       	std	Y+33, r1	; 0x21
    122c:	21 c0       	rjmp	.+66     	; 0x1270 <fat_write_dir_entry+0x16e>
    122e:	81 11       	cpse	r24, r1
    1230:	1f c0       	rjmp	.+62     	; 0x1270 <fat_write_dir_entry+0x16e>
    1232:	19 a2       	std	Y+33, r1	; 0x21
    1234:	1d c0       	rjmp	.+58     	; 0x1270 <fat_write_dir_entry+0x16e>
    1236:	88 e0       	ldi	r24, 0x08	; 8
    1238:	f6 01       	movw	r30, r12
    123a:	de 01       	movw	r26, r28
    123c:	11 96       	adiw	r26, 0x01	; 1
    123e:	01 90       	ld	r0, Z+
    1240:	0d 92       	st	X+, r0
    1242:	8a 95       	dec	r24
    1244:	e1 f7       	brne	.-8      	; 0x123e <fat_write_dir_entry+0x13c>
    1246:	f6 01       	movw	r30, r12
    1248:	81 a1       	ldd	r24, Z+33	; 0x21
    124a:	80 3a       	cpi	r24, 0xA0	; 160
    124c:	28 f4       	brcc	.+10     	; 0x1258 <fat_write_dir_entry+0x156>
    124e:	98 2f       	mov	r25, r24
    1250:	92 95       	swap	r25
    1252:	9f 70       	andi	r25, 0x0F	; 15
    1254:	90 5d       	subi	r25, 0xD0	; 208
    1256:	04 c0       	rjmp	.+8      	; 0x1260 <fat_write_dir_entry+0x15e>
    1258:	98 2f       	mov	r25, r24
    125a:	92 95       	swap	r25
    125c:	9f 70       	andi	r25, 0x0F	; 15
    125e:	9f 59       	subi	r25, 0x9F	; 159
    1260:	9f 83       	std	Y+7, r25	; 0x07
    1262:	8f 70       	andi	r24, 0x0F	; 15
    1264:	8a 30       	cpi	r24, 0x0A	; 10
    1266:	10 f4       	brcc	.+4      	; 0x126c <fat_write_dir_entry+0x16a>
    1268:	80 5d       	subi	r24, 0xD0	; 208
    126a:	01 c0       	rjmp	.+2      	; 0x126e <fat_write_dir_entry+0x16c>
    126c:	8f 59       	subi	r24, 0x9F	; 159
    126e:	88 87       	std	Y+8, r24	; 0x08
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	85 3e       	cpi	r24, 0xE5	; 229
    1274:	11 f4       	brne	.+4      	; 0x127a <fat_write_dir_entry+0x178>
    1276:	85 e0       	ldi	r24, 0x05	; 5
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	fe 01       	movw	r30, r28
    127c:	3c 96       	adiw	r30, 0x0c	; 12
    127e:	85 e1       	ldi	r24, 0x15	; 21
    1280:	df 01       	movw	r26, r30
    1282:	1d 92       	st	X+, r1
    1284:	8a 95       	dec	r24
    1286:	e9 f7       	brne	.-6      	; 0x1282 <fat_write_dir_entry+0x180>
    1288:	f6 01       	movw	r30, r12
    128a:	80 a1       	ldd	r24, Z+32	; 0x20
    128c:	8c 87       	std	Y+12, r24	; 0x0c
    128e:	81 a1       	ldd	r24, Z+33	; 0x21
    1290:	92 a1       	ldd	r25, Z+34	; 0x22
    1292:	a3 a1       	ldd	r26, Z+35	; 0x23
    1294:	b4 a1       	ldd	r27, Z+36	; 0x24
    1296:	bd 01       	movw	r22, r26
    1298:	88 27       	eor	r24, r24
    129a:	99 27       	eor	r25, r25
    129c:	ce 01       	movw	r24, r28
    129e:	45 96       	adiw	r24, 0x15	; 21
    12a0:	0e 94 27 01 	call	0x24e	; 0x24e <write16>
    12a4:	d6 01       	movw	r26, r12
    12a6:	91 96       	adiw	r26, 0x21	; 33
    12a8:	6d 91       	ld	r22, X+
    12aa:	7c 91       	ld	r23, X
    12ac:	92 97       	sbiw	r26, 0x22	; 34
    12ae:	ce 01       	movw	r24, r28
    12b0:	4b 96       	adiw	r24, 0x1b	; 27
    12b2:	0e 94 27 01 	call	0x24e	; 0x24e <write16>
    12b6:	f6 01       	movw	r30, r12
    12b8:	45 a1       	ldd	r20, Z+37	; 0x25
    12ba:	56 a1       	ldd	r21, Z+38	; 0x26
    12bc:	67 a1       	ldd	r22, Z+39	; 0x27
    12be:	70 a5       	ldd	r23, Z+40	; 0x28
    12c0:	ce 01       	movw	r24, r28
    12c2:	4d 96       	adiw	r24, 0x1d	; 29
    12c4:	0e 94 2b 01 	call	0x256	; 0x256 <write32>
    12c8:	29 a1       	ldd	r18, Y+33	; 0x21
    12ca:	f0 e2       	ldi	r31, 0x20	; 32
    12cc:	2f 9f       	mul	r18, r31
    12ce:	a0 01       	movw	r20, r0
    12d0:	11 24       	eor	r1, r1
    12d2:	24 2f       	mov	r18, r20
    12d4:	35 2f       	mov	r19, r21
    12d6:	40 e0       	ldi	r20, 0x00	; 0
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a9 2c       	mov	r10, r9
    12e4:	b8 2c       	mov	r11, r8
    12e6:	c7 2c       	mov	r12, r7
    12e8:	d6 2c       	mov	r13, r6
    12ea:	e5 2c       	mov	r14, r5
    12ec:	f4 2c       	mov	r15, r4
    12ee:	03 2d       	mov	r16, r3
    12f0:	12 2d       	mov	r17, r2
    12f2:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
    12f6:	68 94       	set
    12f8:	ee 24       	eor	r14, r14
    12fa:	e5 f8       	bld	r14, 5
    12fc:	f1 2c       	mov	r15, r1
    12fe:	8e 01       	movw	r16, r28
    1300:	0f 5f       	subi	r16, 0xFF	; 255
    1302:	1f 4f       	sbci	r17, 0xFF	; 255
    1304:	ea a1       	ldd	r30, Y+34	; 0x22
    1306:	fb a1       	ldd	r31, Y+35	; 0x23
    1308:	09 95       	icall
    130a:	88 23       	and	r24, r24
    130c:	09 f4       	brne	.+2      	; 0x1310 <fat_write_dir_entry+0x20e>
    130e:	8f c0       	rjmp	.+286    	; 0x142e <fat_write_dir_entry+0x32c>
    1310:	c8 01       	movw	r24, r16
    1312:	0e 94 8c 06 	call	0xd18	; 0xd18 <fat_calc_83_checksum>
    1316:	a8 2e       	mov	r10, r24
    1318:	f9 a1       	ldd	r31, Y+33	; 0x21
    131a:	ff 23       	and	r31, r31
    131c:	09 f4       	brne	.+2      	; 0x1320 <fat_write_dir_entry+0x21e>
    131e:	80 c0       	rjmp	.+256    	; 0x1420 <fat_write_dir_entry+0x31e>
    1320:	df 2e       	mov	r13, r31
    1322:	0f 2e       	mov	r0, r31
    1324:	fe e0       	ldi	r31, 0x0E	; 14
    1326:	bf 2e       	mov	r11, r31
    1328:	f0 2d       	mov	r31, r0
    132a:	0f 2e       	mov	r0, r31
    132c:	fc e1       	ldi	r31, 0x1C	; 28
    132e:	cf 2e       	mov	r12, r31
    1330:	f0 2d       	mov	r31, r0
    1332:	f0 64       	ori	r31, 0x40	; 64
    1334:	fe a3       	std	Y+38, r31	; 0x26
    1336:	40 e2       	ldi	r20, 0x20	; 32
    1338:	50 e0       	ldi	r21, 0x00	; 0
    133a:	6f ef       	ldi	r22, 0xFF	; 255
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	ce 01       	movw	r24, r28
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	0e 94 a3 21 	call	0x4346	; 0x4346 <memset>
    1346:	8d 2d       	mov	r24, r13
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	2d e0       	ldi	r18, 0x0D	; 13
    134e:	28 9f       	mul	r18, r24
    1350:	f0 01       	movw	r30, r0
    1352:	29 9f       	mul	r18, r25
    1354:	f0 0d       	add	r31, r0
    1356:	11 24       	eor	r1, r1
    1358:	8c a1       	ldd	r24, Y+36	; 0x24
    135a:	9d a1       	ldd	r25, Y+37	; 0x25
    135c:	e8 0f       	add	r30, r24
    135e:	f9 1f       	adc	r31, r25
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	bf 01       	movw	r22, r30
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <fat_write_dir_entry+0x266>
    1366:	31 96       	adiw	r30, 0x01	; 1
    1368:	91 e0       	ldi	r25, 0x01	; 1
    136a:	98 0f       	add	r25, r24
    136c:	db 01       	movw	r26, r22
    136e:	4d 91       	ld	r20, X+
    1370:	bd 01       	movw	r22, r26
    1372:	21 e0       	ldi	r18, 0x01	; 1
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	2c 0f       	add	r18, r28
    1378:	3d 1f       	adc	r19, r29
    137a:	28 0f       	add	r18, r24
    137c:	31 1d       	adc	r19, r1
    137e:	d9 01       	movw	r26, r18
    1380:	4c 93       	st	X, r20
    1382:	8e 5f       	subi	r24, 0xFE	; 254
    1384:	21 e0       	ldi	r18, 0x01	; 1
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	2c 0f       	add	r18, r28
    138a:	3d 1f       	adc	r19, r29
    138c:	29 0f       	add	r18, r25
    138e:	31 1d       	adc	r19, r1
    1390:	d9 01       	movw	r26, r18
    1392:	1c 92       	st	X, r1
    1394:	8b 30       	cpi	r24, 0x0B	; 11
    1396:	09 f4       	brne	.+2      	; 0x139a <fat_write_dir_entry+0x298>
    1398:	45 c0       	rjmp	.+138    	; 0x1424 <fat_write_dir_entry+0x322>
    139a:	8a 31       	cpi	r24, 0x1A	; 26
    139c:	11 f4       	brne	.+4      	; 0x13a2 <fat_write_dir_entry+0x2a0>
    139e:	8c 2d       	mov	r24, r12
    13a0:	42 c0       	rjmp	.+132    	; 0x1426 <fat_write_dir_entry+0x324>
    13a2:	90 81       	ld	r25, Z
    13a4:	99 23       	and	r25, r25
    13a6:	11 f0       	breq	.+4      	; 0x13ac <fat_write_dir_entry+0x2aa>
    13a8:	8f 31       	cpi	r24, 0x1F	; 31
    13aa:	e8 f2       	brcs	.-70     	; 0x1366 <fat_write_dir_entry+0x264>
    13ac:	d9 82       	std	Y+1, r13	; 0x01
    13ae:	b9 a1       	ldd	r27, Y+33	; 0x21
    13b0:	db 12       	cpse	r13, r27
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <fat_write_dir_entry+0x2b6>
    13b4:	ee a1       	ldd	r30, Y+38	; 0x26
    13b6:	e9 83       	std	Y+1, r30	; 0x01
    13b8:	ff e0       	ldi	r31, 0x0F	; 15
    13ba:	fc 87       	std	Y+12, r31	; 0x0c
    13bc:	ae 86       	std	Y+14, r10	; 0x0e
    13be:	1d 86       	std	Y+13, r1	; 0x0d
    13c0:	1b 8e       	std	Y+27, r1	; 0x1b
    13c2:	1c 8e       	std	Y+28, r1	; 0x1c
    13c4:	68 94       	set
    13c6:	ee 24       	eor	r14, r14
    13c8:	e5 f8       	bld	r14, 5
    13ca:	f1 2c       	mov	r15, r1
    13cc:	8e 01       	movw	r16, r28
    13ce:	0f 5f       	subi	r16, 0xFF	; 255
    13d0:	1f 4f       	sbci	r17, 0xFF	; 255
    13d2:	29 2d       	mov	r18, r9
    13d4:	38 2d       	mov	r19, r8
    13d6:	47 2d       	mov	r20, r7
    13d8:	56 2d       	mov	r21, r6
    13da:	65 2d       	mov	r22, r5
    13dc:	74 2d       	mov	r23, r4
    13de:	83 2d       	mov	r24, r3
    13e0:	92 2d       	mov	r25, r2
    13e2:	ea a1       	ldd	r30, Y+34	; 0x22
    13e4:	fb a1       	ldd	r31, Y+35	; 0x23
    13e6:	09 95       	icall
    13e8:	29 2d       	mov	r18, r9
    13ea:	38 2d       	mov	r19, r8
    13ec:	47 2d       	mov	r20, r7
    13ee:	56 2d       	mov	r21, r6
    13f0:	65 2d       	mov	r22, r5
    13f2:	74 2d       	mov	r23, r4
    13f4:	83 2d       	mov	r24, r3
    13f6:	92 2d       	mov	r25, r2
    13f8:	a0 e2       	ldi	r26, 0x20	; 32
    13fa:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__adddi3_s8>
    13fe:	92 2e       	mov	r9, r18
    1400:	83 2e       	mov	r8, r19
    1402:	74 2e       	mov	r7, r20
    1404:	65 2e       	mov	r6, r21
    1406:	56 2e       	mov	r5, r22
    1408:	47 2e       	mov	r4, r23
    140a:	38 2e       	mov	r3, r24
    140c:	29 2e       	mov	r2, r25
    140e:	da 94       	dec	r13
    1410:	d1 10       	cpse	r13, r1
    1412:	91 cf       	rjmp	.-222    	; 0x1336 <fat_write_dir_entry+0x234>
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	0b c0       	rjmp	.+22     	; 0x142e <fat_write_dir_entry+0x32c>
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	09 c0       	rjmp	.+18     	; 0x142e <fat_write_dir_entry+0x32c>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	07 c0       	rjmp	.+14     	; 0x142e <fat_write_dir_entry+0x32c>
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	05 c0       	rjmp	.+10     	; 0x142e <fat_write_dir_entry+0x32c>
    1424:	8b 2d       	mov	r24, r11
    1426:	90 81       	ld	r25, Z
    1428:	91 11       	cpse	r25, r1
    142a:	9d cf       	rjmp	.-198    	; 0x1366 <fat_write_dir_entry+0x264>
    142c:	bf cf       	rjmp	.-130    	; 0x13ac <fat_write_dir_entry+0x2aa>
    142e:	a6 96       	adiw	r28, 0x26	; 38
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	df 90       	pop	r13
    1448:	cf 90       	pop	r12
    144a:	bf 90       	pop	r11
    144c:	af 90       	pop	r10
    144e:	9f 90       	pop	r9
    1450:	8f 90       	pop	r8
    1452:	7f 90       	pop	r7
    1454:	6f 90       	pop	r6
    1456:	5f 90       	pop	r5
    1458:	4f 90       	pop	r4
    145a:	3f 90       	pop	r3
    145c:	2f 90       	pop	r2
    145e:	08 95       	ret

00001460 <fat_open>:
    1460:	2f 92       	push	r2
    1462:	3f 92       	push	r3
    1464:	4f 92       	push	r4
    1466:	5f 92       	push	r5
    1468:	6f 92       	push	r6
    146a:	7f 92       	push	r7
    146c:	8f 92       	push	r8
    146e:	9f 92       	push	r9
    1470:	af 92       	push	r10
    1472:	bf 92       	push	r11
    1474:	cf 92       	push	r12
    1476:	df 92       	push	r13
    1478:	ef 92       	push	r14
    147a:	ff 92       	push	r15
    147c:	0f 93       	push	r16
    147e:	1f 93       	push	r17
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	c6 55       	subi	r28, 0x56	; 86
    148a:	d1 09       	sbc	r29, r1
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	09 f4       	brne	.+2      	; 0x149c <fat_open+0x3c>
    149a:	70 c2       	rjmp	.+1248   	; 0x197c <fat_open+0x51c>
    149c:	dc 01       	movw	r26, r24
    149e:	14 96       	adiw	r26, 0x04	; 4
    14a0:	2d 91       	ld	r18, X+
    14a2:	3c 91       	ld	r19, X
    14a4:	15 97       	sbiw	r26, 0x05	; 5
    14a6:	23 2b       	or	r18, r19
    14a8:	09 f4       	brne	.+2      	; 0x14ac <fat_open+0x4c>
    14aa:	6b c2       	rjmp	.+1238   	; 0x1982 <fat_open+0x522>
    14ac:	16 96       	adiw	r26, 0x06	; 6
    14ae:	2d 91       	ld	r18, X+
    14b0:	3c 91       	ld	r19, X
    14b2:	17 97       	sbiw	r26, 0x07	; 7
    14b4:	23 2b       	or	r18, r19
    14b6:	09 f4       	brne	.+2      	; 0x14ba <fat_open+0x5a>
    14b8:	67 c2       	rjmp	.+1230   	; 0x1988 <fat_open+0x528>
    14ba:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <fat_fs_handles>
    14be:	30 91 d6 01 	lds	r19, 0x01D6	; 0x8001d6 <fat_fs_handles+0x1>
    14c2:	23 2b       	or	r18, r19
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <fat_open+0x68>
    14c6:	63 c2       	rjmp	.+1222   	; 0x198e <fat_open+0x52e>
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	9c c2       	rjmp	.+1336   	; 0x1a06 <fat_open+0x5a6>
    14ce:	ce 01       	movw	r24, r28
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	0e 94 0b 01 	call	0x216	; 0x216 <read16>
    14d6:	9a af       	std	Y+58, r25	; 0x3a
    14d8:	89 af       	std	Y+57, r24	; 0x39
    14da:	ce 01       	movw	r24, r28
    14dc:	04 96       	adiw	r24, 0x04	; 4
    14de:	0e 94 0b 01 	call	0x216	; 0x216 <read16>
    14e2:	9c af       	std	Y+60, r25	; 0x3c
    14e4:	8b af       	std	Y+59, r24	; 0x3b
    14e6:	bb 81       	ldd	r27, Y+3	; 0x03
    14e8:	24 96       	adiw	r28, 0x04	; 4
    14ea:	bf af       	std	Y+63, r27	; 0x3f
    14ec:	24 97       	sbiw	r28, 0x04	; 4
    14ee:	ee 81       	ldd	r30, Y+6	; 0x06
    14f0:	25 96       	adiw	r28, 0x05	; 5
    14f2:	ef af       	std	Y+63, r30	; 0x3f
    14f4:	25 97       	sbiw	r28, 0x05	; 5
    14f6:	ce 01       	movw	r24, r28
    14f8:	07 96       	adiw	r24, 0x07	; 7
    14fa:	0e 94 0b 01 	call	0x216	; 0x216 <read16>
    14fe:	2f 96       	adiw	r28, 0x0f	; 15
    1500:	9f af       	std	Y+63, r25	; 0x3f
    1502:	8e af       	std	Y+62, r24	; 0x3e
    1504:	2f 97       	sbiw	r28, 0x0f	; 15
    1506:	ce 01       	movw	r24, r28
    1508:	09 96       	adiw	r24, 0x09	; 9
    150a:	0e 94 0b 01 	call	0x216	; 0x216 <read16>
    150e:	7c 01       	movw	r14, r24
    1510:	ce 01       	movw	r24, r28
    1512:	0c 96       	adiw	r24, 0x0c	; 12
    1514:	0e 94 0b 01 	call	0x216	; 0x216 <read16>
    1518:	23 96       	adiw	r28, 0x03	; 3
    151a:	9f af       	std	Y+63, r25	; 0x3f
    151c:	8e af       	std	Y+62, r24	; 0x3e
    151e:	23 97       	sbiw	r28, 0x03	; 3
    1520:	ce 01       	movw	r24, r28
    1522:	46 96       	adiw	r24, 0x16	; 22
    1524:	0e 94 15 01 	call	0x22a	; 0x22a <read32>
    1528:	5b 01       	movw	r10, r22
    152a:	6c 01       	movw	r12, r24
    152c:	ce 01       	movw	r24, r28
    152e:	4a 96       	adiw	r24, 0x1a	; 26
    1530:	0e 94 15 01 	call	0x22a	; 0x22a <read32>
    1534:	21 96       	adiw	r28, 0x01	; 1
    1536:	6c af       	std	Y+60, r22	; 0x3c
    1538:	7d af       	std	Y+61, r23	; 0x3d
    153a:	8e af       	std	Y+62, r24	; 0x3e
    153c:	9f af       	std	Y+63, r25	; 0x3f
    153e:	21 97       	sbiw	r28, 0x01	; 1
    1540:	ce 01       	movw	r24, r28
    1542:	82 96       	adiw	r24, 0x22	; 34
    1544:	0e 94 15 01 	call	0x22a	; 0x22a <read32>
    1548:	67 96       	adiw	r28, 0x17	; 23
    154a:	6c af       	std	Y+60, r22	; 0x3c
    154c:	7d af       	std	Y+61, r23	; 0x3d
    154e:	8e af       	std	Y+62, r24	; 0x3e
    1550:	9f af       	std	Y+63, r25	; 0x3f
    1552:	67 97       	sbiw	r28, 0x17	; 23
    1554:	a1 14       	cp	r10, r1
    1556:	b1 04       	cpc	r11, r1
    1558:	c1 04       	cpc	r12, r1
    155a:	d1 04       	cpc	r13, r1
    155c:	39 f4       	brne	.+14     	; 0x156c <fat_open+0x10c>
    155e:	e1 14       	cp	r14, r1
    1560:	f1 04       	cpc	r15, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <fat_open+0x106>
    1564:	47 c2       	rjmp	.+1166   	; 0x19f4 <fat_open+0x594>
    1566:	57 01       	movw	r10, r14
    1568:	c1 2c       	mov	r12, r1
    156a:	d1 2c       	mov	r13, r1
    156c:	23 96       	adiw	r28, 0x03	; 3
    156e:	ee ac       	ldd	r14, Y+62	; 0x3e
    1570:	ff ac       	ldd	r15, Y+63	; 0x3f
    1572:	23 97       	sbiw	r28, 0x03	; 3
    1574:	e1 14       	cp	r14, r1
    1576:	f1 04       	cpc	r15, r1
    1578:	51 f0       	breq	.+20     	; 0x158e <fat_open+0x12e>
    157a:	87 01       	movw	r16, r14
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	21 96       	adiw	r28, 0x01	; 1
    1582:	0c af       	std	Y+60, r16	; 0x3c
    1584:	1d af       	std	Y+61, r17	; 0x3d
    1586:	2e af       	std	Y+62, r18	; 0x3e
    1588:	3f af       	std	Y+63, r19	; 0x3f
    158a:	21 97       	sbiw	r28, 0x01	; 1
    158c:	0b c0       	rjmp	.+22     	; 0x15a4 <fat_open+0x144>
    158e:	21 96       	adiw	r28, 0x01	; 1
    1590:	4c ad       	ldd	r20, Y+60	; 0x3c
    1592:	5d ad       	ldd	r21, Y+61	; 0x3d
    1594:	6e ad       	ldd	r22, Y+62	; 0x3e
    1596:	7f ad       	ldd	r23, Y+63	; 0x3f
    1598:	21 97       	sbiw	r28, 0x01	; 1
    159a:	45 2b       	or	r20, r21
    159c:	46 2b       	or	r20, r22
    159e:	47 2b       	or	r20, r23
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <fat_open+0x144>
    15a2:	28 c2       	rjmp	.+1104   	; 0x19f4 <fat_open+0x594>
    15a4:	25 96       	adiw	r28, 0x05	; 5
    15a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    15a8:	25 97       	sbiw	r28, 0x05	; 5
    15aa:	a5 2f       	mov	r26, r21
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	21 96       	adiw	r28, 0x01	; 1
    15b0:	2c ad       	ldd	r18, Y+60	; 0x3c
    15b2:	3d ad       	ldd	r19, Y+61	; 0x3d
    15b4:	4e ad       	ldd	r20, Y+62	; 0x3e
    15b6:	5f ad       	ldd	r21, Y+63	; 0x3f
    15b8:	21 97       	sbiw	r28, 0x01	; 1
    15ba:	0e 94 cc 20 	call	0x4198	; 0x4198 <__muluhisi3>
    15be:	86 01       	movw	r16, r12
    15c0:	75 01       	movw	r14, r10
    15c2:	2b ad       	ldd	r18, Y+59	; 0x3b
    15c4:	3c ad       	ldd	r19, Y+60	; 0x3c
    15c6:	e2 1a       	sub	r14, r18
    15c8:	f3 0a       	sbc	r15, r19
    15ca:	01 09       	sbc	r16, r1
    15cc:	11 09       	sbc	r17, r1
    15ce:	e6 1a       	sub	r14, r22
    15d0:	f7 0a       	sbc	r15, r23
    15d2:	08 0b       	sbc	r16, r24
    15d4:	19 0b       	sbc	r17, r25
    15d6:	2f 96       	adiw	r28, 0x0f	; 15
    15d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    15da:	9f ad       	ldd	r25, Y+63	; 0x3f
    15dc:	2f 97       	sbiw	r28, 0x0f	; 15
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	82 95       	swap	r24
    15e4:	92 95       	swap	r25
    15e6:	90 7f       	andi	r25, 0xF0	; 240
    15e8:	98 27       	eor	r25, r24
    15ea:	80 7f       	andi	r24, 0xF0	; 240
    15ec:	98 27       	eor	r25, r24
    15ee:	49 ad       	ldd	r20, Y+57	; 0x39
    15f0:	5a ad       	ldd	r21, Y+58	; 0x3a
    15f2:	41 50       	subi	r20, 0x01	; 1
    15f4:	51 09       	sbc	r21, r1
    15f6:	84 0f       	add	r24, r20
    15f8:	95 1f       	adc	r25, r21
    15fa:	69 ad       	ldd	r22, Y+57	; 0x39
    15fc:	7a ad       	ldd	r23, Y+58	; 0x3a
    15fe:	0e 94 6d 20 	call	0x40da	; 0x40da <__udivmodhi4>
    1602:	e6 1a       	sub	r14, r22
    1604:	f7 0a       	sbc	r15, r23
    1606:	01 09       	sbc	r16, r1
    1608:	11 09       	sbc	r17, r1
    160a:	c8 01       	movw	r24, r16
    160c:	b7 01       	movw	r22, r14
    160e:	24 96       	adiw	r28, 0x04	; 4
    1610:	4f ad       	ldd	r20, Y+63	; 0x3f
    1612:	24 97       	sbiw	r28, 0x04	; 4
    1614:	04 2f       	mov	r16, r20
    1616:	10 e0       	ldi	r17, 0x00	; 0
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	a9 01       	movw	r20, r18
    161e:	98 01       	movw	r18, r16
    1620:	0e 94 95 20 	call	0x412a	; 0x412a <__udivmodsi4>
    1624:	63 96       	adiw	r28, 0x13	; 19
    1626:	2c af       	std	Y+60, r18	; 0x3c
    1628:	3d af       	std	Y+61, r19	; 0x3d
    162a:	4e af       	std	Y+62, r20	; 0x3e
    162c:	5f af       	std	Y+63, r21	; 0x3f
    162e:	63 97       	sbiw	r28, 0x13	; 19
    1630:	da 01       	movw	r26, r20
    1632:	c9 01       	movw	r24, r18
    1634:	85 3f       	cpi	r24, 0xF5	; 245
    1636:	5f e0       	ldi	r21, 0x0F	; 15
    1638:	95 07       	cpc	r25, r21
    163a:	a1 05       	cpc	r26, r1
    163c:	b1 05       	cpc	r27, r1
    163e:	08 f4       	brcc	.+2      	; 0x1642 <fat_open+0x1e2>
    1640:	d9 c1       	rjmp	.+946    	; 0x19f4 <fat_open+0x594>
    1642:	85 3f       	cpi	r24, 0xF5	; 245
    1644:	9f 4f       	sbci	r25, 0xFF	; 255
    1646:	a1 05       	cpc	r26, r1
    1648:	b1 05       	cpc	r27, r1
    164a:	28 f4       	brcc	.+10     	; 0x1656 <fat_open+0x1f6>
    164c:	86 e0       	ldi	r24, 0x06	; 6
    164e:	d2 01       	movw	r26, r4
    1650:	18 96       	adiw	r26, 0x08	; 8
    1652:	8c 93       	st	X, r24
    1654:	03 c0       	rjmp	.+6      	; 0x165c <fat_open+0x1fc>
    1656:	8b e0       	ldi	r24, 0x0B	; 11
    1658:	f2 01       	movw	r30, r4
    165a:	80 87       	std	Z+8, r24	; 0x08
    165c:	8c e2       	ldi	r24, 0x2C	; 44
    165e:	e7 ed       	ldi	r30, 0xD7	; 215
    1660:	f1 e0       	ldi	r31, 0x01	; 1
    1662:	df 01       	movw	r26, r30
    1664:	1d 92       	st	X+, r1
    1666:	8a 95       	dec	r24
    1668:	e9 f7       	brne	.-6      	; 0x1664 <fat_open+0x204>
    166a:	09 ad       	ldd	r16, Y+57	; 0x39
    166c:	1a ad       	ldd	r17, Y+58	; 0x3a
    166e:	78 01       	movw	r14, r16
    1670:	00 e0       	ldi	r16, 0x00	; 0
    1672:	10 e0       	ldi	r17, 0x00	; 0
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	a9 01       	movw	r20, r18
    167a:	e9 aa       	std	Y+49, r14	; 0x31
    167c:	fa aa       	std	Y+50, r15	; 0x32
    167e:	0b ab       	std	Y+51, r16	; 0x33
    1680:	1c ab       	std	Y+52, r17	; 0x34
    1682:	2d ab       	std	Y+53, r18	; 0x35
    1684:	3e ab       	std	Y+54, r19	; 0x36
    1686:	4f ab       	std	Y+55, r20	; 0x37
    1688:	58 af       	std	Y+56, r21	; 0x38
    168a:	0f 2e       	mov	r0, r31
    168c:	f5 ed       	ldi	r31, 0xD5	; 213
    168e:	8f 2e       	mov	r8, r31
    1690:	f1 e0       	ldi	r31, 0x01	; 1
    1692:	9f 2e       	mov	r9, r31
    1694:	f0 2d       	mov	r31, r0
    1696:	a6 01       	movw	r20, r12
    1698:	95 01       	movw	r18, r10
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	cb 01       	movw	r24, r22
    16a0:	26 96       	adiw	r28, 0x06	; 6
    16a2:	af ae       	std	Y+63, r10	; 0x3f
    16a4:	26 97       	sbiw	r28, 0x06	; 6
    16a6:	27 96       	adiw	r28, 0x07	; 7
    16a8:	3f af       	std	Y+63, r19	; 0x3f
    16aa:	27 97       	sbiw	r28, 0x07	; 7
    16ac:	28 96       	adiw	r28, 0x08	; 8
    16ae:	4f af       	std	Y+63, r20	; 0x3f
    16b0:	28 97       	sbiw	r28, 0x08	; 8
    16b2:	29 96       	adiw	r28, 0x09	; 9
    16b4:	5f af       	std	Y+63, r21	; 0x3f
    16b6:	29 97       	sbiw	r28, 0x09	; 9
    16b8:	2a 96       	adiw	r28, 0x0a	; 10
    16ba:	6f af       	std	Y+63, r22	; 0x3f
    16bc:	2a 97       	sbiw	r28, 0x0a	; 10
    16be:	2b 96       	adiw	r28, 0x0b	; 11
    16c0:	7f af       	std	Y+63, r23	; 0x3f
    16c2:	2b 97       	sbiw	r28, 0x0b	; 11
    16c4:	2c 96       	adiw	r28, 0x0c	; 12
    16c6:	8f af       	std	Y+63, r24	; 0x3f
    16c8:	2c 97       	sbiw	r28, 0x0c	; 12
    16ca:	2d 96       	adiw	r28, 0x0d	; 13
    16cc:	9f af       	std	Y+63, r25	; 0x3f
    16ce:	2d 97       	sbiw	r28, 0x0d	; 13
    16d0:	ae 2c       	mov	r10, r14
    16d2:	bf 2c       	mov	r11, r15
    16d4:	c1 2c       	mov	r12, r1
    16d6:	d1 2c       	mov	r13, r1
    16d8:	e1 2c       	mov	r14, r1
    16da:	f1 2c       	mov	r15, r1
    16dc:	00 e0       	ldi	r16, 0x00	; 0
    16de:	10 e0       	ldi	r17, 0x00	; 0
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	0e 94 d7 20 	call	0x41ae	; 0x41ae <__muldi3>
    16ec:	d4 01       	movw	r26, r8
    16ee:	12 96       	adiw	r26, 0x02	; 2
    16f0:	2c 93       	st	X, r18
    16f2:	12 97       	sbiw	r26, 0x02	; 2
    16f4:	13 96       	adiw	r26, 0x03	; 3
    16f6:	3c 93       	st	X, r19
    16f8:	13 97       	sbiw	r26, 0x03	; 3
    16fa:	14 96       	adiw	r26, 0x04	; 4
    16fc:	4c 93       	st	X, r20
    16fe:	14 97       	sbiw	r26, 0x04	; 4
    1700:	15 96       	adiw	r26, 0x05	; 5
    1702:	5c 93       	st	X, r21
    1704:	15 97       	sbiw	r26, 0x05	; 5
    1706:	16 96       	adiw	r26, 0x06	; 6
    1708:	6c 93       	st	X, r22
    170a:	16 97       	sbiw	r26, 0x06	; 6
    170c:	17 96       	adiw	r26, 0x07	; 7
    170e:	7c 93       	st	X, r23
    1710:	17 97       	sbiw	r26, 0x07	; 7
    1712:	18 96       	adiw	r26, 0x08	; 8
    1714:	8c 93       	st	X, r24
    1716:	18 97       	sbiw	r26, 0x08	; 8
    1718:	19 96       	adiw	r26, 0x09	; 9
    171a:	9c 93       	st	X, r25
    171c:	eb ad       	ldd	r30, Y+59	; 0x3b
    171e:	fc ad       	ldd	r31, Y+60	; 0x3c
    1720:	af 01       	movw	r20, r30
    1722:	2e 2f       	mov	r18, r30
    1724:	35 2f       	mov	r19, r21
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 d7 20 	call	0x41ae	; 0x41ae <__muldi3>
    1736:	a6 2c       	mov	r10, r6
    1738:	b7 2c       	mov	r11, r7
    173a:	ce a0       	ldd	r12, Y+38	; 0x26
    173c:	de a4       	ldd	r13, Y+46	; 0x2e
    173e:	ef a4       	ldd	r14, Y+47	; 0x2f
    1740:	f8 a8       	ldd	r15, Y+48	; 0x30
    1742:	02 2d       	mov	r16, r2
    1744:	13 2d       	mov	r17, r3
    1746:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
    174a:	72 2e       	mov	r7, r18
    174c:	63 2e       	mov	r6, r19
    174e:	4e a7       	std	Y+46, r20	; 0x2e
    1750:	5f a7       	std	Y+47, r21	; 0x2f
    1752:	68 ab       	std	Y+48, r22	; 0x30
    1754:	7b af       	std	Y+59, r23	; 0x3b
    1756:	28 2e       	mov	r2, r24
    1758:	39 2e       	mov	r3, r25
    175a:	d4 01       	movw	r26, r8
    175c:	1a 96       	adiw	r26, 0x0a	; 10
    175e:	2c 93       	st	X, r18
    1760:	1a 97       	sbiw	r26, 0x0a	; 10
    1762:	1b 96       	adiw	r26, 0x0b	; 11
    1764:	3c 93       	st	X, r19
    1766:	1b 97       	sbiw	r26, 0x0b	; 11
    1768:	1c 96       	adiw	r26, 0x0c	; 12
    176a:	4c 93       	st	X, r20
    176c:	1c 97       	sbiw	r26, 0x0c	; 12
    176e:	1d 96       	adiw	r26, 0x0d	; 13
    1770:	5c 93       	st	X, r21
    1772:	1d 97       	sbiw	r26, 0x0d	; 13
    1774:	1e 96       	adiw	r26, 0x0e	; 14
    1776:	6c 93       	st	X, r22
    1778:	1e 97       	sbiw	r26, 0x0e	; 14
    177a:	1f 96       	adiw	r26, 0x0f	; 15
    177c:	7c 93       	st	X, r23
    177e:	1f 97       	sbiw	r26, 0x0f	; 15
    1780:	50 96       	adiw	r26, 0x10	; 16
    1782:	8c 93       	st	X, r24
    1784:	50 97       	sbiw	r26, 0x10	; 16
    1786:	51 96       	adiw	r26, 0x11	; 17
    1788:	9c 93       	st	X, r25
    178a:	63 96       	adiw	r28, 0x13	; 19
    178c:	6c ad       	ldd	r22, Y+60	; 0x3c
    178e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1790:	8e ad       	ldd	r24, Y+62	; 0x3e
    1792:	9f ad       	ldd	r25, Y+63	; 0x3f
    1794:	63 97       	sbiw	r28, 0x13	; 19
    1796:	6e 5f       	subi	r22, 0xFE	; 254
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	8f 4f       	sbci	r24, 0xFF	; 255
    179c:	9f 4f       	sbci	r25, 0xFF	; 255
    179e:	f2 01       	movw	r30, r4
    17a0:	20 85       	ldd	r18, Z+8	; 0x08
    17a2:	26 30       	cpi	r18, 0x06	; 6
    17a4:	29 f0       	breq	.+10     	; 0x17b0 <fat_open+0x350>
    17a6:	24 e0       	ldi	r18, 0x04	; 4
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e0       	ldi	r20, 0x00	; 0
    17ac:	50 e0       	ldi	r21, 0x00	; 0
    17ae:	04 c0       	rjmp	.+8      	; 0x17b8 <fat_open+0x358>
    17b0:	22 e0       	ldi	r18, 0x02	; 2
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	e5 ed       	ldi	r30, 0xD5	; 213
    17ba:	f1 e0       	ldi	r31, 0x01	; 1
    17bc:	0e 94 5d 20 	call	0x40ba	; 0x40ba <__mulsi3>
    17c0:	62 8b       	std	Z+18, r22	; 0x12
    17c2:	73 8b       	std	Z+19, r23	; 0x13
    17c4:	84 8b       	std	Z+20, r24	; 0x14
    17c6:	95 8b       	std	Z+21, r25	; 0x15
    17c8:	a9 ac       	ldd	r10, Y+57	; 0x39
    17ca:	ba ac       	ldd	r11, Y+58	; 0x3a
    17cc:	b7 8a       	std	Z+23, r11	; 0x17
    17ce:	a6 8a       	std	Z+22, r10	; 0x16
    17d0:	24 96       	adiw	r28, 0x04	; 4
    17d2:	cf ac       	ldd	r12, Y+63	; 0x3f
    17d4:	24 97       	sbiw	r28, 0x04	; 4
    17d6:	ca 9c       	mul	r12, r10
    17d8:	c0 01       	movw	r24, r0
    17da:	cb 9c       	mul	r12, r11
    17dc:	90 0d       	add	r25, r0
    17de:	11 24       	eor	r1, r1
    17e0:	91 8f       	std	Z+25, r25	; 0x19
    17e2:	80 8f       	std	Z+24, r24	; 0x18
    17e4:	d2 01       	movw	r26, r4
    17e6:	18 96       	adiw	r26, 0x08	; 8
    17e8:	8c 91       	ld	r24, X
    17ea:	86 30       	cpi	r24, 0x06	; 6
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <fat_open+0x390>
    17ee:	63 c0       	rjmp	.+198    	; 0x18b6 <fat_open+0x456>
    17f0:	23 96       	adiw	r28, 0x03	; 3
    17f2:	ee ad       	ldd	r30, Y+62	; 0x3e
    17f4:	ff ad       	ldd	r31, Y+63	; 0x3f
    17f6:	23 97       	sbiw	r28, 0x03	; 3
    17f8:	8f 01       	movw	r16, r30
    17fa:	ae 2e       	mov	r10, r30
    17fc:	b1 2e       	mov	r11, r17
    17fe:	c1 2c       	mov	r12, r1
    1800:	d1 2c       	mov	r13, r1
    1802:	e1 2c       	mov	r14, r1
    1804:	f1 2c       	mov	r15, r1
    1806:	00 e0       	ldi	r16, 0x00	; 0
    1808:	10 e0       	ldi	r17, 0x00	; 0
    180a:	29 a9       	ldd	r18, Y+49	; 0x31
    180c:	3a a9       	ldd	r19, Y+50	; 0x32
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	0e 94 d7 20 	call	0x41ae	; 0x41ae <__muldi3>
    181e:	25 96       	adiw	r28, 0x05	; 5
    1820:	af ac       	ldd	r10, Y+63	; 0x3f
    1822:	25 97       	sbiw	r28, 0x05	; 5
    1824:	b1 2c       	mov	r11, r1
    1826:	0e 94 d7 20 	call	0x41ae	; 0x41ae <__muldi3>
    182a:	a7 2c       	mov	r10, r7
    182c:	b6 2c       	mov	r11, r6
    182e:	ce a4       	ldd	r12, Y+46	; 0x2e
    1830:	df a4       	ldd	r13, Y+47	; 0x2f
    1832:	e8 a8       	ldd	r14, Y+48	; 0x30
    1834:	fb ac       	ldd	r15, Y+59	; 0x3b
    1836:	02 2d       	mov	r16, r2
    1838:	13 2d       	mov	r17, r3
    183a:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
    183e:	42 2e       	mov	r4, r18
    1840:	53 2e       	mov	r5, r19
    1842:	64 2e       	mov	r6, r20
    1844:	75 2e       	mov	r7, r21
    1846:	86 2e       	mov	r8, r22
    1848:	97 2e       	mov	r9, r23
    184a:	b8 2f       	mov	r27, r24
    184c:	a9 2f       	mov	r26, r25
    184e:	e5 ed       	ldi	r30, 0xD5	; 213
    1850:	f1 e0       	ldi	r31, 0x01	; 1
    1852:	22 a3       	std	Z+34, r18	; 0x22
    1854:	33 a3       	std	Z+35, r19	; 0x23
    1856:	44 a3       	std	Z+36, r20	; 0x24
    1858:	55 a3       	std	Z+37, r21	; 0x25
    185a:	66 a3       	std	Z+38, r22	; 0x26
    185c:	77 a3       	std	Z+39, r23	; 0x27
    185e:	80 a7       	std	Z+40, r24	; 0x28
    1860:	91 a7       	std	Z+41, r25	; 0x29
    1862:	2f 96       	adiw	r28, 0x0f	; 15
    1864:	2e ad       	ldd	r18, Y+62	; 0x3e
    1866:	3f ad       	ldd	r19, Y+63	; 0x3f
    1868:	2f 97       	sbiw	r28, 0x0f	; 15
    186a:	59 01       	movw	r10, r18
    186c:	3b 2d       	mov	r19, r11
    186e:	40 e0       	ldi	r20, 0x00	; 0
    1870:	50 e0       	ldi	r21, 0x00	; 0
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	05 e0       	ldi	r16, 0x05	; 5
    187c:	0e 94 30 21 	call	0x4260	; 0x4260 <__ashldi3>
    1880:	a2 2e       	mov	r10, r18
    1882:	b3 2e       	mov	r11, r19
    1884:	c4 2e       	mov	r12, r20
    1886:	d5 2e       	mov	r13, r21
    1888:	e6 2e       	mov	r14, r22
    188a:	f7 2e       	mov	r15, r23
    188c:	08 2f       	mov	r16, r24
    188e:	19 2f       	mov	r17, r25
    1890:	24 2d       	mov	r18, r4
    1892:	35 2d       	mov	r19, r5
    1894:	46 2d       	mov	r20, r6
    1896:	57 2d       	mov	r21, r7
    1898:	68 2d       	mov	r22, r8
    189a:	79 2d       	mov	r23, r9
    189c:	8b 2f       	mov	r24, r27
    189e:	9a 2f       	mov	r25, r26
    18a0:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
    18a4:	22 8f       	std	Z+26, r18	; 0x1a
    18a6:	33 8f       	std	Z+27, r19	; 0x1b
    18a8:	44 8f       	std	Z+28, r20	; 0x1c
    18aa:	55 8f       	std	Z+29, r21	; 0x1d
    18ac:	66 8f       	std	Z+30, r22	; 0x1e
    18ae:	77 8f       	std	Z+31, r23	; 0x1f
    18b0:	80 a3       	std	Z+32, r24	; 0x20
    18b2:	91 a3       	std	Z+33, r25	; 0x21
    18b4:	a6 c0       	rjmp	.+332    	; 0x1a02 <fat_open+0x5a2>
    18b6:	0f 2e       	mov	r0, r31
    18b8:	f5 ed       	ldi	r31, 0xD5	; 213
    18ba:	8f 2e       	mov	r8, r31
    18bc:	f1 e0       	ldi	r31, 0x01	; 1
    18be:	9f 2e       	mov	r9, r31
    18c0:	f0 2d       	mov	r31, r0
    18c2:	25 96       	adiw	r28, 0x05	; 5
    18c4:	af ac       	ldd	r10, Y+63	; 0x3f
    18c6:	25 97       	sbiw	r28, 0x05	; 5
    18c8:	b1 2c       	mov	r11, r1
    18ca:	c1 2c       	mov	r12, r1
    18cc:	d1 2c       	mov	r13, r1
    18ce:	e1 2c       	mov	r14, r1
    18d0:	f1 2c       	mov	r15, r1
    18d2:	00 e0       	ldi	r16, 0x00	; 0
    18d4:	10 e0       	ldi	r17, 0x00	; 0
    18d6:	29 a9       	ldd	r18, Y+49	; 0x31
    18d8:	3a a9       	ldd	r19, Y+50	; 0x32
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 d7 20 	call	0x41ae	; 0x41ae <__muldi3>
    18ea:	21 96       	adiw	r28, 0x01	; 1
    18ec:	cc ac       	ldd	r12, Y+60	; 0x3c
    18ee:	dd ac       	ldd	r13, Y+61	; 0x3d
    18f0:	ee ac       	ldd	r14, Y+62	; 0x3e
    18f2:	ff ac       	ldd	r15, Y+63	; 0x3f
    18f4:	21 97       	sbiw	r28, 0x01	; 1
    18f6:	56 01       	movw	r10, r12
    18f8:	67 01       	movw	r12, r14
    18fa:	e1 2c       	mov	r14, r1
    18fc:	f1 2c       	mov	r15, r1
    18fe:	87 01       	movw	r16, r14
    1900:	ae a2       	std	Y+38, r10	; 0x26
    1902:	bf a2       	std	Y+39, r11	; 0x27
    1904:	c8 a6       	std	Y+40, r12	; 0x28
    1906:	d9 a6       	std	Y+41, r13	; 0x29
    1908:	ea a6       	std	Y+42, r14	; 0x2a
    190a:	fb a6       	std	Y+43, r15	; 0x2b
    190c:	0c a7       	std	Y+44, r16	; 0x2c
    190e:	1d a7       	std	Y+45, r17	; 0x2d
    1910:	e1 2c       	mov	r14, r1
    1912:	f1 2c       	mov	r15, r1
    1914:	00 e0       	ldi	r16, 0x00	; 0
    1916:	10 e0       	ldi	r17, 0x00	; 0
    1918:	0e 94 d7 20 	call	0x41ae	; 0x41ae <__muldi3>
    191c:	a7 2c       	mov	r10, r7
    191e:	b6 2c       	mov	r11, r6
    1920:	ce a4       	ldd	r12, Y+46	; 0x2e
    1922:	df a4       	ldd	r13, Y+47	; 0x2f
    1924:	e8 a8       	ldd	r14, Y+48	; 0x30
    1926:	fb ac       	ldd	r15, Y+59	; 0x3b
    1928:	02 2d       	mov	r16, r2
    192a:	13 2d       	mov	r17, r3
    192c:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
    1930:	d4 01       	movw	r26, r8
    1932:	5a 96       	adiw	r26, 0x1a	; 26
    1934:	2c 93       	st	X, r18
    1936:	5a 97       	sbiw	r26, 0x1a	; 26
    1938:	5b 96       	adiw	r26, 0x1b	; 27
    193a:	3c 93       	st	X, r19
    193c:	5b 97       	sbiw	r26, 0x1b	; 27
    193e:	5c 96       	adiw	r26, 0x1c	; 28
    1940:	4c 93       	st	X, r20
    1942:	5c 97       	sbiw	r26, 0x1c	; 28
    1944:	5d 96       	adiw	r26, 0x1d	; 29
    1946:	5c 93       	st	X, r21
    1948:	5d 97       	sbiw	r26, 0x1d	; 29
    194a:	5e 96       	adiw	r26, 0x1e	; 30
    194c:	6c 93       	st	X, r22
    194e:	5e 97       	sbiw	r26, 0x1e	; 30
    1950:	5f 96       	adiw	r26, 0x1f	; 31
    1952:	7c 93       	st	X, r23
    1954:	5f 97       	sbiw	r26, 0x1f	; 31
    1956:	90 96       	adiw	r26, 0x20	; 32
    1958:	8c 93       	st	X, r24
    195a:	90 97       	sbiw	r26, 0x20	; 32
    195c:	91 96       	adiw	r26, 0x21	; 33
    195e:	9c 93       	st	X, r25
    1960:	91 97       	sbiw	r26, 0x21	; 33
    1962:	67 96       	adiw	r28, 0x17	; 23
    1964:	ac ac       	ldd	r10, Y+60	; 0x3c
    1966:	bd ac       	ldd	r11, Y+61	; 0x3d
    1968:	ce ac       	ldd	r12, Y+62	; 0x3e
    196a:	df ac       	ldd	r13, Y+63	; 0x3f
    196c:	67 97       	sbiw	r28, 0x17	; 23
    196e:	9a 96       	adiw	r26, 0x2a	; 42
    1970:	ad 92       	st	X+, r10
    1972:	bd 92       	st	X+, r11
    1974:	cd 92       	st	X+, r12
    1976:	dc 92       	st	X, r13
    1978:	9d 97       	sbiw	r26, 0x2d	; 45
    197a:	43 c0       	rjmp	.+134    	; 0x1a02 <fat_open+0x5a2>
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	42 c0       	rjmp	.+132    	; 0x1a06 <fat_open+0x5a6>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	3f c0       	rjmp	.+126    	; 0x1a06 <fat_open+0x5a6>
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	3c c0       	rjmp	.+120    	; 0x1a06 <fat_open+0x5a6>
    198e:	2c 01       	movw	r4, r24
    1990:	e5 ed       	ldi	r30, 0xD5	; 213
    1992:	f1 e0       	ldi	r31, 0x01	; 1
    1994:	82 e3       	ldi	r24, 0x32	; 50
    1996:	df 01       	movw	r26, r30
    1998:	1d 92       	st	X+, r1
    199a:	8a 95       	dec	r24
    199c:	e9 f7       	brne	.-6      	; 0x1998 <fat_open+0x538>
    199e:	51 82       	std	Z+1, r5	; 0x01
    19a0:	40 82       	st	Z, r4
    19a2:	f2 01       	movw	r30, r4
    19a4:	81 84       	ldd	r8, Z+9	; 0x09
    19a6:	92 84       	ldd	r9, Z+10	; 0x0a
    19a8:	a3 84       	ldd	r10, Z+11	; 0x0b
    19aa:	b4 84       	ldd	r11, Z+12	; 0x0c
    19ac:	28 2d       	mov	r18, r8
    19ae:	39 2d       	mov	r19, r9
    19b0:	4a 2d       	mov	r20, r10
    19b2:	5b 2d       	mov	r21, r11
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	09 e0       	ldi	r16, 0x09	; 9
    19be:	0e 94 30 21 	call	0x4260	; 0x4260 <__ashldi3>
    19c2:	62 2e       	mov	r6, r18
    19c4:	73 2e       	mov	r7, r19
    19c6:	4e a3       	std	Y+38, r20	; 0x26
    19c8:	5e a7       	std	Y+46, r21	; 0x2e
    19ca:	6f a7       	std	Y+47, r22	; 0x2f
    19cc:	78 ab       	std	Y+48, r23	; 0x30
    19ce:	28 2e       	mov	r2, r24
    19d0:	39 2e       	mov	r3, r25
    19d2:	ab e0       	ldi	r26, 0x0B	; 11
    19d4:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__adddi3_s8>
    19d8:	01 90       	ld	r0, Z+
    19da:	f0 81       	ld	r31, Z
    19dc:	e0 2d       	mov	r30, r0
    19de:	0f 2e       	mov	r0, r31
    19e0:	f5 e2       	ldi	r31, 0x25	; 37
    19e2:	ef 2e       	mov	r14, r31
    19e4:	f1 2c       	mov	r15, r1
    19e6:	f0 2d       	mov	r31, r0
    19e8:	8e 01       	movw	r16, r28
    19ea:	0f 5f       	subi	r16, 0xFF	; 255
    19ec:	1f 4f       	sbci	r17, 0xFF	; 255
    19ee:	09 95       	icall
    19f0:	81 11       	cpse	r24, r1
    19f2:	6d cd       	rjmp	.-1318   	; 0x14ce <fat_open+0x6e>
    19f4:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <fat_fs_handles+0x1>
    19f8:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <fat_fs_handles>
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <fat_open+0x5a6>
    1a02:	85 ed       	ldi	r24, 0xD5	; 213
    1a04:	91 e0       	ldi	r25, 0x01	; 1
    1a06:	ca 5a       	subi	r28, 0xAA	; 170
    1a08:	df 4f       	sbci	r29, 0xFF	; 255
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	df 90       	pop	r13
    1a22:	cf 90       	pop	r12
    1a24:	bf 90       	pop	r11
    1a26:	af 90       	pop	r10
    1a28:	9f 90       	pop	r9
    1a2a:	8f 90       	pop	r8
    1a2c:	7f 90       	pop	r7
    1a2e:	6f 90       	pop	r6
    1a30:	5f 90       	pop	r5
    1a32:	4f 90       	pop	r4
    1a34:	3f 90       	pop	r3
    1a36:	2f 90       	pop	r2
    1a38:	08 95       	ret

00001a3a <fat_close>:
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	19 f0       	breq	.+6      	; 0x1a44 <fat_close+0xa>
    1a3e:	fc 01       	movw	r30, r24
    1a40:	11 82       	std	Z+1, r1	; 0x01
    1a42:	10 82       	st	Z, r1
    1a44:	08 95       	ret

00001a46 <fat_open_file>:
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	81 f0       	breq	.+32     	; 0x1a6a <fat_open_file+0x24>
    1a4a:	61 15       	cp	r22, r1
    1a4c:	71 05       	cpc	r23, r1
    1a4e:	81 f0       	breq	.+32     	; 0x1a70 <fat_open_file+0x2a>
    1a50:	fb 01       	movw	r30, r22
    1a52:	20 a1       	ldd	r18, Z+32	; 0x20
    1a54:	24 fd       	sbrc	r18, 4
    1a56:	0f c0       	rjmp	.+30     	; 0x1a76 <fat_open_file+0x30>
    1a58:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <fat_file_handles>
    1a5c:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <fat_file_handles+0x1>
    1a60:	23 2b       	or	r18, r19
    1a62:	61 f0       	breq	.+24     	; 0x1a7c <fat_open_file+0x36>
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	08 95       	ret
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	08 95       	ret
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	08 95       	ret
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	08 95       	ret
    1a7c:	21 e3       	ldi	r18, 0x31	; 49
    1a7e:	fb 01       	movw	r30, r22
    1a80:	a8 e9       	ldi	r26, 0x98	; 152
    1a82:	b1 e0       	ldi	r27, 0x01	; 1
    1a84:	01 90       	ld	r0, Z+
    1a86:	0d 92       	st	X+, r0
    1a88:	2a 95       	dec	r18
    1a8a:	e1 f7       	brne	.-8      	; 0x1a84 <fat_open_file+0x3e>
    1a8c:	a6 e9       	ldi	r26, 0x96	; 150
    1a8e:	b1 e0       	ldi	r27, 0x01	; 1
    1a90:	11 96       	adiw	r26, 0x01	; 1
    1a92:	9c 93       	st	X, r25
    1a94:	8e 93       	st	-X, r24
    1a96:	d3 96       	adiw	r26, 0x33	; 51
    1a98:	1c 92       	st	X, r1
    1a9a:	d3 97       	sbiw	r26, 0x33	; 51
    1a9c:	d4 96       	adiw	r26, 0x34	; 52
    1a9e:	1c 92       	st	X, r1
    1aa0:	d4 97       	sbiw	r26, 0x34	; 52
    1aa2:	d5 96       	adiw	r26, 0x35	; 53
    1aa4:	1c 92       	st	X, r1
    1aa6:	d5 97       	sbiw	r26, 0x35	; 53
    1aa8:	d6 96       	adiw	r26, 0x36	; 54
    1aaa:	1c 92       	st	X, r1
    1aac:	d6 97       	sbiw	r26, 0x36	; 54
    1aae:	d7 96       	adiw	r26, 0x37	; 55
    1ab0:	1c 92       	st	X, r1
    1ab2:	d7 97       	sbiw	r26, 0x37	; 55
    1ab4:	d8 96       	adiw	r26, 0x38	; 56
    1ab6:	1c 92       	st	X, r1
    1ab8:	d8 97       	sbiw	r26, 0x38	; 56
    1aba:	d9 96       	adiw	r26, 0x39	; 57
    1abc:	1c 92       	st	X, r1
    1abe:	d9 97       	sbiw	r26, 0x39	; 57
    1ac0:	da 96       	adiw	r26, 0x3a	; 58
    1ac2:	1c 92       	st	X, r1
    1ac4:	da 97       	sbiw	r26, 0x3a	; 58
    1ac6:	fb 01       	movw	r30, r22
    1ac8:	41 a1       	ldd	r20, Z+33	; 0x21
    1aca:	52 a1       	ldd	r21, Z+34	; 0x22
    1acc:	63 a1       	ldd	r22, Z+35	; 0x23
    1ace:	74 a1       	ldd	r23, Z+36	; 0x24
    1ad0:	db 96       	adiw	r26, 0x3b	; 59
    1ad2:	4d 93       	st	X+, r20
    1ad4:	5d 93       	st	X+, r21
    1ad6:	6d 93       	st	X+, r22
    1ad8:	7c 93       	st	X, r23
    1ada:	de 97       	sbiw	r26, 0x3e	; 62
    1adc:	cd 01       	movw	r24, r26
    1ade:	08 95       	ret

00001ae0 <fat_close_file>:
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	19 f0       	breq	.+6      	; 0x1aea <fat_close_file+0xa>
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	11 82       	std	Z+1, r1	; 0x01
    1ae8:	10 82       	st	Z, r1
    1aea:	08 95       	ret

00001aec <fat_write_file>:
    1aec:	2f 92       	push	r2
    1aee:	3f 92       	push	r3
    1af0:	4f 92       	push	r4
    1af2:	5f 92       	push	r5
    1af4:	6f 92       	push	r6
    1af6:	7f 92       	push	r7
    1af8:	8f 92       	push	r8
    1afa:	9f 92       	push	r9
    1afc:	af 92       	push	r10
    1afe:	bf 92       	push	r11
    1b00:	cf 92       	push	r12
    1b02:	df 92       	push	r13
    1b04:	ef 92       	push	r14
    1b06:	ff 92       	push	r15
    1b08:	0f 93       	push	r16
    1b0a:	1f 93       	push	r17
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	6b 97       	sbiw	r28, 0x1b	; 27
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	cd bf       	out	0x3d, r28	; 61
    1b20:	99 8f       	std	Y+25, r25	; 0x19
    1b22:	88 8f       	std	Y+24, r24	; 0x18
    1b24:	7a 8b       	std	Y+18, r23	; 0x12
    1b26:	69 8b       	std	Y+17, r22	; 0x11
    1b28:	5f 8b       	std	Y+23, r21	; 0x17
    1b2a:	4e 8b       	std	Y+22, r20	; 0x16
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <fat_write_file+0x46>
    1b30:	03 c2       	rjmp	.+1030   	; 0x1f38 <fat_write_file+0x44c>
    1b32:	67 2b       	or	r22, r23
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <fat_write_file+0x4c>
    1b36:	03 c2       	rjmp	.+1030   	; 0x1f3e <fat_write_file+0x452>
    1b38:	45 2b       	or	r20, r21
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <fat_write_file+0x52>
    1b3c:	03 c2       	rjmp	.+1030   	; 0x1f44 <fat_write_file+0x458>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	d3 96       	adiw	r26, 0x33	; 51
    1b42:	bc 91       	ld	r27, X
    1b44:	b9 87       	std	Y+9, r27	; 0x09
    1b46:	fc 01       	movw	r30, r24
    1b48:	f4 a9       	ldd	r31, Z+52	; 0x34
    1b4a:	fa 87       	std	Y+10, r31	; 0x0a
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	d5 96       	adiw	r26, 0x35	; 53
    1b50:	bc 91       	ld	r27, X
    1b52:	bb 87       	std	Y+11, r27	; 0x0b
    1b54:	fc 01       	movw	r30, r24
    1b56:	f6 a9       	ldd	r31, Z+54	; 0x36
    1b58:	fc 87       	std	Y+12, r31	; 0x0c
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	d7 96       	adiw	r26, 0x37	; 55
    1b5e:	bc 91       	ld	r27, X
    1b60:	bd 87       	std	Y+13, r27	; 0x0d
    1b62:	fc 01       	movw	r30, r24
    1b64:	f0 ad       	ldd	r31, Z+56	; 0x38
    1b66:	fe 87       	std	Y+14, r31	; 0x0e
    1b68:	dc 01       	movw	r26, r24
    1b6a:	d9 96       	adiw	r26, 0x39	; 57
    1b6c:	bc 91       	ld	r27, X
    1b6e:	bf 87       	std	Y+15, r27	; 0x0f
    1b70:	fc 01       	movw	r30, r24
    1b72:	f2 ad       	ldd	r31, Z+58	; 0x3a
    1b74:	f8 8b       	std	Y+16, r31	; 0x10
    1b76:	fc 01       	movw	r30, r24
    1b78:	87 a1       	ldd	r24, Z+39	; 0x27
    1b7a:	90 a5       	ldd	r25, Z+40	; 0x28
    1b7c:	a1 a5       	ldd	r26, Z+41	; 0x29
    1b7e:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1b80:	1c 01       	movw	r2, r24
    1b82:	2d 01       	movw	r4, r26
    1b84:	29 85       	ldd	r18, Y+9	; 0x09
    1b86:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b88:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b8a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b8c:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b8e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b92:	98 89       	ldd	r25, Y+16	; 0x10
    1b94:	a2 2c       	mov	r10, r2
    1b96:	b3 2c       	mov	r11, r3
    1b98:	c4 2c       	mov	r12, r4
    1b9a:	d5 2c       	mov	r13, r5
    1b9c:	e1 2c       	mov	r14, r1
    1b9e:	f1 2c       	mov	r15, r1
    1ba0:	00 e0       	ldi	r16, 0x00	; 0
    1ba2:	10 e0       	ldi	r17, 0x00	; 0
    1ba4:	0e 94 85 21 	call	0x430a	; 0x430a <__cmpdi2>
    1ba8:	11 f0       	breq	.+4      	; 0x1bae <fat_write_file+0xc2>
    1baa:	08 f0       	brcs	.+2      	; 0x1bae <fat_write_file+0xc2>
    1bac:	ce c1       	rjmp	.+924    	; 0x1f4a <fat_write_file+0x45e>
    1bae:	01 90       	ld	r0, Z+
    1bb0:	f0 81       	ld	r31, Z
    1bb2:	e0 2d       	mov	r30, r0
    1bb4:	e0 8c       	ldd	r14, Z+24	; 0x18
    1bb6:	f1 8c       	ldd	r15, Z+25	; 0x19
    1bb8:	fc 8a       	std	Y+20, r15	; 0x14
    1bba:	eb 8a       	std	Y+19, r14	; 0x13
    1bbc:	a8 8d       	ldd	r26, Y+24	; 0x18
    1bbe:	b9 8d       	ldd	r27, Y+25	; 0x19
    1bc0:	db 96       	adiw	r26, 0x3b	; 59
    1bc2:	4d 90       	ld	r4, X+
    1bc4:	5d 90       	ld	r5, X+
    1bc6:	6d 90       	ld	r6, X+
    1bc8:	7c 90       	ld	r7, X
    1bca:	de 97       	sbiw	r26, 0x3e	; 62
    1bcc:	c7 01       	movw	r24, r14
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	e9 84       	ldd	r14, Y+9	; 0x09
    1bd2:	fa 84       	ldd	r15, Y+10	; 0x0a
    1bd4:	e8 22       	and	r14, r24
    1bd6:	f9 22       	and	r15, r25
    1bd8:	fa 82       	std	Y+2, r15	; 0x02
    1bda:	e9 82       	std	Y+1, r14	; 0x01
    1bdc:	41 14       	cp	r4, r1
    1bde:	51 04       	cpc	r5, r1
    1be0:	61 04       	cpc	r6, r1
    1be2:	71 04       	cpc	r7, r1
    1be4:	09 f0       	breq	.+2      	; 0x1be8 <fat_write_file+0xfc>
    1be6:	77 c0       	rjmp	.+238    	; 0x1cd6 <fat_write_file+0x1ea>
    1be8:	93 96       	adiw	r26, 0x23	; 35
    1bea:	4d 90       	ld	r4, X+
    1bec:	5d 90       	ld	r5, X+
    1bee:	6d 90       	ld	r6, X+
    1bf0:	7c 90       	ld	r7, X
    1bf2:	96 97       	sbiw	r26, 0x26	; 38
    1bf4:	41 14       	cp	r4, r1
    1bf6:	51 04       	cpc	r5, r1
    1bf8:	61 04       	cpc	r6, r1
    1bfa:	71 04       	cpc	r7, r1
    1bfc:	01 f5       	brne	.+64     	; 0x1c3e <fat_write_file+0x152>
    1bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c00:	98 89       	ldd	r25, Y+16	; 0x10
    1c02:	a0 e0       	ldi	r26, 0x00	; 0
    1c04:	0e 94 8e 21 	call	0x431c	; 0x431c <__cmpdi2_s8>
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <fat_write_file+0x120>
    1c0a:	a2 c1       	rjmp	.+836    	; 0x1f50 <fat_write_file+0x464>
    1c0c:	01 e0       	ldi	r16, 0x01	; 1
    1c0e:	10 e0       	ldi	r17, 0x00	; 0
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e0       	ldi	r20, 0x00	; 0
    1c16:	50 e0       	ldi	r21, 0x00	; 0
    1c18:	ba 01       	movw	r22, r20
    1c1a:	cf 01       	movw	r24, r30
    1c1c:	0e 94 ae 03 	call	0x75c	; 0x75c <fat_append_clusters>
    1c20:	2b 01       	movw	r4, r22
    1c22:	3c 01       	movw	r6, r24
    1c24:	a8 8d       	ldd	r26, Y+24	; 0x18
    1c26:	b9 8d       	ldd	r27, Y+25	; 0x19
    1c28:	93 96       	adiw	r26, 0x23	; 35
    1c2a:	6d 93       	st	X+, r22
    1c2c:	7d 93       	st	X+, r23
    1c2e:	8d 93       	st	X+, r24
    1c30:	9c 93       	st	X, r25
    1c32:	96 97       	sbiw	r26, 0x26	; 38
    1c34:	67 2b       	or	r22, r23
    1c36:	68 2b       	or	r22, r24
    1c38:	69 2b       	or	r22, r25
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <fat_write_file+0x152>
    1c3c:	8c c1       	rjmp	.+792    	; 0x1f56 <fat_write_file+0x46a>
    1c3e:	e8 8d       	ldd	r30, Y+24	; 0x18
    1c40:	f9 8d       	ldd	r31, Y+25	; 0x19
    1c42:	13 a9       	ldd	r17, Z+51	; 0x33
    1c44:	b4 a9       	ldd	r27, Z+52	; 0x34
    1c46:	05 a9       	ldd	r16, Z+53	; 0x35
    1c48:	f6 a8       	ldd	r15, Z+54	; 0x36
    1c4a:	67 a9       	ldd	r22, Z+55	; 0x37
    1c4c:	70 ad       	ldd	r23, Z+56	; 0x38
    1c4e:	21 2f       	mov	r18, r17
    1c50:	3b 2f       	mov	r19, r27
    1c52:	40 2f       	mov	r20, r16
    1c54:	5f 2d       	mov	r21, r15
    1c56:	81 ad       	ldd	r24, Z+57	; 0x39
    1c58:	92 ad       	ldd	r25, Z+58	; 0x3a
    1c5a:	a0 e0       	ldi	r26, 0x00	; 0
    1c5c:	0e 94 8e 21 	call	0x431c	; 0x431c <__cmpdi2_s8>
    1c60:	d1 f1       	breq	.+116    	; 0x1cd6 <fat_write_file+0x1ea>
    1c62:	c1 2e       	mov	r12, r17
    1c64:	db 2e       	mov	r13, r27
    1c66:	e0 2e       	mov	r14, r16
    1c68:	0b 89       	ldd	r16, Y+19	; 0x13
    1c6a:	1c 89       	ldd	r17, Y+20	; 0x14
    1c6c:	48 01       	movw	r8, r16
    1c6e:	a1 2c       	mov	r10, r1
    1c70:	b1 2c       	mov	r11, r1
    1c72:	1f 01       	movw	r2, r30
    1c74:	29 c0       	rjmp	.+82     	; 0x1cc8 <fat_write_file+0x1dc>
    1c76:	c8 18       	sub	r12, r8
    1c78:	d9 08       	sbc	r13, r9
    1c7a:	ea 08       	sbc	r14, r10
    1c7c:	fb 08       	sbc	r15, r11
    1c7e:	b3 01       	movw	r22, r6
    1c80:	a2 01       	movw	r20, r4
    1c82:	d1 01       	movw	r26, r2
    1c84:	8d 91       	ld	r24, X+
    1c86:	9c 91       	ld	r25, X
    1c88:	0e 94 31 01 	call	0x262	; 0x262 <fat_get_next_cluster>
    1c8c:	61 15       	cp	r22, r1
    1c8e:	71 05       	cpc	r23, r1
    1c90:	81 05       	cpc	r24, r1
    1c92:	91 05       	cpc	r25, r1
    1c94:	b9 f4       	brne	.+46     	; 0x1cc4 <fat_write_file+0x1d8>
    1c96:	c1 14       	cp	r12, r1
    1c98:	d1 04       	cpc	r13, r1
    1c9a:	e1 04       	cpc	r14, r1
    1c9c:	f1 04       	cpc	r15, r1
    1c9e:	09 f0       	breq	.+2      	; 0x1ca2 <fat_write_file+0x1b6>
    1ca0:	5d c1       	rjmp	.+698    	; 0x1f5c <fat_write_file+0x470>
    1ca2:	01 e0       	ldi	r16, 0x01	; 1
    1ca4:	10 e0       	ldi	r17, 0x00	; 0
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	b3 01       	movw	r22, r6
    1cac:	a2 01       	movw	r20, r4
    1cae:	f1 01       	movw	r30, r2
    1cb0:	80 81       	ld	r24, Z
    1cb2:	91 81       	ldd	r25, Z+1	; 0x01
    1cb4:	0e 94 ae 03 	call	0x75c	; 0x75c <fat_append_clusters>
    1cb8:	61 15       	cp	r22, r1
    1cba:	71 05       	cpc	r23, r1
    1cbc:	81 05       	cpc	r24, r1
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <fat_write_file+0x1d8>
    1cc2:	4f c1       	rjmp	.+670    	; 0x1f62 <fat_write_file+0x476>
    1cc4:	2b 01       	movw	r4, r22
    1cc6:	3c 01       	movw	r6, r24
    1cc8:	c8 14       	cp	r12, r8
    1cca:	d9 04       	cpc	r13, r9
    1ccc:	ea 04       	cpc	r14, r10
    1cce:	fb 04       	cpc	r15, r11
    1cd0:	90 f6       	brcc	.-92     	; 0x1c76 <fat_write_file+0x18a>
    1cd2:	39 8e       	std	Y+25, r3	; 0x19
    1cd4:	28 8e       	std	Y+24, r2	; 0x18
    1cd6:	2e 88       	ldd	r2, Y+22	; 0x16
    1cd8:	3f 88       	ldd	r3, Y+23	; 0x17
    1cda:	e8 8c       	ldd	r14, Y+24	; 0x18
    1cdc:	f9 8c       	ldd	r15, Y+25	; 0x19
    1cde:	fb 8e       	std	Y+27, r15	; 0x1b
    1ce0:	ea 8e       	std	Y+26, r14	; 0x1a
    1ce2:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1ce4:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1ce6:	0d 91       	ld	r16, X+
    1ce8:	1c 91       	ld	r17, X
    1cea:	b3 01       	movw	r22, r6
    1cec:	a2 01       	movw	r20, r4
    1cee:	c8 01       	movw	r24, r16
    1cf0:	0e 94 29 06 	call	0xc52	; 0xc52 <fat_cluster_offset>
    1cf4:	a2 2e       	mov	r10, r18
    1cf6:	b3 2e       	mov	r11, r19
    1cf8:	c4 2e       	mov	r12, r20
    1cfa:	d5 2e       	mov	r13, r21
    1cfc:	e6 2e       	mov	r14, r22
    1cfe:	f7 2e       	mov	r15, r23
    1d00:	89 87       	std	Y+9, r24	; 0x09
    1d02:	9d 8b       	std	Y+21, r25	; 0x15
    1d04:	8b 88       	ldd	r8, Y+19	; 0x13
    1d06:	9c 88       	ldd	r9, Y+20	; 0x14
    1d08:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0c:	8e 1a       	sub	r8, r30
    1d0e:	9f 0a       	sbc	r9, r31
    1d10:	28 14       	cp	r2, r8
    1d12:	39 04       	cpc	r3, r9
    1d14:	08 f4       	brcc	.+2      	; 0x1d18 <fat_write_file+0x22c>
    1d16:	41 01       	movw	r8, r2
    1d18:	d8 01       	movw	r26, r16
    1d1a:	0d 90       	ld	r0, X+
    1d1c:	bc 91       	ld	r27, X
    1d1e:	a0 2d       	mov	r26, r0
    1d20:	b9 8f       	std	Y+25, r27	; 0x19
    1d22:	a8 8f       	std	Y+24, r26	; 0x18
    1d24:	e9 81       	ldd	r30, Y+1	; 0x01
    1d26:	fa 81       	ldd	r31, Y+2	; 0x02
    1d28:	af 01       	movw	r20, r30
    1d2a:	2e 2f       	mov	r18, r30
    1d2c:	35 2f       	mov	r19, r21
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	09 85       	ldd	r16, Y+9	; 0x09
    1d3c:	1d 89       	ldd	r17, Y+21	; 0x15
    1d3e:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
    1d42:	a8 8d       	ldd	r26, Y+24	; 0x18
    1d44:	b9 8d       	ldd	r27, Y+25	; 0x19
    1d46:	14 96       	adiw	r26, 0x04	; 4
    1d48:	ed 91       	ld	r30, X+
    1d4a:	fc 91       	ld	r31, X
    1d4c:	15 97       	sbiw	r26, 0x05	; 5
    1d4e:	74 01       	movw	r14, r8
    1d50:	09 89       	ldd	r16, Y+17	; 0x11
    1d52:	1a 89       	ldd	r17, Y+18	; 0x12
    1d54:	09 95       	icall
    1d56:	88 23       	and	r24, r24
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <fat_write_file+0x270>
    1d5a:	8a c0       	rjmp	.+276    	; 0x1e70 <fat_write_file+0x384>
    1d5c:	e9 89       	ldd	r30, Y+17	; 0x11
    1d5e:	fa 89       	ldd	r31, Y+18	; 0x12
    1d60:	e8 0d       	add	r30, r8
    1d62:	f9 1d       	adc	r31, r9
    1d64:	fa 8b       	std	Y+18, r31	; 0x12
    1d66:	e9 8b       	std	Y+17, r30	; 0x11
    1d68:	28 18       	sub	r2, r8
    1d6a:	39 08       	sbc	r3, r9
    1d6c:	a4 01       	movw	r20, r8
    1d6e:	28 2d       	mov	r18, r8
    1d70:	35 2f       	mov	r19, r21
    1d72:	40 e0       	ldi	r20, 0x00	; 0
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1d80:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1d82:	d3 96       	adiw	r26, 0x33	; 51
    1d84:	ac 90       	ld	r10, X
    1d86:	d3 97       	sbiw	r26, 0x33	; 51
    1d88:	d4 96       	adiw	r26, 0x34	; 52
    1d8a:	bc 90       	ld	r11, X
    1d8c:	d4 97       	sbiw	r26, 0x34	; 52
    1d8e:	d5 96       	adiw	r26, 0x35	; 53
    1d90:	cc 90       	ld	r12, X
    1d92:	d5 97       	sbiw	r26, 0x35	; 53
    1d94:	d6 96       	adiw	r26, 0x36	; 54
    1d96:	dc 90       	ld	r13, X
    1d98:	d6 97       	sbiw	r26, 0x36	; 54
    1d9a:	d7 96       	adiw	r26, 0x37	; 55
    1d9c:	ec 90       	ld	r14, X
    1d9e:	d7 97       	sbiw	r26, 0x37	; 55
    1da0:	d8 96       	adiw	r26, 0x38	; 56
    1da2:	fc 90       	ld	r15, X
    1da4:	d8 97       	sbiw	r26, 0x38	; 56
    1da6:	d9 96       	adiw	r26, 0x39	; 57
    1da8:	0c 91       	ld	r16, X
    1daa:	d9 97       	sbiw	r26, 0x39	; 57
    1dac:	da 96       	adiw	r26, 0x3a	; 58
    1dae:	1c 91       	ld	r17, X
    1db0:	da 97       	sbiw	r26, 0x3a	; 58
    1db2:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
    1db6:	d3 96       	adiw	r26, 0x33	; 51
    1db8:	2c 93       	st	X, r18
    1dba:	d3 97       	sbiw	r26, 0x33	; 51
    1dbc:	d4 96       	adiw	r26, 0x34	; 52
    1dbe:	3c 93       	st	X, r19
    1dc0:	d4 97       	sbiw	r26, 0x34	; 52
    1dc2:	d5 96       	adiw	r26, 0x35	; 53
    1dc4:	4c 93       	st	X, r20
    1dc6:	d5 97       	sbiw	r26, 0x35	; 53
    1dc8:	d6 96       	adiw	r26, 0x36	; 54
    1dca:	5c 93       	st	X, r21
    1dcc:	d6 97       	sbiw	r26, 0x36	; 54
    1dce:	d7 96       	adiw	r26, 0x37	; 55
    1dd0:	6c 93       	st	X, r22
    1dd2:	d7 97       	sbiw	r26, 0x37	; 55
    1dd4:	d8 96       	adiw	r26, 0x38	; 56
    1dd6:	7c 93       	st	X, r23
    1dd8:	d8 97       	sbiw	r26, 0x38	; 56
    1dda:	d9 96       	adiw	r26, 0x39	; 57
    1ddc:	8c 93       	st	X, r24
    1dde:	d9 97       	sbiw	r26, 0x39	; 57
    1de0:	da 96       	adiw	r26, 0x3a	; 58
    1de2:	9c 93       	st	X, r25
    1de4:	da 97       	sbiw	r26, 0x3a	; 58
    1de6:	e9 81       	ldd	r30, Y+1	; 0x01
    1de8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dea:	8e 0e       	add	r8, r30
    1dec:	9f 1e       	adc	r9, r31
    1dee:	eb 88       	ldd	r14, Y+19	; 0x13
    1df0:	fc 88       	ldd	r15, Y+20	; 0x14
    1df2:	8e 14       	cp	r8, r14
    1df4:	9f 04       	cpc	r9, r15
    1df6:	78 f1       	brcs	.+94     	; 0x1e56 <fat_write_file+0x36a>
    1df8:	b3 01       	movw	r22, r6
    1dfa:	a2 01       	movw	r20, r4
    1dfc:	8d 91       	ld	r24, X+
    1dfe:	9c 91       	ld	r25, X
    1e00:	0e 94 31 01 	call	0x262	; 0x262 <fat_get_next_cluster>
    1e04:	61 15       	cp	r22, r1
    1e06:	71 05       	cpc	r23, r1
    1e08:	81 05       	cpc	r24, r1
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	01 f5       	brne	.+64     	; 0x1e4e <fat_write_file+0x362>
    1e0e:	21 14       	cp	r2, r1
    1e10:	31 04       	cpc	r3, r1
    1e12:	a1 f0       	breq	.+40     	; 0x1e3c <fat_write_file+0x350>
    1e14:	01 e0       	ldi	r16, 0x01	; 1
    1e16:	10 e0       	ldi	r17, 0x00	; 0
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	b3 01       	movw	r22, r6
    1e1e:	a2 01       	movw	r20, r4
    1e20:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1e22:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1e24:	8d 91       	ld	r24, X+
    1e26:	9c 91       	ld	r25, X
    1e28:	0e 94 ae 03 	call	0x75c	; 0x75c <fat_append_clusters>
    1e2c:	2b 01       	movw	r4, r22
    1e2e:	3c 01       	movw	r6, r24
    1e30:	61 15       	cp	r22, r1
    1e32:	71 05       	cpc	r23, r1
    1e34:	81 05       	cpc	r24, r1
    1e36:	91 05       	cpc	r25, r1
    1e38:	09 f0       	breq	.+2      	; 0x1e3c <fat_write_file+0x350>
    1e3a:	96 c0       	rjmp	.+300    	; 0x1f68 <fat_write_file+0x47c>
    1e3c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e3e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1e40:	f9 8f       	std	Y+25, r31	; 0x19
    1e42:	e8 8f       	std	Y+24, r30	; 0x18
    1e44:	13 ae       	std	Z+59, r1	; 0x3b
    1e46:	14 ae       	std	Z+60, r1	; 0x3c
    1e48:	15 ae       	std	Z+61, r1	; 0x3d
    1e4a:	16 ae       	std	Z+62, r1	; 0x3e
    1e4c:	15 c0       	rjmp	.+42     	; 0x1e78 <fat_write_file+0x38c>
    1e4e:	2b 01       	movw	r4, r22
    1e50:	3c 01       	movw	r6, r24
    1e52:	19 82       	std	Y+1, r1	; 0x01
    1e54:	1a 82       	std	Y+2, r1	; 0x02
    1e56:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e58:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1e5a:	43 ae       	std	Z+59, r4	; 0x3b
    1e5c:	54 ae       	std	Z+60, r5	; 0x3c
    1e5e:	65 ae       	std	Z+61, r6	; 0x3d
    1e60:	76 ae       	std	Z+62, r7	; 0x3e
    1e62:	21 14       	cp	r2, r1
    1e64:	31 04       	cpc	r3, r1
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <fat_write_file+0x37e>
    1e68:	3c cf       	rjmp	.-392    	; 0x1ce2 <fat_write_file+0x1f6>
    1e6a:	f9 8f       	std	Y+25, r31	; 0x19
    1e6c:	e8 8f       	std	Y+24, r30	; 0x18
    1e6e:	04 c0       	rjmp	.+8      	; 0x1e78 <fat_write_file+0x38c>
    1e70:	ea 8c       	ldd	r14, Y+26	; 0x1a
    1e72:	fb 8c       	ldd	r15, Y+27	; 0x1b
    1e74:	f9 8e       	std	Y+25, r15	; 0x19
    1e76:	e8 8e       	std	Y+24, r14	; 0x18
    1e78:	e8 8d       	ldd	r30, Y+24	; 0x18
    1e7a:	f9 8d       	ldd	r31, Y+25	; 0x19
    1e7c:	b3 a9       	ldd	r27, Z+51	; 0x33
    1e7e:	a4 a9       	ldd	r26, Z+52	; 0x34
    1e80:	85 a8       	ldd	r8, Z+53	; 0x35
    1e82:	96 a8       	ldd	r9, Z+54	; 0x36
    1e84:	67 a9       	ldd	r22, Z+55	; 0x37
    1e86:	70 ad       	ldd	r23, Z+56	; 0x38
    1e88:	47 a0       	ldd	r4, Z+39	; 0x27
    1e8a:	50 a4       	ldd	r5, Z+40	; 0x28
    1e8c:	61 a4       	ldd	r6, Z+41	; 0x29
    1e8e:	72 a4       	ldd	r7, Z+42	; 0x2a
    1e90:	83 01       	movw	r16, r6
    1e92:	72 01       	movw	r14, r4
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	a9 01       	movw	r20, r18
    1e9a:	49 82       	std	Y+1, r4	; 0x01
    1e9c:	fa 82       	std	Y+2, r15	; 0x02
    1e9e:	0b 83       	std	Y+3, r16	; 0x03
    1ea0:	1c 83       	std	Y+4, r17	; 0x04
    1ea2:	2d 83       	std	Y+5, r18	; 0x05
    1ea4:	3e 83       	std	Y+6, r19	; 0x06
    1ea6:	4f 83       	std	Y+7, r20	; 0x07
    1ea8:	58 87       	std	Y+8, r21	; 0x08
    1eaa:	2b 2f       	mov	r18, r27
    1eac:	3a 2f       	mov	r19, r26
    1eae:	48 2d       	mov	r20, r8
    1eb0:	59 2d       	mov	r21, r9
    1eb2:	81 ad       	ldd	r24, Z+57	; 0x39
    1eb4:	92 ad       	ldd	r25, Z+58	; 0x3a
    1eb6:	a4 2c       	mov	r10, r4
    1eb8:	bf 2c       	mov	r11, r15
    1eba:	c0 2e       	mov	r12, r16
    1ebc:	d1 2e       	mov	r13, r17
    1ebe:	e1 2c       	mov	r14, r1
    1ec0:	f1 2c       	mov	r15, r1
    1ec2:	00 e0       	ldi	r16, 0x00	; 0
    1ec4:	10 e0       	ldi	r17, 0x00	; 0
    1ec6:	0e 94 85 21 	call	0x430a	; 0x430a <__cmpdi2>
    1eca:	89 f1       	breq	.+98     	; 0x1f2e <fat_write_file+0x442>
    1ecc:	80 f1       	brcs	.+96     	; 0x1f2e <fat_write_file+0x442>
    1ece:	b7 a3       	std	Z+39, r27	; 0x27
    1ed0:	a0 a7       	std	Z+40, r26	; 0x28
    1ed2:	81 a6       	std	Z+41, r8	; 0x29
    1ed4:	92 a6       	std	Z+42, r9	; 0x2a
    1ed6:	bf 01       	movw	r22, r30
    1ed8:	6e 5f       	subi	r22, 0xFE	; 254
    1eda:	7f 4f       	sbci	r23, 0xFF	; 255
    1edc:	80 81       	ld	r24, Z
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	0e 94 81 08 	call	0x1102	; 0x1102 <fat_write_dir_entry>
    1ee4:	81 11       	cpse	r24, r1
    1ee6:	23 c0       	rjmp	.+70     	; 0x1f2e <fat_write_file+0x442>
    1ee8:	a8 8d       	ldd	r26, Y+24	; 0x18
    1eea:	b9 8d       	ldd	r27, Y+25	; 0x19
    1eec:	d3 96       	adiw	r26, 0x33	; 51
    1eee:	2d 90       	ld	r2, X+
    1ef0:	3c 90       	ld	r3, X
    1ef2:	d4 97       	sbiw	r26, 0x34	; 52
    1ef4:	24 18       	sub	r2, r4
    1ef6:	35 08       	sbc	r3, r5
    1ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    1efa:	d3 96       	adiw	r26, 0x33	; 51
    1efc:	ec 93       	st	X, r30
    1efe:	d3 97       	sbiw	r26, 0x33	; 51
    1f00:	fa 81       	ldd	r31, Y+2	; 0x02
    1f02:	d4 96       	adiw	r26, 0x34	; 52
    1f04:	fc 93       	st	X, r31
    1f06:	d4 97       	sbiw	r26, 0x34	; 52
    1f08:	eb 80       	ldd	r14, Y+3	; 0x03
    1f0a:	d5 96       	adiw	r26, 0x35	; 53
    1f0c:	ec 92       	st	X, r14
    1f0e:	d5 97       	sbiw	r26, 0x35	; 53
    1f10:	fc 80       	ldd	r15, Y+4	; 0x04
    1f12:	d6 96       	adiw	r26, 0x36	; 54
    1f14:	fc 92       	st	X, r15
    1f16:	d6 97       	sbiw	r26, 0x36	; 54
    1f18:	d7 96       	adiw	r26, 0x37	; 55
    1f1a:	1c 92       	st	X, r1
    1f1c:	d7 97       	sbiw	r26, 0x37	; 55
    1f1e:	d8 96       	adiw	r26, 0x38	; 56
    1f20:	1c 92       	st	X, r1
    1f22:	d8 97       	sbiw	r26, 0x38	; 56
    1f24:	d9 96       	adiw	r26, 0x39	; 57
    1f26:	1c 92       	st	X, r1
    1f28:	d9 97       	sbiw	r26, 0x39	; 57
    1f2a:	da 96       	adiw	r26, 0x3a	; 58
    1f2c:	1c 92       	st	X, r1
    1f2e:	8e 89       	ldd	r24, Y+22	; 0x16
    1f30:	9f 89       	ldd	r25, Y+23	; 0x17
    1f32:	82 19       	sub	r24, r2
    1f34:	93 09       	sbc	r25, r3
    1f36:	23 c0       	rjmp	.+70     	; 0x1f7e <fat_write_file+0x492>
    1f38:	8f ef       	ldi	r24, 0xFF	; 255
    1f3a:	9f ef       	ldi	r25, 0xFF	; 255
    1f3c:	20 c0       	rjmp	.+64     	; 0x1f7e <fat_write_file+0x492>
    1f3e:	8f ef       	ldi	r24, 0xFF	; 255
    1f40:	9f ef       	ldi	r25, 0xFF	; 255
    1f42:	1d c0       	rjmp	.+58     	; 0x1f7e <fat_write_file+0x492>
    1f44:	8f ef       	ldi	r24, 0xFF	; 255
    1f46:	9f ef       	ldi	r25, 0xFF	; 255
    1f48:	1a c0       	rjmp	.+52     	; 0x1f7e <fat_write_file+0x492>
    1f4a:	8f ef       	ldi	r24, 0xFF	; 255
    1f4c:	9f ef       	ldi	r25, 0xFF	; 255
    1f4e:	17 c0       	rjmp	.+46     	; 0x1f7e <fat_write_file+0x492>
    1f50:	8f ef       	ldi	r24, 0xFF	; 255
    1f52:	9f ef       	ldi	r25, 0xFF	; 255
    1f54:	14 c0       	rjmp	.+40     	; 0x1f7e <fat_write_file+0x492>
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	11 c0       	rjmp	.+34     	; 0x1f7e <fat_write_file+0x492>
    1f5c:	8f ef       	ldi	r24, 0xFF	; 255
    1f5e:	9f ef       	ldi	r25, 0xFF	; 255
    1f60:	0e c0       	rjmp	.+28     	; 0x1f7e <fat_write_file+0x492>
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	0b c0       	rjmp	.+22     	; 0x1f7e <fat_write_file+0x492>
    1f68:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1f6a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1f6c:	db 96       	adiw	r26, 0x3b	; 59
    1f6e:	6d 93       	st	X+, r22
    1f70:	7d 93       	st	X+, r23
    1f72:	8d 93       	st	X+, r24
    1f74:	9c 93       	st	X, r25
    1f76:	de 97       	sbiw	r26, 0x3e	; 62
    1f78:	19 82       	std	Y+1, r1	; 0x01
    1f7a:	1a 82       	std	Y+2, r1	; 0x02
    1f7c:	b2 ce       	rjmp	.-668    	; 0x1ce2 <fat_write_file+0x1f6>
    1f7e:	6b 96       	adiw	r28, 0x1b	; 27
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	1f 91       	pop	r17
    1f90:	0f 91       	pop	r16
    1f92:	ff 90       	pop	r15
    1f94:	ef 90       	pop	r14
    1f96:	df 90       	pop	r13
    1f98:	cf 90       	pop	r12
    1f9a:	bf 90       	pop	r11
    1f9c:	af 90       	pop	r10
    1f9e:	9f 90       	pop	r9
    1fa0:	8f 90       	pop	r8
    1fa2:	7f 90       	pop	r7
    1fa4:	6f 90       	pop	r6
    1fa6:	5f 90       	pop	r5
    1fa8:	4f 90       	pop	r4
    1faa:	3f 90       	pop	r3
    1fac:	2f 90       	pop	r2
    1fae:	08 95       	ret

00001fb0 <fat_resize_file>:
    1fb0:	2f 92       	push	r2
    1fb2:	3f 92       	push	r3
    1fb4:	4f 92       	push	r4
    1fb6:	5f 92       	push	r5
    1fb8:	6f 92       	push	r6
    1fba:	7f 92       	push	r7
    1fbc:	8f 92       	push	r8
    1fbe:	9f 92       	push	r9
    1fc0:	af 92       	push	r10
    1fc2:	bf 92       	push	r11
    1fc4:	cf 92       	push	r12
    1fc6:	df 92       	push	r13
    1fc8:	ef 92       	push	r14
    1fca:	ff 92       	push	r15
    1fcc:	0f 93       	push	r16
    1fce:	1f 93       	push	r17
    1fd0:	cf 93       	push	r28
    1fd2:	df 93       	push	r29
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	64 97       	sbiw	r28, 0x14	; 20
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <fat_resize_file+0x3a>
    1fe8:	a4 c1       	rjmp	.+840    	; 0x2332 <fat_resize_file+0x382>
    1fea:	4d 83       	std	Y+5, r20	; 0x05
    1fec:	5e 83       	std	Y+6, r21	; 0x06
    1fee:	6f 83       	std	Y+7, r22	; 0x07
    1ff0:	78 87       	std	Y+8, r23	; 0x08
    1ff2:	1c 01       	movw	r2, r24
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	93 96       	adiw	r26, 0x23	; 35
    1ff8:	2d 91       	ld	r18, X+
    1ffa:	3d 91       	ld	r19, X+
    1ffc:	4d 91       	ld	r20, X+
    1ffe:	5c 91       	ld	r21, X
    2000:	96 97       	sbiw	r26, 0x26	; 38
    2002:	2d 87       	std	Y+13, r18	; 0x0d
    2004:	3e 87       	std	Y+14, r19	; 0x0e
    2006:	4f 87       	std	Y+15, r20	; 0x0f
    2008:	58 8b       	std	Y+16, r21	; 0x10
    200a:	ed 91       	ld	r30, X+
    200c:	fc 91       	ld	r31, X
    200e:	80 8d       	ldd	r24, Z+24	; 0x18
    2010:	91 8d       	ldd	r25, Z+25	; 0x19
    2012:	23 2b       	or	r18, r19
    2014:	24 2b       	or	r18, r20
    2016:	25 2b       	or	r18, r21
    2018:	09 f0       	breq	.+2      	; 0x201c <fat_resize_file+0x6c>
    201a:	cf c1       	rjmp	.+926    	; 0x23ba <fat_resize_file+0x40a>
    201c:	2d 81       	ldd	r18, Y+5	; 0x05
    201e:	3e 81       	ldd	r19, Y+6	; 0x06
    2020:	4f 81       	ldd	r20, Y+7	; 0x07
    2022:	58 85       	ldd	r21, Y+8	; 0x08
    2024:	23 2b       	or	r18, r19
    2026:	24 2b       	or	r18, r20
    2028:	25 2b       	or	r18, r21
    202a:	09 f4       	brne	.+2      	; 0x202e <fat_resize_file+0x7e>
    202c:	31 c1       	rjmp	.+610    	; 0x2290 <fat_resize_file+0x2e0>
    202e:	b5 c1       	rjmp	.+874    	; 0x239a <fat_resize_file+0x3ea>
    2030:	4d 80       	ldd	r4, Y+5	; 0x05
    2032:	5e 80       	ldd	r5, Y+6	; 0x06
    2034:	6f 80       	ldd	r6, Y+7	; 0x07
    2036:	78 84       	ldd	r7, Y+8	; 0x08
    2038:	cd 84       	ldd	r12, Y+13	; 0x0d
    203a:	de 84       	ldd	r13, Y+14	; 0x0e
    203c:	ef 84       	ldd	r14, Y+15	; 0x0f
    203e:	f8 88       	ldd	r15, Y+16	; 0x10
    2040:	b7 01       	movw	r22, r14
    2042:	a6 01       	movw	r20, r12
    2044:	d1 01       	movw	r26, r2
    2046:	8d 91       	ld	r24, X+
    2048:	9c 91       	ld	r25, X
    204a:	0e 94 31 01 	call	0x262	; 0x262 <fat_get_next_cluster>
    204e:	61 15       	cp	r22, r1
    2050:	71 05       	cpc	r23, r1
    2052:	81 05       	cpc	r24, r1
    2054:	91 05       	cpc	r25, r1
    2056:	61 f0       	breq	.+24     	; 0x2070 <fat_resize_file+0xc0>
    2058:	48 18       	sub	r4, r8
    205a:	59 08       	sbc	r5, r9
    205c:	6a 08       	sbc	r6, r10
    205e:	7b 08       	sbc	r7, r11
    2060:	6b 01       	movw	r12, r22
    2062:	7c 01       	movw	r14, r24
    2064:	84 14       	cp	r8, r4
    2066:	95 04       	cpc	r9, r5
    2068:	a6 04       	cpc	r10, r6
    206a:	b7 04       	cpc	r11, r7
    206c:	48 f3       	brcs	.-46     	; 0x2040 <fat_resize_file+0x90>
    206e:	49 c0       	rjmp	.+146    	; 0x2102 <fat_resize_file+0x152>
    2070:	cd 86       	std	Y+13, r12	; 0x0d
    2072:	de 86       	std	Y+14, r13	; 0x0e
    2074:	ef 86       	std	Y+15, r14	; 0x0f
    2076:	f8 8a       	std	Y+16, r15	; 0x10
    2078:	c9 8a       	std	Y+17, r12	; 0x11
    207a:	da 8a       	std	Y+18, r13	; 0x12
    207c:	eb 8a       	std	Y+19, r14	; 0x13
    207e:	fc 8a       	std	Y+20, r15	; 0x14
    2080:	84 14       	cp	r8, r4
    2082:	95 04       	cpc	r9, r5
    2084:	a6 04       	cpc	r10, r6
    2086:	b7 04       	cpc	r11, r7
    2088:	38 f0       	brcs	.+14     	; 0x2098 <fat_resize_file+0xe8>
    208a:	c1 14       	cp	r12, r1
    208c:	d1 04       	cpc	r13, r1
    208e:	e1 04       	cpc	r14, r1
    2090:	f1 04       	cpc	r15, r1
    2092:	09 f4       	brne	.+2      	; 0x2096 <fat_resize_file+0xe6>
    2094:	56 c1       	rjmp	.+684    	; 0x2342 <fat_resize_file+0x392>
    2096:	35 c0       	rjmp	.+106    	; 0x2102 <fat_resize_file+0x152>
    2098:	d5 01       	movw	r26, r10
    209a:	c4 01       	movw	r24, r8
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	a1 09       	sbc	r26, r1
    20a0:	b1 09       	sbc	r27, r1
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	64 0d       	add	r22, r4
    20a8:	75 1d       	adc	r23, r5
    20aa:	86 1d       	adc	r24, r6
    20ac:	97 1d       	adc	r25, r7
    20ae:	a5 01       	movw	r20, r10
    20b0:	94 01       	movw	r18, r8
    20b2:	0e 94 95 20 	call	0x412a	; 0x412a <__udivmodsi4>
    20b6:	89 01       	movw	r16, r18
    20b8:	9a 01       	movw	r18, r20
    20ba:	4d 85       	ldd	r20, Y+13	; 0x0d
    20bc:	5e 85       	ldd	r21, Y+14	; 0x0e
    20be:	6f 85       	ldd	r22, Y+15	; 0x0f
    20c0:	78 89       	ldd	r23, Y+16	; 0x10
    20c2:	f1 01       	movw	r30, r2
    20c4:	80 81       	ld	r24, Z
    20c6:	91 81       	ldd	r25, Z+1	; 0x01
    20c8:	0e 94 ae 03 	call	0x75c	; 0x75c <fat_append_clusters>
    20cc:	6b 01       	movw	r12, r22
    20ce:	7c 01       	movw	r14, r24
    20d0:	67 2b       	or	r22, r23
    20d2:	68 2b       	or	r22, r24
    20d4:	69 2b       	or	r22, r25
    20d6:	09 f4       	brne	.+2      	; 0x20da <fat_resize_file+0x12a>
    20d8:	2e c1       	rjmp	.+604    	; 0x2336 <fat_resize_file+0x386>
    20da:	29 89       	ldd	r18, Y+17	; 0x11
    20dc:	3a 89       	ldd	r19, Y+18	; 0x12
    20de:	4b 89       	ldd	r20, Y+19	; 0x13
    20e0:	5c 89       	ldd	r21, Y+20	; 0x14
    20e2:	23 2b       	or	r18, r19
    20e4:	24 2b       	or	r18, r20
    20e6:	25 2b       	or	r18, r21
    20e8:	41 f4       	brne	.+16     	; 0x20fa <fat_resize_file+0x14a>
    20ea:	d1 01       	movw	r26, r2
    20ec:	93 96       	adiw	r26, 0x23	; 35
    20ee:	cd 92       	st	X+, r12
    20f0:	dd 92       	st	X+, r13
    20f2:	ed 92       	st	X+, r14
    20f4:	fc 92       	st	X, r15
    20f6:	96 97       	sbiw	r26, 0x26	; 38
    20f8:	04 c0       	rjmp	.+8      	; 0x2102 <fat_resize_file+0x152>
    20fa:	cd 84       	ldd	r12, Y+13	; 0x0d
    20fc:	de 84       	ldd	r13, Y+14	; 0x0e
    20fe:	ef 84       	ldd	r14, Y+15	; 0x0f
    2100:	f8 88       	ldd	r15, Y+16	; 0x10
    2102:	2d 81       	ldd	r18, Y+5	; 0x05
    2104:	3e 81       	ldd	r19, Y+6	; 0x06
    2106:	4f 81       	ldd	r20, Y+7	; 0x07
    2108:	58 85       	ldd	r21, Y+8	; 0x08
    210a:	d1 01       	movw	r26, r2
    210c:	97 96       	adiw	r26, 0x27	; 39
    210e:	2d 93       	st	X+, r18
    2110:	3d 93       	st	X+, r19
    2112:	4d 93       	st	X+, r20
    2114:	5c 93       	st	X, r21
    2116:	9a 97       	sbiw	r26, 0x2a	; 42
    2118:	23 2b       	or	r18, r19
    211a:	24 2b       	or	r18, r20
    211c:	25 2b       	or	r18, r21
    211e:	09 f0       	breq	.+2      	; 0x2122 <fat_resize_file+0x172>
    2120:	31 c1       	rjmp	.+610    	; 0x2384 <fat_resize_file+0x3d4>
    2122:	f1 01       	movw	r30, r2
    2124:	13 a2       	std	Z+35, r1	; 0x23
    2126:	14 a2       	std	Z+36, r1	; 0x24
    2128:	15 a2       	std	Z+37, r1	; 0x25
    212a:	16 a2       	std	Z+38, r1	; 0x26
    212c:	b1 01       	movw	r22, r2
    212e:	6e 5f       	subi	r22, 0xFE	; 254
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	80 81       	ld	r24, Z
    2134:	91 81       	ldd	r25, Z+1	; 0x01
    2136:	0e 94 81 08 	call	0x1102	; 0x1102 <fat_write_dir_entry>
    213a:	88 23       	and	r24, r24
    213c:	09 f4       	brne	.+2      	; 0x2140 <fat_resize_file+0x190>
    213e:	51 c1       	rjmp	.+674    	; 0x23e2 <fat_resize_file+0x432>
    2140:	b7 01       	movw	r22, r14
    2142:	a6 01       	movw	r20, r12
    2144:	d1 01       	movw	r26, r2
    2146:	8d 91       	ld	r24, X+
    2148:	9c 91       	ld	r25, X
    214a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <fat_free_clusters>
    214e:	a0 c0       	rjmp	.+320    	; 0x2290 <fat_resize_file+0x2e0>
    2150:	84 14       	cp	r8, r4
    2152:	95 04       	cpc	r9, r5
    2154:	a6 04       	cpc	r10, r6
    2156:	b7 04       	cpc	r11, r7
    2158:	08 f4       	brcc	.+2      	; 0x215c <fat_resize_file+0x1ac>
    215a:	9a c0       	rjmp	.+308    	; 0x2290 <fat_resize_file+0x2e0>
    215c:	f1 01       	movw	r30, r2
    215e:	80 80       	ld	r8, Z
    2160:	91 80       	ldd	r9, Z+1	; 0x01
    2162:	81 14       	cp	r8, r1
    2164:	91 04       	cpc	r9, r1
    2166:	09 f4       	brne	.+2      	; 0x216a <fat_resize_file+0x1ba>
    2168:	93 c0       	rjmp	.+294    	; 0x2290 <fat_resize_file+0x2e0>
    216a:	f2 e0       	ldi	r31, 0x02	; 2
    216c:	cf 16       	cp	r12, r31
    216e:	d1 04       	cpc	r13, r1
    2170:	e1 04       	cpc	r14, r1
    2172:	f1 04       	cpc	r15, r1
    2174:	08 f4       	brcc	.+2      	; 0x2178 <fat_resize_file+0x1c8>
    2176:	8c c0       	rjmp	.+280    	; 0x2290 <fat_resize_file+0x2e0>
    2178:	b7 01       	movw	r22, r14
    217a:	a6 01       	movw	r20, r12
    217c:	c4 01       	movw	r24, r8
    217e:	0e 94 31 01 	call	0x262	; 0x262 <fat_get_next_cluster>
    2182:	2b 01       	movw	r4, r22
    2184:	3c 01       	movw	r6, r24
    2186:	d4 01       	movw	r26, r8
    2188:	ed 91       	ld	r30, X+
    218a:	fc 91       	ld	r31, X
    218c:	80 85       	ldd	r24, Z+8	; 0x08
    218e:	8b 30       	cpi	r24, 0x0B	; 11
    2190:	e9 f5       	brne	.+122    	; 0x220c <fat_resize_file+0x25c>
    2192:	8f ef       	ldi	r24, 0xFF	; 255
    2194:	9f ef       	ldi	r25, 0xFF	; 255
    2196:	af ef       	ldi	r26, 0xFF	; 255
    2198:	bf e0       	ldi	r27, 0x0F	; 15
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	9a 83       	std	Y+2, r25	; 0x02
    219e:	ab 83       	std	Y+3, r26	; 0x03
    21a0:	bc 83       	std	Y+4, r27	; 0x04
    21a2:	56 01       	movw	r10, r12
    21a4:	67 01       	movw	r12, r14
    21a6:	2a 2d       	mov	r18, r10
    21a8:	3b 2d       	mov	r19, r11
    21aa:	4c 2d       	mov	r20, r12
    21ac:	5d 2d       	mov	r21, r13
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	70 e0       	ldi	r23, 0x00	; 0
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	02 e0       	ldi	r16, 0x02	; 2
    21b8:	0e 94 30 21 	call	0x4260	; 0x4260 <__ashldi3>
    21bc:	d4 01       	movw	r26, r8
    21be:	1a 96       	adiw	r26, 0x0a	; 10
    21c0:	ac 90       	ld	r10, X
    21c2:	1a 97       	sbiw	r26, 0x0a	; 10
    21c4:	1b 96       	adiw	r26, 0x0b	; 11
    21c6:	bc 90       	ld	r11, X
    21c8:	1b 97       	sbiw	r26, 0x0b	; 11
    21ca:	1c 96       	adiw	r26, 0x0c	; 12
    21cc:	cc 90       	ld	r12, X
    21ce:	1c 97       	sbiw	r26, 0x0c	; 12
    21d0:	1d 96       	adiw	r26, 0x0d	; 13
    21d2:	dc 90       	ld	r13, X
    21d4:	1d 97       	sbiw	r26, 0x0d	; 13
    21d6:	1e 96       	adiw	r26, 0x0e	; 14
    21d8:	ec 90       	ld	r14, X
    21da:	1e 97       	sbiw	r26, 0x0e	; 14
    21dc:	1f 96       	adiw	r26, 0x0f	; 15
    21de:	fc 90       	ld	r15, X
    21e0:	1f 97       	sbiw	r26, 0x0f	; 15
    21e2:	50 96       	adiw	r26, 0x10	; 16
    21e4:	0c 91       	ld	r16, X
    21e6:	50 97       	sbiw	r26, 0x10	; 16
    21e8:	51 96       	adiw	r26, 0x11	; 17
    21ea:	1c 91       	ld	r17, X
    21ec:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
    21f0:	04 80       	ldd	r0, Z+4	; 0x04
    21f2:	f5 81       	ldd	r31, Z+5	; 0x05
    21f4:	e0 2d       	mov	r30, r0
    21f6:	68 94       	set
    21f8:	ee 24       	eor	r14, r14
    21fa:	e2 f8       	bld	r14, 2
    21fc:	f1 2c       	mov	r15, r1
    21fe:	8e 01       	movw	r16, r28
    2200:	0f 5f       	subi	r16, 0xFF	; 255
    2202:	1f 4f       	sbci	r17, 0xFF	; 255
    2204:	09 95       	icall
    2206:	81 11       	cpse	r24, r1
    2208:	39 c0       	rjmp	.+114    	; 0x227c <fat_resize_file+0x2cc>
    220a:	42 c0       	rjmp	.+132    	; 0x2290 <fat_resize_file+0x2e0>
    220c:	8f ef       	ldi	r24, 0xFF	; 255
    220e:	9f ef       	ldi	r25, 0xFF	; 255
    2210:	9a 83       	std	Y+2, r25	; 0x02
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	56 01       	movw	r10, r12
    2216:	67 01       	movw	r12, r14
    2218:	2a 2d       	mov	r18, r10
    221a:	3b 2d       	mov	r19, r11
    221c:	4c 2d       	mov	r20, r12
    221e:	5d 2d       	mov	r21, r13
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	01 e0       	ldi	r16, 0x01	; 1
    222a:	0e 94 30 21 	call	0x4260	; 0x4260 <__ashldi3>
    222e:	d4 01       	movw	r26, r8
    2230:	1a 96       	adiw	r26, 0x0a	; 10
    2232:	ac 90       	ld	r10, X
    2234:	1a 97       	sbiw	r26, 0x0a	; 10
    2236:	1b 96       	adiw	r26, 0x0b	; 11
    2238:	bc 90       	ld	r11, X
    223a:	1b 97       	sbiw	r26, 0x0b	; 11
    223c:	1c 96       	adiw	r26, 0x0c	; 12
    223e:	cc 90       	ld	r12, X
    2240:	1c 97       	sbiw	r26, 0x0c	; 12
    2242:	1d 96       	adiw	r26, 0x0d	; 13
    2244:	dc 90       	ld	r13, X
    2246:	1d 97       	sbiw	r26, 0x0d	; 13
    2248:	1e 96       	adiw	r26, 0x0e	; 14
    224a:	ec 90       	ld	r14, X
    224c:	1e 97       	sbiw	r26, 0x0e	; 14
    224e:	1f 96       	adiw	r26, 0x0f	; 15
    2250:	fc 90       	ld	r15, X
    2252:	1f 97       	sbiw	r26, 0x0f	; 15
    2254:	50 96       	adiw	r26, 0x10	; 16
    2256:	0c 91       	ld	r16, X
    2258:	50 97       	sbiw	r26, 0x10	; 16
    225a:	51 96       	adiw	r26, 0x11	; 17
    225c:	1c 91       	ld	r17, X
    225e:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
    2262:	04 80       	ldd	r0, Z+4	; 0x04
    2264:	f5 81       	ldd	r31, Z+5	; 0x05
    2266:	e0 2d       	mov	r30, r0
    2268:	68 94       	set
    226a:	ee 24       	eor	r14, r14
    226c:	e1 f8       	bld	r14, 1
    226e:	f1 2c       	mov	r15, r1
    2270:	8e 01       	movw	r16, r28
    2272:	0f 5f       	subi	r16, 0xFF	; 255
    2274:	1f 4f       	sbci	r17, 0xFF	; 255
    2276:	09 95       	icall
    2278:	88 23       	and	r24, r24
    227a:	51 f0       	breq	.+20     	; 0x2290 <fat_resize_file+0x2e0>
    227c:	41 14       	cp	r4, r1
    227e:	51 04       	cpc	r5, r1
    2280:	61 04       	cpc	r6, r1
    2282:	71 04       	cpc	r7, r1
    2284:	29 f0       	breq	.+10     	; 0x2290 <fat_resize_file+0x2e0>
    2286:	b3 01       	movw	r22, r6
    2288:	a2 01       	movw	r20, r4
    228a:	c4 01       	movw	r24, r8
    228c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <fat_free_clusters>
    2290:	4d 81       	ldd	r20, Y+5	; 0x05
    2292:	5e 81       	ldd	r21, Y+6	; 0x06
    2294:	6f 81       	ldd	r22, Y+7	; 0x07
    2296:	78 85       	ldd	r23, Y+8	; 0x08
    2298:	9a 01       	movw	r18, r20
    229a:	ab 01       	movw	r20, r22
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	70 e0       	ldi	r23, 0x00	; 0
    22a0:	cb 01       	movw	r24, r22
    22a2:	2d 83       	std	Y+5, r18	; 0x05
    22a4:	3e 83       	std	Y+6, r19	; 0x06
    22a6:	4f 83       	std	Y+7, r20	; 0x07
    22a8:	58 87       	std	Y+8, r21	; 0x08
    22aa:	69 87       	std	Y+9, r22	; 0x09
    22ac:	7a 87       	std	Y+10, r23	; 0x0a
    22ae:	8b 87       	std	Y+11, r24	; 0x0b
    22b0:	9c 87       	std	Y+12, r25	; 0x0c
    22b2:	d1 01       	movw	r26, r2
    22b4:	d3 96       	adiw	r26, 0x33	; 51
    22b6:	ac 90       	ld	r10, X
    22b8:	d3 97       	sbiw	r26, 0x33	; 51
    22ba:	d4 96       	adiw	r26, 0x34	; 52
    22bc:	bc 90       	ld	r11, X
    22be:	d4 97       	sbiw	r26, 0x34	; 52
    22c0:	d5 96       	adiw	r26, 0x35	; 53
    22c2:	cc 90       	ld	r12, X
    22c4:	d5 97       	sbiw	r26, 0x35	; 53
    22c6:	d6 96       	adiw	r26, 0x36	; 54
    22c8:	dc 90       	ld	r13, X
    22ca:	d6 97       	sbiw	r26, 0x36	; 54
    22cc:	d7 96       	adiw	r26, 0x37	; 55
    22ce:	ec 90       	ld	r14, X
    22d0:	d7 97       	sbiw	r26, 0x37	; 55
    22d2:	d8 96       	adiw	r26, 0x38	; 56
    22d4:	fc 90       	ld	r15, X
    22d6:	d8 97       	sbiw	r26, 0x38	; 56
    22d8:	d9 96       	adiw	r26, 0x39	; 57
    22da:	0c 91       	ld	r16, X
    22dc:	d9 97       	sbiw	r26, 0x39	; 57
    22de:	da 96       	adiw	r26, 0x3a	; 58
    22e0:	1c 91       	ld	r17, X
    22e2:	da 97       	sbiw	r26, 0x3a	; 58
    22e4:	60 e0       	ldi	r22, 0x00	; 0
    22e6:	70 e0       	ldi	r23, 0x00	; 0
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	0e 94 85 21 	call	0x430a	; 0x430a <__cmpdi2>
    22f0:	20 f5       	brcc	.+72     	; 0x233a <fat_resize_file+0x38a>
    22f2:	d3 96       	adiw	r26, 0x33	; 51
    22f4:	2c 93       	st	X, r18
    22f6:	d3 97       	sbiw	r26, 0x33	; 51
    22f8:	d4 96       	adiw	r26, 0x34	; 52
    22fa:	3c 93       	st	X, r19
    22fc:	d4 97       	sbiw	r26, 0x34	; 52
    22fe:	d5 96       	adiw	r26, 0x35	; 53
    2300:	4c 93       	st	X, r20
    2302:	d5 97       	sbiw	r26, 0x35	; 53
    2304:	d6 96       	adiw	r26, 0x36	; 54
    2306:	5c 93       	st	X, r21
    2308:	d6 97       	sbiw	r26, 0x36	; 54
    230a:	d7 96       	adiw	r26, 0x37	; 55
    230c:	1c 92       	st	X, r1
    230e:	d7 97       	sbiw	r26, 0x37	; 55
    2310:	d8 96       	adiw	r26, 0x38	; 56
    2312:	1c 92       	st	X, r1
    2314:	d8 97       	sbiw	r26, 0x38	; 56
    2316:	d9 96       	adiw	r26, 0x39	; 57
    2318:	1c 92       	st	X, r1
    231a:	d9 97       	sbiw	r26, 0x39	; 57
    231c:	da 96       	adiw	r26, 0x3a	; 58
    231e:	1c 92       	st	X, r1
    2320:	da 97       	sbiw	r26, 0x3a	; 58
    2322:	db 96       	adiw	r26, 0x3b	; 59
    2324:	1d 92       	st	X+, r1
    2326:	1d 92       	st	X+, r1
    2328:	1d 92       	st	X+, r1
    232a:	1c 92       	st	X, r1
    232c:	de 97       	sbiw	r26, 0x3e	; 62
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	58 c0       	rjmp	.+176    	; 0x23e2 <fat_resize_file+0x432>
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	56 c0       	rjmp	.+172    	; 0x23e2 <fat_resize_file+0x432>
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	54 c0       	rjmp	.+168    	; 0x23e2 <fat_resize_file+0x432>
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	52 c0       	rjmp	.+164    	; 0x23e2 <fat_resize_file+0x432>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	50 c0       	rjmp	.+160    	; 0x23e2 <fat_resize_file+0x432>
    2342:	d5 01       	movw	r26, r10
    2344:	c4 01       	movw	r24, r8
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	a1 09       	sbc	r26, r1
    234a:	b1 09       	sbc	r27, r1
    234c:	bc 01       	movw	r22, r24
    234e:	cd 01       	movw	r24, r26
    2350:	64 0d       	add	r22, r4
    2352:	75 1d       	adc	r23, r5
    2354:	86 1d       	adc	r24, r6
    2356:	97 1d       	adc	r25, r7
    2358:	a5 01       	movw	r20, r10
    235a:	94 01       	movw	r18, r8
    235c:	0e 94 95 20 	call	0x412a	; 0x412a <__udivmodsi4>
    2360:	89 01       	movw	r16, r18
    2362:	9a 01       	movw	r18, r20
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	50 e0       	ldi	r21, 0x00	; 0
    2368:	ba 01       	movw	r22, r20
    236a:	f1 01       	movw	r30, r2
    236c:	80 81       	ld	r24, Z
    236e:	91 81       	ldd	r25, Z+1	; 0x01
    2370:	0e 94 ae 03 	call	0x75c	; 0x75c <fat_append_clusters>
    2374:	6b 01       	movw	r12, r22
    2376:	7c 01       	movw	r14, r24
    2378:	67 2b       	or	r22, r23
    237a:	68 2b       	or	r22, r24
    237c:	69 2b       	or	r22, r25
    237e:	09 f0       	breq	.+2      	; 0x2382 <fat_resize_file+0x3d2>
    2380:	b4 ce       	rjmp	.-664    	; 0x20ea <fat_resize_file+0x13a>
    2382:	dd cf       	rjmp	.-70     	; 0x233e <fat_resize_file+0x38e>
    2384:	b1 01       	movw	r22, r2
    2386:	6e 5f       	subi	r22, 0xFE	; 254
    2388:	7f 4f       	sbci	r23, 0xFF	; 255
    238a:	d1 01       	movw	r26, r2
    238c:	8d 91       	ld	r24, X+
    238e:	9c 91       	ld	r25, X
    2390:	0e 94 81 08 	call	0x1102	; 0x1102 <fat_write_dir_entry>
    2394:	81 11       	cpse	r24, r1
    2396:	dc ce       	rjmp	.-584    	; 0x2150 <fat_resize_file+0x1a0>
    2398:	24 c0       	rjmp	.+72     	; 0x23e2 <fat_resize_file+0x432>
    239a:	4c 01       	movw	r8, r24
    239c:	a1 2c       	mov	r10, r1
    239e:	b1 2c       	mov	r11, r1
    23a0:	2d 81       	ldd	r18, Y+5	; 0x05
    23a2:	3e 81       	ldd	r19, Y+6	; 0x06
    23a4:	4f 81       	ldd	r20, Y+7	; 0x07
    23a6:	58 85       	ldd	r21, Y+8	; 0x08
    23a8:	82 16       	cp	r8, r18
    23aa:	93 06       	cpc	r9, r19
    23ac:	a4 06       	cpc	r10, r20
    23ae:	b5 06       	cpc	r11, r21
    23b0:	08 f4       	brcc	.+2      	; 0x23b4 <fat_resize_file+0x404>
    23b2:	3e ce       	rjmp	.-900    	; 0x2030 <fat_resize_file+0x80>
    23b4:	29 01       	movw	r4, r18
    23b6:	3a 01       	movw	r6, r20
    23b8:	c4 cf       	rjmp	.-120    	; 0x2342 <fat_resize_file+0x392>
    23ba:	4c 01       	movw	r8, r24
    23bc:	a1 2c       	mov	r10, r1
    23be:	b1 2c       	mov	r11, r1
    23c0:	4d 81       	ldd	r20, Y+5	; 0x05
    23c2:	5e 81       	ldd	r21, Y+6	; 0x06
    23c4:	6f 81       	ldd	r22, Y+7	; 0x07
    23c6:	78 85       	ldd	r23, Y+8	; 0x08
    23c8:	84 16       	cp	r8, r20
    23ca:	95 06       	cpc	r9, r21
    23cc:	a6 06       	cpc	r10, r22
    23ce:	b7 06       	cpc	r11, r23
    23d0:	08 f4       	brcc	.+2      	; 0x23d4 <fat_resize_file+0x424>
    23d2:	2e ce       	rjmp	.-932    	; 0x2030 <fat_resize_file+0x80>
    23d4:	2a 01       	movw	r4, r20
    23d6:	3b 01       	movw	r6, r22
    23d8:	cd 84       	ldd	r12, Y+13	; 0x0d
    23da:	de 84       	ldd	r13, Y+14	; 0x0e
    23dc:	ef 84       	ldd	r14, Y+15	; 0x0f
    23de:	f8 88       	ldd	r15, Y+16	; 0x10
    23e0:	90 ce       	rjmp	.-736    	; 0x2102 <fat_resize_file+0x152>
    23e2:	64 96       	adiw	r28, 0x14	; 20
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	1f 91       	pop	r17
    23f4:	0f 91       	pop	r16
    23f6:	ff 90       	pop	r15
    23f8:	ef 90       	pop	r14
    23fa:	df 90       	pop	r13
    23fc:	cf 90       	pop	r12
    23fe:	bf 90       	pop	r11
    2400:	af 90       	pop	r10
    2402:	9f 90       	pop	r9
    2404:	8f 90       	pop	r8
    2406:	7f 90       	pop	r7
    2408:	6f 90       	pop	r6
    240a:	5f 90       	pop	r5
    240c:	4f 90       	pop	r4
    240e:	3f 90       	pop	r3
    2410:	2f 90       	pop	r2
    2412:	08 95       	ret

00002414 <fat_seek_file>:
    2414:	af 92       	push	r10
    2416:	bf 92       	push	r11
    2418:	cf 92       	push	r12
    241a:	df 92       	push	r13
    241c:	ef 92       	push	r14
    241e:	ff 92       	push	r15
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	ec 01       	movw	r28, r24
    242a:	89 2b       	or	r24, r25
    242c:	09 f4       	brne	.+2      	; 0x2430 <fat_seek_file+0x1c>
    242e:	55 c0       	rjmp	.+170    	; 0x24da <fat_seek_file+0xc6>
    2430:	61 15       	cp	r22, r1
    2432:	71 05       	cpc	r23, r1
    2434:	09 f4       	brne	.+2      	; 0x2438 <fat_seek_file+0x24>
    2436:	53 c0       	rjmp	.+166    	; 0x24de <fat_seek_file+0xca>
    2438:	eb a9       	ldd	r30, Y+51	; 0x33
    243a:	5c a9       	ldd	r21, Y+52	; 0x34
    243c:	3d a9       	ldd	r19, Y+53	; 0x35
    243e:	2e a9       	ldd	r18, Y+54	; 0x36
    2440:	41 30       	cpi	r20, 0x01	; 1
    2442:	51 f0       	breq	.+20     	; 0x2458 <fat_seek_file+0x44>
    2444:	18 f0       	brcs	.+6      	; 0x244c <fat_seek_file+0x38>
    2446:	42 30       	cpi	r20, 0x02	; 2
    2448:	a9 f0       	breq	.+42     	; 0x2474 <fat_seek_file+0x60>
    244a:	4b c0       	rjmp	.+150    	; 0x24e2 <fat_seek_file+0xce>
    244c:	fb 01       	movw	r30, r22
    244e:	c0 80       	ld	r12, Z
    2450:	d1 80       	ldd	r13, Z+1	; 0x01
    2452:	e2 80       	ldd	r14, Z+2	; 0x02
    2454:	f3 80       	ldd	r15, Z+3	; 0x03
    2456:	1b c0       	rjmp	.+54     	; 0x248e <fat_seek_file+0x7a>
    2458:	8e 2f       	mov	r24, r30
    245a:	95 2f       	mov	r25, r21
    245c:	a3 2f       	mov	r26, r19
    245e:	b2 2f       	mov	r27, r18
    2460:	fb 01       	movw	r30, r22
    2462:	c0 80       	ld	r12, Z
    2464:	d1 80       	ldd	r13, Z+1	; 0x01
    2466:	e2 80       	ldd	r14, Z+2	; 0x02
    2468:	f3 80       	ldd	r15, Z+3	; 0x03
    246a:	c8 0e       	add	r12, r24
    246c:	d9 1e       	adc	r13, r25
    246e:	ea 1e       	adc	r14, r26
    2470:	fb 1e       	adc	r15, r27
    2472:	0d c0       	rjmp	.+26     	; 0x248e <fat_seek_file+0x7a>
    2474:	fb 01       	movw	r30, r22
    2476:	c0 80       	ld	r12, Z
    2478:	d1 80       	ldd	r13, Z+1	; 0x01
    247a:	e2 80       	ldd	r14, Z+2	; 0x02
    247c:	f3 80       	ldd	r15, Z+3	; 0x03
    247e:	8f a1       	ldd	r24, Y+39	; 0x27
    2480:	98 a5       	ldd	r25, Y+40	; 0x28
    2482:	a9 a5       	ldd	r26, Y+41	; 0x29
    2484:	ba a5       	ldd	r27, Y+42	; 0x2a
    2486:	c8 0e       	add	r12, r24
    2488:	d9 1e       	adc	r13, r25
    248a:	ea 1e       	adc	r14, r26
    248c:	fb 1e       	adc	r15, r27
    248e:	5b 01       	movw	r10, r22
    2490:	8f a1       	ldd	r24, Y+39	; 0x27
    2492:	98 a5       	ldd	r25, Y+40	; 0x28
    2494:	a9 a5       	ldd	r26, Y+41	; 0x29
    2496:	ba a5       	ldd	r27, Y+42	; 0x2a
    2498:	8c 15       	cp	r24, r12
    249a:	9d 05       	cpc	r25, r13
    249c:	ae 05       	cpc	r26, r14
    249e:	bf 05       	cpc	r27, r15
    24a0:	38 f4       	brcc	.+14     	; 0x24b0 <fat_seek_file+0x9c>
    24a2:	b7 01       	movw	r22, r14
    24a4:	a6 01       	movw	r20, r12
    24a6:	ce 01       	movw	r24, r28
    24a8:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <fat_resize_file>
    24ac:	88 23       	and	r24, r24
    24ae:	d1 f0       	breq	.+52     	; 0x24e4 <fat_seek_file+0xd0>
    24b0:	97 01       	movw	r18, r14
    24b2:	86 01       	movw	r16, r12
    24b4:	cb aa       	std	Y+51, r12	; 0x33
    24b6:	1c ab       	std	Y+52, r17	; 0x34
    24b8:	2d ab       	std	Y+53, r18	; 0x35
    24ba:	3e ab       	std	Y+54, r19	; 0x36
    24bc:	1f aa       	std	Y+55, r1	; 0x37
    24be:	18 ae       	std	Y+56, r1	; 0x38
    24c0:	19 ae       	std	Y+57, r1	; 0x39
    24c2:	1a ae       	std	Y+58, r1	; 0x3a
    24c4:	1b ae       	std	Y+59, r1	; 0x3b
    24c6:	1c ae       	std	Y+60, r1	; 0x3c
    24c8:	1d ae       	std	Y+61, r1	; 0x3d
    24ca:	1e ae       	std	Y+62, r1	; 0x3e
    24cc:	f5 01       	movw	r30, r10
    24ce:	c0 82       	st	Z, r12
    24d0:	d1 82       	std	Z+1, r13	; 0x01
    24d2:	e2 82       	std	Z+2, r14	; 0x02
    24d4:	f3 82       	std	Z+3, r15	; 0x03
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	05 c0       	rjmp	.+10     	; 0x24e4 <fat_seek_file+0xd0>
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	03 c0       	rjmp	.+6      	; 0x24e4 <fat_seek_file+0xd0>
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	01 c0       	rjmp	.+2      	; 0x24e4 <fat_seek_file+0xd0>
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	df 91       	pop	r29
    24e6:	cf 91       	pop	r28
    24e8:	1f 91       	pop	r17
    24ea:	0f 91       	pop	r16
    24ec:	ff 90       	pop	r15
    24ee:	ef 90       	pop	r14
    24f0:	df 90       	pop	r13
    24f2:	cf 90       	pop	r12
    24f4:	bf 90       	pop	r11
    24f6:	af 90       	pop	r10
    24f8:	08 95       	ret

000024fa <fat_open_dir>:
    24fa:	cf 93       	push	r28
    24fc:	df 93       	push	r29
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	b1 f0       	breq	.+44     	; 0x252e <fat_open_dir+0x34>
    2502:	61 15       	cp	r22, r1
    2504:	71 05       	cpc	r23, r1
    2506:	b1 f0       	breq	.+44     	; 0x2534 <fat_open_dir+0x3a>
    2508:	fb 01       	movw	r30, r22
    250a:	20 a1       	ldd	r18, Z+32	; 0x20
    250c:	24 ff       	sbrs	r18, 4
    250e:	15 c0       	rjmp	.+42     	; 0x253a <fat_open_dir+0x40>
    2510:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <__data_end>
    2514:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <__data_end+0x1>
    2518:	23 2b       	or	r18, r19
    251a:	91 f0       	breq	.+36     	; 0x2540 <fat_open_dir+0x46>
    251c:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <__data_end+0x39>
    2520:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <__data_end+0x3a>
    2524:	23 2b       	or	r18, r19
    2526:	79 f0       	breq	.+30     	; 0x2546 <fat_open_dir+0x4c>
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	25 c0       	rjmp	.+74     	; 0x2578 <fat_open_dir+0x7e>
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	22 c0       	rjmp	.+68     	; 0x2578 <fat_open_dir+0x7e>
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	1f c0       	rjmp	.+62     	; 0x2578 <fat_open_dir+0x7e>
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	1c c0       	rjmp	.+56     	; 0x2578 <fat_open_dir+0x7e>
    2540:	c4 e2       	ldi	r28, 0x24	; 36
    2542:	d1 e0       	ldi	r29, 0x01	; 1
    2544:	02 c0       	rjmp	.+4      	; 0x254a <fat_open_dir+0x50>
    2546:	cd e5       	ldi	r28, 0x5D	; 93
    2548:	d1 e0       	ldi	r29, 0x01	; 1
    254a:	de 01       	movw	r26, r28
    254c:	12 96       	adiw	r26, 0x02	; 2
    254e:	21 e3       	ldi	r18, 0x31	; 49
    2550:	fb 01       	movw	r30, r22
    2552:	01 90       	ld	r0, Z+
    2554:	0d 92       	st	X+, r0
    2556:	2a 95       	dec	r18
    2558:	e1 f7       	brne	.-8      	; 0x2552 <fat_open_dir+0x58>
    255a:	99 83       	std	Y+1, r25	; 0x01
    255c:	88 83       	st	Y, r24
    255e:	fb 01       	movw	r30, r22
    2560:	81 a1       	ldd	r24, Z+33	; 0x21
    2562:	92 a1       	ldd	r25, Z+34	; 0x22
    2564:	a3 a1       	ldd	r26, Z+35	; 0x23
    2566:	b4 a1       	ldd	r27, Z+36	; 0x24
    2568:	8b ab       	std	Y+51, r24	; 0x33
    256a:	9c ab       	std	Y+52, r25	; 0x34
    256c:	ad ab       	std	Y+53, r26	; 0x35
    256e:	be ab       	std	Y+54, r27	; 0x36
    2570:	18 ae       	std	Y+56, r1	; 0x38
    2572:	1f aa       	std	Y+55, r1	; 0x37
    2574:	8c 2f       	mov	r24, r28
    2576:	9d 2f       	mov	r25, r29
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28
    257c:	08 95       	ret

0000257e <fat_close_dir>:
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	19 f0       	breq	.+6      	; 0x2588 <fat_close_dir+0xa>
    2582:	fc 01       	movw	r30, r24
    2584:	11 82       	std	Z+1, r1	; 0x01
    2586:	10 82       	st	Z, r1
    2588:	08 95       	ret

0000258a <fat_reset_dir>:
    258a:	fc 01       	movw	r30, r24
    258c:	89 2b       	or	r24, r25
    258e:	61 f0       	breq	.+24     	; 0x25a8 <fat_reset_dir+0x1e>
    2590:	83 a1       	ldd	r24, Z+35	; 0x23
    2592:	94 a1       	ldd	r25, Z+36	; 0x24
    2594:	a5 a1       	ldd	r26, Z+37	; 0x25
    2596:	b6 a1       	ldd	r27, Z+38	; 0x26
    2598:	83 ab       	std	Z+51, r24	; 0x33
    259a:	94 ab       	std	Z+52, r25	; 0x34
    259c:	a5 ab       	std	Z+53, r26	; 0x35
    259e:	b6 ab       	std	Z+54, r27	; 0x36
    25a0:	10 ae       	std	Z+56, r1	; 0x38
    25a2:	17 aa       	std	Z+55, r1	; 0x37
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	08 95       	ret
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	08 95       	ret

000025ac <fat_read_dir>:
    25ac:	2f 92       	push	r2
    25ae:	3f 92       	push	r3
    25b0:	4f 92       	push	r4
    25b2:	5f 92       	push	r5
    25b4:	6f 92       	push	r6
    25b6:	7f 92       	push	r7
    25b8:	8f 92       	push	r8
    25ba:	9f 92       	push	r9
    25bc:	af 92       	push	r10
    25be:	bf 92       	push	r11
    25c0:	cf 92       	push	r12
    25c2:	df 92       	push	r13
    25c4:	ef 92       	push	r14
    25c6:	ff 92       	push	r15
    25c8:	0f 93       	push	r16
    25ca:	1f 93       	push	r17
    25cc:	cf 93       	push	r28
    25ce:	df 93       	push	r29
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	e6 97       	sbiw	r28, 0x36	; 54
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	de bf       	out	0x3e, r29	; 62
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	cd bf       	out	0x3d, r28	; 61
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <fat_read_dir+0x3a>
    25e4:	f3 c0       	rjmp	.+486    	; 0x27cc <fat_read_dir+0x220>
    25e6:	61 15       	cp	r22, r1
    25e8:	71 05       	cpc	r23, r1
    25ea:	09 f4       	brne	.+2      	; 0x25ee <fat_read_dir+0x42>
    25ec:	f1 c0       	rjmp	.+482    	; 0x27d0 <fat_read_dir+0x224>
    25ee:	9e ab       	std	Y+54, r25	; 0x36
    25f0:	8d ab       	std	Y+53, r24	; 0x35
    25f2:	fc 01       	movw	r30, r24
    25f4:	20 80       	ld	r2, Z
    25f6:	31 80       	ldd	r3, Z+1	; 0x01
    25f8:	f1 01       	movw	r30, r2
    25fa:	60 8c       	ldd	r6, Z+24	; 0x18
    25fc:	71 8c       	ldd	r7, Z+25	; 0x19
    25fe:	fc 01       	movw	r30, r24
    2600:	23 a9       	ldd	r18, Z+51	; 0x33
    2602:	34 a9       	ldd	r19, Z+52	; 0x34
    2604:	45 a9       	ldd	r20, Z+53	; 0x35
    2606:	56 a9       	ldd	r21, Z+54	; 0x36
    2608:	29 ab       	std	Y+49, r18	; 0x31
    260a:	3a ab       	std	Y+50, r19	; 0x32
    260c:	4b ab       	std	Y+51, r20	; 0x33
    260e:	5c ab       	std	Y+52, r21	; 0x34
    2610:	47 a8       	ldd	r4, Z+55	; 0x37
    2612:	50 ac       	ldd	r5, Z+56	; 0x38
    2614:	46 14       	cp	r4, r6
    2616:	57 04       	cpc	r5, r7
    2618:	20 f0       	brcs	.+8      	; 0x2622 <fat_read_dir+0x76>
    261a:	0e 94 c5 12 	call	0x258a	; 0x258a <fat_reset_dir>
    261e:	10 e0       	ldi	r17, 0x00	; 0
    2620:	da c0       	rjmp	.+436    	; 0x27d6 <fat_read_dir+0x22a>
    2622:	9e 01       	movw	r18, r28
    2624:	2f 5f       	subi	r18, 0xFF	; 255
    2626:	3f 4f       	sbci	r19, 0xFF	; 255
    2628:	86 e0       	ldi	r24, 0x06	; 6
    262a:	f9 01       	movw	r30, r18
    262c:	11 92       	st	Z+, r1
    262e:	8a 95       	dec	r24
    2630:	e9 f7       	brne	.-6      	; 0x262c <fat_read_dir+0x80>
    2632:	81 e3       	ldi	r24, 0x31	; 49
    2634:	fb 01       	movw	r30, r22
    2636:	11 92       	st	Z+, r1
    2638:	8a 95       	dec	r24
    263a:	e9 f7       	brne	.-6      	; 0x2636 <fat_read_dir+0x8a>
    263c:	7a 83       	std	Y+2, r23	; 0x02
    263e:	69 83       	std	Y+1, r22	; 0x01
    2640:	29 a9       	ldd	r18, Y+49	; 0x31
    2642:	3a a9       	ldd	r19, Y+50	; 0x32
    2644:	4b a9       	ldd	r20, Y+51	; 0x33
    2646:	5c a9       	ldd	r21, Y+52	; 0x34
    2648:	23 2b       	or	r18, r19
    264a:	24 2b       	or	r18, r20
    264c:	25 2b       	or	r18, r21
    264e:	09 f0       	breq	.+2      	; 0x2652 <fat_read_dir+0xa6>
    2650:	a7 c0       	rjmp	.+334    	; 0x27a0 <fat_read_dir+0x1f4>
    2652:	d1 01       	movw	r26, r2
    2654:	ed 91       	ld	r30, X+
    2656:	fc 91       	ld	r31, X
    2658:	11 97       	sbiw	r26, 0x01	; 1
    265a:	80 85       	ldd	r24, Z+8	; 0x08
    265c:	8b 30       	cpi	r24, 0x0B	; 11
    265e:	59 f4       	brne	.+22     	; 0x2676 <fat_read_dir+0xca>
    2660:	9a 96       	adiw	r26, 0x2a	; 42
    2662:	2d 91       	ld	r18, X+
    2664:	3d 91       	ld	r19, X+
    2666:	4d 91       	ld	r20, X+
    2668:	5c 91       	ld	r21, X
    266a:	9d 97       	sbiw	r26, 0x2d	; 45
    266c:	29 ab       	std	Y+49, r18	; 0x31
    266e:	3a ab       	std	Y+50, r19	; 0x32
    2670:	4b ab       	std	Y+51, r20	; 0x33
    2672:	5c ab       	std	Y+52, r21	; 0x34
    2674:	95 c0       	rjmp	.+298    	; 0x27a0 <fat_read_dir+0x1f4>
    2676:	f1 01       	movw	r30, r2
    2678:	22 8d       	ldd	r18, Z+26	; 0x1a
    267a:	33 8d       	ldd	r19, Z+27	; 0x1b
    267c:	82 a1       	ldd	r24, Z+34	; 0x22
    267e:	93 a1       	ldd	r25, Z+35	; 0x23
    2680:	39 01       	movw	r6, r18
    2682:	68 1a       	sub	r6, r24
    2684:	79 0a       	sbc	r7, r25
    2686:	8c c0       	rjmp	.+280    	; 0x27a0 <fat_read_dir+0x1f4>
    2688:	93 01       	movw	r18, r6
    268a:	24 19       	sub	r18, r4
    268c:	35 09       	sbc	r19, r5
    268e:	38 ab       	std	Y+48, r19	; 0x30
    2690:	2f a7       	std	Y+47, r18	; 0x2f
    2692:	a2 01       	movw	r20, r4
    2694:	60 e0       	ldi	r22, 0x00	; 0
    2696:	70 e0       	ldi	r23, 0x00	; 0
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	dc 01       	movw	r26, r24
    269e:	4f a2       	std	Y+39, r4	; 0x27
    26a0:	58 a7       	std	Y+40, r21	; 0x28
    26a2:	69 a7       	std	Y+41, r22	; 0x29
    26a4:	7a a7       	std	Y+42, r23	; 0x2a
    26a6:	8b a7       	std	Y+43, r24	; 0x2b
    26a8:	9c a7       	std	Y+44, r25	; 0x2c
    26aa:	ad a7       	std	Y+45, r26	; 0x2d
    26ac:	be a7       	std	Y+46, r27	; 0x2e
    26ae:	69 a9       	ldd	r22, Y+49	; 0x31
    26b0:	7a a9       	ldd	r23, Y+50	; 0x32
    26b2:	8b a9       	ldd	r24, Y+51	; 0x33
    26b4:	9c a9       	ldd	r25, Y+52	; 0x34
    26b6:	67 2b       	or	r22, r23
    26b8:	68 2b       	or	r22, r24
    26ba:	69 2b       	or	r22, r25
    26bc:	19 f5       	brne	.+70     	; 0x2704 <fat_read_dir+0x158>
    26be:	24 2d       	mov	r18, r4
    26c0:	35 2f       	mov	r19, r21
    26c2:	40 e0       	ldi	r20, 0x00	; 0
    26c4:	50 e0       	ldi	r21, 0x00	; 0
    26c6:	60 e0       	ldi	r22, 0x00	; 0
    26c8:	70 e0       	ldi	r23, 0x00	; 0
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	d1 01       	movw	r26, r2
    26d0:	92 96       	adiw	r26, 0x22	; 34
    26d2:	ac 90       	ld	r10, X
    26d4:	92 97       	sbiw	r26, 0x22	; 34
    26d6:	93 96       	adiw	r26, 0x23	; 35
    26d8:	bc 90       	ld	r11, X
    26da:	93 97       	sbiw	r26, 0x23	; 35
    26dc:	94 96       	adiw	r26, 0x24	; 36
    26de:	cc 90       	ld	r12, X
    26e0:	94 97       	sbiw	r26, 0x24	; 36
    26e2:	95 96       	adiw	r26, 0x25	; 37
    26e4:	dc 90       	ld	r13, X
    26e6:	95 97       	sbiw	r26, 0x25	; 37
    26e8:	96 96       	adiw	r26, 0x26	; 38
    26ea:	ec 90       	ld	r14, X
    26ec:	96 97       	sbiw	r26, 0x26	; 38
    26ee:	97 96       	adiw	r26, 0x27	; 39
    26f0:	fc 90       	ld	r15, X
    26f2:	97 97       	sbiw	r26, 0x27	; 39
    26f4:	98 96       	adiw	r26, 0x28	; 40
    26f6:	0c 91       	ld	r16, X
    26f8:	98 97       	sbiw	r26, 0x28	; 40
    26fa:	99 96       	adiw	r26, 0x29	; 41
    26fc:	1c 91       	ld	r17, X
    26fe:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
    2702:	11 c0       	rjmp	.+34     	; 0x2726 <fat_read_dir+0x17a>
    2704:	49 a9       	ldd	r20, Y+49	; 0x31
    2706:	5a a9       	ldd	r21, Y+50	; 0x32
    2708:	6b a9       	ldd	r22, Y+51	; 0x33
    270a:	7c a9       	ldd	r23, Y+52	; 0x34
    270c:	c1 01       	movw	r24, r2
    270e:	0e 94 29 06 	call	0xc52	; 0xc52 <fat_cluster_offset>
    2712:	af a0       	ldd	r10, Y+39	; 0x27
    2714:	b8 a4       	ldd	r11, Y+40	; 0x28
    2716:	c1 2c       	mov	r12, r1
    2718:	d1 2c       	mov	r13, r1
    271a:	e1 2c       	mov	r14, r1
    271c:	f1 2c       	mov	r15, r1
    271e:	00 e0       	ldi	r16, 0x00	; 0
    2720:	10 e0       	ldi	r17, 0x00	; 0
    2722:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
    2726:	1c 82       	std	Y+4, r1	; 0x04
    2728:	1b 82       	std	Y+3, r1	; 0x03
    272a:	d1 01       	movw	r26, r2
    272c:	ed 91       	ld	r30, X+
    272e:	fc 91       	ld	r31, X
    2730:	02 80       	ldd	r0, Z+2	; 0x02
    2732:	f3 81       	ldd	r31, Z+3	; 0x03
    2734:	e0 2d       	mov	r30, r0
    2736:	de 01       	movw	r26, r28
    2738:	11 96       	adiw	r26, 0x01	; 1
    273a:	4d 01       	movw	r8, r26
    273c:	0f 2e       	mov	r0, r31
    273e:	f1 ed       	ldi	r31, 0xD1	; 209
    2740:	af 2e       	mov	r10, r31
    2742:	f6 e0       	ldi	r31, 0x06	; 6
    2744:	bf 2e       	mov	r11, r31
    2746:	f0 2d       	mov	r31, r0
    2748:	cf a4       	ldd	r12, Y+47	; 0x2f
    274a:	d8 a8       	ldd	r13, Y+48	; 0x30
    274c:	68 94       	set
    274e:	ee 24       	eor	r14, r14
    2750:	e5 f8       	bld	r14, 5
    2752:	f1 2c       	mov	r15, r1
    2754:	8e 01       	movw	r16, r28
    2756:	09 5f       	subi	r16, 0xF9	; 249
    2758:	1f 4f       	sbci	r17, 0xFF	; 255
    275a:	09 95       	icall
    275c:	88 23       	and	r24, r24
    275e:	d1 f1       	breq	.+116    	; 0x27d4 <fat_read_dir+0x228>
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	9c 81       	ldd	r25, Y+4	; 0x04
    2764:	48 0e       	add	r4, r24
    2766:	59 1e       	adc	r5, r25
    2768:	46 14       	cp	r4, r6
    276a:	57 04       	cpc	r5, r7
    276c:	c8 f0       	brcs	.+50     	; 0x27a0 <fat_read_dir+0x1f4>
    276e:	49 a9       	ldd	r20, Y+49	; 0x31
    2770:	5a a9       	ldd	r21, Y+50	; 0x32
    2772:	6b a9       	ldd	r22, Y+51	; 0x33
    2774:	7c a9       	ldd	r23, Y+52	; 0x34
    2776:	c1 01       	movw	r24, r2
    2778:	0e 94 31 01 	call	0x262	; 0x262 <fat_get_next_cluster>
    277c:	69 ab       	std	Y+49, r22	; 0x31
    277e:	7a ab       	std	Y+50, r23	; 0x32
    2780:	8b ab       	std	Y+51, r24	; 0x33
    2782:	9c ab       	std	Y+52, r25	; 0x34
    2784:	67 2b       	or	r22, r23
    2786:	68 2b       	or	r22, r24
    2788:	69 2b       	or	r22, r25
    278a:	41 f4       	brne	.+16     	; 0x279c <fat_read_dir+0x1f0>
    278c:	1e 81       	ldd	r17, Y+6	; 0x06
    278e:	11 11       	cpse	r17, r1
    2790:	0b c0       	rjmp	.+22     	; 0x27a8 <fat_read_dir+0x1fc>
    2792:	8d a9       	ldd	r24, Y+53	; 0x35
    2794:	9e a9       	ldd	r25, Y+54	; 0x36
    2796:	0e 94 c5 12 	call	0x258a	; 0x258a <fat_reset_dir>
    279a:	1d c0       	rjmp	.+58     	; 0x27d6 <fat_read_dir+0x22a>
    279c:	41 2c       	mov	r4, r1
    279e:	51 2c       	mov	r5, r1
    27a0:	8e 81       	ldd	r24, Y+6	; 0x06
    27a2:	88 23       	and	r24, r24
    27a4:	09 f4       	brne	.+2      	; 0x27a8 <fat_read_dir+0x1fc>
    27a6:	70 cf       	rjmp	.-288    	; 0x2688 <fat_read_dir+0xdc>
    27a8:	29 a9       	ldd	r18, Y+49	; 0x31
    27aa:	3a a9       	ldd	r19, Y+50	; 0x32
    27ac:	4b a9       	ldd	r20, Y+51	; 0x33
    27ae:	5c a9       	ldd	r21, Y+52	; 0x34
    27b0:	ad a9       	ldd	r26, Y+53	; 0x35
    27b2:	be a9       	ldd	r27, Y+54	; 0x36
    27b4:	d3 96       	adiw	r26, 0x33	; 51
    27b6:	2d 93       	st	X+, r18
    27b8:	3d 93       	st	X+, r19
    27ba:	4d 93       	st	X+, r20
    27bc:	5c 93       	st	X, r21
    27be:	d6 97       	sbiw	r26, 0x36	; 54
    27c0:	d8 96       	adiw	r26, 0x38	; 56
    27c2:	5c 92       	st	X, r5
    27c4:	4e 92       	st	-X, r4
    27c6:	d7 97       	sbiw	r26, 0x37	; 55
    27c8:	1e 81       	ldd	r17, Y+6	; 0x06
    27ca:	05 c0       	rjmp	.+10     	; 0x27d6 <fat_read_dir+0x22a>
    27cc:	10 e0       	ldi	r17, 0x00	; 0
    27ce:	03 c0       	rjmp	.+6      	; 0x27d6 <fat_read_dir+0x22a>
    27d0:	10 e0       	ldi	r17, 0x00	; 0
    27d2:	01 c0       	rjmp	.+2      	; 0x27d6 <fat_read_dir+0x22a>
    27d4:	18 2f       	mov	r17, r24
    27d6:	81 2f       	mov	r24, r17
    27d8:	e6 96       	adiw	r28, 0x36	; 54
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	df 91       	pop	r29
    27e6:	cf 91       	pop	r28
    27e8:	1f 91       	pop	r17
    27ea:	0f 91       	pop	r16
    27ec:	ff 90       	pop	r15
    27ee:	ef 90       	pop	r14
    27f0:	df 90       	pop	r13
    27f2:	cf 90       	pop	r12
    27f4:	bf 90       	pop	r11
    27f6:	af 90       	pop	r10
    27f8:	9f 90       	pop	r9
    27fa:	8f 90       	pop	r8
    27fc:	7f 90       	pop	r7
    27fe:	6f 90       	pop	r6
    2800:	5f 90       	pop	r5
    2802:	4f 90       	pop	r4
    2804:	3f 90       	pop	r3
    2806:	2f 90       	pop	r2
    2808:	08 95       	ret

0000280a <fat_get_dir_entry_of_path>:
    280a:	4f 92       	push	r4
    280c:	5f 92       	push	r5
    280e:	6f 92       	push	r6
    2810:	7f 92       	push	r7
    2812:	8f 92       	push	r8
    2814:	9f 92       	push	r9
    2816:	af 92       	push	r10
    2818:	bf 92       	push	r11
    281a:	cf 92       	push	r12
    281c:	df 92       	push	r13
    281e:	ef 92       	push	r14
    2820:	ff 92       	push	r15
    2822:	0f 93       	push	r16
    2824:	1f 93       	push	r17
    2826:	cf 93       	push	r28
    2828:	df 93       	push	r29
    282a:	4c 01       	movw	r8, r24
    282c:	6b 01       	movw	r12, r22
    282e:	ea 01       	movw	r28, r20
    2830:	89 2b       	or	r24, r25
    2832:	09 f4       	brne	.+2      	; 0x2836 <fat_get_dir_entry_of_path+0x2c>
    2834:	76 c0       	rjmp	.+236    	; 0x2922 <fat_get_dir_entry_of_path+0x118>
    2836:	61 15       	cp	r22, r1
    2838:	71 05       	cpc	r23, r1
    283a:	09 f4       	brne	.+2      	; 0x283e <fat_get_dir_entry_of_path+0x34>
    283c:	74 c0       	rjmp	.+232    	; 0x2926 <fat_get_dir_entry_of_path+0x11c>
    283e:	fb 01       	movw	r30, r22
    2840:	80 81       	ld	r24, Z
    2842:	88 23       	and	r24, r24
    2844:	09 f4       	brne	.+2      	; 0x2848 <fat_get_dir_entry_of_path+0x3e>
    2846:	71 c0       	rjmp	.+226    	; 0x292a <fat_get_dir_entry_of_path+0x120>
    2848:	20 97       	sbiw	r28, 0x00	; 0
    284a:	09 f4       	brne	.+2      	; 0x284e <fat_get_dir_entry_of_path+0x44>
    284c:	70 c0       	rjmp	.+224    	; 0x292e <fat_get_dir_entry_of_path+0x124>
    284e:	8f 32       	cpi	r24, 0x2F	; 47
    2850:	19 f4       	brne	.+6      	; 0x2858 <fat_get_dir_entry_of_path+0x4e>
    2852:	ff ef       	ldi	r31, 0xFF	; 255
    2854:	cf 1a       	sub	r12, r31
    2856:	df 0a       	sbc	r13, r31
    2858:	81 e3       	ldi	r24, 0x31	; 49
    285a:	fe 01       	movw	r30, r28
    285c:	11 92       	st	Z+, r1
    285e:	8a 95       	dec	r24
    2860:	e9 f7       	brne	.-6      	; 0x285c <fat_get_dir_entry_of_path+0x52>
    2862:	80 e1       	ldi	r24, 0x10	; 16
    2864:	88 a3       	std	Y+32, r24	; 0x20
    2866:	f6 01       	movw	r30, r12
    2868:	80 81       	ld	r24, Z
    286a:	88 23       	and	r24, r24
    286c:	09 f4       	brne	.+2      	; 0x2870 <fat_get_dir_entry_of_path+0x66>
    286e:	61 c0       	rjmp	.+194    	; 0x2932 <fat_get_dir_entry_of_path+0x128>
    2870:	41 2c       	mov	r4, r1
    2872:	51 2c       	mov	r5, r1
    2874:	be 01       	movw	r22, r28
    2876:	c4 01       	movw	r24, r8
    2878:	0e 94 7d 12 	call	0x24fa	; 0x24fa <fat_open_dir>
    287c:	8c 01       	movw	r16, r24
    287e:	89 2b       	or	r24, r25
    2880:	09 f4       	brne	.+2      	; 0x2884 <fat_get_dir_entry_of_path+0x7a>
    2882:	59 c0       	rjmp	.+178    	; 0x2936 <fat_get_dir_entry_of_path+0x12c>
    2884:	6f e2       	ldi	r22, 0x2F	; 47
    2886:	70 e0       	ldi	r23, 0x00	; 0
    2888:	c6 01       	movw	r24, r12
    288a:	0e 94 aa 21 	call	0x4354	; 0x4354 <strchr>
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	41 f0       	breq	.+16     	; 0x28a2 <fat_get_dir_entry_of_path+0x98>
    2892:	e8 2e       	mov	r14, r24
    2894:	ec 18       	sub	r14, r12
    2896:	5c 01       	movw	r10, r24
    2898:	ff ef       	ldi	r31, 0xFF	; 255
    289a:	af 1a       	sub	r10, r31
    289c:	bf 0a       	sbc	r11, r31
    289e:	f1 2c       	mov	r15, r1
    28a0:	2d c0       	rjmp	.+90     	; 0x28fc <fat_get_dir_entry_of_path+0xf2>
    28a2:	f6 01       	movw	r30, r12
    28a4:	01 90       	ld	r0, Z+
    28a6:	00 20       	and	r0, r0
    28a8:	e9 f7       	brne	.-6      	; 0x28a4 <fat_get_dir_entry_of_path+0x9a>
    28aa:	31 97       	sbiw	r30, 0x01	; 1
    28ac:	ec 19       	sub	r30, r12
    28ae:	fd 09       	sbc	r31, r13
    28b0:	ee 2e       	mov	r14, r30
    28b2:	56 01       	movw	r10, r12
    28b4:	ae 0e       	add	r10, r30
    28b6:	b1 1c       	adc	r11, r1
    28b8:	f2 cf       	rjmp	.-28     	; 0x289e <fat_get_dir_entry_of_path+0x94>
    28ba:	fe 01       	movw	r30, r28
    28bc:	01 90       	ld	r0, Z+
    28be:	00 20       	and	r0, r0
    28c0:	e9 f7       	brne	.-6      	; 0x28bc <fat_get_dir_entry_of_path+0xb2>
    28c2:	31 97       	sbiw	r30, 0x01	; 1
    28c4:	3f 01       	movw	r6, r30
    28c6:	6c 1a       	sub	r6, r28
    28c8:	7d 0a       	sbc	r7, r29
    28ca:	6e 14       	cp	r6, r14
    28cc:	7f 04       	cpc	r7, r15
    28ce:	b1 f4       	brne	.+44     	; 0x28fc <fat_get_dir_entry_of_path+0xf2>
    28d0:	a3 01       	movw	r20, r6
    28d2:	be 01       	movw	r22, r28
    28d4:	c6 01       	movw	r24, r12
    28d6:	0e 94 be 21 	call	0x437c	; 0x437c <strncmp>
    28da:	89 2b       	or	r24, r25
    28dc:	79 f4       	brne	.+30     	; 0x28fc <fat_get_dir_entry_of_path+0xf2>
    28de:	c8 01       	movw	r24, r16
    28e0:	0e 94 bf 12 	call	0x257e	; 0x257e <fat_close_dir>
    28e4:	f6 01       	movw	r30, r12
    28e6:	e6 0d       	add	r30, r6
    28e8:	f7 1d       	adc	r31, r7
    28ea:	80 81       	ld	r24, Z
    28ec:	88 23       	and	r24, r24
    28ee:	29 f1       	breq	.+74     	; 0x293a <fat_get_dir_entry_of_path+0x130>
    28f0:	98 a1       	ldd	r25, Y+32	; 0x20
    28f2:	89 2f       	mov	r24, r25
    28f4:	80 71       	andi	r24, 0x10	; 16
    28f6:	94 fd       	sbrc	r25, 4
    28f8:	08 c0       	rjmp	.+16     	; 0x290a <fat_get_dir_entry_of_path+0x100>
    28fa:	20 c0       	rjmp	.+64     	; 0x293c <fat_get_dir_entry_of_path+0x132>
    28fc:	be 01       	movw	r22, r28
    28fe:	c8 01       	movw	r24, r16
    2900:	0e 94 d6 12 	call	0x25ac	; 0x25ac <fat_read_dir>
    2904:	81 11       	cpse	r24, r1
    2906:	d9 cf       	rjmp	.-78     	; 0x28ba <fat_get_dir_entry_of_path+0xb0>
    2908:	03 c0       	rjmp	.+6      	; 0x2910 <fat_get_dir_entry_of_path+0x106>
    290a:	65 01       	movw	r12, r10
    290c:	04 2d       	mov	r16, r4
    290e:	15 2d       	mov	r17, r5
    2910:	c8 01       	movw	r24, r16
    2912:	0e 94 bf 12 	call	0x257e	; 0x257e <fat_close_dir>
    2916:	f6 01       	movw	r30, r12
    2918:	80 81       	ld	r24, Z
    291a:	81 11       	cpse	r24, r1
    291c:	ab cf       	rjmp	.-170    	; 0x2874 <fat_get_dir_entry_of_path+0x6a>
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	0d c0       	rjmp	.+26     	; 0x293c <fat_get_dir_entry_of_path+0x132>
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	0b c0       	rjmp	.+22     	; 0x293c <fat_get_dir_entry_of_path+0x132>
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	09 c0       	rjmp	.+18     	; 0x293c <fat_get_dir_entry_of_path+0x132>
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	07 c0       	rjmp	.+14     	; 0x293c <fat_get_dir_entry_of_path+0x132>
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	05 c0       	rjmp	.+10     	; 0x293c <fat_get_dir_entry_of_path+0x132>
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	03 c0       	rjmp	.+6      	; 0x293c <fat_get_dir_entry_of_path+0x132>
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	01 c0       	rjmp	.+2      	; 0x293c <fat_get_dir_entry_of_path+0x132>
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	df 91       	pop	r29
    293e:	cf 91       	pop	r28
    2940:	1f 91       	pop	r17
    2942:	0f 91       	pop	r16
    2944:	ff 90       	pop	r15
    2946:	ef 90       	pop	r14
    2948:	df 90       	pop	r13
    294a:	cf 90       	pop	r12
    294c:	bf 90       	pop	r11
    294e:	af 90       	pop	r10
    2950:	9f 90       	pop	r9
    2952:	8f 90       	pop	r8
    2954:	7f 90       	pop	r7
    2956:	6f 90       	pop	r6
    2958:	5f 90       	pop	r5
    295a:	4f 90       	pop	r4
    295c:	08 95       	ret

0000295e <fat_get_fs_size>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    295e:	2f 92       	push	r2
    2960:	3f 92       	push	r3
    2962:	4f 92       	push	r4
    2964:	5f 92       	push	r5
    2966:	6f 92       	push	r6
    2968:	7f 92       	push	r7
    296a:	8f 92       	push	r8
    296c:	9f 92       	push	r9
    296e:	af 92       	push	r10
    2970:	bf 92       	push	r11
    2972:	cf 92       	push	r12
    2974:	df 92       	push	r13
    2976:	ef 92       	push	r14
    2978:	ff 92       	push	r15
    297a:	0f 93       	push	r16
    297c:	1f 93       	push	r17
    297e:	cf 93       	push	r28
    2980:	df 93       	push	r29
    if(!fs)
    2982:	00 97       	sbiw	r24, 0x00	; 0
    2984:	09 f4       	brne	.+2      	; 0x2988 <fat_get_fs_size+0x2a>
    2986:	54 c0       	rjmp	.+168    	; 0x2a30 <fat_get_fs_size+0xd2>
    2988:	ac 01       	movw	r20, r24
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    298a:	dc 01       	movw	r26, r24
    298c:	ed 91       	ld	r30, X+
    298e:	fc 91       	ld	r31, X
    2990:	11 97       	sbiw	r26, 0x01	; 1
    2992:	80 85       	ldd	r24, Z+8	; 0x08
    2994:	8b 30       	cpi	r24, 0x0B	; 11
    2996:	49 f5       	brne	.+82     	; 0x29ea <fat_get_fs_size+0x8c>
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    2998:	52 96       	adiw	r26, 0x12	; 18
    299a:	8d 91       	ld	r24, X+
    299c:	9d 91       	ld	r25, X+
    299e:	0d 90       	ld	r0, X+
    29a0:	bc 91       	ld	r27, X
    29a2:	a0 2d       	mov	r26, r0
    29a4:	b6 95       	lsr	r27
    29a6:	a7 95       	ror	r26
    29a8:	97 95       	ror	r25
    29aa:	87 95       	ror	r24
    29ac:	b6 95       	lsr	r27
    29ae:	a7 95       	ror	r26
    29b0:	97 95       	ror	r25
    29b2:	87 95       	ror	r24
    29b4:	02 97       	sbiw	r24, 0x02	; 2
    29b6:	a1 09       	sbc	r26, r1
    29b8:	b1 09       	sbc	r27, r1
    29ba:	1c 01       	movw	r2, r24
    29bc:	2d 01       	movw	r4, r26
    29be:	fa 01       	movw	r30, r20
    29c0:	00 8d       	ldd	r16, Z+24	; 0x18
    29c2:	11 8d       	ldd	r17, Z+25	; 0x19
    29c4:	a0 2e       	mov	r10, r16
    29c6:	b1 2e       	mov	r11, r17
    29c8:	c1 2c       	mov	r12, r1
    29ca:	d1 2c       	mov	r13, r1
    29cc:	e1 2c       	mov	r14, r1
    29ce:	f1 2c       	mov	r15, r1
    29d0:	00 e0       	ldi	r16, 0x00	; 0
    29d2:	10 e0       	ldi	r17, 0x00	; 0
    29d4:	28 2f       	mov	r18, r24
    29d6:	33 2d       	mov	r19, r3
    29d8:	44 2d       	mov	r20, r4
    29da:	55 2d       	mov	r21, r5
    29dc:	60 e0       	ldi	r22, 0x00	; 0
    29de:	70 e0       	ldi	r23, 0x00	; 0
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	0e 94 d7 20 	call	0x41ae	; 0x41ae <__muldi3>
    29e8:	2b c0       	rjmp	.+86     	; 0x2a40 <fat_get_fs_size+0xe2>
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
    29ea:	fa 01       	movw	r30, r20
    29ec:	82 89       	ldd	r24, Z+18	; 0x12
    29ee:	93 89       	ldd	r25, Z+19	; 0x13
    29f0:	a4 89       	ldd	r26, Z+20	; 0x14
    29f2:	b5 89       	ldd	r27, Z+21	; 0x15
    29f4:	b6 95       	lsr	r27
    29f6:	a7 95       	ror	r26
    29f8:	97 95       	ror	r25
    29fa:	87 95       	ror	r24
    29fc:	02 97       	sbiw	r24, 0x02	; 2
    29fe:	a1 09       	sbc	r26, r1
    2a00:	b1 09       	sbc	r27, r1
    2a02:	1c 01       	movw	r2, r24
    2a04:	2d 01       	movw	r4, r26
    2a06:	00 8d       	ldd	r16, Z+24	; 0x18
    2a08:	11 8d       	ldd	r17, Z+25	; 0x19
    2a0a:	a0 2e       	mov	r10, r16
    2a0c:	b1 2e       	mov	r11, r17
    2a0e:	c1 2c       	mov	r12, r1
    2a10:	d1 2c       	mov	r13, r1
    2a12:	e1 2c       	mov	r14, r1
    2a14:	f1 2c       	mov	r15, r1
    2a16:	00 e0       	ldi	r16, 0x00	; 0
    2a18:	10 e0       	ldi	r17, 0x00	; 0
    2a1a:	28 2f       	mov	r18, r24
    2a1c:	33 2d       	mov	r19, r3
    2a1e:	44 2d       	mov	r20, r4
    2a20:	55 2d       	mov	r21, r5
    2a22:	60 e0       	ldi	r22, 0x00	; 0
    2a24:	70 e0       	ldi	r23, 0x00	; 0
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	0e 94 d7 20 	call	0x41ae	; 0x41ae <__muldi3>
    2a2e:	08 c0       	rjmp	.+16     	; 0x2a40 <fat_get_fs_size+0xe2>
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    if(!fs)
        return 0;
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e0       	ldi	r20, 0x00	; 0
    2a36:	50 e0       	ldi	r21, 0x00	; 0
    2a38:	60 e0       	ldi	r22, 0x00	; 0
    2a3a:	70 e0       	ldi	r23, 0x00	; 0
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    if(fs->partition->type == PARTITION_TYPE_FAT32)
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
}
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	1f 91       	pop	r17
    2a46:	0f 91       	pop	r16
    2a48:	ff 90       	pop	r15
    2a4a:	ef 90       	pop	r14
    2a4c:	df 90       	pop	r13
    2a4e:	cf 90       	pop	r12
    2a50:	bf 90       	pop	r11
    2a52:	af 90       	pop	r10
    2a54:	9f 90       	pop	r9
    2a56:	8f 90       	pop	r8
    2a58:	7f 90       	pop	r7
    2a5a:	6f 90       	pop	r6
    2a5c:	5f 90       	pop	r5
    2a5e:	4f 90       	pop	r4
    2a60:	3f 90       	pop	r3
    2a62:	2f 90       	pop	r2
    2a64:	08 95       	ret

00002a66 <fat_get_fs_free>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
    2a66:	2f 92       	push	r2
    2a68:	3f 92       	push	r3
    2a6a:	4f 92       	push	r4
    2a6c:	5f 92       	push	r5
    2a6e:	6f 92       	push	r6
    2a70:	7f 92       	push	r7
    2a72:	8f 92       	push	r8
    2a74:	9f 92       	push	r9
    2a76:	af 92       	push	r10
    2a78:	bf 92       	push	r11
    2a7a:	cf 92       	push	r12
    2a7c:	df 92       	push	r13
    2a7e:	ef 92       	push	r14
    2a80:	ff 92       	push	r15
    2a82:	0f 93       	push	r16
    2a84:	1f 93       	push	r17
    2a86:	cf 93       	push	r28
    2a88:	df 93       	push	r29
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	e0 97       	sbiw	r28, 0x30	; 48
    2a90:	0f b6       	in	r0, 0x3f	; 63
    2a92:	f8 94       	cli
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	cd bf       	out	0x3d, r28	; 61
    if(!fs)
    2a9a:	00 97       	sbiw	r24, 0x00	; 0
    2a9c:	09 f4       	brne	.+2      	; 0x2aa0 <fat_get_fs_free+0x3a>
    2a9e:	b9 c0       	rjmp	.+370    	; 0x2c12 <fat_get_fs_free+0x1ac>
    2aa0:	98 ab       	std	Y+48, r25	; 0x30
    2aa2:	8f a7       	std	Y+47, r24	; 0x2f
        return 0;

    uint8_t fat[32];
    struct fat_usage_count_callback_arg count_arg;
    count_arg.cluster_count = 0;
    2aa4:	19 a2       	std	Y+33, r1	; 0x21
    2aa6:	1a a2       	std	Y+34, r1	; 0x22
    2aa8:	1b a2       	std	Y+35, r1	; 0x23
    2aaa:	1c a2       	std	Y+36, r1	; 0x24
    count_arg.buffer_size = sizeof(fat);
    2aac:	80 e2       	ldi	r24, 0x20	; 32
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	9e a3       	std	Y+38, r25	; 0x26
    2ab2:	8d a3       	std	Y+37, r24	; 0x25

    offset_t fat_offset = fs->header.fat_offset;
    2ab4:	af a5       	ldd	r26, Y+47	; 0x2f
    2ab6:	b8 a9       	ldd	r27, Y+48	; 0x30
    2ab8:	1a 96       	adiw	r26, 0x0a	; 10
    2aba:	bc 91       	ld	r27, X
    2abc:	bf a3       	std	Y+39, r27	; 0x27
    2abe:	ef a5       	ldd	r30, Y+47	; 0x2f
    2ac0:	f8 a9       	ldd	r31, Y+48	; 0x30
    2ac2:	f3 85       	ldd	r31, Z+11	; 0x0b
    2ac4:	f8 a7       	std	Y+40, r31	; 0x28
    2ac6:	af a5       	ldd	r26, Y+47	; 0x2f
    2ac8:	b8 a9       	ldd	r27, Y+48	; 0x30
    2aca:	1c 96       	adiw	r26, 0x0c	; 12
    2acc:	bc 91       	ld	r27, X
    2ace:	b9 a7       	std	Y+41, r27	; 0x29
    2ad0:	ef a5       	ldd	r30, Y+47	; 0x2f
    2ad2:	f8 a9       	ldd	r31, Y+48	; 0x30
    2ad4:	f5 85       	ldd	r31, Z+13	; 0x0d
    2ad6:	fa a7       	std	Y+42, r31	; 0x2a
    2ad8:	af a5       	ldd	r26, Y+47	; 0x2f
    2ada:	b8 a9       	ldd	r27, Y+48	; 0x30
    2adc:	1e 96       	adiw	r26, 0x0e	; 14
    2ade:	bc 91       	ld	r27, X
    2ae0:	bb a7       	std	Y+43, r27	; 0x2b
    2ae2:	ef a5       	ldd	r30, Y+47	; 0x2f
    2ae4:	f8 a9       	ldd	r31, Y+48	; 0x30
    2ae6:	f7 85       	ldd	r31, Z+15	; 0x0f
    2ae8:	fc a7       	std	Y+44, r31	; 0x2c
    2aea:	af a5       	ldd	r26, Y+47	; 0x2f
    2aec:	b8 a9       	ldd	r27, Y+48	; 0x30
    2aee:	50 96       	adiw	r26, 0x10	; 16
    2af0:	bc 91       	ld	r27, X
    2af2:	bd a7       	std	Y+45, r27	; 0x2d
    2af4:	ef a5       	ldd	r30, Y+47	; 0x2f
    2af6:	f8 a9       	ldd	r31, Y+48	; 0x30
    2af8:	f1 89       	ldd	r31, Z+17	; 0x11
    2afa:	fe a7       	std	Y+46, r31	; 0x2e
    uint32_t fat_size = fs->header.fat_size;
    2afc:	af a5       	ldd	r26, Y+47	; 0x2f
    2afe:	b8 a9       	ldd	r27, Y+48	; 0x30
    2b00:	52 96       	adiw	r26, 0x12	; 18
    2b02:	2d 90       	ld	r2, X+
    2b04:	3d 90       	ld	r3, X+
    2b06:	4d 90       	ld	r4, X+
    2b08:	5c 90       	ld	r5, X
    2b0a:	55 97       	sbiw	r26, 0x15	; 21
    while(fat_size > 0)
    2b0c:	21 14       	cp	r2, r1
    2b0e:	31 04       	cpc	r3, r1
    2b10:	41 04       	cpc	r4, r1
    2b12:	51 04       	cpc	r5, r1
    2b14:	09 f4       	brne	.+2      	; 0x2b18 <fat_get_fs_free+0xb2>
    2b16:	60 c0       	rjmp	.+192    	; 0x2bd8 <fat_get_fs_free+0x172>
    {
        uintptr_t length = UINTPTR_MAX - 1;
        if(fat_size < length)
            length = fat_size;

        if(!fs->partition->device_read_interval(fat_offset,
    2b18:	32 01       	movw	r6, r4
    2b1a:	21 01       	movw	r4, r2
    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    {
        uintptr_t length = UINTPTR_MAX - 1;
        if(fat_size < length)
    2b1c:	be ef       	ldi	r27, 0xFE	; 254
    2b1e:	4b 16       	cp	r4, r27
    2b20:	bf ef       	ldi	r27, 0xFF	; 255
    2b22:	5b 06       	cpc	r5, r27
    2b24:	61 04       	cpc	r6, r1
    2b26:	71 04       	cpc	r7, r1
    2b28:	10 f4       	brcc	.+4      	; 0x2b2e <fat_get_fs_free+0xc8>
            length = fat_size;
    2b2a:	12 01       	movw	r2, r4
    2b2c:	06 c0       	rjmp	.+12     	; 0x2b3a <fat_get_fs_free+0xd4>

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    {
        uintptr_t length = UINTPTR_MAX - 1;
    2b2e:	0f 2e       	mov	r0, r31
    2b30:	fe ef       	ldi	r31, 0xFE	; 254
    2b32:	2f 2e       	mov	r2, r31
    2b34:	f0 2d       	mov	r31, r0
    2b36:	33 24       	eor	r3, r3
    2b38:	3a 94       	dec	r3
        if(fat_size < length)
            length = fat_size;

        if(!fs->partition->device_read_interval(fat_offset,
    2b3a:	ef a5       	ldd	r30, Y+47	; 0x2f
    2b3c:	f8 a9       	ldd	r31, Y+48	; 0x30
    2b3e:	a0 81       	ld	r26, Z
    2b40:	b1 81       	ldd	r27, Z+1	; 0x01
    2b42:	12 96       	adiw	r26, 0x02	; 2
    2b44:	ed 91       	ld	r30, X+
    2b46:	fc 91       	ld	r31, X
    2b48:	13 97       	sbiw	r26, 0x03	; 3
    2b4a:	18 96       	adiw	r26, 0x08	; 8
    2b4c:	8c 91       	ld	r24, X
    2b4e:	86 30       	cpi	r24, 0x06	; 6
    2b50:	31 f0       	breq	.+12     	; 0x2b5e <fat_get_fs_free+0xf8>
    2b52:	8d e4       	ldi	r24, 0x4D	; 77
    2b54:	98 e0       	ldi	r25, 0x08	; 8
    2b56:	a8 2e       	mov	r10, r24
    2b58:	dc 01       	movw	r26, r24
    2b5a:	bb 2e       	mov	r11, r27
    2b5c:	05 c0       	rjmp	.+10     	; 0x2b68 <fat_get_fs_free+0x102>
    2b5e:	8f e9       	ldi	r24, 0x9F	; 159
    2b60:	96 e0       	ldi	r25, 0x06	; 6
    2b62:	a8 2e       	mov	r10, r24
    2b64:	dc 01       	movw	r26, r24
    2b66:	bb 2e       	mov	r11, r27
    2b68:	ce 01       	movw	r24, r28
    2b6a:	81 96       	adiw	r24, 0x21	; 33
    2b6c:	4c 01       	movw	r8, r24
    2b6e:	61 01       	movw	r12, r2
    2b70:	68 94       	set
    2b72:	ee 24       	eor	r14, r14
    2b74:	e5 f8       	bld	r14, 5
    2b76:	f1 2c       	mov	r15, r1
    2b78:	8e 01       	movw	r16, r28
    2b7a:	0f 5f       	subi	r16, 0xFF	; 255
    2b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7e:	2f a1       	ldd	r18, Y+39	; 0x27
    2b80:	38 a5       	ldd	r19, Y+40	; 0x28
    2b82:	49 a5       	ldd	r20, Y+41	; 0x29
    2b84:	5a a5       	ldd	r21, Y+42	; 0x2a
    2b86:	6b a5       	ldd	r22, Y+43	; 0x2b
    2b88:	7c a5       	ldd	r23, Y+44	; 0x2c
    2b8a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b8c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b8e:	09 95       	icall
    2b90:	88 23       	and	r24, r24
    2b92:	09 f4       	brne	.+2      	; 0x2b96 <fat_get_fs_free+0x130>
    2b94:	47 c0       	rjmp	.+142    	; 0x2c24 <fat_get_fs_free+0x1be>
                                                &count_arg
                                               )
          )
            return 0;

        fat_offset += length;
    2b96:	41 01       	movw	r8, r2
    2b98:	22 2d       	mov	r18, r2
    2b9a:	39 2d       	mov	r19, r9
    2b9c:	40 e0       	ldi	r20, 0x00	; 0
    2b9e:	50 e0       	ldi	r21, 0x00	; 0
    2ba0:	60 e0       	ldi	r22, 0x00	; 0
    2ba2:	70 e0       	ldi	r23, 0x00	; 0
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	af a0       	ldd	r10, Y+39	; 0x27
    2baa:	b8 a4       	ldd	r11, Y+40	; 0x28
    2bac:	c9 a4       	ldd	r12, Y+41	; 0x29
    2bae:	da a4       	ldd	r13, Y+42	; 0x2a
    2bb0:	eb a4       	ldd	r14, Y+43	; 0x2b
    2bb2:	fc a4       	ldd	r15, Y+44	; 0x2c
    2bb4:	0d a5       	ldd	r16, Y+45	; 0x2d
    2bb6:	1e a5       	ldd	r17, Y+46	; 0x2e
    2bb8:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
    2bbc:	2f a3       	std	Y+39, r18	; 0x27
    2bbe:	38 a7       	std	Y+40, r19	; 0x28
    2bc0:	49 a7       	std	Y+41, r20	; 0x29
    2bc2:	5a a7       	std	Y+42, r21	; 0x2a
    2bc4:	6b a7       	std	Y+43, r22	; 0x2b
    2bc6:	7c a7       	std	Y+44, r23	; 0x2c
    2bc8:	8d a7       	std	Y+45, r24	; 0x2d
    2bca:	9e a7       	std	Y+46, r25	; 0x2e
        fat_size -= length;
    2bcc:	42 18       	sub	r4, r2
    2bce:	53 08       	sbc	r5, r3
    2bd0:	61 08       	sbc	r6, r1
    2bd2:	71 08       	sbc	r7, r1
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    2bd4:	09 f0       	breq	.+2      	; 0x2bd8 <fat_get_fs_free+0x172>
    2bd6:	a2 cf       	rjmp	.-188    	; 0x2b1c <fat_get_fs_free+0xb6>

        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
    2bd8:	af a5       	ldd	r26, Y+47	; 0x2f
    2bda:	b8 a9       	ldd	r27, Y+48	; 0x30
    2bdc:	58 96       	adiw	r26, 0x18	; 24
    2bde:	2d 90       	ld	r2, X+
    2be0:	3c 90       	ld	r3, X
    2be2:	59 97       	sbiw	r26, 0x19	; 25
    2be4:	09 a1       	ldd	r16, Y+33	; 0x21
    2be6:	1a a1       	ldd	r17, Y+34	; 0x22
    2be8:	2b a1       	ldd	r18, Y+35	; 0x23
    2bea:	3c a1       	ldd	r19, Y+36	; 0x24
    2bec:	a0 2e       	mov	r10, r16
    2bee:	b1 2e       	mov	r11, r17
    2bf0:	c2 2e       	mov	r12, r18
    2bf2:	d3 2e       	mov	r13, r19
    2bf4:	e1 2c       	mov	r14, r1
    2bf6:	f1 2c       	mov	r15, r1
    2bf8:	00 e0       	ldi	r16, 0x00	; 0
    2bfa:	10 e0       	ldi	r17, 0x00	; 0
    2bfc:	22 2d       	mov	r18, r2
    2bfe:	33 2d       	mov	r19, r3
    2c00:	40 e0       	ldi	r20, 0x00	; 0
    2c02:	50 e0       	ldi	r21, 0x00	; 0
    2c04:	60 e0       	ldi	r22, 0x00	; 0
    2c06:	70 e0       	ldi	r23, 0x00	; 0
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	0e 94 d7 20 	call	0x41ae	; 0x41ae <__muldi3>
    2c10:	11 c0       	rjmp	.+34     	; 0x2c34 <fat_get_fs_free+0x1ce>
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
    if(!fs)
        return 0;
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e0       	ldi	r20, 0x00	; 0
    2c18:	50 e0       	ldi	r21, 0x00	; 0
    2c1a:	60 e0       	ldi	r22, 0x00	; 0
    2c1c:	70 e0       	ldi	r23, 0x00	; 0
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	08 c0       	rjmp	.+16     	; 0x2c34 <fat_get_fs_free+0x1ce>
                                                fat_get_fs_free_16_callback,
#endif
                                                &count_arg
                                               )
          )
            return 0;
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	40 e0       	ldi	r20, 0x00	; 0
    2c2a:	50 e0       	ldi	r21, 0x00	; 0
    2c2c:	60 e0       	ldi	r22, 0x00	; 0
    2c2e:	70 e0       	ldi	r23, 0x00	; 0
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	90 e0       	ldi	r25, 0x00	; 0
        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
}
    2c34:	e0 96       	adiw	r28, 0x30	; 48
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	f8 94       	cli
    2c3a:	de bf       	out	0x3e, r29	; 62
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	cd bf       	out	0x3d, r28	; 61
    2c40:	df 91       	pop	r29
    2c42:	cf 91       	pop	r28
    2c44:	1f 91       	pop	r17
    2c46:	0f 91       	pop	r16
    2c48:	ff 90       	pop	r15
    2c4a:	ef 90       	pop	r14
    2c4c:	df 90       	pop	r13
    2c4e:	cf 90       	pop	r12
    2c50:	bf 90       	pop	r11
    2c52:	af 90       	pop	r10
    2c54:	9f 90       	pop	r9
    2c56:	8f 90       	pop	r8
    2c58:	7f 90       	pop	r7
    2c5a:	6f 90       	pop	r6
    2c5c:	5f 90       	pop	r5
    2c5e:	4f 90       	pop	r4
    2c60:	3f 90       	pop	r3
    2c62:	2f 90       	pop	r2
    2c64:	08 95       	ret

00002c66 <main>:
static struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name); 
static uint8_t print_disk_info(const struct fat_fs_struct* fs);


int main()
{
    2c66:	af 92       	push	r10
    2c68:	bf 92       	push	r11
    2c6a:	cf 92       	push	r12
    2c6c:	df 92       	push	r13
    2c6e:	ef 92       	push	r14
    2c70:	ff 92       	push	r15
    2c72:	0f 93       	push	r16
    2c74:	1f 93       	push	r17
    2c76:	cf 93       	push	r28
    2c78:	df 93       	push	r29
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	c0 57       	subi	r28, 0x70	; 112
    2c80:	d1 09       	sbc	r29, r1
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	cd bf       	out	0x3d, r28	; 61
    set_sleep_mode(SLEEP_MODE_IDLE);
    2c8c:	83 b7       	in	r24, 0x33	; 51
    2c8e:	81 7f       	andi	r24, 0xF1	; 241
    2c90:	83 bf       	out	0x33, r24	; 51
	uart_init();
    2c92:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_init>
	//uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
	sei();
    2c96:	78 94       	sei

	 while(1)
    {
		uart_puts_p(PSTR("going into init\n"));
    2c98:	87 ec       	ldi	r24, 0xC7	; 199
    2c9a:	91 e0       	ldi	r25, 0x01	; 1
    2c9c:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
        /* setup sd card slot */
        if(!sd_raw_init())
    2ca0:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <sd_raw_init>
    2ca4:	81 11       	cpse	r24, r1
    2ca6:	04 c0       	rjmp	.+8      	; 0x2cb0 <main+0x4a>
        {
        	uart_puts_p(PSTR("MMC/SD initialization failed\n"));
    2ca8:	89 ea       	ldi	r24, 0xA9	; 169
    2caa:	91 e0       	ldi	r25, 0x01	; 1
    2cac:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
        }
        struct partition_struct* partition = partition_open(sd_raw_read,
    2cb0:	00 e0       	ldi	r16, 0x00	; 0
    2cb2:	27 e4       	ldi	r18, 0x47	; 71
    2cb4:	3d e1       	ldi	r19, 0x1D	; 29
    2cb6:	4d ef       	ldi	r20, 0xFD	; 253
    2cb8:	5b e1       	ldi	r21, 0x1B	; 27
    2cba:	6d e5       	ldi	r22, 0x5D	; 93
    2cbc:	7b e1       	ldi	r23, 0x1B	; 27
    2cbe:	8a e2       	ldi	r24, 0x2A	; 42
    2cc0:	99 e1       	ldi	r25, 0x19	; 25
    2cc2:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <partition_open>
    2cc6:	5c 01       	movw	r10, r24
                                                            sd_raw_read_interval,
                                                            sd_raw_write,
                                                            sd_raw_write_interval,
                                                            0
                                                           );
        if(!partition)
    2cc8:	89 2b       	or	r24, r25
    2cca:	91 f4       	brne	.+36     	; 0x2cf0 <main+0x8a>
        {
            /* If the partition did not open, assume the storage device
             * is a "superfloppy", i.e. has no MBR.
             */
            partition = partition_open(sd_raw_read,
    2ccc:	0f ef       	ldi	r16, 0xFF	; 255
    2cce:	27 e4       	ldi	r18, 0x47	; 71
    2cd0:	3d e1       	ldi	r19, 0x1D	; 29
    2cd2:	4d ef       	ldi	r20, 0xFD	; 253
    2cd4:	5b e1       	ldi	r21, 0x1B	; 27
    2cd6:	6d e5       	ldi	r22, 0x5D	; 93
    2cd8:	7b e1       	ldi	r23, 0x1B	; 27
    2cda:	8a e2       	ldi	r24, 0x2A	; 42
    2cdc:	99 e1       	ldi	r25, 0x19	; 25
    2cde:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <partition_open>
    2ce2:	5c 01       	movw	r10, r24
                                       sd_raw_read_interval,
                                       sd_raw_write,
                                       sd_raw_write_interval,
                                       -1
                                      );
            if(!partition)
    2ce4:	89 2b       	or	r24, r25
    2ce6:	21 f4       	brne	.+8      	; 0x2cf0 <main+0x8a>
            {
                uart_puts_p(PSTR("opening partition failed\n"));
    2ce8:	8f e8       	ldi	r24, 0x8F	; 143
    2cea:	91 e0       	ldi	r25, 0x01	; 1
    2cec:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
            }
        }

        /* open file system */
        struct fat_fs_struct* fs = fat_open(partition);
    2cf0:	c5 01       	movw	r24, r10
    2cf2:	0e 94 30 0a 	call	0x1460	; 0x1460 <fat_open>
    2cf6:	6c 01       	movw	r12, r24
        if(!fs)
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	09 f0       	breq	.+2      	; 0x2cfe <main+0x98>
    2cfc:	43 c1       	rjmp	.+646    	; 0x2f84 <main+0x31e>
        {
        	uart_puts_p(PSTR("opening filesystem failed\n"));
    2cfe:	84 e7       	ldi	r24, 0x74	; 116
    2d00:	91 e0       	ldi	r25, 0x01	; 1
    2d02:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
        }

        /* open root directory */
        struct fat_dir_entry_struct directory;
        fat_get_dir_entry_of_path(fs, "/", &directory);
    2d06:	ae 01       	movw	r20, r28
    2d08:	4e 5c       	subi	r20, 0xCE	; 206
    2d0a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d0c:	6d e0       	ldi	r22, 0x0D	; 13
    2d0e:	71 e0       	ldi	r23, 0x01	; 1
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	0e 94 05 14 	call	0x280a	; 0x280a <fat_get_dir_entry_of_path>

        struct fat_dir_struct* dd = fat_open_dir(fs, &directory);
    2d18:	be 01       	movw	r22, r28
    2d1a:	6e 5c       	subi	r22, 0xCE	; 206
    2d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	0e 94 7d 12 	call	0x24fa	; 0x24fa <fat_open_dir>
    2d26:	7c 01       	movw	r14, r24
        if(!dd)
    2d28:	89 2b       	or	r24, r25
    2d2a:	09 f0       	breq	.+2      	; 0x2d2e <main+0xc8>
    2d2c:	ae c0       	rjmp	.+348    	; 0x2e8a <main+0x224>
    2d2e:	40 c1       	rjmp	.+640    	; 0x2fb0 <main+0x34a>
{
    if(!fs)
        return 0;

    struct sd_raw_info disk_info;
    if(!sd_raw_get_info(&disk_info))
    2d30:	ce 01       	movw	r24, r28
    2d32:	01 96       	adiw	r24, 0x01	; 1
    2d34:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <sd_raw_get_info>
    2d38:	88 23       	and	r24, r24
    2d3a:	09 f4       	brne	.+2      	; 0x2d3e <main+0xd8>
    2d3c:	a6 c0       	rjmp	.+332    	; 0x2e8a <main+0x224>
        return 0;

    uart_puts_p(PSTR("manuf:  0x")); uart_putc_hex(disk_info.manufacturer); uart_putc('\n');
    2d3e:	86 ee       	ldi	r24, 0xE6	; 230
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <uart_putc_hex>
    2d4c:	8a e0       	ldi	r24, 0x0A	; 10
    2d4e:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    uart_puts_p(PSTR("oem:    ")); uart_puts((char*) disk_info.oem); uart_putc('\n');
    2d52:	8d ed       	ldi	r24, 0xDD	; 221
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	02 96       	adiw	r24, 0x02	; 2
    2d5e:	0e 94 3b 20 	call	0x4076	; 0x4076 <uart_puts>
    2d62:	8a e0       	ldi	r24, 0x0A	; 10
    2d64:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    uart_puts_p(PSTR("prod:   ")); uart_puts((char*) disk_info.product); uart_putc('\n');
    2d68:	84 ed       	ldi	r24, 0xD4	; 212
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
    2d70:	ce 01       	movw	r24, r28
    2d72:	05 96       	adiw	r24, 0x05	; 5
    2d74:	0e 94 3b 20 	call	0x4076	; 0x4076 <uart_puts>
    2d78:	8a e0       	ldi	r24, 0x0A	; 10
    2d7a:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    uart_puts_p(PSTR("rev:    ")); uart_putc_hex(disk_info.revision); uart_putc('\n');
    2d7e:	8b ec       	ldi	r24, 0xCB	; 203
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
    2d86:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d88:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <uart_putc_hex>
    2d8c:	8a e0       	ldi	r24, 0x0A	; 10
    2d8e:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    uart_puts_p(PSTR("serial: 0x")); uart_putdw_hex(disk_info.serial); uart_putc('\n');
    2d92:	80 ec       	ldi	r24, 0xC0	; 192
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
    2d9a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d9c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d9e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2da0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2da2:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <uart_putdw_hex>
    2da6:	8a e0       	ldi	r24, 0x0A	; 10
    2da8:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    uart_puts_p(PSTR("date:   ")); uart_putw_dec(disk_info.manufacturing_month); uart_putc('/');
    2dac:	87 eb       	ldi	r24, 0xB7	; 183
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
    2db4:	89 89       	ldd	r24, Y+17	; 0x11
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <uart_putw_dec>
    2dbc:	8f e2       	ldi	r24, 0x2F	; 47
    2dbe:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
                                   uart_putw_dec(disk_info.manufacturing_year); uart_putc('\n');
    2dc2:	88 89       	ldd	r24, Y+16	; 0x10
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <uart_putw_dec>
    2dca:	8a e0       	ldi	r24, 0x0A	; 10
    2dcc:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    uart_puts_p(PSTR("size:   ")); uart_putdw_dec(disk_info.capacity / 1024 / 1024); uart_puts_p(PSTR("MB\n"));
    2dd0:	8e ea       	ldi	r24, 0xAE	; 174
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
    2dd8:	2a 89       	ldd	r18, Y+18	; 0x12
    2dda:	3b 89       	ldd	r19, Y+19	; 0x13
    2ddc:	4c 89       	ldd	r20, Y+20	; 0x14
    2dde:	5d 89       	ldd	r21, Y+21	; 0x15
    2de0:	6e 89       	ldd	r22, Y+22	; 0x16
    2de2:	7f 89       	ldd	r23, Y+23	; 0x17
    2de4:	88 8d       	ldd	r24, Y+24	; 0x18
    2de6:	99 8d       	ldd	r25, Y+25	; 0x19
    2de8:	04 e1       	ldi	r16, 0x14	; 20
    2dea:	0e 94 4b 21 	call	0x4296	; 0x4296 <__lshrdi3>
    2dee:	62 2f       	mov	r22, r18
    2df0:	73 2f       	mov	r23, r19
    2df2:	84 2f       	mov	r24, r20
    2df4:	95 2f       	mov	r25, r21
    2df6:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <uart_putdw_dec>
    2dfa:	8a ea       	ldi	r24, 0xAA	; 170
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
    uart_puts_p(PSTR("copy:   ")); uart_putw_dec(disk_info.flag_copy); uart_putc('\n');
    2e02:	81 ea       	ldi	r24, 0xA1	; 161
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
    2e0a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <uart_putw_dec>
    2e12:	8a e0       	ldi	r24, 0x0A	; 10
    2e14:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    uart_puts_p(PSTR("wr.pr.: ")); uart_putw_dec(disk_info.flag_write_protect_temp); uart_putc('/');
    2e18:	88 e9       	ldi	r24, 0x98	; 152
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
    2e20:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <uart_putw_dec>
    2e28:	8f e2       	ldi	r24, 0x2F	; 47
    2e2a:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
                                   uart_putw_dec(disk_info.flag_write_protect); uart_putc('\n');
    2e2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <uart_putw_dec>
    2e36:	8a e0       	ldi	r24, 0x0A	; 10
    2e38:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    uart_puts_p(PSTR("format: ")); uart_putw_dec(disk_info.format); uart_putc('\n');
    2e3c:	8f e8       	ldi	r24, 0x8F	; 143
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
    2e44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <uart_putw_dec>
    2e4c:	8a e0       	ldi	r24, 0x0A	; 10
    2e4e:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    uart_puts_p(PSTR("free:   ")); uart_putdw_dec(fat_get_fs_free(fs)); uart_putc('/');
    2e52:	86 e8       	ldi	r24, 0x86	; 134
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
    2e5a:	c6 01       	movw	r24, r12
    2e5c:	0e 94 33 15 	call	0x2a66	; 0x2a66 <fat_get_fs_free>
    2e60:	62 2f       	mov	r22, r18
    2e62:	73 2f       	mov	r23, r19
    2e64:	84 2f       	mov	r24, r20
    2e66:	95 2f       	mov	r25, r21
    2e68:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <uart_putdw_dec>
    2e6c:	8f e2       	ldi	r24, 0x2F	; 47
    2e6e:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
                                   uart_putdw_dec(fat_get_fs_size(fs)); uart_putc('\n');
    2e72:	c6 01       	movw	r24, r12
    2e74:	0e 94 af 14 	call	0x295e	; 0x295e <fat_get_fs_size>
    2e78:	62 2f       	mov	r22, r18
    2e7a:	73 2f       	mov	r23, r19
    2e7c:	84 2f       	mov	r24, r20
    2e7e:	95 2f       	mov	r25, r21
    2e80:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <uart_putdw_dec>
    2e84:	8a e0       	ldi	r24, 0x0A	; 10
    2e86:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
            uart_puts_p(PSTR("error creating file: "));
            uart_puts(file1);
            uart_putc('\n');
        }*/

		char file2[] = "file1.txt";
    2e8a:	8a e0       	ldi	r24, 0x0A	; 10
    2e8c:	ef e0       	ldi	r30, 0x0F	; 15
    2e8e:	f1 e0       	ldi	r31, 0x01	; 1
    2e90:	de 01       	movw	r26, r28
    2e92:	ad 59       	subi	r26, 0x9D	; 157
    2e94:	bf 4f       	sbci	r27, 0xFF	; 255
    2e96:	01 90       	ld	r0, Z+
    2e98:	0d 92       	st	X+, r0
    2e9a:	8a 95       	dec	r24
    2e9c:	e1 f7       	brne	.-8      	; 0x2e96 <main+0x230>
    2e9e:	16 c0       	rjmp	.+44     	; 0x2ecc <main+0x266>

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    while(fat_read_dir(dd, dir_entry))
    {
        if(strcmp(dir_entry->long_name, name) == 0)
    2ea0:	be 01       	movw	r22, r28
    2ea2:	6d 59       	subi	r22, 0x9D	; 157
    2ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	01 96       	adiw	r24, 0x01	; 1
    2eaa:	0e 94 b5 21 	call	0x436a	; 0x436a <strcmp>
    2eae:	89 2b       	or	r24, r25
    2eb0:	69 f4       	brne	.+26     	; 0x2ecc <main+0x266>
        {
            fat_reset_dir(dd);
    2eb2:	c7 01       	movw	r24, r14
    2eb4:	0e 94 c5 12 	call	0x258a	; 0x258a <fat_reset_dir>
{
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
        return 0;

    return fat_open_file(fs, &file_entry);
    2eb8:	be 01       	movw	r22, r28
    2eba:	6f 5f       	subi	r22, 0xFF	; 255
    2ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ebe:	c6 01       	movw	r24, r12
    2ec0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <fat_open_file>
    2ec4:	8c 01       	movw	r16, r24
            continue;
        }*/

        struct fat_file_struct* fd = open_file_in_dir(fs, dd, file2);

        if(fd == 0)
    2ec6:	89 2b       	or	r24, r25
    2ec8:	71 f4       	brne	.+28     	; 0x2ee6 <main+0x280>
    2eca:	09 c0       	rjmp	.+18     	; 0x2ede <main+0x278>
    return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    while(fat_read_dir(dd, dir_entry))
    2ecc:	be 01       	movw	r22, r28
    2ece:	6f 5f       	subi	r22, 0xFF	; 255
    2ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed2:	c7 01       	movw	r24, r14
    2ed4:	0e 94 d6 12 	call	0x25ac	; 0x25ac <fat_read_dir>
    2ed8:	81 11       	cpse	r24, r1
    2eda:	e2 cf       	rjmp	.-60     	; 0x2ea0 <main+0x23a>
    2edc:	6e c0       	rjmp	.+220    	; 0x2fba <main+0x354>
        }*/

        struct fat_file_struct* fd = open_file_in_dir(fs, dd, file2);

        if(fd == 0)
            uart_puts_p(PSTR("open error\n"));
    2ede:	89 e4       	ldi	r24, 0x49	; 73
    2ee0:	91 e0       	ldi	r25, 0x01	; 1
    2ee2:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>

        int32_t offset2 = 0;
    2ee6:	e1 96       	adiw	r28, 0x31	; 49
    2ee8:	1c ae       	std	Y+60, r1	; 0x3c
    2eea:	1d ae       	std	Y+61, r1	; 0x3d
    2eec:	1e ae       	std	Y+62, r1	; 0x3e
    2eee:	1f ae       	std	Y+63, r1	; 0x3f
    2ef0:	e1 97       	sbiw	r28, 0x31	; 49

        if(!fat_seek_file(fd, &offset2, FAT_SEEK_END))
    2ef2:	42 e0       	ldi	r20, 0x02	; 2
    2ef4:	be 01       	movw	r22, r28
    2ef6:	63 59       	subi	r22, 0x93	; 147
    2ef8:	7f 4f       	sbci	r23, 0xFF	; 255
    2efa:	c8 01       	movw	r24, r16
    2efc:	0e 94 0a 12 	call	0x2414	; 0x2414 <fat_seek_file>
    2f00:	81 11       	cpse	r24, r1
    2f02:	10 c0       	rjmp	.+32     	; 0x2f24 <main+0x2be>
        {
            uart_puts_p(PSTR("error seeking on "));
    2f04:	87 e3       	ldi	r24, 0x37	; 55
    2f06:	91 e0       	ldi	r25, 0x01	; 1
    2f08:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
            uart_puts(file2);
    2f0c:	ce 01       	movw	r24, r28
    2f0e:	8d 59       	subi	r24, 0x9D	; 157
    2f10:	9f 4f       	sbci	r25, 0xFF	; 255
    2f12:	0e 94 3b 20 	call	0x4076	; 0x4076 <uart_puts>
            uart_putc('\n');
    2f16:	8a e0       	ldi	r24, 0x0A	; 10
    2f18:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>

            fat_close_file(fd);
    2f1c:	c8 01       	movw	r24, r16
    2f1e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <fat_close_file>
    2f22:	ba ce       	rjmp	.-652    	; 0x2c98 <main+0x32>
            continue;
        }
        char testwrite[] = "Thisistext";
    2f24:	8b e0       	ldi	r24, 0x0B	; 11
    2f26:	e9 e1       	ldi	r30, 0x19	; 25
    2f28:	f1 e0       	ldi	r31, 0x01	; 1
    2f2a:	de 01       	movw	r26, r28
    2f2c:	11 96       	adiw	r26, 0x01	; 1
    2f2e:	01 90       	ld	r0, Z+
    2f30:	0d 92       	st	X+, r0
    2f32:	8a 95       	dec	r24
    2f34:	e1 f7       	brne	.-8      	; 0x2f2e <main+0x2c8>
        //uart_puts(testwrite); uart_putc('\n');
        uart_puts_p(PSTR("writing happens now\n"));
    2f36:	82 e2       	ldi	r24, 0x22	; 34
    2f38:	91 e0       	ldi	r25, 0x01	; 1
    2f3a:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
        if(fat_write_file(fd, (uint8_t*) testwrite, (uint8_t)sizeof(testwrite)) != (uint8_t)sizeof(testwrite))
    2f3e:	4b e0       	ldi	r20, 0x0B	; 11
    2f40:	50 e0       	ldi	r21, 0x00	; 0
    2f42:	be 01       	movw	r22, r28
    2f44:	6f 5f       	subi	r22, 0xFF	; 255
    2f46:	7f 4f       	sbci	r23, 0xFF	; 255
    2f48:	c8 01       	movw	r24, r16
    2f4a:	0e 94 76 0d 	call	0x1aec	; 0x1aec <fat_write_file>
    2f4e:	0b 97       	sbiw	r24, 0x0b	; 11
    2f50:	b9 f5       	brne	.+110    	; 0x2fc0 <main+0x35a>
            uart_puts_p(PSTR("error writing to file\n"));
            break;
        }


        fat_close_file(fd);
    2f52:	c8 01       	movw	r24, r16
    2f54:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <fat_close_file>

        if(!sd_raw_sync())
    2f58:	0e 94 fe 18 	call	0x31fc	; 0x31fc <sd_raw_sync>
    2f5c:	81 11       	cpse	r24, r1
    2f5e:	04 c0       	rjmp	.+8      	; 0x2f68 <main+0x302>
                    uart_puts_p(PSTR("error syncing disk\n"));
    2f60:	87 ef       	ldi	r24, 0xF7	; 247
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
		/* close directory */
		fat_close_dir(dd);
    2f68:	c7 01       	movw	r24, r14
    2f6a:	0e 94 bf 12 	call	0x257e	; 0x257e <fat_close_dir>

		/* close file system */
		fat_close(fs);
    2f6e:	c6 01       	movw	r24, r12
    2f70:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <fat_close>

		/* close partition */
		partition_close(partition);
    2f74:	c5 01       	movw	r24, r10
    2f76:	0e 94 a8 18 	call	0x3150	; 0x3150 <partition_close>
		uart_puts_p(PSTR("done\n"));
    2f7a:	81 ef       	ldi	r24, 0xF1	; 241
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
		while(1){
			continue;
		}
    2f82:	ff cf       	rjmp	.-2      	; 0x2f82 <main+0x31c>
        	uart_puts_p(PSTR("opening filesystem failed\n"));
        }

        /* open root directory */
        struct fat_dir_entry_struct directory;
        fat_get_dir_entry_of_path(fs, "/", &directory);
    2f84:	ae 01       	movw	r20, r28
    2f86:	4e 5c       	subi	r20, 0xCE	; 206
    2f88:	5f 4f       	sbci	r21, 0xFF	; 255
    2f8a:	6d e0       	ldi	r22, 0x0D	; 13
    2f8c:	71 e0       	ldi	r23, 0x01	; 1
    2f8e:	0e 94 05 14 	call	0x280a	; 0x280a <fat_get_dir_entry_of_path>

        struct fat_dir_struct* dd = fat_open_dir(fs, &directory);
    2f92:	be 01       	movw	r22, r28
    2f94:	6e 5c       	subi	r22, 0xCE	; 206
    2f96:	7f 4f       	sbci	r23, 0xFF	; 255
    2f98:	c6 01       	movw	r24, r12
    2f9a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <fat_open_dir>
    2f9e:	7c 01       	movw	r14, r24
        if(!dd)
    2fa0:	89 2b       	or	r24, r25
    2fa2:	09 f0       	breq	.+2      	; 0x2fa6 <main+0x340>
    2fa4:	c5 ce       	rjmp	.-630    	; 0x2d30 <main+0xca>
        {
        	uart_puts_p(PSTR("opening root directory failed\n"));
    2fa6:	85 e5       	ldi	r24, 0x55	; 85
    2fa8:	91 e0       	ldi	r25, 0x01	; 1
    2faa:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
    2fae:	c0 ce       	rjmp	.-640    	; 0x2d30 <main+0xca>
    2fb0:	85 e5       	ldi	r24, 0x55	; 85
    2fb2:	91 e0       	ldi	r25, 0x01	; 1
    2fb4:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>
    2fb8:	68 cf       	rjmp	.-304    	; 0x2e8a <main+0x224>

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
        return 0;
    2fba:	00 e0       	ldi	r16, 0x00	; 0
    2fbc:	10 e0       	ldi	r17, 0x00	; 0
    2fbe:	8f cf       	rjmp	.-226    	; 0x2ede <main+0x278>
        char testwrite[] = "Thisistext";
        //uart_puts(testwrite); uart_putc('\n');
        uart_puts_p(PSTR("writing happens now\n"));
        if(fat_write_file(fd, (uint8_t*) testwrite, (uint8_t)sizeof(testwrite)) != (uint8_t)sizeof(testwrite))
        {
            uart_puts_p(PSTR("error writing to file\n"));
    2fc0:	8b e0       	ldi	r24, 0x0B	; 11
    2fc2:	91 e0       	ldi	r25, 0x01	; 1
    2fc4:	0e 94 4a 20 	call	0x4094	; 0x4094 <uart_puts_p>


	}

	return 0;
}
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	c0 59       	subi	r28, 0x90	; 144
    2fce:	df 4f       	sbci	r29, 0xFF	; 255
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	f8 94       	cli
    2fd4:	de bf       	out	0x3e, r29	; 62
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	cd bf       	out	0x3d, r28	; 61
    2fda:	df 91       	pop	r29
    2fdc:	cf 91       	pop	r28
    2fde:	1f 91       	pop	r17
    2fe0:	0f 91       	pop	r16
    2fe2:	ff 90       	pop	r15
    2fe4:	ef 90       	pop	r14
    2fe6:	df 90       	pop	r13
    2fe8:	cf 90       	pop	r12
    2fea:	bf 90       	pop	r11
    2fec:	af 90       	pop	r10
    2fee:	08 95       	ret

00002ff0 <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    2ff0:	6f 92       	push	r6
    2ff2:	7f 92       	push	r7
    2ff4:	8f 92       	push	r8
    2ff6:	9f 92       	push	r9
    2ff8:	af 92       	push	r10
    2ffa:	bf 92       	push	r11
    2ffc:	cf 92       	push	r12
    2ffe:	df 92       	push	r13
    3000:	ef 92       	push	r14
    3002:	ff 92       	push	r15
    3004:	0f 93       	push	r16
    3006:	1f 93       	push	r17
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
    3010:	60 97       	sbiw	r28, 0x10	; 16
    3012:	0f b6       	in	r0, 0x3f	; 63
    3014:	f8 94       	cli
    3016:	de bf       	out	0x3e, r29	; 62
    3018:	0f be       	out	0x3f, r0	; 63
    301a:	cd bf       	out	0x3d, r28	; 61
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    301c:	00 97       	sbiw	r24, 0x00	; 0
    301e:	71 f1       	breq	.+92     	; 0x307c <partition_open+0x8c>
    3020:	61 15       	cp	r22, r1
    3022:	71 05       	cpc	r23, r1
    3024:	71 f1       	breq	.+92     	; 0x3082 <partition_open+0x92>
    3026:	04 30       	cpi	r16, 0x04	; 4
    3028:	7c f5       	brge	.+94     	; 0x3088 <partition_open+0x98>
        return 0;

    if(index >= 0)
    302a:	00 23       	and	r16, r16
    302c:	0c f4       	brge	.+2      	; 0x3030 <partition_open+0x40>
    302e:	75 c0       	rjmp	.+234    	; 0x311a <partition_open+0x12a>
    3030:	39 01       	movw	r6, r18
    3032:	4a 01       	movw	r8, r20
    3034:	5b 01       	movw	r10, r22
    3036:	6c 01       	movw	r12, r24
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    3038:	80 e1       	ldi	r24, 0x10	; 16
    303a:	08 02       	muls	r16, r24
    303c:	f0 01       	movw	r30, r0
    303e:	11 24       	eor	r1, r1
    3040:	e2 54       	subi	r30, 0x42	; 66
    3042:	fe 4f       	sbci	r31, 0xFE	; 254
    3044:	9f 2f       	mov	r25, r31
    3046:	99 0f       	add	r25, r25
    3048:	99 0b       	sbc	r25, r25
    304a:	68 94       	set
    304c:	ee 24       	eor	r14, r14
    304e:	e4 f8       	bld	r14, 4
    3050:	f1 2c       	mov	r15, r1
    3052:	8e 01       	movw	r16, r28
    3054:	0f 5f       	subi	r16, 0xFF	; 255
    3056:	1f 4f       	sbci	r17, 0xFF	; 255
    3058:	2e 2f       	mov	r18, r30
    305a:	3f 2f       	mov	r19, r31
    305c:	49 2f       	mov	r20, r25
    305e:	59 2f       	mov	r21, r25
    3060:	69 2f       	mov	r22, r25
    3062:	79 2f       	mov	r23, r25
    3064:	89 2f       	mov	r24, r25
    3066:	f6 01       	movw	r30, r12
    3068:	09 95       	icall
    306a:	88 23       	and	r24, r24
    306c:	81 f0       	breq	.+32     	; 0x308e <partition_open+0x9e>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    306e:	8d 81       	ldd	r24, Y+5	; 0x05
    3070:	81 11       	cpse	r24, r1
    3072:	3a c0       	rjmp	.+116    	; 0x30e8 <partition_open+0xf8>
    3074:	0f c0       	rjmp	.+30     	; 0x3094 <partition_open+0xa4>
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    3076:	87 e0       	ldi	r24, 0x07	; 7
    3078:	92 e0       	ldi	r25, 0x02	; 2
    else
    {
        new_partition->type = 0xff;
    }

    return new_partition;
    307a:	55 c0       	rjmp	.+170    	; 0x3126 <partition_open+0x136>
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
        return 0;
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	52 c0       	rjmp	.+164    	; 0x3126 <partition_open+0x136>
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	4f c0       	rjmp	.+158    	; 0x3126 <partition_open+0x136>
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	4c c0       	rjmp	.+152    	; 0x3126 <partition_open+0x136>

    if(index >= 0)
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
            return 0;
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	49 c0       	rjmp	.+146    	; 0x3126 <partition_open+0x136>

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
            return 0;
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	46 c0       	rjmp	.+140    	; 0x3126 <partition_open+0x136>
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    309a:	07 e0       	ldi	r16, 0x07	; 7
    309c:	12 e0       	ldi	r17, 0x02	; 2
    309e:	81 e1       	ldi	r24, 0x11	; 17
    30a0:	d8 01       	movw	r26, r16
    30a2:	1d 92       	st	X+, r1
    30a4:	8a 95       	dec	r24
    30a6:	e9 f7       	brne	.-6      	; 0x30a2 <partition_open+0xb2>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    30a8:	f8 01       	movw	r30, r16
    30aa:	d1 82       	std	Z+1, r13	; 0x01
    30ac:	c0 82       	st	Z, r12
    new_partition->device_read_interval = device_read_interval;
    30ae:	b3 82       	std	Z+3, r11	; 0x03
    30b0:	a2 82       	std	Z+2, r10	; 0x02
    new_partition->device_write = device_write;
    30b2:	95 82       	std	Z+5, r9	; 0x05
    30b4:	84 82       	std	Z+4, r8	; 0x04
    new_partition->device_write_interval = device_write_interval;
    30b6:	77 82       	std	Z+7, r7	; 0x07
    30b8:	66 82       	std	Z+6, r6	; 0x06

    if(index >= 0)
    {
        new_partition->type = buffer[4];
    30ba:	8d 81       	ldd	r24, Y+5	; 0x05
    30bc:	80 87       	std	Z+8, r24	; 0x08
        new_partition->offset = read32(&buffer[8]);
    30be:	ce 01       	movw	r24, r28
    30c0:	09 96       	adiw	r24, 0x09	; 9
    30c2:	0e 94 15 01 	call	0x22a	; 0x22a <read32>
    30c6:	d8 01       	movw	r26, r16
    30c8:	19 96       	adiw	r26, 0x09	; 9
    30ca:	6d 93       	st	X+, r22
    30cc:	7d 93       	st	X+, r23
    30ce:	8d 93       	st	X+, r24
    30d0:	9c 93       	st	X, r25
    30d2:	1c 97       	sbiw	r26, 0x0c	; 12
        new_partition->length = read32(&buffer[12]);
    30d4:	ce 01       	movw	r24, r28
    30d6:	0d 96       	adiw	r24, 0x0d	; 13
    30d8:	0e 94 15 01 	call	0x22a	; 0x22a <read32>
    30dc:	f8 01       	movw	r30, r16
    30de:	65 87       	std	Z+13, r22	; 0x0d
    30e0:	76 87       	std	Z+14, r23	; 0x0e
    30e2:	87 87       	std	Z+15, r24	; 0x0f
    30e4:	90 8b       	std	Z+16, r25	; 0x10
    30e6:	c7 cf       	rjmp	.-114    	; 0x3076 <partition_open+0x86>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    30e8:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <partition_handles+0x8>
    30ec:	88 23       	and	r24, r24
    30ee:	a9 f2       	breq	.-86     	; 0x309a <partition_open+0xaa>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    30f0:	80 e0       	ldi	r24, 0x00	; 0
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	18 c0       	rjmp	.+48     	; 0x3126 <partition_open+0x136>
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    30f6:	e7 e0       	ldi	r30, 0x07	; 7
    30f8:	f2 e0       	ldi	r31, 0x02	; 2
    30fa:	11 e1       	ldi	r17, 0x11	; 17
    30fc:	df 01       	movw	r26, r30
    30fe:	1d 92       	st	X+, r1
    3100:	1a 95       	dec	r17
    3102:	e9 f7       	brne	.-6      	; 0x30fe <partition_open+0x10e>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    3104:	91 83       	std	Z+1, r25	; 0x01
    3106:	80 83       	st	Z, r24
    new_partition->device_read_interval = device_read_interval;
    3108:	73 83       	std	Z+3, r23	; 0x03
    310a:	62 83       	std	Z+2, r22	; 0x02
    new_partition->device_write = device_write;
    310c:	55 83       	std	Z+5, r21	; 0x05
    310e:	44 83       	std	Z+4, r20	; 0x04
    new_partition->device_write_interval = device_write_interval;
    3110:	37 83       	std	Z+7, r19	; 0x07
    3112:	26 83       	std	Z+6, r18	; 0x06
        new_partition->offset = read32(&buffer[8]);
        new_partition->length = read32(&buffer[12]);
    }
    else
    {
        new_partition->type = 0xff;
    3114:	8f ef       	ldi	r24, 0xFF	; 255
    3116:	80 87       	std	Z+8, r24	; 0x08
    3118:	ae cf       	rjmp	.-164    	; 0x3076 <partition_open+0x86>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    311a:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <partition_handles+0x8>
    311e:	ee 23       	and	r30, r30
    3120:	51 f3       	breq	.-44     	; 0x30f6 <partition_open+0x106>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	90 e0       	ldi	r25, 0x00	; 0
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
    3126:	60 96       	adiw	r28, 0x10	; 16
    3128:	0f b6       	in	r0, 0x3f	; 63
    312a:	f8 94       	cli
    312c:	de bf       	out	0x3e, r29	; 62
    312e:	0f be       	out	0x3f, r0	; 63
    3130:	cd bf       	out	0x3d, r28	; 61
    3132:	df 91       	pop	r29
    3134:	cf 91       	pop	r28
    3136:	1f 91       	pop	r17
    3138:	0f 91       	pop	r16
    313a:	ff 90       	pop	r15
    313c:	ef 90       	pop	r14
    313e:	df 90       	pop	r13
    3140:	cf 90       	pop	r12
    3142:	bf 90       	pop	r11
    3144:	af 90       	pop	r10
    3146:	9f 90       	pop	r9
    3148:	8f 90       	pop	r8
    314a:	7f 90       	pop	r7
    314c:	6f 90       	pop	r6
    314e:	08 95       	ret

00003150 <partition_close>:
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
    3150:	00 97       	sbiw	r24, 0x00	; 0
    3152:	21 f0       	breq	.+8      	; 0x315c <partition_close+0xc>

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
    3154:	fc 01       	movw	r30, r24
    3156:	10 86       	std	Z+8, r1	; 0x08
#endif

    return 1;
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	08 95       	ret
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
        return 0;
    315c:	80 e0       	ldi	r24, 0x00	; 0
#else
    partition->type = PARTITION_TYPE_FREE;
#endif

    return 1;
}
    315e:	08 95       	ret

00003160 <sd_raw_send_byte>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
    3160:	8e bd       	out	0x2e, r24	; 46
    3162:	0d b4       	in	r0, 0x2d	; 45
    3164:	07 fe       	sbrs	r0, 7
    3166:	fd cf       	rjmp	.-6      	; 0x3162 <sd_raw_send_byte+0x2>
    3168:	8d b5       	in	r24, 0x2d	; 45
    316a:	8f 77       	andi	r24, 0x7F	; 127
    316c:	8d bd       	out	0x2d, r24	; 45
    316e:	08 95       	ret

00003170 <sd_raw_rec_byte>:
    3170:	8f ef       	ldi	r24, 0xFF	; 255
    3172:	8e bd       	out	0x2e, r24	; 46
    3174:	0d b4       	in	r0, 0x2d	; 45
    3176:	07 fe       	sbrs	r0, 7
    3178:	fd cf       	rjmp	.-6      	; 0x3174 <sd_raw_rec_byte+0x4>
    317a:	8d b5       	in	r24, 0x2d	; 45
    317c:	8f 77       	andi	r24, 0x7F	; 127
    317e:	8d bd       	out	0x2d, r24	; 45
    3180:	8e b5       	in	r24, 0x2e	; 46
    3182:	08 95       	ret

00003184 <sd_raw_send_command>:
    3184:	ff 92       	push	r15
    3186:	0f 93       	push	r16
    3188:	1f 93       	push	r17
    318a:	cf 93       	push	r28
    318c:	df 93       	push	r29
    318e:	c8 2f       	mov	r28, r24
    3190:	d4 2f       	mov	r29, r20
    3192:	15 2f       	mov	r17, r21
    3194:	06 2f       	mov	r16, r22
    3196:	f7 2e       	mov	r15, r23
    3198:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
    319c:	8c 2f       	mov	r24, r28
    319e:	80 64       	ori	r24, 0x40	; 64
    31a0:	0e 94 b0 18 	call	0x3160	; 0x3160 <sd_raw_send_byte>
    31a4:	8f 2d       	mov	r24, r15
    31a6:	0e 94 b0 18 	call	0x3160	; 0x3160 <sd_raw_send_byte>
    31aa:	80 2f       	mov	r24, r16
    31ac:	0e 94 b0 18 	call	0x3160	; 0x3160 <sd_raw_send_byte>
    31b0:	81 2f       	mov	r24, r17
    31b2:	0e 94 b0 18 	call	0x3160	; 0x3160 <sd_raw_send_byte>
    31b6:	8d 2f       	mov	r24, r29
    31b8:	0e 94 b0 18 	call	0x3160	; 0x3160 <sd_raw_send_byte>
    31bc:	cc 23       	and	r28, r28
    31be:	19 f0       	breq	.+6      	; 0x31c6 <sd_raw_send_command+0x42>
    31c0:	c8 30       	cpi	r28, 0x08	; 8
    31c2:	29 f0       	breq	.+10     	; 0x31ce <sd_raw_send_command+0x4a>
    31c4:	08 c0       	rjmp	.+16     	; 0x31d6 <sd_raw_send_command+0x52>
    31c6:	85 e9       	ldi	r24, 0x95	; 149
    31c8:	0e 94 b0 18 	call	0x3160	; 0x3160 <sd_raw_send_byte>
    31cc:	0f c0       	rjmp	.+30     	; 0x31ec <sd_raw_send_command+0x68>
    31ce:	87 e8       	ldi	r24, 0x87	; 135
    31d0:	0e 94 b0 18 	call	0x3160	; 0x3160 <sd_raw_send_byte>
    31d4:	0b c0       	rjmp	.+22     	; 0x31ec <sd_raw_send_command+0x68>
    31d6:	8f ef       	ldi	r24, 0xFF	; 255
    31d8:	0e 94 b0 18 	call	0x3160	; 0x3160 <sd_raw_send_byte>
    31dc:	07 c0       	rjmp	.+14     	; 0x31ec <sd_raw_send_command+0x68>
    31de:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
    31e2:	8f 3f       	cpi	r24, 0xFF	; 255
    31e4:	29 f4       	brne	.+10     	; 0x31f0 <sd_raw_send_command+0x6c>
    31e6:	c1 50       	subi	r28, 0x01	; 1
    31e8:	d1 f7       	brne	.-12     	; 0x31de <sd_raw_send_command+0x5a>
    31ea:	02 c0       	rjmp	.+4      	; 0x31f0 <sd_raw_send_command+0x6c>
    31ec:	ca e0       	ldi	r28, 0x0A	; 10
    31ee:	f7 cf       	rjmp	.-18     	; 0x31de <sd_raw_send_command+0x5a>
    31f0:	df 91       	pop	r29
    31f2:	cf 91       	pop	r28
    31f4:	1f 91       	pop	r17
    31f6:	0f 91       	pop	r16
    31f8:	ff 90       	pop	r15
    31fa:	08 95       	ret

000031fc <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
    31fc:	ef 92       	push	r14
    31fe:	ff 92       	push	r15
    3200:	0f 93       	push	r16
    3202:	1f 93       	push	r17
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    3204:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <raw_block_written>
    3208:	81 11       	cpse	r24, r1
    320a:	1e c0       	rjmp	.+60     	; 0x3248 <sd_raw_sync+0x4c>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    320c:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <raw_block_address>
    3210:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <raw_block_address+0x1>
    3214:	40 91 1c 02 	lds	r20, 0x021C	; 0x80021c <raw_block_address+0x2>
    3218:	50 91 1d 02 	lds	r21, 0x021D	; 0x80021d <raw_block_address+0x3>
    321c:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <raw_block_address+0x4>
    3220:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <raw_block_address+0x5>
    3224:	e1 2c       	mov	r14, r1
    3226:	68 94       	set
    3228:	ff 24       	eor	r15, r15
    322a:	f1 f8       	bld	r15, 1
    322c:	02 e2       	ldi	r16, 0x22	; 34
    322e:	12 e0       	ldi	r17, 0x02	; 2
    3230:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <raw_block_address+0x6>
    3234:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <raw_block_address+0x7>
    3238:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <sd_raw_write>
    323c:	88 23       	and	r24, r24
    323e:	29 f0       	breq	.+10     	; 0x324a <sd_raw_sync+0x4e>
        return 0;
    raw_block_written = 1;
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <raw_block_written>
#endif
    return 1;
    3246:	01 c0       	rjmp	.+2      	; 0x324a <sd_raw_sync+0x4e>
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
        return 1;
    3248:	81 e0       	ldi	r24, 0x01	; 1
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
        return 0;
    raw_block_written = 1;
#endif
    return 1;
}
    324a:	1f 91       	pop	r17
    324c:	0f 91       	pop	r16
    324e:	ff 90       	pop	r15
    3250:	ef 90       	pop	r14
    3252:	08 95       	ret

00003254 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    3254:	2f 92       	push	r2
    3256:	3f 92       	push	r3
    3258:	4f 92       	push	r4
    325a:	5f 92       	push	r5
    325c:	6f 92       	push	r6
    325e:	7f 92       	push	r7
    3260:	8f 92       	push	r8
    3262:	9f 92       	push	r9
    3264:	af 92       	push	r10
    3266:	bf 92       	push	r11
    3268:	cf 92       	push	r12
    326a:	df 92       	push	r13
    326c:	ef 92       	push	r14
    326e:	ff 92       	push	r15
    3270:	0f 93       	push	r16
    3272:	1f 93       	push	r17
    3274:	cf 93       	push	r28
    3276:	df 93       	push	r29
    3278:	cd b7       	in	r28, 0x3d	; 61
    327a:	de b7       	in	r29, 0x3e	; 62
    327c:	6a 97       	sbiw	r28, 0x1a	; 26
    327e:	0f b6       	in	r0, 0x3f	; 63
    3280:	f8 94       	cli
    3282:	de bf       	out	0x3e, r29	; 62
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	cd bf       	out	0x3d, r28	; 61
    3288:	29 83       	std	Y+1, r18	; 0x01
    328a:	3a 83       	std	Y+2, r19	; 0x02
    328c:	4b 83       	std	Y+3, r20	; 0x03
    328e:	5c 83       	std	Y+4, r21	; 0x04
    3290:	6d 83       	std	Y+5, r22	; 0x05
    3292:	7e 83       	std	Y+6, r23	; 0x06
    3294:	8f 83       	std	Y+7, r24	; 0x07
    3296:	98 87       	std	Y+8, r25	; 0x08
    3298:	1c 8b       	std	Y+20, r17	; 0x14
    329a:	0b 8b       	std	Y+19, r16	; 0x13
    329c:	27 01       	movw	r4, r14
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    329e:	ef 28       	or	r14, r15
    32a0:	09 f4       	brne	.+2      	; 0x32a4 <sd_raw_read+0x50>
    32a2:	f8 c0       	rjmp	.+496    	; 0x3494 <sd_raw_read+0x240>
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
        read_length = 512 - block_offset; /* read up to block border */
    32a4:	61 2c       	mov	r6, r1
    32a6:	68 94       	set
    32a8:	77 24       	eor	r7, r7
    32aa:	71 f8       	bld	r7, 1
    32ac:	0f 2e       	mov	r0, r31
    32ae:	f2 e2       	ldi	r31, 0x22	; 34
    32b0:	2f 2e       	mov	r2, r31
    32b2:	f4 e0       	ldi	r31, 0x04	; 4
    32b4:	3f 2e       	mov	r3, r31
    32b6:	f0 2d       	mov	r31, r0
    32b8:	7a 8e       	std	Y+26, r7	; 0x1a
    32ba:	69 8e       	std	Y+25, r6	; 0x19
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    32bc:	89 80       	ldd	r8, Y+1	; 0x01
    32be:	9a 80       	ldd	r9, Y+2	; 0x02
    32c0:	21 e0       	ldi	r18, 0x01	; 1
    32c2:	92 22       	and	r9, r18
        block_address = offset - block_offset;
    32c4:	94 01       	movw	r18, r8
    32c6:	40 e0       	ldi	r20, 0x00	; 0
    32c8:	50 e0       	ldi	r21, 0x00	; 0
    32ca:	60 e0       	ldi	r22, 0x00	; 0
    32cc:	70 e0       	ldi	r23, 0x00	; 0
    32ce:	cb 01       	movw	r24, r22
    32d0:	89 86       	std	Y+9, r8	; 0x09
    32d2:	3a 87       	std	Y+10, r19	; 0x0a
    32d4:	4b 87       	std	Y+11, r20	; 0x0b
    32d6:	5c 87       	std	Y+12, r21	; 0x0c
    32d8:	6d 87       	std	Y+13, r22	; 0x0d
    32da:	7e 87       	std	Y+14, r23	; 0x0e
    32dc:	8f 87       	std	Y+15, r24	; 0x0f
    32de:	98 8b       	std	Y+16, r25	; 0x10
    32e0:	29 81       	ldd	r18, Y+1	; 0x01
    32e2:	3a 81       	ldd	r19, Y+2	; 0x02
    32e4:	4b 81       	ldd	r20, Y+3	; 0x03
    32e6:	5c 81       	ldd	r21, Y+4	; 0x04
    32e8:	6d 81       	ldd	r22, Y+5	; 0x05
    32ea:	7e 81       	ldd	r23, Y+6	; 0x06
    32ec:	8f 81       	ldd	r24, Y+7	; 0x07
    32ee:	98 85       	ldd	r25, Y+8	; 0x08
    32f0:	a9 84       	ldd	r10, Y+9	; 0x09
    32f2:	ba 84       	ldd	r11, Y+10	; 0x0a
    32f4:	c1 2c       	mov	r12, r1
    32f6:	d1 2c       	mov	r13, r1
    32f8:	e1 2c       	mov	r14, r1
    32fa:	f1 2c       	mov	r15, r1
    32fc:	00 e0       	ldi	r16, 0x00	; 0
    32fe:	10 e0       	ldi	r17, 0x00	; 0
    3300:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <__subdi3>
    3304:	29 8b       	std	Y+17, r18	; 0x11
    3306:	3a 8b       	std	Y+18, r19	; 0x12
    3308:	64 2e       	mov	r6, r20
    330a:	75 2e       	mov	r7, r21
    330c:	6d 8b       	std	Y+21, r22	; 0x15
    330e:	7e 8b       	std	Y+22, r23	; 0x16
    3310:	8f 8b       	std	Y+23, r24	; 0x17
    3312:	98 8f       	std	Y+24, r25	; 0x18
    3314:	49 8d       	ldd	r20, Y+25	; 0x19
    3316:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3318:	48 19       	sub	r20, r8
    331a:	59 09       	sbc	r21, r9
    331c:	5a 87       	std	Y+10, r21	; 0x0a
    331e:	49 87       	std	Y+9, r20	; 0x09
    3320:	44 16       	cp	r4, r20
    3322:	55 06       	cpc	r5, r21
    3324:	10 f4       	brcc	.+4      	; 0x332a <sd_raw_read+0xd6>
    3326:	5a 86       	std	Y+10, r5	; 0x0a
    3328:	49 86       	std	Y+9, r4	; 0x09
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    332a:	a0 90 1a 02 	lds	r10, 0x021A	; 0x80021a <raw_block_address>
    332e:	b0 90 1b 02 	lds	r11, 0x021B	; 0x80021b <raw_block_address+0x1>
    3332:	c0 90 1c 02 	lds	r12, 0x021C	; 0x80021c <raw_block_address+0x2>
    3336:	d0 90 1d 02 	lds	r13, 0x021D	; 0x80021d <raw_block_address+0x3>
    333a:	e0 90 1e 02 	lds	r14, 0x021E	; 0x80021e <raw_block_address+0x4>
    333e:	f0 90 1f 02 	lds	r15, 0x021F	; 0x80021f <raw_block_address+0x5>
    3342:	00 91 20 02 	lds	r16, 0x0220	; 0x800220 <raw_block_address+0x6>
    3346:	10 91 21 02 	lds	r17, 0x0221	; 0x800221 <raw_block_address+0x7>
    334a:	29 89       	ldd	r18, Y+17	; 0x11
    334c:	3a 89       	ldd	r19, Y+18	; 0x12
    334e:	46 2d       	mov	r20, r6
    3350:	57 2d       	mov	r21, r7
    3352:	6d 89       	ldd	r22, Y+21	; 0x15
    3354:	7e 89       	ldd	r23, Y+22	; 0x16
    3356:	8f 89       	ldd	r24, Y+23	; 0x17
    3358:	98 8d       	ldd	r25, Y+24	; 0x18
    335a:	0e 94 85 21 	call	0x430a	; 0x430a <__cmpdi2>
    335e:	09 f4       	brne	.+2      	; 0x3362 <sd_raw_read+0x10e>
    3360:	63 c0       	rjmp	.+198    	; 0x3428 <sd_raw_read+0x1d4>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    3362:	0e 94 fe 18 	call	0x31fc	; 0x31fc <sd_raw_sync>
    3366:	88 23       	and	r24, r24
    3368:	09 f4       	brne	.+2      	; 0x336c <sd_raw_read+0x118>
    336a:	95 c0       	rjmp	.+298    	; 0x3496 <sd_raw_read+0x242>
                return 0;
#endif

            /* address card */
            select_card();
    336c:	2a 98       	cbi	0x05, 2	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    336e:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <sd_raw_card_type>
    3372:	82 ff       	sbrs	r24, 2
    3374:	10 c0       	rjmp	.+32     	; 0x3396 <sd_raw_read+0x142>
    3376:	29 89       	ldd	r18, Y+17	; 0x11
    3378:	3a 89       	ldd	r19, Y+18	; 0x12
    337a:	46 2d       	mov	r20, r6
    337c:	57 2d       	mov	r21, r7
    337e:	6d 89       	ldd	r22, Y+21	; 0x15
    3380:	7e 89       	ldd	r23, Y+22	; 0x16
    3382:	8f 89       	ldd	r24, Y+23	; 0x17
    3384:	98 8d       	ldd	r25, Y+24	; 0x18
    3386:	09 e0       	ldi	r16, 0x09	; 9
    3388:	0e 94 4b 21 	call	0x4296	; 0x4296 <__lshrdi3>
    338c:	64 2f       	mov	r22, r20
    338e:	75 2f       	mov	r23, r21
    3390:	42 2f       	mov	r20, r18
    3392:	53 2f       	mov	r21, r19
    3394:	04 c0       	rjmp	.+8      	; 0x339e <sd_raw_read+0x14a>
    3396:	49 89       	ldd	r20, Y+17	; 0x11
    3398:	5a 89       	ldd	r21, Y+18	; 0x12
    339a:	66 2d       	mov	r22, r6
    339c:	77 2d       	mov	r23, r7
    339e:	81 e1       	ldi	r24, 0x11	; 17
    33a0:	0e 94 c2 18 	call	0x3184	; 0x3184 <sd_raw_send_command>
    33a4:	88 23       	and	r24, r24
    33a6:	19 f0       	breq	.+6      	; 0x33ae <sd_raw_read+0x15a>
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
#endif
            {
                unselect_card();
    33a8:	2a 9a       	sbi	0x05, 2	; 5
                return 0;
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	74 c0       	rjmp	.+232    	; 0x3496 <sd_raw_read+0x242>
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    33ae:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
    33b2:	8e 3f       	cpi	r24, 0xFE	; 254
    33b4:	e1 f7       	brne	.-8      	; 0x33ae <sd_raw_read+0x15a>
    33b6:	02 e2       	ldi	r16, 0x22	; 34
    33b8:	12 e0       	ldi	r17, 0x02	; 2
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    33ba:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
    33be:	f8 01       	movw	r30, r16
    33c0:	81 93       	st	Z+, r24
    33c2:	8f 01       	movw	r16, r30
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    33c4:	e2 15       	cp	r30, r2
    33c6:	f3 05       	cpc	r31, r3
    33c8:	c1 f7       	brne	.-16     	; 0x33ba <sd_raw_read+0x166>
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;
    33ca:	f9 89       	ldd	r31, Y+17	; 0x11
    33cc:	f0 93 1a 02 	sts	0x021A, r31	; 0x80021a <raw_block_address>
    33d0:	2a 89       	ldd	r18, Y+18	; 0x12
    33d2:	20 93 1b 02 	sts	0x021B, r18	; 0x80021b <raw_block_address+0x1>
    33d6:	60 92 1c 02 	sts	0x021C, r6	; 0x80021c <raw_block_address+0x2>
    33da:	70 92 1d 02 	sts	0x021D, r7	; 0x80021d <raw_block_address+0x3>
    33de:	3d 89       	ldd	r19, Y+21	; 0x15
    33e0:	30 93 1e 02 	sts	0x021E, r19	; 0x80021e <raw_block_address+0x4>
    33e4:	4e 89       	ldd	r20, Y+22	; 0x16
    33e6:	40 93 1f 02 	sts	0x021F, r20	; 0x80021f <raw_block_address+0x5>
    33ea:	5f 89       	ldd	r21, Y+23	; 0x17
    33ec:	50 93 20 02 	sts	0x0220, r21	; 0x800220 <raw_block_address+0x6>
    33f0:	68 8d       	ldd	r22, Y+24	; 0x18
    33f2:	60 93 21 02 	sts	0x0221, r22	; 0x800221 <raw_block_address+0x7>

            memcpy(buffer, raw_block + block_offset, read_length);
    33f6:	b4 01       	movw	r22, r8
    33f8:	6e 5d       	subi	r22, 0xDE	; 222
    33fa:	7d 4f       	sbci	r23, 0xFD	; 253
    33fc:	49 85       	ldd	r20, Y+9	; 0x09
    33fe:	5a 85       	ldd	r21, Y+10	; 0x0a
    3400:	8b 89       	ldd	r24, Y+19	; 0x13
    3402:	9c 89       	ldd	r25, Y+20	; 0x14
    3404:	0e 94 9a 21 	call	0x4334	; 0x4334 <memcpy>
            buffer += read_length;
    3408:	8b 89       	ldd	r24, Y+19	; 0x13
    340a:	9c 89       	ldd	r25, Y+20	; 0x14
    340c:	e9 85       	ldd	r30, Y+9	; 0x09
    340e:	fa 85       	ldd	r31, Y+10	; 0x0a
    3410:	8e 0f       	add	r24, r30
    3412:	9f 1f       	adc	r25, r31
    3414:	9c 8b       	std	Y+20, r25	; 0x14
    3416:	8b 8b       	std	Y+19, r24	; 0x13
#endif
            
            /* read crc16 */
            sd_raw_rec_byte();
    3418:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
            sd_raw_rec_byte();
    341c:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
            
            /* deaddress card */
            unselect_card();
    3420:	2a 9a       	sbi	0x05, 2	; 5

            /* let card some time to finish */
            sd_raw_rec_byte();
    3422:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
    3426:	11 c0       	rjmp	.+34     	; 0x344a <sd_raw_read+0x1f6>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    3428:	b4 01       	movw	r22, r8
    342a:	6e 5d       	subi	r22, 0xDE	; 222
    342c:	7d 4f       	sbci	r23, 0xFD	; 253
    342e:	49 85       	ldd	r20, Y+9	; 0x09
    3430:	5a 85       	ldd	r21, Y+10	; 0x0a
    3432:	8b 89       	ldd	r24, Y+19	; 0x13
    3434:	9c 89       	ldd	r25, Y+20	; 0x14
    3436:	0e 94 9a 21 	call	0x4334	; 0x4334 <memcpy>
            buffer += read_length;
    343a:	2b 89       	ldd	r18, Y+19	; 0x13
    343c:	3c 89       	ldd	r19, Y+20	; 0x14
    343e:	49 85       	ldd	r20, Y+9	; 0x09
    3440:	5a 85       	ldd	r21, Y+10	; 0x0a
    3442:	24 0f       	add	r18, r20
    3444:	35 1f       	adc	r19, r21
    3446:	3c 8b       	std	Y+20, r19	; 0x14
    3448:	2b 8b       	std	Y+19, r18	; 0x13
        }
#endif

        length -= read_length;
    344a:	69 85       	ldd	r22, Y+9	; 0x09
    344c:	7a 85       	ldd	r23, Y+10	; 0x0a
    344e:	46 1a       	sub	r4, r22
    3450:	57 0a       	sbc	r5, r23
        offset += read_length;
    3452:	4b 01       	movw	r8, r22
    3454:	26 2f       	mov	r18, r22
    3456:	39 2d       	mov	r19, r9
    3458:	40 e0       	ldi	r20, 0x00	; 0
    345a:	50 e0       	ldi	r21, 0x00	; 0
    345c:	60 e0       	ldi	r22, 0x00	; 0
    345e:	70 e0       	ldi	r23, 0x00	; 0
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	a9 80       	ldd	r10, Y+1	; 0x01
    3466:	ba 80       	ldd	r11, Y+2	; 0x02
    3468:	cb 80       	ldd	r12, Y+3	; 0x03
    346a:	dc 80       	ldd	r13, Y+4	; 0x04
    346c:	ed 80       	ldd	r14, Y+5	; 0x05
    346e:	fe 80       	ldd	r15, Y+6	; 0x06
    3470:	0f 81       	ldd	r16, Y+7	; 0x07
    3472:	18 85       	ldd	r17, Y+8	; 0x08
    3474:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
    3478:	29 83       	std	Y+1, r18	; 0x01
    347a:	3a 83       	std	Y+2, r19	; 0x02
    347c:	4b 83       	std	Y+3, r20	; 0x03
    347e:	5c 83       	std	Y+4, r21	; 0x04
    3480:	6d 83       	std	Y+5, r22	; 0x05
    3482:	7e 83       	std	Y+6, r23	; 0x06
    3484:	8f 83       	std	Y+7, r24	; 0x07
    3486:	98 87       	std	Y+8, r25	; 0x08
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    3488:	41 14       	cp	r4, r1
    348a:	51 04       	cpc	r5, r1
    348c:	09 f0       	breq	.+2      	; 0x3490 <sd_raw_read+0x23c>
    348e:	16 cf       	rjmp	.-468    	; 0x32bc <sd_raw_read+0x68>

        length -= read_length;
        offset += read_length;
    }

    return 1;
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	01 c0       	rjmp	.+2      	; 0x3496 <sd_raw_read+0x242>
    3494:	81 e0       	ldi	r24, 0x01	; 1
}
    3496:	6a 96       	adiw	r28, 0x1a	; 26
    3498:	0f b6       	in	r0, 0x3f	; 63
    349a:	f8 94       	cli
    349c:	de bf       	out	0x3e, r29	; 62
    349e:	0f be       	out	0x3f, r0	; 63
    34a0:	cd bf       	out	0x3d, r28	; 61
    34a2:	df 91       	pop	r29
    34a4:	cf 91       	pop	r28
    34a6:	1f 91       	pop	r17
    34a8:	0f 91       	pop	r16
    34aa:	ff 90       	pop	r15
    34ac:	ef 90       	pop	r14
    34ae:	df 90       	pop	r13
    34b0:	cf 90       	pop	r12
    34b2:	bf 90       	pop	r11
    34b4:	af 90       	pop	r10
    34b6:	9f 90       	pop	r9
    34b8:	8f 90       	pop	r8
    34ba:	7f 90       	pop	r7
    34bc:	6f 90       	pop	r6
    34be:	5f 90       	pop	r5
    34c0:	4f 90       	pop	r4
    34c2:	3f 90       	pop	r3
    34c4:	2f 90       	pop	r2
    34c6:	08 95       	ret

000034c8 <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    34c8:	9f 92       	push	r9
    34ca:	af 92       	push	r10
    34cc:	bf 92       	push	r11
    34ce:	cf 92       	push	r12
    34d0:	df 92       	push	r13
    34d2:	ef 92       	push	r14
    34d4:	ff 92       	push	r15
    34d6:	0f 93       	push	r16
    34d8:	1f 93       	push	r17
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    34de:	23 9a       	sbi	0x04, 3	; 4
    configure_pin_sck();
    34e0:	25 9a       	sbi	0x04, 5	; 4
    configure_pin_ss();
    34e2:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_miso();
    34e4:	24 98       	cbi	0x04, 4	; 4

    unselect_card();
    34e6:	2a 9a       	sbi	0x05, 2	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    34e8:	83 e5       	ldi	r24, 0x53	; 83
    34ea:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    34ec:	8d b5       	in	r24, 0x2d	; 45
    34ee:	8e 7f       	andi	r24, 0xFE	; 254
    34f0:	8d bd       	out	0x2d, r24	; 45
	
    /* initialization procedure */
    sd_raw_card_type = 0;
    34f2:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <sd_raw_card_type>
    34f6:	1a e0       	ldi	r17, 0x0A	; 10

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    {
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    34f8:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
    34fc:	11 50       	subi	r17, 0x01	; 1
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    34fe:	e1 f7       	brne	.-8      	; 0x34f8 <sd_raw_init+0x30>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    3500:	2a 98       	cbi	0x05, 2	; 5
    3502:	c0 e0       	ldi	r28, 0x00	; 0
    3504:	d2 e0       	ldi	r29, 0x02	; 2

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    3506:	40 e0       	ldi	r20, 0x00	; 0
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	ba 01       	movw	r22, r20
    350c:	80 e0       	ldi	r24, 0x00	; 0
    350e:	0e 94 c2 18 	call	0x3184	; 0x3184 <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
    3512:	81 30       	cpi	r24, 0x01	; 1
    3514:	29 f0       	breq	.+10     	; 0x3520 <sd_raw_init+0x58>
    3516:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x1ff)
    3518:	b1 f7       	brne	.-20     	; 0x3506 <sd_raw_init+0x3e>
        {
            unselect_card();
    351a:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    351c:	01 2f       	mov	r16, r17
    351e:	c0 c0       	rjmp	.+384    	; 0x36a0 <sd_raw_init+0x1d8>
        }
    }

#if SD_RAW_SDHC
    /* check for version of SD card specification */
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    3520:	4a ea       	ldi	r20, 0xAA	; 170
    3522:	51 e0       	ldi	r21, 0x01	; 1
    3524:	60 e0       	ldi	r22, 0x00	; 0
    3526:	70 e0       	ldi	r23, 0x00	; 0
    3528:	88 e0       	ldi	r24, 0x08	; 8
    352a:	0e 94 c2 18 	call	0x3184	; 0x3184 <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
    352e:	c8 2f       	mov	r28, r24
    3530:	c4 70       	andi	r28, 0x04	; 4
    3532:	82 fd       	sbrc	r24, 2
    3534:	1d c0       	rjmp	.+58     	; 0x3570 <sd_raw_init+0xa8>
    {
        sd_raw_rec_byte();
    3536:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    353a:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
        if((sd_raw_rec_byte() & 0x01) == 0)
    353e:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
    3542:	08 2f       	mov	r16, r24
    3544:	01 70       	andi	r16, 0x01	; 1
    3546:	80 ff       	sbrs	r24, 0
    3548:	ab c0       	rjmp	.+342    	; 0x36a0 <sd_raw_init+0x1d8>
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
    354a:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
    354e:	8a 3a       	cpi	r24, 0xAA	; 170
    3550:	09 f0       	breq	.+2      	; 0x3554 <sd_raw_init+0x8c>
    3552:	a5 c0       	rjmp	.+330    	; 0x369e <sd_raw_init+0x1d6>
            return 0; /* wrong test pattern */

        /* card conforms to SD 2 card specification */
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
    3554:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <sd_raw_card_type>
    3558:	82 60       	ori	r24, 0x02	; 2
    355a:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <sd_raw_card_type>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    355e:	c0 e0       	ldi	r28, 0x00	; 0
    3560:	d0 e8       	ldi	r29, 0x80	; 128
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
    3562:	91 2c       	mov	r9, r1
    3564:	a1 2c       	mov	r10, r1
    3566:	b1 2c       	mov	r11, r1
    3568:	68 94       	set
    356a:	cc 24       	eor	r12, r12
    356c:	c6 f8       	bld	r12, 6
    356e:	14 c0       	rjmp	.+40     	; 0x3598 <sd_raw_init+0xd0>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    3570:	40 e0       	ldi	r20, 0x00	; 0
    3572:	50 e0       	ldi	r21, 0x00	; 0
    3574:	ba 01       	movw	r22, r20
    3576:	87 e3       	ldi	r24, 0x37	; 55
    3578:	0e 94 c2 18 	call	0x3184	; 0x3184 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    357c:	40 e0       	ldi	r20, 0x00	; 0
    357e:	50 e0       	ldi	r21, 0x00	; 0
    3580:	ba 01       	movw	r22, r20
    3582:	89 e2       	ldi	r24, 0x29	; 41
    3584:	0e 94 c2 18 	call	0x3184	; 0x3184 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    3588:	82 fd       	sbrc	r24, 2
    358a:	e9 cf       	rjmp	.-46     	; 0x355e <sd_raw_init+0x96>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    358c:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <sd_raw_card_type>
    3590:	81 60       	ori	r24, 0x01	; 1
    3592:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <sd_raw_card_type>
    3596:	e3 cf       	rjmp	.-58     	; 0x355e <sd_raw_init+0x96>
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    3598:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <sd_raw_card_type>
    359c:	98 2f       	mov	r25, r24
    359e:	93 70       	andi	r25, 0x03	; 3
    35a0:	c9 f0       	breq	.+50     	; 0x35d4 <sd_raw_init+0x10c>
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    35a2:	81 ff       	sbrs	r24, 1
    35a4:	05 c0       	rjmp	.+10     	; 0x35b0 <sd_raw_init+0xe8>
                arg = 0x40000000;
    35a6:	d9 2c       	mov	r13, r9
    35a8:	ea 2c       	mov	r14, r10
    35aa:	fb 2c       	mov	r15, r11
    35ac:	0c 2d       	mov	r16, r12
    35ae:	04 c0       	rjmp	.+8      	; 0x35b8 <sd_raw_init+0xf0>
    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
        {
            uint32_t arg = 0;
    35b0:	d1 2c       	mov	r13, r1
    35b2:	e1 2c       	mov	r14, r1
    35b4:	f1 2c       	mov	r15, r1
    35b6:	00 e0       	ldi	r16, 0x00	; 0
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    35b8:	40 e0       	ldi	r20, 0x00	; 0
    35ba:	50 e0       	ldi	r21, 0x00	; 0
    35bc:	ba 01       	movw	r22, r20
    35be:	87 e3       	ldi	r24, 0x37	; 55
    35c0:	0e 94 c2 18 	call	0x3184	; 0x3184 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    35c4:	4d 2d       	mov	r20, r13
    35c6:	5e 2d       	mov	r21, r14
    35c8:	6f 2d       	mov	r22, r15
    35ca:	70 2f       	mov	r23, r16
    35cc:	89 e2       	ldi	r24, 0x29	; 41
    35ce:	0e 94 c2 18 	call	0x3184	; 0x3184 <sd_raw_send_command>
    35d2:	06 c0       	rjmp	.+12     	; 0x35e0 <sd_raw_init+0x118>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    35d4:	40 e0       	ldi	r20, 0x00	; 0
    35d6:	50 e0       	ldi	r21, 0x00	; 0
    35d8:	ba 01       	movw	r22, r20
    35da:	81 e0       	ldi	r24, 0x01	; 1
    35dc:	0e 94 c2 18 	call	0x3184	; 0x3184 <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    35e0:	08 2f       	mov	r16, r24
    35e2:	01 70       	andi	r16, 0x01	; 1
    35e4:	80 ff       	sbrs	r24, 0
    35e6:	05 c0       	rjmp	.+10     	; 0x35f2 <sd_raw_init+0x12a>
    35e8:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x7fff)
    35ea:	b1 f6       	brne	.-84     	; 0x3598 <sd_raw_init+0xd0>
        {
            unselect_card();
    35ec:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    35ee:	01 2f       	mov	r16, r17
    35f0:	57 c0       	rjmp	.+174    	; 0x36a0 <sd_raw_init+0x1d8>
        }
    }

#if SD_RAW_SDHC
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    35f2:	c0 91 18 02 	lds	r28, 0x0218	; 0x800218 <sd_raw_card_type>
    35f6:	c1 ff       	sbrs	r28, 1
    35f8:	17 c0       	rjmp	.+46     	; 0x3628 <sd_raw_init+0x160>
    {
        if(sd_raw_send_command(CMD_READ_OCR, 0))
    35fa:	40 e0       	ldi	r20, 0x00	; 0
    35fc:	50 e0       	ldi	r21, 0x00	; 0
    35fe:	ba 01       	movw	r22, r20
    3600:	8a e3       	ldi	r24, 0x3A	; 58
    3602:	0e 94 c2 18 	call	0x3184	; 0x3184 <sd_raw_send_command>
    3606:	88 23       	and	r24, r24
    3608:	11 f0       	breq	.+4      	; 0x360e <sd_raw_init+0x146>
        {
            unselect_card();
    360a:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    360c:	49 c0       	rjmp	.+146    	; 0x36a0 <sd_raw_init+0x1d8>
        }

        if(sd_raw_rec_byte() & 0x40)
    360e:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
    3612:	86 ff       	sbrs	r24, 6
    3614:	03 c0       	rjmp	.+6      	; 0x361c <sd_raw_init+0x154>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
    3616:	c4 60       	ori	r28, 0x04	; 4
    3618:	c0 93 18 02 	sts	0x0218, r28	; 0x800218 <sd_raw_card_type>

        sd_raw_rec_byte();
    361c:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    3620:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    3624:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    3628:	40 e0       	ldi	r20, 0x00	; 0
    362a:	52 e0       	ldi	r21, 0x02	; 2
    362c:	60 e0       	ldi	r22, 0x00	; 0
    362e:	70 e0       	ldi	r23, 0x00	; 0
    3630:	80 e1       	ldi	r24, 0x10	; 16
    3632:	0e 94 c2 18 	call	0x3184	; 0x3184 <sd_raw_send_command>
    3636:	88 23       	and	r24, r24
    3638:	11 f0       	breq	.+4      	; 0x363e <sd_raw_init+0x176>
    {
        unselect_card();
    363a:	2a 9a       	sbi	0x05, 2	; 5
        return 0;
    363c:	31 c0       	rjmp	.+98     	; 0x36a0 <sd_raw_init+0x1d8>
    }

    /* deaddress card */
    unselect_card();
    363e:	2a 9a       	sbi	0x05, 2	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    3640:	8c b5       	in	r24, 0x2c	; 44
    3642:	8c 7f       	andi	r24, 0xFC	; 252
    3644:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    3646:	8d b5       	in	r24, 0x2d	; 45
    3648:	81 60       	ori	r24, 0x01	; 1
    364a:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    364c:	8f ef       	ldi	r24, 0xFF	; 255
    364e:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <raw_block_address>
    3652:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <raw_block_address+0x1>
    3656:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <raw_block_address+0x2>
    365a:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <raw_block_address+0x3>
    365e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <raw_block_address+0x4>
    3662:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <raw_block_address+0x5>
    3666:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <raw_block_address+0x6>
    366a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <raw_block_address+0x7>
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <raw_block_written>
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    3674:	e1 2c       	mov	r14, r1
    3676:	68 94       	set
    3678:	ff 24       	eor	r15, r15
    367a:	f1 f8       	bld	r15, 1
    367c:	02 e2       	ldi	r16, 0x22	; 34
    367e:	12 e0       	ldi	r17, 0x02	; 2
    3680:	20 e0       	ldi	r18, 0x00	; 0
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	40 e0       	ldi	r20, 0x00	; 0
    3686:	50 e0       	ldi	r21, 0x00	; 0
    3688:	60 e0       	ldi	r22, 0x00	; 0
    368a:	70 e0       	ldi	r23, 0x00	; 0
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	0e 94 2a 19 	call	0x3254	; 0x3254 <sd_raw_read>
    3694:	01 e0       	ldi	r16, 0x01	; 1
    3696:	81 11       	cpse	r24, r1
    3698:	03 c0       	rjmp	.+6      	; 0x36a0 <sd_raw_init+0x1d8>
    369a:	00 e0       	ldi	r16, 0x00	; 0
    369c:	01 c0       	rjmp	.+2      	; 0x36a0 <sd_raw_init+0x1d8>
        sd_raw_rec_byte();
        sd_raw_rec_byte();
        if((sd_raw_rec_byte() & 0x01) == 0)
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
            return 0; /* wrong test pattern */
    369e:	0c 2f       	mov	r16, r28
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
        return 0;
#endif

    return 1;
}
    36a0:	80 2f       	mov	r24, r16
    36a2:	df 91       	pop	r29
    36a4:	cf 91       	pop	r28
    36a6:	1f 91       	pop	r17
    36a8:	0f 91       	pop	r16
    36aa:	ff 90       	pop	r15
    36ac:	ef 90       	pop	r14
    36ae:	df 90       	pop	r13
    36b0:	cf 90       	pop	r12
    36b2:	bf 90       	pop	r11
    36b4:	af 90       	pop	r10
    36b6:	9f 90       	pop	r9
    36b8:	08 95       	ret

000036ba <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    36ba:	2f 92       	push	r2
    36bc:	3f 92       	push	r3
    36be:	4f 92       	push	r4
    36c0:	5f 92       	push	r5
    36c2:	6f 92       	push	r6
    36c4:	7f 92       	push	r7
    36c6:	8f 92       	push	r8
    36c8:	9f 92       	push	r9
    36ca:	af 92       	push	r10
    36cc:	bf 92       	push	r11
    36ce:	cf 92       	push	r12
    36d0:	df 92       	push	r13
    36d2:	ef 92       	push	r14
    36d4:	ff 92       	push	r15
    36d6:	0f 93       	push	r16
    36d8:	1f 93       	push	r17
    36da:	cf 93       	push	r28
    36dc:	df 93       	push	r29
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
    36e2:	64 97       	sbiw	r28, 0x14	; 20
    36e4:	0f b6       	in	r0, 0x3f	; 63
    36e6:	f8 94       	cli
    36e8:	de bf       	out	0x3e, r29	; 62
    36ea:	0f be       	out	0x3f, r0	; 63
    36ec:	cd bf       	out	0x3d, r28	; 61
    36ee:	2f 87       	std	Y+15, r18	; 0x0f
    36f0:	38 8b       	std	Y+16, r19	; 0x10
    36f2:	49 8b       	std	Y+17, r20	; 0x11
    36f4:	5a 8b       	std	Y+18, r21	; 0x12
    36f6:	36 2e       	mov	r3, r22
    36f8:	27 2e       	mov	r2, r23
    36fa:	8b 8b       	std	Y+19, r24	; 0x13
    36fc:	9c 8b       	std	Y+20, r25	; 0x14
    36fe:	1a 83       	std	Y+2, r17	; 0x02
    3700:	09 83       	std	Y+1, r16	; 0x01
    3702:	37 01       	movw	r6, r14
    3704:	26 01       	movw	r4, r12
    3706:	bc 86       	std	Y+12, r11	; 0x0c
    3708:	ab 86       	std	Y+11, r10	; 0x0b
    if(!buffer || interval == 0 || length < interval || !callback)
    370a:	01 2b       	or	r16, r17
    370c:	09 f4       	brne	.+2      	; 0x3710 <sd_raw_read_interval+0x56>
    370e:	53 c0       	rjmp	.+166    	; 0x37b6 <sd_raw_read_interval+0xfc>
    3710:	e1 14       	cp	r14, r1
    3712:	f1 04       	cpc	r15, r1
    3714:	09 f4       	brne	.+2      	; 0x3718 <sd_raw_read_interval+0x5e>
    3716:	51 c0       	rjmp	.+162    	; 0x37ba <sd_raw_read_interval+0x100>
    3718:	ce 14       	cp	r12, r14
    371a:	df 04       	cpc	r13, r15
    371c:	08 f4       	brcc	.+2      	; 0x3720 <sd_raw_read_interval+0x66>
    371e:	4f c0       	rjmp	.+158    	; 0x37be <sd_raw_read_interval+0x104>
    3720:	ab 28       	or	r10, r11
    3722:	09 f4       	brne	.+2      	; 0x3726 <sd_raw_read_interval+0x6c>
    3724:	4e c0       	rjmp	.+156    	; 0x37c2 <sd_raw_read_interval+0x108>
         */
        if(!sd_raw_read(offset, buffer, interval))
            return 0;
        if(!callback(buffer, offset, p))
            break;
        offset += interval;
    3726:	97 01       	movw	r18, r14
    3728:	eb 82       	std	Y+3, r14	; 0x03
    372a:	3c 83       	std	Y+4, r19	; 0x04
    372c:	9e 86       	std	Y+14, r9	; 0x0e
    372e:	8d 86       	std	Y+13, r8	; 0x0d
    3730:	af 84       	ldd	r10, Y+15	; 0x0f
    3732:	b8 88       	ldd	r11, Y+16	; 0x10
    3734:	c9 88       	ldd	r12, Y+17	; 0x11
    3736:	da 88       	ldd	r13, Y+18	; 0x12
    3738:	9b 88       	ldd	r9, Y+19	; 0x13
    373a:	8c 88       	ldd	r8, Y+20	; 0x14
    while(length >= interval)
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    373c:	73 01       	movw	r14, r6
    373e:	09 81       	ldd	r16, Y+1	; 0x01
    3740:	1a 81       	ldd	r17, Y+2	; 0x02
    3742:	2a 2d       	mov	r18, r10
    3744:	3b 2d       	mov	r19, r11
    3746:	4c 2d       	mov	r20, r12
    3748:	5d 2d       	mov	r21, r13
    374a:	63 2d       	mov	r22, r3
    374c:	72 2d       	mov	r23, r2
    374e:	89 2d       	mov	r24, r9
    3750:	98 2d       	mov	r25, r8
    3752:	0e 94 2a 19 	call	0x3254	; 0x3254 <sd_raw_read>
    3756:	88 23       	and	r24, r24
    3758:	b9 f1       	breq	.+110    	; 0x37c8 <sd_raw_read_interval+0x10e>
            return 0;
        if(!callback(buffer, offset, p))
    375a:	ed 84       	ldd	r14, Y+13	; 0x0d
    375c:	fe 84       	ldd	r15, Y+14	; 0x0e
    375e:	0a 2d       	mov	r16, r10
    3760:	1b 2d       	mov	r17, r11
    3762:	2c 2d       	mov	r18, r12
    3764:	3d 2d       	mov	r19, r13
    3766:	43 2d       	mov	r20, r3
    3768:	52 2d       	mov	r21, r2
    376a:	69 2d       	mov	r22, r9
    376c:	78 2d       	mov	r23, r8
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	9a 81       	ldd	r25, Y+2	; 0x02
    3772:	eb 85       	ldd	r30, Y+11	; 0x0b
    3774:	fc 85       	ldd	r31, Y+12	; 0x0c
    3776:	09 95       	icall
    3778:	88 23       	and	r24, r24
    377a:	29 f1       	breq	.+74     	; 0x37c6 <sd_raw_read_interval+0x10c>
    377c:	2b 81       	ldd	r18, Y+3	; 0x03
    377e:	3c 81       	ldd	r19, Y+4	; 0x04
    3780:	40 e0       	ldi	r20, 0x00	; 0
    3782:	50 e0       	ldi	r21, 0x00	; 0
    3784:	60 e0       	ldi	r22, 0x00	; 0
    3786:	70 e0       	ldi	r23, 0x00	; 0
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	e3 2c       	mov	r14, r3
    378e:	f2 2c       	mov	r15, r2
    3790:	09 2d       	mov	r16, r9
    3792:	18 2d       	mov	r17, r8
    3794:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
    3798:	a2 2e       	mov	r10, r18
    379a:	b3 2e       	mov	r11, r19
    379c:	c4 2e       	mov	r12, r20
    379e:	d5 2e       	mov	r13, r21
    37a0:	36 2e       	mov	r3, r22
    37a2:	27 2e       	mov	r2, r23
    37a4:	98 2e       	mov	r9, r24
    37a6:	89 2e       	mov	r8, r25
            break;
        offset += interval;
        length -= interval;
    37a8:	46 18       	sub	r4, r6
    37aa:	57 08       	sbc	r5, r7
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    37ac:	46 14       	cp	r4, r6
    37ae:	57 04       	cpc	r5, r7
    37b0:	28 f6       	brcc	.-118    	; 0x373c <sd_raw_read_interval+0x82>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	09 c0       	rjmp	.+18     	; 0x37c8 <sd_raw_read_interval+0x10e>
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	07 c0       	rjmp	.+14     	; 0x37c8 <sd_raw_read_interval+0x10e>
    37ba:	80 e0       	ldi	r24, 0x00	; 0
    37bc:	05 c0       	rjmp	.+10     	; 0x37c8 <sd_raw_read_interval+0x10e>
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	03 c0       	rjmp	.+6      	; 0x37c8 <sd_raw_read_interval+0x10e>
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	01 c0       	rjmp	.+2      	; 0x37c8 <sd_raw_read_interval+0x10e>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    37c8:	64 96       	adiw	r28, 0x14	; 20
    37ca:	0f b6       	in	r0, 0x3f	; 63
    37cc:	f8 94       	cli
    37ce:	de bf       	out	0x3e, r29	; 62
    37d0:	0f be       	out	0x3f, r0	; 63
    37d2:	cd bf       	out	0x3d, r28	; 61
    37d4:	df 91       	pop	r29
    37d6:	cf 91       	pop	r28
    37d8:	1f 91       	pop	r17
    37da:	0f 91       	pop	r16
    37dc:	ff 90       	pop	r15
    37de:	ef 90       	pop	r14
    37e0:	df 90       	pop	r13
    37e2:	cf 90       	pop	r12
    37e4:	bf 90       	pop	r11
    37e6:	af 90       	pop	r10
    37e8:	9f 90       	pop	r9
    37ea:	8f 90       	pop	r8
    37ec:	7f 90       	pop	r7
    37ee:	6f 90       	pop	r6
    37f0:	5f 90       	pop	r5
    37f2:	4f 90       	pop	r4
    37f4:	3f 90       	pop	r3
    37f6:	2f 90       	pop	r2
    37f8:	08 95       	ret

000037fa <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    37fa:	2f 92       	push	r2
    37fc:	3f 92       	push	r3
    37fe:	4f 92       	push	r4
    3800:	5f 92       	push	r5
    3802:	6f 92       	push	r6
    3804:	7f 92       	push	r7
    3806:	8f 92       	push	r8
    3808:	9f 92       	push	r9
    380a:	af 92       	push	r10
    380c:	bf 92       	push	r11
    380e:	cf 92       	push	r12
    3810:	df 92       	push	r13
    3812:	ef 92       	push	r14
    3814:	ff 92       	push	r15
    3816:	0f 93       	push	r16
    3818:	1f 93       	push	r17
    381a:	cf 93       	push	r28
    381c:	df 93       	push	r29
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62
    3822:	69 97       	sbiw	r28, 0x19	; 25
    3824:	0f b6       	in	r0, 0x3f	; 63
    3826:	f8 94       	cli
    3828:	de bf       	out	0x3e, r29	; 62
    382a:	0f be       	out	0x3f, r0	; 63
    382c:	cd bf       	out	0x3d, r28	; 61
    382e:	29 83       	std	Y+1, r18	; 0x01
    3830:	3a 83       	std	Y+2, r19	; 0x02
    3832:	4b 83       	std	Y+3, r20	; 0x03
    3834:	5c 83       	std	Y+4, r21	; 0x04
    3836:	6d 83       	std	Y+5, r22	; 0x05
    3838:	7e 83       	std	Y+6, r23	; 0x06
    383a:	8f 83       	std	Y+7, r24	; 0x07
    383c:	98 87       	std	Y+8, r25	; 0x08
    383e:	38 01       	movw	r6, r16
    3840:	27 01       	movw	r4, r14
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    3842:	ef 28       	or	r14, r15
    3844:	09 f4       	brne	.+2      	; 0x3848 <sd_raw_write+0x4e>
    3846:	07 c1       	rjmp	.+526    	; 0x3a56 <sd_raw_write+0x25c>
    3848:	0f 2e       	mov	r0, r31
    384a:	f2 e2       	ldi	r31, 0x22	; 34
    384c:	2f 2e       	mov	r2, r31
    384e:	f4 e0       	ldi	r31, 0x04	; 4
    3850:	3f 2e       	mov	r3, r31
    3852:	f0 2d       	mov	r31, r0
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    3854:	29 81       	ldd	r18, Y+1	; 0x01
    3856:	3a 81       	ldd	r19, Y+2	; 0x02
    3858:	31 70       	andi	r19, 0x01	; 1
    385a:	39 8f       	std	Y+25, r19	; 0x19
    385c:	28 8f       	std	Y+24, r18	; 0x18
        block_address = offset - block_offset;
    385e:	40 e0       	ldi	r20, 0x00	; 0
    3860:	50 e0       	ldi	r21, 0x00	; 0
    3862:	60 e0       	ldi	r22, 0x00	; 0
    3864:	70 e0       	ldi	r23, 0x00	; 0
    3866:	cb 01       	movw	r24, r22
    3868:	29 87       	std	Y+9, r18	; 0x09
    386a:	3a 87       	std	Y+10, r19	; 0x0a
    386c:	4b 87       	std	Y+11, r20	; 0x0b
    386e:	5c 87       	std	Y+12, r21	; 0x0c
    3870:	6d 87       	std	Y+13, r22	; 0x0d
    3872:	7e 87       	std	Y+14, r23	; 0x0e
    3874:	8f 87       	std	Y+15, r24	; 0x0f
    3876:	98 8b       	std	Y+16, r25	; 0x10
    3878:	29 81       	ldd	r18, Y+1	; 0x01
    387a:	3a 81       	ldd	r19, Y+2	; 0x02
    387c:	4b 81       	ldd	r20, Y+3	; 0x03
    387e:	5c 81       	ldd	r21, Y+4	; 0x04
    3880:	6d 81       	ldd	r22, Y+5	; 0x05
    3882:	7e 81       	ldd	r23, Y+6	; 0x06
    3884:	8f 81       	ldd	r24, Y+7	; 0x07
    3886:	98 85       	ldd	r25, Y+8	; 0x08
    3888:	a9 84       	ldd	r10, Y+9	; 0x09
    388a:	ba 84       	ldd	r11, Y+10	; 0x0a
    388c:	c1 2c       	mov	r12, r1
    388e:	d1 2c       	mov	r13, r1
    3890:	e1 2c       	mov	r14, r1
    3892:	f1 2c       	mov	r15, r1
    3894:	00 e0       	ldi	r16, 0x00	; 0
    3896:	10 e0       	ldi	r17, 0x00	; 0
    3898:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <__subdi3>
    389c:	29 87       	std	Y+9, r18	; 0x09
    389e:	39 8b       	std	Y+17, r19	; 0x11
    38a0:	4a 8b       	std	Y+18, r20	; 0x12
    38a2:	5b 8b       	std	Y+19, r21	; 0x13
    38a4:	6c 8b       	std	Y+20, r22	; 0x14
    38a6:	7d 8b       	std	Y+21, r23	; 0x15
    38a8:	8e 8b       	std	Y+22, r24	; 0x16
    38aa:	9f 8b       	std	Y+23, r25	; 0x17
    38ac:	81 2c       	mov	r8, r1
    38ae:	68 94       	set
    38b0:	99 24       	eor	r9, r9
    38b2:	91 f8       	bld	r9, 1
    38b4:	68 8d       	ldd	r22, Y+24	; 0x18
    38b6:	79 8d       	ldd	r23, Y+25	; 0x19
    38b8:	86 1a       	sub	r8, r22
    38ba:	97 0a       	sbc	r9, r23
    38bc:	48 14       	cp	r4, r8
    38be:	59 04       	cpc	r5, r9
    38c0:	08 f4       	brcc	.+2      	; 0x38c4 <sd_raw_write+0xca>
    38c2:	42 01       	movw	r8, r4
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    38c4:	a0 90 1a 02 	lds	r10, 0x021A	; 0x80021a <raw_block_address>
    38c8:	b0 90 1b 02 	lds	r11, 0x021B	; 0x80021b <raw_block_address+0x1>
    38cc:	c0 90 1c 02 	lds	r12, 0x021C	; 0x80021c <raw_block_address+0x2>
    38d0:	d0 90 1d 02 	lds	r13, 0x021D	; 0x80021d <raw_block_address+0x3>
    38d4:	e0 90 1e 02 	lds	r14, 0x021E	; 0x80021e <raw_block_address+0x4>
    38d8:	f0 90 1f 02 	lds	r15, 0x021F	; 0x80021f <raw_block_address+0x5>
    38dc:	00 91 20 02 	lds	r16, 0x0220	; 0x800220 <raw_block_address+0x6>
    38e0:	10 91 21 02 	lds	r17, 0x0221	; 0x800221 <raw_block_address+0x7>
    38e4:	29 85       	ldd	r18, Y+9	; 0x09
    38e6:	39 89       	ldd	r19, Y+17	; 0x11
    38e8:	4a 89       	ldd	r20, Y+18	; 0x12
    38ea:	5b 89       	ldd	r21, Y+19	; 0x13
    38ec:	6c 89       	ldd	r22, Y+20	; 0x14
    38ee:	7d 89       	ldd	r23, Y+21	; 0x15
    38f0:	8e 89       	ldd	r24, Y+22	; 0x16
    38f2:	9f 89       	ldd	r25, Y+23	; 0x17
    38f4:	0e 94 85 21 	call	0x430a	; 0x430a <__cmpdi2>
    38f8:	c1 f1       	breq	.+112    	; 0x396a <sd_raw_write+0x170>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    38fa:	0e 94 fe 18 	call	0x31fc	; 0x31fc <sd_raw_sync>
    38fe:	88 23       	and	r24, r24
    3900:	09 f4       	brne	.+2      	; 0x3904 <sd_raw_write+0x10a>
    3902:	ac c0       	rjmp	.+344    	; 0x3a5c <sd_raw_write+0x262>
                return 0;
#endif

            if(block_offset || write_length < 512)
    3904:	88 8d       	ldd	r24, Y+24	; 0x18
    3906:	99 8d       	ldd	r25, Y+25	; 0x19
    3908:	89 2b       	or	r24, r25
    390a:	21 f4       	brne	.+8      	; 0x3914 <sd_raw_write+0x11a>
    390c:	81 14       	cp	r8, r1
    390e:	92 e0       	ldi	r25, 0x02	; 2
    3910:	99 06       	cpc	r9, r25
    3912:	98 f4       	brcc	.+38     	; 0x393a <sd_raw_write+0x140>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    3914:	e1 2c       	mov	r14, r1
    3916:	68 94       	set
    3918:	ff 24       	eor	r15, r15
    391a:	f1 f8       	bld	r15, 1
    391c:	02 e2       	ldi	r16, 0x22	; 34
    391e:	12 e0       	ldi	r17, 0x02	; 2
    3920:	29 85       	ldd	r18, Y+9	; 0x09
    3922:	39 89       	ldd	r19, Y+17	; 0x11
    3924:	4a 89       	ldd	r20, Y+18	; 0x12
    3926:	5b 89       	ldd	r21, Y+19	; 0x13
    3928:	6c 89       	ldd	r22, Y+20	; 0x14
    392a:	7d 89       	ldd	r23, Y+21	; 0x15
    392c:	8e 89       	ldd	r24, Y+22	; 0x16
    392e:	9f 89       	ldd	r25, Y+23	; 0x17
    3930:	0e 94 2a 19 	call	0x3254	; 0x3254 <sd_raw_read>
    3934:	88 23       	and	r24, r24
    3936:	09 f4       	brne	.+2      	; 0x393a <sd_raw_write+0x140>
    3938:	91 c0       	rjmp	.+290    	; 0x3a5c <sd_raw_write+0x262>
                    return 0;
            }
            raw_block_address = block_address;
    393a:	e9 85       	ldd	r30, Y+9	; 0x09
    393c:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <raw_block_address>
    3940:	f9 89       	ldd	r31, Y+17	; 0x11
    3942:	f0 93 1b 02 	sts	0x021B, r31	; 0x80021b <raw_block_address+0x1>
    3946:	2a 89       	ldd	r18, Y+18	; 0x12
    3948:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <raw_block_address+0x2>
    394c:	3b 89       	ldd	r19, Y+19	; 0x13
    394e:	30 93 1d 02 	sts	0x021D, r19	; 0x80021d <raw_block_address+0x3>
    3952:	4c 89       	ldd	r20, Y+20	; 0x14
    3954:	40 93 1e 02 	sts	0x021E, r20	; 0x80021e <raw_block_address+0x4>
    3958:	5d 89       	ldd	r21, Y+21	; 0x15
    395a:	50 93 1f 02 	sts	0x021F, r21	; 0x80021f <raw_block_address+0x5>
    395e:	6e 89       	ldd	r22, Y+22	; 0x16
    3960:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <raw_block_address+0x6>
    3964:	7f 89       	ldd	r23, Y+23	; 0x17
    3966:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <raw_block_address+0x7>
        }

        if(buffer != raw_block)
    396a:	82 e2       	ldi	r24, 0x22	; 34
    396c:	68 16       	cp	r6, r24
    396e:	82 e0       	ldi	r24, 0x02	; 2
    3970:	78 06       	cpc	r7, r24
    3972:	71 f0       	breq	.+28     	; 0x3990 <sd_raw_write+0x196>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    3974:	a4 01       	movw	r20, r8
    3976:	b3 01       	movw	r22, r6
    3978:	88 8d       	ldd	r24, Y+24	; 0x18
    397a:	99 8d       	ldd	r25, Y+25	; 0x19
    397c:	8e 5d       	subi	r24, 0xDE	; 222
    397e:	9d 4f       	sbci	r25, 0xFD	; 253
    3980:	0e 94 9a 21 	call	0x4334	; 0x4334 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    3984:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <raw_block_written>

            if(length == write_length)
    3988:	48 14       	cp	r4, r8
    398a:	59 04       	cpc	r5, r9
    398c:	09 f4       	brne	.+2      	; 0x3990 <sd_raw_write+0x196>
    398e:	65 c0       	rjmp	.+202    	; 0x3a5a <sd_raw_write+0x260>
                return 1;
#endif
        }

        /* address card */
        select_card();
    3990:	2a 98       	cbi	0x05, 2	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    3992:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <sd_raw_card_type>
    3996:	82 ff       	sbrs	r24, 2
    3998:	10 c0       	rjmp	.+32     	; 0x39ba <sd_raw_write+0x1c0>
    399a:	29 85       	ldd	r18, Y+9	; 0x09
    399c:	39 89       	ldd	r19, Y+17	; 0x11
    399e:	4a 89       	ldd	r20, Y+18	; 0x12
    39a0:	5b 89       	ldd	r21, Y+19	; 0x13
    39a2:	6c 89       	ldd	r22, Y+20	; 0x14
    39a4:	7d 89       	ldd	r23, Y+21	; 0x15
    39a6:	8e 89       	ldd	r24, Y+22	; 0x16
    39a8:	9f 89       	ldd	r25, Y+23	; 0x17
    39aa:	09 e0       	ldi	r16, 0x09	; 9
    39ac:	0e 94 4b 21 	call	0x4296	; 0x4296 <__lshrdi3>
    39b0:	64 2f       	mov	r22, r20
    39b2:	75 2f       	mov	r23, r21
    39b4:	42 2f       	mov	r20, r18
    39b6:	53 2f       	mov	r21, r19
    39b8:	04 c0       	rjmp	.+8      	; 0x39c2 <sd_raw_write+0x1c8>
    39ba:	49 85       	ldd	r20, Y+9	; 0x09
    39bc:	59 89       	ldd	r21, Y+17	; 0x11
    39be:	6a 89       	ldd	r22, Y+18	; 0x12
    39c0:	7b 89       	ldd	r23, Y+19	; 0x13
    39c2:	88 e1       	ldi	r24, 0x18	; 24
    39c4:	0e 94 c2 18 	call	0x3184	; 0x3184 <sd_raw_send_command>
    39c8:	88 23       	and	r24, r24
    39ca:	19 f0       	breq	.+6      	; 0x39d2 <sd_raw_write+0x1d8>
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
#endif
        {
            unselect_card();
    39cc:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    39ce:	80 e0       	ldi	r24, 0x00	; 0
    39d0:	45 c0       	rjmp	.+138    	; 0x3a5c <sd_raw_write+0x262>
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);
    39d2:	8e ef       	ldi	r24, 0xFE	; 254
    39d4:	0e 94 b0 18 	call	0x3160	; 0x3160 <sd_raw_send_byte>
    39d8:	02 e2       	ldi	r16, 0x22	; 34
    39da:	12 e0       	ldi	r17, 0x02	; 2

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    39dc:	f8 01       	movw	r30, r16
    39de:	81 91       	ld	r24, Z+
    39e0:	8f 01       	movw	r16, r30
    39e2:	0e 94 b0 18 	call	0x3160	; 0x3160 <sd_raw_send_byte>
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    39e6:	02 15       	cp	r16, r2
    39e8:	13 05       	cpc	r17, r3
    39ea:	c1 f7       	brne	.-16     	; 0x39dc <sd_raw_write+0x1e2>
            sd_raw_send_byte(*cache++);

        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
    39ec:	8f ef       	ldi	r24, 0xFF	; 255
    39ee:	0e 94 b0 18 	call	0x3160	; 0x3160 <sd_raw_send_byte>
        sd_raw_send_byte(0xff);
    39f2:	8f ef       	ldi	r24, 0xFF	; 255
    39f4:	0e 94 b0 18 	call	0x3160	; 0x3160 <sd_raw_send_byte>

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    39f8:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
    39fc:	8f 3f       	cpi	r24, 0xFF	; 255
    39fe:	e1 f7       	brne	.-8      	; 0x39f8 <sd_raw_write+0x1fe>
        sd_raw_rec_byte();
    3a00:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>

        /* deaddress card */
        unselect_card();
    3a04:	2a 9a       	sbi	0x05, 2	; 5

        buffer += write_length;
    3a06:	68 0c       	add	r6, r8
    3a08:	79 1c       	adc	r7, r9
        offset += write_length;
    3a0a:	54 01       	movw	r10, r8
    3a0c:	28 2d       	mov	r18, r8
    3a0e:	3b 2d       	mov	r19, r11
    3a10:	40 e0       	ldi	r20, 0x00	; 0
    3a12:	50 e0       	ldi	r21, 0x00	; 0
    3a14:	60 e0       	ldi	r22, 0x00	; 0
    3a16:	70 e0       	ldi	r23, 0x00	; 0
    3a18:	80 e0       	ldi	r24, 0x00	; 0
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	a9 80       	ldd	r10, Y+1	; 0x01
    3a1e:	ba 80       	ldd	r11, Y+2	; 0x02
    3a20:	cb 80       	ldd	r12, Y+3	; 0x03
    3a22:	dc 80       	ldd	r13, Y+4	; 0x04
    3a24:	ed 80       	ldd	r14, Y+5	; 0x05
    3a26:	fe 80       	ldd	r15, Y+6	; 0x06
    3a28:	0f 81       	ldd	r16, Y+7	; 0x07
    3a2a:	18 85       	ldd	r17, Y+8	; 0x08
    3a2c:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
    3a30:	29 83       	std	Y+1, r18	; 0x01
    3a32:	3a 83       	std	Y+2, r19	; 0x02
    3a34:	4b 83       	std	Y+3, r20	; 0x03
    3a36:	5c 83       	std	Y+4, r21	; 0x04
    3a38:	6d 83       	std	Y+5, r22	; 0x05
    3a3a:	7e 83       	std	Y+6, r23	; 0x06
    3a3c:	8f 83       	std	Y+7, r24	; 0x07
    3a3e:	98 87       	std	Y+8, r25	; 0x08
        length -= write_length;
    3a40:	48 18       	sub	r4, r8
    3a42:	59 08       	sbc	r5, r9

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    3a44:	f1 e0       	ldi	r31, 0x01	; 1
    3a46:	f0 93 19 02 	sts	0x0219, r31	; 0x800219 <raw_block_written>
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    3a4a:	41 14       	cp	r4, r1
    3a4c:	51 04       	cpc	r5, r1
    3a4e:	09 f0       	breq	.+2      	; 0x3a52 <sd_raw_write+0x258>
    3a50:	01 cf       	rjmp	.-510    	; 0x3854 <sd_raw_write+0x5a>
#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
#endif
    }

    return 1;
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	03 c0       	rjmp	.+6      	; 0x3a5c <sd_raw_write+0x262>
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	01 c0       	rjmp	.+2      	; 0x3a5c <sd_raw_write+0x262>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;

            if(length == write_length)
                return 1;
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
        raw_block_written = 1;
#endif
    }

    return 1;
}
    3a5c:	69 96       	adiw	r28, 0x19	; 25
    3a5e:	0f b6       	in	r0, 0x3f	; 63
    3a60:	f8 94       	cli
    3a62:	de bf       	out	0x3e, r29	; 62
    3a64:	0f be       	out	0x3f, r0	; 63
    3a66:	cd bf       	out	0x3d, r28	; 61
    3a68:	df 91       	pop	r29
    3a6a:	cf 91       	pop	r28
    3a6c:	1f 91       	pop	r17
    3a6e:	0f 91       	pop	r16
    3a70:	ff 90       	pop	r15
    3a72:	ef 90       	pop	r14
    3a74:	df 90       	pop	r13
    3a76:	cf 90       	pop	r12
    3a78:	bf 90       	pop	r11
    3a7a:	af 90       	pop	r10
    3a7c:	9f 90       	pop	r9
    3a7e:	8f 90       	pop	r8
    3a80:	7f 90       	pop	r7
    3a82:	6f 90       	pop	r6
    3a84:	5f 90       	pop	r5
    3a86:	4f 90       	pop	r4
    3a88:	3f 90       	pop	r3
    3a8a:	2f 90       	pop	r2
    3a8c:	08 95       	ret

00003a8e <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    3a8e:	2f 92       	push	r2
    3a90:	3f 92       	push	r3
    3a92:	4f 92       	push	r4
    3a94:	5f 92       	push	r5
    3a96:	6f 92       	push	r6
    3a98:	7f 92       	push	r7
    3a9a:	8f 92       	push	r8
    3a9c:	9f 92       	push	r9
    3a9e:	af 92       	push	r10
    3aa0:	bf 92       	push	r11
    3aa2:	cf 92       	push	r12
    3aa4:	df 92       	push	r13
    3aa6:	ef 92       	push	r14
    3aa8:	ff 92       	push	r15
    3aaa:	0f 93       	push	r16
    3aac:	1f 93       	push	r17
    3aae:	cf 93       	push	r28
    3ab0:	df 93       	push	r29
    3ab2:	cd b7       	in	r28, 0x3d	; 61
    3ab4:	de b7       	in	r29, 0x3e	; 62
    3ab6:	28 97       	sbiw	r28, 0x08	; 8
    3ab8:	0f b6       	in	r0, 0x3f	; 63
    3aba:	f8 94       	cli
    3abc:	de bf       	out	0x3e, r29	; 62
    3abe:	0f be       	out	0x3f, r0	; 63
    3ac0:	cd bf       	out	0x3d, r28	; 61
    3ac2:	56 2e       	mov	r5, r22
    3ac4:	47 2e       	mov	r4, r23
    3ac6:	1a 83       	std	Y+2, r17	; 0x02
    3ac8:	09 83       	std	Y+1, r16	; 0x01
    3aca:	dc 82       	std	Y+4, r13	; 0x04
    3acc:	cb 82       	std	Y+3, r12	; 0x03
    3ace:	be 82       	std	Y+6, r11	; 0x06
    3ad0:	ad 82       	std	Y+5, r10	; 0x05
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    3ad2:	01 2b       	or	r16, r17
    3ad4:	09 f4       	brne	.+2      	; 0x3ad8 <sd_raw_write_interval+0x4a>
    3ad6:	48 c0       	rjmp	.+144    	; 0x3b68 <sd_raw_write_interval+0xda>
    3ad8:	cd 28       	or	r12, r13
    3ada:	09 f4       	brne	.+2      	; 0x3ade <sd_raw_write_interval+0x50>
    3adc:	47 c0       	rjmp	.+142    	; 0x3b6c <sd_raw_write_interval+0xde>
    3ade:	f8 86       	std	Y+8, r15	; 0x08
    3ae0:	ef 82       	std	Y+7, r14	; 0x07
    3ae2:	a2 2e       	mov	r10, r18
    3ae4:	b3 2e       	mov	r11, r19
    3ae6:	c4 2e       	mov	r12, r20
    3ae8:	d5 2e       	mov	r13, r21
    3aea:	98 2e       	mov	r9, r24
    3aec:	89 2e       	mov	r8, r25
    3aee:	17 01       	movw	r2, r14
    3af0:	32 c0       	rjmp	.+100    	; 0x3b56 <sd_raw_write_interval+0xc8>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
    3af2:	8f 81       	ldd	r24, Y+7	; 0x07
    3af4:	98 85       	ldd	r25, Y+8	; 0x08
    3af6:	86 15       	cp	r24, r6
    3af8:	97 05       	cpc	r25, r7
    3afa:	d0 f1       	brcs	.+116    	; 0x3b70 <sd_raw_write_interval+0xe2>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    3afc:	73 01       	movw	r14, r6
    3afe:	09 81       	ldd	r16, Y+1	; 0x01
    3b00:	1a 81       	ldd	r17, Y+2	; 0x02
    3b02:	2a 2d       	mov	r18, r10
    3b04:	3b 2d       	mov	r19, r11
    3b06:	4c 2d       	mov	r20, r12
    3b08:	5d 2d       	mov	r21, r13
    3b0a:	65 2d       	mov	r22, r5
    3b0c:	74 2d       	mov	r23, r4
    3b0e:	89 2d       	mov	r24, r9
    3b10:	98 2d       	mov	r25, r8
    3b12:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <sd_raw_write>
    3b16:	88 23       	and	r24, r24
    3b18:	09 f4       	brne	.+2      	; 0x3b1c <sd_raw_write_interval+0x8e>
    3b1a:	58 c0       	rjmp	.+176    	; 0x3bcc <sd_raw_write_interval+0x13e>
            return 0;

        offset += bytes_to_write;
    3b1c:	a3 01       	movw	r20, r6
    3b1e:	26 2d       	mov	r18, r6
    3b20:	35 2f       	mov	r19, r21
    3b22:	40 e0       	ldi	r20, 0x00	; 0
    3b24:	50 e0       	ldi	r21, 0x00	; 0
    3b26:	60 e0       	ldi	r22, 0x00	; 0
    3b28:	70 e0       	ldi	r23, 0x00	; 0
    3b2a:	80 e0       	ldi	r24, 0x00	; 0
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	e5 2c       	mov	r14, r5
    3b30:	f4 2c       	mov	r15, r4
    3b32:	09 2d       	mov	r16, r9
    3b34:	18 2d       	mov	r17, r8
    3b36:	0e 94 67 21 	call	0x42ce	; 0x42ce <__adddi3>
    3b3a:	a2 2e       	mov	r10, r18
    3b3c:	b3 2e       	mov	r11, r19
    3b3e:	c4 2e       	mov	r12, r20
    3b40:	d5 2e       	mov	r13, r21
    3b42:	56 2e       	mov	r5, r22
    3b44:	47 2e       	mov	r4, r23
    3b46:	98 2e       	mov	r9, r24
    3b48:	89 2e       	mov	r8, r25
        length -= bytes_to_write;
    3b4a:	ef 81       	ldd	r30, Y+7	; 0x07
    3b4c:	f8 85       	ldd	r31, Y+8	; 0x08
    3b4e:	e6 19       	sub	r30, r6
    3b50:	f7 09       	sbc	r31, r7
    3b52:	f8 87       	std	Y+8, r31	; 0x08
    3b54:	ef 83       	std	Y+7, r30	; 0x07

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    3b56:	21 14       	cp	r2, r1
    3b58:	31 04       	cpc	r3, r1
    3b5a:	21 f1       	breq	.+72     	; 0x3ba4 <sd_raw_write_interval+0x116>
    3b5c:	8f 81       	ldd	r24, Y+7	; 0x07
    3b5e:	98 85       	ldd	r25, Y+8	; 0x08
    3b60:	89 2b       	or	r24, r25
    3b62:	61 f4       	brne	.+24     	; 0x3b7c <sd_raw_write_interval+0xee>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    3b64:	81 e0       	ldi	r24, 0x01	; 1
    3b66:	32 c0       	rjmp	.+100    	; 0x3bcc <sd_raw_write_interval+0x13e>
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
        return 0;
    3b68:	80 e0       	ldi	r24, 0x00	; 0
    3b6a:	30 c0       	rjmp	.+96     	; 0x3bcc <sd_raw_write_interval+0x13e>
    3b6c:	80 e0       	ldi	r24, 0x00	; 0
    3b6e:	2e c0       	rjmp	.+92     	; 0x3bcc <sd_raw_write_interval+0x13e>
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
            return 0;
    3b70:	80 e0       	ldi	r24, 0x00	; 0
    3b72:	2c c0       	rjmp	.+88     	; 0x3bcc <sd_raw_write_interval+0x13e>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	2a c0       	rjmp	.+84     	; 0x3bcc <sd_raw_write_interval+0x13e>
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	28 c0       	rjmp	.+80     	; 0x3bcc <sd_raw_write_interval+0x13e>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    3b7c:	ed 80       	ldd	r14, Y+5	; 0x05
    3b7e:	fe 80       	ldd	r15, Y+6	; 0x06
    3b80:	0a 2d       	mov	r16, r10
    3b82:	1b 2d       	mov	r17, r11
    3b84:	2c 2d       	mov	r18, r12
    3b86:	3d 2d       	mov	r19, r13
    3b88:	45 2d       	mov	r20, r5
    3b8a:	54 2d       	mov	r21, r4
    3b8c:	69 2d       	mov	r22, r9
    3b8e:	78 2d       	mov	r23, r8
    3b90:	89 81       	ldd	r24, Y+1	; 0x01
    3b92:	9a 81       	ldd	r25, Y+2	; 0x02
    3b94:	eb 81       	ldd	r30, Y+3	; 0x03
    3b96:	fc 81       	ldd	r31, Y+4	; 0x04
    3b98:	09 95       	icall
    3b9a:	3c 01       	movw	r6, r24
        if(!bytes_to_write)
    3b9c:	89 2b       	or	r24, r25
    3b9e:	09 f0       	breq	.+2      	; 0x3ba2 <sd_raw_write_interval+0x114>
    3ba0:	a8 cf       	rjmp	.-176    	; 0x3af2 <sd_raw_write_interval+0x64>
    3ba2:	e8 cf       	rjmp	.-48     	; 0x3b74 <sd_raw_write_interval+0xe6>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    3ba4:	ed 80       	ldd	r14, Y+5	; 0x05
    3ba6:	fe 80       	ldd	r15, Y+6	; 0x06
    3ba8:	0a 2d       	mov	r16, r10
    3baa:	1b 2d       	mov	r17, r11
    3bac:	2c 2d       	mov	r18, r12
    3bae:	3d 2d       	mov	r19, r13
    3bb0:	45 2d       	mov	r20, r5
    3bb2:	54 2d       	mov	r21, r4
    3bb4:	69 2d       	mov	r22, r9
    3bb6:	78 2d       	mov	r23, r8
    3bb8:	89 81       	ldd	r24, Y+1	; 0x01
    3bba:	9a 81       	ldd	r25, Y+2	; 0x02
    3bbc:	eb 81       	ldd	r30, Y+3	; 0x03
    3bbe:	fc 81       	ldd	r31, Y+4	; 0x04
    3bc0:	09 95       	icall
    3bc2:	3c 01       	movw	r6, r24
        if(!bytes_to_write)
    3bc4:	89 2b       	or	r24, r25
    3bc6:	09 f0       	breq	.+2      	; 0x3bca <sd_raw_write_interval+0x13c>
    3bc8:	99 cf       	rjmp	.-206    	; 0x3afc <sd_raw_write_interval+0x6e>
    3bca:	d6 cf       	rjmp	.-84     	; 0x3b78 <sd_raw_write_interval+0xea>
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    3bcc:	28 96       	adiw	r28, 0x08	; 8
    3bce:	0f b6       	in	r0, 0x3f	; 63
    3bd0:	f8 94       	cli
    3bd2:	de bf       	out	0x3e, r29	; 62
    3bd4:	0f be       	out	0x3f, r0	; 63
    3bd6:	cd bf       	out	0x3d, r28	; 61
    3bd8:	df 91       	pop	r29
    3bda:	cf 91       	pop	r28
    3bdc:	1f 91       	pop	r17
    3bde:	0f 91       	pop	r16
    3be0:	ff 90       	pop	r15
    3be2:	ef 90       	pop	r14
    3be4:	df 90       	pop	r13
    3be6:	cf 90       	pop	r12
    3be8:	bf 90       	pop	r11
    3bea:	af 90       	pop	r10
    3bec:	9f 90       	pop	r9
    3bee:	8f 90       	pop	r8
    3bf0:	7f 90       	pop	r7
    3bf2:	6f 90       	pop	r6
    3bf4:	5f 90       	pop	r5
    3bf6:	4f 90       	pop	r4
    3bf8:	3f 90       	pop	r3
    3bfa:	2f 90       	pop	r2
    3bfc:	08 95       	ret

00003bfe <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    3bfe:	9f 92       	push	r9
    3c00:	af 92       	push	r10
    3c02:	bf 92       	push	r11
    3c04:	cf 92       	push	r12
    3c06:	df 92       	push	r13
    3c08:	ef 92       	push	r14
    3c0a:	ff 92       	push	r15
    3c0c:	0f 93       	push	r16
    3c0e:	1f 93       	push	r17
    3c10:	cf 93       	push	r28
    3c12:	df 93       	push	r29
    if(!info || !sd_raw_available())
    3c14:	00 97       	sbiw	r24, 0x00	; 0
    3c16:	09 f4       	brne	.+2      	; 0x3c1a <sd_raw_get_info+0x1c>
    3c18:	24 c1       	rjmp	.+584    	; 0x3e62 <sd_raw_get_info+0x264>
    3c1a:	7c 01       	movw	r14, r24
        return 0;

    memset(info, 0, sizeof(*info));
    3c1c:	8d e1       	ldi	r24, 0x1D	; 29
    3c1e:	f7 01       	movw	r30, r14
    3c20:	11 92       	st	Z+, r1
    3c22:	8a 95       	dec	r24
    3c24:	e9 f7       	brne	.-6      	; 0x3c20 <sd_raw_get_info+0x22>

    select_card();
    3c26:	2a 98       	cbi	0x05, 2	; 5

    /* read cid register */
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    3c28:	40 e0       	ldi	r20, 0x00	; 0
    3c2a:	50 e0       	ldi	r21, 0x00	; 0
    3c2c:	ba 01       	movw	r22, r20
    3c2e:	8a e0       	ldi	r24, 0x0A	; 10
    3c30:	0e 94 c2 18 	call	0x3184	; 0x3184 <sd_raw_send_command>
    3c34:	c8 2e       	mov	r12, r24
    3c36:	88 23       	and	r24, r24
    3c38:	19 f0       	breq	.+6      	; 0x3c40 <sd_raw_get_info+0x42>
    {
        unselect_card();
    3c3a:	2a 9a       	sbi	0x05, 2	; 5
        return 0;
    3c3c:	c1 2c       	mov	r12, r1
    3c3e:	12 c1       	rjmp	.+548    	; 0x3e64 <sd_raw_get_info+0x266>
    }
    while(sd_raw_rec_byte() != 0xfe);
    3c40:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
    3c44:	8e 3f       	cpi	r24, 0xFE	; 254
    3c46:	e1 f7       	brne	.-8      	; 0x3c40 <sd_raw_get_info+0x42>
    3c48:	e7 01       	movw	r28, r14
    3c4a:	21 96       	adiw	r28, 0x01	; 1
    3c4c:	00 e6       	ldi	r16, 0x60	; 96
    3c4e:	10 e0       	ldi	r17, 0x00	; 0
    3c50:	dd 24       	eor	r13, r13
    3c52:	d3 94       	inc	r13
    3c54:	04 c0       	rjmp	.+8      	; 0x3c5e <sd_raw_get_info+0x60>
    3c56:	d3 94       	inc	r13
    3c58:	08 50       	subi	r16, 0x08	; 8
    3c5a:	11 09       	sbc	r17, r1
    3c5c:	21 96       	adiw	r28, 0x01	; 1
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();
    3c5e:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
    3c62:	ef ef       	ldi	r30, 0xFF	; 255
    3c64:	ed 0d       	add	r30, r13

        switch(i)
    3c66:	4e 2f       	mov	r20, r30
    3c68:	50 e0       	ldi	r21, 0x00	; 0
    3c6a:	4f 30       	cpi	r20, 0x0F	; 15
    3c6c:	51 05       	cpc	r21, r1
    3c6e:	c8 f5       	brcc	.+114    	; 0x3ce2 <sd_raw_get_info+0xe4>
    3c70:	fa 01       	movw	r30, r20
    3c72:	ec 5c       	subi	r30, 0xCC	; 204
    3c74:	ff 4f       	sbci	r31, 0xFF	; 255
    3c76:	0c 94 b7 20 	jmp	0x416e	; 0x416e <__tablejump2__>
        {
            case 0:
                info->manufacturer = b;
    3c7a:	f7 01       	movw	r30, r14
    3c7c:	80 83       	st	Z, r24
                break;
    3c7e:	eb cf       	rjmp	.-42     	; 0x3c56 <sd_raw_get_info+0x58>
    3c80:	fe 01       	movw	r30, r28
    3c82:	31 97       	sbiw	r30, 0x01	; 1
            case 1:
            case 2:
                info->oem[i - 1] = b;
    3c84:	80 83       	st	Z, r24
                break;
    3c86:	2d c0       	rjmp	.+90     	; 0x3ce2 <sd_raw_get_info+0xe4>
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
    3c88:	88 83       	st	Y, r24
                break;
    3c8a:	2b c0       	rjmp	.+86     	; 0x3ce2 <sd_raw_get_info+0xe4>
            case 8:
                info->revision = b;
    3c8c:	f7 01       	movw	r30, r14
    3c8e:	82 87       	std	Z+10, r24	; 0x0a
                break;
    3c90:	e2 cf       	rjmp	.-60     	; 0x3c56 <sd_raw_get_info+0x58>
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (uint32_t) b << ((12 - i) * 8);
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	a0 e0       	ldi	r26, 0x00	; 0
    3c96:	b0 e0       	ldi	r27, 0x00	; 0
    3c98:	00 2e       	mov	r0, r16
    3c9a:	04 c0       	rjmp	.+8      	; 0x3ca4 <sd_raw_get_info+0xa6>
    3c9c:	88 0f       	add	r24, r24
    3c9e:	99 1f       	adc	r25, r25
    3ca0:	aa 1f       	adc	r26, r26
    3ca2:	bb 1f       	adc	r27, r27
    3ca4:	0a 94       	dec	r0
    3ca6:	d2 f7       	brpl	.-12     	; 0x3c9c <sd_raw_get_info+0x9e>
    3ca8:	f7 01       	movw	r30, r14
    3caa:	43 85       	ldd	r20, Z+11	; 0x0b
    3cac:	54 85       	ldd	r21, Z+12	; 0x0c
    3cae:	65 85       	ldd	r22, Z+13	; 0x0d
    3cb0:	76 85       	ldd	r23, Z+14	; 0x0e
    3cb2:	84 2b       	or	r24, r20
    3cb4:	95 2b       	or	r25, r21
    3cb6:	a6 2b       	or	r26, r22
    3cb8:	b7 2b       	or	r27, r23
    3cba:	83 87       	std	Z+11, r24	; 0x0b
    3cbc:	94 87       	std	Z+12, r25	; 0x0c
    3cbe:	a5 87       	std	Z+13, r26	; 0x0d
    3cc0:	b6 87       	std	Z+14, r27	; 0x0e
                break;
    3cc2:	0f c0       	rjmp	.+30     	; 0x3ce2 <sd_raw_get_info+0xe4>
            case 13:
                info->manufacturing_year = b << 4;
    3cc4:	82 95       	swap	r24
    3cc6:	80 7f       	andi	r24, 0xF0	; 240
    3cc8:	f7 01       	movw	r30, r14
    3cca:	87 87       	std	Z+15, r24	; 0x0f
                break;
    3ccc:	c4 cf       	rjmp	.-120    	; 0x3c56 <sd_raw_get_info+0x58>
            case 14:
                info->manufacturing_year |= b >> 4;
    3cce:	98 2f       	mov	r25, r24
    3cd0:	92 95       	swap	r25
    3cd2:	9f 70       	andi	r25, 0x0F	; 15
    3cd4:	f7 01       	movw	r30, r14
    3cd6:	27 85       	ldd	r18, Z+15	; 0x0f
    3cd8:	92 2b       	or	r25, r18
    3cda:	97 87       	std	Z+15, r25	; 0x0f
                info->manufacturing_month = b & 0x0f;
    3cdc:	8f 70       	andi	r24, 0x0F	; 15
    3cde:	80 8b       	std	Z+16, r24	; 0x10
                break;
    3ce0:	ba cf       	rjmp	.-140    	; 0x3c56 <sd_raw_get_info+0x58>
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    3ce2:	f1 e1       	ldi	r31, 0x11	; 17
    3ce4:	fd 15       	cp	r31, r13
    3ce6:	08 f0       	brcs	.+2      	; 0x3cea <sd_raw_get_info+0xec>
    3ce8:	b6 cf       	rjmp	.-148    	; 0x3c56 <sd_raw_get_info+0x58>
    uint16_t csd_c_size = 0;
#else
    uint32_t csd_c_size = 0;
#endif
    uint8_t csd_structure = 0;
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    3cea:	40 e0       	ldi	r20, 0x00	; 0
    3cec:	50 e0       	ldi	r21, 0x00	; 0
    3cee:	ba 01       	movw	r22, r20
    3cf0:	89 e0       	ldi	r24, 0x09	; 9
    3cf2:	0e 94 c2 18 	call	0x3184	; 0x3184 <sd_raw_send_command>
    3cf6:	c8 2f       	mov	r28, r24
    3cf8:	88 23       	and	r24, r24
    3cfa:	11 f0       	breq	.+4      	; 0x3d00 <sd_raw_get_info+0x102>
    {
        unselect_card();
    3cfc:	2a 9a       	sbi	0x05, 2	; 5
        return 0;
    3cfe:	b2 c0       	rjmp	.+356    	; 0x3e64 <sd_raw_get_info+0x266>
    }
    while(sd_raw_rec_byte() != 0xfe);
    3d00:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>
    3d04:	8e 3f       	cpi	r24, 0xFE	; 254
    3d06:	e1 f7       	brne	.-8      	; 0x3d00 <sd_raw_get_info+0x102>
    3d08:	d1 e0       	ldi	r29, 0x01	; 1
    3d0a:	10 e0       	ldi	r17, 0x00	; 0
    3d0c:	c1 2c       	mov	r12, r1
    3d0e:	d1 2c       	mov	r13, r1
    3d10:	b1 2c       	mov	r11, r1
    3d12:	a1 2c       	mov	r10, r1
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
    3d14:	99 24       	eor	r9, r9
    3d16:	93 94       	inc	r9
    3d18:	02 c0       	rjmp	.+4      	; 0x3d1e <sd_raw_get_info+0x120>
    3d1a:	cf 5f       	subi	r28, 0xFF	; 255
    3d1c:	df 5f       	subi	r29, 0xFF	; 255
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();
    3d1e:	0e 94 b8 18 	call	0x3170	; 0x3170 <sd_raw_rec_byte>

        if(i == 0)
    3d22:	c1 11       	cpse	r28, r1
    3d24:	06 c0       	rjmp	.+12     	; 0x3d32 <sd_raw_get_info+0x134>
        {
            csd_structure = b >> 6;
    3d26:	18 2f       	mov	r17, r24
    3d28:	12 95       	swap	r17
    3d2a:	16 95       	lsr	r17
    3d2c:	16 95       	lsr	r17
    3d2e:	13 70       	andi	r17, 0x03	; 3
    3d30:	f4 cf       	rjmp	.-24     	; 0x3d1a <sd_raw_get_info+0x11c>
        }
        else if(i == 14)
    3d32:	ce 30       	cpi	r28, 0x0E	; 14
    3d34:	b1 f4       	brne	.+44     	; 0x3d62 <sd_raw_get_info+0x164>
        {
            if(b & 0x40)
    3d36:	86 ff       	sbrs	r24, 6
    3d38:	02 c0       	rjmp	.+4      	; 0x3d3e <sd_raw_get_info+0x140>
                info->flag_copy = 1;
    3d3a:	f7 01       	movw	r30, r14
    3d3c:	91 8e       	std	Z+25, r9	; 0x19
            if(b & 0x20)
    3d3e:	85 ff       	sbrs	r24, 5
    3d40:	02 c0       	rjmp	.+4      	; 0x3d46 <sd_raw_get_info+0x148>
                info->flag_write_protect = 1;
    3d42:	f7 01       	movw	r30, r14
    3d44:	92 8e       	std	Z+26, r9	; 0x1a
            if(b & 0x10)
    3d46:	84 ff       	sbrs	r24, 4
    3d48:	02 c0       	rjmp	.+4      	; 0x3d4e <sd_raw_get_info+0x150>
                info->flag_write_protect_temp = 1;
    3d4a:	f7 01       	movw	r30, r14
    3d4c:	93 8e       	std	Z+27, r9	; 0x1b
            info->format = (b & 0x0c) >> 2;
    3d4e:	48 2f       	mov	r20, r24
    3d50:	4c 70       	andi	r20, 0x0C	; 12
    3d52:	50 e0       	ldi	r21, 0x00	; 0
    3d54:	55 95       	asr	r21
    3d56:	47 95       	ror	r20
    3d58:	55 95       	asr	r21
    3d5a:	47 95       	ror	r20
    3d5c:	f7 01       	movw	r30, r14
    3d5e:	44 8f       	std	Z+28, r20	; 0x1c
    3d60:	dc cf       	rjmp	.-72     	; 0x3d1a <sd_raw_get_info+0x11c>
        }
        else
        {
#if SD_RAW_SDHC
            if(csd_structure == 0x01)
    3d62:	11 30       	cpi	r17, 0x01	; 1
    3d64:	39 f5       	brne	.+78     	; 0x3db4 <sd_raw_get_info+0x1b6>
            {
                switch(i)
    3d66:	c7 30       	cpi	r28, 0x07	; 7
    3d68:	21 f0       	breq	.+8      	; 0x3d72 <sd_raw_get_info+0x174>
    3d6a:	40 f0       	brcs	.+16     	; 0x3d7c <sd_raw_get_info+0x17e>
    3d6c:	ca 30       	cpi	r28, 0x0A	; 10
    3d6e:	10 f0       	brcs	.+4      	; 0x3d74 <sd_raw_get_info+0x176>
    3d70:	05 c0       	rjmp	.+10     	; 0x3d7c <sd_raw_get_info+0x17e>
                {
                    case 7:
                        b &= 0x3f;
    3d72:	8f 73       	andi	r24, 0x3F	; 63
                    case 8:
                    case 9:
                        csd_c_size <<= 8;
    3d74:	3c 2d       	mov	r19, r12
    3d76:	22 27       	eor	r18, r18
                        csd_c_size |= b;
    3d78:	69 01       	movw	r12, r18
    3d7a:	c8 2a       	or	r12, r24
                        break;
                }
                if(i == 9)
    3d7c:	c9 30       	cpi	r28, 0x09	; 9
    3d7e:	09 f0       	breq	.+2      	; 0x3d82 <sd_raw_get_info+0x184>
    3d80:	69 c0       	rjmp	.+210    	; 0x3e54 <sd_raw_get_info+0x256>
                {
                    ++csd_c_size;
    3d82:	ff ef       	ldi	r31, 0xFF	; 255
    3d84:	cf 1a       	sub	r12, r31
    3d86:	df 0a       	sbc	r13, r31
                    info->capacity = (offset_t) csd_c_size * 512 * 1024;
    3d88:	a6 01       	movw	r20, r12
    3d8a:	2c 2d       	mov	r18, r12
    3d8c:	35 2f       	mov	r19, r21
    3d8e:	40 e0       	ldi	r20, 0x00	; 0
    3d90:	50 e0       	ldi	r21, 0x00	; 0
    3d92:	60 e0       	ldi	r22, 0x00	; 0
    3d94:	70 e0       	ldi	r23, 0x00	; 0
    3d96:	80 e0       	ldi	r24, 0x00	; 0
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	03 e1       	ldi	r16, 0x13	; 19
    3d9c:	0e 94 30 21 	call	0x4260	; 0x4260 <__ashldi3>
    3da0:	f7 01       	movw	r30, r14
    3da2:	21 8b       	std	Z+17, r18	; 0x11
    3da4:	32 8b       	std	Z+18, r19	; 0x12
    3da6:	43 8b       	std	Z+19, r20	; 0x13
    3da8:	54 8b       	std	Z+20, r21	; 0x14
    3daa:	65 8b       	std	Z+21, r22	; 0x15
    3dac:	76 8b       	std	Z+22, r23	; 0x16
    3dae:	87 8b       	std	Z+23, r24	; 0x17
    3db0:	90 8f       	std	Z+24, r25	; 0x18
    3db2:	b3 cf       	rjmp	.-154    	; 0x3d1a <sd_raw_get_info+0x11c>
                }
            }
            else if(csd_structure == 0x00)
    3db4:	11 11       	cpse	r17, r1
    3db6:	4e c0       	rjmp	.+156    	; 0x3e54 <sd_raw_get_info+0x256>
#endif
            {
                switch(i)
    3db8:	c7 30       	cpi	r28, 0x07	; 7
    3dba:	a9 f0       	breq	.+42     	; 0x3de6 <sd_raw_get_info+0x1e8>
    3dbc:	28 f4       	brcc	.+10     	; 0x3dc8 <sd_raw_get_info+0x1ca>
    3dbe:	c5 30       	cpi	r28, 0x05	; 5
    3dc0:	49 f0       	breq	.+18     	; 0x3dd4 <sd_raw_get_info+0x1d6>
    3dc2:	c6 30       	cpi	r28, 0x06	; 6
    3dc4:	51 f0       	breq	.+20     	; 0x3dda <sd_raw_get_info+0x1dc>
    3dc6:	46 c0       	rjmp	.+140    	; 0x3e54 <sd_raw_get_info+0x256>
    3dc8:	c9 30       	cpi	r28, 0x09	; 9
    3dca:	01 f1       	breq	.+64     	; 0x3e0c <sd_raw_get_info+0x20e>
    3dcc:	a0 f0       	brcs	.+40     	; 0x3df6 <sd_raw_get_info+0x1f8>
    3dce:	ca 30       	cpi	r28, 0x0A	; 10
    3dd0:	09 f1       	breq	.+66     	; 0x3e14 <sd_raw_get_info+0x216>
    3dd2:	40 c0       	rjmp	.+128    	; 0x3e54 <sd_raw_get_info+0x256>
                {
                    case 5:
                        csd_read_bl_len = b & 0x0f;
    3dd4:	8f 70       	andi	r24, 0x0F	; 15
    3dd6:	a8 2e       	mov	r10, r24
                        break;
    3dd8:	a0 cf       	rjmp	.-192    	; 0x3d1a <sd_raw_get_info+0x11c>
                    case 6:
                        csd_c_size = b & 0x03;
    3dda:	83 70       	andi	r24, 0x03	; 3
    3ddc:	28 2f       	mov	r18, r24
    3dde:	30 e0       	ldi	r19, 0x00	; 0
                        csd_c_size <<= 8;
    3de0:	d2 2e       	mov	r13, r18
    3de2:	cc 24       	eor	r12, r12
                        break;
    3de4:	9a cf       	rjmp	.-204    	; 0x3d1a <sd_raw_get_info+0x11c>
                    case 7:
                        csd_c_size |= b;
    3de6:	96 01       	movw	r18, r12
    3de8:	28 2b       	or	r18, r24
                        csd_c_size <<= 2;
    3dea:	69 01       	movw	r12, r18
    3dec:	cc 0c       	add	r12, r12
    3dee:	dd 1c       	adc	r13, r13
    3df0:	cc 0c       	add	r12, r12
    3df2:	dd 1c       	adc	r13, r13
                        break;
    3df4:	92 cf       	rjmp	.-220    	; 0x3d1a <sd_raw_get_info+0x11c>
                    case 8:
                        csd_c_size |= b >> 6;
    3df6:	82 95       	swap	r24
    3df8:	86 95       	lsr	r24
    3dfa:	86 95       	lsr	r24
    3dfc:	83 70       	andi	r24, 0x03	; 3
    3dfe:	96 01       	movw	r18, r12
    3e00:	28 2b       	or	r18, r24
                        ++csd_c_size;
    3e02:	69 01       	movw	r12, r18
    3e04:	ff ef       	ldi	r31, 0xFF	; 255
    3e06:	cf 1a       	sub	r12, r31
    3e08:	df 0a       	sbc	r13, r31
                        break;
    3e0a:	87 cf       	rjmp	.-242    	; 0x3d1a <sd_raw_get_info+0x11c>
                    case 9:
                        csd_c_size_mult = b & 0x03;
    3e0c:	83 70       	andi	r24, 0x03	; 3
                        csd_c_size_mult <<= 1;
    3e0e:	b8 2e       	mov	r11, r24
    3e10:	bb 0c       	add	r11, r11
                        break;
    3e12:	83 cf       	rjmp	.-250    	; 0x3d1a <sd_raw_get_info+0x11c>
                    case 10:
                        csd_c_size_mult |= b >> 7;
    3e14:	88 1f       	adc	r24, r24
    3e16:	88 27       	eor	r24, r24
    3e18:	88 1f       	adc	r24, r24
    3e1a:	b8 2a       	or	r11, r24

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
    3e1c:	c6 01       	movw	r24, r12
    3e1e:	a0 e0       	ldi	r26, 0x00	; 0
    3e20:	b0 e0       	ldi	r27, 0x00	; 0
    3e22:	6a 2d       	mov	r22, r10
    3e24:	70 e0       	ldi	r23, 0x00	; 0
    3e26:	6b 0d       	add	r22, r11
    3e28:	71 1d       	adc	r23, r1
    3e2a:	6e 5f       	subi	r22, 0xFE	; 254
    3e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e2e:	04 c0       	rjmp	.+8      	; 0x3e38 <sd_raw_get_info+0x23a>
    3e30:	88 0f       	add	r24, r24
    3e32:	99 1f       	adc	r25, r25
    3e34:	aa 1f       	adc	r26, r26
    3e36:	bb 1f       	adc	r27, r27
    3e38:	6a 95       	dec	r22
    3e3a:	d2 f7       	brpl	.-12     	; 0x3e30 <sd_raw_get_info+0x232>
    3e3c:	9c 01       	movw	r18, r24
    3e3e:	ad 01       	movw	r20, r26
    3e40:	f7 01       	movw	r30, r14
    3e42:	21 8b       	std	Z+17, r18	; 0x11
    3e44:	32 8b       	std	Z+18, r19	; 0x12
    3e46:	43 8b       	std	Z+19, r20	; 0x13
    3e48:	54 8b       	std	Z+20, r21	; 0x14
    3e4a:	15 8a       	std	Z+21, r1	; 0x15
    3e4c:	16 8a       	std	Z+22, r1	; 0x16
    3e4e:	17 8a       	std	Z+23, r1	; 0x17
    3e50:	10 8e       	std	Z+24, r1	; 0x18
                        break;
    3e52:	63 cf       	rjmp	.-314    	; 0x3d1a <sd_raw_get_info+0x11c>
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    3e54:	d2 31       	cpi	r29, 0x12	; 18
    3e56:	08 f4       	brcc	.+2      	; 0x3e5a <sd_raw_get_info+0x25c>
    3e58:	60 cf       	rjmp	.-320    	; 0x3d1a <sd_raw_get_info+0x11c>
                }
            }
        }
    }

    unselect_card();
    3e5a:	2a 9a       	sbi	0x05, 2	; 5

    return 1;
    3e5c:	cc 24       	eor	r12, r12
    3e5e:	c3 94       	inc	r12
    3e60:	01 c0       	rjmp	.+2      	; 0x3e64 <sd_raw_get_info+0x266>
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    if(!info || !sd_raw_available())
        return 0;
    3e62:	c1 2c       	mov	r12, r1
    }

    unselect_card();

    return 1;
}
    3e64:	8c 2d       	mov	r24, r12
    3e66:	df 91       	pop	r29
    3e68:	cf 91       	pop	r28
    3e6a:	1f 91       	pop	r17
    3e6c:	0f 91       	pop	r16
    3e6e:	ff 90       	pop	r15
    3e70:	ef 90       	pop	r14
    3e72:	df 90       	pop	r13
    3e74:	cf 90       	pop	r12
    3e76:	bf 90       	pop	r11
    3e78:	af 90       	pop	r10
    3e7a:	9f 90       	pop	r9
    3e7c:	08 95       	ret

00003e7e <uart_init>:
    uint8_t b = UDR;
    if(b == '\r')
        b = '\n';

    return b;
}
    3e7e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    3e82:	87 e6       	ldi	r24, 0x67	; 103
    3e84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    3e88:	86 e0       	ldi	r24, 0x06	; 6
    3e8a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    3e8e:	88 e9       	ldi	r24, 0x98	; 152
    3e90:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    3e94:	08 95       	ret

00003e96 <uart_putc>:
    3e96:	cf 93       	push	r28
    3e98:	c8 2f       	mov	r28, r24
    3e9a:	8a 30       	cpi	r24, 0x0A	; 10
    3e9c:	19 f4       	brne	.+6      	; 0x3ea4 <uart_putc+0xe>
    3e9e:	8d e0       	ldi	r24, 0x0D	; 13
    3ea0:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    3ea4:	e0 ec       	ldi	r30, 0xC0	; 192
    3ea6:	f0 e0       	ldi	r31, 0x00	; 0
    3ea8:	90 81       	ld	r25, Z
    3eaa:	95 ff       	sbrs	r25, 5
    3eac:	fd cf       	rjmp	.-6      	; 0x3ea8 <uart_putc+0x12>
    3eae:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    3eb2:	cf 91       	pop	r28
    3eb4:	08 95       	ret

00003eb6 <uart_putc_hex>:
    3eb6:	cf 93       	push	r28
    3eb8:	c8 2f       	mov	r28, r24
    3eba:	82 95       	swap	r24
    3ebc:	8f 70       	andi	r24, 0x0F	; 15
    3ebe:	8a 30       	cpi	r24, 0x0A	; 10
    3ec0:	20 f4       	brcc	.+8      	; 0x3eca <uart_putc_hex+0x14>
    3ec2:	80 5d       	subi	r24, 0xD0	; 208
    3ec4:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    3ec8:	03 c0       	rjmp	.+6      	; 0x3ed0 <uart_putc_hex+0x1a>
    3eca:	89 5a       	subi	r24, 0xA9	; 169
    3ecc:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    3ed0:	8c 2f       	mov	r24, r28
    3ed2:	8f 70       	andi	r24, 0x0F	; 15
    3ed4:	28 2f       	mov	r18, r24
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	2a 30       	cpi	r18, 0x0A	; 10
    3eda:	31 05       	cpc	r19, r1
    3edc:	24 f4       	brge	.+8      	; 0x3ee6 <uart_putc_hex+0x30>
    3ede:	80 5d       	subi	r24, 0xD0	; 208
    3ee0:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    3ee4:	03 c0       	rjmp	.+6      	; 0x3eec <uart_putc_hex+0x36>
    3ee6:	89 5a       	subi	r24, 0xA9	; 169
    3ee8:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    3eec:	cf 91       	pop	r28
    3eee:	08 95       	ret

00003ef0 <uart_putw_hex>:
    3ef0:	cf 93       	push	r28
    3ef2:	c8 2f       	mov	r28, r24
    3ef4:	89 2f       	mov	r24, r25
    3ef6:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <uart_putc_hex>
    3efa:	8c 2f       	mov	r24, r28
    3efc:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <uart_putc_hex>
    3f00:	cf 91       	pop	r28
    3f02:	08 95       	ret

00003f04 <uart_putdw_hex>:
    3f04:	cf 92       	push	r12
    3f06:	df 92       	push	r13
    3f08:	ef 92       	push	r14
    3f0a:	ff 92       	push	r15
    3f0c:	6b 01       	movw	r12, r22
    3f0e:	7c 01       	movw	r14, r24
    3f10:	c7 01       	movw	r24, r14
    3f12:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <uart_putw_hex>
    3f16:	c6 01       	movw	r24, r12
    3f18:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <uart_putw_hex>
    3f1c:	ff 90       	pop	r15
    3f1e:	ef 90       	pop	r14
    3f20:	df 90       	pop	r13
    3f22:	cf 90       	pop	r12
    3f24:	08 95       	ret

00003f26 <uart_putw_dec>:
    3f26:	cf 92       	push	r12
    3f28:	df 92       	push	r13
    3f2a:	ef 92       	push	r14
    3f2c:	ff 92       	push	r15
    3f2e:	0f 93       	push	r16
    3f30:	1f 93       	push	r17
    3f32:	cf 93       	push	r28
    3f34:	df 93       	push	r29
    3f36:	6c 01       	movw	r12, r24
    3f38:	0f 2e       	mov	r0, r31
    3f3a:	f5 e0       	ldi	r31, 0x05	; 5
    3f3c:	ef 2e       	mov	r14, r31
    3f3e:	f1 2c       	mov	r15, r1
    3f40:	f0 2d       	mov	r31, r0
    3f42:	40 e0       	ldi	r20, 0x00	; 0
    3f44:	c0 e1       	ldi	r28, 0x10	; 16
    3f46:	d7 e2       	ldi	r29, 0x27	; 39
    3f48:	01 e0       	ldi	r16, 0x01	; 1
    3f4a:	c6 01       	movw	r24, r12
    3f4c:	be 01       	movw	r22, r28
    3f4e:	0e 94 6d 20 	call	0x40da	; 0x40da <__udivmodhi4>
    3f52:	16 2f       	mov	r17, r22
    3f54:	61 11       	cpse	r22, r1
    3f56:	05 c0       	rjmp	.+10     	; 0x3f62 <uart_putw_dec+0x3c>
    3f58:	41 11       	cpse	r20, r1
    3f5a:	03 c0       	rjmp	.+6      	; 0x3f62 <uart_putw_dec+0x3c>
    3f5c:	c1 30       	cpi	r28, 0x01	; 1
    3f5e:	d1 05       	cpc	r29, r1
    3f60:	29 f4       	brne	.+10     	; 0x3f6c <uart_putw_dec+0x46>
    3f62:	80 e3       	ldi	r24, 0x30	; 48
    3f64:	81 0f       	add	r24, r17
    3f66:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    3f6a:	40 2f       	mov	r20, r16
    3f6c:	1c 9f       	mul	r17, r28
    3f6e:	c0 01       	movw	r24, r0
    3f70:	1d 9f       	mul	r17, r29
    3f72:	90 0d       	add	r25, r0
    3f74:	11 24       	eor	r1, r1
    3f76:	c8 1a       	sub	r12, r24
    3f78:	d9 0a       	sbc	r13, r25
    3f7a:	9e 01       	movw	r18, r28
    3f7c:	ad ec       	ldi	r26, 0xCD	; 205
    3f7e:	bc ec       	ldi	r27, 0xCC	; 204
    3f80:	0e 94 bd 20 	call	0x417a	; 0x417a <__umulhisi3>
    3f84:	ec 01       	movw	r28, r24
    3f86:	d6 95       	lsr	r29
    3f88:	c7 95       	ror	r28
    3f8a:	d6 95       	lsr	r29
    3f8c:	c7 95       	ror	r28
    3f8e:	d6 95       	lsr	r29
    3f90:	c7 95       	ror	r28
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	e8 1a       	sub	r14, r24
    3f96:	f1 08       	sbc	r15, r1
    3f98:	c1 f6       	brne	.-80     	; 0x3f4a <uart_putw_dec+0x24>
    3f9a:	df 91       	pop	r29
    3f9c:	cf 91       	pop	r28
    3f9e:	1f 91       	pop	r17
    3fa0:	0f 91       	pop	r16
    3fa2:	ff 90       	pop	r15
    3fa4:	ef 90       	pop	r14
    3fa6:	df 90       	pop	r13
    3fa8:	cf 90       	pop	r12
    3faa:	08 95       	ret

00003fac <uart_putdw_dec>:
    3fac:	3f 92       	push	r3
    3fae:	4f 92       	push	r4
    3fb0:	5f 92       	push	r5
    3fb2:	6f 92       	push	r6
    3fb4:	7f 92       	push	r7
    3fb6:	8f 92       	push	r8
    3fb8:	9f 92       	push	r9
    3fba:	af 92       	push	r10
    3fbc:	bf 92       	push	r11
    3fbe:	cf 92       	push	r12
    3fc0:	df 92       	push	r13
    3fc2:	ef 92       	push	r14
    3fc4:	ff 92       	push	r15
    3fc6:	0f 93       	push	r16
    3fc8:	1f 93       	push	r17
    3fca:	cf 93       	push	r28
    3fcc:	df 93       	push	r29
    3fce:	4b 01       	movw	r8, r22
    3fd0:	5c 01       	movw	r10, r24
    3fd2:	0a e0       	ldi	r16, 0x0A	; 10
    3fd4:	10 e0       	ldi	r17, 0x00	; 0
    3fd6:	d0 e0       	ldi	r29, 0x00	; 0
    3fd8:	0f 2e       	mov	r0, r31
    3fda:	c1 2c       	mov	r12, r1
    3fdc:	fa ec       	ldi	r31, 0xCA	; 202
    3fde:	df 2e       	mov	r13, r31
    3fe0:	fa e9       	ldi	r31, 0x9A	; 154
    3fe2:	ef 2e       	mov	r14, r31
    3fe4:	fb e3       	ldi	r31, 0x3B	; 59
    3fe6:	ff 2e       	mov	r15, r31
    3fe8:	f0 2d       	mov	r31, r0
    3fea:	33 24       	eor	r3, r3
    3fec:	33 94       	inc	r3
    3fee:	0f 2e       	mov	r0, r31
    3ff0:	fa e0       	ldi	r31, 0x0A	; 10
    3ff2:	4f 2e       	mov	r4, r31
    3ff4:	51 2c       	mov	r5, r1
    3ff6:	61 2c       	mov	r6, r1
    3ff8:	71 2c       	mov	r7, r1
    3ffa:	f0 2d       	mov	r31, r0
    3ffc:	c5 01       	movw	r24, r10
    3ffe:	b4 01       	movw	r22, r8
    4000:	a7 01       	movw	r20, r14
    4002:	96 01       	movw	r18, r12
    4004:	0e 94 95 20 	call	0x412a	; 0x412a <__udivmodsi4>
    4008:	c2 2f       	mov	r28, r18
    400a:	21 11       	cpse	r18, r1
    400c:	08 c0       	rjmp	.+16     	; 0x401e <uart_putdw_dec+0x72>
    400e:	d1 11       	cpse	r29, r1
    4010:	06 c0       	rjmp	.+12     	; 0x401e <uart_putdw_dec+0x72>
    4012:	81 e0       	ldi	r24, 0x01	; 1
    4014:	c8 16       	cp	r12, r24
    4016:	d1 04       	cpc	r13, r1
    4018:	e1 04       	cpc	r14, r1
    401a:	f1 04       	cpc	r15, r1
    401c:	29 f4       	brne	.+10     	; 0x4028 <uart_putdw_dec+0x7c>
    401e:	80 e3       	ldi	r24, 0x30	; 48
    4020:	8c 0f       	add	r24, r28
    4022:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    4026:	d3 2d       	mov	r29, r3
    4028:	ac 2f       	mov	r26, r28
    402a:	b0 e0       	ldi	r27, 0x00	; 0
    402c:	a7 01       	movw	r20, r14
    402e:	96 01       	movw	r18, r12
    4030:	0e 94 cc 20 	call	0x4198	; 0x4198 <__muluhisi3>
    4034:	86 1a       	sub	r8, r22
    4036:	97 0a       	sbc	r9, r23
    4038:	a8 0a       	sbc	r10, r24
    403a:	b9 0a       	sbc	r11, r25
    403c:	c7 01       	movw	r24, r14
    403e:	b6 01       	movw	r22, r12
    4040:	a3 01       	movw	r20, r6
    4042:	92 01       	movw	r18, r4
    4044:	0e 94 95 20 	call	0x412a	; 0x412a <__udivmodsi4>
    4048:	69 01       	movw	r12, r18
    404a:	7a 01       	movw	r14, r20
    404c:	01 50       	subi	r16, 0x01	; 1
    404e:	11 09       	sbc	r17, r1
    4050:	a9 f6       	brne	.-86     	; 0x3ffc <uart_putdw_dec+0x50>
    4052:	df 91       	pop	r29
    4054:	cf 91       	pop	r28
    4056:	1f 91       	pop	r17
    4058:	0f 91       	pop	r16
    405a:	ff 90       	pop	r15
    405c:	ef 90       	pop	r14
    405e:	df 90       	pop	r13
    4060:	cf 90       	pop	r12
    4062:	bf 90       	pop	r11
    4064:	af 90       	pop	r10
    4066:	9f 90       	pop	r9
    4068:	8f 90       	pop	r8
    406a:	7f 90       	pop	r7
    406c:	6f 90       	pop	r6
    406e:	5f 90       	pop	r5
    4070:	4f 90       	pop	r4
    4072:	3f 90       	pop	r3
    4074:	08 95       	ret

00004076 <uart_puts>:
    4076:	cf 93       	push	r28
    4078:	df 93       	push	r29
    407a:	ec 01       	movw	r28, r24
    407c:	88 81       	ld	r24, Y
    407e:	88 23       	and	r24, r24
    4080:	31 f0       	breq	.+12     	; 0x408e <uart_puts+0x18>
    4082:	21 96       	adiw	r28, 0x01	; 1
    4084:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    4088:	89 91       	ld	r24, Y+
    408a:	81 11       	cpse	r24, r1
    408c:	fb cf       	rjmp	.-10     	; 0x4084 <uart_puts+0xe>
    408e:	df 91       	pop	r29
    4090:	cf 91       	pop	r28
    4092:	08 95       	ret

00004094 <uart_puts_p>:
    4094:	cf 93       	push	r28
    4096:	df 93       	push	r29
    4098:	ec 01       	movw	r28, r24
    409a:	21 96       	adiw	r28, 0x01	; 1
    409c:	fc 01       	movw	r30, r24
    409e:	84 91       	lpm	r24, Z
    40a0:	88 23       	and	r24, r24
    40a2:	39 f0       	breq	.+14     	; 0x40b2 <uart_puts_p+0x1e>
    40a4:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <uart_putc>
    40a8:	fe 01       	movw	r30, r28
    40aa:	84 91       	lpm	r24, Z
    40ac:	21 96       	adiw	r28, 0x01	; 1
    40ae:	81 11       	cpse	r24, r1
    40b0:	f9 cf       	rjmp	.-14     	; 0x40a4 <uart_puts_p+0x10>
    40b2:	df 91       	pop	r29
    40b4:	cf 91       	pop	r28
    40b6:	08 95       	ret

000040b8 <__vector_18>:

EMPTY_INTERRUPT(USART_RXC_vect)
    40b8:	18 95       	reti

000040ba <__mulsi3>:
    40ba:	db 01       	movw	r26, r22
    40bc:	8f 93       	push	r24
    40be:	9f 93       	push	r25
    40c0:	0e 94 cc 20 	call	0x4198	; 0x4198 <__muluhisi3>
    40c4:	bf 91       	pop	r27
    40c6:	af 91       	pop	r26
    40c8:	a2 9f       	mul	r26, r18
    40ca:	80 0d       	add	r24, r0
    40cc:	91 1d       	adc	r25, r1
    40ce:	a3 9f       	mul	r26, r19
    40d0:	90 0d       	add	r25, r0
    40d2:	b2 9f       	mul	r27, r18
    40d4:	90 0d       	add	r25, r0
    40d6:	11 24       	eor	r1, r1
    40d8:	08 95       	ret

000040da <__udivmodhi4>:
    40da:	aa 1b       	sub	r26, r26
    40dc:	bb 1b       	sub	r27, r27
    40de:	51 e1       	ldi	r21, 0x11	; 17
    40e0:	07 c0       	rjmp	.+14     	; 0x40f0 <__udivmodhi4_ep>

000040e2 <__udivmodhi4_loop>:
    40e2:	aa 1f       	adc	r26, r26
    40e4:	bb 1f       	adc	r27, r27
    40e6:	a6 17       	cp	r26, r22
    40e8:	b7 07       	cpc	r27, r23
    40ea:	10 f0       	brcs	.+4      	; 0x40f0 <__udivmodhi4_ep>
    40ec:	a6 1b       	sub	r26, r22
    40ee:	b7 0b       	sbc	r27, r23

000040f0 <__udivmodhi4_ep>:
    40f0:	88 1f       	adc	r24, r24
    40f2:	99 1f       	adc	r25, r25
    40f4:	5a 95       	dec	r21
    40f6:	a9 f7       	brne	.-22     	; 0x40e2 <__udivmodhi4_loop>
    40f8:	80 95       	com	r24
    40fa:	90 95       	com	r25
    40fc:	bc 01       	movw	r22, r24
    40fe:	cd 01       	movw	r24, r26
    4100:	08 95       	ret

00004102 <__divmodhi4>:
    4102:	97 fb       	bst	r25, 7
    4104:	07 2e       	mov	r0, r23
    4106:	16 f4       	brtc	.+4      	; 0x410c <__divmodhi4+0xa>
    4108:	00 94       	com	r0
    410a:	07 d0       	rcall	.+14     	; 0x411a <__divmodhi4_neg1>
    410c:	77 fd       	sbrc	r23, 7
    410e:	09 d0       	rcall	.+18     	; 0x4122 <__divmodhi4_neg2>
    4110:	0e 94 6d 20 	call	0x40da	; 0x40da <__udivmodhi4>
    4114:	07 fc       	sbrc	r0, 7
    4116:	05 d0       	rcall	.+10     	; 0x4122 <__divmodhi4_neg2>
    4118:	3e f4       	brtc	.+14     	; 0x4128 <__divmodhi4_exit>

0000411a <__divmodhi4_neg1>:
    411a:	90 95       	com	r25
    411c:	81 95       	neg	r24
    411e:	9f 4f       	sbci	r25, 0xFF	; 255
    4120:	08 95       	ret

00004122 <__divmodhi4_neg2>:
    4122:	70 95       	com	r23
    4124:	61 95       	neg	r22
    4126:	7f 4f       	sbci	r23, 0xFF	; 255

00004128 <__divmodhi4_exit>:
    4128:	08 95       	ret

0000412a <__udivmodsi4>:
    412a:	a1 e2       	ldi	r26, 0x21	; 33
    412c:	1a 2e       	mov	r1, r26
    412e:	aa 1b       	sub	r26, r26
    4130:	bb 1b       	sub	r27, r27
    4132:	fd 01       	movw	r30, r26
    4134:	0d c0       	rjmp	.+26     	; 0x4150 <__udivmodsi4_ep>

00004136 <__udivmodsi4_loop>:
    4136:	aa 1f       	adc	r26, r26
    4138:	bb 1f       	adc	r27, r27
    413a:	ee 1f       	adc	r30, r30
    413c:	ff 1f       	adc	r31, r31
    413e:	a2 17       	cp	r26, r18
    4140:	b3 07       	cpc	r27, r19
    4142:	e4 07       	cpc	r30, r20
    4144:	f5 07       	cpc	r31, r21
    4146:	20 f0       	brcs	.+8      	; 0x4150 <__udivmodsi4_ep>
    4148:	a2 1b       	sub	r26, r18
    414a:	b3 0b       	sbc	r27, r19
    414c:	e4 0b       	sbc	r30, r20
    414e:	f5 0b       	sbc	r31, r21

00004150 <__udivmodsi4_ep>:
    4150:	66 1f       	adc	r22, r22
    4152:	77 1f       	adc	r23, r23
    4154:	88 1f       	adc	r24, r24
    4156:	99 1f       	adc	r25, r25
    4158:	1a 94       	dec	r1
    415a:	69 f7       	brne	.-38     	; 0x4136 <__udivmodsi4_loop>
    415c:	60 95       	com	r22
    415e:	70 95       	com	r23
    4160:	80 95       	com	r24
    4162:	90 95       	com	r25
    4164:	9b 01       	movw	r18, r22
    4166:	ac 01       	movw	r20, r24
    4168:	bd 01       	movw	r22, r26
    416a:	cf 01       	movw	r24, r30
    416c:	08 95       	ret

0000416e <__tablejump2__>:
    416e:	ee 0f       	add	r30, r30
    4170:	ff 1f       	adc	r31, r31
    4172:	05 90       	lpm	r0, Z+
    4174:	f4 91       	lpm	r31, Z
    4176:	e0 2d       	mov	r30, r0
    4178:	09 94       	ijmp

0000417a <__umulhisi3>:
    417a:	a2 9f       	mul	r26, r18
    417c:	b0 01       	movw	r22, r0
    417e:	b3 9f       	mul	r27, r19
    4180:	c0 01       	movw	r24, r0
    4182:	a3 9f       	mul	r26, r19
    4184:	70 0d       	add	r23, r0
    4186:	81 1d       	adc	r24, r1
    4188:	11 24       	eor	r1, r1
    418a:	91 1d       	adc	r25, r1
    418c:	b2 9f       	mul	r27, r18
    418e:	70 0d       	add	r23, r0
    4190:	81 1d       	adc	r24, r1
    4192:	11 24       	eor	r1, r1
    4194:	91 1d       	adc	r25, r1
    4196:	08 95       	ret

00004198 <__muluhisi3>:
    4198:	0e 94 bd 20 	call	0x417a	; 0x417a <__umulhisi3>
    419c:	a5 9f       	mul	r26, r21
    419e:	90 0d       	add	r25, r0
    41a0:	b4 9f       	mul	r27, r20
    41a2:	90 0d       	add	r25, r0
    41a4:	a4 9f       	mul	r26, r20
    41a6:	80 0d       	add	r24, r0
    41a8:	91 1d       	adc	r25, r1
    41aa:	11 24       	eor	r1, r1
    41ac:	08 95       	ret

000041ae <__muldi3>:
    41ae:	df 93       	push	r29
    41b0:	cf 93       	push	r28
    41b2:	1f 93       	push	r17
    41b4:	0f 93       	push	r16
    41b6:	9a 9d       	mul	r25, r10
    41b8:	f0 2d       	mov	r31, r0
    41ba:	21 9f       	mul	r18, r17
    41bc:	f0 0d       	add	r31, r0
    41be:	8b 9d       	mul	r24, r11
    41c0:	f0 0d       	add	r31, r0
    41c2:	8a 9d       	mul	r24, r10
    41c4:	e0 2d       	mov	r30, r0
    41c6:	f1 0d       	add	r31, r1
    41c8:	03 9f       	mul	r16, r19
    41ca:	f0 0d       	add	r31, r0
    41cc:	02 9f       	mul	r16, r18
    41ce:	e0 0d       	add	r30, r0
    41d0:	f1 1d       	adc	r31, r1
    41d2:	4e 9d       	mul	r20, r14
    41d4:	e0 0d       	add	r30, r0
    41d6:	f1 1d       	adc	r31, r1
    41d8:	5e 9d       	mul	r21, r14
    41da:	f0 0d       	add	r31, r0
    41dc:	4f 9d       	mul	r20, r15
    41de:	f0 0d       	add	r31, r0
    41e0:	7f 93       	push	r23
    41e2:	6f 93       	push	r22
    41e4:	bf 92       	push	r11
    41e6:	af 92       	push	r10
    41e8:	5f 93       	push	r21
    41ea:	4f 93       	push	r20
    41ec:	d5 01       	movw	r26, r10
    41ee:	0e 94 bd 20 	call	0x417a	; 0x417a <__umulhisi3>
    41f2:	8b 01       	movw	r16, r22
    41f4:	ac 01       	movw	r20, r24
    41f6:	d7 01       	movw	r26, r14
    41f8:	0e 94 bd 20 	call	0x417a	; 0x417a <__umulhisi3>
    41fc:	eb 01       	movw	r28, r22
    41fe:	e8 0f       	add	r30, r24
    4200:	f9 1f       	adc	r31, r25
    4202:	d6 01       	movw	r26, r12
    4204:	0e 94 27 21 	call	0x424e	; 0x424e <__muldi3_6>
    4208:	2f 91       	pop	r18
    420a:	3f 91       	pop	r19
    420c:	d6 01       	movw	r26, r12
    420e:	0e 94 bd 20 	call	0x417a	; 0x417a <__umulhisi3>
    4212:	c6 0f       	add	r28, r22
    4214:	d7 1f       	adc	r29, r23
    4216:	e8 1f       	adc	r30, r24
    4218:	f9 1f       	adc	r31, r25
    421a:	af 91       	pop	r26
    421c:	bf 91       	pop	r27
    421e:	0e 94 27 21 	call	0x424e	; 0x424e <__muldi3_6>
    4222:	2f 91       	pop	r18
    4224:	3f 91       	pop	r19
    4226:	0e 94 bd 20 	call	0x417a	; 0x417a <__umulhisi3>
    422a:	c6 0f       	add	r28, r22
    422c:	d7 1f       	adc	r29, r23
    422e:	e8 1f       	adc	r30, r24
    4230:	f9 1f       	adc	r31, r25
    4232:	d6 01       	movw	r26, r12
    4234:	0e 94 bd 20 	call	0x417a	; 0x417a <__umulhisi3>
    4238:	e6 0f       	add	r30, r22
    423a:	f7 1f       	adc	r31, r23
    423c:	98 01       	movw	r18, r16
    423e:	be 01       	movw	r22, r28
    4240:	cf 01       	movw	r24, r30
    4242:	11 24       	eor	r1, r1
    4244:	0f 91       	pop	r16
    4246:	1f 91       	pop	r17
    4248:	cf 91       	pop	r28
    424a:	df 91       	pop	r29
    424c:	08 95       	ret

0000424e <__muldi3_6>:
    424e:	0e 94 bd 20 	call	0x417a	; 0x417a <__umulhisi3>
    4252:	46 0f       	add	r20, r22
    4254:	57 1f       	adc	r21, r23
    4256:	c8 1f       	adc	r28, r24
    4258:	d9 1f       	adc	r29, r25
    425a:	08 f4       	brcc	.+2      	; 0x425e <__muldi3_6+0x10>
    425c:	31 96       	adiw	r30, 0x01	; 1
    425e:	08 95       	ret

00004260 <__ashldi3>:
    4260:	0f 93       	push	r16
    4262:	08 30       	cpi	r16, 0x08	; 8
    4264:	90 f0       	brcs	.+36     	; 0x428a <__ashldi3+0x2a>
    4266:	98 2f       	mov	r25, r24
    4268:	87 2f       	mov	r24, r23
    426a:	76 2f       	mov	r23, r22
    426c:	65 2f       	mov	r22, r21
    426e:	54 2f       	mov	r21, r20
    4270:	43 2f       	mov	r20, r19
    4272:	32 2f       	mov	r19, r18
    4274:	22 27       	eor	r18, r18
    4276:	08 50       	subi	r16, 0x08	; 8
    4278:	f4 cf       	rjmp	.-24     	; 0x4262 <__ashldi3+0x2>
    427a:	22 0f       	add	r18, r18
    427c:	33 1f       	adc	r19, r19
    427e:	44 1f       	adc	r20, r20
    4280:	55 1f       	adc	r21, r21
    4282:	66 1f       	adc	r22, r22
    4284:	77 1f       	adc	r23, r23
    4286:	88 1f       	adc	r24, r24
    4288:	99 1f       	adc	r25, r25
    428a:	0a 95       	dec	r16
    428c:	b2 f7       	brpl	.-20     	; 0x427a <__ashldi3+0x1a>
    428e:	0f 91       	pop	r16
    4290:	08 95       	ret

00004292 <__ashrdi3>:
    4292:	97 fb       	bst	r25, 7
    4294:	10 f8       	bld	r1, 0

00004296 <__lshrdi3>:
    4296:	16 94       	lsr	r1
    4298:	00 08       	sbc	r0, r0
    429a:	0f 93       	push	r16
    429c:	08 30       	cpi	r16, 0x08	; 8
    429e:	98 f0       	brcs	.+38     	; 0x42c6 <__lshrdi3+0x30>
    42a0:	08 50       	subi	r16, 0x08	; 8
    42a2:	23 2f       	mov	r18, r19
    42a4:	34 2f       	mov	r19, r20
    42a6:	45 2f       	mov	r20, r21
    42a8:	56 2f       	mov	r21, r22
    42aa:	67 2f       	mov	r22, r23
    42ac:	78 2f       	mov	r23, r24
    42ae:	89 2f       	mov	r24, r25
    42b0:	90 2d       	mov	r25, r0
    42b2:	f4 cf       	rjmp	.-24     	; 0x429c <__lshrdi3+0x6>
    42b4:	05 94       	asr	r0
    42b6:	97 95       	ror	r25
    42b8:	87 95       	ror	r24
    42ba:	77 95       	ror	r23
    42bc:	67 95       	ror	r22
    42be:	57 95       	ror	r21
    42c0:	47 95       	ror	r20
    42c2:	37 95       	ror	r19
    42c4:	27 95       	ror	r18
    42c6:	0a 95       	dec	r16
    42c8:	aa f7       	brpl	.-22     	; 0x42b4 <__lshrdi3+0x1e>
    42ca:	0f 91       	pop	r16
    42cc:	08 95       	ret

000042ce <__adddi3>:
    42ce:	2a 0d       	add	r18, r10
    42d0:	3b 1d       	adc	r19, r11
    42d2:	4c 1d       	adc	r20, r12
    42d4:	5d 1d       	adc	r21, r13
    42d6:	6e 1d       	adc	r22, r14
    42d8:	7f 1d       	adc	r23, r15
    42da:	80 1f       	adc	r24, r16
    42dc:	91 1f       	adc	r25, r17
    42de:	08 95       	ret

000042e0 <__adddi3_s8>:
    42e0:	00 24       	eor	r0, r0
    42e2:	a7 fd       	sbrc	r26, 7
    42e4:	00 94       	com	r0
    42e6:	2a 0f       	add	r18, r26
    42e8:	30 1d       	adc	r19, r0
    42ea:	40 1d       	adc	r20, r0
    42ec:	50 1d       	adc	r21, r0
    42ee:	60 1d       	adc	r22, r0
    42f0:	70 1d       	adc	r23, r0
    42f2:	80 1d       	adc	r24, r0
    42f4:	90 1d       	adc	r25, r0
    42f6:	08 95       	ret

000042f8 <__subdi3>:
    42f8:	2a 19       	sub	r18, r10
    42fa:	3b 09       	sbc	r19, r11
    42fc:	4c 09       	sbc	r20, r12
    42fe:	5d 09       	sbc	r21, r13
    4300:	6e 09       	sbc	r22, r14
    4302:	7f 09       	sbc	r23, r15
    4304:	80 0b       	sbc	r24, r16
    4306:	91 0b       	sbc	r25, r17
    4308:	08 95       	ret

0000430a <__cmpdi2>:
    430a:	2a 15       	cp	r18, r10
    430c:	3b 05       	cpc	r19, r11
    430e:	4c 05       	cpc	r20, r12
    4310:	5d 05       	cpc	r21, r13
    4312:	6e 05       	cpc	r22, r14
    4314:	7f 05       	cpc	r23, r15
    4316:	80 07       	cpc	r24, r16
    4318:	91 07       	cpc	r25, r17
    431a:	08 95       	ret

0000431c <__cmpdi2_s8>:
    431c:	00 24       	eor	r0, r0
    431e:	a7 fd       	sbrc	r26, 7
    4320:	00 94       	com	r0
    4322:	2a 17       	cp	r18, r26
    4324:	30 05       	cpc	r19, r0
    4326:	40 05       	cpc	r20, r0
    4328:	50 05       	cpc	r21, r0
    432a:	60 05       	cpc	r22, r0
    432c:	70 05       	cpc	r23, r0
    432e:	80 05       	cpc	r24, r0
    4330:	90 05       	cpc	r25, r0
    4332:	08 95       	ret

00004334 <memcpy>:
    4334:	fb 01       	movw	r30, r22
    4336:	dc 01       	movw	r26, r24
    4338:	02 c0       	rjmp	.+4      	; 0x433e <memcpy+0xa>
    433a:	01 90       	ld	r0, Z+
    433c:	0d 92       	st	X+, r0
    433e:	41 50       	subi	r20, 0x01	; 1
    4340:	50 40       	sbci	r21, 0x00	; 0
    4342:	d8 f7       	brcc	.-10     	; 0x433a <memcpy+0x6>
    4344:	08 95       	ret

00004346 <memset>:
    4346:	dc 01       	movw	r26, r24
    4348:	01 c0       	rjmp	.+2      	; 0x434c <memset+0x6>
    434a:	6d 93       	st	X+, r22
    434c:	41 50       	subi	r20, 0x01	; 1
    434e:	50 40       	sbci	r21, 0x00	; 0
    4350:	e0 f7       	brcc	.-8      	; 0x434a <memset+0x4>
    4352:	08 95       	ret

00004354 <strchr>:
    4354:	fc 01       	movw	r30, r24
    4356:	81 91       	ld	r24, Z+
    4358:	86 17       	cp	r24, r22
    435a:	21 f0       	breq	.+8      	; 0x4364 <strchr+0x10>
    435c:	88 23       	and	r24, r24
    435e:	d9 f7       	brne	.-10     	; 0x4356 <strchr+0x2>
    4360:	99 27       	eor	r25, r25
    4362:	08 95       	ret
    4364:	31 97       	sbiw	r30, 0x01	; 1
    4366:	cf 01       	movw	r24, r30
    4368:	08 95       	ret

0000436a <strcmp>:
    436a:	fb 01       	movw	r30, r22
    436c:	dc 01       	movw	r26, r24
    436e:	8d 91       	ld	r24, X+
    4370:	01 90       	ld	r0, Z+
    4372:	80 19       	sub	r24, r0
    4374:	01 10       	cpse	r0, r1
    4376:	d9 f3       	breq	.-10     	; 0x436e <strcmp+0x4>
    4378:	99 0b       	sbc	r25, r25
    437a:	08 95       	ret

0000437c <strncmp>:
    437c:	fb 01       	movw	r30, r22
    437e:	dc 01       	movw	r26, r24
    4380:	41 50       	subi	r20, 0x01	; 1
    4382:	50 40       	sbci	r21, 0x00	; 0
    4384:	30 f0       	brcs	.+12     	; 0x4392 <strncmp+0x16>
    4386:	8d 91       	ld	r24, X+
    4388:	01 90       	ld	r0, Z+
    438a:	80 19       	sub	r24, r0
    438c:	19 f4       	brne	.+6      	; 0x4394 <strncmp+0x18>
    438e:	00 20       	and	r0, r0
    4390:	b9 f7       	brne	.-18     	; 0x4380 <strncmp+0x4>
    4392:	88 1b       	sub	r24, r24
    4394:	99 0b       	sbc	r25, r25
    4396:	08 95       	ret

00004398 <strrchr>:
    4398:	fc 01       	movw	r30, r24
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	01 90       	ld	r0, Z+
    43a0:	06 16       	cp	r0, r22
    43a2:	09 f4       	brne	.+2      	; 0x43a6 <strrchr+0xe>
    43a4:	cf 01       	movw	r24, r30
    43a6:	00 20       	and	r0, r0
    43a8:	d1 f7       	brne	.-12     	; 0x439e <strrchr+0x6>
    43aa:	01 97       	sbiw	r24, 0x01	; 1
    43ac:	08 95       	ret

000043ae <_exit>:
    43ae:	f8 94       	cli

000043b0 <__stop_program>:
    43b0:	ff cf       	rjmp	.-2      	; 0x43b0 <__stop_program>
