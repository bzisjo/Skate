
uSD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  0000439a  0000442e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000439a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002fe  00800128  00800128  00004456  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004456  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004488  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  000044c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005497  00000000  00000000  00004740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001133  00000000  00000000  00009bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000289d  00000000  00000000  0000ad0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f00  00000000  00000000  0000d5a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f87  00000000  00000000  0000e4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000076b9  00000000  00000000  0000f42f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d8  00000000  00000000  00016ae8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__ctors_end>
       4:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
       8:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
       c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      10:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      14:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      18:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      1c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      20:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      24:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      28:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      2c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      30:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      34:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      38:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      3c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      40:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      44:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      48:	0c 94 50 20 	jmp	0x40a0	; 0x40a0 <__vector_18>
      4c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      50:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      54:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      58:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      5c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      60:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      64:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__bad_interrupt>
      68:	31 1e       	adc	r3, r17
      6a:	34 1e       	adc	r3, r20
      6c:	34 1e       	adc	r3, r20
      6e:	38 1e       	adc	r3, r24
      70:	38 1e       	adc	r3, r24
      72:	38 1e       	adc	r3, r24
      74:	38 1e       	adc	r3, r24
      76:	38 1e       	adc	r3, r24
      78:	3a 1e       	adc	r3, r26
      7a:	3d 1e       	adc	r3, r29
      7c:	3d 1e       	adc	r3, r29
      7e:	3d 1e       	adc	r3, r29
      80:	3d 1e       	adc	r3, r29
      82:	56 1e       	adc	r5, r22
      84:	5b 1e       	adc	r5, r27

00000086 <__trampolines_end>:
      86:	66 72       	andi	r22, 0x26	; 38
      88:	65 65       	ori	r22, 0x55	; 85
      8a:	3a 20       	and	r3, r10
      8c:	20 20       	and	r2, r0
	...

0000008f <__c.2076>:
      8f:	66 6f 72 6d 61 74 3a 20 00                          format: .

00000098 <__c.2074>:
      98:	77 72 2e 70 72 2e 3a 20 00                          wr.pr.: .

000000a1 <__c.2072>:
      a1:	63 6f 70 79 3a 20 20 20 00                          copy:   .

000000aa <__c.2070>:
      aa:	4d 42 0a 00                                         MB..

000000ae <__c.2068>:
      ae:	73 69 7a 65 3a 20 20 20 00                          size:   .

000000b7 <__c.2066>:
      b7:	64 61 74 65 3a 20 20 20 00                          date:   .

000000c0 <__c.2064>:
      c0:	73 65 72 69 61 6c 3a 20 30 78 00                    serial: 0x.

000000cb <__c.2062>:
      cb:	72 65 76 3a 20 20 20 20 00                          rev:    .

000000d4 <__c.2060>:
      d4:	70 72 6f 64 3a 20 20 20 00                          prod:   .

000000dd <__c.2058>:
      dd:	6f 65 6d 3a 20 20 20 20 00                          oem:    .

000000e6 <__c.2056>:
      e6:	6d 61 6e 75 66 3a 20 20 30 78 00                    manuf:  0x.

000000f1 <__c.2016>:
      f1:	64 6f 6e 65 0a 00                                   done..

000000f7 <__c.2013>:
      f7:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     107:	20 66 69 6c 65 0a 00                                 file..

0000010e <__c.2011>:
     10e:	77 72 69 74 69 6e 67 20 68 61 70 70 65 6e 73 20     writing happens 
     11e:	6e 6f 77 0a 00                                      now..

00000123 <__c.2007>:
     123:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
     133:	20 00                                                .

00000135 <__c.2004>:
     135:	6f 70 65 6e 20 65 72 72 6f 72 0a 00                 open error..

00000141 <__c.2000>:
     141:	6f 70 65 6e 69 6e 67 20 72 6f 6f 74 20 64 69 72     opening root dir
     151:	65 63 74 6f 72 79 20 66 61 69 6c 65 64 0a 00        ectory failed..

00000160 <__c.1996>:
     160:	6f 70 65 6e 69 6e 67 20 66 69 6c 65 73 79 73 74     opening filesyst
     170:	65 6d 20 66 61 69 6c 65 64 0a 00                    em failed..

0000017b <__c.1993>:
     17b:	6f 70 65 6e 69 6e 67 20 70 61 72 74 69 74 69 6f     opening partitio
     18b:	6e 20 66 61 69 6c 65 64 0a 00                       n failed..

00000195 <__c.1990>:
     195:	4d 4d 43 2f 53 44 20 69 6e 69 74 69 61 6c 69 7a     MMC/SD initializ
     1a5:	61 74 69 6f 6e 20 66 61 69 6c 65 64 0a 00           ation failed..

000001b3 <__c.1988>:
     1b3:	67 6f 69 6e 67 20 69 6e 74 6f 20 69 6e 69 74 0a     going into init.
	...

000001c4 <__ctors_end>:
     1c4:	11 24       	eor	r1, r1
     1c6:	1f be       	out	0x3f, r1	; 63
     1c8:	cf ef       	ldi	r28, 0xFF	; 255
     1ca:	d8 e0       	ldi	r29, 0x08	; 8
     1cc:	de bf       	out	0x3e, r29	; 62
     1ce:	cd bf       	out	0x3d, r28	; 61

000001d0 <__do_copy_data>:
     1d0:	11 e0       	ldi	r17, 0x01	; 1
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b1 e0       	ldi	r27, 0x01	; 1
     1d6:	ea e9       	ldi	r30, 0x9A	; 154
     1d8:	f3 e4       	ldi	r31, 0x43	; 67
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <__do_copy_data+0x10>
     1dc:	05 90       	lpm	r0, Z+
     1de:	0d 92       	st	X+, r0
     1e0:	a8 32       	cpi	r26, 0x28	; 40
     1e2:	b1 07       	cpc	r27, r17
     1e4:	d9 f7       	brne	.-10     	; 0x1dc <__do_copy_data+0xc>

000001e6 <__do_clear_bss>:
     1e6:	24 e0       	ldi	r18, 0x04	; 4
     1e8:	a8 e2       	ldi	r26, 0x28	; 40
     1ea:	b1 e0       	ldi	r27, 0x01	; 1
     1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <.do_clear_bss_start>

000001ee <.do_clear_bss_loop>:
     1ee:	1d 92       	st	X+, r1

000001f0 <.do_clear_bss_start>:
     1f0:	a6 32       	cpi	r26, 0x26	; 38
     1f2:	b2 07       	cpc	r27, r18
     1f4:	e1 f7       	brne	.-8      	; 0x1ee <.do_clear_bss_loop>
     1f6:	0e 94 29 16 	call	0x2c52	; 0x2c52 <main>
     1fa:	0c 94 cb 21 	jmp	0x4396	; 0x4396 <_exit>

000001fe <__bad_interrupt>:
     1fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000202 <read16>:
 * \param[in] p Pointer from where to read the integer.
 * \returns The 16-bit integer read from memory.
 */
uint16_t read16(const uint8_t* p)
{
    return (((uint16_t) p[1]) << 8) |
     202:	fc 01       	movw	r30, r24
     204:	21 81       	ldd	r18, Z+1	; 0x01
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	32 2f       	mov	r19, r18
     20a:	22 27       	eor	r18, r18
           (((uint16_t) p[0]) << 0);
     20c:	80 81       	ld	r24, Z
}
     20e:	a9 01       	movw	r20, r18
     210:	48 2b       	or	r20, r24
     212:	ca 01       	movw	r24, r20
     214:	08 95       	ret

00000216 <read32>:
 *
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
     216:	fc 01       	movw	r30, r24
    return (((uint32_t) p[3]) << 24) |
     218:	23 81       	ldd	r18, Z+3	; 0x03
           (((uint32_t) p[2]) << 16) |
     21a:	62 81       	ldd	r22, Z+2	; 0x02
     21c:	86 2f       	mov	r24, r22
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	a0 e0       	ldi	r26, 0x00	; 0
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	dc 01       	movw	r26, r24
     226:	99 27       	eor	r25, r25
     228:	88 27       	eor	r24, r24
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
     22a:	b2 2b       	or	r27, r18
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
     22c:	20 81       	ld	r18, Z
     22e:	82 2b       	or	r24, r18
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
     230:	21 81       	ldd	r18, Z+1	; 0x01
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    return (((uint32_t) p[3]) << 24) |
     232:	bc 01       	movw	r22, r24
     234:	cd 01       	movw	r24, r26
     236:	72 2b       	or	r23, r18
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
}
     238:	08 95       	ret

0000023a <write16>:
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 16-bit integer to write.
 */
void write16(uint8_t* p, uint16_t i)
{
    p[1] = (uint8_t) ((i & 0xff00) >> 8);
     23a:	fc 01       	movw	r30, r24
     23c:	71 83       	std	Z+1, r23	; 0x01
    p[0] = (uint8_t) ((i & 0x00ff) >> 0);
     23e:	60 83       	st	Z, r22
     240:	08 95       	ret

00000242 <write32>:
 *
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 32-bit integer to write.
 */
void write32(uint8_t* p, uint32_t i)
{
     242:	fc 01       	movw	r30, r24
    p[3] = (uint8_t) ((i & 0xff000000) >> 24);
     244:	73 83       	std	Z+3, r23	; 0x03
    p[2] = (uint8_t) ((i & 0x00ff0000) >> 16);
     246:	62 83       	std	Z+2, r22	; 0x02
    p[1] = (uint8_t) ((i & 0x0000ff00) >>  8);
     248:	51 83       	std	Z+1, r21	; 0x01
    p[0] = (uint8_t) ((i & 0x000000ff) >>  0);
     24a:	40 83       	st	Z, r20
     24c:	08 95       	ret

0000024e <fat_get_next_cluster>:
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    return 1;
}
     24e:	8f 92       	push	r8
     250:	9f 92       	push	r9
     252:	af 92       	push	r10
     254:	bf 92       	push	r11
     256:	cf 92       	push	r12
     258:	df 92       	push	r13
     25a:	ef 92       	push	r14
     25c:	ff 92       	push	r15
     25e:	0f 93       	push	r16
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	00 d0       	rcall	.+0      	; 0x268 <fat_get_next_cluster+0x1a>
     268:	00 d0       	rcall	.+0      	; 0x26a <fat_get_next_cluster+0x1c>
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
     26e:	00 97       	sbiw	r24, 0x00	; 0
     270:	09 f4       	brne	.+2      	; 0x274 <fat_get_next_cluster+0x26>
     272:	85 c0       	rjmp	.+266    	; 0x37e <fat_get_next_cluster+0x130>
     274:	42 30       	cpi	r20, 0x02	; 2
     276:	51 05       	cpc	r21, r1
     278:	61 05       	cpc	r22, r1
     27a:	71 05       	cpc	r23, r1
     27c:	08 f4       	brcc	.+2      	; 0x280 <fat_get_next_cluster+0x32>
     27e:	84 c0       	rjmp	.+264    	; 0x388 <fat_get_next_cluster+0x13a>
     280:	fc 01       	movw	r30, r24
     282:	a0 81       	ld	r26, Z
     284:	b1 81       	ldd	r27, Z+1	; 0x01
     286:	18 96       	adiw	r26, 0x08	; 8
     288:	8c 91       	ld	r24, X
     28a:	18 97       	sbiw	r26, 0x08	; 8
     28c:	8b 30       	cpi	r24, 0x0B	; 11
     28e:	09 f0       	breq	.+2      	; 0x292 <fat_get_next_cluster+0x44>
     290:	40 c0       	rjmp	.+128    	; 0x312 <fat_get_next_cluster+0xc4>
     292:	4a 01       	movw	r8, r20
     294:	5b 01       	movw	r10, r22
     296:	24 2f       	mov	r18, r20
     298:	39 2d       	mov	r19, r9
     29a:	4a 2d       	mov	r20, r10
     29c:	5b 2d       	mov	r21, r11
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	70 e0       	ldi	r23, 0x00	; 0
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	02 e0       	ldi	r16, 0x02	; 2
     2a8:	0e 94 24 21 	call	0x4248	; 0x4248 <__ashldi3>
     2ac:	a2 84       	ldd	r10, Z+10	; 0x0a
     2ae:	b3 84       	ldd	r11, Z+11	; 0x0b
     2b0:	c4 84       	ldd	r12, Z+12	; 0x0c
     2b2:	d5 84       	ldd	r13, Z+13	; 0x0d
     2b4:	e6 84       	ldd	r14, Z+14	; 0x0e
     2b6:	f7 84       	ldd	r15, Z+15	; 0x0f
     2b8:	00 89       	ldd	r16, Z+16	; 0x10
     2ba:	11 89       	ldd	r17, Z+17	; 0x11
     2bc:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
     2c0:	ed 91       	ld	r30, X+
     2c2:	fc 91       	ld	r31, X
     2c4:	68 94       	set
     2c6:	ee 24       	eor	r14, r14
     2c8:	e2 f8       	bld	r14, 2
     2ca:	f1 2c       	mov	r15, r1
     2cc:	8e 01       	movw	r16, r28
     2ce:	0f 5f       	subi	r16, 0xFF	; 255
     2d0:	1f 4f       	sbci	r17, 0xFF	; 255
     2d2:	09 95       	icall
     2d4:	88 23       	and	r24, r24
     2d6:	c1 f0       	breq	.+48     	; 0x308 <fat_get_next_cluster+0xba>
     2d8:	c9 80       	ldd	r12, Y+1	; 0x01
     2da:	da 80       	ldd	r13, Y+2	; 0x02
     2dc:	eb 80       	ldd	r14, Y+3	; 0x03
     2de:	fc 80       	ldd	r15, Y+4	; 0x04
     2e0:	c1 14       	cp	r12, r1
     2e2:	d1 04       	cpc	r13, r1
     2e4:	e1 04       	cpc	r14, r1
     2e6:	f1 04       	cpc	r15, r1
     2e8:	79 f0       	breq	.+30     	; 0x308 <fat_get_next_cluster+0xba>
     2ea:	d7 01       	movw	r26, r14
     2ec:	c6 01       	movw	r24, r12
     2ee:	80 5f       	subi	r24, 0xF0	; 240
     2f0:	9f 4f       	sbci	r25, 0xFF	; 255
     2f2:	af 4f       	sbci	r26, 0xFF	; 255
     2f4:	bf 40       	sbci	r27, 0x0F	; 15
     2f6:	40 97       	sbiw	r24, 0x10	; 16
     2f8:	a1 05       	cpc	r26, r1
     2fa:	b1 05       	cpc	r27, r1
     2fc:	28 f0       	brcs	.+10     	; 0x308 <fat_get_next_cluster+0xba>
     2fe:	6c 2d       	mov	r22, r12
     300:	7d 2d       	mov	r23, r13
     302:	8e 2d       	mov	r24, r14
     304:	9f 2d       	mov	r25, r15
     306:	44 c0       	rjmp	.+136    	; 0x390 <fat_get_next_cluster+0x142>
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	3f c0       	rjmp	.+126    	; 0x390 <fat_get_next_cluster+0x142>
     312:	4a 01       	movw	r8, r20
     314:	5b 01       	movw	r10, r22
     316:	24 2f       	mov	r18, r20
     318:	39 2d       	mov	r19, r9
     31a:	4a 2d       	mov	r20, r10
     31c:	5b 2d       	mov	r21, r11
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	01 e0       	ldi	r16, 0x01	; 1
     328:	0e 94 24 21 	call	0x4248	; 0x4248 <__ashldi3>
     32c:	a2 84       	ldd	r10, Z+10	; 0x0a
     32e:	b3 84       	ldd	r11, Z+11	; 0x0b
     330:	c4 84       	ldd	r12, Z+12	; 0x0c
     332:	d5 84       	ldd	r13, Z+13	; 0x0d
     334:	e6 84       	ldd	r14, Z+14	; 0x0e
     336:	f7 84       	ldd	r15, Z+15	; 0x0f
     338:	00 89       	ldd	r16, Z+16	; 0x10
     33a:	11 89       	ldd	r17, Z+17	; 0x11
     33c:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
     340:	ed 91       	ld	r30, X+
     342:	fc 91       	ld	r31, X
     344:	68 94       	set
     346:	ee 24       	eor	r14, r14
     348:	e1 f8       	bld	r14, 1
     34a:	f1 2c       	mov	r15, r1
     34c:	8e 01       	movw	r16, r28
     34e:	0f 5f       	subi	r16, 0xFF	; 255
     350:	1f 4f       	sbci	r17, 0xFF	; 255
     352:	09 95       	icall
     354:	88 23       	and	r24, r24
     356:	71 f0       	breq	.+28     	; 0x374 <fat_get_next_cluster+0x126>
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	9a 81       	ldd	r25, Y+2	; 0x02
     35c:	6c 01       	movw	r12, r24
     35e:	e1 2c       	mov	r14, r1
     360:	f1 2c       	mov	r15, r1
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	8f 3e       	cpi	r24, 0xEF	; 239
     366:	9f 4f       	sbci	r25, 0xFF	; 255
     368:	28 f4       	brcc	.+10     	; 0x374 <fat_get_next_cluster+0x126>
     36a:	6c 2d       	mov	r22, r12
     36c:	7d 2d       	mov	r23, r13
     36e:	8e 2d       	mov	r24, r14
     370:	9f 2d       	mov	r25, r15
     372:	0e c0       	rjmp	.+28     	; 0x390 <fat_get_next_cluster+0x142>
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	09 c0       	rjmp	.+18     	; 0x390 <fat_get_next_cluster+0x142>
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	04 c0       	rjmp	.+8      	; 0x390 <fat_get_next_cluster+0x142>
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	ff 90       	pop	r15
     3a2:	ef 90       	pop	r14
     3a4:	df 90       	pop	r13
     3a6:	cf 90       	pop	r12
     3a8:	bf 90       	pop	r11
     3aa:	af 90       	pop	r10
     3ac:	9f 90       	pop	r9
     3ae:	8f 90       	pop	r8
     3b0:	08 95       	ret

000003b2 <fat_free_clusters>:
     3b2:	2f 92       	push	r2
     3b4:	3f 92       	push	r3
     3b6:	4f 92       	push	r4
     3b8:	5f 92       	push	r5
     3ba:	6f 92       	push	r6
     3bc:	7f 92       	push	r7
     3be:	8f 92       	push	r8
     3c0:	9f 92       	push	r9
     3c2:	af 92       	push	r10
     3c4:	bf 92       	push	r11
     3c6:	cf 92       	push	r12
     3c8:	df 92       	push	r13
     3ca:	ef 92       	push	r14
     3cc:	ff 92       	push	r15
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	62 97       	sbiw	r28, 0x12	; 18
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	3c 01       	movw	r6, r24
     3e8:	1a 01       	movw	r2, r20
     3ea:	2b 01       	movw	r4, r22
     3ec:	89 2b       	or	r24, r25
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <fat_free_clusters+0x40>
     3f0:	eb c0       	rjmp	.+470    	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
     3f2:	42 30       	cpi	r20, 0x02	; 2
     3f4:	51 05       	cpc	r21, r1
     3f6:	61 05       	cpc	r22, r1
     3f8:	71 05       	cpc	r23, r1
     3fa:	08 f4       	brcc	.+2      	; 0x3fe <fat_free_clusters+0x4c>
     3fc:	e7 c0       	rjmp	.+462    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     3fe:	d3 01       	movw	r26, r6
     400:	1a 96       	adiw	r26, 0x0a	; 10
     402:	bc 91       	ld	r27, X
     404:	bd 83       	std	Y+5, r27	; 0x05
     406:	f3 01       	movw	r30, r6
     408:	f3 85       	ldd	r31, Z+11	; 0x0b
     40a:	fe 83       	std	Y+6, r31	; 0x06
     40c:	d3 01       	movw	r26, r6
     40e:	1c 96       	adiw	r26, 0x0c	; 12
     410:	bc 91       	ld	r27, X
     412:	bf 83       	std	Y+7, r27	; 0x07
     414:	f3 01       	movw	r30, r6
     416:	f5 85       	ldd	r31, Z+13	; 0x0d
     418:	f8 87       	std	Y+8, r31	; 0x08
     41a:	d3 01       	movw	r26, r6
     41c:	1e 96       	adiw	r26, 0x0e	; 14
     41e:	bc 91       	ld	r27, X
     420:	b9 87       	std	Y+9, r27	; 0x09
     422:	f3 01       	movw	r30, r6
     424:	f7 85       	ldd	r31, Z+15	; 0x0f
     426:	fa 87       	std	Y+10, r31	; 0x0a
     428:	d3 01       	movw	r26, r6
     42a:	50 96       	adiw	r26, 0x10	; 16
     42c:	bc 91       	ld	r27, X
     42e:	bb 87       	std	Y+11, r27	; 0x0b
     430:	f3 01       	movw	r30, r6
     432:	f1 89       	ldd	r31, Z+17	; 0x11
     434:	fc 87       	std	Y+12, r31	; 0x0c
     436:	d3 01       	movw	r26, r6
     438:	ed 91       	ld	r30, X+
     43a:	fc 91       	ld	r31, X
     43c:	80 85       	ldd	r24, Z+8	; 0x08
     43e:	8b 30       	cpi	r24, 0x0B	; 11
     440:	39 f0       	breq	.+14     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     442:	41 15       	cp	r20, r1
     444:	51 05       	cpc	r21, r1
     446:	61 05       	cpc	r22, r1
     448:	71 05       	cpc	r23, r1
     44a:	09 f0       	breq	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44c:	5d c0       	rjmp	.+186    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     44e:	b6 c0       	rjmp	.+364    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     450:	45 2b       	or	r20, r21
     452:	46 2b       	or	r20, r22
     454:	47 2b       	or	r20, r23
     456:	19 f4       	brne	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     458:	51 c0       	rjmp	.+162    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     45a:	14 01       	movw	r2, r8
     45c:	25 01       	movw	r4, r10
     45e:	52 01       	movw	r10, r4
     460:	41 01       	movw	r8, r2
     462:	22 2d       	mov	r18, r2
     464:	39 2d       	mov	r19, r9
     466:	4a 2d       	mov	r20, r10
     468:	5b 2d       	mov	r21, r11
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	02 e0       	ldi	r16, 0x02	; 2
     474:	0e 94 24 21 	call	0x4248	; 0x4248 <__ashldi3>
     478:	ad 80       	ldd	r10, Y+5	; 0x05
     47a:	be 80       	ldd	r11, Y+6	; 0x06
     47c:	cf 80       	ldd	r12, Y+7	; 0x07
     47e:	d8 84       	ldd	r13, Y+8	; 0x08
     480:	e9 84       	ldd	r14, Y+9	; 0x09
     482:	fa 84       	ldd	r15, Y+10	; 0x0a
     484:	0b 85       	ldd	r16, Y+11	; 0x0b
     486:	1c 85       	ldd	r17, Y+12	; 0x0c
     488:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
     48c:	d2 2e       	mov	r13, r18
     48e:	c3 2e       	mov	r12, r19
     490:	4d 87       	std	Y+13, r20	; 0x0d
     492:	5e 87       	std	Y+14, r21	; 0x0e
     494:	6f 87       	std	Y+15, r22	; 0x0f
     496:	78 8b       	std	Y+16, r23	; 0x10
     498:	89 8b       	std	Y+17, r24	; 0x11
     49a:	9a 8b       	std	Y+18, r25	; 0x12
     49c:	d3 01       	movw	r26, r6
     49e:	ed 91       	ld	r30, X+
     4a0:	fc 91       	ld	r31, X
     4a2:	01 90       	ld	r0, Z+
     4a4:	f0 81       	ld	r31, Z
     4a6:	e0 2d       	mov	r30, r0
     4a8:	68 94       	set
     4aa:	ee 24       	eor	r14, r14
     4ac:	e2 f8       	bld	r14, 2
     4ae:	f1 2c       	mov	r15, r1
     4b0:	8e 01       	movw	r16, r28
     4b2:	0f 5f       	subi	r16, 0xFF	; 255
     4b4:	1f 4f       	sbci	r17, 0xFF	; 255
     4b6:	09 95       	icall
     4b8:	88 23       	and	r24, r24
     4ba:	09 f4       	brne	.+2      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4bc:	2c c1       	rjmp	.+600    	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     4be:	89 80       	ldd	r8, Y+1	; 0x01
     4c0:	9a 80       	ldd	r9, Y+2	; 0x02
     4c2:	ab 80       	ldd	r10, Y+3	; 0x03
     4c4:	bc 80       	ldd	r11, Y+4	; 0x04
     4c6:	81 14       	cp	r8, r1
     4c8:	91 04       	cpc	r9, r1
     4ca:	a1 04       	cpc	r10, r1
     4cc:	b1 04       	cpc	r11, r1
     4ce:	c1 f0       	breq	.+48     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4d0:	d5 01       	movw	r26, r10
     4d2:	c4 01       	movw	r24, r8
     4d4:	80 5f       	subi	r24, 0xF0	; 240
     4d6:	9f 4f       	sbci	r25, 0xFF	; 255
     4d8:	af 4f       	sbci	r26, 0xFF	; 255
     4da:	bf 40       	sbci	r27, 0x0F	; 15
     4dc:	08 97       	sbiw	r24, 0x08	; 8
     4de:	a1 05       	cpc	r26, r1
     4e0:	b1 05       	cpc	r27, r1
     4e2:	80 f0       	brcs	.+32     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     4e4:	d5 01       	movw	r26, r10
     4e6:	c4 01       	movw	r24, r8
     4e8:	88 5f       	subi	r24, 0xF8	; 248
     4ea:	9f 4f       	sbci	r25, 0xFF	; 255
     4ec:	af 4f       	sbci	r26, 0xFF	; 255
     4ee:	bf 40       	sbci	r27, 0x0F	; 15
     4f0:	08 97       	sbiw	r24, 0x08	; 8
     4f2:	a1 05       	cpc	r26, r1
     4f4:	b1 05       	cpc	r27, r1
     4f6:	08 f4       	brcc	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4f8:	86 c0       	rjmp	.+268    	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
     4fa:	ab c0       	rjmp	.+342    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	0b c1       	rjmp	.+534    	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	09 c1       	rjmp	.+530    	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	07 c1       	rjmp	.+526    	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     508:	db 01       	movw	r26, r22
     50a:	ca 01       	movw	r24, r20
     50c:	4c 01       	movw	r8, r24
     50e:	5d 01       	movw	r10, r26
     510:	28 2f       	mov	r18, r24
     512:	39 2d       	mov	r19, r9
     514:	4a 2d       	mov	r20, r10
     516:	5b 2d       	mov	r21, r11
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	01 e0       	ldi	r16, 0x01	; 1
     522:	0e 94 24 21 	call	0x4248	; 0x4248 <__ashldi3>
     526:	ad 80       	ldd	r10, Y+5	; 0x05
     528:	be 80       	ldd	r11, Y+6	; 0x06
     52a:	cf 80       	ldd	r12, Y+7	; 0x07
     52c:	d8 84       	ldd	r13, Y+8	; 0x08
     52e:	e9 84       	ldd	r14, Y+9	; 0x09
     530:	fa 84       	ldd	r15, Y+10	; 0x0a
     532:	0b 85       	ldd	r16, Y+11	; 0x0b
     534:	1c 85       	ldd	r17, Y+12	; 0x0c
     536:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
     53a:	22 2e       	mov	r2, r18
     53c:	33 2e       	mov	r3, r19
     53e:	44 2e       	mov	r4, r20
     540:	55 2e       	mov	r5, r21
     542:	d6 2e       	mov	r13, r22
     544:	c7 2e       	mov	r12, r23
     546:	a8 2e       	mov	r10, r24
     548:	b9 2e       	mov	r11, r25
     54a:	d3 01       	movw	r26, r6
     54c:	ed 91       	ld	r30, X+
     54e:	fc 91       	ld	r31, X
     550:	01 90       	ld	r0, Z+
     552:	f0 81       	ld	r31, Z
     554:	e0 2d       	mov	r30, r0
     556:	68 94       	set
     558:	ee 24       	eor	r14, r14
     55a:	e1 f8       	bld	r14, 1
     55c:	f1 2c       	mov	r15, r1
     55e:	8e 01       	movw	r16, r28
     560:	0f 5f       	subi	r16, 0xFF	; 255
     562:	1f 4f       	sbci	r17, 0xFF	; 255
     564:	09 95       	icall
     566:	88 23       	and	r24, r24
     568:	09 f4       	brne	.+2      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
     56a:	d5 c0       	rjmp	.+426    	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     56c:	89 80       	ldd	r8, Y+1	; 0x01
     56e:	9a 80       	ldd	r9, Y+2	; 0x02
     570:	81 14       	cp	r8, r1
     572:	91 04       	cpc	r9, r1
     574:	29 f1       	breq	.+74     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     576:	c4 01       	movw	r24, r8
     578:	40 96       	adiw	r24, 0x10	; 16
     57a:	08 97       	sbiw	r24, 0x08	; 8
     57c:	18 f1       	brcs	.+70     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
     57e:	b8 ef       	ldi	r27, 0xF8	; 248
     580:	8b 16       	cp	r8, r27
     582:	bf ef       	ldi	r27, 0xFF	; 255
     584:	9b 06       	cpc	r9, r27
     586:	08 f0       	brcs	.+2      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
     588:	6e c0       	rjmp	.+220    	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     58a:	1a 82       	std	Y+2, r1	; 0x02
     58c:	19 82       	std	Y+1, r1	; 0x01
     58e:	d3 01       	movw	r26, r6
     590:	ed 91       	ld	r30, X+
     592:	fc 91       	ld	r31, X
     594:	04 80       	ldd	r0, Z+4	; 0x04
     596:	f5 81       	ldd	r31, Z+5	; 0x05
     598:	e0 2d       	mov	r30, r0
     59a:	22 2d       	mov	r18, r2
     59c:	33 2d       	mov	r19, r3
     59e:	44 2d       	mov	r20, r4
     5a0:	55 2d       	mov	r21, r5
     5a2:	6d 2d       	mov	r22, r13
     5a4:	7c 2d       	mov	r23, r12
     5a6:	8a 2d       	mov	r24, r10
     5a8:	9b 2d       	mov	r25, r11
     5aa:	09 95       	icall
     5ac:	c4 01       	movw	r24, r8
     5ae:	a0 e0       	ldi	r26, 0x00	; 0
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	00 97       	sbiw	r24, 0x00	; 0
     5b4:	a1 05       	cpc	r26, r1
     5b6:	b1 05       	cpc	r27, r1
     5b8:	09 f0       	breq	.+2      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     5ba:	a8 cf       	rjmp	.-176    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	ab c0       	rjmp	.+342    	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	a9 c0       	rjmp	.+338    	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	a7 c0       	rjmp	.+334    	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	a5 c0       	rjmp	.+330    	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	a3 c0       	rjmp	.+326    	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     5d0:	19 82       	std	Y+1, r1	; 0x01
     5d2:	1a 82       	std	Y+2, r1	; 0x02
     5d4:	1b 82       	std	Y+3, r1	; 0x03
     5d6:	1c 82       	std	Y+4, r1	; 0x04
     5d8:	d3 01       	movw	r26, r6
     5da:	ed 91       	ld	r30, X+
     5dc:	fc 91       	ld	r31, X
     5de:	04 80       	ldd	r0, Z+4	; 0x04
     5e0:	f5 81       	ldd	r31, Z+5	; 0x05
     5e2:	e0 2d       	mov	r30, r0
     5e4:	68 94       	set
     5e6:	ee 24       	eor	r14, r14
     5e8:	e2 f8       	bld	r14, 2
     5ea:	f1 2c       	mov	r15, r1
     5ec:	8e 01       	movw	r16, r28
     5ee:	0f 5f       	subi	r16, 0xFF	; 255
     5f0:	1f 4f       	sbci	r17, 0xFF	; 255
     5f2:	2d 2d       	mov	r18, r13
     5f4:	3c 2d       	mov	r19, r12
     5f6:	4d 85       	ldd	r20, Y+13	; 0x0d
     5f8:	5e 85       	ldd	r21, Y+14	; 0x0e
     5fa:	6f 85       	ldd	r22, Y+15	; 0x0f
     5fc:	78 89       	ldd	r23, Y+16	; 0x10
     5fe:	89 89       	ldd	r24, Y+17	; 0x11
     600:	9a 89       	ldd	r25, Y+18	; 0x12
     602:	09 95       	icall
     604:	7b cf       	rjmp	.-266    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     606:	f3 01       	movw	r30, r6
     608:	86 a5       	ldd	r24, Z+46	; 0x2e
     60a:	97 a5       	ldd	r25, Z+47	; 0x2f
     60c:	a0 a9       	ldd	r26, Z+48	; 0x30
     60e:	b1 a9       	ldd	r27, Z+49	; 0x31
     610:	89 2b       	or	r24, r25
     612:	8a 2b       	or	r24, r26
     614:	8b 2b       	or	r24, r27
     616:	09 f4       	brne	.+2      	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
     618:	5f c0       	rjmp	.+190    	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
     61a:	da cf       	rjmp	.-76     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     61c:	19 82       	std	Y+1, r1	; 0x01
     61e:	1a 82       	std	Y+2, r1	; 0x02
     620:	1b 82       	std	Y+3, r1	; 0x03
     622:	1c 82       	std	Y+4, r1	; 0x04
     624:	d3 01       	movw	r26, r6
     626:	ed 91       	ld	r30, X+
     628:	fc 91       	ld	r31, X
     62a:	04 80       	ldd	r0, Z+4	; 0x04
     62c:	f5 81       	ldd	r31, Z+5	; 0x05
     62e:	e0 2d       	mov	r30, r0
     630:	68 94       	set
     632:	ee 24       	eor	r14, r14
     634:	e2 f8       	bld	r14, 2
     636:	f1 2c       	mov	r15, r1
     638:	8e 01       	movw	r16, r28
     63a:	0f 5f       	subi	r16, 0xFF	; 255
     63c:	1f 4f       	sbci	r17, 0xFF	; 255
     63e:	2d 2d       	mov	r18, r13
     640:	3c 2d       	mov	r19, r12
     642:	4d 85       	ldd	r20, Y+13	; 0x0d
     644:	5e 85       	ldd	r21, Y+14	; 0x0e
     646:	6f 85       	ldd	r22, Y+15	; 0x0f
     648:	78 89       	ldd	r23, Y+16	; 0x10
     64a:	89 89       	ldd	r24, Y+17	; 0x11
     64c:	9a 89       	ldd	r25, Y+18	; 0x12
     64e:	09 95       	icall
     650:	04 cf       	rjmp	.-504    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     652:	f3 01       	movw	r30, r6
     654:	86 a5       	ldd	r24, Z+46	; 0x2e
     656:	97 a5       	ldd	r25, Z+47	; 0x2f
     658:	a0 a9       	ldd	r26, Z+48	; 0x30
     65a:	b1 a9       	ldd	r27, Z+49	; 0x31
     65c:	89 2b       	or	r24, r25
     65e:	8a 2b       	or	r24, r26
     660:	8b 2b       	or	r24, r27
     662:	d1 f0       	breq	.+52     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
     664:	db cf       	rjmp	.-74     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     666:	1a 82       	std	Y+2, r1	; 0x02
     668:	19 82       	std	Y+1, r1	; 0x01
     66a:	d3 01       	movw	r26, r6
     66c:	ed 91       	ld	r30, X+
     66e:	fc 91       	ld	r31, X
     670:	04 80       	ldd	r0, Z+4	; 0x04
     672:	f5 81       	ldd	r31, Z+5	; 0x05
     674:	e0 2d       	mov	r30, r0
     676:	68 94       	set
     678:	ee 24       	eor	r14, r14
     67a:	e1 f8       	bld	r14, 1
     67c:	f1 2c       	mov	r15, r1
     67e:	8e 01       	movw	r16, r28
     680:	0f 5f       	subi	r16, 0xFF	; 255
     682:	1f 4f       	sbci	r17, 0xFF	; 255
     684:	22 2d       	mov	r18, r2
     686:	33 2d       	mov	r19, r3
     688:	44 2d       	mov	r20, r4
     68a:	55 2d       	mov	r21, r5
     68c:	6d 2d       	mov	r22, r13
     68e:	7c 2d       	mov	r23, r12
     690:	8a 2d       	mov	r24, r10
     692:	9b 2d       	mov	r25, r11
     694:	09 95       	icall
     696:	92 cf       	rjmp	.-220    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     698:	f3 01       	movw	r30, r6
     69a:	26 a6       	std	Z+46, r2	; 0x2e
     69c:	37 a6       	std	Z+47, r3	; 0x2f
     69e:	40 aa       	std	Z+48, r4	; 0x30
     6a0:	51 aa       	std	Z+49, r5	; 0x31
     6a2:	19 82       	std	Y+1, r1	; 0x01
     6a4:	1a 82       	std	Y+2, r1	; 0x02
     6a6:	1b 82       	std	Y+3, r1	; 0x03
     6a8:	1c 82       	std	Y+4, r1	; 0x04
     6aa:	01 90       	ld	r0, Z+
     6ac:	f0 81       	ld	r31, Z
     6ae:	e0 2d       	mov	r30, r0
     6b0:	04 80       	ldd	r0, Z+4	; 0x04
     6b2:	f5 81       	ldd	r31, Z+5	; 0x05
     6b4:	e0 2d       	mov	r30, r0
     6b6:	68 94       	set
     6b8:	ee 24       	eor	r14, r14
     6ba:	e2 f8       	bld	r14, 2
     6bc:	f1 2c       	mov	r15, r1
     6be:	8e 01       	movw	r16, r28
     6c0:	0f 5f       	subi	r16, 0xFF	; 255
     6c2:	1f 4f       	sbci	r17, 0xFF	; 255
     6c4:	2d 2d       	mov	r18, r13
     6c6:	3c 2d       	mov	r19, r12
     6c8:	4d 85       	ldd	r20, Y+13	; 0x0d
     6ca:	5e 85       	ldd	r21, Y+14	; 0x0e
     6cc:	6f 85       	ldd	r22, Y+15	; 0x0f
     6ce:	78 89       	ldd	r23, Y+16	; 0x10
     6d0:	89 89       	ldd	r24, Y+17	; 0x11
     6d2:	9a 89       	ldd	r25, Y+18	; 0x12
     6d4:	09 95       	icall
     6d6:	c1 ce       	rjmp	.-638    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     6d8:	26 a6       	std	Z+46, r2	; 0x2e
     6da:	37 a6       	std	Z+47, r3	; 0x2f
     6dc:	40 aa       	std	Z+48, r4	; 0x30
     6de:	51 aa       	std	Z+49, r5	; 0x31
     6e0:	19 82       	std	Y+1, r1	; 0x01
     6e2:	1a 82       	std	Y+2, r1	; 0x02
     6e4:	1b 82       	std	Y+3, r1	; 0x03
     6e6:	1c 82       	std	Y+4, r1	; 0x04
     6e8:	01 90       	ld	r0, Z+
     6ea:	f0 81       	ld	r31, Z
     6ec:	e0 2d       	mov	r30, r0
     6ee:	04 80       	ldd	r0, Z+4	; 0x04
     6f0:	f5 81       	ldd	r31, Z+5	; 0x05
     6f2:	e0 2d       	mov	r30, r0
     6f4:	68 94       	set
     6f6:	ee 24       	eor	r14, r14
     6f8:	e2 f8       	bld	r14, 2
     6fa:	f1 2c       	mov	r15, r1
     6fc:	8e 01       	movw	r16, r28
     6fe:	0f 5f       	subi	r16, 0xFF	; 255
     700:	1f 4f       	sbci	r17, 0xFF	; 255
     702:	2d 2d       	mov	r18, r13
     704:	3c 2d       	mov	r19, r12
     706:	4d 85       	ldd	r20, Y+13	; 0x0d
     708:	5e 85       	ldd	r21, Y+14	; 0x0e
     70a:	6f 85       	ldd	r22, Y+15	; 0x0f
     70c:	78 89       	ldd	r23, Y+16	; 0x10
     70e:	89 89       	ldd	r24, Y+17	; 0x11
     710:	9a 89       	ldd	r25, Y+18	; 0x12
     712:	09 95       	icall
     714:	f3 ce       	rjmp	.-538    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     716:	62 96       	adiw	r28, 0x12	; 18
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	ff 90       	pop	r15
     72c:	ef 90       	pop	r14
     72e:	df 90       	pop	r13
     730:	cf 90       	pop	r12
     732:	bf 90       	pop	r11
     734:	af 90       	pop	r10
     736:	9f 90       	pop	r9
     738:	8f 90       	pop	r8
     73a:	7f 90       	pop	r7
     73c:	6f 90       	pop	r6
     73e:	5f 90       	pop	r5
     740:	4f 90       	pop	r4
     742:	3f 90       	pop	r3
     744:	2f 90       	pop	r2
     746:	08 95       	ret

00000748 <fat_append_clusters>:
     748:	2f 92       	push	r2
     74a:	3f 92       	push	r3
     74c:	4f 92       	push	r4
     74e:	5f 92       	push	r5
     750:	6f 92       	push	r6
     752:	7f 92       	push	r7
     754:	8f 92       	push	r8
     756:	9f 92       	push	r9
     758:	af 92       	push	r10
     75a:	bf 92       	push	r11
     75c:	cf 92       	push	r12
     75e:	df 92       	push	r13
     760:	ef 92       	push	r14
     762:	ff 92       	push	r15
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	a9 97       	sbiw	r28, 0x29	; 41
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	9b a3       	std	Y+35, r25	; 0x23
     77e:	8a a3       	std	Y+34, r24	; 0x22
     780:	4e a3       	std	Y+38, r20	; 0x26
     782:	5f a3       	std	Y+39, r21	; 0x27
     784:	68 a7       	std	Y+40, r22	; 0x28
     786:	79 a7       	std	Y+41, r23	; 0x29
     788:	0b 87       	std	Y+11, r16	; 0x0b
     78a:	1c 87       	std	Y+12, r17	; 0x0c
     78c:	2d 87       	std	Y+13, r18	; 0x0d
     78e:	3e 87       	std	Y+14, r19	; 0x0e
     790:	00 97       	sbiw	r24, 0x00	; 0
     792:	09 f4       	brne	.+2      	; 0x796 <fat_append_clusters+0x4e>
     794:	1c c2       	rjmp	.+1080   	; 0xbce <__stack+0x2cf>
     796:	dc 01       	movw	r26, r24
     798:	ed 91       	ld	r30, X+
     79a:	fc 91       	ld	r31, X
     79c:	11 97       	sbiw	r26, 0x01	; 1
     79e:	20 81       	ld	r18, Z
     7a0:	31 81       	ldd	r19, Z+1	; 0x01
     7a2:	3d 8f       	std	Y+29, r19	; 0x1d
     7a4:	2c 8f       	std	Y+28, r18	; 0x1c
     7a6:	44 81       	ldd	r20, Z+4	; 0x04
     7a8:	55 81       	ldd	r21, Z+5	; 0x05
     7aa:	5d a3       	std	Y+37, r21	; 0x25
     7ac:	4c a3       	std	Y+36, r20	; 0x24
     7ae:	1a 96       	adiw	r26, 0x0a	; 10
     7b0:	5c 91       	ld	r21, X
     7b2:	1a 97       	sbiw	r26, 0x0a	; 10
     7b4:	5c 8b       	std	Y+20, r21	; 0x14
     7b6:	1b 96       	adiw	r26, 0x0b	; 11
     7b8:	8c 91       	ld	r24, X
     7ba:	1b 97       	sbiw	r26, 0x0b	; 11
     7bc:	8d 8b       	std	Y+21, r24	; 0x15
     7be:	1c 96       	adiw	r26, 0x0c	; 12
     7c0:	9c 91       	ld	r25, X
     7c2:	1c 97       	sbiw	r26, 0x0c	; 12
     7c4:	9e 8b       	std	Y+22, r25	; 0x16
     7c6:	1d 96       	adiw	r26, 0x0d	; 13
     7c8:	ac 91       	ld	r26, X
     7ca:	af 8b       	std	Y+23, r26	; 0x17
     7cc:	aa a1       	ldd	r26, Y+34	; 0x22
     7ce:	bb a1       	ldd	r27, Y+35	; 0x23
     7d0:	1e 96       	adiw	r26, 0x0e	; 14
     7d2:	bc 91       	ld	r27, X
     7d4:	b8 8f       	std	Y+24, r27	; 0x18
     7d6:	aa a1       	ldd	r26, Y+34	; 0x22
     7d8:	bb a1       	ldd	r27, Y+35	; 0x23
     7da:	1f 96       	adiw	r26, 0x0f	; 15
     7dc:	bc 91       	ld	r27, X
     7de:	b9 8f       	std	Y+25, r27	; 0x19
     7e0:	aa a1       	ldd	r26, Y+34	; 0x22
     7e2:	bb a1       	ldd	r27, Y+35	; 0x23
     7e4:	50 96       	adiw	r26, 0x10	; 16
     7e6:	bc 91       	ld	r27, X
     7e8:	ba 8f       	std	Y+26, r27	; 0x1a
     7ea:	aa a1       	ldd	r26, Y+34	; 0x22
     7ec:	bb a1       	ldd	r27, Y+35	; 0x23
     7ee:	51 96       	adiw	r26, 0x11	; 17
     7f0:	bc 91       	ld	r27, X
     7f2:	bb 8f       	std	Y+27, r27	; 0x1b
     7f4:	aa a1       	ldd	r26, Y+34	; 0x22
     7f6:	bb a1       	ldd	r27, Y+35	; 0x23
     7f8:	9e 96       	adiw	r26, 0x2e	; 46
     7fa:	4d 90       	ld	r4, X+
     7fc:	5d 90       	ld	r5, X+
     7fe:	6d 90       	ld	r6, X+
     800:	7c 90       	ld	r7, X
     802:	d1 97       	sbiw	r26, 0x31	; 49
     804:	b1 e0       	ldi	r27, 0x01	; 1
     806:	bb 8b       	std	Y+19, r27	; 0x13
     808:	80 85       	ldd	r24, Z+8	; 0x08
     80a:	8b 30       	cpi	r24, 0x0B	; 11
     80c:	09 f0       	breq	.+2      	; 0x810 <fat_append_clusters+0xc8>
     80e:	1b 8a       	std	Y+19, r1	; 0x13
     810:	eb 89       	ldd	r30, Y+19	; 0x13
     812:	ee 23       	and	r30, r30
     814:	a9 f0       	breq	.+42     	; 0x840 <fat_append_clusters+0xf8>
     816:	ea a1       	ldd	r30, Y+34	; 0x22
     818:	fb a1       	ldd	r31, Y+35	; 0x23
     81a:	82 89       	ldd	r24, Z+18	; 0x12
     81c:	93 89       	ldd	r25, Z+19	; 0x13
     81e:	a4 89       	ldd	r26, Z+20	; 0x14
     820:	b5 89       	ldd	r27, Z+21	; 0x15
     822:	9c 01       	movw	r18, r24
     824:	ad 01       	movw	r20, r26
     826:	56 95       	lsr	r21
     828:	47 95       	ror	r20
     82a:	37 95       	ror	r19
     82c:	27 95       	ror	r18
     82e:	56 95       	lsr	r21
     830:	47 95       	ror	r20
     832:	37 95       	ror	r19
     834:	27 95       	ror	r18
     836:	2e 8f       	std	Y+30, r18	; 0x1e
     838:	3f 8f       	std	Y+31, r19	; 0x1f
     83a:	48 a3       	std	Y+32, r20	; 0x20
     83c:	59 a3       	std	Y+33, r21	; 0x21
     83e:	10 c0       	rjmp	.+32     	; 0x860 <fat_append_clusters+0x118>
     840:	ea a1       	ldd	r30, Y+34	; 0x22
     842:	fb a1       	ldd	r31, Y+35	; 0x23
     844:	82 89       	ldd	r24, Z+18	; 0x12
     846:	93 89       	ldd	r25, Z+19	; 0x13
     848:	a4 89       	ldd	r26, Z+20	; 0x14
     84a:	b5 89       	ldd	r27, Z+21	; 0x15
     84c:	9c 01       	movw	r18, r24
     84e:	ad 01       	movw	r20, r26
     850:	56 95       	lsr	r21
     852:	47 95       	ror	r20
     854:	37 95       	ror	r19
     856:	27 95       	ror	r18
     858:	2e 8f       	std	Y+30, r18	; 0x1e
     85a:	3f 8f       	std	Y+31, r19	; 0x1f
     85c:	48 a3       	std	Y+32, r20	; 0x20
     85e:	59 a3       	std	Y+33, r21	; 0x21
     860:	aa a1       	ldd	r26, Y+34	; 0x22
     862:	bb a1       	ldd	r27, Y+35	; 0x23
     864:	9e 96       	adiw	r26, 0x2e	; 46
     866:	1d 92       	st	X+, r1
     868:	1d 92       	st	X+, r1
     86a:	1d 92       	st	X+, r1
     86c:	1c 92       	st	X, r1
     86e:	d1 97       	sbiw	r26, 0x31	; 49
     870:	2e 8d       	ldd	r18, Y+30	; 0x1e
     872:	3f 8d       	ldd	r19, Y+31	; 0x1f
     874:	48 a1       	ldd	r20, Y+32	; 0x20
     876:	59 a1       	ldd	r21, Y+33	; 0x21
     878:	21 15       	cp	r18, r1
     87a:	31 05       	cpc	r19, r1
     87c:	41 05       	cpc	r20, r1
     87e:	51 05       	cpc	r21, r1
     880:	09 f4       	brne	.+2      	; 0x884 <fat_append_clusters+0x13c>
     882:	1f c1       	rjmp	.+574    	; 0xac2 <__stack+0x1c3>
     884:	2f 83       	std	Y+7, r18	; 0x07
     886:	38 87       	std	Y+8, r19	; 0x08
     888:	49 87       	std	Y+9, r20	; 0x09
     88a:	5a 87       	std	Y+10, r21	; 0x0a
     88c:	1f 86       	std	Y+15, r1	; 0x0f
     88e:	18 8a       	std	Y+16, r1	; 0x10
     890:	19 8a       	std	Y+17, r1	; 0x11
     892:	1a 8a       	std	Y+18, r1	; 0x12
     894:	32 e0       	ldi	r19, 0x02	; 2
     896:	43 16       	cp	r4, r19
     898:	51 04       	cpc	r5, r1
     89a:	61 04       	cpc	r6, r1
     89c:	71 04       	cpc	r7, r1
     89e:	80 f0       	brcs	.+32     	; 0x8c0 <fat_append_clusters+0x178>
     8a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     8a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     8a4:	a8 a1       	ldd	r26, Y+32	; 0x20
     8a6:	b9 a1       	ldd	r27, Y+33	; 0x21
     8a8:	48 16       	cp	r4, r24
     8aa:	59 06       	cpc	r5, r25
     8ac:	6a 06       	cpc	r6, r26
     8ae:	7b 06       	cpc	r7, r27
     8b0:	68 f0       	brcs	.+26     	; 0x8cc <fat_append_clusters+0x184>
     8b2:	68 94       	set
     8b4:	44 24       	eor	r4, r4
     8b6:	41 f8       	bld	r4, 1
     8b8:	51 2c       	mov	r5, r1
     8ba:	61 2c       	mov	r6, r1
     8bc:	71 2c       	mov	r7, r1
     8be:	06 c0       	rjmp	.+12     	; 0x8cc <fat_append_clusters+0x184>
     8c0:	68 94       	set
     8c2:	44 24       	eor	r4, r4
     8c4:	41 f8       	bld	r4, 1
     8c6:	51 2c       	mov	r5, r1
     8c8:	61 2c       	mov	r6, r1
     8ca:	71 2c       	mov	r7, r1
     8cc:	9b 89       	ldd	r25, Y+19	; 0x13
     8ce:	99 23       	and	r25, r25
     8d0:	61 f1       	breq	.+88     	; 0x92a <__stack+0x2b>
     8d2:	53 01       	movw	r10, r6
     8d4:	42 01       	movw	r8, r4
     8d6:	24 2d       	mov	r18, r4
     8d8:	39 2d       	mov	r19, r9
     8da:	4a 2d       	mov	r20, r10
     8dc:	5b 2d       	mov	r21, r11
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	02 e0       	ldi	r16, 0x02	; 2
     8e8:	0e 94 24 21 	call	0x4248	; 0x4248 <__ashldi3>
     8ec:	ac 88       	ldd	r10, Y+20	; 0x14
     8ee:	bd 88       	ldd	r11, Y+21	; 0x15
     8f0:	ce 88       	ldd	r12, Y+22	; 0x16
     8f2:	df 88       	ldd	r13, Y+23	; 0x17
     8f4:	e8 8c       	ldd	r14, Y+24	; 0x18
     8f6:	f9 8c       	ldd	r15, Y+25	; 0x19
     8f8:	0a 8d       	ldd	r16, Y+26	; 0x1a
     8fa:	1b 8d       	ldd	r17, Y+27	; 0x1b
     8fc:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
     900:	d2 2e       	mov	r13, r18
     902:	c3 2e       	mov	r12, r19
     904:	b4 2e       	mov	r11, r20
     906:	a5 2e       	mov	r10, r21
     908:	96 2e       	mov	r9, r22
     90a:	87 2e       	mov	r8, r23
     90c:	38 2e       	mov	r3, r24
     90e:	29 2e       	mov	r2, r25
     910:	68 94       	set
     912:	ee 24       	eor	r14, r14
     914:	e2 f8       	bld	r14, 2
     916:	f1 2c       	mov	r15, r1
     918:	8e 01       	movw	r16, r28
     91a:	0d 5f       	subi	r16, 0xFD	; 253
     91c:	1f 4f       	sbci	r17, 0xFF	; 255
     91e:	ec 8d       	ldd	r30, Y+28	; 0x1c
     920:	fd 8d       	ldd	r31, Y+29	; 0x1d
     922:	09 95       	icall
     924:	81 11       	cpse	r24, r1
     926:	62 c1       	rjmp	.+708    	; 0xbec <__stack+0x2ed>
     928:	57 c1       	rjmp	.+686    	; 0xbd8 <__stack+0x2d9>
     92a:	53 01       	movw	r10, r6
     92c:	42 01       	movw	r8, r4
     92e:	24 2d       	mov	r18, r4
     930:	39 2d       	mov	r19, r9
     932:	4a 2d       	mov	r20, r10
     934:	5b 2d       	mov	r21, r11
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	01 e0       	ldi	r16, 0x01	; 1
     940:	0e 94 24 21 	call	0x4248	; 0x4248 <__ashldi3>
     944:	ac 88       	ldd	r10, Y+20	; 0x14
     946:	bd 88       	ldd	r11, Y+21	; 0x15
     948:	ce 88       	ldd	r12, Y+22	; 0x16
     94a:	df 88       	ldd	r13, Y+23	; 0x17
     94c:	e8 8c       	ldd	r14, Y+24	; 0x18
     94e:	f9 8c       	ldd	r15, Y+25	; 0x19
     950:	0a 8d       	ldd	r16, Y+26	; 0x1a
     952:	1b 8d       	ldd	r17, Y+27	; 0x1b
     954:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
     958:	d2 2e       	mov	r13, r18
     95a:	c3 2e       	mov	r12, r19
     95c:	b4 2e       	mov	r11, r20
     95e:	a5 2e       	mov	r10, r21
     960:	96 2e       	mov	r9, r22
     962:	87 2e       	mov	r8, r23
     964:	38 2e       	mov	r3, r24
     966:	29 2e       	mov	r2, r25
     968:	68 94       	set
     96a:	ee 24       	eor	r14, r14
     96c:	e1 f8       	bld	r14, 1
     96e:	f1 2c       	mov	r15, r1
     970:	8e 01       	movw	r16, r28
     972:	0f 5f       	subi	r16, 0xFF	; 255
     974:	1f 4f       	sbci	r17, 0xFF	; 255
     976:	ec 8d       	ldd	r30, Y+28	; 0x1c
     978:	fd 8d       	ldd	r31, Y+29	; 0x1d
     97a:	09 95       	icall
     97c:	81 11       	cpse	r24, r1
     97e:	40 c1       	rjmp	.+640    	; 0xc00 <__stack+0x301>
     980:	30 c1       	rjmp	.+608    	; 0xbe2 <__stack+0x2e3>
     982:	2b 85       	ldd	r18, Y+11	; 0x0b
     984:	3c 85       	ldd	r19, Y+12	; 0x0c
     986:	4d 85       	ldd	r20, Y+13	; 0x0d
     988:	5e 85       	ldd	r21, Y+14	; 0x0e
     98a:	23 2b       	or	r18, r19
     98c:	24 2b       	or	r18, r20
     98e:	25 2b       	or	r18, r21
     990:	49 f4       	brne	.+18     	; 0x9a4 <__stack+0xa5>
     992:	aa a1       	ldd	r26, Y+34	; 0x22
     994:	bb a1       	ldd	r27, Y+35	; 0x23
     996:	9e 96       	adiw	r26, 0x2e	; 46
     998:	4d 92       	st	X+, r4
     99a:	5d 92       	st	X+, r5
     99c:	6d 92       	st	X+, r6
     99e:	7c 92       	st	X, r7
     9a0:	d1 97       	sbiw	r26, 0x31	; 49
     9a2:	9c c0       	rjmp	.+312    	; 0xadc <__stack+0x1dd>
     9a4:	2f 85       	ldd	r18, Y+15	; 0x0f
     9a6:	38 89       	ldd	r19, Y+16	; 0x10
     9a8:	49 89       	ldd	r20, Y+17	; 0x11
     9aa:	5a 89       	ldd	r21, Y+18	; 0x12
     9ac:	23 2b       	or	r18, r19
     9ae:	24 2b       	or	r18, r20
     9b0:	25 2b       	or	r18, r21
     9b2:	49 f4       	brne	.+18     	; 0x9c6 <__stack+0xc7>
     9b4:	8f ef       	ldi	r24, 0xFF	; 255
     9b6:	9f ef       	ldi	r25, 0xFF	; 255
     9b8:	af ef       	ldi	r26, 0xFF	; 255
     9ba:	bf e0       	ldi	r27, 0x0F	; 15
     9bc:	8b 83       	std	Y+3, r24	; 0x03
     9be:	9c 83       	std	Y+4, r25	; 0x04
     9c0:	ad 83       	std	Y+5, r26	; 0x05
     9c2:	be 83       	std	Y+6, r27	; 0x06
     9c4:	08 c0       	rjmp	.+16     	; 0x9d6 <__stack+0xd7>
     9c6:	2f 85       	ldd	r18, Y+15	; 0x0f
     9c8:	38 89       	ldd	r19, Y+16	; 0x10
     9ca:	49 89       	ldd	r20, Y+17	; 0x11
     9cc:	5a 89       	ldd	r21, Y+18	; 0x12
     9ce:	2b 83       	std	Y+3, r18	; 0x03
     9d0:	3c 83       	std	Y+4, r19	; 0x04
     9d2:	4d 83       	std	Y+5, r20	; 0x05
     9d4:	5e 83       	std	Y+6, r21	; 0x06
     9d6:	68 94       	set
     9d8:	ee 24       	eor	r14, r14
     9da:	e2 f8       	bld	r14, 2
     9dc:	f1 2c       	mov	r15, r1
     9de:	8e 01       	movw	r16, r28
     9e0:	0d 5f       	subi	r16, 0xFD	; 253
     9e2:	1f 4f       	sbci	r17, 0xFF	; 255
     9e4:	2d 2d       	mov	r18, r13
     9e6:	3c 2d       	mov	r19, r12
     9e8:	4b 2d       	mov	r20, r11
     9ea:	5a 2d       	mov	r21, r10
     9ec:	69 2d       	mov	r22, r9
     9ee:	78 2d       	mov	r23, r8
     9f0:	83 2d       	mov	r24, r3
     9f2:	92 2d       	mov	r25, r2
     9f4:	ec a1       	ldd	r30, Y+36	; 0x24
     9f6:	fd a1       	ldd	r31, Y+37	; 0x25
     9f8:	09 95       	icall
     9fa:	81 11       	cpse	r24, r1
     9fc:	38 c0       	rjmp	.+112    	; 0xa6e <__stack+0x16f>
     9fe:	da c0       	rjmp	.+436    	; 0xbb4 <__stack+0x2b5>
     a00:	2b 85       	ldd	r18, Y+11	; 0x0b
     a02:	3c 85       	ldd	r19, Y+12	; 0x0c
     a04:	4d 85       	ldd	r20, Y+13	; 0x0d
     a06:	5e 85       	ldd	r21, Y+14	; 0x0e
     a08:	23 2b       	or	r18, r19
     a0a:	24 2b       	or	r18, r20
     a0c:	25 2b       	or	r18, r21
     a0e:	49 f4       	brne	.+18     	; 0xa22 <__stack+0x123>
     a10:	aa a1       	ldd	r26, Y+34	; 0x22
     a12:	bb a1       	ldd	r27, Y+35	; 0x23
     a14:	9e 96       	adiw	r26, 0x2e	; 46
     a16:	4d 92       	st	X+, r4
     a18:	5d 92       	st	X+, r5
     a1a:	6d 92       	st	X+, r6
     a1c:	7c 92       	st	X, r7
     a1e:	d1 97       	sbiw	r26, 0x31	; 49
     a20:	5d c0       	rjmp	.+186    	; 0xadc <__stack+0x1dd>
     a22:	2f 85       	ldd	r18, Y+15	; 0x0f
     a24:	38 89       	ldd	r19, Y+16	; 0x10
     a26:	49 89       	ldd	r20, Y+17	; 0x11
     a28:	5a 89       	ldd	r21, Y+18	; 0x12
     a2a:	23 2b       	or	r18, r19
     a2c:	24 2b       	or	r18, r20
     a2e:	25 2b       	or	r18, r21
     a30:	29 f4       	brne	.+10     	; 0xa3c <__stack+0x13d>
     a32:	4f ef       	ldi	r20, 0xFF	; 255
     a34:	5f ef       	ldi	r21, 0xFF	; 255
     a36:	5a 83       	std	Y+2, r21	; 0x02
     a38:	49 83       	std	Y+1, r20	; 0x01
     a3a:	04 c0       	rjmp	.+8      	; 0xa44 <__stack+0x145>
     a3c:	8f 85       	ldd	r24, Y+15	; 0x0f
     a3e:	98 89       	ldd	r25, Y+16	; 0x10
     a40:	9a 83       	std	Y+2, r25	; 0x02
     a42:	89 83       	std	Y+1, r24	; 0x01
     a44:	68 94       	set
     a46:	ee 24       	eor	r14, r14
     a48:	e1 f8       	bld	r14, 1
     a4a:	f1 2c       	mov	r15, r1
     a4c:	8e 01       	movw	r16, r28
     a4e:	0f 5f       	subi	r16, 0xFF	; 255
     a50:	1f 4f       	sbci	r17, 0xFF	; 255
     a52:	2d 2d       	mov	r18, r13
     a54:	3c 2d       	mov	r19, r12
     a56:	4b 2d       	mov	r20, r11
     a58:	5a 2d       	mov	r21, r10
     a5a:	69 2d       	mov	r22, r9
     a5c:	78 2d       	mov	r23, r8
     a5e:	83 2d       	mov	r24, r3
     a60:	92 2d       	mov	r25, r2
     a62:	ec a1       	ldd	r30, Y+36	; 0x24
     a64:	fd a1       	ldd	r31, Y+37	; 0x25
     a66:	09 95       	icall
     a68:	88 23       	and	r24, r24
     a6a:	09 f4       	brne	.+2      	; 0xa6e <__stack+0x16f>
     a6c:	a3 c0       	rjmp	.+326    	; 0xbb4 <__stack+0x2b5>
     a6e:	2b 85       	ldd	r18, Y+11	; 0x0b
     a70:	3c 85       	ldd	r19, Y+12	; 0x0c
     a72:	4d 85       	ldd	r20, Y+13	; 0x0d
     a74:	5e 85       	ldd	r21, Y+14	; 0x0e
     a76:	21 50       	subi	r18, 0x01	; 1
     a78:	31 09       	sbc	r19, r1
     a7a:	41 09       	sbc	r20, r1
     a7c:	51 09       	sbc	r21, r1
     a7e:	2b 87       	std	Y+11, r18	; 0x0b
     a80:	3c 87       	std	Y+12, r19	; 0x0c
     a82:	4d 87       	std	Y+13, r20	; 0x0d
     a84:	5e 87       	std	Y+14, r21	; 0x0e
     a86:	4f 86       	std	Y+15, r4	; 0x0f
     a88:	58 8a       	std	Y+16, r5	; 0x10
     a8a:	69 8a       	std	Y+17, r6	; 0x11
     a8c:	7a 8a       	std	Y+18, r7	; 0x12
     a8e:	8f 81       	ldd	r24, Y+7	; 0x07
     a90:	98 85       	ldd	r25, Y+8	; 0x08
     a92:	a9 85       	ldd	r26, Y+9	; 0x09
     a94:	ba 85       	ldd	r27, Y+10	; 0x0a
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	a1 09       	sbc	r26, r1
     a9a:	b1 09       	sbc	r27, r1
     a9c:	8f 83       	std	Y+7, r24	; 0x07
     a9e:	98 87       	std	Y+8, r25	; 0x08
     aa0:	a9 87       	std	Y+9, r26	; 0x09
     aa2:	ba 87       	std	Y+10, r27	; 0x0a
     aa4:	9f ef       	ldi	r25, 0xFF	; 255
     aa6:	49 1a       	sub	r4, r25
     aa8:	59 0a       	sbc	r5, r25
     aaa:	69 0a       	sbc	r6, r25
     aac:	79 0a       	sbc	r7, r25
     aae:	2f 81       	ldd	r18, Y+7	; 0x07
     ab0:	38 85       	ldd	r19, Y+8	; 0x08
     ab2:	49 85       	ldd	r20, Y+9	; 0x09
     ab4:	5a 85       	ldd	r21, Y+10	; 0x0a
     ab6:	23 2b       	or	r18, r19
     ab8:	24 2b       	or	r18, r20
     aba:	25 2b       	or	r18, r21
     abc:	09 f0       	breq	.+2      	; 0xac0 <__stack+0x1c1>
     abe:	ea ce       	rjmp	.-556    	; 0x894 <fat_append_clusters+0x14c>
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__stack+0x1cb>
     ac2:	1f 86       	std	Y+15, r1	; 0x0f
     ac4:	18 8a       	std	Y+16, r1	; 0x10
     ac6:	19 8a       	std	Y+17, r1	; 0x11
     ac8:	1a 8a       	std	Y+18, r1	; 0x12
     aca:	8b 85       	ldd	r24, Y+11	; 0x0b
     acc:	9c 85       	ldd	r25, Y+12	; 0x0c
     ace:	ad 85       	ldd	r26, Y+13	; 0x0d
     ad0:	be 85       	ldd	r27, Y+14	; 0x0e
     ad2:	89 2b       	or	r24, r25
     ad4:	8a 2b       	or	r24, r26
     ad6:	8b 2b       	or	r24, r27
     ad8:	09 f0       	breq	.+2      	; 0xadc <__stack+0x1dd>
     ada:	6c c0       	rjmp	.+216    	; 0xbb4 <__stack+0x2b5>
     adc:	2e a1       	ldd	r18, Y+38	; 0x26
     ade:	3f a1       	ldd	r19, Y+39	; 0x27
     ae0:	48 a5       	ldd	r20, Y+40	; 0x28
     ae2:	59 a5       	ldd	r21, Y+41	; 0x29
     ae4:	22 30       	cpi	r18, 0x02	; 2
     ae6:	31 05       	cpc	r19, r1
     ae8:	41 05       	cpc	r20, r1
     aea:	51 05       	cpc	r21, r1
     aec:	08 f4       	brcc	.+2      	; 0xaf0 <__stack+0x1f1>
     aee:	5d c0       	rjmp	.+186    	; 0xbaa <__stack+0x2ab>
     af0:	3b 89       	ldd	r19, Y+19	; 0x13
     af2:	33 23       	and	r19, r19
     af4:	79 f1       	breq	.+94     	; 0xb54 <__stack+0x255>
     af6:	8f 85       	ldd	r24, Y+15	; 0x0f
     af8:	98 89       	ldd	r25, Y+16	; 0x10
     afa:	a9 89       	ldd	r26, Y+17	; 0x11
     afc:	ba 89       	ldd	r27, Y+18	; 0x12
     afe:	8b 83       	std	Y+3, r24	; 0x03
     b00:	9c 83       	std	Y+4, r25	; 0x04
     b02:	ad 83       	std	Y+5, r26	; 0x05
     b04:	be 83       	std	Y+6, r27	; 0x06
     b06:	2e a1       	ldd	r18, Y+38	; 0x26
     b08:	3f a1       	ldd	r19, Y+39	; 0x27
     b0a:	48 a5       	ldd	r20, Y+40	; 0x28
     b0c:	59 a5       	ldd	r21, Y+41	; 0x29
     b0e:	49 01       	movw	r8, r18
     b10:	5a 01       	movw	r10, r20
     b12:	39 2d       	mov	r19, r9
     b14:	4a 2d       	mov	r20, r10
     b16:	5b 2d       	mov	r21, r11
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	02 e0       	ldi	r16, 0x02	; 2
     b22:	0e 94 24 21 	call	0x4248	; 0x4248 <__ashldi3>
     b26:	ac 88       	ldd	r10, Y+20	; 0x14
     b28:	bd 88       	ldd	r11, Y+21	; 0x15
     b2a:	ce 88       	ldd	r12, Y+22	; 0x16
     b2c:	df 88       	ldd	r13, Y+23	; 0x17
     b2e:	e8 8c       	ldd	r14, Y+24	; 0x18
     b30:	f9 8c       	ldd	r15, Y+25	; 0x19
     b32:	0a 8d       	ldd	r16, Y+26	; 0x1a
     b34:	1b 8d       	ldd	r17, Y+27	; 0x1b
     b36:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
     b3a:	68 94       	set
     b3c:	ee 24       	eor	r14, r14
     b3e:	e2 f8       	bld	r14, 2
     b40:	f1 2c       	mov	r15, r1
     b42:	8e 01       	movw	r16, r28
     b44:	0d 5f       	subi	r16, 0xFD	; 253
     b46:	1f 4f       	sbci	r17, 0xFF	; 255
     b48:	ec a1       	ldd	r30, Y+36	; 0x24
     b4a:	fd a1       	ldd	r31, Y+37	; 0x25
     b4c:	09 95       	icall
     b4e:	88 23       	and	r24, r24
     b50:	89 f1       	breq	.+98     	; 0xbb4 <__stack+0x2b5>
     b52:	2b c0       	rjmp	.+86     	; 0xbaa <__stack+0x2ab>
     b54:	2f 85       	ldd	r18, Y+15	; 0x0f
     b56:	38 89       	ldd	r19, Y+16	; 0x10
     b58:	3a 83       	std	Y+2, r19	; 0x02
     b5a:	29 83       	std	Y+1, r18	; 0x01
     b5c:	8e a1       	ldd	r24, Y+38	; 0x26
     b5e:	9f a1       	ldd	r25, Y+39	; 0x27
     b60:	a8 a5       	ldd	r26, Y+40	; 0x28
     b62:	b9 a5       	ldd	r27, Y+41	; 0x29
     b64:	4c 01       	movw	r8, r24
     b66:	5d 01       	movw	r10, r26
     b68:	28 2f       	mov	r18, r24
     b6a:	39 2d       	mov	r19, r9
     b6c:	4a 2d       	mov	r20, r10
     b6e:	5b 2d       	mov	r21, r11
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	01 e0       	ldi	r16, 0x01	; 1
     b7a:	0e 94 24 21 	call	0x4248	; 0x4248 <__ashldi3>
     b7e:	ac 88       	ldd	r10, Y+20	; 0x14
     b80:	bd 88       	ldd	r11, Y+21	; 0x15
     b82:	ce 88       	ldd	r12, Y+22	; 0x16
     b84:	df 88       	ldd	r13, Y+23	; 0x17
     b86:	e8 8c       	ldd	r14, Y+24	; 0x18
     b88:	f9 8c       	ldd	r15, Y+25	; 0x19
     b8a:	0a 8d       	ldd	r16, Y+26	; 0x1a
     b8c:	1b 8d       	ldd	r17, Y+27	; 0x1b
     b8e:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
     b92:	68 94       	set
     b94:	ee 24       	eor	r14, r14
     b96:	e1 f8       	bld	r14, 1
     b98:	f1 2c       	mov	r15, r1
     b9a:	8e 01       	movw	r16, r28
     b9c:	0f 5f       	subi	r16, 0xFF	; 255
     b9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ba0:	ec a1       	ldd	r30, Y+36	; 0x24
     ba2:	fd a1       	ldd	r31, Y+37	; 0x25
     ba4:	09 95       	icall
     ba6:	88 23       	and	r24, r24
     ba8:	29 f0       	breq	.+10     	; 0xbb4 <__stack+0x2b5>
     baa:	6f 85       	ldd	r22, Y+15	; 0x0f
     bac:	78 89       	ldd	r23, Y+16	; 0x10
     bae:	89 89       	ldd	r24, Y+17	; 0x11
     bb0:	9a 89       	ldd	r25, Y+18	; 0x12
     bb2:	2c c0       	rjmp	.+88     	; 0xc0c <__stack+0x30d>
     bb4:	4f 85       	ldd	r20, Y+15	; 0x0f
     bb6:	58 89       	ldd	r21, Y+16	; 0x10
     bb8:	69 89       	ldd	r22, Y+17	; 0x11
     bba:	7a 89       	ldd	r23, Y+18	; 0x12
     bbc:	8a a1       	ldd	r24, Y+34	; 0x22
     bbe:	9b a1       	ldd	r25, Y+35	; 0x23
     bc0:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <fat_free_clusters>
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	1f c0       	rjmp	.+62     	; 0xc0c <__stack+0x30d>
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	1a c0       	rjmp	.+52     	; 0xc0c <__stack+0x30d>
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	15 c0       	rjmp	.+42     	; 0xc0c <__stack+0x30d>
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	10 c0       	rjmp	.+32     	; 0xc0c <__stack+0x30d>
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	9c 81       	ldd	r25, Y+4	; 0x04
     bf0:	ad 81       	ldd	r26, Y+5	; 0x05
     bf2:	be 81       	ldd	r27, Y+6	; 0x06
     bf4:	89 2b       	or	r24, r25
     bf6:	8a 2b       	or	r24, r26
     bf8:	8b 2b       	or	r24, r27
     bfa:	09 f0       	breq	.+2      	; 0xbfe <__stack+0x2ff>
     bfc:	48 cf       	rjmp	.-368    	; 0xa8e <__stack+0x18f>
     bfe:	c1 ce       	rjmp	.-638    	; 0x982 <__stack+0x83>
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	9a 81       	ldd	r25, Y+2	; 0x02
     c04:	89 2b       	or	r24, r25
     c06:	09 f0       	breq	.+2      	; 0xc0a <__stack+0x30b>
     c08:	42 cf       	rjmp	.-380    	; 0xa8e <__stack+0x18f>
     c0a:	fa ce       	rjmp	.-524    	; 0xa00 <__stack+0x101>
     c0c:	a9 96       	adiw	r28, 0x29	; 41
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	df 90       	pop	r13
     c26:	cf 90       	pop	r12
     c28:	bf 90       	pop	r11
     c2a:	af 90       	pop	r10
     c2c:	9f 90       	pop	r9
     c2e:	8f 90       	pop	r8
     c30:	7f 90       	pop	r7
     c32:	6f 90       	pop	r6
     c34:	5f 90       	pop	r5
     c36:	4f 90       	pop	r4
     c38:	3f 90       	pop	r3
     c3a:	2f 90       	pop	r2
     c3c:	08 95       	ret

00000c3e <fat_cluster_offset>:
     c3e:	2f 92       	push	r2
     c40:	3f 92       	push	r3
     c42:	4f 92       	push	r4
     c44:	5f 92       	push	r5
     c46:	6f 92       	push	r6
     c48:	7f 92       	push	r7
     c4a:	8f 92       	push	r8
     c4c:	9f 92       	push	r9
     c4e:	af 92       	push	r10
     c50:	bf 92       	push	r11
     c52:	cf 92       	push	r12
     c54:	df 92       	push	r13
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	59 f1       	breq	.+86     	; 0xcbc <fat_cluster_offset+0x7e>
     c66:	42 30       	cpi	r20, 0x02	; 2
     c68:	51 05       	cpc	r21, r1
     c6a:	61 05       	cpc	r22, r1
     c6c:	71 05       	cpc	r23, r1
     c6e:	78 f1       	brcs	.+94     	; 0xcce <fat_cluster_offset+0x90>
     c70:	ec 01       	movw	r28, r24
     c72:	42 50       	subi	r20, 0x02	; 2
     c74:	51 09       	sbc	r21, r1
     c76:	61 09       	sbc	r22, r1
     c78:	71 09       	sbc	r23, r1
     c7a:	1a 01       	movw	r2, r20
     c7c:	2b 01       	movw	r4, r22
     c7e:	08 8d       	ldd	r16, Y+24	; 0x18
     c80:	19 8d       	ldd	r17, Y+25	; 0x19
     c82:	a0 2e       	mov	r10, r16
     c84:	b1 2e       	mov	r11, r17
     c86:	c1 2c       	mov	r12, r1
     c88:	d1 2c       	mov	r13, r1
     c8a:	e1 2c       	mov	r14, r1
     c8c:	f1 2c       	mov	r15, r1
     c8e:	00 e0       	ldi	r16, 0x00	; 0
     c90:	10 e0       	ldi	r17, 0x00	; 0
     c92:	22 2d       	mov	r18, r2
     c94:	33 2d       	mov	r19, r3
     c96:	44 2d       	mov	r20, r4
     c98:	55 2d       	mov	r21, r5
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 cb 20 	call	0x4196	; 0x4196 <__muldi3>
     ca6:	aa 8c       	ldd	r10, Y+26	; 0x1a
     ca8:	bb 8c       	ldd	r11, Y+27	; 0x1b
     caa:	cc 8c       	ldd	r12, Y+28	; 0x1c
     cac:	dd 8c       	ldd	r13, Y+29	; 0x1d
     cae:	ee 8c       	ldd	r14, Y+30	; 0x1e
     cb0:	ff 8c       	ldd	r15, Y+31	; 0x1f
     cb2:	08 a1       	ldd	r16, Y+32	; 0x20
     cb4:	19 a1       	ldd	r17, Y+33	; 0x21
     cb6:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
     cba:	11 c0       	rjmp	.+34     	; 0xcde <fat_cluster_offset+0xa0>
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	40 e0       	ldi	r20, 0x00	; 0
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	08 c0       	rjmp	.+16     	; 0xcde <fat_cluster_offset+0xa0>
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	df 90       	pop	r13
     cec:	cf 90       	pop	r12
     cee:	bf 90       	pop	r11
     cf0:	af 90       	pop	r10
     cf2:	9f 90       	pop	r9
     cf4:	8f 90       	pop	r8
     cf6:	7f 90       	pop	r7
     cf8:	6f 90       	pop	r6
     cfa:	5f 90       	pop	r5
     cfc:	4f 90       	pop	r4
     cfe:	3f 90       	pop	r3
     d00:	2f 90       	pop	r2
     d02:	08 95       	ret

00000d04 <fat_calc_83_checksum>:
     d04:	ac 01       	movw	r20, r24
     d06:	fc 01       	movw	r30, r24
     d08:	81 91       	ld	r24, Z+
     d0a:	45 5f       	subi	r20, 0xF5	; 245
     d0c:	5f 4f       	sbci	r21, 0xFF	; 255
     d0e:	90 e8       	ldi	r25, 0x80	; 128
     d10:	89 9f       	mul	r24, r25
     d12:	90 01       	movw	r18, r0
     d14:	11 24       	eor	r1, r1
     d16:	98 2f       	mov	r25, r24
     d18:	96 95       	lsr	r25
     d1a:	92 2b       	or	r25, r18
     d1c:	21 91       	ld	r18, Z+
     d1e:	89 2f       	mov	r24, r25
     d20:	82 0f       	add	r24, r18
     d22:	e4 17       	cp	r30, r20
     d24:	f5 07       	cpc	r31, r21
     d26:	99 f7       	brne	.-26     	; 0xd0e <fat_calc_83_checksum+0xa>
     d28:	08 95       	ret

00000d2a <fat_get_fs_free_16_callback>:
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	f7 01       	movw	r30, r14
     d3c:	c4 80       	ldd	r12, Z+4	; 0x04
     d3e:	d5 80       	ldd	r13, Z+5	; 0x05
     d40:	c1 14       	cp	r12, r1
     d42:	d1 04       	cpc	r13, r1
     d44:	d1 f0       	breq	.+52     	; 0xd7a <fat_get_fs_free_16_callback+0x50>
     d46:	8c 01       	movw	r16, r24
     d48:	c0 e0       	ldi	r28, 0x00	; 0
     d4a:	d0 e0       	ldi	r29, 0x00	; 0
     d4c:	c8 01       	movw	r24, r16
     d4e:	8c 0f       	add	r24, r28
     d50:	9d 1f       	adc	r25, r29
     d52:	0e 94 01 01 	call	0x202	; 0x202 <read16>
     d56:	89 2b       	or	r24, r25
     d58:	61 f4       	brne	.+24     	; 0xd72 <fat_get_fs_free_16_callback+0x48>
     d5a:	f7 01       	movw	r30, r14
     d5c:	80 81       	ld	r24, Z
     d5e:	91 81       	ldd	r25, Z+1	; 0x01
     d60:	a2 81       	ldd	r26, Z+2	; 0x02
     d62:	b3 81       	ldd	r27, Z+3	; 0x03
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	a1 1d       	adc	r26, r1
     d68:	b1 1d       	adc	r27, r1
     d6a:	80 83       	st	Z, r24
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	a2 83       	std	Z+2, r26	; 0x02
     d70:	b3 83       	std	Z+3, r27	; 0x03
     d72:	22 96       	adiw	r28, 0x02	; 2
     d74:	cc 15       	cp	r28, r12
     d76:	dd 05       	cpc	r29, r13
     d78:	48 f3       	brcs	.-46     	; 0xd4c <fat_get_fs_free_16_callback+0x22>
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	ff 90       	pop	r15
     d86:	ef 90       	pop	r14
     d88:	df 90       	pop	r13
     d8a:	cf 90       	pop	r12
     d8c:	08 95       	ret

00000d8e <fat_dir_entry_read_callback>:
     d8e:	2f 92       	push	r2
     d90:	3f 92       	push	r3
     d92:	4f 92       	push	r4
     d94:	5f 92       	push	r5
     d96:	6f 92       	push	r6
     d98:	7f 92       	push	r7
     d9a:	8f 92       	push	r8
     d9c:	9f 92       	push	r9
     d9e:	af 92       	push	r10
     da0:	bf 92       	push	r11
     da2:	cf 92       	push	r12
     da4:	df 92       	push	r13
     da6:	ef 92       	push	r14
     da8:	ff 92       	push	r15
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	2d 97       	sbiw	r28, 0x0d	; 13
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	f7 01       	movw	r30, r14
     dc4:	a0 80       	ld	r10, Z
     dc6:	b1 80       	ldd	r11, Z+1	; 0x01
     dc8:	a2 81       	ldd	r26, Z+2	; 0x02
     dca:	b3 81       	ldd	r27, Z+3	; 0x03
     dcc:	90 96       	adiw	r26, 0x20	; 32
     dce:	b3 83       	std	Z+3, r27	; 0x03
     dd0:	a2 83       	std	Z+2, r26	; 0x02
     dd2:	dc 01       	movw	r26, r24
     dd4:	fc 90       	ld	r15, X
     dd6:	b5 ee       	ldi	r27, 0xE5	; 229
     dd8:	fb 16       	cp	r15, r27
     dda:	11 f0       	breq	.+4      	; 0xde0 <fat_dir_entry_read_callback+0x52>
     ddc:	f1 10       	cpse	r15, r1
     dde:	03 c0       	rjmp	.+6      	; 0xde6 <fat_dir_entry_read_callback+0x58>
     de0:	14 82       	std	Z+4, r1	; 0x04
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	37 c1       	rjmp	.+622    	; 0x1054 <fat_dir_entry_read_callback+0x2c6>
     de6:	45 01       	movw	r8, r10
     de8:	dc 01       	movw	r26, r24
     dea:	1b 96       	adiw	r26, 0x0b	; 11
     dec:	fc 90       	ld	r15, X
     dee:	bf e0       	ldi	r27, 0x0F	; 15
     df0:	fb 12       	cpse	r15, r27
     df2:	48 c0       	rjmp	.+144    	; 0xe84 <fat_dir_entry_read_callback+0xf6>
     df4:	f4 80       	ldd	r15, Z+4	; 0x04
     df6:	ff 20       	and	r15, r15
     df8:	29 f0       	breq	.+10     	; 0xe04 <fat_dir_entry_read_callback+0x76>
     dfa:	dc 01       	movw	r26, r24
     dfc:	1d 96       	adiw	r26, 0x0d	; 13
     dfe:	ec 90       	ld	r14, X
     e00:	fe 14       	cp	r15, r14
     e02:	a9 f0       	breq	.+42     	; 0xe2e <fat_dir_entry_read_callback+0xa0>
     e04:	0f 2e       	mov	r0, r31
     e06:	f1 e3       	ldi	r31, 0x31	; 49
     e08:	ff 2e       	mov	r15, r31
     e0a:	f0 2d       	mov	r31, r0
     e0c:	d5 01       	movw	r26, r10
     e0e:	1d 92       	st	X+, r1
     e10:	fa 94       	dec	r15
     e12:	e9 f7       	brne	.-6      	; 0xe0e <fat_dir_entry_read_callback+0x80>
     e14:	dc 01       	movw	r26, r24
     e16:	1d 96       	adiw	r26, 0x0d	; 13
     e18:	fc 90       	ld	r15, X
     e1a:	f4 82       	std	Z+4, r15	; 0x04
     e1c:	f5 01       	movw	r30, r10
     e1e:	01 a7       	std	Z+41, r16	; 0x29
     e20:	12 a7       	std	Z+42, r17	; 0x2a
     e22:	23 a7       	std	Z+43, r18	; 0x2b
     e24:	34 a7       	std	Z+44, r19	; 0x2c
     e26:	45 a7       	std	Z+45, r20	; 0x2d
     e28:	56 a7       	std	Z+46, r21	; 0x2e
     e2a:	67 a7       	std	Z+47, r22	; 0x2f
     e2c:	70 ab       	std	Z+48, r23	; 0x30
     e2e:	dc 01       	movw	r26, r24
     e30:	2c 91       	ld	r18, X
     e32:	2f 73       	andi	r18, 0x3F	; 63
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	21 50       	subi	r18, 0x01	; 1
     e38:	31 09       	sbc	r19, r1
     e3a:	4d e0       	ldi	r20, 0x0D	; 13
     e3c:	42 9f       	mul	r20, r18
     e3e:	b0 01       	movw	r22, r0
     e40:	43 9f       	mul	r20, r19
     e42:	70 0d       	add	r23, r0
     e44:	11 24       	eor	r1, r1
     e46:	2d e0       	ldi	r18, 0x0D	; 13
     e48:	e0 e0       	ldi	r30, 0x00	; 0
     e4a:	f1 e0       	ldi	r31, 0x01	; 1
     e4c:	de 01       	movw	r26, r28
     e4e:	11 96       	adiw	r26, 0x01	; 1
     e50:	01 90       	ld	r0, Z+
     e52:	0d 92       	st	X+, r0
     e54:	2a 95       	dec	r18
     e56:	e1 f7       	brne	.-8      	; 0xe50 <fat_dir_entry_read_callback+0xc2>
     e58:	6f 31       	cpi	r22, 0x1F	; 31
     e5a:	71 05       	cpc	r23, r1
     e5c:	08 f4       	brcc	.+2      	; 0xe60 <fat_dir_entry_read_callback+0xd2>
     e5e:	dd c0       	rjmp	.+442    	; 0x101a <fat_dir_entry_read_callback+0x28c>
     e60:	0f c0       	rjmp	.+30     	; 0xe80 <fat_dir_entry_read_callback+0xf2>
     e62:	21 91       	ld	r18, Z+
     e64:	8c 01       	movw	r16, r24
     e66:	02 0f       	add	r16, r18
     e68:	11 1d       	adc	r17, r1
     e6a:	d8 01       	movw	r26, r16
     e6c:	2c 91       	ld	r18, X
     e6e:	d5 01       	movw	r26, r10
     e70:	2d 93       	st	X+, r18
     e72:	5d 01       	movw	r10, r26
     e74:	e6 17       	cp	r30, r22
     e76:	f7 07       	cpc	r31, r23
     e78:	19 f0       	breq	.+6      	; 0xe80 <fat_dir_entry_read_callback+0xf2>
     e7a:	e4 17       	cp	r30, r20
     e7c:	f5 07       	cpc	r31, r21
     e7e:	89 f7       	brne	.-30     	; 0xe62 <fat_dir_entry_read_callback+0xd4>
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	e8 c0       	rjmp	.+464    	; 0x1054 <fat_dir_entry_read_callback+0x2c6>
     e84:	7f 01       	movw	r14, r30
     e86:	77 2e       	mov	r7, r23
     e88:	66 2e       	mov	r6, r22
     e8a:	55 2e       	mov	r5, r21
     e8c:	44 2e       	mov	r4, r20
     e8e:	33 2e       	mov	r3, r19
     e90:	22 2e       	mov	r2, r18
     e92:	6c 01       	movw	r12, r24
     e94:	f5 01       	movw	r30, r10
     e96:	80 81       	ld	r24, Z
     e98:	88 23       	and	r24, r24
     e9a:	49 f0       	breq	.+18     	; 0xeae <fat_dir_entry_read_callback+0x120>
     e9c:	c6 01       	movw	r24, r12
     e9e:	0e 94 82 06 	call	0xd04	; 0xd04 <fat_calc_83_checksum>
     ea2:	d7 01       	movw	r26, r14
     ea4:	14 96       	adiw	r26, 0x04	; 4
     ea6:	9c 91       	ld	r25, X
     ea8:	98 17       	cp	r25, r24
     eaa:	09 f4       	brne	.+2      	; 0xeae <fat_dir_entry_read_callback+0x120>
     eac:	80 c0       	rjmp	.+256    	; 0xfae <fat_dir_entry_read_callback+0x220>
     eae:	81 e3       	ldi	r24, 0x31	; 49
     eb0:	f5 01       	movw	r30, r10
     eb2:	11 92       	st	Z+, r1
     eb4:	8a 95       	dec	r24
     eb6:	e9 f7       	brne	.-6      	; 0xeb2 <fat_dir_entry_read_callback+0x124>
     eb8:	d5 01       	movw	r26, r10
     eba:	99 96       	adiw	r26, 0x29	; 41
     ebc:	0c 93       	st	X, r16
     ebe:	99 97       	sbiw	r26, 0x29	; 41
     ec0:	9a 96       	adiw	r26, 0x2a	; 42
     ec2:	1c 93       	st	X, r17
     ec4:	9a 97       	sbiw	r26, 0x2a	; 42
     ec6:	9b 96       	adiw	r26, 0x2b	; 43
     ec8:	2c 92       	st	X, r2
     eca:	9b 97       	sbiw	r26, 0x2b	; 43
     ecc:	9c 96       	adiw	r26, 0x2c	; 44
     ece:	3c 92       	st	X, r3
     ed0:	9c 97       	sbiw	r26, 0x2c	; 44
     ed2:	9d 96       	adiw	r26, 0x2d	; 45
     ed4:	4c 92       	st	X, r4
     ed6:	9d 97       	sbiw	r26, 0x2d	; 45
     ed8:	9e 96       	adiw	r26, 0x2e	; 46
     eda:	5c 92       	st	X, r5
     edc:	9e 97       	sbiw	r26, 0x2e	; 46
     ede:	9f 96       	adiw	r26, 0x2f	; 47
     ee0:	6c 92       	st	X, r6
     ee2:	9f 97       	sbiw	r26, 0x2f	; 47
     ee4:	d0 96       	adiw	r26, 0x30	; 48
     ee6:	7c 92       	st	X, r7
     ee8:	f6 01       	movw	r30, r12
     eea:	80 81       	ld	r24, Z
     eec:	80 32       	cpi	r24, 0x20	; 32
     eee:	19 f1       	breq	.+70     	; 0xf36 <fat_dir_entry_read_callback+0x1a8>
     ef0:	6a 2d       	mov	r22, r10
     ef2:	96 01       	movw	r18, r12
     ef4:	29 5f       	subi	r18, 0xF9	; 249
     ef6:	3f 4f       	sbci	r19, 0xFF	; 255
     ef8:	0a 2d       	mov	r16, r10
     efa:	1b 2d       	mov	r17, r11
     efc:	04 c0       	rjmp	.+8      	; 0xf06 <fat_dir_entry_read_callback+0x178>
     efe:	31 96       	adiw	r30, 0x01	; 1
     f00:	80 81       	ld	r24, Z
     f02:	80 32       	cpi	r24, 0x20	; 32
     f04:	c9 f0       	breq	.+50     	; 0xf38 <fat_dir_entry_read_callback+0x1aa>
     f06:	d8 01       	movw	r26, r16
     f08:	8d 93       	st	X+, r24
     f0a:	8d 01       	movw	r16, r26
     f0c:	d6 01       	movw	r26, r12
     f0e:	1c 96       	adiw	r26, 0x0c	; 12
     f10:	9c 91       	ld	r25, X
     f12:	93 ff       	sbrs	r25, 3
     f14:	0a c0       	rjmp	.+20     	; 0xf2a <fat_dir_entry_read_callback+0x19c>
     f16:	90 81       	ld	r25, Z
     f18:	91 54       	subi	r25, 0x41	; 65
     f1a:	9a 31       	cpi	r25, 0x1A	; 26
     f1c:	30 f4       	brcc	.+12     	; 0xf2a <fat_dir_entry_read_callback+0x19c>
     f1e:	a8 01       	movw	r20, r16
     f20:	41 50       	subi	r20, 0x01	; 1
     f22:	51 09       	sbc	r21, r1
     f24:	80 5e       	subi	r24, 0xE0	; 224
     f26:	da 01       	movw	r26, r20
     f28:	8c 93       	st	X, r24
     f2a:	90 2f       	mov	r25, r16
     f2c:	96 1b       	sub	r25, r22
     f2e:	e2 17       	cp	r30, r18
     f30:	f3 07       	cpc	r31, r19
     f32:	29 f7       	brne	.-54     	; 0xefe <fat_dir_entry_read_callback+0x170>
     f34:	01 c0       	rjmp	.+2      	; 0xf38 <fat_dir_entry_read_callback+0x1aa>
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	f5 01       	movw	r30, r10
     f3a:	80 81       	ld	r24, Z
     f3c:	85 30       	cpi	r24, 0x05	; 5
     f3e:	11 f4       	brne	.+4      	; 0xf44 <fat_dir_entry_read_callback+0x1b6>
     f40:	85 ee       	ldi	r24, 0xE5	; 229
     f42:	80 83       	st	Z, r24
     f44:	d6 01       	movw	r26, r12
     f46:	18 96       	adiw	r26, 0x08	; 8
     f48:	8c 91       	ld	r24, X
     f4a:	18 97       	sbiw	r26, 0x08	; 8
     f4c:	80 32       	cpi	r24, 0x20	; 32
     f4e:	59 f1       	breq	.+86     	; 0xfa6 <fat_dir_entry_read_callback+0x218>
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	89 0f       	add	r24, r25
     f54:	2e e2       	ldi	r18, 0x2E	; 46
     f56:	f5 01       	movw	r30, r10
     f58:	e9 0f       	add	r30, r25
     f5a:	f1 1d       	adc	r31, r1
     f5c:	20 83       	st	Z, r18
     f5e:	f6 01       	movw	r30, r12
     f60:	38 96       	adiw	r30, 0x08	; 8
     f62:	18 96       	adiw	r26, 0x08	; 8
     f64:	2c 91       	ld	r18, X
     f66:	20 32       	cpi	r18, 0x20	; 32
     f68:	d9 f0       	breq	.+54     	; 0xfa0 <fat_dir_entry_read_callback+0x212>
     f6a:	9c 5f       	subi	r25, 0xFC	; 252
     f6c:	04 c0       	rjmp	.+8      	; 0xf76 <fat_dir_entry_read_callback+0x1e8>
     f6e:	31 96       	adiw	r30, 0x01	; 1
     f70:	20 81       	ld	r18, Z
     f72:	20 32       	cpi	r18, 0x20	; 32
     f74:	b9 f0       	breq	.+46     	; 0xfa4 <fat_dir_entry_read_callback+0x216>
     f76:	a4 01       	movw	r20, r8
     f78:	48 0f       	add	r20, r24
     f7a:	51 1d       	adc	r21, r1
     f7c:	da 01       	movw	r26, r20
     f7e:	2c 93       	st	X, r18
     f80:	d6 01       	movw	r26, r12
     f82:	1c 96       	adiw	r26, 0x0c	; 12
     f84:	3c 91       	ld	r19, X
     f86:	34 ff       	sbrs	r19, 4
     f88:	07 c0       	rjmp	.+14     	; 0xf98 <fat_dir_entry_read_callback+0x20a>
     f8a:	30 81       	ld	r19, Z
     f8c:	31 54       	subi	r19, 0x41	; 65
     f8e:	3a 31       	cpi	r19, 0x1A	; 26
     f90:	18 f4       	brcc	.+6      	; 0xf98 <fat_dir_entry_read_callback+0x20a>
     f92:	20 5e       	subi	r18, 0xE0	; 224
     f94:	da 01       	movw	r26, r20
     f96:	2c 93       	st	X, r18
     f98:	8f 5f       	subi	r24, 0xFF	; 255
     f9a:	89 13       	cpse	r24, r25
     f9c:	e8 cf       	rjmp	.-48     	; 0xf6e <fat_dir_entry_read_callback+0x1e0>
     f9e:	03 c0       	rjmp	.+6      	; 0xfa6 <fat_dir_entry_read_callback+0x218>
     fa0:	98 2f       	mov	r25, r24
     fa2:	01 c0       	rjmp	.+2      	; 0xfa6 <fat_dir_entry_read_callback+0x218>
     fa4:	98 2f       	mov	r25, r24
     fa6:	f5 01       	movw	r30, r10
     fa8:	e9 0f       	add	r30, r25
     faa:	f1 1d       	adc	r31, r1
     fac:	10 82       	st	Z, r1
     fae:	f6 01       	movw	r30, r12
     fb0:	83 85       	ldd	r24, Z+11	; 0x0b
     fb2:	d5 01       	movw	r26, r10
     fb4:	90 96       	adiw	r26, 0x20	; 32
     fb6:	8c 93       	st	X, r24
     fb8:	c6 01       	movw	r24, r12
     fba:	4a 96       	adiw	r24, 0x1a	; 26
     fbc:	0e 94 01 01 	call	0x202	; 0x202 <read16>
     fc0:	a0 e0       	ldi	r26, 0x00	; 0
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	f5 01       	movw	r30, r10
     fc6:	81 a3       	std	Z+33, r24	; 0x21
     fc8:	92 a3       	std	Z+34, r25	; 0x22
     fca:	a3 a3       	std	Z+35, r26	; 0x23
     fcc:	b4 a3       	std	Z+36, r27	; 0x24
     fce:	c6 01       	movw	r24, r12
     fd0:	44 96       	adiw	r24, 0x14	; 20
     fd2:	0e 94 01 01 	call	0x202	; 0x202 <read16>
     fd6:	a0 e0       	ldi	r26, 0x00	; 0
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	dc 01       	movw	r26, r24
     fdc:	99 27       	eor	r25, r25
     fde:	88 27       	eor	r24, r24
     fe0:	f5 01       	movw	r30, r10
     fe2:	41 a1       	ldd	r20, Z+33	; 0x21
     fe4:	52 a1       	ldd	r21, Z+34	; 0x22
     fe6:	63 a1       	ldd	r22, Z+35	; 0x23
     fe8:	74 a1       	ldd	r23, Z+36	; 0x24
     fea:	84 2b       	or	r24, r20
     fec:	95 2b       	or	r25, r21
     fee:	a6 2b       	or	r26, r22
     ff0:	b7 2b       	or	r27, r23
     ff2:	81 a3       	std	Z+33, r24	; 0x21
     ff4:	92 a3       	std	Z+34, r25	; 0x22
     ff6:	a3 a3       	std	Z+35, r26	; 0x23
     ff8:	b4 a3       	std	Z+36, r27	; 0x24
     ffa:	c6 01       	movw	r24, r12
     ffc:	4c 96       	adiw	r24, 0x1c	; 28
     ffe:	0e 94 0b 01 	call	0x216	; 0x216 <read32>
    1002:	d5 01       	movw	r26, r10
    1004:	95 96       	adiw	r26, 0x25	; 37
    1006:	6d 93       	st	X+, r22
    1008:	7d 93       	st	X+, r23
    100a:	8d 93       	st	X+, r24
    100c:	9c 93       	st	X, r25
    100e:	98 97       	sbiw	r26, 0x28	; 40
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	f7 01       	movw	r30, r14
    1014:	85 83       	std	Z+5, r24	; 0x05
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	1d c0       	rjmp	.+58     	; 0x1054 <fat_dir_entry_read_callback+0x2c6>
    101a:	29 81       	ldd	r18, Y+1	; 0x01
    101c:	fc 01       	movw	r30, r24
    101e:	e2 0f       	add	r30, r18
    1020:	f1 1d       	adc	r31, r1
    1022:	20 81       	ld	r18, Z
    1024:	f5 01       	movw	r30, r10
    1026:	e6 0f       	add	r30, r22
    1028:	f7 1f       	adc	r31, r23
    102a:	20 83       	st	Z, r18
    102c:	fe 01       	movw	r30, r28
    102e:	32 96       	adiw	r30, 0x02	; 2
    1030:	db 01       	movw	r26, r22
    1032:	11 96       	adiw	r26, 0x01	; 1
    1034:	aa 0e       	add	r10, r26
    1036:	bb 1e       	adc	r11, r27
    1038:	4f e1       	ldi	r20, 0x1F	; 31
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	46 1b       	sub	r20, r22
    103e:	57 0b       	sbc	r21, r23
    1040:	01 e0       	ldi	r16, 0x01	; 1
    1042:	10 e0       	ldi	r17, 0x00	; 0
    1044:	0c 0f       	add	r16, r28
    1046:	1d 1f       	adc	r17, r29
    1048:	40 0f       	add	r20, r16
    104a:	51 1f       	adc	r21, r17
    104c:	be 01       	movw	r22, r28
    104e:	62 5f       	subi	r22, 0xF2	; 242
    1050:	7f 4f       	sbci	r23, 0xFF	; 255
    1052:	13 cf       	rjmp	.-474    	; 0xe7a <fat_dir_entry_read_callback+0xec>
    1054:	2d 96       	adiw	r28, 0x0d	; 13
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	bf 90       	pop	r11
    1072:	af 90       	pop	r10
    1074:	9f 90       	pop	r9
    1076:	8f 90       	pop	r8
    1078:	7f 90       	pop	r7
    107a:	6f 90       	pop	r6
    107c:	5f 90       	pop	r5
    107e:	4f 90       	pop	r4
    1080:	3f 90       	pop	r3
    1082:	2f 90       	pop	r2
    1084:	08 95       	ret

00001086 <fat_get_fs_free_32_callback>:
    1086:	cf 92       	push	r12
    1088:	df 92       	push	r13
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	f7 01       	movw	r30, r14
    1098:	c4 80       	ldd	r12, Z+4	; 0x04
    109a:	d5 80       	ldd	r13, Z+5	; 0x05
    109c:	c1 14       	cp	r12, r1
    109e:	d1 04       	cpc	r13, r1
    10a0:	e1 f0       	breq	.+56     	; 0x10da <fat_get_fs_free_32_callback+0x54>
    10a2:	8c 01       	movw	r16, r24
    10a4:	c0 e0       	ldi	r28, 0x00	; 0
    10a6:	d0 e0       	ldi	r29, 0x00	; 0
    10a8:	c8 01       	movw	r24, r16
    10aa:	8c 0f       	add	r24, r28
    10ac:	9d 1f       	adc	r25, r29
    10ae:	0e 94 0b 01 	call	0x216	; 0x216 <read32>
    10b2:	67 2b       	or	r22, r23
    10b4:	68 2b       	or	r22, r24
    10b6:	69 2b       	or	r22, r25
    10b8:	61 f4       	brne	.+24     	; 0x10d2 <fat_get_fs_free_32_callback+0x4c>
    10ba:	f7 01       	movw	r30, r14
    10bc:	80 81       	ld	r24, Z
    10be:	91 81       	ldd	r25, Z+1	; 0x01
    10c0:	a2 81       	ldd	r26, Z+2	; 0x02
    10c2:	b3 81       	ldd	r27, Z+3	; 0x03
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	a1 1d       	adc	r26, r1
    10c8:	b1 1d       	adc	r27, r1
    10ca:	80 83       	st	Z, r24
    10cc:	91 83       	std	Z+1, r25	; 0x01
    10ce:	a2 83       	std	Z+2, r26	; 0x02
    10d0:	b3 83       	std	Z+3, r27	; 0x03
    10d2:	24 96       	adiw	r28, 0x04	; 4
    10d4:	cc 15       	cp	r28, r12
    10d6:	dd 05       	cpc	r29, r13
    10d8:	38 f3       	brcs	.-50     	; 0x10a8 <fat_get_fs_free_32_callback+0x22>
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	ef 90       	pop	r14
    10e8:	df 90       	pop	r13
    10ea:	cf 90       	pop	r12
    10ec:	08 95       	ret

000010ee <fat_write_dir_entry>:
    10ee:	2f 92       	push	r2
    10f0:	3f 92       	push	r3
    10f2:	4f 92       	push	r4
    10f4:	5f 92       	push	r5
    10f6:	6f 92       	push	r6
    10f8:	7f 92       	push	r7
    10fa:	8f 92       	push	r8
    10fc:	9f 92       	push	r9
    10fe:	af 92       	push	r10
    1100:	bf 92       	push	r11
    1102:	cf 92       	push	r12
    1104:	df 92       	push	r13
    1106:	ef 92       	push	r14
    1108:	ff 92       	push	r15
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	a6 97       	sbiw	r28, 0x26	; 38
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	09 f4       	brne	.+2      	; 0x1128 <fat_write_dir_entry+0x3a>
    1126:	6e c1       	rjmp	.+732    	; 0x1404 <fat_write_dir_entry+0x316>
    1128:	61 15       	cp	r22, r1
    112a:	71 05       	cpc	r23, r1
    112c:	09 f4       	brne	.+2      	; 0x1130 <fat_write_dir_entry+0x42>
    112e:	6c c1       	rjmp	.+728    	; 0x1408 <fat_write_dir_entry+0x31a>
    1130:	6b 01       	movw	r12, r22
    1132:	fc 01       	movw	r30, r24
    1134:	01 90       	ld	r0, Z+
    1136:	f0 81       	ld	r31, Z
    1138:	e0 2d       	mov	r30, r0
    113a:	84 81       	ldd	r24, Z+4	; 0x04
    113c:	95 81       	ldd	r25, Z+5	; 0x05
    113e:	9b a3       	std	Y+35, r25	; 0x23
    1140:	8a a3       	std	Y+34, r24	; 0x22
    1142:	db 01       	movw	r26, r22
    1144:	99 96       	adiw	r26, 0x29	; 41
    1146:	9c 90       	ld	r9, X
    1148:	99 97       	sbiw	r26, 0x29	; 41
    114a:	9a 96       	adiw	r26, 0x2a	; 42
    114c:	8c 90       	ld	r8, X
    114e:	9a 97       	sbiw	r26, 0x2a	; 42
    1150:	9b 96       	adiw	r26, 0x2b	; 43
    1152:	7c 90       	ld	r7, X
    1154:	9b 97       	sbiw	r26, 0x2b	; 43
    1156:	9c 96       	adiw	r26, 0x2c	; 44
    1158:	6c 90       	ld	r6, X
    115a:	9c 97       	sbiw	r26, 0x2c	; 44
    115c:	9d 96       	adiw	r26, 0x2d	; 45
    115e:	5c 90       	ld	r5, X
    1160:	9d 97       	sbiw	r26, 0x2d	; 45
    1162:	9e 96       	adiw	r26, 0x2e	; 46
    1164:	4c 90       	ld	r4, X
    1166:	9e 97       	sbiw	r26, 0x2e	; 46
    1168:	9f 96       	adiw	r26, 0x2f	; 47
    116a:	3c 90       	ld	r3, X
    116c:	9f 97       	sbiw	r26, 0x2f	; 47
    116e:	d0 96       	adiw	r26, 0x30	; 48
    1170:	2c 90       	ld	r2, X
    1172:	7d a3       	std	Y+37, r23	; 0x25
    1174:	6c a3       	std	Y+36, r22	; 0x24
    1176:	fb 01       	movw	r30, r22
    1178:	01 90       	ld	r0, Z+
    117a:	00 20       	and	r0, r0
    117c:	e9 f7       	brne	.-6      	; 0x1178 <fat_write_dir_entry+0x8a>
    117e:	31 97       	sbiw	r30, 0x01	; 1
    1180:	5f 01       	movw	r10, r30
    1182:	a6 1a       	sub	r10, r22
    1184:	b7 0a       	sbc	r11, r23
    1186:	1a 2d       	mov	r17, r10
    1188:	c5 01       	movw	r24, r10
    118a:	99 27       	eor	r25, r25
    118c:	0c 96       	adiw	r24, 0x0c	; 12
    118e:	6d e0       	ldi	r22, 0x0D	; 13
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	0e 94 75 20 	call	0x40ea	; 0x40ea <__divmodhi4>
    1196:	69 a3       	std	Y+33, r22	; 0x21
    1198:	4b e0       	ldi	r20, 0x0B	; 11
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	60 e2       	ldi	r22, 0x20	; 32
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	ce 01       	movw	r24, r28
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	0e 94 97 21 	call	0x432e	; 0x432e <memset>
    11a8:	6e e2       	ldi	r22, 0x2E	; 46
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	c6 01       	movw	r24, r12
    11ae:	0e 94 c0 21 	call	0x4380	; 0x4380 <strrchr>
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	d1 f0       	breq	.+52     	; 0x11ea <fat_write_dir_entry+0xfc>
    11b6:	fc 01       	movw	r30, r24
    11b8:	21 81       	ldd	r18, Z+1	; 0x01
    11ba:	22 23       	and	r18, r18
    11bc:	b1 f0       	breq	.+44     	; 0x11ea <fat_write_dir_entry+0xfc>
    11be:	bc 01       	movw	r22, r24
    11c0:	6f 5f       	subi	r22, 0xFF	; 255
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	fb 01       	movw	r30, r22
    11c6:	01 90       	ld	r0, Z+
    11c8:	00 20       	and	r0, r0
    11ca:	e9 f7       	brne	.-6      	; 0x11c6 <fat_write_dir_entry+0xd8>
    11cc:	31 97       	sbiw	r30, 0x01	; 1
    11ce:	e6 1b       	sub	r30, r22
    11d0:	f7 0b       	sbc	r31, r23
    11d2:	aa 94       	dec	r10
    11d4:	1a 2d       	mov	r17, r10
    11d6:	1e 1b       	sub	r17, r30
    11d8:	e4 30       	cpi	r30, 0x04	; 4
    11da:	08 f0       	brcs	.+2      	; 0x11de <fat_write_dir_entry+0xf0>
    11dc:	e3 e0       	ldi	r30, 0x03	; 3
    11de:	4e 2f       	mov	r20, r30
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	ce 01       	movw	r24, r28
    11e4:	09 96       	adiw	r24, 0x09	; 9
    11e6:	0e 94 8e 21 	call	0x431c	; 0x431c <memcpy>
    11ea:	19 30       	cpi	r17, 0x09	; 9
    11ec:	d0 f4       	brcc	.+52     	; 0x1222 <fat_write_dir_entry+0x134>
    11ee:	41 2f       	mov	r20, r17
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	b6 01       	movw	r22, r12
    11f4:	ce 01       	movw	r24, r28
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	0e 94 8e 21 	call	0x431c	; 0x431c <memcpy>
    11fc:	d6 01       	movw	r26, r12
    11fe:	8c 91       	ld	r24, X
    1200:	8e 32       	cpi	r24, 0x2E	; 46
    1202:	61 f5       	brne	.+88     	; 0x125c <fat_write_dir_entry+0x16e>
    1204:	11 96       	adiw	r26, 0x01	; 1
    1206:	8c 91       	ld	r24, X
    1208:	11 97       	sbiw	r26, 0x01	; 1
    120a:	8e 32       	cpi	r24, 0x2E	; 46
    120c:	31 f4       	brne	.+12     	; 0x121a <fat_write_dir_entry+0x12c>
    120e:	12 96       	adiw	r26, 0x02	; 2
    1210:	8c 91       	ld	r24, X
    1212:	81 11       	cpse	r24, r1
    1214:	23 c0       	rjmp	.+70     	; 0x125c <fat_write_dir_entry+0x16e>
    1216:	19 a2       	std	Y+33, r1	; 0x21
    1218:	21 c0       	rjmp	.+66     	; 0x125c <fat_write_dir_entry+0x16e>
    121a:	81 11       	cpse	r24, r1
    121c:	1f c0       	rjmp	.+62     	; 0x125c <fat_write_dir_entry+0x16e>
    121e:	19 a2       	std	Y+33, r1	; 0x21
    1220:	1d c0       	rjmp	.+58     	; 0x125c <fat_write_dir_entry+0x16e>
    1222:	88 e0       	ldi	r24, 0x08	; 8
    1224:	f6 01       	movw	r30, r12
    1226:	de 01       	movw	r26, r28
    1228:	11 96       	adiw	r26, 0x01	; 1
    122a:	01 90       	ld	r0, Z+
    122c:	0d 92       	st	X+, r0
    122e:	8a 95       	dec	r24
    1230:	e1 f7       	brne	.-8      	; 0x122a <fat_write_dir_entry+0x13c>
    1232:	f6 01       	movw	r30, r12
    1234:	81 a1       	ldd	r24, Z+33	; 0x21
    1236:	80 3a       	cpi	r24, 0xA0	; 160
    1238:	28 f4       	brcc	.+10     	; 0x1244 <fat_write_dir_entry+0x156>
    123a:	98 2f       	mov	r25, r24
    123c:	92 95       	swap	r25
    123e:	9f 70       	andi	r25, 0x0F	; 15
    1240:	90 5d       	subi	r25, 0xD0	; 208
    1242:	04 c0       	rjmp	.+8      	; 0x124c <fat_write_dir_entry+0x15e>
    1244:	98 2f       	mov	r25, r24
    1246:	92 95       	swap	r25
    1248:	9f 70       	andi	r25, 0x0F	; 15
    124a:	9f 59       	subi	r25, 0x9F	; 159
    124c:	9f 83       	std	Y+7, r25	; 0x07
    124e:	8f 70       	andi	r24, 0x0F	; 15
    1250:	8a 30       	cpi	r24, 0x0A	; 10
    1252:	10 f4       	brcc	.+4      	; 0x1258 <fat_write_dir_entry+0x16a>
    1254:	80 5d       	subi	r24, 0xD0	; 208
    1256:	01 c0       	rjmp	.+2      	; 0x125a <fat_write_dir_entry+0x16c>
    1258:	8f 59       	subi	r24, 0x9F	; 159
    125a:	88 87       	std	Y+8, r24	; 0x08
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	85 3e       	cpi	r24, 0xE5	; 229
    1260:	11 f4       	brne	.+4      	; 0x1266 <fat_write_dir_entry+0x178>
    1262:	85 e0       	ldi	r24, 0x05	; 5
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	fe 01       	movw	r30, r28
    1268:	3c 96       	adiw	r30, 0x0c	; 12
    126a:	85 e1       	ldi	r24, 0x15	; 21
    126c:	df 01       	movw	r26, r30
    126e:	1d 92       	st	X+, r1
    1270:	8a 95       	dec	r24
    1272:	e9 f7       	brne	.-6      	; 0x126e <fat_write_dir_entry+0x180>
    1274:	f6 01       	movw	r30, r12
    1276:	80 a1       	ldd	r24, Z+32	; 0x20
    1278:	8c 87       	std	Y+12, r24	; 0x0c
    127a:	81 a1       	ldd	r24, Z+33	; 0x21
    127c:	92 a1       	ldd	r25, Z+34	; 0x22
    127e:	a3 a1       	ldd	r26, Z+35	; 0x23
    1280:	b4 a1       	ldd	r27, Z+36	; 0x24
    1282:	bd 01       	movw	r22, r26
    1284:	88 27       	eor	r24, r24
    1286:	99 27       	eor	r25, r25
    1288:	ce 01       	movw	r24, r28
    128a:	45 96       	adiw	r24, 0x15	; 21
    128c:	0e 94 1d 01 	call	0x23a	; 0x23a <write16>
    1290:	d6 01       	movw	r26, r12
    1292:	91 96       	adiw	r26, 0x21	; 33
    1294:	6d 91       	ld	r22, X+
    1296:	7c 91       	ld	r23, X
    1298:	92 97       	sbiw	r26, 0x22	; 34
    129a:	ce 01       	movw	r24, r28
    129c:	4b 96       	adiw	r24, 0x1b	; 27
    129e:	0e 94 1d 01 	call	0x23a	; 0x23a <write16>
    12a2:	f6 01       	movw	r30, r12
    12a4:	45 a1       	ldd	r20, Z+37	; 0x25
    12a6:	56 a1       	ldd	r21, Z+38	; 0x26
    12a8:	67 a1       	ldd	r22, Z+39	; 0x27
    12aa:	70 a5       	ldd	r23, Z+40	; 0x28
    12ac:	ce 01       	movw	r24, r28
    12ae:	4d 96       	adiw	r24, 0x1d	; 29
    12b0:	0e 94 21 01 	call	0x242	; 0x242 <write32>
    12b4:	29 a1       	ldd	r18, Y+33	; 0x21
    12b6:	f0 e2       	ldi	r31, 0x20	; 32
    12b8:	2f 9f       	mul	r18, r31
    12ba:	a0 01       	movw	r20, r0
    12bc:	11 24       	eor	r1, r1
    12be:	24 2f       	mov	r18, r20
    12c0:	35 2f       	mov	r19, r21
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	a9 2c       	mov	r10, r9
    12d0:	b8 2c       	mov	r11, r8
    12d2:	c7 2c       	mov	r12, r7
    12d4:	d6 2c       	mov	r13, r6
    12d6:	e5 2c       	mov	r14, r5
    12d8:	f4 2c       	mov	r15, r4
    12da:	03 2d       	mov	r16, r3
    12dc:	12 2d       	mov	r17, r2
    12de:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
    12e2:	68 94       	set
    12e4:	ee 24       	eor	r14, r14
    12e6:	e5 f8       	bld	r14, 5
    12e8:	f1 2c       	mov	r15, r1
    12ea:	8e 01       	movw	r16, r28
    12ec:	0f 5f       	subi	r16, 0xFF	; 255
    12ee:	1f 4f       	sbci	r17, 0xFF	; 255
    12f0:	ea a1       	ldd	r30, Y+34	; 0x22
    12f2:	fb a1       	ldd	r31, Y+35	; 0x23
    12f4:	09 95       	icall
    12f6:	88 23       	and	r24, r24
    12f8:	09 f4       	brne	.+2      	; 0x12fc <fat_write_dir_entry+0x20e>
    12fa:	8f c0       	rjmp	.+286    	; 0x141a <fat_write_dir_entry+0x32c>
    12fc:	c8 01       	movw	r24, r16
    12fe:	0e 94 82 06 	call	0xd04	; 0xd04 <fat_calc_83_checksum>
    1302:	a8 2e       	mov	r10, r24
    1304:	f9 a1       	ldd	r31, Y+33	; 0x21
    1306:	ff 23       	and	r31, r31
    1308:	09 f4       	brne	.+2      	; 0x130c <fat_write_dir_entry+0x21e>
    130a:	80 c0       	rjmp	.+256    	; 0x140c <fat_write_dir_entry+0x31e>
    130c:	df 2e       	mov	r13, r31
    130e:	0f 2e       	mov	r0, r31
    1310:	fe e0       	ldi	r31, 0x0E	; 14
    1312:	bf 2e       	mov	r11, r31
    1314:	f0 2d       	mov	r31, r0
    1316:	0f 2e       	mov	r0, r31
    1318:	fc e1       	ldi	r31, 0x1C	; 28
    131a:	cf 2e       	mov	r12, r31
    131c:	f0 2d       	mov	r31, r0
    131e:	f0 64       	ori	r31, 0x40	; 64
    1320:	fe a3       	std	Y+38, r31	; 0x26
    1322:	40 e2       	ldi	r20, 0x20	; 32
    1324:	50 e0       	ldi	r21, 0x00	; 0
    1326:	6f ef       	ldi	r22, 0xFF	; 255
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	ce 01       	movw	r24, r28
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	0e 94 97 21 	call	0x432e	; 0x432e <memset>
    1332:	8d 2d       	mov	r24, r13
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	2d e0       	ldi	r18, 0x0D	; 13
    133a:	28 9f       	mul	r18, r24
    133c:	f0 01       	movw	r30, r0
    133e:	29 9f       	mul	r18, r25
    1340:	f0 0d       	add	r31, r0
    1342:	11 24       	eor	r1, r1
    1344:	8c a1       	ldd	r24, Y+36	; 0x24
    1346:	9d a1       	ldd	r25, Y+37	; 0x25
    1348:	e8 0f       	add	r30, r24
    134a:	f9 1f       	adc	r31, r25
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	bf 01       	movw	r22, r30
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <fat_write_dir_entry+0x266>
    1352:	31 96       	adiw	r30, 0x01	; 1
    1354:	91 e0       	ldi	r25, 0x01	; 1
    1356:	98 0f       	add	r25, r24
    1358:	db 01       	movw	r26, r22
    135a:	4d 91       	ld	r20, X+
    135c:	bd 01       	movw	r22, r26
    135e:	21 e0       	ldi	r18, 0x01	; 1
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	2c 0f       	add	r18, r28
    1364:	3d 1f       	adc	r19, r29
    1366:	28 0f       	add	r18, r24
    1368:	31 1d       	adc	r19, r1
    136a:	d9 01       	movw	r26, r18
    136c:	4c 93       	st	X, r20
    136e:	8e 5f       	subi	r24, 0xFE	; 254
    1370:	21 e0       	ldi	r18, 0x01	; 1
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	2c 0f       	add	r18, r28
    1376:	3d 1f       	adc	r19, r29
    1378:	29 0f       	add	r18, r25
    137a:	31 1d       	adc	r19, r1
    137c:	d9 01       	movw	r26, r18
    137e:	1c 92       	st	X, r1
    1380:	8b 30       	cpi	r24, 0x0B	; 11
    1382:	09 f4       	brne	.+2      	; 0x1386 <fat_write_dir_entry+0x298>
    1384:	45 c0       	rjmp	.+138    	; 0x1410 <fat_write_dir_entry+0x322>
    1386:	8a 31       	cpi	r24, 0x1A	; 26
    1388:	11 f4       	brne	.+4      	; 0x138e <fat_write_dir_entry+0x2a0>
    138a:	8c 2d       	mov	r24, r12
    138c:	42 c0       	rjmp	.+132    	; 0x1412 <fat_write_dir_entry+0x324>
    138e:	90 81       	ld	r25, Z
    1390:	99 23       	and	r25, r25
    1392:	11 f0       	breq	.+4      	; 0x1398 <fat_write_dir_entry+0x2aa>
    1394:	8f 31       	cpi	r24, 0x1F	; 31
    1396:	e8 f2       	brcs	.-70     	; 0x1352 <fat_write_dir_entry+0x264>
    1398:	d9 82       	std	Y+1, r13	; 0x01
    139a:	b9 a1       	ldd	r27, Y+33	; 0x21
    139c:	db 12       	cpse	r13, r27
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <fat_write_dir_entry+0x2b6>
    13a0:	ee a1       	ldd	r30, Y+38	; 0x26
    13a2:	e9 83       	std	Y+1, r30	; 0x01
    13a4:	ff e0       	ldi	r31, 0x0F	; 15
    13a6:	fc 87       	std	Y+12, r31	; 0x0c
    13a8:	ae 86       	std	Y+14, r10	; 0x0e
    13aa:	1d 86       	std	Y+13, r1	; 0x0d
    13ac:	1b 8e       	std	Y+27, r1	; 0x1b
    13ae:	1c 8e       	std	Y+28, r1	; 0x1c
    13b0:	68 94       	set
    13b2:	ee 24       	eor	r14, r14
    13b4:	e5 f8       	bld	r14, 5
    13b6:	f1 2c       	mov	r15, r1
    13b8:	8e 01       	movw	r16, r28
    13ba:	0f 5f       	subi	r16, 0xFF	; 255
    13bc:	1f 4f       	sbci	r17, 0xFF	; 255
    13be:	29 2d       	mov	r18, r9
    13c0:	38 2d       	mov	r19, r8
    13c2:	47 2d       	mov	r20, r7
    13c4:	56 2d       	mov	r21, r6
    13c6:	65 2d       	mov	r22, r5
    13c8:	74 2d       	mov	r23, r4
    13ca:	83 2d       	mov	r24, r3
    13cc:	92 2d       	mov	r25, r2
    13ce:	ea a1       	ldd	r30, Y+34	; 0x22
    13d0:	fb a1       	ldd	r31, Y+35	; 0x23
    13d2:	09 95       	icall
    13d4:	29 2d       	mov	r18, r9
    13d6:	38 2d       	mov	r19, r8
    13d8:	47 2d       	mov	r20, r7
    13da:	56 2d       	mov	r21, r6
    13dc:	65 2d       	mov	r22, r5
    13de:	74 2d       	mov	r23, r4
    13e0:	83 2d       	mov	r24, r3
    13e2:	92 2d       	mov	r25, r2
    13e4:	a0 e2       	ldi	r26, 0x20	; 32
    13e6:	0e 94 64 21 	call	0x42c8	; 0x42c8 <__adddi3_s8>
    13ea:	92 2e       	mov	r9, r18
    13ec:	83 2e       	mov	r8, r19
    13ee:	74 2e       	mov	r7, r20
    13f0:	65 2e       	mov	r6, r21
    13f2:	56 2e       	mov	r5, r22
    13f4:	47 2e       	mov	r4, r23
    13f6:	38 2e       	mov	r3, r24
    13f8:	29 2e       	mov	r2, r25
    13fa:	da 94       	dec	r13
    13fc:	d1 10       	cpse	r13, r1
    13fe:	91 cf       	rjmp	.-222    	; 0x1322 <fat_write_dir_entry+0x234>
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	0b c0       	rjmp	.+22     	; 0x141a <fat_write_dir_entry+0x32c>
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	09 c0       	rjmp	.+18     	; 0x141a <fat_write_dir_entry+0x32c>
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	07 c0       	rjmp	.+14     	; 0x141a <fat_write_dir_entry+0x32c>
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	05 c0       	rjmp	.+10     	; 0x141a <fat_write_dir_entry+0x32c>
    1410:	8b 2d       	mov	r24, r11
    1412:	90 81       	ld	r25, Z
    1414:	91 11       	cpse	r25, r1
    1416:	9d cf       	rjmp	.-198    	; 0x1352 <fat_write_dir_entry+0x264>
    1418:	bf cf       	rjmp	.-130    	; 0x1398 <fat_write_dir_entry+0x2aa>
    141a:	a6 96       	adiw	r28, 0x26	; 38
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	ff 90       	pop	r15
    1430:	ef 90       	pop	r14
    1432:	df 90       	pop	r13
    1434:	cf 90       	pop	r12
    1436:	bf 90       	pop	r11
    1438:	af 90       	pop	r10
    143a:	9f 90       	pop	r9
    143c:	8f 90       	pop	r8
    143e:	7f 90       	pop	r7
    1440:	6f 90       	pop	r6
    1442:	5f 90       	pop	r5
    1444:	4f 90       	pop	r4
    1446:	3f 90       	pop	r3
    1448:	2f 90       	pop	r2
    144a:	08 95       	ret

0000144c <fat_open>:
    144c:	2f 92       	push	r2
    144e:	3f 92       	push	r3
    1450:	4f 92       	push	r4
    1452:	5f 92       	push	r5
    1454:	6f 92       	push	r6
    1456:	7f 92       	push	r7
    1458:	8f 92       	push	r8
    145a:	9f 92       	push	r9
    145c:	af 92       	push	r10
    145e:	bf 92       	push	r11
    1460:	cf 92       	push	r12
    1462:	df 92       	push	r13
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	c6 55       	subi	r28, 0x56	; 86
    1476:	d1 09       	sbc	r29, r1
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	09 f4       	brne	.+2      	; 0x1488 <fat_open+0x3c>
    1486:	70 c2       	rjmp	.+1248   	; 0x1968 <fat_open+0x51c>
    1488:	dc 01       	movw	r26, r24
    148a:	14 96       	adiw	r26, 0x04	; 4
    148c:	2d 91       	ld	r18, X+
    148e:	3c 91       	ld	r19, X
    1490:	15 97       	sbiw	r26, 0x05	; 5
    1492:	23 2b       	or	r18, r19
    1494:	09 f4       	brne	.+2      	; 0x1498 <fat_open+0x4c>
    1496:	6b c2       	rjmp	.+1238   	; 0x196e <fat_open+0x522>
    1498:	16 96       	adiw	r26, 0x06	; 6
    149a:	2d 91       	ld	r18, X+
    149c:	3c 91       	ld	r19, X
    149e:	17 97       	sbiw	r26, 0x07	; 7
    14a0:	23 2b       	or	r18, r19
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <fat_open+0x5a>
    14a4:	67 c2       	rjmp	.+1230   	; 0x1974 <fat_open+0x528>
    14a6:	20 91 d9 01 	lds	r18, 0x01D9	; 0x8001d9 <fat_fs_handles>
    14aa:	30 91 da 01 	lds	r19, 0x01DA	; 0x8001da <fat_fs_handles+0x1>
    14ae:	23 2b       	or	r18, r19
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <fat_open+0x68>
    14b2:	63 c2       	rjmp	.+1222   	; 0x197a <fat_open+0x52e>
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	9c c2       	rjmp	.+1336   	; 0x19f2 <fat_open+0x5a6>
    14ba:	ce 01       	movw	r24, r28
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	0e 94 01 01 	call	0x202	; 0x202 <read16>
    14c2:	9a af       	std	Y+58, r25	; 0x3a
    14c4:	89 af       	std	Y+57, r24	; 0x39
    14c6:	ce 01       	movw	r24, r28
    14c8:	04 96       	adiw	r24, 0x04	; 4
    14ca:	0e 94 01 01 	call	0x202	; 0x202 <read16>
    14ce:	9c af       	std	Y+60, r25	; 0x3c
    14d0:	8b af       	std	Y+59, r24	; 0x3b
    14d2:	bb 81       	ldd	r27, Y+3	; 0x03
    14d4:	24 96       	adiw	r28, 0x04	; 4
    14d6:	bf af       	std	Y+63, r27	; 0x3f
    14d8:	24 97       	sbiw	r28, 0x04	; 4
    14da:	ee 81       	ldd	r30, Y+6	; 0x06
    14dc:	25 96       	adiw	r28, 0x05	; 5
    14de:	ef af       	std	Y+63, r30	; 0x3f
    14e0:	25 97       	sbiw	r28, 0x05	; 5
    14e2:	ce 01       	movw	r24, r28
    14e4:	07 96       	adiw	r24, 0x07	; 7
    14e6:	0e 94 01 01 	call	0x202	; 0x202 <read16>
    14ea:	2f 96       	adiw	r28, 0x0f	; 15
    14ec:	9f af       	std	Y+63, r25	; 0x3f
    14ee:	8e af       	std	Y+62, r24	; 0x3e
    14f0:	2f 97       	sbiw	r28, 0x0f	; 15
    14f2:	ce 01       	movw	r24, r28
    14f4:	09 96       	adiw	r24, 0x09	; 9
    14f6:	0e 94 01 01 	call	0x202	; 0x202 <read16>
    14fa:	7c 01       	movw	r14, r24
    14fc:	ce 01       	movw	r24, r28
    14fe:	0c 96       	adiw	r24, 0x0c	; 12
    1500:	0e 94 01 01 	call	0x202	; 0x202 <read16>
    1504:	23 96       	adiw	r28, 0x03	; 3
    1506:	9f af       	std	Y+63, r25	; 0x3f
    1508:	8e af       	std	Y+62, r24	; 0x3e
    150a:	23 97       	sbiw	r28, 0x03	; 3
    150c:	ce 01       	movw	r24, r28
    150e:	46 96       	adiw	r24, 0x16	; 22
    1510:	0e 94 0b 01 	call	0x216	; 0x216 <read32>
    1514:	5b 01       	movw	r10, r22
    1516:	6c 01       	movw	r12, r24
    1518:	ce 01       	movw	r24, r28
    151a:	4a 96       	adiw	r24, 0x1a	; 26
    151c:	0e 94 0b 01 	call	0x216	; 0x216 <read32>
    1520:	21 96       	adiw	r28, 0x01	; 1
    1522:	6c af       	std	Y+60, r22	; 0x3c
    1524:	7d af       	std	Y+61, r23	; 0x3d
    1526:	8e af       	std	Y+62, r24	; 0x3e
    1528:	9f af       	std	Y+63, r25	; 0x3f
    152a:	21 97       	sbiw	r28, 0x01	; 1
    152c:	ce 01       	movw	r24, r28
    152e:	82 96       	adiw	r24, 0x22	; 34
    1530:	0e 94 0b 01 	call	0x216	; 0x216 <read32>
    1534:	67 96       	adiw	r28, 0x17	; 23
    1536:	6c af       	std	Y+60, r22	; 0x3c
    1538:	7d af       	std	Y+61, r23	; 0x3d
    153a:	8e af       	std	Y+62, r24	; 0x3e
    153c:	9f af       	std	Y+63, r25	; 0x3f
    153e:	67 97       	sbiw	r28, 0x17	; 23
    1540:	a1 14       	cp	r10, r1
    1542:	b1 04       	cpc	r11, r1
    1544:	c1 04       	cpc	r12, r1
    1546:	d1 04       	cpc	r13, r1
    1548:	39 f4       	brne	.+14     	; 0x1558 <fat_open+0x10c>
    154a:	e1 14       	cp	r14, r1
    154c:	f1 04       	cpc	r15, r1
    154e:	09 f4       	brne	.+2      	; 0x1552 <fat_open+0x106>
    1550:	47 c2       	rjmp	.+1166   	; 0x19e0 <fat_open+0x594>
    1552:	57 01       	movw	r10, r14
    1554:	c1 2c       	mov	r12, r1
    1556:	d1 2c       	mov	r13, r1
    1558:	23 96       	adiw	r28, 0x03	; 3
    155a:	ee ac       	ldd	r14, Y+62	; 0x3e
    155c:	ff ac       	ldd	r15, Y+63	; 0x3f
    155e:	23 97       	sbiw	r28, 0x03	; 3
    1560:	e1 14       	cp	r14, r1
    1562:	f1 04       	cpc	r15, r1
    1564:	51 f0       	breq	.+20     	; 0x157a <fat_open+0x12e>
    1566:	87 01       	movw	r16, r14
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	21 96       	adiw	r28, 0x01	; 1
    156e:	0c af       	std	Y+60, r16	; 0x3c
    1570:	1d af       	std	Y+61, r17	; 0x3d
    1572:	2e af       	std	Y+62, r18	; 0x3e
    1574:	3f af       	std	Y+63, r19	; 0x3f
    1576:	21 97       	sbiw	r28, 0x01	; 1
    1578:	0b c0       	rjmp	.+22     	; 0x1590 <fat_open+0x144>
    157a:	21 96       	adiw	r28, 0x01	; 1
    157c:	4c ad       	ldd	r20, Y+60	; 0x3c
    157e:	5d ad       	ldd	r21, Y+61	; 0x3d
    1580:	6e ad       	ldd	r22, Y+62	; 0x3e
    1582:	7f ad       	ldd	r23, Y+63	; 0x3f
    1584:	21 97       	sbiw	r28, 0x01	; 1
    1586:	45 2b       	or	r20, r21
    1588:	46 2b       	or	r20, r22
    158a:	47 2b       	or	r20, r23
    158c:	09 f4       	brne	.+2      	; 0x1590 <fat_open+0x144>
    158e:	28 c2       	rjmp	.+1104   	; 0x19e0 <fat_open+0x594>
    1590:	25 96       	adiw	r28, 0x05	; 5
    1592:	5f ad       	ldd	r21, Y+63	; 0x3f
    1594:	25 97       	sbiw	r28, 0x05	; 5
    1596:	a5 2f       	mov	r26, r21
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	21 96       	adiw	r28, 0x01	; 1
    159c:	2c ad       	ldd	r18, Y+60	; 0x3c
    159e:	3d ad       	ldd	r19, Y+61	; 0x3d
    15a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    15a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    15a4:	21 97       	sbiw	r28, 0x01	; 1
    15a6:	0e 94 c0 20 	call	0x4180	; 0x4180 <__muluhisi3>
    15aa:	86 01       	movw	r16, r12
    15ac:	75 01       	movw	r14, r10
    15ae:	2b ad       	ldd	r18, Y+59	; 0x3b
    15b0:	3c ad       	ldd	r19, Y+60	; 0x3c
    15b2:	e2 1a       	sub	r14, r18
    15b4:	f3 0a       	sbc	r15, r19
    15b6:	01 09       	sbc	r16, r1
    15b8:	11 09       	sbc	r17, r1
    15ba:	e6 1a       	sub	r14, r22
    15bc:	f7 0a       	sbc	r15, r23
    15be:	08 0b       	sbc	r16, r24
    15c0:	19 0b       	sbc	r17, r25
    15c2:	2f 96       	adiw	r28, 0x0f	; 15
    15c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    15c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    15c8:	2f 97       	sbiw	r28, 0x0f	; 15
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	82 95       	swap	r24
    15d0:	92 95       	swap	r25
    15d2:	90 7f       	andi	r25, 0xF0	; 240
    15d4:	98 27       	eor	r25, r24
    15d6:	80 7f       	andi	r24, 0xF0	; 240
    15d8:	98 27       	eor	r25, r24
    15da:	49 ad       	ldd	r20, Y+57	; 0x39
    15dc:	5a ad       	ldd	r21, Y+58	; 0x3a
    15de:	41 50       	subi	r20, 0x01	; 1
    15e0:	51 09       	sbc	r21, r1
    15e2:	84 0f       	add	r24, r20
    15e4:	95 1f       	adc	r25, r21
    15e6:	69 ad       	ldd	r22, Y+57	; 0x39
    15e8:	7a ad       	ldd	r23, Y+58	; 0x3a
    15ea:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__udivmodhi4>
    15ee:	e6 1a       	sub	r14, r22
    15f0:	f7 0a       	sbc	r15, r23
    15f2:	01 09       	sbc	r16, r1
    15f4:	11 09       	sbc	r17, r1
    15f6:	c8 01       	movw	r24, r16
    15f8:	b7 01       	movw	r22, r14
    15fa:	24 96       	adiw	r28, 0x04	; 4
    15fc:	4f ad       	ldd	r20, Y+63	; 0x3f
    15fe:	24 97       	sbiw	r28, 0x04	; 4
    1600:	04 2f       	mov	r16, r20
    1602:	10 e0       	ldi	r17, 0x00	; 0
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	a9 01       	movw	r20, r18
    160a:	98 01       	movw	r18, r16
    160c:	0e 94 89 20 	call	0x4112	; 0x4112 <__udivmodsi4>
    1610:	63 96       	adiw	r28, 0x13	; 19
    1612:	2c af       	std	Y+60, r18	; 0x3c
    1614:	3d af       	std	Y+61, r19	; 0x3d
    1616:	4e af       	std	Y+62, r20	; 0x3e
    1618:	5f af       	std	Y+63, r21	; 0x3f
    161a:	63 97       	sbiw	r28, 0x13	; 19
    161c:	da 01       	movw	r26, r20
    161e:	c9 01       	movw	r24, r18
    1620:	85 3f       	cpi	r24, 0xF5	; 245
    1622:	5f e0       	ldi	r21, 0x0F	; 15
    1624:	95 07       	cpc	r25, r21
    1626:	a1 05       	cpc	r26, r1
    1628:	b1 05       	cpc	r27, r1
    162a:	08 f4       	brcc	.+2      	; 0x162e <fat_open+0x1e2>
    162c:	d9 c1       	rjmp	.+946    	; 0x19e0 <fat_open+0x594>
    162e:	85 3f       	cpi	r24, 0xF5	; 245
    1630:	9f 4f       	sbci	r25, 0xFF	; 255
    1632:	a1 05       	cpc	r26, r1
    1634:	b1 05       	cpc	r27, r1
    1636:	28 f4       	brcc	.+10     	; 0x1642 <fat_open+0x1f6>
    1638:	86 e0       	ldi	r24, 0x06	; 6
    163a:	d2 01       	movw	r26, r4
    163c:	18 96       	adiw	r26, 0x08	; 8
    163e:	8c 93       	st	X, r24
    1640:	03 c0       	rjmp	.+6      	; 0x1648 <fat_open+0x1fc>
    1642:	8b e0       	ldi	r24, 0x0B	; 11
    1644:	f2 01       	movw	r30, r4
    1646:	80 87       	std	Z+8, r24	; 0x08
    1648:	8c e2       	ldi	r24, 0x2C	; 44
    164a:	eb ed       	ldi	r30, 0xDB	; 219
    164c:	f1 e0       	ldi	r31, 0x01	; 1
    164e:	df 01       	movw	r26, r30
    1650:	1d 92       	st	X+, r1
    1652:	8a 95       	dec	r24
    1654:	e9 f7       	brne	.-6      	; 0x1650 <fat_open+0x204>
    1656:	09 ad       	ldd	r16, Y+57	; 0x39
    1658:	1a ad       	ldd	r17, Y+58	; 0x3a
    165a:	78 01       	movw	r14, r16
    165c:	00 e0       	ldi	r16, 0x00	; 0
    165e:	10 e0       	ldi	r17, 0x00	; 0
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	a9 01       	movw	r20, r18
    1666:	e9 aa       	std	Y+49, r14	; 0x31
    1668:	fa aa       	std	Y+50, r15	; 0x32
    166a:	0b ab       	std	Y+51, r16	; 0x33
    166c:	1c ab       	std	Y+52, r17	; 0x34
    166e:	2d ab       	std	Y+53, r18	; 0x35
    1670:	3e ab       	std	Y+54, r19	; 0x36
    1672:	4f ab       	std	Y+55, r20	; 0x37
    1674:	58 af       	std	Y+56, r21	; 0x38
    1676:	0f 2e       	mov	r0, r31
    1678:	f9 ed       	ldi	r31, 0xD9	; 217
    167a:	8f 2e       	mov	r8, r31
    167c:	f1 e0       	ldi	r31, 0x01	; 1
    167e:	9f 2e       	mov	r9, r31
    1680:	f0 2d       	mov	r31, r0
    1682:	a6 01       	movw	r20, r12
    1684:	95 01       	movw	r18, r10
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	cb 01       	movw	r24, r22
    168c:	26 96       	adiw	r28, 0x06	; 6
    168e:	af ae       	std	Y+63, r10	; 0x3f
    1690:	26 97       	sbiw	r28, 0x06	; 6
    1692:	27 96       	adiw	r28, 0x07	; 7
    1694:	3f af       	std	Y+63, r19	; 0x3f
    1696:	27 97       	sbiw	r28, 0x07	; 7
    1698:	28 96       	adiw	r28, 0x08	; 8
    169a:	4f af       	std	Y+63, r20	; 0x3f
    169c:	28 97       	sbiw	r28, 0x08	; 8
    169e:	29 96       	adiw	r28, 0x09	; 9
    16a0:	5f af       	std	Y+63, r21	; 0x3f
    16a2:	29 97       	sbiw	r28, 0x09	; 9
    16a4:	2a 96       	adiw	r28, 0x0a	; 10
    16a6:	6f af       	std	Y+63, r22	; 0x3f
    16a8:	2a 97       	sbiw	r28, 0x0a	; 10
    16aa:	2b 96       	adiw	r28, 0x0b	; 11
    16ac:	7f af       	std	Y+63, r23	; 0x3f
    16ae:	2b 97       	sbiw	r28, 0x0b	; 11
    16b0:	2c 96       	adiw	r28, 0x0c	; 12
    16b2:	8f af       	std	Y+63, r24	; 0x3f
    16b4:	2c 97       	sbiw	r28, 0x0c	; 12
    16b6:	2d 96       	adiw	r28, 0x0d	; 13
    16b8:	9f af       	std	Y+63, r25	; 0x3f
    16ba:	2d 97       	sbiw	r28, 0x0d	; 13
    16bc:	ae 2c       	mov	r10, r14
    16be:	bf 2c       	mov	r11, r15
    16c0:	c1 2c       	mov	r12, r1
    16c2:	d1 2c       	mov	r13, r1
    16c4:	e1 2c       	mov	r14, r1
    16c6:	f1 2c       	mov	r15, r1
    16c8:	00 e0       	ldi	r16, 0x00	; 0
    16ca:	10 e0       	ldi	r17, 0x00	; 0
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	0e 94 cb 20 	call	0x4196	; 0x4196 <__muldi3>
    16d8:	d4 01       	movw	r26, r8
    16da:	12 96       	adiw	r26, 0x02	; 2
    16dc:	2c 93       	st	X, r18
    16de:	12 97       	sbiw	r26, 0x02	; 2
    16e0:	13 96       	adiw	r26, 0x03	; 3
    16e2:	3c 93       	st	X, r19
    16e4:	13 97       	sbiw	r26, 0x03	; 3
    16e6:	14 96       	adiw	r26, 0x04	; 4
    16e8:	4c 93       	st	X, r20
    16ea:	14 97       	sbiw	r26, 0x04	; 4
    16ec:	15 96       	adiw	r26, 0x05	; 5
    16ee:	5c 93       	st	X, r21
    16f0:	15 97       	sbiw	r26, 0x05	; 5
    16f2:	16 96       	adiw	r26, 0x06	; 6
    16f4:	6c 93       	st	X, r22
    16f6:	16 97       	sbiw	r26, 0x06	; 6
    16f8:	17 96       	adiw	r26, 0x07	; 7
    16fa:	7c 93       	st	X, r23
    16fc:	17 97       	sbiw	r26, 0x07	; 7
    16fe:	18 96       	adiw	r26, 0x08	; 8
    1700:	8c 93       	st	X, r24
    1702:	18 97       	sbiw	r26, 0x08	; 8
    1704:	19 96       	adiw	r26, 0x09	; 9
    1706:	9c 93       	st	X, r25
    1708:	eb ad       	ldd	r30, Y+59	; 0x3b
    170a:	fc ad       	ldd	r31, Y+60	; 0x3c
    170c:	af 01       	movw	r20, r30
    170e:	2e 2f       	mov	r18, r30
    1710:	35 2f       	mov	r19, r21
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0e 94 cb 20 	call	0x4196	; 0x4196 <__muldi3>
    1722:	a6 2c       	mov	r10, r6
    1724:	b7 2c       	mov	r11, r7
    1726:	ce a0       	ldd	r12, Y+38	; 0x26
    1728:	de a4       	ldd	r13, Y+46	; 0x2e
    172a:	ef a4       	ldd	r14, Y+47	; 0x2f
    172c:	f8 a8       	ldd	r15, Y+48	; 0x30
    172e:	02 2d       	mov	r16, r2
    1730:	13 2d       	mov	r17, r3
    1732:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
    1736:	72 2e       	mov	r7, r18
    1738:	63 2e       	mov	r6, r19
    173a:	4e a7       	std	Y+46, r20	; 0x2e
    173c:	5f a7       	std	Y+47, r21	; 0x2f
    173e:	68 ab       	std	Y+48, r22	; 0x30
    1740:	7b af       	std	Y+59, r23	; 0x3b
    1742:	28 2e       	mov	r2, r24
    1744:	39 2e       	mov	r3, r25
    1746:	d4 01       	movw	r26, r8
    1748:	1a 96       	adiw	r26, 0x0a	; 10
    174a:	2c 93       	st	X, r18
    174c:	1a 97       	sbiw	r26, 0x0a	; 10
    174e:	1b 96       	adiw	r26, 0x0b	; 11
    1750:	3c 93       	st	X, r19
    1752:	1b 97       	sbiw	r26, 0x0b	; 11
    1754:	1c 96       	adiw	r26, 0x0c	; 12
    1756:	4c 93       	st	X, r20
    1758:	1c 97       	sbiw	r26, 0x0c	; 12
    175a:	1d 96       	adiw	r26, 0x0d	; 13
    175c:	5c 93       	st	X, r21
    175e:	1d 97       	sbiw	r26, 0x0d	; 13
    1760:	1e 96       	adiw	r26, 0x0e	; 14
    1762:	6c 93       	st	X, r22
    1764:	1e 97       	sbiw	r26, 0x0e	; 14
    1766:	1f 96       	adiw	r26, 0x0f	; 15
    1768:	7c 93       	st	X, r23
    176a:	1f 97       	sbiw	r26, 0x0f	; 15
    176c:	50 96       	adiw	r26, 0x10	; 16
    176e:	8c 93       	st	X, r24
    1770:	50 97       	sbiw	r26, 0x10	; 16
    1772:	51 96       	adiw	r26, 0x11	; 17
    1774:	9c 93       	st	X, r25
    1776:	63 96       	adiw	r28, 0x13	; 19
    1778:	6c ad       	ldd	r22, Y+60	; 0x3c
    177a:	7d ad       	ldd	r23, Y+61	; 0x3d
    177c:	8e ad       	ldd	r24, Y+62	; 0x3e
    177e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1780:	63 97       	sbiw	r28, 0x13	; 19
    1782:	6e 5f       	subi	r22, 0xFE	; 254
    1784:	7f 4f       	sbci	r23, 0xFF	; 255
    1786:	8f 4f       	sbci	r24, 0xFF	; 255
    1788:	9f 4f       	sbci	r25, 0xFF	; 255
    178a:	f2 01       	movw	r30, r4
    178c:	20 85       	ldd	r18, Z+8	; 0x08
    178e:	26 30       	cpi	r18, 0x06	; 6
    1790:	29 f0       	breq	.+10     	; 0x179c <fat_open+0x350>
    1792:	24 e0       	ldi	r18, 0x04	; 4
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	40 e0       	ldi	r20, 0x00	; 0
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	04 c0       	rjmp	.+8      	; 0x17a4 <fat_open+0x358>
    179c:	22 e0       	ldi	r18, 0x02	; 2
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	e9 ed       	ldi	r30, 0xD9	; 217
    17a6:	f1 e0       	ldi	r31, 0x01	; 1
    17a8:	0e 94 51 20 	call	0x40a2	; 0x40a2 <__mulsi3>
    17ac:	62 8b       	std	Z+18, r22	; 0x12
    17ae:	73 8b       	std	Z+19, r23	; 0x13
    17b0:	84 8b       	std	Z+20, r24	; 0x14
    17b2:	95 8b       	std	Z+21, r25	; 0x15
    17b4:	a9 ac       	ldd	r10, Y+57	; 0x39
    17b6:	ba ac       	ldd	r11, Y+58	; 0x3a
    17b8:	b7 8a       	std	Z+23, r11	; 0x17
    17ba:	a6 8a       	std	Z+22, r10	; 0x16
    17bc:	24 96       	adiw	r28, 0x04	; 4
    17be:	cf ac       	ldd	r12, Y+63	; 0x3f
    17c0:	24 97       	sbiw	r28, 0x04	; 4
    17c2:	ca 9c       	mul	r12, r10
    17c4:	c0 01       	movw	r24, r0
    17c6:	cb 9c       	mul	r12, r11
    17c8:	90 0d       	add	r25, r0
    17ca:	11 24       	eor	r1, r1
    17cc:	91 8f       	std	Z+25, r25	; 0x19
    17ce:	80 8f       	std	Z+24, r24	; 0x18
    17d0:	d2 01       	movw	r26, r4
    17d2:	18 96       	adiw	r26, 0x08	; 8
    17d4:	8c 91       	ld	r24, X
    17d6:	86 30       	cpi	r24, 0x06	; 6
    17d8:	09 f0       	breq	.+2      	; 0x17dc <fat_open+0x390>
    17da:	63 c0       	rjmp	.+198    	; 0x18a2 <fat_open+0x456>
    17dc:	23 96       	adiw	r28, 0x03	; 3
    17de:	ee ad       	ldd	r30, Y+62	; 0x3e
    17e0:	ff ad       	ldd	r31, Y+63	; 0x3f
    17e2:	23 97       	sbiw	r28, 0x03	; 3
    17e4:	8f 01       	movw	r16, r30
    17e6:	ae 2e       	mov	r10, r30
    17e8:	b1 2e       	mov	r11, r17
    17ea:	c1 2c       	mov	r12, r1
    17ec:	d1 2c       	mov	r13, r1
    17ee:	e1 2c       	mov	r14, r1
    17f0:	f1 2c       	mov	r15, r1
    17f2:	00 e0       	ldi	r16, 0x00	; 0
    17f4:	10 e0       	ldi	r17, 0x00	; 0
    17f6:	29 a9       	ldd	r18, Y+49	; 0x31
    17f8:	3a a9       	ldd	r19, Y+50	; 0x32
    17fa:	40 e0       	ldi	r20, 0x00	; 0
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 cb 20 	call	0x4196	; 0x4196 <__muldi3>
    180a:	25 96       	adiw	r28, 0x05	; 5
    180c:	af ac       	ldd	r10, Y+63	; 0x3f
    180e:	25 97       	sbiw	r28, 0x05	; 5
    1810:	b1 2c       	mov	r11, r1
    1812:	0e 94 cb 20 	call	0x4196	; 0x4196 <__muldi3>
    1816:	a7 2c       	mov	r10, r7
    1818:	b6 2c       	mov	r11, r6
    181a:	ce a4       	ldd	r12, Y+46	; 0x2e
    181c:	df a4       	ldd	r13, Y+47	; 0x2f
    181e:	e8 a8       	ldd	r14, Y+48	; 0x30
    1820:	fb ac       	ldd	r15, Y+59	; 0x3b
    1822:	02 2d       	mov	r16, r2
    1824:	13 2d       	mov	r17, r3
    1826:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
    182a:	42 2e       	mov	r4, r18
    182c:	53 2e       	mov	r5, r19
    182e:	64 2e       	mov	r6, r20
    1830:	75 2e       	mov	r7, r21
    1832:	86 2e       	mov	r8, r22
    1834:	97 2e       	mov	r9, r23
    1836:	b8 2f       	mov	r27, r24
    1838:	a9 2f       	mov	r26, r25
    183a:	e9 ed       	ldi	r30, 0xD9	; 217
    183c:	f1 e0       	ldi	r31, 0x01	; 1
    183e:	22 a3       	std	Z+34, r18	; 0x22
    1840:	33 a3       	std	Z+35, r19	; 0x23
    1842:	44 a3       	std	Z+36, r20	; 0x24
    1844:	55 a3       	std	Z+37, r21	; 0x25
    1846:	66 a3       	std	Z+38, r22	; 0x26
    1848:	77 a3       	std	Z+39, r23	; 0x27
    184a:	80 a7       	std	Z+40, r24	; 0x28
    184c:	91 a7       	std	Z+41, r25	; 0x29
    184e:	2f 96       	adiw	r28, 0x0f	; 15
    1850:	2e ad       	ldd	r18, Y+62	; 0x3e
    1852:	3f ad       	ldd	r19, Y+63	; 0x3f
    1854:	2f 97       	sbiw	r28, 0x0f	; 15
    1856:	59 01       	movw	r10, r18
    1858:	3b 2d       	mov	r19, r11
    185a:	40 e0       	ldi	r20, 0x00	; 0
    185c:	50 e0       	ldi	r21, 0x00	; 0
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	05 e0       	ldi	r16, 0x05	; 5
    1868:	0e 94 24 21 	call	0x4248	; 0x4248 <__ashldi3>
    186c:	a2 2e       	mov	r10, r18
    186e:	b3 2e       	mov	r11, r19
    1870:	c4 2e       	mov	r12, r20
    1872:	d5 2e       	mov	r13, r21
    1874:	e6 2e       	mov	r14, r22
    1876:	f7 2e       	mov	r15, r23
    1878:	08 2f       	mov	r16, r24
    187a:	19 2f       	mov	r17, r25
    187c:	24 2d       	mov	r18, r4
    187e:	35 2d       	mov	r19, r5
    1880:	46 2d       	mov	r20, r6
    1882:	57 2d       	mov	r21, r7
    1884:	68 2d       	mov	r22, r8
    1886:	79 2d       	mov	r23, r9
    1888:	8b 2f       	mov	r24, r27
    188a:	9a 2f       	mov	r25, r26
    188c:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
    1890:	22 8f       	std	Z+26, r18	; 0x1a
    1892:	33 8f       	std	Z+27, r19	; 0x1b
    1894:	44 8f       	std	Z+28, r20	; 0x1c
    1896:	55 8f       	std	Z+29, r21	; 0x1d
    1898:	66 8f       	std	Z+30, r22	; 0x1e
    189a:	77 8f       	std	Z+31, r23	; 0x1f
    189c:	80 a3       	std	Z+32, r24	; 0x20
    189e:	91 a3       	std	Z+33, r25	; 0x21
    18a0:	a6 c0       	rjmp	.+332    	; 0x19ee <fat_open+0x5a2>
    18a2:	0f 2e       	mov	r0, r31
    18a4:	f9 ed       	ldi	r31, 0xD9	; 217
    18a6:	8f 2e       	mov	r8, r31
    18a8:	f1 e0       	ldi	r31, 0x01	; 1
    18aa:	9f 2e       	mov	r9, r31
    18ac:	f0 2d       	mov	r31, r0
    18ae:	25 96       	adiw	r28, 0x05	; 5
    18b0:	af ac       	ldd	r10, Y+63	; 0x3f
    18b2:	25 97       	sbiw	r28, 0x05	; 5
    18b4:	b1 2c       	mov	r11, r1
    18b6:	c1 2c       	mov	r12, r1
    18b8:	d1 2c       	mov	r13, r1
    18ba:	e1 2c       	mov	r14, r1
    18bc:	f1 2c       	mov	r15, r1
    18be:	00 e0       	ldi	r16, 0x00	; 0
    18c0:	10 e0       	ldi	r17, 0x00	; 0
    18c2:	29 a9       	ldd	r18, Y+49	; 0x31
    18c4:	3a a9       	ldd	r19, Y+50	; 0x32
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	50 e0       	ldi	r21, 0x00	; 0
    18ca:	60 e0       	ldi	r22, 0x00	; 0
    18cc:	70 e0       	ldi	r23, 0x00	; 0
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	0e 94 cb 20 	call	0x4196	; 0x4196 <__muldi3>
    18d6:	21 96       	adiw	r28, 0x01	; 1
    18d8:	cc ac       	ldd	r12, Y+60	; 0x3c
    18da:	dd ac       	ldd	r13, Y+61	; 0x3d
    18dc:	ee ac       	ldd	r14, Y+62	; 0x3e
    18de:	ff ac       	ldd	r15, Y+63	; 0x3f
    18e0:	21 97       	sbiw	r28, 0x01	; 1
    18e2:	56 01       	movw	r10, r12
    18e4:	67 01       	movw	r12, r14
    18e6:	e1 2c       	mov	r14, r1
    18e8:	f1 2c       	mov	r15, r1
    18ea:	87 01       	movw	r16, r14
    18ec:	ae a2       	std	Y+38, r10	; 0x26
    18ee:	bf a2       	std	Y+39, r11	; 0x27
    18f0:	c8 a6       	std	Y+40, r12	; 0x28
    18f2:	d9 a6       	std	Y+41, r13	; 0x29
    18f4:	ea a6       	std	Y+42, r14	; 0x2a
    18f6:	fb a6       	std	Y+43, r15	; 0x2b
    18f8:	0c a7       	std	Y+44, r16	; 0x2c
    18fa:	1d a7       	std	Y+45, r17	; 0x2d
    18fc:	e1 2c       	mov	r14, r1
    18fe:	f1 2c       	mov	r15, r1
    1900:	00 e0       	ldi	r16, 0x00	; 0
    1902:	10 e0       	ldi	r17, 0x00	; 0
    1904:	0e 94 cb 20 	call	0x4196	; 0x4196 <__muldi3>
    1908:	a7 2c       	mov	r10, r7
    190a:	b6 2c       	mov	r11, r6
    190c:	ce a4       	ldd	r12, Y+46	; 0x2e
    190e:	df a4       	ldd	r13, Y+47	; 0x2f
    1910:	e8 a8       	ldd	r14, Y+48	; 0x30
    1912:	fb ac       	ldd	r15, Y+59	; 0x3b
    1914:	02 2d       	mov	r16, r2
    1916:	13 2d       	mov	r17, r3
    1918:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
    191c:	d4 01       	movw	r26, r8
    191e:	5a 96       	adiw	r26, 0x1a	; 26
    1920:	2c 93       	st	X, r18
    1922:	5a 97       	sbiw	r26, 0x1a	; 26
    1924:	5b 96       	adiw	r26, 0x1b	; 27
    1926:	3c 93       	st	X, r19
    1928:	5b 97       	sbiw	r26, 0x1b	; 27
    192a:	5c 96       	adiw	r26, 0x1c	; 28
    192c:	4c 93       	st	X, r20
    192e:	5c 97       	sbiw	r26, 0x1c	; 28
    1930:	5d 96       	adiw	r26, 0x1d	; 29
    1932:	5c 93       	st	X, r21
    1934:	5d 97       	sbiw	r26, 0x1d	; 29
    1936:	5e 96       	adiw	r26, 0x1e	; 30
    1938:	6c 93       	st	X, r22
    193a:	5e 97       	sbiw	r26, 0x1e	; 30
    193c:	5f 96       	adiw	r26, 0x1f	; 31
    193e:	7c 93       	st	X, r23
    1940:	5f 97       	sbiw	r26, 0x1f	; 31
    1942:	90 96       	adiw	r26, 0x20	; 32
    1944:	8c 93       	st	X, r24
    1946:	90 97       	sbiw	r26, 0x20	; 32
    1948:	91 96       	adiw	r26, 0x21	; 33
    194a:	9c 93       	st	X, r25
    194c:	91 97       	sbiw	r26, 0x21	; 33
    194e:	67 96       	adiw	r28, 0x17	; 23
    1950:	ac ac       	ldd	r10, Y+60	; 0x3c
    1952:	bd ac       	ldd	r11, Y+61	; 0x3d
    1954:	ce ac       	ldd	r12, Y+62	; 0x3e
    1956:	df ac       	ldd	r13, Y+63	; 0x3f
    1958:	67 97       	sbiw	r28, 0x17	; 23
    195a:	9a 96       	adiw	r26, 0x2a	; 42
    195c:	ad 92       	st	X+, r10
    195e:	bd 92       	st	X+, r11
    1960:	cd 92       	st	X+, r12
    1962:	dc 92       	st	X, r13
    1964:	9d 97       	sbiw	r26, 0x2d	; 45
    1966:	43 c0       	rjmp	.+134    	; 0x19ee <fat_open+0x5a2>
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	42 c0       	rjmp	.+132    	; 0x19f2 <fat_open+0x5a6>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	3f c0       	rjmp	.+126    	; 0x19f2 <fat_open+0x5a6>
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	3c c0       	rjmp	.+120    	; 0x19f2 <fat_open+0x5a6>
    197a:	2c 01       	movw	r4, r24
    197c:	e9 ed       	ldi	r30, 0xD9	; 217
    197e:	f1 e0       	ldi	r31, 0x01	; 1
    1980:	82 e3       	ldi	r24, 0x32	; 50
    1982:	df 01       	movw	r26, r30
    1984:	1d 92       	st	X+, r1
    1986:	8a 95       	dec	r24
    1988:	e9 f7       	brne	.-6      	; 0x1984 <fat_open+0x538>
    198a:	51 82       	std	Z+1, r5	; 0x01
    198c:	40 82       	st	Z, r4
    198e:	f2 01       	movw	r30, r4
    1990:	81 84       	ldd	r8, Z+9	; 0x09
    1992:	92 84       	ldd	r9, Z+10	; 0x0a
    1994:	a3 84       	ldd	r10, Z+11	; 0x0b
    1996:	b4 84       	ldd	r11, Z+12	; 0x0c
    1998:	28 2d       	mov	r18, r8
    199a:	39 2d       	mov	r19, r9
    199c:	4a 2d       	mov	r20, r10
    199e:	5b 2d       	mov	r21, r11
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	70 e0       	ldi	r23, 0x00	; 0
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	09 e0       	ldi	r16, 0x09	; 9
    19aa:	0e 94 24 21 	call	0x4248	; 0x4248 <__ashldi3>
    19ae:	62 2e       	mov	r6, r18
    19b0:	73 2e       	mov	r7, r19
    19b2:	4e a3       	std	Y+38, r20	; 0x26
    19b4:	5e a7       	std	Y+46, r21	; 0x2e
    19b6:	6f a7       	std	Y+47, r22	; 0x2f
    19b8:	78 ab       	std	Y+48, r23	; 0x30
    19ba:	28 2e       	mov	r2, r24
    19bc:	39 2e       	mov	r3, r25
    19be:	ab e0       	ldi	r26, 0x0B	; 11
    19c0:	0e 94 64 21 	call	0x42c8	; 0x42c8 <__adddi3_s8>
    19c4:	01 90       	ld	r0, Z+
    19c6:	f0 81       	ld	r31, Z
    19c8:	e0 2d       	mov	r30, r0
    19ca:	0f 2e       	mov	r0, r31
    19cc:	f5 e2       	ldi	r31, 0x25	; 37
    19ce:	ef 2e       	mov	r14, r31
    19d0:	f1 2c       	mov	r15, r1
    19d2:	f0 2d       	mov	r31, r0
    19d4:	8e 01       	movw	r16, r28
    19d6:	0f 5f       	subi	r16, 0xFF	; 255
    19d8:	1f 4f       	sbci	r17, 0xFF	; 255
    19da:	09 95       	icall
    19dc:	81 11       	cpse	r24, r1
    19de:	6d cd       	rjmp	.-1318   	; 0x14ba <fat_open+0x6e>
    19e0:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <fat_fs_handles+0x1>
    19e4:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <fat_fs_handles>
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <fat_open+0x5a6>
    19ee:	89 ed       	ldi	r24, 0xD9	; 217
    19f0:	91 e0       	ldi	r25, 0x01	; 1
    19f2:	ca 5a       	subi	r28, 0xAA	; 170
    19f4:	df 4f       	sbci	r29, 0xFF	; 255
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	ff 90       	pop	r15
    1a0a:	ef 90       	pop	r14
    1a0c:	df 90       	pop	r13
    1a0e:	cf 90       	pop	r12
    1a10:	bf 90       	pop	r11
    1a12:	af 90       	pop	r10
    1a14:	9f 90       	pop	r9
    1a16:	8f 90       	pop	r8
    1a18:	7f 90       	pop	r7
    1a1a:	6f 90       	pop	r6
    1a1c:	5f 90       	pop	r5
    1a1e:	4f 90       	pop	r4
    1a20:	3f 90       	pop	r3
    1a22:	2f 90       	pop	r2
    1a24:	08 95       	ret

00001a26 <fat_close>:
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	19 f0       	breq	.+6      	; 0x1a30 <fat_close+0xa>
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	11 82       	std	Z+1, r1	; 0x01
    1a2e:	10 82       	st	Z, r1
    1a30:	08 95       	ret

00001a32 <fat_open_file>:
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	81 f0       	breq	.+32     	; 0x1a56 <fat_open_file+0x24>
    1a36:	61 15       	cp	r22, r1
    1a38:	71 05       	cpc	r23, r1
    1a3a:	81 f0       	breq	.+32     	; 0x1a5c <fat_open_file+0x2a>
    1a3c:	fb 01       	movw	r30, r22
    1a3e:	20 a1       	ldd	r18, Z+32	; 0x20
    1a40:	24 fd       	sbrc	r18, 4
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <fat_open_file+0x30>
    1a44:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <fat_file_handles>
    1a48:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <fat_file_handles+0x1>
    1a4c:	23 2b       	or	r18, r19
    1a4e:	61 f0       	breq	.+24     	; 0x1a68 <fat_open_file+0x36>
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	08 95       	ret
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	08 95       	ret
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	08 95       	ret
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	08 95       	ret
    1a68:	21 e3       	ldi	r18, 0x31	; 49
    1a6a:	fb 01       	movw	r30, r22
    1a6c:	ac e9       	ldi	r26, 0x9C	; 156
    1a6e:	b1 e0       	ldi	r27, 0x01	; 1
    1a70:	01 90       	ld	r0, Z+
    1a72:	0d 92       	st	X+, r0
    1a74:	2a 95       	dec	r18
    1a76:	e1 f7       	brne	.-8      	; 0x1a70 <fat_open_file+0x3e>
    1a78:	aa e9       	ldi	r26, 0x9A	; 154
    1a7a:	b1 e0       	ldi	r27, 0x01	; 1
    1a7c:	11 96       	adiw	r26, 0x01	; 1
    1a7e:	9c 93       	st	X, r25
    1a80:	8e 93       	st	-X, r24
    1a82:	d3 96       	adiw	r26, 0x33	; 51
    1a84:	1c 92       	st	X, r1
    1a86:	d3 97       	sbiw	r26, 0x33	; 51
    1a88:	d4 96       	adiw	r26, 0x34	; 52
    1a8a:	1c 92       	st	X, r1
    1a8c:	d4 97       	sbiw	r26, 0x34	; 52
    1a8e:	d5 96       	adiw	r26, 0x35	; 53
    1a90:	1c 92       	st	X, r1
    1a92:	d5 97       	sbiw	r26, 0x35	; 53
    1a94:	d6 96       	adiw	r26, 0x36	; 54
    1a96:	1c 92       	st	X, r1
    1a98:	d6 97       	sbiw	r26, 0x36	; 54
    1a9a:	d7 96       	adiw	r26, 0x37	; 55
    1a9c:	1c 92       	st	X, r1
    1a9e:	d7 97       	sbiw	r26, 0x37	; 55
    1aa0:	d8 96       	adiw	r26, 0x38	; 56
    1aa2:	1c 92       	st	X, r1
    1aa4:	d8 97       	sbiw	r26, 0x38	; 56
    1aa6:	d9 96       	adiw	r26, 0x39	; 57
    1aa8:	1c 92       	st	X, r1
    1aaa:	d9 97       	sbiw	r26, 0x39	; 57
    1aac:	da 96       	adiw	r26, 0x3a	; 58
    1aae:	1c 92       	st	X, r1
    1ab0:	da 97       	sbiw	r26, 0x3a	; 58
    1ab2:	fb 01       	movw	r30, r22
    1ab4:	41 a1       	ldd	r20, Z+33	; 0x21
    1ab6:	52 a1       	ldd	r21, Z+34	; 0x22
    1ab8:	63 a1       	ldd	r22, Z+35	; 0x23
    1aba:	74 a1       	ldd	r23, Z+36	; 0x24
    1abc:	db 96       	adiw	r26, 0x3b	; 59
    1abe:	4d 93       	st	X+, r20
    1ac0:	5d 93       	st	X+, r21
    1ac2:	6d 93       	st	X+, r22
    1ac4:	7c 93       	st	X, r23
    1ac6:	de 97       	sbiw	r26, 0x3e	; 62
    1ac8:	cd 01       	movw	r24, r26
    1aca:	08 95       	ret

00001acc <fat_close_file>:
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	19 f0       	breq	.+6      	; 0x1ad6 <fat_close_file+0xa>
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	11 82       	std	Z+1, r1	; 0x01
    1ad4:	10 82       	st	Z, r1
    1ad6:	08 95       	ret

00001ad8 <fat_write_file>:
    1ad8:	2f 92       	push	r2
    1ada:	3f 92       	push	r3
    1adc:	4f 92       	push	r4
    1ade:	5f 92       	push	r5
    1ae0:	6f 92       	push	r6
    1ae2:	7f 92       	push	r7
    1ae4:	8f 92       	push	r8
    1ae6:	9f 92       	push	r9
    1ae8:	af 92       	push	r10
    1aea:	bf 92       	push	r11
    1aec:	cf 92       	push	r12
    1aee:	df 92       	push	r13
    1af0:	ef 92       	push	r14
    1af2:	ff 92       	push	r15
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	6b 97       	sbiw	r28, 0x1b	; 27
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	99 8f       	std	Y+25, r25	; 0x19
    1b0e:	88 8f       	std	Y+24, r24	; 0x18
    1b10:	7a 8b       	std	Y+18, r23	; 0x12
    1b12:	69 8b       	std	Y+17, r22	; 0x11
    1b14:	5f 8b       	std	Y+23, r21	; 0x17
    1b16:	4e 8b       	std	Y+22, r20	; 0x16
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <fat_write_file+0x46>
    1b1c:	03 c2       	rjmp	.+1030   	; 0x1f24 <fat_write_file+0x44c>
    1b1e:	67 2b       	or	r22, r23
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <fat_write_file+0x4c>
    1b22:	03 c2       	rjmp	.+1030   	; 0x1f2a <fat_write_file+0x452>
    1b24:	45 2b       	or	r20, r21
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <fat_write_file+0x52>
    1b28:	03 c2       	rjmp	.+1030   	; 0x1f30 <fat_write_file+0x458>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	d3 96       	adiw	r26, 0x33	; 51
    1b2e:	bc 91       	ld	r27, X
    1b30:	b9 87       	std	Y+9, r27	; 0x09
    1b32:	fc 01       	movw	r30, r24
    1b34:	f4 a9       	ldd	r31, Z+52	; 0x34
    1b36:	fa 87       	std	Y+10, r31	; 0x0a
    1b38:	dc 01       	movw	r26, r24
    1b3a:	d5 96       	adiw	r26, 0x35	; 53
    1b3c:	bc 91       	ld	r27, X
    1b3e:	bb 87       	std	Y+11, r27	; 0x0b
    1b40:	fc 01       	movw	r30, r24
    1b42:	f6 a9       	ldd	r31, Z+54	; 0x36
    1b44:	fc 87       	std	Y+12, r31	; 0x0c
    1b46:	dc 01       	movw	r26, r24
    1b48:	d7 96       	adiw	r26, 0x37	; 55
    1b4a:	bc 91       	ld	r27, X
    1b4c:	bd 87       	std	Y+13, r27	; 0x0d
    1b4e:	fc 01       	movw	r30, r24
    1b50:	f0 ad       	ldd	r31, Z+56	; 0x38
    1b52:	fe 87       	std	Y+14, r31	; 0x0e
    1b54:	dc 01       	movw	r26, r24
    1b56:	d9 96       	adiw	r26, 0x39	; 57
    1b58:	bc 91       	ld	r27, X
    1b5a:	bf 87       	std	Y+15, r27	; 0x0f
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	f2 ad       	ldd	r31, Z+58	; 0x3a
    1b60:	f8 8b       	std	Y+16, r31	; 0x10
    1b62:	fc 01       	movw	r30, r24
    1b64:	87 a1       	ldd	r24, Z+39	; 0x27
    1b66:	90 a5       	ldd	r25, Z+40	; 0x28
    1b68:	a1 a5       	ldd	r26, Z+41	; 0x29
    1b6a:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1b6c:	1c 01       	movw	r2, r24
    1b6e:	2d 01       	movw	r4, r26
    1b70:	29 85       	ldd	r18, Y+9	; 0x09
    1b72:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b74:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b76:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b78:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b7a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b7e:	98 89       	ldd	r25, Y+16	; 0x10
    1b80:	a2 2c       	mov	r10, r2
    1b82:	b3 2c       	mov	r11, r3
    1b84:	c4 2c       	mov	r12, r4
    1b86:	d5 2c       	mov	r13, r5
    1b88:	e1 2c       	mov	r14, r1
    1b8a:	f1 2c       	mov	r15, r1
    1b8c:	00 e0       	ldi	r16, 0x00	; 0
    1b8e:	10 e0       	ldi	r17, 0x00	; 0
    1b90:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__cmpdi2>
    1b94:	11 f0       	breq	.+4      	; 0x1b9a <fat_write_file+0xc2>
    1b96:	08 f0       	brcs	.+2      	; 0x1b9a <fat_write_file+0xc2>
    1b98:	ce c1       	rjmp	.+924    	; 0x1f36 <fat_write_file+0x45e>
    1b9a:	01 90       	ld	r0, Z+
    1b9c:	f0 81       	ld	r31, Z
    1b9e:	e0 2d       	mov	r30, r0
    1ba0:	e0 8c       	ldd	r14, Z+24	; 0x18
    1ba2:	f1 8c       	ldd	r15, Z+25	; 0x19
    1ba4:	fc 8a       	std	Y+20, r15	; 0x14
    1ba6:	eb 8a       	std	Y+19, r14	; 0x13
    1ba8:	a8 8d       	ldd	r26, Y+24	; 0x18
    1baa:	b9 8d       	ldd	r27, Y+25	; 0x19
    1bac:	db 96       	adiw	r26, 0x3b	; 59
    1bae:	4d 90       	ld	r4, X+
    1bb0:	5d 90       	ld	r5, X+
    1bb2:	6d 90       	ld	r6, X+
    1bb4:	7c 90       	ld	r7, X
    1bb6:	de 97       	sbiw	r26, 0x3e	; 62
    1bb8:	c7 01       	movw	r24, r14
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	e9 84       	ldd	r14, Y+9	; 0x09
    1bbe:	fa 84       	ldd	r15, Y+10	; 0x0a
    1bc0:	e8 22       	and	r14, r24
    1bc2:	f9 22       	and	r15, r25
    1bc4:	fa 82       	std	Y+2, r15	; 0x02
    1bc6:	e9 82       	std	Y+1, r14	; 0x01
    1bc8:	41 14       	cp	r4, r1
    1bca:	51 04       	cpc	r5, r1
    1bcc:	61 04       	cpc	r6, r1
    1bce:	71 04       	cpc	r7, r1
    1bd0:	09 f0       	breq	.+2      	; 0x1bd4 <fat_write_file+0xfc>
    1bd2:	77 c0       	rjmp	.+238    	; 0x1cc2 <fat_write_file+0x1ea>
    1bd4:	93 96       	adiw	r26, 0x23	; 35
    1bd6:	4d 90       	ld	r4, X+
    1bd8:	5d 90       	ld	r5, X+
    1bda:	6d 90       	ld	r6, X+
    1bdc:	7c 90       	ld	r7, X
    1bde:	96 97       	sbiw	r26, 0x26	; 38
    1be0:	41 14       	cp	r4, r1
    1be2:	51 04       	cpc	r5, r1
    1be4:	61 04       	cpc	r6, r1
    1be6:	71 04       	cpc	r7, r1
    1be8:	01 f5       	brne	.+64     	; 0x1c2a <fat_write_file+0x152>
    1bea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bec:	98 89       	ldd	r25, Y+16	; 0x10
    1bee:	a0 e0       	ldi	r26, 0x00	; 0
    1bf0:	0e 94 82 21 	call	0x4304	; 0x4304 <__cmpdi2_s8>
    1bf4:	09 f0       	breq	.+2      	; 0x1bf8 <fat_write_file+0x120>
    1bf6:	a2 c1       	rjmp	.+836    	; 0x1f3c <fat_write_file+0x464>
    1bf8:	01 e0       	ldi	r16, 0x01	; 1
    1bfa:	10 e0       	ldi	r17, 0x00	; 0
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	50 e0       	ldi	r21, 0x00	; 0
    1c04:	ba 01       	movw	r22, r20
    1c06:	cf 01       	movw	r24, r30
    1c08:	0e 94 a4 03 	call	0x748	; 0x748 <fat_append_clusters>
    1c0c:	2b 01       	movw	r4, r22
    1c0e:	3c 01       	movw	r6, r24
    1c10:	a8 8d       	ldd	r26, Y+24	; 0x18
    1c12:	b9 8d       	ldd	r27, Y+25	; 0x19
    1c14:	93 96       	adiw	r26, 0x23	; 35
    1c16:	6d 93       	st	X+, r22
    1c18:	7d 93       	st	X+, r23
    1c1a:	8d 93       	st	X+, r24
    1c1c:	9c 93       	st	X, r25
    1c1e:	96 97       	sbiw	r26, 0x26	; 38
    1c20:	67 2b       	or	r22, r23
    1c22:	68 2b       	or	r22, r24
    1c24:	69 2b       	or	r22, r25
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <fat_write_file+0x152>
    1c28:	8c c1       	rjmp	.+792    	; 0x1f42 <fat_write_file+0x46a>
    1c2a:	e8 8d       	ldd	r30, Y+24	; 0x18
    1c2c:	f9 8d       	ldd	r31, Y+25	; 0x19
    1c2e:	13 a9       	ldd	r17, Z+51	; 0x33
    1c30:	b4 a9       	ldd	r27, Z+52	; 0x34
    1c32:	05 a9       	ldd	r16, Z+53	; 0x35
    1c34:	f6 a8       	ldd	r15, Z+54	; 0x36
    1c36:	67 a9       	ldd	r22, Z+55	; 0x37
    1c38:	70 ad       	ldd	r23, Z+56	; 0x38
    1c3a:	21 2f       	mov	r18, r17
    1c3c:	3b 2f       	mov	r19, r27
    1c3e:	40 2f       	mov	r20, r16
    1c40:	5f 2d       	mov	r21, r15
    1c42:	81 ad       	ldd	r24, Z+57	; 0x39
    1c44:	92 ad       	ldd	r25, Z+58	; 0x3a
    1c46:	a0 e0       	ldi	r26, 0x00	; 0
    1c48:	0e 94 82 21 	call	0x4304	; 0x4304 <__cmpdi2_s8>
    1c4c:	d1 f1       	breq	.+116    	; 0x1cc2 <fat_write_file+0x1ea>
    1c4e:	c1 2e       	mov	r12, r17
    1c50:	db 2e       	mov	r13, r27
    1c52:	e0 2e       	mov	r14, r16
    1c54:	0b 89       	ldd	r16, Y+19	; 0x13
    1c56:	1c 89       	ldd	r17, Y+20	; 0x14
    1c58:	48 01       	movw	r8, r16
    1c5a:	a1 2c       	mov	r10, r1
    1c5c:	b1 2c       	mov	r11, r1
    1c5e:	1f 01       	movw	r2, r30
    1c60:	29 c0       	rjmp	.+82     	; 0x1cb4 <fat_write_file+0x1dc>
    1c62:	c8 18       	sub	r12, r8
    1c64:	d9 08       	sbc	r13, r9
    1c66:	ea 08       	sbc	r14, r10
    1c68:	fb 08       	sbc	r15, r11
    1c6a:	b3 01       	movw	r22, r6
    1c6c:	a2 01       	movw	r20, r4
    1c6e:	d1 01       	movw	r26, r2
    1c70:	8d 91       	ld	r24, X+
    1c72:	9c 91       	ld	r25, X
    1c74:	0e 94 27 01 	call	0x24e	; 0x24e <fat_get_next_cluster>
    1c78:	61 15       	cp	r22, r1
    1c7a:	71 05       	cpc	r23, r1
    1c7c:	81 05       	cpc	r24, r1
    1c7e:	91 05       	cpc	r25, r1
    1c80:	b9 f4       	brne	.+46     	; 0x1cb0 <fat_write_file+0x1d8>
    1c82:	c1 14       	cp	r12, r1
    1c84:	d1 04       	cpc	r13, r1
    1c86:	e1 04       	cpc	r14, r1
    1c88:	f1 04       	cpc	r15, r1
    1c8a:	09 f0       	breq	.+2      	; 0x1c8e <fat_write_file+0x1b6>
    1c8c:	5d c1       	rjmp	.+698    	; 0x1f48 <fat_write_file+0x470>
    1c8e:	01 e0       	ldi	r16, 0x01	; 1
    1c90:	10 e0       	ldi	r17, 0x00	; 0
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	b3 01       	movw	r22, r6
    1c98:	a2 01       	movw	r20, r4
    1c9a:	f1 01       	movw	r30, r2
    1c9c:	80 81       	ld	r24, Z
    1c9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ca0:	0e 94 a4 03 	call	0x748	; 0x748 <fat_append_clusters>
    1ca4:	61 15       	cp	r22, r1
    1ca6:	71 05       	cpc	r23, r1
    1ca8:	81 05       	cpc	r24, r1
    1caa:	91 05       	cpc	r25, r1
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <fat_write_file+0x1d8>
    1cae:	4f c1       	rjmp	.+670    	; 0x1f4e <fat_write_file+0x476>
    1cb0:	2b 01       	movw	r4, r22
    1cb2:	3c 01       	movw	r6, r24
    1cb4:	c8 14       	cp	r12, r8
    1cb6:	d9 04       	cpc	r13, r9
    1cb8:	ea 04       	cpc	r14, r10
    1cba:	fb 04       	cpc	r15, r11
    1cbc:	90 f6       	brcc	.-92     	; 0x1c62 <fat_write_file+0x18a>
    1cbe:	39 8e       	std	Y+25, r3	; 0x19
    1cc0:	28 8e       	std	Y+24, r2	; 0x18
    1cc2:	2e 88       	ldd	r2, Y+22	; 0x16
    1cc4:	3f 88       	ldd	r3, Y+23	; 0x17
    1cc6:	e8 8c       	ldd	r14, Y+24	; 0x18
    1cc8:	f9 8c       	ldd	r15, Y+25	; 0x19
    1cca:	fb 8e       	std	Y+27, r15	; 0x1b
    1ccc:	ea 8e       	std	Y+26, r14	; 0x1a
    1cce:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1cd0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1cd2:	0d 91       	ld	r16, X+
    1cd4:	1c 91       	ld	r17, X
    1cd6:	b3 01       	movw	r22, r6
    1cd8:	a2 01       	movw	r20, r4
    1cda:	c8 01       	movw	r24, r16
    1cdc:	0e 94 1f 06 	call	0xc3e	; 0xc3e <fat_cluster_offset>
    1ce0:	a2 2e       	mov	r10, r18
    1ce2:	b3 2e       	mov	r11, r19
    1ce4:	c4 2e       	mov	r12, r20
    1ce6:	d5 2e       	mov	r13, r21
    1ce8:	e6 2e       	mov	r14, r22
    1cea:	f7 2e       	mov	r15, r23
    1cec:	89 87       	std	Y+9, r24	; 0x09
    1cee:	9d 8b       	std	Y+21, r25	; 0x15
    1cf0:	8b 88       	ldd	r8, Y+19	; 0x13
    1cf2:	9c 88       	ldd	r9, Y+20	; 0x14
    1cf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf8:	8e 1a       	sub	r8, r30
    1cfa:	9f 0a       	sbc	r9, r31
    1cfc:	28 14       	cp	r2, r8
    1cfe:	39 04       	cpc	r3, r9
    1d00:	08 f4       	brcc	.+2      	; 0x1d04 <fat_write_file+0x22c>
    1d02:	41 01       	movw	r8, r2
    1d04:	d8 01       	movw	r26, r16
    1d06:	0d 90       	ld	r0, X+
    1d08:	bc 91       	ld	r27, X
    1d0a:	a0 2d       	mov	r26, r0
    1d0c:	b9 8f       	std	Y+25, r27	; 0x19
    1d0e:	a8 8f       	std	Y+24, r26	; 0x18
    1d10:	e9 81       	ldd	r30, Y+1	; 0x01
    1d12:	fa 81       	ldd	r31, Y+2	; 0x02
    1d14:	af 01       	movw	r20, r30
    1d16:	2e 2f       	mov	r18, r30
    1d18:	35 2f       	mov	r19, r21
    1d1a:	40 e0       	ldi	r20, 0x00	; 0
    1d1c:	50 e0       	ldi	r21, 0x00	; 0
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	70 e0       	ldi	r23, 0x00	; 0
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	09 85       	ldd	r16, Y+9	; 0x09
    1d28:	1d 89       	ldd	r17, Y+21	; 0x15
    1d2a:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
    1d2e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1d30:	b9 8d       	ldd	r27, Y+25	; 0x19
    1d32:	14 96       	adiw	r26, 0x04	; 4
    1d34:	ed 91       	ld	r30, X+
    1d36:	fc 91       	ld	r31, X
    1d38:	15 97       	sbiw	r26, 0x05	; 5
    1d3a:	74 01       	movw	r14, r8
    1d3c:	09 89       	ldd	r16, Y+17	; 0x11
    1d3e:	1a 89       	ldd	r17, Y+18	; 0x12
    1d40:	09 95       	icall
    1d42:	88 23       	and	r24, r24
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <fat_write_file+0x270>
    1d46:	8a c0       	rjmp	.+276    	; 0x1e5c <fat_write_file+0x384>
    1d48:	e9 89       	ldd	r30, Y+17	; 0x11
    1d4a:	fa 89       	ldd	r31, Y+18	; 0x12
    1d4c:	e8 0d       	add	r30, r8
    1d4e:	f9 1d       	adc	r31, r9
    1d50:	fa 8b       	std	Y+18, r31	; 0x12
    1d52:	e9 8b       	std	Y+17, r30	; 0x11
    1d54:	28 18       	sub	r2, r8
    1d56:	39 08       	sbc	r3, r9
    1d58:	a4 01       	movw	r20, r8
    1d5a:	28 2d       	mov	r18, r8
    1d5c:	35 2f       	mov	r19, r21
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	50 e0       	ldi	r21, 0x00	; 0
    1d62:	60 e0       	ldi	r22, 0x00	; 0
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1d6c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1d6e:	d3 96       	adiw	r26, 0x33	; 51
    1d70:	ac 90       	ld	r10, X
    1d72:	d3 97       	sbiw	r26, 0x33	; 51
    1d74:	d4 96       	adiw	r26, 0x34	; 52
    1d76:	bc 90       	ld	r11, X
    1d78:	d4 97       	sbiw	r26, 0x34	; 52
    1d7a:	d5 96       	adiw	r26, 0x35	; 53
    1d7c:	cc 90       	ld	r12, X
    1d7e:	d5 97       	sbiw	r26, 0x35	; 53
    1d80:	d6 96       	adiw	r26, 0x36	; 54
    1d82:	dc 90       	ld	r13, X
    1d84:	d6 97       	sbiw	r26, 0x36	; 54
    1d86:	d7 96       	adiw	r26, 0x37	; 55
    1d88:	ec 90       	ld	r14, X
    1d8a:	d7 97       	sbiw	r26, 0x37	; 55
    1d8c:	d8 96       	adiw	r26, 0x38	; 56
    1d8e:	fc 90       	ld	r15, X
    1d90:	d8 97       	sbiw	r26, 0x38	; 56
    1d92:	d9 96       	adiw	r26, 0x39	; 57
    1d94:	0c 91       	ld	r16, X
    1d96:	d9 97       	sbiw	r26, 0x39	; 57
    1d98:	da 96       	adiw	r26, 0x3a	; 58
    1d9a:	1c 91       	ld	r17, X
    1d9c:	da 97       	sbiw	r26, 0x3a	; 58
    1d9e:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
    1da2:	d3 96       	adiw	r26, 0x33	; 51
    1da4:	2c 93       	st	X, r18
    1da6:	d3 97       	sbiw	r26, 0x33	; 51
    1da8:	d4 96       	adiw	r26, 0x34	; 52
    1daa:	3c 93       	st	X, r19
    1dac:	d4 97       	sbiw	r26, 0x34	; 52
    1dae:	d5 96       	adiw	r26, 0x35	; 53
    1db0:	4c 93       	st	X, r20
    1db2:	d5 97       	sbiw	r26, 0x35	; 53
    1db4:	d6 96       	adiw	r26, 0x36	; 54
    1db6:	5c 93       	st	X, r21
    1db8:	d6 97       	sbiw	r26, 0x36	; 54
    1dba:	d7 96       	adiw	r26, 0x37	; 55
    1dbc:	6c 93       	st	X, r22
    1dbe:	d7 97       	sbiw	r26, 0x37	; 55
    1dc0:	d8 96       	adiw	r26, 0x38	; 56
    1dc2:	7c 93       	st	X, r23
    1dc4:	d8 97       	sbiw	r26, 0x38	; 56
    1dc6:	d9 96       	adiw	r26, 0x39	; 57
    1dc8:	8c 93       	st	X, r24
    1dca:	d9 97       	sbiw	r26, 0x39	; 57
    1dcc:	da 96       	adiw	r26, 0x3a	; 58
    1dce:	9c 93       	st	X, r25
    1dd0:	da 97       	sbiw	r26, 0x3a	; 58
    1dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd6:	8e 0e       	add	r8, r30
    1dd8:	9f 1e       	adc	r9, r31
    1dda:	eb 88       	ldd	r14, Y+19	; 0x13
    1ddc:	fc 88       	ldd	r15, Y+20	; 0x14
    1dde:	8e 14       	cp	r8, r14
    1de0:	9f 04       	cpc	r9, r15
    1de2:	78 f1       	brcs	.+94     	; 0x1e42 <fat_write_file+0x36a>
    1de4:	b3 01       	movw	r22, r6
    1de6:	a2 01       	movw	r20, r4
    1de8:	8d 91       	ld	r24, X+
    1dea:	9c 91       	ld	r25, X
    1dec:	0e 94 27 01 	call	0x24e	; 0x24e <fat_get_next_cluster>
    1df0:	61 15       	cp	r22, r1
    1df2:	71 05       	cpc	r23, r1
    1df4:	81 05       	cpc	r24, r1
    1df6:	91 05       	cpc	r25, r1
    1df8:	01 f5       	brne	.+64     	; 0x1e3a <fat_write_file+0x362>
    1dfa:	21 14       	cp	r2, r1
    1dfc:	31 04       	cpc	r3, r1
    1dfe:	a1 f0       	breq	.+40     	; 0x1e28 <fat_write_file+0x350>
    1e00:	01 e0       	ldi	r16, 0x01	; 1
    1e02:	10 e0       	ldi	r17, 0x00	; 0
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	b3 01       	movw	r22, r6
    1e0a:	a2 01       	movw	r20, r4
    1e0c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1e0e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1e10:	8d 91       	ld	r24, X+
    1e12:	9c 91       	ld	r25, X
    1e14:	0e 94 a4 03 	call	0x748	; 0x748 <fat_append_clusters>
    1e18:	2b 01       	movw	r4, r22
    1e1a:	3c 01       	movw	r6, r24
    1e1c:	61 15       	cp	r22, r1
    1e1e:	71 05       	cpc	r23, r1
    1e20:	81 05       	cpc	r24, r1
    1e22:	91 05       	cpc	r25, r1
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <fat_write_file+0x350>
    1e26:	96 c0       	rjmp	.+300    	; 0x1f54 <fat_write_file+0x47c>
    1e28:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e2a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1e2c:	f9 8f       	std	Y+25, r31	; 0x19
    1e2e:	e8 8f       	std	Y+24, r30	; 0x18
    1e30:	13 ae       	std	Z+59, r1	; 0x3b
    1e32:	14 ae       	std	Z+60, r1	; 0x3c
    1e34:	15 ae       	std	Z+61, r1	; 0x3d
    1e36:	16 ae       	std	Z+62, r1	; 0x3e
    1e38:	15 c0       	rjmp	.+42     	; 0x1e64 <fat_write_file+0x38c>
    1e3a:	2b 01       	movw	r4, r22
    1e3c:	3c 01       	movw	r6, r24
    1e3e:	19 82       	std	Y+1, r1	; 0x01
    1e40:	1a 82       	std	Y+2, r1	; 0x02
    1e42:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e44:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1e46:	43 ae       	std	Z+59, r4	; 0x3b
    1e48:	54 ae       	std	Z+60, r5	; 0x3c
    1e4a:	65 ae       	std	Z+61, r6	; 0x3d
    1e4c:	76 ae       	std	Z+62, r7	; 0x3e
    1e4e:	21 14       	cp	r2, r1
    1e50:	31 04       	cpc	r3, r1
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <fat_write_file+0x37e>
    1e54:	3c cf       	rjmp	.-392    	; 0x1cce <fat_write_file+0x1f6>
    1e56:	f9 8f       	std	Y+25, r31	; 0x19
    1e58:	e8 8f       	std	Y+24, r30	; 0x18
    1e5a:	04 c0       	rjmp	.+8      	; 0x1e64 <fat_write_file+0x38c>
    1e5c:	ea 8c       	ldd	r14, Y+26	; 0x1a
    1e5e:	fb 8c       	ldd	r15, Y+27	; 0x1b
    1e60:	f9 8e       	std	Y+25, r15	; 0x19
    1e62:	e8 8e       	std	Y+24, r14	; 0x18
    1e64:	e8 8d       	ldd	r30, Y+24	; 0x18
    1e66:	f9 8d       	ldd	r31, Y+25	; 0x19
    1e68:	b3 a9       	ldd	r27, Z+51	; 0x33
    1e6a:	a4 a9       	ldd	r26, Z+52	; 0x34
    1e6c:	85 a8       	ldd	r8, Z+53	; 0x35
    1e6e:	96 a8       	ldd	r9, Z+54	; 0x36
    1e70:	67 a9       	ldd	r22, Z+55	; 0x37
    1e72:	70 ad       	ldd	r23, Z+56	; 0x38
    1e74:	47 a0       	ldd	r4, Z+39	; 0x27
    1e76:	50 a4       	ldd	r5, Z+40	; 0x28
    1e78:	61 a4       	ldd	r6, Z+41	; 0x29
    1e7a:	72 a4       	ldd	r7, Z+42	; 0x2a
    1e7c:	83 01       	movw	r16, r6
    1e7e:	72 01       	movw	r14, r4
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	a9 01       	movw	r20, r18
    1e86:	49 82       	std	Y+1, r4	; 0x01
    1e88:	fa 82       	std	Y+2, r15	; 0x02
    1e8a:	0b 83       	std	Y+3, r16	; 0x03
    1e8c:	1c 83       	std	Y+4, r17	; 0x04
    1e8e:	2d 83       	std	Y+5, r18	; 0x05
    1e90:	3e 83       	std	Y+6, r19	; 0x06
    1e92:	4f 83       	std	Y+7, r20	; 0x07
    1e94:	58 87       	std	Y+8, r21	; 0x08
    1e96:	2b 2f       	mov	r18, r27
    1e98:	3a 2f       	mov	r19, r26
    1e9a:	48 2d       	mov	r20, r8
    1e9c:	59 2d       	mov	r21, r9
    1e9e:	81 ad       	ldd	r24, Z+57	; 0x39
    1ea0:	92 ad       	ldd	r25, Z+58	; 0x3a
    1ea2:	a4 2c       	mov	r10, r4
    1ea4:	bf 2c       	mov	r11, r15
    1ea6:	c0 2e       	mov	r12, r16
    1ea8:	d1 2e       	mov	r13, r17
    1eaa:	e1 2c       	mov	r14, r1
    1eac:	f1 2c       	mov	r15, r1
    1eae:	00 e0       	ldi	r16, 0x00	; 0
    1eb0:	10 e0       	ldi	r17, 0x00	; 0
    1eb2:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__cmpdi2>
    1eb6:	89 f1       	breq	.+98     	; 0x1f1a <fat_write_file+0x442>
    1eb8:	80 f1       	brcs	.+96     	; 0x1f1a <fat_write_file+0x442>
    1eba:	b7 a3       	std	Z+39, r27	; 0x27
    1ebc:	a0 a7       	std	Z+40, r26	; 0x28
    1ebe:	81 a6       	std	Z+41, r8	; 0x29
    1ec0:	92 a6       	std	Z+42, r9	; 0x2a
    1ec2:	bf 01       	movw	r22, r30
    1ec4:	6e 5f       	subi	r22, 0xFE	; 254
    1ec6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec8:	80 81       	ld	r24, Z
    1eca:	91 81       	ldd	r25, Z+1	; 0x01
    1ecc:	0e 94 77 08 	call	0x10ee	; 0x10ee <fat_write_dir_entry>
    1ed0:	81 11       	cpse	r24, r1
    1ed2:	23 c0       	rjmp	.+70     	; 0x1f1a <fat_write_file+0x442>
    1ed4:	a8 8d       	ldd	r26, Y+24	; 0x18
    1ed6:	b9 8d       	ldd	r27, Y+25	; 0x19
    1ed8:	d3 96       	adiw	r26, 0x33	; 51
    1eda:	2d 90       	ld	r2, X+
    1edc:	3c 90       	ld	r3, X
    1ede:	d4 97       	sbiw	r26, 0x34	; 52
    1ee0:	24 18       	sub	r2, r4
    1ee2:	35 08       	sbc	r3, r5
    1ee4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee6:	d3 96       	adiw	r26, 0x33	; 51
    1ee8:	ec 93       	st	X, r30
    1eea:	d3 97       	sbiw	r26, 0x33	; 51
    1eec:	fa 81       	ldd	r31, Y+2	; 0x02
    1eee:	d4 96       	adiw	r26, 0x34	; 52
    1ef0:	fc 93       	st	X, r31
    1ef2:	d4 97       	sbiw	r26, 0x34	; 52
    1ef4:	eb 80       	ldd	r14, Y+3	; 0x03
    1ef6:	d5 96       	adiw	r26, 0x35	; 53
    1ef8:	ec 92       	st	X, r14
    1efa:	d5 97       	sbiw	r26, 0x35	; 53
    1efc:	fc 80       	ldd	r15, Y+4	; 0x04
    1efe:	d6 96       	adiw	r26, 0x36	; 54
    1f00:	fc 92       	st	X, r15
    1f02:	d6 97       	sbiw	r26, 0x36	; 54
    1f04:	d7 96       	adiw	r26, 0x37	; 55
    1f06:	1c 92       	st	X, r1
    1f08:	d7 97       	sbiw	r26, 0x37	; 55
    1f0a:	d8 96       	adiw	r26, 0x38	; 56
    1f0c:	1c 92       	st	X, r1
    1f0e:	d8 97       	sbiw	r26, 0x38	; 56
    1f10:	d9 96       	adiw	r26, 0x39	; 57
    1f12:	1c 92       	st	X, r1
    1f14:	d9 97       	sbiw	r26, 0x39	; 57
    1f16:	da 96       	adiw	r26, 0x3a	; 58
    1f18:	1c 92       	st	X, r1
    1f1a:	8e 89       	ldd	r24, Y+22	; 0x16
    1f1c:	9f 89       	ldd	r25, Y+23	; 0x17
    1f1e:	82 19       	sub	r24, r2
    1f20:	93 09       	sbc	r25, r3
    1f22:	23 c0       	rjmp	.+70     	; 0x1f6a <fat_write_file+0x492>
    1f24:	8f ef       	ldi	r24, 0xFF	; 255
    1f26:	9f ef       	ldi	r25, 0xFF	; 255
    1f28:	20 c0       	rjmp	.+64     	; 0x1f6a <fat_write_file+0x492>
    1f2a:	8f ef       	ldi	r24, 0xFF	; 255
    1f2c:	9f ef       	ldi	r25, 0xFF	; 255
    1f2e:	1d c0       	rjmp	.+58     	; 0x1f6a <fat_write_file+0x492>
    1f30:	8f ef       	ldi	r24, 0xFF	; 255
    1f32:	9f ef       	ldi	r25, 0xFF	; 255
    1f34:	1a c0       	rjmp	.+52     	; 0x1f6a <fat_write_file+0x492>
    1f36:	8f ef       	ldi	r24, 0xFF	; 255
    1f38:	9f ef       	ldi	r25, 0xFF	; 255
    1f3a:	17 c0       	rjmp	.+46     	; 0x1f6a <fat_write_file+0x492>
    1f3c:	8f ef       	ldi	r24, 0xFF	; 255
    1f3e:	9f ef       	ldi	r25, 0xFF	; 255
    1f40:	14 c0       	rjmp	.+40     	; 0x1f6a <fat_write_file+0x492>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	11 c0       	rjmp	.+34     	; 0x1f6a <fat_write_file+0x492>
    1f48:	8f ef       	ldi	r24, 0xFF	; 255
    1f4a:	9f ef       	ldi	r25, 0xFF	; 255
    1f4c:	0e c0       	rjmp	.+28     	; 0x1f6a <fat_write_file+0x492>
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	0b c0       	rjmp	.+22     	; 0x1f6a <fat_write_file+0x492>
    1f54:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1f56:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1f58:	db 96       	adiw	r26, 0x3b	; 59
    1f5a:	6d 93       	st	X+, r22
    1f5c:	7d 93       	st	X+, r23
    1f5e:	8d 93       	st	X+, r24
    1f60:	9c 93       	st	X, r25
    1f62:	de 97       	sbiw	r26, 0x3e	; 62
    1f64:	19 82       	std	Y+1, r1	; 0x01
    1f66:	1a 82       	std	Y+2, r1	; 0x02
    1f68:	b2 ce       	rjmp	.-668    	; 0x1cce <fat_write_file+0x1f6>
    1f6a:	6b 96       	adiw	r28, 0x1b	; 27
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	1f 91       	pop	r17
    1f7c:	0f 91       	pop	r16
    1f7e:	ff 90       	pop	r15
    1f80:	ef 90       	pop	r14
    1f82:	df 90       	pop	r13
    1f84:	cf 90       	pop	r12
    1f86:	bf 90       	pop	r11
    1f88:	af 90       	pop	r10
    1f8a:	9f 90       	pop	r9
    1f8c:	8f 90       	pop	r8
    1f8e:	7f 90       	pop	r7
    1f90:	6f 90       	pop	r6
    1f92:	5f 90       	pop	r5
    1f94:	4f 90       	pop	r4
    1f96:	3f 90       	pop	r3
    1f98:	2f 90       	pop	r2
    1f9a:	08 95       	ret

00001f9c <fat_resize_file>:
    1f9c:	2f 92       	push	r2
    1f9e:	3f 92       	push	r3
    1fa0:	4f 92       	push	r4
    1fa2:	5f 92       	push	r5
    1fa4:	6f 92       	push	r6
    1fa6:	7f 92       	push	r7
    1fa8:	8f 92       	push	r8
    1faa:	9f 92       	push	r9
    1fac:	af 92       	push	r10
    1fae:	bf 92       	push	r11
    1fb0:	cf 92       	push	r12
    1fb2:	df 92       	push	r13
    1fb4:	ef 92       	push	r14
    1fb6:	ff 92       	push	r15
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	64 97       	sbiw	r28, 0x14	; 20
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <fat_resize_file+0x3a>
    1fd4:	a4 c1       	rjmp	.+840    	; 0x231e <fat_resize_file+0x382>
    1fd6:	4d 83       	std	Y+5, r20	; 0x05
    1fd8:	5e 83       	std	Y+6, r21	; 0x06
    1fda:	6f 83       	std	Y+7, r22	; 0x07
    1fdc:	78 87       	std	Y+8, r23	; 0x08
    1fde:	1c 01       	movw	r2, r24
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	93 96       	adiw	r26, 0x23	; 35
    1fe4:	2d 91       	ld	r18, X+
    1fe6:	3d 91       	ld	r19, X+
    1fe8:	4d 91       	ld	r20, X+
    1fea:	5c 91       	ld	r21, X
    1fec:	96 97       	sbiw	r26, 0x26	; 38
    1fee:	2d 87       	std	Y+13, r18	; 0x0d
    1ff0:	3e 87       	std	Y+14, r19	; 0x0e
    1ff2:	4f 87       	std	Y+15, r20	; 0x0f
    1ff4:	58 8b       	std	Y+16, r21	; 0x10
    1ff6:	ed 91       	ld	r30, X+
    1ff8:	fc 91       	ld	r31, X
    1ffa:	80 8d       	ldd	r24, Z+24	; 0x18
    1ffc:	91 8d       	ldd	r25, Z+25	; 0x19
    1ffe:	23 2b       	or	r18, r19
    2000:	24 2b       	or	r18, r20
    2002:	25 2b       	or	r18, r21
    2004:	09 f0       	breq	.+2      	; 0x2008 <fat_resize_file+0x6c>
    2006:	cf c1       	rjmp	.+926    	; 0x23a6 <fat_resize_file+0x40a>
    2008:	2d 81       	ldd	r18, Y+5	; 0x05
    200a:	3e 81       	ldd	r19, Y+6	; 0x06
    200c:	4f 81       	ldd	r20, Y+7	; 0x07
    200e:	58 85       	ldd	r21, Y+8	; 0x08
    2010:	23 2b       	or	r18, r19
    2012:	24 2b       	or	r18, r20
    2014:	25 2b       	or	r18, r21
    2016:	09 f4       	brne	.+2      	; 0x201a <fat_resize_file+0x7e>
    2018:	31 c1       	rjmp	.+610    	; 0x227c <fat_resize_file+0x2e0>
    201a:	b5 c1       	rjmp	.+874    	; 0x2386 <fat_resize_file+0x3ea>
    201c:	4d 80       	ldd	r4, Y+5	; 0x05
    201e:	5e 80       	ldd	r5, Y+6	; 0x06
    2020:	6f 80       	ldd	r6, Y+7	; 0x07
    2022:	78 84       	ldd	r7, Y+8	; 0x08
    2024:	cd 84       	ldd	r12, Y+13	; 0x0d
    2026:	de 84       	ldd	r13, Y+14	; 0x0e
    2028:	ef 84       	ldd	r14, Y+15	; 0x0f
    202a:	f8 88       	ldd	r15, Y+16	; 0x10
    202c:	b7 01       	movw	r22, r14
    202e:	a6 01       	movw	r20, r12
    2030:	d1 01       	movw	r26, r2
    2032:	8d 91       	ld	r24, X+
    2034:	9c 91       	ld	r25, X
    2036:	0e 94 27 01 	call	0x24e	; 0x24e <fat_get_next_cluster>
    203a:	61 15       	cp	r22, r1
    203c:	71 05       	cpc	r23, r1
    203e:	81 05       	cpc	r24, r1
    2040:	91 05       	cpc	r25, r1
    2042:	61 f0       	breq	.+24     	; 0x205c <fat_resize_file+0xc0>
    2044:	48 18       	sub	r4, r8
    2046:	59 08       	sbc	r5, r9
    2048:	6a 08       	sbc	r6, r10
    204a:	7b 08       	sbc	r7, r11
    204c:	6b 01       	movw	r12, r22
    204e:	7c 01       	movw	r14, r24
    2050:	84 14       	cp	r8, r4
    2052:	95 04       	cpc	r9, r5
    2054:	a6 04       	cpc	r10, r6
    2056:	b7 04       	cpc	r11, r7
    2058:	48 f3       	brcs	.-46     	; 0x202c <fat_resize_file+0x90>
    205a:	49 c0       	rjmp	.+146    	; 0x20ee <fat_resize_file+0x152>
    205c:	cd 86       	std	Y+13, r12	; 0x0d
    205e:	de 86       	std	Y+14, r13	; 0x0e
    2060:	ef 86       	std	Y+15, r14	; 0x0f
    2062:	f8 8a       	std	Y+16, r15	; 0x10
    2064:	c9 8a       	std	Y+17, r12	; 0x11
    2066:	da 8a       	std	Y+18, r13	; 0x12
    2068:	eb 8a       	std	Y+19, r14	; 0x13
    206a:	fc 8a       	std	Y+20, r15	; 0x14
    206c:	84 14       	cp	r8, r4
    206e:	95 04       	cpc	r9, r5
    2070:	a6 04       	cpc	r10, r6
    2072:	b7 04       	cpc	r11, r7
    2074:	38 f0       	brcs	.+14     	; 0x2084 <fat_resize_file+0xe8>
    2076:	c1 14       	cp	r12, r1
    2078:	d1 04       	cpc	r13, r1
    207a:	e1 04       	cpc	r14, r1
    207c:	f1 04       	cpc	r15, r1
    207e:	09 f4       	brne	.+2      	; 0x2082 <fat_resize_file+0xe6>
    2080:	56 c1       	rjmp	.+684    	; 0x232e <fat_resize_file+0x392>
    2082:	35 c0       	rjmp	.+106    	; 0x20ee <fat_resize_file+0x152>
    2084:	d5 01       	movw	r26, r10
    2086:	c4 01       	movw	r24, r8
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	a1 09       	sbc	r26, r1
    208c:	b1 09       	sbc	r27, r1
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	64 0d       	add	r22, r4
    2094:	75 1d       	adc	r23, r5
    2096:	86 1d       	adc	r24, r6
    2098:	97 1d       	adc	r25, r7
    209a:	a5 01       	movw	r20, r10
    209c:	94 01       	movw	r18, r8
    209e:	0e 94 89 20 	call	0x4112	; 0x4112 <__udivmodsi4>
    20a2:	89 01       	movw	r16, r18
    20a4:	9a 01       	movw	r18, r20
    20a6:	4d 85       	ldd	r20, Y+13	; 0x0d
    20a8:	5e 85       	ldd	r21, Y+14	; 0x0e
    20aa:	6f 85       	ldd	r22, Y+15	; 0x0f
    20ac:	78 89       	ldd	r23, Y+16	; 0x10
    20ae:	f1 01       	movw	r30, r2
    20b0:	80 81       	ld	r24, Z
    20b2:	91 81       	ldd	r25, Z+1	; 0x01
    20b4:	0e 94 a4 03 	call	0x748	; 0x748 <fat_append_clusters>
    20b8:	6b 01       	movw	r12, r22
    20ba:	7c 01       	movw	r14, r24
    20bc:	67 2b       	or	r22, r23
    20be:	68 2b       	or	r22, r24
    20c0:	69 2b       	or	r22, r25
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <fat_resize_file+0x12a>
    20c4:	2e c1       	rjmp	.+604    	; 0x2322 <fat_resize_file+0x386>
    20c6:	29 89       	ldd	r18, Y+17	; 0x11
    20c8:	3a 89       	ldd	r19, Y+18	; 0x12
    20ca:	4b 89       	ldd	r20, Y+19	; 0x13
    20cc:	5c 89       	ldd	r21, Y+20	; 0x14
    20ce:	23 2b       	or	r18, r19
    20d0:	24 2b       	or	r18, r20
    20d2:	25 2b       	or	r18, r21
    20d4:	41 f4       	brne	.+16     	; 0x20e6 <fat_resize_file+0x14a>
    20d6:	d1 01       	movw	r26, r2
    20d8:	93 96       	adiw	r26, 0x23	; 35
    20da:	cd 92       	st	X+, r12
    20dc:	dd 92       	st	X+, r13
    20de:	ed 92       	st	X+, r14
    20e0:	fc 92       	st	X, r15
    20e2:	96 97       	sbiw	r26, 0x26	; 38
    20e4:	04 c0       	rjmp	.+8      	; 0x20ee <fat_resize_file+0x152>
    20e6:	cd 84       	ldd	r12, Y+13	; 0x0d
    20e8:	de 84       	ldd	r13, Y+14	; 0x0e
    20ea:	ef 84       	ldd	r14, Y+15	; 0x0f
    20ec:	f8 88       	ldd	r15, Y+16	; 0x10
    20ee:	2d 81       	ldd	r18, Y+5	; 0x05
    20f0:	3e 81       	ldd	r19, Y+6	; 0x06
    20f2:	4f 81       	ldd	r20, Y+7	; 0x07
    20f4:	58 85       	ldd	r21, Y+8	; 0x08
    20f6:	d1 01       	movw	r26, r2
    20f8:	97 96       	adiw	r26, 0x27	; 39
    20fa:	2d 93       	st	X+, r18
    20fc:	3d 93       	st	X+, r19
    20fe:	4d 93       	st	X+, r20
    2100:	5c 93       	st	X, r21
    2102:	9a 97       	sbiw	r26, 0x2a	; 42
    2104:	23 2b       	or	r18, r19
    2106:	24 2b       	or	r18, r20
    2108:	25 2b       	or	r18, r21
    210a:	09 f0       	breq	.+2      	; 0x210e <fat_resize_file+0x172>
    210c:	31 c1       	rjmp	.+610    	; 0x2370 <fat_resize_file+0x3d4>
    210e:	f1 01       	movw	r30, r2
    2110:	13 a2       	std	Z+35, r1	; 0x23
    2112:	14 a2       	std	Z+36, r1	; 0x24
    2114:	15 a2       	std	Z+37, r1	; 0x25
    2116:	16 a2       	std	Z+38, r1	; 0x26
    2118:	b1 01       	movw	r22, r2
    211a:	6e 5f       	subi	r22, 0xFE	; 254
    211c:	7f 4f       	sbci	r23, 0xFF	; 255
    211e:	80 81       	ld	r24, Z
    2120:	91 81       	ldd	r25, Z+1	; 0x01
    2122:	0e 94 77 08 	call	0x10ee	; 0x10ee <fat_write_dir_entry>
    2126:	88 23       	and	r24, r24
    2128:	09 f4       	brne	.+2      	; 0x212c <fat_resize_file+0x190>
    212a:	51 c1       	rjmp	.+674    	; 0x23ce <fat_resize_file+0x432>
    212c:	b7 01       	movw	r22, r14
    212e:	a6 01       	movw	r20, r12
    2130:	d1 01       	movw	r26, r2
    2132:	8d 91       	ld	r24, X+
    2134:	9c 91       	ld	r25, X
    2136:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <fat_free_clusters>
    213a:	a0 c0       	rjmp	.+320    	; 0x227c <fat_resize_file+0x2e0>
    213c:	84 14       	cp	r8, r4
    213e:	95 04       	cpc	r9, r5
    2140:	a6 04       	cpc	r10, r6
    2142:	b7 04       	cpc	r11, r7
    2144:	08 f4       	brcc	.+2      	; 0x2148 <fat_resize_file+0x1ac>
    2146:	9a c0       	rjmp	.+308    	; 0x227c <fat_resize_file+0x2e0>
    2148:	f1 01       	movw	r30, r2
    214a:	80 80       	ld	r8, Z
    214c:	91 80       	ldd	r9, Z+1	; 0x01
    214e:	81 14       	cp	r8, r1
    2150:	91 04       	cpc	r9, r1
    2152:	09 f4       	brne	.+2      	; 0x2156 <fat_resize_file+0x1ba>
    2154:	93 c0       	rjmp	.+294    	; 0x227c <fat_resize_file+0x2e0>
    2156:	f2 e0       	ldi	r31, 0x02	; 2
    2158:	cf 16       	cp	r12, r31
    215a:	d1 04       	cpc	r13, r1
    215c:	e1 04       	cpc	r14, r1
    215e:	f1 04       	cpc	r15, r1
    2160:	08 f4       	brcc	.+2      	; 0x2164 <fat_resize_file+0x1c8>
    2162:	8c c0       	rjmp	.+280    	; 0x227c <fat_resize_file+0x2e0>
    2164:	b7 01       	movw	r22, r14
    2166:	a6 01       	movw	r20, r12
    2168:	c4 01       	movw	r24, r8
    216a:	0e 94 27 01 	call	0x24e	; 0x24e <fat_get_next_cluster>
    216e:	2b 01       	movw	r4, r22
    2170:	3c 01       	movw	r6, r24
    2172:	d4 01       	movw	r26, r8
    2174:	ed 91       	ld	r30, X+
    2176:	fc 91       	ld	r31, X
    2178:	80 85       	ldd	r24, Z+8	; 0x08
    217a:	8b 30       	cpi	r24, 0x0B	; 11
    217c:	e9 f5       	brne	.+122    	; 0x21f8 <fat_resize_file+0x25c>
    217e:	8f ef       	ldi	r24, 0xFF	; 255
    2180:	9f ef       	ldi	r25, 0xFF	; 255
    2182:	af ef       	ldi	r26, 0xFF	; 255
    2184:	bf e0       	ldi	r27, 0x0F	; 15
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	9a 83       	std	Y+2, r25	; 0x02
    218a:	ab 83       	std	Y+3, r26	; 0x03
    218c:	bc 83       	std	Y+4, r27	; 0x04
    218e:	56 01       	movw	r10, r12
    2190:	67 01       	movw	r12, r14
    2192:	2a 2d       	mov	r18, r10
    2194:	3b 2d       	mov	r19, r11
    2196:	4c 2d       	mov	r20, r12
    2198:	5d 2d       	mov	r21, r13
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	70 e0       	ldi	r23, 0x00	; 0
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	02 e0       	ldi	r16, 0x02	; 2
    21a4:	0e 94 24 21 	call	0x4248	; 0x4248 <__ashldi3>
    21a8:	d4 01       	movw	r26, r8
    21aa:	1a 96       	adiw	r26, 0x0a	; 10
    21ac:	ac 90       	ld	r10, X
    21ae:	1a 97       	sbiw	r26, 0x0a	; 10
    21b0:	1b 96       	adiw	r26, 0x0b	; 11
    21b2:	bc 90       	ld	r11, X
    21b4:	1b 97       	sbiw	r26, 0x0b	; 11
    21b6:	1c 96       	adiw	r26, 0x0c	; 12
    21b8:	cc 90       	ld	r12, X
    21ba:	1c 97       	sbiw	r26, 0x0c	; 12
    21bc:	1d 96       	adiw	r26, 0x0d	; 13
    21be:	dc 90       	ld	r13, X
    21c0:	1d 97       	sbiw	r26, 0x0d	; 13
    21c2:	1e 96       	adiw	r26, 0x0e	; 14
    21c4:	ec 90       	ld	r14, X
    21c6:	1e 97       	sbiw	r26, 0x0e	; 14
    21c8:	1f 96       	adiw	r26, 0x0f	; 15
    21ca:	fc 90       	ld	r15, X
    21cc:	1f 97       	sbiw	r26, 0x0f	; 15
    21ce:	50 96       	adiw	r26, 0x10	; 16
    21d0:	0c 91       	ld	r16, X
    21d2:	50 97       	sbiw	r26, 0x10	; 16
    21d4:	51 96       	adiw	r26, 0x11	; 17
    21d6:	1c 91       	ld	r17, X
    21d8:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
    21dc:	04 80       	ldd	r0, Z+4	; 0x04
    21de:	f5 81       	ldd	r31, Z+5	; 0x05
    21e0:	e0 2d       	mov	r30, r0
    21e2:	68 94       	set
    21e4:	ee 24       	eor	r14, r14
    21e6:	e2 f8       	bld	r14, 2
    21e8:	f1 2c       	mov	r15, r1
    21ea:	8e 01       	movw	r16, r28
    21ec:	0f 5f       	subi	r16, 0xFF	; 255
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	09 95       	icall
    21f2:	81 11       	cpse	r24, r1
    21f4:	39 c0       	rjmp	.+114    	; 0x2268 <fat_resize_file+0x2cc>
    21f6:	42 c0       	rjmp	.+132    	; 0x227c <fat_resize_file+0x2e0>
    21f8:	8f ef       	ldi	r24, 0xFF	; 255
    21fa:	9f ef       	ldi	r25, 0xFF	; 255
    21fc:	9a 83       	std	Y+2, r25	; 0x02
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	56 01       	movw	r10, r12
    2202:	67 01       	movw	r12, r14
    2204:	2a 2d       	mov	r18, r10
    2206:	3b 2d       	mov	r19, r11
    2208:	4c 2d       	mov	r20, r12
    220a:	5d 2d       	mov	r21, r13
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	70 e0       	ldi	r23, 0x00	; 0
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	01 e0       	ldi	r16, 0x01	; 1
    2216:	0e 94 24 21 	call	0x4248	; 0x4248 <__ashldi3>
    221a:	d4 01       	movw	r26, r8
    221c:	1a 96       	adiw	r26, 0x0a	; 10
    221e:	ac 90       	ld	r10, X
    2220:	1a 97       	sbiw	r26, 0x0a	; 10
    2222:	1b 96       	adiw	r26, 0x0b	; 11
    2224:	bc 90       	ld	r11, X
    2226:	1b 97       	sbiw	r26, 0x0b	; 11
    2228:	1c 96       	adiw	r26, 0x0c	; 12
    222a:	cc 90       	ld	r12, X
    222c:	1c 97       	sbiw	r26, 0x0c	; 12
    222e:	1d 96       	adiw	r26, 0x0d	; 13
    2230:	dc 90       	ld	r13, X
    2232:	1d 97       	sbiw	r26, 0x0d	; 13
    2234:	1e 96       	adiw	r26, 0x0e	; 14
    2236:	ec 90       	ld	r14, X
    2238:	1e 97       	sbiw	r26, 0x0e	; 14
    223a:	1f 96       	adiw	r26, 0x0f	; 15
    223c:	fc 90       	ld	r15, X
    223e:	1f 97       	sbiw	r26, 0x0f	; 15
    2240:	50 96       	adiw	r26, 0x10	; 16
    2242:	0c 91       	ld	r16, X
    2244:	50 97       	sbiw	r26, 0x10	; 16
    2246:	51 96       	adiw	r26, 0x11	; 17
    2248:	1c 91       	ld	r17, X
    224a:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
    224e:	04 80       	ldd	r0, Z+4	; 0x04
    2250:	f5 81       	ldd	r31, Z+5	; 0x05
    2252:	e0 2d       	mov	r30, r0
    2254:	68 94       	set
    2256:	ee 24       	eor	r14, r14
    2258:	e1 f8       	bld	r14, 1
    225a:	f1 2c       	mov	r15, r1
    225c:	8e 01       	movw	r16, r28
    225e:	0f 5f       	subi	r16, 0xFF	; 255
    2260:	1f 4f       	sbci	r17, 0xFF	; 255
    2262:	09 95       	icall
    2264:	88 23       	and	r24, r24
    2266:	51 f0       	breq	.+20     	; 0x227c <fat_resize_file+0x2e0>
    2268:	41 14       	cp	r4, r1
    226a:	51 04       	cpc	r5, r1
    226c:	61 04       	cpc	r6, r1
    226e:	71 04       	cpc	r7, r1
    2270:	29 f0       	breq	.+10     	; 0x227c <fat_resize_file+0x2e0>
    2272:	b3 01       	movw	r22, r6
    2274:	a2 01       	movw	r20, r4
    2276:	c4 01       	movw	r24, r8
    2278:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <fat_free_clusters>
    227c:	4d 81       	ldd	r20, Y+5	; 0x05
    227e:	5e 81       	ldd	r21, Y+6	; 0x06
    2280:	6f 81       	ldd	r22, Y+7	; 0x07
    2282:	78 85       	ldd	r23, Y+8	; 0x08
    2284:	9a 01       	movw	r18, r20
    2286:	ab 01       	movw	r20, r22
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	70 e0       	ldi	r23, 0x00	; 0
    228c:	cb 01       	movw	r24, r22
    228e:	2d 83       	std	Y+5, r18	; 0x05
    2290:	3e 83       	std	Y+6, r19	; 0x06
    2292:	4f 83       	std	Y+7, r20	; 0x07
    2294:	58 87       	std	Y+8, r21	; 0x08
    2296:	69 87       	std	Y+9, r22	; 0x09
    2298:	7a 87       	std	Y+10, r23	; 0x0a
    229a:	8b 87       	std	Y+11, r24	; 0x0b
    229c:	9c 87       	std	Y+12, r25	; 0x0c
    229e:	d1 01       	movw	r26, r2
    22a0:	d3 96       	adiw	r26, 0x33	; 51
    22a2:	ac 90       	ld	r10, X
    22a4:	d3 97       	sbiw	r26, 0x33	; 51
    22a6:	d4 96       	adiw	r26, 0x34	; 52
    22a8:	bc 90       	ld	r11, X
    22aa:	d4 97       	sbiw	r26, 0x34	; 52
    22ac:	d5 96       	adiw	r26, 0x35	; 53
    22ae:	cc 90       	ld	r12, X
    22b0:	d5 97       	sbiw	r26, 0x35	; 53
    22b2:	d6 96       	adiw	r26, 0x36	; 54
    22b4:	dc 90       	ld	r13, X
    22b6:	d6 97       	sbiw	r26, 0x36	; 54
    22b8:	d7 96       	adiw	r26, 0x37	; 55
    22ba:	ec 90       	ld	r14, X
    22bc:	d7 97       	sbiw	r26, 0x37	; 55
    22be:	d8 96       	adiw	r26, 0x38	; 56
    22c0:	fc 90       	ld	r15, X
    22c2:	d8 97       	sbiw	r26, 0x38	; 56
    22c4:	d9 96       	adiw	r26, 0x39	; 57
    22c6:	0c 91       	ld	r16, X
    22c8:	d9 97       	sbiw	r26, 0x39	; 57
    22ca:	da 96       	adiw	r26, 0x3a	; 58
    22cc:	1c 91       	ld	r17, X
    22ce:	da 97       	sbiw	r26, 0x3a	; 58
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	70 e0       	ldi	r23, 0x00	; 0
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__cmpdi2>
    22dc:	20 f5       	brcc	.+72     	; 0x2326 <fat_resize_file+0x38a>
    22de:	d3 96       	adiw	r26, 0x33	; 51
    22e0:	2c 93       	st	X, r18
    22e2:	d3 97       	sbiw	r26, 0x33	; 51
    22e4:	d4 96       	adiw	r26, 0x34	; 52
    22e6:	3c 93       	st	X, r19
    22e8:	d4 97       	sbiw	r26, 0x34	; 52
    22ea:	d5 96       	adiw	r26, 0x35	; 53
    22ec:	4c 93       	st	X, r20
    22ee:	d5 97       	sbiw	r26, 0x35	; 53
    22f0:	d6 96       	adiw	r26, 0x36	; 54
    22f2:	5c 93       	st	X, r21
    22f4:	d6 97       	sbiw	r26, 0x36	; 54
    22f6:	d7 96       	adiw	r26, 0x37	; 55
    22f8:	1c 92       	st	X, r1
    22fa:	d7 97       	sbiw	r26, 0x37	; 55
    22fc:	d8 96       	adiw	r26, 0x38	; 56
    22fe:	1c 92       	st	X, r1
    2300:	d8 97       	sbiw	r26, 0x38	; 56
    2302:	d9 96       	adiw	r26, 0x39	; 57
    2304:	1c 92       	st	X, r1
    2306:	d9 97       	sbiw	r26, 0x39	; 57
    2308:	da 96       	adiw	r26, 0x3a	; 58
    230a:	1c 92       	st	X, r1
    230c:	da 97       	sbiw	r26, 0x3a	; 58
    230e:	db 96       	adiw	r26, 0x3b	; 59
    2310:	1d 92       	st	X+, r1
    2312:	1d 92       	st	X+, r1
    2314:	1d 92       	st	X+, r1
    2316:	1c 92       	st	X, r1
    2318:	de 97       	sbiw	r26, 0x3e	; 62
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	58 c0       	rjmp	.+176    	; 0x23ce <fat_resize_file+0x432>
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	56 c0       	rjmp	.+172    	; 0x23ce <fat_resize_file+0x432>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	54 c0       	rjmp	.+168    	; 0x23ce <fat_resize_file+0x432>
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	52 c0       	rjmp	.+164    	; 0x23ce <fat_resize_file+0x432>
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	50 c0       	rjmp	.+160    	; 0x23ce <fat_resize_file+0x432>
    232e:	d5 01       	movw	r26, r10
    2330:	c4 01       	movw	r24, r8
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	a1 09       	sbc	r26, r1
    2336:	b1 09       	sbc	r27, r1
    2338:	bc 01       	movw	r22, r24
    233a:	cd 01       	movw	r24, r26
    233c:	64 0d       	add	r22, r4
    233e:	75 1d       	adc	r23, r5
    2340:	86 1d       	adc	r24, r6
    2342:	97 1d       	adc	r25, r7
    2344:	a5 01       	movw	r20, r10
    2346:	94 01       	movw	r18, r8
    2348:	0e 94 89 20 	call	0x4112	; 0x4112 <__udivmodsi4>
    234c:	89 01       	movw	r16, r18
    234e:	9a 01       	movw	r18, r20
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	50 e0       	ldi	r21, 0x00	; 0
    2354:	ba 01       	movw	r22, r20
    2356:	f1 01       	movw	r30, r2
    2358:	80 81       	ld	r24, Z
    235a:	91 81       	ldd	r25, Z+1	; 0x01
    235c:	0e 94 a4 03 	call	0x748	; 0x748 <fat_append_clusters>
    2360:	6b 01       	movw	r12, r22
    2362:	7c 01       	movw	r14, r24
    2364:	67 2b       	or	r22, r23
    2366:	68 2b       	or	r22, r24
    2368:	69 2b       	or	r22, r25
    236a:	09 f0       	breq	.+2      	; 0x236e <fat_resize_file+0x3d2>
    236c:	b4 ce       	rjmp	.-664    	; 0x20d6 <fat_resize_file+0x13a>
    236e:	dd cf       	rjmp	.-70     	; 0x232a <fat_resize_file+0x38e>
    2370:	b1 01       	movw	r22, r2
    2372:	6e 5f       	subi	r22, 0xFE	; 254
    2374:	7f 4f       	sbci	r23, 0xFF	; 255
    2376:	d1 01       	movw	r26, r2
    2378:	8d 91       	ld	r24, X+
    237a:	9c 91       	ld	r25, X
    237c:	0e 94 77 08 	call	0x10ee	; 0x10ee <fat_write_dir_entry>
    2380:	81 11       	cpse	r24, r1
    2382:	dc ce       	rjmp	.-584    	; 0x213c <fat_resize_file+0x1a0>
    2384:	24 c0       	rjmp	.+72     	; 0x23ce <fat_resize_file+0x432>
    2386:	4c 01       	movw	r8, r24
    2388:	a1 2c       	mov	r10, r1
    238a:	b1 2c       	mov	r11, r1
    238c:	2d 81       	ldd	r18, Y+5	; 0x05
    238e:	3e 81       	ldd	r19, Y+6	; 0x06
    2390:	4f 81       	ldd	r20, Y+7	; 0x07
    2392:	58 85       	ldd	r21, Y+8	; 0x08
    2394:	82 16       	cp	r8, r18
    2396:	93 06       	cpc	r9, r19
    2398:	a4 06       	cpc	r10, r20
    239a:	b5 06       	cpc	r11, r21
    239c:	08 f4       	brcc	.+2      	; 0x23a0 <fat_resize_file+0x404>
    239e:	3e ce       	rjmp	.-900    	; 0x201c <fat_resize_file+0x80>
    23a0:	29 01       	movw	r4, r18
    23a2:	3a 01       	movw	r6, r20
    23a4:	c4 cf       	rjmp	.-120    	; 0x232e <fat_resize_file+0x392>
    23a6:	4c 01       	movw	r8, r24
    23a8:	a1 2c       	mov	r10, r1
    23aa:	b1 2c       	mov	r11, r1
    23ac:	4d 81       	ldd	r20, Y+5	; 0x05
    23ae:	5e 81       	ldd	r21, Y+6	; 0x06
    23b0:	6f 81       	ldd	r22, Y+7	; 0x07
    23b2:	78 85       	ldd	r23, Y+8	; 0x08
    23b4:	84 16       	cp	r8, r20
    23b6:	95 06       	cpc	r9, r21
    23b8:	a6 06       	cpc	r10, r22
    23ba:	b7 06       	cpc	r11, r23
    23bc:	08 f4       	brcc	.+2      	; 0x23c0 <fat_resize_file+0x424>
    23be:	2e ce       	rjmp	.-932    	; 0x201c <fat_resize_file+0x80>
    23c0:	2a 01       	movw	r4, r20
    23c2:	3b 01       	movw	r6, r22
    23c4:	cd 84       	ldd	r12, Y+13	; 0x0d
    23c6:	de 84       	ldd	r13, Y+14	; 0x0e
    23c8:	ef 84       	ldd	r14, Y+15	; 0x0f
    23ca:	f8 88       	ldd	r15, Y+16	; 0x10
    23cc:	90 ce       	rjmp	.-736    	; 0x20ee <fat_resize_file+0x152>
    23ce:	64 96       	adiw	r28, 0x14	; 20
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	f8 94       	cli
    23d4:	de bf       	out	0x3e, r29	; 62
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	cd bf       	out	0x3d, r28	; 61
    23da:	df 91       	pop	r29
    23dc:	cf 91       	pop	r28
    23de:	1f 91       	pop	r17
    23e0:	0f 91       	pop	r16
    23e2:	ff 90       	pop	r15
    23e4:	ef 90       	pop	r14
    23e6:	df 90       	pop	r13
    23e8:	cf 90       	pop	r12
    23ea:	bf 90       	pop	r11
    23ec:	af 90       	pop	r10
    23ee:	9f 90       	pop	r9
    23f0:	8f 90       	pop	r8
    23f2:	7f 90       	pop	r7
    23f4:	6f 90       	pop	r6
    23f6:	5f 90       	pop	r5
    23f8:	4f 90       	pop	r4
    23fa:	3f 90       	pop	r3
    23fc:	2f 90       	pop	r2
    23fe:	08 95       	ret

00002400 <fat_seek_file>:
    2400:	af 92       	push	r10
    2402:	bf 92       	push	r11
    2404:	cf 92       	push	r12
    2406:	df 92       	push	r13
    2408:	ef 92       	push	r14
    240a:	ff 92       	push	r15
    240c:	0f 93       	push	r16
    240e:	1f 93       	push	r17
    2410:	cf 93       	push	r28
    2412:	df 93       	push	r29
    2414:	ec 01       	movw	r28, r24
    2416:	89 2b       	or	r24, r25
    2418:	09 f4       	brne	.+2      	; 0x241c <fat_seek_file+0x1c>
    241a:	55 c0       	rjmp	.+170    	; 0x24c6 <fat_seek_file+0xc6>
    241c:	61 15       	cp	r22, r1
    241e:	71 05       	cpc	r23, r1
    2420:	09 f4       	brne	.+2      	; 0x2424 <fat_seek_file+0x24>
    2422:	53 c0       	rjmp	.+166    	; 0x24ca <fat_seek_file+0xca>
    2424:	eb a9       	ldd	r30, Y+51	; 0x33
    2426:	5c a9       	ldd	r21, Y+52	; 0x34
    2428:	3d a9       	ldd	r19, Y+53	; 0x35
    242a:	2e a9       	ldd	r18, Y+54	; 0x36
    242c:	41 30       	cpi	r20, 0x01	; 1
    242e:	51 f0       	breq	.+20     	; 0x2444 <fat_seek_file+0x44>
    2430:	18 f0       	brcs	.+6      	; 0x2438 <fat_seek_file+0x38>
    2432:	42 30       	cpi	r20, 0x02	; 2
    2434:	a9 f0       	breq	.+42     	; 0x2460 <fat_seek_file+0x60>
    2436:	4b c0       	rjmp	.+150    	; 0x24ce <fat_seek_file+0xce>
    2438:	fb 01       	movw	r30, r22
    243a:	c0 80       	ld	r12, Z
    243c:	d1 80       	ldd	r13, Z+1	; 0x01
    243e:	e2 80       	ldd	r14, Z+2	; 0x02
    2440:	f3 80       	ldd	r15, Z+3	; 0x03
    2442:	1b c0       	rjmp	.+54     	; 0x247a <fat_seek_file+0x7a>
    2444:	8e 2f       	mov	r24, r30
    2446:	95 2f       	mov	r25, r21
    2448:	a3 2f       	mov	r26, r19
    244a:	b2 2f       	mov	r27, r18
    244c:	fb 01       	movw	r30, r22
    244e:	c0 80       	ld	r12, Z
    2450:	d1 80       	ldd	r13, Z+1	; 0x01
    2452:	e2 80       	ldd	r14, Z+2	; 0x02
    2454:	f3 80       	ldd	r15, Z+3	; 0x03
    2456:	c8 0e       	add	r12, r24
    2458:	d9 1e       	adc	r13, r25
    245a:	ea 1e       	adc	r14, r26
    245c:	fb 1e       	adc	r15, r27
    245e:	0d c0       	rjmp	.+26     	; 0x247a <fat_seek_file+0x7a>
    2460:	fb 01       	movw	r30, r22
    2462:	c0 80       	ld	r12, Z
    2464:	d1 80       	ldd	r13, Z+1	; 0x01
    2466:	e2 80       	ldd	r14, Z+2	; 0x02
    2468:	f3 80       	ldd	r15, Z+3	; 0x03
    246a:	8f a1       	ldd	r24, Y+39	; 0x27
    246c:	98 a5       	ldd	r25, Y+40	; 0x28
    246e:	a9 a5       	ldd	r26, Y+41	; 0x29
    2470:	ba a5       	ldd	r27, Y+42	; 0x2a
    2472:	c8 0e       	add	r12, r24
    2474:	d9 1e       	adc	r13, r25
    2476:	ea 1e       	adc	r14, r26
    2478:	fb 1e       	adc	r15, r27
    247a:	5b 01       	movw	r10, r22
    247c:	8f a1       	ldd	r24, Y+39	; 0x27
    247e:	98 a5       	ldd	r25, Y+40	; 0x28
    2480:	a9 a5       	ldd	r26, Y+41	; 0x29
    2482:	ba a5       	ldd	r27, Y+42	; 0x2a
    2484:	8c 15       	cp	r24, r12
    2486:	9d 05       	cpc	r25, r13
    2488:	ae 05       	cpc	r26, r14
    248a:	bf 05       	cpc	r27, r15
    248c:	38 f4       	brcc	.+14     	; 0x249c <fat_seek_file+0x9c>
    248e:	b7 01       	movw	r22, r14
    2490:	a6 01       	movw	r20, r12
    2492:	ce 01       	movw	r24, r28
    2494:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <fat_resize_file>
    2498:	88 23       	and	r24, r24
    249a:	d1 f0       	breq	.+52     	; 0x24d0 <fat_seek_file+0xd0>
    249c:	97 01       	movw	r18, r14
    249e:	86 01       	movw	r16, r12
    24a0:	cb aa       	std	Y+51, r12	; 0x33
    24a2:	1c ab       	std	Y+52, r17	; 0x34
    24a4:	2d ab       	std	Y+53, r18	; 0x35
    24a6:	3e ab       	std	Y+54, r19	; 0x36
    24a8:	1f aa       	std	Y+55, r1	; 0x37
    24aa:	18 ae       	std	Y+56, r1	; 0x38
    24ac:	19 ae       	std	Y+57, r1	; 0x39
    24ae:	1a ae       	std	Y+58, r1	; 0x3a
    24b0:	1b ae       	std	Y+59, r1	; 0x3b
    24b2:	1c ae       	std	Y+60, r1	; 0x3c
    24b4:	1d ae       	std	Y+61, r1	; 0x3d
    24b6:	1e ae       	std	Y+62, r1	; 0x3e
    24b8:	f5 01       	movw	r30, r10
    24ba:	c0 82       	st	Z, r12
    24bc:	d1 82       	std	Z+1, r13	; 0x01
    24be:	e2 82       	std	Z+2, r14	; 0x02
    24c0:	f3 82       	std	Z+3, r15	; 0x03
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	05 c0       	rjmp	.+10     	; 0x24d0 <fat_seek_file+0xd0>
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	03 c0       	rjmp	.+6      	; 0x24d0 <fat_seek_file+0xd0>
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	01 c0       	rjmp	.+2      	; 0x24d0 <fat_seek_file+0xd0>
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	1f 91       	pop	r17
    24d6:	0f 91       	pop	r16
    24d8:	ff 90       	pop	r15
    24da:	ef 90       	pop	r14
    24dc:	df 90       	pop	r13
    24de:	cf 90       	pop	r12
    24e0:	bf 90       	pop	r11
    24e2:	af 90       	pop	r10
    24e4:	08 95       	ret

000024e6 <fat_open_dir>:
    24e6:	cf 93       	push	r28
    24e8:	df 93       	push	r29
    24ea:	00 97       	sbiw	r24, 0x00	; 0
    24ec:	b1 f0       	breq	.+44     	; 0x251a <fat_open_dir+0x34>
    24ee:	61 15       	cp	r22, r1
    24f0:	71 05       	cpc	r23, r1
    24f2:	b1 f0       	breq	.+44     	; 0x2520 <fat_open_dir+0x3a>
    24f4:	fb 01       	movw	r30, r22
    24f6:	20 a1       	ldd	r18, Z+32	; 0x20
    24f8:	24 ff       	sbrs	r18, 4
    24fa:	15 c0       	rjmp	.+42     	; 0x2526 <fat_open_dir+0x40>
    24fc:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__data_end>
    2500:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__data_end+0x1>
    2504:	23 2b       	or	r18, r19
    2506:	91 f0       	breq	.+36     	; 0x252c <fat_open_dir+0x46>
    2508:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <__data_end+0x39>
    250c:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <__data_end+0x3a>
    2510:	23 2b       	or	r18, r19
    2512:	79 f0       	breq	.+30     	; 0x2532 <fat_open_dir+0x4c>
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	25 c0       	rjmp	.+74     	; 0x2564 <fat_open_dir+0x7e>
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	22 c0       	rjmp	.+68     	; 0x2564 <fat_open_dir+0x7e>
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	1f c0       	rjmp	.+62     	; 0x2564 <fat_open_dir+0x7e>
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	1c c0       	rjmp	.+56     	; 0x2564 <fat_open_dir+0x7e>
    252c:	c8 e2       	ldi	r28, 0x28	; 40
    252e:	d1 e0       	ldi	r29, 0x01	; 1
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <fat_open_dir+0x50>
    2532:	c1 e6       	ldi	r28, 0x61	; 97
    2534:	d1 e0       	ldi	r29, 0x01	; 1
    2536:	de 01       	movw	r26, r28
    2538:	12 96       	adiw	r26, 0x02	; 2
    253a:	21 e3       	ldi	r18, 0x31	; 49
    253c:	fb 01       	movw	r30, r22
    253e:	01 90       	ld	r0, Z+
    2540:	0d 92       	st	X+, r0
    2542:	2a 95       	dec	r18
    2544:	e1 f7       	brne	.-8      	; 0x253e <fat_open_dir+0x58>
    2546:	99 83       	std	Y+1, r25	; 0x01
    2548:	88 83       	st	Y, r24
    254a:	fb 01       	movw	r30, r22
    254c:	81 a1       	ldd	r24, Z+33	; 0x21
    254e:	92 a1       	ldd	r25, Z+34	; 0x22
    2550:	a3 a1       	ldd	r26, Z+35	; 0x23
    2552:	b4 a1       	ldd	r27, Z+36	; 0x24
    2554:	8b ab       	std	Y+51, r24	; 0x33
    2556:	9c ab       	std	Y+52, r25	; 0x34
    2558:	ad ab       	std	Y+53, r26	; 0x35
    255a:	be ab       	std	Y+54, r27	; 0x36
    255c:	18 ae       	std	Y+56, r1	; 0x38
    255e:	1f aa       	std	Y+55, r1	; 0x37
    2560:	8c 2f       	mov	r24, r28
    2562:	9d 2f       	mov	r25, r29
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	08 95       	ret

0000256a <fat_close_dir>:
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	19 f0       	breq	.+6      	; 0x2574 <fat_close_dir+0xa>
    256e:	fc 01       	movw	r30, r24
    2570:	11 82       	std	Z+1, r1	; 0x01
    2572:	10 82       	st	Z, r1
    2574:	08 95       	ret

00002576 <fat_reset_dir>:
    2576:	fc 01       	movw	r30, r24
    2578:	89 2b       	or	r24, r25
    257a:	61 f0       	breq	.+24     	; 0x2594 <fat_reset_dir+0x1e>
    257c:	83 a1       	ldd	r24, Z+35	; 0x23
    257e:	94 a1       	ldd	r25, Z+36	; 0x24
    2580:	a5 a1       	ldd	r26, Z+37	; 0x25
    2582:	b6 a1       	ldd	r27, Z+38	; 0x26
    2584:	83 ab       	std	Z+51, r24	; 0x33
    2586:	94 ab       	std	Z+52, r25	; 0x34
    2588:	a5 ab       	std	Z+53, r26	; 0x35
    258a:	b6 ab       	std	Z+54, r27	; 0x36
    258c:	10 ae       	std	Z+56, r1	; 0x38
    258e:	17 aa       	std	Z+55, r1	; 0x37
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	08 95       	ret
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	08 95       	ret

00002598 <fat_read_dir>:
    2598:	2f 92       	push	r2
    259a:	3f 92       	push	r3
    259c:	4f 92       	push	r4
    259e:	5f 92       	push	r5
    25a0:	6f 92       	push	r6
    25a2:	7f 92       	push	r7
    25a4:	8f 92       	push	r8
    25a6:	9f 92       	push	r9
    25a8:	af 92       	push	r10
    25aa:	bf 92       	push	r11
    25ac:	cf 92       	push	r12
    25ae:	df 92       	push	r13
    25b0:	ef 92       	push	r14
    25b2:	ff 92       	push	r15
    25b4:	0f 93       	push	r16
    25b6:	1f 93       	push	r17
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	e6 97       	sbiw	r28, 0x36	; 54
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	cd bf       	out	0x3d, r28	; 61
    25cc:	00 97       	sbiw	r24, 0x00	; 0
    25ce:	09 f4       	brne	.+2      	; 0x25d2 <fat_read_dir+0x3a>
    25d0:	f3 c0       	rjmp	.+486    	; 0x27b8 <fat_read_dir+0x220>
    25d2:	61 15       	cp	r22, r1
    25d4:	71 05       	cpc	r23, r1
    25d6:	09 f4       	brne	.+2      	; 0x25da <fat_read_dir+0x42>
    25d8:	f1 c0       	rjmp	.+482    	; 0x27bc <fat_read_dir+0x224>
    25da:	9e ab       	std	Y+54, r25	; 0x36
    25dc:	8d ab       	std	Y+53, r24	; 0x35
    25de:	fc 01       	movw	r30, r24
    25e0:	20 80       	ld	r2, Z
    25e2:	31 80       	ldd	r3, Z+1	; 0x01
    25e4:	f1 01       	movw	r30, r2
    25e6:	60 8c       	ldd	r6, Z+24	; 0x18
    25e8:	71 8c       	ldd	r7, Z+25	; 0x19
    25ea:	fc 01       	movw	r30, r24
    25ec:	23 a9       	ldd	r18, Z+51	; 0x33
    25ee:	34 a9       	ldd	r19, Z+52	; 0x34
    25f0:	45 a9       	ldd	r20, Z+53	; 0x35
    25f2:	56 a9       	ldd	r21, Z+54	; 0x36
    25f4:	29 ab       	std	Y+49, r18	; 0x31
    25f6:	3a ab       	std	Y+50, r19	; 0x32
    25f8:	4b ab       	std	Y+51, r20	; 0x33
    25fa:	5c ab       	std	Y+52, r21	; 0x34
    25fc:	47 a8       	ldd	r4, Z+55	; 0x37
    25fe:	50 ac       	ldd	r5, Z+56	; 0x38
    2600:	46 14       	cp	r4, r6
    2602:	57 04       	cpc	r5, r7
    2604:	20 f0       	brcs	.+8      	; 0x260e <fat_read_dir+0x76>
    2606:	0e 94 bb 12 	call	0x2576	; 0x2576 <fat_reset_dir>
    260a:	10 e0       	ldi	r17, 0x00	; 0
    260c:	da c0       	rjmp	.+436    	; 0x27c2 <fat_read_dir+0x22a>
    260e:	9e 01       	movw	r18, r28
    2610:	2f 5f       	subi	r18, 0xFF	; 255
    2612:	3f 4f       	sbci	r19, 0xFF	; 255
    2614:	86 e0       	ldi	r24, 0x06	; 6
    2616:	f9 01       	movw	r30, r18
    2618:	11 92       	st	Z+, r1
    261a:	8a 95       	dec	r24
    261c:	e9 f7       	brne	.-6      	; 0x2618 <fat_read_dir+0x80>
    261e:	81 e3       	ldi	r24, 0x31	; 49
    2620:	fb 01       	movw	r30, r22
    2622:	11 92       	st	Z+, r1
    2624:	8a 95       	dec	r24
    2626:	e9 f7       	brne	.-6      	; 0x2622 <fat_read_dir+0x8a>
    2628:	7a 83       	std	Y+2, r23	; 0x02
    262a:	69 83       	std	Y+1, r22	; 0x01
    262c:	29 a9       	ldd	r18, Y+49	; 0x31
    262e:	3a a9       	ldd	r19, Y+50	; 0x32
    2630:	4b a9       	ldd	r20, Y+51	; 0x33
    2632:	5c a9       	ldd	r21, Y+52	; 0x34
    2634:	23 2b       	or	r18, r19
    2636:	24 2b       	or	r18, r20
    2638:	25 2b       	or	r18, r21
    263a:	09 f0       	breq	.+2      	; 0x263e <fat_read_dir+0xa6>
    263c:	a7 c0       	rjmp	.+334    	; 0x278c <fat_read_dir+0x1f4>
    263e:	d1 01       	movw	r26, r2
    2640:	ed 91       	ld	r30, X+
    2642:	fc 91       	ld	r31, X
    2644:	11 97       	sbiw	r26, 0x01	; 1
    2646:	80 85       	ldd	r24, Z+8	; 0x08
    2648:	8b 30       	cpi	r24, 0x0B	; 11
    264a:	59 f4       	brne	.+22     	; 0x2662 <fat_read_dir+0xca>
    264c:	9a 96       	adiw	r26, 0x2a	; 42
    264e:	2d 91       	ld	r18, X+
    2650:	3d 91       	ld	r19, X+
    2652:	4d 91       	ld	r20, X+
    2654:	5c 91       	ld	r21, X
    2656:	9d 97       	sbiw	r26, 0x2d	; 45
    2658:	29 ab       	std	Y+49, r18	; 0x31
    265a:	3a ab       	std	Y+50, r19	; 0x32
    265c:	4b ab       	std	Y+51, r20	; 0x33
    265e:	5c ab       	std	Y+52, r21	; 0x34
    2660:	95 c0       	rjmp	.+298    	; 0x278c <fat_read_dir+0x1f4>
    2662:	f1 01       	movw	r30, r2
    2664:	22 8d       	ldd	r18, Z+26	; 0x1a
    2666:	33 8d       	ldd	r19, Z+27	; 0x1b
    2668:	82 a1       	ldd	r24, Z+34	; 0x22
    266a:	93 a1       	ldd	r25, Z+35	; 0x23
    266c:	39 01       	movw	r6, r18
    266e:	68 1a       	sub	r6, r24
    2670:	79 0a       	sbc	r7, r25
    2672:	8c c0       	rjmp	.+280    	; 0x278c <fat_read_dir+0x1f4>
    2674:	93 01       	movw	r18, r6
    2676:	24 19       	sub	r18, r4
    2678:	35 09       	sbc	r19, r5
    267a:	38 ab       	std	Y+48, r19	; 0x30
    267c:	2f a7       	std	Y+47, r18	; 0x2f
    267e:	a2 01       	movw	r20, r4
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	70 e0       	ldi	r23, 0x00	; 0
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	dc 01       	movw	r26, r24
    268a:	4f a2       	std	Y+39, r4	; 0x27
    268c:	58 a7       	std	Y+40, r21	; 0x28
    268e:	69 a7       	std	Y+41, r22	; 0x29
    2690:	7a a7       	std	Y+42, r23	; 0x2a
    2692:	8b a7       	std	Y+43, r24	; 0x2b
    2694:	9c a7       	std	Y+44, r25	; 0x2c
    2696:	ad a7       	std	Y+45, r26	; 0x2d
    2698:	be a7       	std	Y+46, r27	; 0x2e
    269a:	69 a9       	ldd	r22, Y+49	; 0x31
    269c:	7a a9       	ldd	r23, Y+50	; 0x32
    269e:	8b a9       	ldd	r24, Y+51	; 0x33
    26a0:	9c a9       	ldd	r25, Y+52	; 0x34
    26a2:	67 2b       	or	r22, r23
    26a4:	68 2b       	or	r22, r24
    26a6:	69 2b       	or	r22, r25
    26a8:	19 f5       	brne	.+70     	; 0x26f0 <fat_read_dir+0x158>
    26aa:	24 2d       	mov	r18, r4
    26ac:	35 2f       	mov	r19, r21
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	50 e0       	ldi	r21, 0x00	; 0
    26b2:	60 e0       	ldi	r22, 0x00	; 0
    26b4:	70 e0       	ldi	r23, 0x00	; 0
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	d1 01       	movw	r26, r2
    26bc:	92 96       	adiw	r26, 0x22	; 34
    26be:	ac 90       	ld	r10, X
    26c0:	92 97       	sbiw	r26, 0x22	; 34
    26c2:	93 96       	adiw	r26, 0x23	; 35
    26c4:	bc 90       	ld	r11, X
    26c6:	93 97       	sbiw	r26, 0x23	; 35
    26c8:	94 96       	adiw	r26, 0x24	; 36
    26ca:	cc 90       	ld	r12, X
    26cc:	94 97       	sbiw	r26, 0x24	; 36
    26ce:	95 96       	adiw	r26, 0x25	; 37
    26d0:	dc 90       	ld	r13, X
    26d2:	95 97       	sbiw	r26, 0x25	; 37
    26d4:	96 96       	adiw	r26, 0x26	; 38
    26d6:	ec 90       	ld	r14, X
    26d8:	96 97       	sbiw	r26, 0x26	; 38
    26da:	97 96       	adiw	r26, 0x27	; 39
    26dc:	fc 90       	ld	r15, X
    26de:	97 97       	sbiw	r26, 0x27	; 39
    26e0:	98 96       	adiw	r26, 0x28	; 40
    26e2:	0c 91       	ld	r16, X
    26e4:	98 97       	sbiw	r26, 0x28	; 40
    26e6:	99 96       	adiw	r26, 0x29	; 41
    26e8:	1c 91       	ld	r17, X
    26ea:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
    26ee:	11 c0       	rjmp	.+34     	; 0x2712 <fat_read_dir+0x17a>
    26f0:	49 a9       	ldd	r20, Y+49	; 0x31
    26f2:	5a a9       	ldd	r21, Y+50	; 0x32
    26f4:	6b a9       	ldd	r22, Y+51	; 0x33
    26f6:	7c a9       	ldd	r23, Y+52	; 0x34
    26f8:	c1 01       	movw	r24, r2
    26fa:	0e 94 1f 06 	call	0xc3e	; 0xc3e <fat_cluster_offset>
    26fe:	af a0       	ldd	r10, Y+39	; 0x27
    2700:	b8 a4       	ldd	r11, Y+40	; 0x28
    2702:	c1 2c       	mov	r12, r1
    2704:	d1 2c       	mov	r13, r1
    2706:	e1 2c       	mov	r14, r1
    2708:	f1 2c       	mov	r15, r1
    270a:	00 e0       	ldi	r16, 0x00	; 0
    270c:	10 e0       	ldi	r17, 0x00	; 0
    270e:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
    2712:	1c 82       	std	Y+4, r1	; 0x04
    2714:	1b 82       	std	Y+3, r1	; 0x03
    2716:	d1 01       	movw	r26, r2
    2718:	ed 91       	ld	r30, X+
    271a:	fc 91       	ld	r31, X
    271c:	02 80       	ldd	r0, Z+2	; 0x02
    271e:	f3 81       	ldd	r31, Z+3	; 0x03
    2720:	e0 2d       	mov	r30, r0
    2722:	de 01       	movw	r26, r28
    2724:	11 96       	adiw	r26, 0x01	; 1
    2726:	4d 01       	movw	r8, r26
    2728:	0f 2e       	mov	r0, r31
    272a:	f7 ec       	ldi	r31, 0xC7	; 199
    272c:	af 2e       	mov	r10, r31
    272e:	f6 e0       	ldi	r31, 0x06	; 6
    2730:	bf 2e       	mov	r11, r31
    2732:	f0 2d       	mov	r31, r0
    2734:	cf a4       	ldd	r12, Y+47	; 0x2f
    2736:	d8 a8       	ldd	r13, Y+48	; 0x30
    2738:	68 94       	set
    273a:	ee 24       	eor	r14, r14
    273c:	e5 f8       	bld	r14, 5
    273e:	f1 2c       	mov	r15, r1
    2740:	8e 01       	movw	r16, r28
    2742:	09 5f       	subi	r16, 0xF9	; 249
    2744:	1f 4f       	sbci	r17, 0xFF	; 255
    2746:	09 95       	icall
    2748:	88 23       	and	r24, r24
    274a:	d1 f1       	breq	.+116    	; 0x27c0 <fat_read_dir+0x228>
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	9c 81       	ldd	r25, Y+4	; 0x04
    2750:	48 0e       	add	r4, r24
    2752:	59 1e       	adc	r5, r25
    2754:	46 14       	cp	r4, r6
    2756:	57 04       	cpc	r5, r7
    2758:	c8 f0       	brcs	.+50     	; 0x278c <fat_read_dir+0x1f4>
    275a:	49 a9       	ldd	r20, Y+49	; 0x31
    275c:	5a a9       	ldd	r21, Y+50	; 0x32
    275e:	6b a9       	ldd	r22, Y+51	; 0x33
    2760:	7c a9       	ldd	r23, Y+52	; 0x34
    2762:	c1 01       	movw	r24, r2
    2764:	0e 94 27 01 	call	0x24e	; 0x24e <fat_get_next_cluster>
    2768:	69 ab       	std	Y+49, r22	; 0x31
    276a:	7a ab       	std	Y+50, r23	; 0x32
    276c:	8b ab       	std	Y+51, r24	; 0x33
    276e:	9c ab       	std	Y+52, r25	; 0x34
    2770:	67 2b       	or	r22, r23
    2772:	68 2b       	or	r22, r24
    2774:	69 2b       	or	r22, r25
    2776:	41 f4       	brne	.+16     	; 0x2788 <fat_read_dir+0x1f0>
    2778:	1e 81       	ldd	r17, Y+6	; 0x06
    277a:	11 11       	cpse	r17, r1
    277c:	0b c0       	rjmp	.+22     	; 0x2794 <fat_read_dir+0x1fc>
    277e:	8d a9       	ldd	r24, Y+53	; 0x35
    2780:	9e a9       	ldd	r25, Y+54	; 0x36
    2782:	0e 94 bb 12 	call	0x2576	; 0x2576 <fat_reset_dir>
    2786:	1d c0       	rjmp	.+58     	; 0x27c2 <fat_read_dir+0x22a>
    2788:	41 2c       	mov	r4, r1
    278a:	51 2c       	mov	r5, r1
    278c:	8e 81       	ldd	r24, Y+6	; 0x06
    278e:	88 23       	and	r24, r24
    2790:	09 f4       	brne	.+2      	; 0x2794 <fat_read_dir+0x1fc>
    2792:	70 cf       	rjmp	.-288    	; 0x2674 <fat_read_dir+0xdc>
    2794:	29 a9       	ldd	r18, Y+49	; 0x31
    2796:	3a a9       	ldd	r19, Y+50	; 0x32
    2798:	4b a9       	ldd	r20, Y+51	; 0x33
    279a:	5c a9       	ldd	r21, Y+52	; 0x34
    279c:	ad a9       	ldd	r26, Y+53	; 0x35
    279e:	be a9       	ldd	r27, Y+54	; 0x36
    27a0:	d3 96       	adiw	r26, 0x33	; 51
    27a2:	2d 93       	st	X+, r18
    27a4:	3d 93       	st	X+, r19
    27a6:	4d 93       	st	X+, r20
    27a8:	5c 93       	st	X, r21
    27aa:	d6 97       	sbiw	r26, 0x36	; 54
    27ac:	d8 96       	adiw	r26, 0x38	; 56
    27ae:	5c 92       	st	X, r5
    27b0:	4e 92       	st	-X, r4
    27b2:	d7 97       	sbiw	r26, 0x37	; 55
    27b4:	1e 81       	ldd	r17, Y+6	; 0x06
    27b6:	05 c0       	rjmp	.+10     	; 0x27c2 <fat_read_dir+0x22a>
    27b8:	10 e0       	ldi	r17, 0x00	; 0
    27ba:	03 c0       	rjmp	.+6      	; 0x27c2 <fat_read_dir+0x22a>
    27bc:	10 e0       	ldi	r17, 0x00	; 0
    27be:	01 c0       	rjmp	.+2      	; 0x27c2 <fat_read_dir+0x22a>
    27c0:	18 2f       	mov	r17, r24
    27c2:	81 2f       	mov	r24, r17
    27c4:	e6 96       	adiw	r28, 0x36	; 54
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	1f 91       	pop	r17
    27d6:	0f 91       	pop	r16
    27d8:	ff 90       	pop	r15
    27da:	ef 90       	pop	r14
    27dc:	df 90       	pop	r13
    27de:	cf 90       	pop	r12
    27e0:	bf 90       	pop	r11
    27e2:	af 90       	pop	r10
    27e4:	9f 90       	pop	r9
    27e6:	8f 90       	pop	r8
    27e8:	7f 90       	pop	r7
    27ea:	6f 90       	pop	r6
    27ec:	5f 90       	pop	r5
    27ee:	4f 90       	pop	r4
    27f0:	3f 90       	pop	r3
    27f2:	2f 90       	pop	r2
    27f4:	08 95       	ret

000027f6 <fat_get_dir_entry_of_path>:
    27f6:	4f 92       	push	r4
    27f8:	5f 92       	push	r5
    27fa:	6f 92       	push	r6
    27fc:	7f 92       	push	r7
    27fe:	8f 92       	push	r8
    2800:	9f 92       	push	r9
    2802:	af 92       	push	r10
    2804:	bf 92       	push	r11
    2806:	cf 92       	push	r12
    2808:	df 92       	push	r13
    280a:	ef 92       	push	r14
    280c:	ff 92       	push	r15
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	4c 01       	movw	r8, r24
    2818:	6b 01       	movw	r12, r22
    281a:	ea 01       	movw	r28, r20
    281c:	89 2b       	or	r24, r25
    281e:	09 f4       	brne	.+2      	; 0x2822 <fat_get_dir_entry_of_path+0x2c>
    2820:	76 c0       	rjmp	.+236    	; 0x290e <fat_get_dir_entry_of_path+0x118>
    2822:	61 15       	cp	r22, r1
    2824:	71 05       	cpc	r23, r1
    2826:	09 f4       	brne	.+2      	; 0x282a <fat_get_dir_entry_of_path+0x34>
    2828:	74 c0       	rjmp	.+232    	; 0x2912 <fat_get_dir_entry_of_path+0x11c>
    282a:	fb 01       	movw	r30, r22
    282c:	80 81       	ld	r24, Z
    282e:	88 23       	and	r24, r24
    2830:	09 f4       	brne	.+2      	; 0x2834 <fat_get_dir_entry_of_path+0x3e>
    2832:	71 c0       	rjmp	.+226    	; 0x2916 <fat_get_dir_entry_of_path+0x120>
    2834:	20 97       	sbiw	r28, 0x00	; 0
    2836:	09 f4       	brne	.+2      	; 0x283a <fat_get_dir_entry_of_path+0x44>
    2838:	70 c0       	rjmp	.+224    	; 0x291a <fat_get_dir_entry_of_path+0x124>
    283a:	8f 32       	cpi	r24, 0x2F	; 47
    283c:	19 f4       	brne	.+6      	; 0x2844 <fat_get_dir_entry_of_path+0x4e>
    283e:	ff ef       	ldi	r31, 0xFF	; 255
    2840:	cf 1a       	sub	r12, r31
    2842:	df 0a       	sbc	r13, r31
    2844:	81 e3       	ldi	r24, 0x31	; 49
    2846:	fe 01       	movw	r30, r28
    2848:	11 92       	st	Z+, r1
    284a:	8a 95       	dec	r24
    284c:	e9 f7       	brne	.-6      	; 0x2848 <fat_get_dir_entry_of_path+0x52>
    284e:	80 e1       	ldi	r24, 0x10	; 16
    2850:	88 a3       	std	Y+32, r24	; 0x20
    2852:	f6 01       	movw	r30, r12
    2854:	80 81       	ld	r24, Z
    2856:	88 23       	and	r24, r24
    2858:	09 f4       	brne	.+2      	; 0x285c <fat_get_dir_entry_of_path+0x66>
    285a:	61 c0       	rjmp	.+194    	; 0x291e <fat_get_dir_entry_of_path+0x128>
    285c:	41 2c       	mov	r4, r1
    285e:	51 2c       	mov	r5, r1
    2860:	be 01       	movw	r22, r28
    2862:	c4 01       	movw	r24, r8
    2864:	0e 94 73 12 	call	0x24e6	; 0x24e6 <fat_open_dir>
    2868:	8c 01       	movw	r16, r24
    286a:	89 2b       	or	r24, r25
    286c:	09 f4       	brne	.+2      	; 0x2870 <fat_get_dir_entry_of_path+0x7a>
    286e:	59 c0       	rjmp	.+178    	; 0x2922 <fat_get_dir_entry_of_path+0x12c>
    2870:	6f e2       	ldi	r22, 0x2F	; 47
    2872:	70 e0       	ldi	r23, 0x00	; 0
    2874:	c6 01       	movw	r24, r12
    2876:	0e 94 9e 21 	call	0x433c	; 0x433c <strchr>
    287a:	00 97       	sbiw	r24, 0x00	; 0
    287c:	41 f0       	breq	.+16     	; 0x288e <fat_get_dir_entry_of_path+0x98>
    287e:	e8 2e       	mov	r14, r24
    2880:	ec 18       	sub	r14, r12
    2882:	5c 01       	movw	r10, r24
    2884:	ff ef       	ldi	r31, 0xFF	; 255
    2886:	af 1a       	sub	r10, r31
    2888:	bf 0a       	sbc	r11, r31
    288a:	f1 2c       	mov	r15, r1
    288c:	2d c0       	rjmp	.+90     	; 0x28e8 <fat_get_dir_entry_of_path+0xf2>
    288e:	f6 01       	movw	r30, r12
    2890:	01 90       	ld	r0, Z+
    2892:	00 20       	and	r0, r0
    2894:	e9 f7       	brne	.-6      	; 0x2890 <fat_get_dir_entry_of_path+0x9a>
    2896:	31 97       	sbiw	r30, 0x01	; 1
    2898:	ec 19       	sub	r30, r12
    289a:	fd 09       	sbc	r31, r13
    289c:	ee 2e       	mov	r14, r30
    289e:	56 01       	movw	r10, r12
    28a0:	ae 0e       	add	r10, r30
    28a2:	b1 1c       	adc	r11, r1
    28a4:	f2 cf       	rjmp	.-28     	; 0x288a <fat_get_dir_entry_of_path+0x94>
    28a6:	fe 01       	movw	r30, r28
    28a8:	01 90       	ld	r0, Z+
    28aa:	00 20       	and	r0, r0
    28ac:	e9 f7       	brne	.-6      	; 0x28a8 <fat_get_dir_entry_of_path+0xb2>
    28ae:	31 97       	sbiw	r30, 0x01	; 1
    28b0:	3f 01       	movw	r6, r30
    28b2:	6c 1a       	sub	r6, r28
    28b4:	7d 0a       	sbc	r7, r29
    28b6:	6e 14       	cp	r6, r14
    28b8:	7f 04       	cpc	r7, r15
    28ba:	b1 f4       	brne	.+44     	; 0x28e8 <fat_get_dir_entry_of_path+0xf2>
    28bc:	a3 01       	movw	r20, r6
    28be:	be 01       	movw	r22, r28
    28c0:	c6 01       	movw	r24, r12
    28c2:	0e 94 b2 21 	call	0x4364	; 0x4364 <strncmp>
    28c6:	89 2b       	or	r24, r25
    28c8:	79 f4       	brne	.+30     	; 0x28e8 <fat_get_dir_entry_of_path+0xf2>
    28ca:	c8 01       	movw	r24, r16
    28cc:	0e 94 b5 12 	call	0x256a	; 0x256a <fat_close_dir>
    28d0:	f6 01       	movw	r30, r12
    28d2:	e6 0d       	add	r30, r6
    28d4:	f7 1d       	adc	r31, r7
    28d6:	80 81       	ld	r24, Z
    28d8:	88 23       	and	r24, r24
    28da:	29 f1       	breq	.+74     	; 0x2926 <fat_get_dir_entry_of_path+0x130>
    28dc:	98 a1       	ldd	r25, Y+32	; 0x20
    28de:	89 2f       	mov	r24, r25
    28e0:	80 71       	andi	r24, 0x10	; 16
    28e2:	94 fd       	sbrc	r25, 4
    28e4:	08 c0       	rjmp	.+16     	; 0x28f6 <fat_get_dir_entry_of_path+0x100>
    28e6:	20 c0       	rjmp	.+64     	; 0x2928 <fat_get_dir_entry_of_path+0x132>
    28e8:	be 01       	movw	r22, r28
    28ea:	c8 01       	movw	r24, r16
    28ec:	0e 94 cc 12 	call	0x2598	; 0x2598 <fat_read_dir>
    28f0:	81 11       	cpse	r24, r1
    28f2:	d9 cf       	rjmp	.-78     	; 0x28a6 <fat_get_dir_entry_of_path+0xb0>
    28f4:	03 c0       	rjmp	.+6      	; 0x28fc <fat_get_dir_entry_of_path+0x106>
    28f6:	65 01       	movw	r12, r10
    28f8:	04 2d       	mov	r16, r4
    28fa:	15 2d       	mov	r17, r5
    28fc:	c8 01       	movw	r24, r16
    28fe:	0e 94 b5 12 	call	0x256a	; 0x256a <fat_close_dir>
    2902:	f6 01       	movw	r30, r12
    2904:	80 81       	ld	r24, Z
    2906:	81 11       	cpse	r24, r1
    2908:	ab cf       	rjmp	.-170    	; 0x2860 <fat_get_dir_entry_of_path+0x6a>
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	0d c0       	rjmp	.+26     	; 0x2928 <fat_get_dir_entry_of_path+0x132>
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	0b c0       	rjmp	.+22     	; 0x2928 <fat_get_dir_entry_of_path+0x132>
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	09 c0       	rjmp	.+18     	; 0x2928 <fat_get_dir_entry_of_path+0x132>
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	07 c0       	rjmp	.+14     	; 0x2928 <fat_get_dir_entry_of_path+0x132>
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	05 c0       	rjmp	.+10     	; 0x2928 <fat_get_dir_entry_of_path+0x132>
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	03 c0       	rjmp	.+6      	; 0x2928 <fat_get_dir_entry_of_path+0x132>
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	01 c0       	rjmp	.+2      	; 0x2928 <fat_get_dir_entry_of_path+0x132>
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	df 91       	pop	r29
    292a:	cf 91       	pop	r28
    292c:	1f 91       	pop	r17
    292e:	0f 91       	pop	r16
    2930:	ff 90       	pop	r15
    2932:	ef 90       	pop	r14
    2934:	df 90       	pop	r13
    2936:	cf 90       	pop	r12
    2938:	bf 90       	pop	r11
    293a:	af 90       	pop	r10
    293c:	9f 90       	pop	r9
    293e:	8f 90       	pop	r8
    2940:	7f 90       	pop	r7
    2942:	6f 90       	pop	r6
    2944:	5f 90       	pop	r5
    2946:	4f 90       	pop	r4
    2948:	08 95       	ret

0000294a <fat_get_fs_size>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    294a:	2f 92       	push	r2
    294c:	3f 92       	push	r3
    294e:	4f 92       	push	r4
    2950:	5f 92       	push	r5
    2952:	6f 92       	push	r6
    2954:	7f 92       	push	r7
    2956:	8f 92       	push	r8
    2958:	9f 92       	push	r9
    295a:	af 92       	push	r10
    295c:	bf 92       	push	r11
    295e:	cf 92       	push	r12
    2960:	df 92       	push	r13
    2962:	ef 92       	push	r14
    2964:	ff 92       	push	r15
    2966:	0f 93       	push	r16
    2968:	1f 93       	push	r17
    296a:	cf 93       	push	r28
    296c:	df 93       	push	r29
    if(!fs)
    296e:	00 97       	sbiw	r24, 0x00	; 0
    2970:	09 f4       	brne	.+2      	; 0x2974 <fat_get_fs_size+0x2a>
    2972:	54 c0       	rjmp	.+168    	; 0x2a1c <fat_get_fs_size+0xd2>
    2974:	ac 01       	movw	r20, r24
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    2976:	dc 01       	movw	r26, r24
    2978:	ed 91       	ld	r30, X+
    297a:	fc 91       	ld	r31, X
    297c:	11 97       	sbiw	r26, 0x01	; 1
    297e:	80 85       	ldd	r24, Z+8	; 0x08
    2980:	8b 30       	cpi	r24, 0x0B	; 11
    2982:	49 f5       	brne	.+82     	; 0x29d6 <fat_get_fs_size+0x8c>
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    2984:	52 96       	adiw	r26, 0x12	; 18
    2986:	8d 91       	ld	r24, X+
    2988:	9d 91       	ld	r25, X+
    298a:	0d 90       	ld	r0, X+
    298c:	bc 91       	ld	r27, X
    298e:	a0 2d       	mov	r26, r0
    2990:	b6 95       	lsr	r27
    2992:	a7 95       	ror	r26
    2994:	97 95       	ror	r25
    2996:	87 95       	ror	r24
    2998:	b6 95       	lsr	r27
    299a:	a7 95       	ror	r26
    299c:	97 95       	ror	r25
    299e:	87 95       	ror	r24
    29a0:	02 97       	sbiw	r24, 0x02	; 2
    29a2:	a1 09       	sbc	r26, r1
    29a4:	b1 09       	sbc	r27, r1
    29a6:	1c 01       	movw	r2, r24
    29a8:	2d 01       	movw	r4, r26
    29aa:	fa 01       	movw	r30, r20
    29ac:	00 8d       	ldd	r16, Z+24	; 0x18
    29ae:	11 8d       	ldd	r17, Z+25	; 0x19
    29b0:	a0 2e       	mov	r10, r16
    29b2:	b1 2e       	mov	r11, r17
    29b4:	c1 2c       	mov	r12, r1
    29b6:	d1 2c       	mov	r13, r1
    29b8:	e1 2c       	mov	r14, r1
    29ba:	f1 2c       	mov	r15, r1
    29bc:	00 e0       	ldi	r16, 0x00	; 0
    29be:	10 e0       	ldi	r17, 0x00	; 0
    29c0:	28 2f       	mov	r18, r24
    29c2:	33 2d       	mov	r19, r3
    29c4:	44 2d       	mov	r20, r4
    29c6:	55 2d       	mov	r21, r5
    29c8:	60 e0       	ldi	r22, 0x00	; 0
    29ca:	70 e0       	ldi	r23, 0x00	; 0
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	0e 94 cb 20 	call	0x4196	; 0x4196 <__muldi3>
    29d4:	2b c0       	rjmp	.+86     	; 0x2a2c <fat_get_fs_size+0xe2>
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
    29d6:	fa 01       	movw	r30, r20
    29d8:	82 89       	ldd	r24, Z+18	; 0x12
    29da:	93 89       	ldd	r25, Z+19	; 0x13
    29dc:	a4 89       	ldd	r26, Z+20	; 0x14
    29de:	b5 89       	ldd	r27, Z+21	; 0x15
    29e0:	b6 95       	lsr	r27
    29e2:	a7 95       	ror	r26
    29e4:	97 95       	ror	r25
    29e6:	87 95       	ror	r24
    29e8:	02 97       	sbiw	r24, 0x02	; 2
    29ea:	a1 09       	sbc	r26, r1
    29ec:	b1 09       	sbc	r27, r1
    29ee:	1c 01       	movw	r2, r24
    29f0:	2d 01       	movw	r4, r26
    29f2:	00 8d       	ldd	r16, Z+24	; 0x18
    29f4:	11 8d       	ldd	r17, Z+25	; 0x19
    29f6:	a0 2e       	mov	r10, r16
    29f8:	b1 2e       	mov	r11, r17
    29fa:	c1 2c       	mov	r12, r1
    29fc:	d1 2c       	mov	r13, r1
    29fe:	e1 2c       	mov	r14, r1
    2a00:	f1 2c       	mov	r15, r1
    2a02:	00 e0       	ldi	r16, 0x00	; 0
    2a04:	10 e0       	ldi	r17, 0x00	; 0
    2a06:	28 2f       	mov	r18, r24
    2a08:	33 2d       	mov	r19, r3
    2a0a:	44 2d       	mov	r20, r4
    2a0c:	55 2d       	mov	r21, r5
    2a0e:	60 e0       	ldi	r22, 0x00	; 0
    2a10:	70 e0       	ldi	r23, 0x00	; 0
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	0e 94 cb 20 	call	0x4196	; 0x4196 <__muldi3>
    2a1a:	08 c0       	rjmp	.+16     	; 0x2a2c <fat_get_fs_size+0xe2>
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    if(!fs)
        return 0;
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e0       	ldi	r20, 0x00	; 0
    2a22:	50 e0       	ldi	r21, 0x00	; 0
    2a24:	60 e0       	ldi	r22, 0x00	; 0
    2a26:	70 e0       	ldi	r23, 0x00	; 0
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    if(fs->partition->type == PARTITION_TYPE_FAT32)
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
}
    2a2c:	df 91       	pop	r29
    2a2e:	cf 91       	pop	r28
    2a30:	1f 91       	pop	r17
    2a32:	0f 91       	pop	r16
    2a34:	ff 90       	pop	r15
    2a36:	ef 90       	pop	r14
    2a38:	df 90       	pop	r13
    2a3a:	cf 90       	pop	r12
    2a3c:	bf 90       	pop	r11
    2a3e:	af 90       	pop	r10
    2a40:	9f 90       	pop	r9
    2a42:	8f 90       	pop	r8
    2a44:	7f 90       	pop	r7
    2a46:	6f 90       	pop	r6
    2a48:	5f 90       	pop	r5
    2a4a:	4f 90       	pop	r4
    2a4c:	3f 90       	pop	r3
    2a4e:	2f 90       	pop	r2
    2a50:	08 95       	ret

00002a52 <fat_get_fs_free>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
    2a52:	2f 92       	push	r2
    2a54:	3f 92       	push	r3
    2a56:	4f 92       	push	r4
    2a58:	5f 92       	push	r5
    2a5a:	6f 92       	push	r6
    2a5c:	7f 92       	push	r7
    2a5e:	8f 92       	push	r8
    2a60:	9f 92       	push	r9
    2a62:	af 92       	push	r10
    2a64:	bf 92       	push	r11
    2a66:	cf 92       	push	r12
    2a68:	df 92       	push	r13
    2a6a:	ef 92       	push	r14
    2a6c:	ff 92       	push	r15
    2a6e:	0f 93       	push	r16
    2a70:	1f 93       	push	r17
    2a72:	cf 93       	push	r28
    2a74:	df 93       	push	r29
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	e0 97       	sbiw	r28, 0x30	; 48
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
    if(!fs)
    2a86:	00 97       	sbiw	r24, 0x00	; 0
    2a88:	09 f4       	brne	.+2      	; 0x2a8c <fat_get_fs_free+0x3a>
    2a8a:	b9 c0       	rjmp	.+370    	; 0x2bfe <fat_get_fs_free+0x1ac>
    2a8c:	98 ab       	std	Y+48, r25	; 0x30
    2a8e:	8f a7       	std	Y+47, r24	; 0x2f
        return 0;

    uint8_t fat[32];
    struct fat_usage_count_callback_arg count_arg;
    count_arg.cluster_count = 0;
    2a90:	19 a2       	std	Y+33, r1	; 0x21
    2a92:	1a a2       	std	Y+34, r1	; 0x22
    2a94:	1b a2       	std	Y+35, r1	; 0x23
    2a96:	1c a2       	std	Y+36, r1	; 0x24
    count_arg.buffer_size = sizeof(fat);
    2a98:	80 e2       	ldi	r24, 0x20	; 32
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	9e a3       	std	Y+38, r25	; 0x26
    2a9e:	8d a3       	std	Y+37, r24	; 0x25

    offset_t fat_offset = fs->header.fat_offset;
    2aa0:	af a5       	ldd	r26, Y+47	; 0x2f
    2aa2:	b8 a9       	ldd	r27, Y+48	; 0x30
    2aa4:	1a 96       	adiw	r26, 0x0a	; 10
    2aa6:	bc 91       	ld	r27, X
    2aa8:	bf a3       	std	Y+39, r27	; 0x27
    2aaa:	ef a5       	ldd	r30, Y+47	; 0x2f
    2aac:	f8 a9       	ldd	r31, Y+48	; 0x30
    2aae:	f3 85       	ldd	r31, Z+11	; 0x0b
    2ab0:	f8 a7       	std	Y+40, r31	; 0x28
    2ab2:	af a5       	ldd	r26, Y+47	; 0x2f
    2ab4:	b8 a9       	ldd	r27, Y+48	; 0x30
    2ab6:	1c 96       	adiw	r26, 0x0c	; 12
    2ab8:	bc 91       	ld	r27, X
    2aba:	b9 a7       	std	Y+41, r27	; 0x29
    2abc:	ef a5       	ldd	r30, Y+47	; 0x2f
    2abe:	f8 a9       	ldd	r31, Y+48	; 0x30
    2ac0:	f5 85       	ldd	r31, Z+13	; 0x0d
    2ac2:	fa a7       	std	Y+42, r31	; 0x2a
    2ac4:	af a5       	ldd	r26, Y+47	; 0x2f
    2ac6:	b8 a9       	ldd	r27, Y+48	; 0x30
    2ac8:	1e 96       	adiw	r26, 0x0e	; 14
    2aca:	bc 91       	ld	r27, X
    2acc:	bb a7       	std	Y+43, r27	; 0x2b
    2ace:	ef a5       	ldd	r30, Y+47	; 0x2f
    2ad0:	f8 a9       	ldd	r31, Y+48	; 0x30
    2ad2:	f7 85       	ldd	r31, Z+15	; 0x0f
    2ad4:	fc a7       	std	Y+44, r31	; 0x2c
    2ad6:	af a5       	ldd	r26, Y+47	; 0x2f
    2ad8:	b8 a9       	ldd	r27, Y+48	; 0x30
    2ada:	50 96       	adiw	r26, 0x10	; 16
    2adc:	bc 91       	ld	r27, X
    2ade:	bd a7       	std	Y+45, r27	; 0x2d
    2ae0:	ef a5       	ldd	r30, Y+47	; 0x2f
    2ae2:	f8 a9       	ldd	r31, Y+48	; 0x30
    2ae4:	f1 89       	ldd	r31, Z+17	; 0x11
    2ae6:	fe a7       	std	Y+46, r31	; 0x2e
    uint32_t fat_size = fs->header.fat_size;
    2ae8:	af a5       	ldd	r26, Y+47	; 0x2f
    2aea:	b8 a9       	ldd	r27, Y+48	; 0x30
    2aec:	52 96       	adiw	r26, 0x12	; 18
    2aee:	2d 90       	ld	r2, X+
    2af0:	3d 90       	ld	r3, X+
    2af2:	4d 90       	ld	r4, X+
    2af4:	5c 90       	ld	r5, X
    2af6:	55 97       	sbiw	r26, 0x15	; 21
    while(fat_size > 0)
    2af8:	21 14       	cp	r2, r1
    2afa:	31 04       	cpc	r3, r1
    2afc:	41 04       	cpc	r4, r1
    2afe:	51 04       	cpc	r5, r1
    2b00:	09 f4       	brne	.+2      	; 0x2b04 <fat_get_fs_free+0xb2>
    2b02:	60 c0       	rjmp	.+192    	; 0x2bc4 <fat_get_fs_free+0x172>
    {
        uintptr_t length = UINTPTR_MAX - 1;
        if(fat_size < length)
            length = fat_size;

        if(!fs->partition->device_read_interval(fat_offset,
    2b04:	32 01       	movw	r6, r4
    2b06:	21 01       	movw	r4, r2
    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    {
        uintptr_t length = UINTPTR_MAX - 1;
        if(fat_size < length)
    2b08:	be ef       	ldi	r27, 0xFE	; 254
    2b0a:	4b 16       	cp	r4, r27
    2b0c:	bf ef       	ldi	r27, 0xFF	; 255
    2b0e:	5b 06       	cpc	r5, r27
    2b10:	61 04       	cpc	r6, r1
    2b12:	71 04       	cpc	r7, r1
    2b14:	10 f4       	brcc	.+4      	; 0x2b1a <fat_get_fs_free+0xc8>
            length = fat_size;
    2b16:	12 01       	movw	r2, r4
    2b18:	06 c0       	rjmp	.+12     	; 0x2b26 <fat_get_fs_free+0xd4>

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    {
        uintptr_t length = UINTPTR_MAX - 1;
    2b1a:	0f 2e       	mov	r0, r31
    2b1c:	fe ef       	ldi	r31, 0xFE	; 254
    2b1e:	2f 2e       	mov	r2, r31
    2b20:	f0 2d       	mov	r31, r0
    2b22:	33 24       	eor	r3, r3
    2b24:	3a 94       	dec	r3
        if(fat_size < length)
            length = fat_size;

        if(!fs->partition->device_read_interval(fat_offset,
    2b26:	ef a5       	ldd	r30, Y+47	; 0x2f
    2b28:	f8 a9       	ldd	r31, Y+48	; 0x30
    2b2a:	a0 81       	ld	r26, Z
    2b2c:	b1 81       	ldd	r27, Z+1	; 0x01
    2b2e:	12 96       	adiw	r26, 0x02	; 2
    2b30:	ed 91       	ld	r30, X+
    2b32:	fc 91       	ld	r31, X
    2b34:	13 97       	sbiw	r26, 0x03	; 3
    2b36:	18 96       	adiw	r26, 0x08	; 8
    2b38:	8c 91       	ld	r24, X
    2b3a:	86 30       	cpi	r24, 0x06	; 6
    2b3c:	31 f0       	breq	.+12     	; 0x2b4a <fat_get_fs_free+0xf8>
    2b3e:	83 e4       	ldi	r24, 0x43	; 67
    2b40:	98 e0       	ldi	r25, 0x08	; 8
    2b42:	a8 2e       	mov	r10, r24
    2b44:	dc 01       	movw	r26, r24
    2b46:	bb 2e       	mov	r11, r27
    2b48:	05 c0       	rjmp	.+10     	; 0x2b54 <fat_get_fs_free+0x102>
    2b4a:	85 e9       	ldi	r24, 0x95	; 149
    2b4c:	96 e0       	ldi	r25, 0x06	; 6
    2b4e:	a8 2e       	mov	r10, r24
    2b50:	dc 01       	movw	r26, r24
    2b52:	bb 2e       	mov	r11, r27
    2b54:	ce 01       	movw	r24, r28
    2b56:	81 96       	adiw	r24, 0x21	; 33
    2b58:	4c 01       	movw	r8, r24
    2b5a:	61 01       	movw	r12, r2
    2b5c:	68 94       	set
    2b5e:	ee 24       	eor	r14, r14
    2b60:	e5 f8       	bld	r14, 5
    2b62:	f1 2c       	mov	r15, r1
    2b64:	8e 01       	movw	r16, r28
    2b66:	0f 5f       	subi	r16, 0xFF	; 255
    2b68:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6a:	2f a1       	ldd	r18, Y+39	; 0x27
    2b6c:	38 a5       	ldd	r19, Y+40	; 0x28
    2b6e:	49 a5       	ldd	r20, Y+41	; 0x29
    2b70:	5a a5       	ldd	r21, Y+42	; 0x2a
    2b72:	6b a5       	ldd	r22, Y+43	; 0x2b
    2b74:	7c a5       	ldd	r23, Y+44	; 0x2c
    2b76:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b78:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b7a:	09 95       	icall
    2b7c:	88 23       	and	r24, r24
    2b7e:	09 f4       	brne	.+2      	; 0x2b82 <fat_get_fs_free+0x130>
    2b80:	47 c0       	rjmp	.+142    	; 0x2c10 <fat_get_fs_free+0x1be>
                                                &count_arg
                                               )
          )
            return 0;

        fat_offset += length;
    2b82:	41 01       	movw	r8, r2
    2b84:	22 2d       	mov	r18, r2
    2b86:	39 2d       	mov	r19, r9
    2b88:	40 e0       	ldi	r20, 0x00	; 0
    2b8a:	50 e0       	ldi	r21, 0x00	; 0
    2b8c:	60 e0       	ldi	r22, 0x00	; 0
    2b8e:	70 e0       	ldi	r23, 0x00	; 0
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	af a0       	ldd	r10, Y+39	; 0x27
    2b96:	b8 a4       	ldd	r11, Y+40	; 0x28
    2b98:	c9 a4       	ldd	r12, Y+41	; 0x29
    2b9a:	da a4       	ldd	r13, Y+42	; 0x2a
    2b9c:	eb a4       	ldd	r14, Y+43	; 0x2b
    2b9e:	fc a4       	ldd	r15, Y+44	; 0x2c
    2ba0:	0d a5       	ldd	r16, Y+45	; 0x2d
    2ba2:	1e a5       	ldd	r17, Y+46	; 0x2e
    2ba4:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
    2ba8:	2f a3       	std	Y+39, r18	; 0x27
    2baa:	38 a7       	std	Y+40, r19	; 0x28
    2bac:	49 a7       	std	Y+41, r20	; 0x29
    2bae:	5a a7       	std	Y+42, r21	; 0x2a
    2bb0:	6b a7       	std	Y+43, r22	; 0x2b
    2bb2:	7c a7       	std	Y+44, r23	; 0x2c
    2bb4:	8d a7       	std	Y+45, r24	; 0x2d
    2bb6:	9e a7       	std	Y+46, r25	; 0x2e
        fat_size -= length;
    2bb8:	42 18       	sub	r4, r2
    2bba:	53 08       	sbc	r5, r3
    2bbc:	61 08       	sbc	r6, r1
    2bbe:	71 08       	sbc	r7, r1
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    2bc0:	09 f0       	breq	.+2      	; 0x2bc4 <fat_get_fs_free+0x172>
    2bc2:	a2 cf       	rjmp	.-188    	; 0x2b08 <fat_get_fs_free+0xb6>

        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
    2bc4:	af a5       	ldd	r26, Y+47	; 0x2f
    2bc6:	b8 a9       	ldd	r27, Y+48	; 0x30
    2bc8:	58 96       	adiw	r26, 0x18	; 24
    2bca:	2d 90       	ld	r2, X+
    2bcc:	3c 90       	ld	r3, X
    2bce:	59 97       	sbiw	r26, 0x19	; 25
    2bd0:	09 a1       	ldd	r16, Y+33	; 0x21
    2bd2:	1a a1       	ldd	r17, Y+34	; 0x22
    2bd4:	2b a1       	ldd	r18, Y+35	; 0x23
    2bd6:	3c a1       	ldd	r19, Y+36	; 0x24
    2bd8:	a0 2e       	mov	r10, r16
    2bda:	b1 2e       	mov	r11, r17
    2bdc:	c2 2e       	mov	r12, r18
    2bde:	d3 2e       	mov	r13, r19
    2be0:	e1 2c       	mov	r14, r1
    2be2:	f1 2c       	mov	r15, r1
    2be4:	00 e0       	ldi	r16, 0x00	; 0
    2be6:	10 e0       	ldi	r17, 0x00	; 0
    2be8:	22 2d       	mov	r18, r2
    2bea:	33 2d       	mov	r19, r3
    2bec:	40 e0       	ldi	r20, 0x00	; 0
    2bee:	50 e0       	ldi	r21, 0x00	; 0
    2bf0:	60 e0       	ldi	r22, 0x00	; 0
    2bf2:	70 e0       	ldi	r23, 0x00	; 0
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	0e 94 cb 20 	call	0x4196	; 0x4196 <__muldi3>
    2bfc:	11 c0       	rjmp	.+34     	; 0x2c20 <fat_get_fs_free+0x1ce>
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
    if(!fs)
        return 0;
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	40 e0       	ldi	r20, 0x00	; 0
    2c04:	50 e0       	ldi	r21, 0x00	; 0
    2c06:	60 e0       	ldi	r22, 0x00	; 0
    2c08:	70 e0       	ldi	r23, 0x00	; 0
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	08 c0       	rjmp	.+16     	; 0x2c20 <fat_get_fs_free+0x1ce>
                                                fat_get_fs_free_16_callback,
#endif
                                                &count_arg
                                               )
          )
            return 0;
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	40 e0       	ldi	r20, 0x00	; 0
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	60 e0       	ldi	r22, 0x00	; 0
    2c1a:	70 e0       	ldi	r23, 0x00	; 0
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
}
    2c20:	e0 96       	adiw	r28, 0x30	; 48
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	f8 94       	cli
    2c26:	de bf       	out	0x3e, r29	; 62
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	cd bf       	out	0x3d, r28	; 61
    2c2c:	df 91       	pop	r29
    2c2e:	cf 91       	pop	r28
    2c30:	1f 91       	pop	r17
    2c32:	0f 91       	pop	r16
    2c34:	ff 90       	pop	r15
    2c36:	ef 90       	pop	r14
    2c38:	df 90       	pop	r13
    2c3a:	cf 90       	pop	r12
    2c3c:	bf 90       	pop	r11
    2c3e:	af 90       	pop	r10
    2c40:	9f 90       	pop	r9
    2c42:	8f 90       	pop	r8
    2c44:	7f 90       	pop	r7
    2c46:	6f 90       	pop	r6
    2c48:	5f 90       	pop	r5
    2c4a:	4f 90       	pop	r4
    2c4c:	3f 90       	pop	r3
    2c4e:	2f 90       	pop	r2
    2c50:	08 95       	ret

00002c52 <main>:
static struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name); 
static uint8_t print_disk_info(const struct fat_fs_struct* fs);


int main()
{
    2c52:	9f 92       	push	r9
    2c54:	af 92       	push	r10
    2c56:	bf 92       	push	r11
    2c58:	cf 92       	push	r12
    2c5a:	df 92       	push	r13
    2c5c:	ef 92       	push	r14
    2c5e:	ff 92       	push	r15
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
    2c6c:	c4 57       	subi	r28, 0x74	; 116
    2c6e:	d1 09       	sbc	r29, r1
    2c70:	0f b6       	in	r0, 0x3f	; 63
    2c72:	f8 94       	cli
    2c74:	de bf       	out	0x3e, r29	; 62
    2c76:	0f be       	out	0x3f, r0	; 63
    2c78:	cd bf       	out	0x3d, r28	; 61
    set_sleep_mode(SLEEP_MODE_IDLE);
    2c7a:	83 b7       	in	r24, 0x33	; 51
    2c7c:	81 7f       	andi	r24, 0xF1	; 241
    2c7e:	83 bf       	out	0x33, r24	; 51
	uart_init();
    2c80:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <uart_init>
	//uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
	sei();
    2c84:	78 94       	sei
            //uart_putc('\n');
            //offset += 512;
        }
        fat_close_file(fd);*/

		char file2[] = "testwrite.txt";
    2c86:	0f 2e       	mov	r0, r31
    2c88:	fe e0       	ldi	r31, 0x0E	; 14
    2c8a:	9f 2e       	mov	r9, r31
    2c8c:	f0 2d       	mov	r31, r0
	//uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
	sei();

	 while(1)
    {
		uart_puts_p(PSTR("going into init\n"));
    2c8e:	83 eb       	ldi	r24, 0xB3	; 179
    2c90:	91 e0       	ldi	r25, 0x01	; 1
    2c92:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
        /* setup sd card slot */
        if(!sd_raw_init())
    2c96:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <sd_raw_init>
    2c9a:	81 11       	cpse	r24, r1
    2c9c:	04 c0       	rjmp	.+8      	; 0x2ca6 <main+0x54>
        {
        	uart_puts_p(PSTR("MMC/SD initialization failed\n"));
    2c9e:	85 e9       	ldi	r24, 0x95	; 149
    2ca0:	91 e0       	ldi	r25, 0x01	; 1
    2ca2:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
        }
        struct partition_struct* partition = partition_open(sd_raw_read,
    2ca6:	00 e0       	ldi	r16, 0x00	; 0
    2ca8:	2b e3       	ldi	r18, 0x3B	; 59
    2caa:	3d e1       	ldi	r19, 0x1D	; 29
    2cac:	41 ef       	ldi	r20, 0xF1	; 241
    2cae:	5b e1       	ldi	r21, 0x1B	; 27
    2cb0:	61 e5       	ldi	r22, 0x51	; 81
    2cb2:	7b e1       	ldi	r23, 0x1B	; 27
    2cb4:	8e e1       	ldi	r24, 0x1E	; 30
    2cb6:	99 e1       	ldi	r25, 0x19	; 25
    2cb8:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <partition_open>
    2cbc:	5c 01       	movw	r10, r24
                                                            sd_raw_read_interval,
                                                            sd_raw_write,
                                                            sd_raw_write_interval,
                                                            0
                                                           );
        if(!partition)
    2cbe:	89 2b       	or	r24, r25
    2cc0:	91 f4       	brne	.+36     	; 0x2ce6 <main+0x94>
        {
            /* If the partition did not open, assume the storage device
             * is a "superfloppy", i.e. has no MBR.
             */
            partition = partition_open(sd_raw_read,
    2cc2:	0f ef       	ldi	r16, 0xFF	; 255
    2cc4:	2b e3       	ldi	r18, 0x3B	; 59
    2cc6:	3d e1       	ldi	r19, 0x1D	; 29
    2cc8:	41 ef       	ldi	r20, 0xF1	; 241
    2cca:	5b e1       	ldi	r21, 0x1B	; 27
    2ccc:	61 e5       	ldi	r22, 0x51	; 81
    2cce:	7b e1       	ldi	r23, 0x1B	; 27
    2cd0:	8e e1       	ldi	r24, 0x1E	; 30
    2cd2:	99 e1       	ldi	r25, 0x19	; 25
    2cd4:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <partition_open>
    2cd8:	5c 01       	movw	r10, r24
                                       sd_raw_read_interval,
                                       sd_raw_write,
                                       sd_raw_write_interval,
                                       -1
                                      );
            if(!partition)
    2cda:	89 2b       	or	r24, r25
    2cdc:	21 f4       	brne	.+8      	; 0x2ce6 <main+0x94>
            {
                uart_puts_p(PSTR("opening partition failed\n"));
    2cde:	8b e7       	ldi	r24, 0x7B	; 123
    2ce0:	91 e0       	ldi	r25, 0x01	; 1
    2ce2:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
            }
        }

        /* open file system */
        struct fat_fs_struct* fs = fat_open(partition);
    2ce6:	c5 01       	movw	r24, r10
    2ce8:	0e 94 26 0a 	call	0x144c	; 0x144c <fat_open>
    2cec:	6c 01       	movw	r12, r24
        if(!fs)
    2cee:	00 97       	sbiw	r24, 0x00	; 0
    2cf0:	09 f0       	breq	.+2      	; 0x2cf4 <main+0xa2>
    2cf2:	3b c1       	rjmp	.+630    	; 0x2f6a <main+0x318>
        {
        	uart_puts_p(PSTR("opening filesystem failed\n"));
    2cf4:	80 e6       	ldi	r24, 0x60	; 96
    2cf6:	91 e0       	ldi	r25, 0x01	; 1
    2cf8:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
        }

        /* open root directory */
        struct fat_dir_entry_struct directory;
        fat_get_dir_entry_of_path(fs, "/", &directory);
    2cfc:	ae 01       	movw	r20, r28
    2cfe:	4e 5c       	subi	r20, 0xCE	; 206
    2d00:	5f 4f       	sbci	r21, 0xFF	; 255
    2d02:	6d e0       	ldi	r22, 0x0D	; 13
    2d04:	71 e0       	ldi	r23, 0x01	; 1
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <fat_get_dir_entry_of_path>

        struct fat_dir_struct* dd = fat_open_dir(fs, &directory);
    2d0e:	be 01       	movw	r22, r28
    2d10:	6e 5c       	subi	r22, 0xCE	; 206
    2d12:	7f 4f       	sbci	r23, 0xFF	; 255
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	0e 94 73 12 	call	0x24e6	; 0x24e6 <fat_open_dir>
    2d1c:	7c 01       	movw	r14, r24
        if(!dd)
    2d1e:	89 2b       	or	r24, r25
    2d20:	09 f0       	breq	.+2      	; 0x2d24 <main+0xd2>
    2d22:	ae c0       	rjmp	.+348    	; 0x2e80 <main+0x22e>
    2d24:	38 c1       	rjmp	.+624    	; 0x2f96 <main+0x344>
{
    if(!fs)
        return 0;

    struct sd_raw_info disk_info;
    if(!sd_raw_get_info(&disk_info))
    2d26:	ce 01       	movw	r24, r28
    2d28:	01 96       	adiw	r24, 0x01	; 1
    2d2a:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <sd_raw_get_info>
    2d2e:	88 23       	and	r24, r24
    2d30:	09 f4       	brne	.+2      	; 0x2d34 <main+0xe2>
    2d32:	a6 c0       	rjmp	.+332    	; 0x2e80 <main+0x22e>
        return 0;

    uart_puts_p(PSTR("manuf:  0x")); uart_putc_hex(disk_info.manufacturer); uart_putc('\n');
    2d34:	86 ee       	ldi	r24, 0xE6	; 230
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <uart_putc_hex>
    2d42:	8a e0       	ldi	r24, 0x0A	; 10
    2d44:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    uart_puts_p(PSTR("oem:    ")); uart_puts((char*) disk_info.oem); uart_putc('\n');
    2d48:	8d ed       	ldi	r24, 0xDD	; 221
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
    2d50:	ce 01       	movw	r24, r28
    2d52:	02 96       	adiw	r24, 0x02	; 2
    2d54:	0e 94 2f 20 	call	0x405e	; 0x405e <uart_puts>
    2d58:	8a e0       	ldi	r24, 0x0A	; 10
    2d5a:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    uart_puts_p(PSTR("prod:   ")); uart_puts((char*) disk_info.product); uart_putc('\n');
    2d5e:	84 ed       	ldi	r24, 0xD4	; 212
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
    2d66:	ce 01       	movw	r24, r28
    2d68:	05 96       	adiw	r24, 0x05	; 5
    2d6a:	0e 94 2f 20 	call	0x405e	; 0x405e <uart_puts>
    2d6e:	8a e0       	ldi	r24, 0x0A	; 10
    2d70:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    uart_puts_p(PSTR("rev:    ")); uart_putc_hex(disk_info.revision); uart_putc('\n');
    2d74:	8b ec       	ldi	r24, 0xCB	; 203
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
    2d7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d7e:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <uart_putc_hex>
    2d82:	8a e0       	ldi	r24, 0x0A	; 10
    2d84:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    uart_puts_p(PSTR("serial: 0x")); uart_putdw_hex(disk_info.serial); uart_putc('\n');
    2d88:	80 ec       	ldi	r24, 0xC0	; 192
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
    2d90:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d92:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d94:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d96:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d98:	0e 94 76 1f 	call	0x3eec	; 0x3eec <uart_putdw_hex>
    2d9c:	8a e0       	ldi	r24, 0x0A	; 10
    2d9e:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    uart_puts_p(PSTR("date:   ")); uart_putw_dec(disk_info.manufacturing_month); uart_putc('/');
    2da2:	87 eb       	ldi	r24, 0xB7	; 183
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
    2daa:	89 89       	ldd	r24, Y+17	; 0x11
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <uart_putw_dec>
    2db2:	8f e2       	ldi	r24, 0x2F	; 47
    2db4:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
                                   uart_putw_dec(disk_info.manufacturing_year); uart_putc('\n');
    2db8:	88 89       	ldd	r24, Y+16	; 0x10
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <uart_putw_dec>
    2dc0:	8a e0       	ldi	r24, 0x0A	; 10
    2dc2:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    uart_puts_p(PSTR("size:   ")); uart_putdw_dec(disk_info.capacity / 1024 / 1024); uart_puts_p(PSTR("MB\n"));
    2dc6:	8e ea       	ldi	r24, 0xAE	; 174
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
    2dce:	2a 89       	ldd	r18, Y+18	; 0x12
    2dd0:	3b 89       	ldd	r19, Y+19	; 0x13
    2dd2:	4c 89       	ldd	r20, Y+20	; 0x14
    2dd4:	5d 89       	ldd	r21, Y+21	; 0x15
    2dd6:	6e 89       	ldd	r22, Y+22	; 0x16
    2dd8:	7f 89       	ldd	r23, Y+23	; 0x17
    2dda:	88 8d       	ldd	r24, Y+24	; 0x18
    2ddc:	99 8d       	ldd	r25, Y+25	; 0x19
    2dde:	04 e1       	ldi	r16, 0x14	; 20
    2de0:	0e 94 3f 21 	call	0x427e	; 0x427e <__lshrdi3>
    2de4:	62 2f       	mov	r22, r18
    2de6:	73 2f       	mov	r23, r19
    2de8:	84 2f       	mov	r24, r20
    2dea:	95 2f       	mov	r25, r21
    2dec:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <uart_putdw_dec>
    2df0:	8a ea       	ldi	r24, 0xAA	; 170
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
    uart_puts_p(PSTR("copy:   ")); uart_putw_dec(disk_info.flag_copy); uart_putc('\n');
    2df8:	81 ea       	ldi	r24, 0xA1	; 161
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
    2e00:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <uart_putw_dec>
    2e08:	8a e0       	ldi	r24, 0x0A	; 10
    2e0a:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    uart_puts_p(PSTR("wr.pr.: ")); uart_putw_dec(disk_info.flag_write_protect_temp); uart_putc('/');
    2e0e:	88 e9       	ldi	r24, 0x98	; 152
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
    2e16:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <uart_putw_dec>
    2e1e:	8f e2       	ldi	r24, 0x2F	; 47
    2e20:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
                                   uart_putw_dec(disk_info.flag_write_protect); uart_putc('\n');
    2e24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <uart_putw_dec>
    2e2c:	8a e0       	ldi	r24, 0x0A	; 10
    2e2e:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    uart_puts_p(PSTR("format: ")); uart_putw_dec(disk_info.format); uart_putc('\n');
    2e32:	8f e8       	ldi	r24, 0x8F	; 143
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
    2e3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <uart_putw_dec>
    2e42:	8a e0       	ldi	r24, 0x0A	; 10
    2e44:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    uart_puts_p(PSTR("free:   ")); uart_putdw_dec(fat_get_fs_free(fs)); uart_putc('/');
    2e48:	86 e8       	ldi	r24, 0x86	; 134
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
    2e50:	c6 01       	movw	r24, r12
    2e52:	0e 94 29 15 	call	0x2a52	; 0x2a52 <fat_get_fs_free>
    2e56:	62 2f       	mov	r22, r18
    2e58:	73 2f       	mov	r23, r19
    2e5a:	84 2f       	mov	r24, r20
    2e5c:	95 2f       	mov	r25, r21
    2e5e:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <uart_putdw_dec>
    2e62:	8f e2       	ldi	r24, 0x2F	; 47
    2e64:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
                                   uart_putdw_dec(fat_get_fs_size(fs)); uart_putc('\n');
    2e68:	c6 01       	movw	r24, r12
    2e6a:	0e 94 a5 14 	call	0x294a	; 0x294a <fat_get_fs_size>
    2e6e:	62 2f       	mov	r22, r18
    2e70:	73 2f       	mov	r23, r19
    2e72:	84 2f       	mov	r24, r20
    2e74:	95 2f       	mov	r25, r21
    2e76:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <uart_putdw_dec>
    2e7a:	8a e0       	ldi	r24, 0x0A	; 10
    2e7c:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
            //uart_putc('\n');
            //offset += 512;
        }
        fat_close_file(fd);*/

		char file2[] = "testwrite.txt";
    2e80:	ef e0       	ldi	r30, 0x0F	; 15
    2e82:	f1 e0       	ldi	r31, 0x01	; 1
    2e84:	de 01       	movw	r26, r28
    2e86:	ad 59       	subi	r26, 0x9D	; 157
    2e88:	bf 4f       	sbci	r27, 0xFF	; 255
    2e8a:	89 2d       	mov	r24, r9
    2e8c:	01 90       	ld	r0, Z+
    2e8e:	0d 92       	st	X+, r0
    2e90:	8a 95       	dec	r24
    2e92:	e1 f7       	brne	.-8      	; 0x2e8c <main+0x23a>
    2e94:	16 c0       	rjmp	.+44     	; 0x2ec2 <main+0x270>

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    while(fat_read_dir(dd, dir_entry))
    {
        if(strcmp(dir_entry->long_name, name) == 0)
    2e96:	be 01       	movw	r22, r28
    2e98:	6d 59       	subi	r22, 0x9D	; 157
    2e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e9c:	ce 01       	movw	r24, r28
    2e9e:	01 96       	adiw	r24, 0x01	; 1
    2ea0:	0e 94 a9 21 	call	0x4352	; 0x4352 <strcmp>
    2ea4:	89 2b       	or	r24, r25
    2ea6:	69 f4       	brne	.+26     	; 0x2ec2 <main+0x270>
        {
            fat_reset_dir(dd);
    2ea8:	c7 01       	movw	r24, r14
    2eaa:	0e 94 bb 12 	call	0x2576	; 0x2576 <fat_reset_dir>
{
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
        return 0;

    return fat_open_file(fs, &file_entry);
    2eae:	be 01       	movw	r22, r28
    2eb0:	6f 5f       	subi	r22, 0xFF	; 255
    2eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2eb4:	c6 01       	movw	r24, r12
    2eb6:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <fat_open_file>
    2eba:	8c 01       	movw	r16, r24
            continue;
        }*/

        struct fat_file_struct* fd = open_file_in_dir(fs, dd, file2);

        if(fd == 0)
    2ebc:	89 2b       	or	r24, r25
    2ebe:	71 f4       	brne	.+28     	; 0x2edc <main+0x28a>
    2ec0:	09 c0       	rjmp	.+18     	; 0x2ed4 <main+0x282>
    return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    while(fat_read_dir(dd, dir_entry))
    2ec2:	be 01       	movw	r22, r28
    2ec4:	6f 5f       	subi	r22, 0xFF	; 255
    2ec6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec8:	c7 01       	movw	r24, r14
    2eca:	0e 94 cc 12 	call	0x2598	; 0x2598 <fat_read_dir>
    2ece:	81 11       	cpse	r24, r1
    2ed0:	e2 cf       	rjmp	.-60     	; 0x2e96 <main+0x244>
    2ed2:	66 c0       	rjmp	.+204    	; 0x2fa0 <main+0x34e>
        }*/

        struct fat_file_struct* fd = open_file_in_dir(fs, dd, file2);

        if(fd == 0)
            uart_puts_p(PSTR("open error\n"));
    2ed4:	85 e3       	ldi	r24, 0x35	; 53
    2ed6:	91 e0       	ldi	r25, 0x01	; 1
    2ed8:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>

        int32_t offset2 = 0;
    2edc:	e5 96       	adiw	r28, 0x35	; 53
    2ede:	1c ae       	std	Y+60, r1	; 0x3c
    2ee0:	1d ae       	std	Y+61, r1	; 0x3d
    2ee2:	1e ae       	std	Y+62, r1	; 0x3e
    2ee4:	1f ae       	std	Y+63, r1	; 0x3f
    2ee6:	e5 97       	sbiw	r28, 0x35	; 53

        if(!fat_seek_file(fd, &offset2, FAT_SEEK_END))
    2ee8:	42 e0       	ldi	r20, 0x02	; 2
    2eea:	be 01       	movw	r22, r28
    2eec:	6f 58       	subi	r22, 0x8F	; 143
    2eee:	7f 4f       	sbci	r23, 0xFF	; 255
    2ef0:	c8 01       	movw	r24, r16
    2ef2:	0e 94 00 12 	call	0x2400	; 0x2400 <fat_seek_file>
    2ef6:	81 11       	cpse	r24, r1
    2ef8:	10 c0       	rjmp	.+32     	; 0x2f1a <main+0x2c8>
        {
            uart_puts_p(PSTR("error seeking on "));
    2efa:	83 e2       	ldi	r24, 0x23	; 35
    2efc:	91 e0       	ldi	r25, 0x01	; 1
    2efe:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
            uart_puts(file2);
    2f02:	ce 01       	movw	r24, r28
    2f04:	8d 59       	subi	r24, 0x9D	; 157
    2f06:	9f 4f       	sbci	r25, 0xFF	; 255
    2f08:	0e 94 2f 20 	call	0x405e	; 0x405e <uart_puts>
            uart_putc('\n');
    2f0c:	8a e0       	ldi	r24, 0x0A	; 10
    2f0e:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>

            fat_close_file(fd);
    2f12:	c8 01       	movw	r24, r16
    2f14:	0e 94 66 0d 	call	0x1acc	; 0x1acc <fat_close_file>
    2f18:	ba ce       	rjmp	.-652    	; 0x2c8e <main+0x3c>
            continue;
        }
        char testwrite[] = "Thisistext";
    2f1a:	8b e0       	ldi	r24, 0x0B	; 11
    2f1c:	ed e1       	ldi	r30, 0x1D	; 29
    2f1e:	f1 e0       	ldi	r31, 0x01	; 1
    2f20:	de 01       	movw	r26, r28
    2f22:	11 96       	adiw	r26, 0x01	; 1
    2f24:	01 90       	ld	r0, Z+
    2f26:	0d 92       	st	X+, r0
    2f28:	8a 95       	dec	r24
    2f2a:	e1 f7       	brne	.-8      	; 0x2f24 <main+0x2d2>
        //uart_puts(testwrite); uart_putc('\n');
        uart_puts_p(PSTR("writing happens now\n"));
    2f2c:	8e e0       	ldi	r24, 0x0E	; 14
    2f2e:	91 e0       	ldi	r25, 0x01	; 1
    2f30:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
        if(fat_write_file(fd, (uint8_t*) testwrite, (uint8_t)sizeof(testwrite)) != (uint8_t)sizeof(testwrite))
    2f34:	4b e0       	ldi	r20, 0x0B	; 11
    2f36:	50 e0       	ldi	r21, 0x00	; 0
    2f38:	be 01       	movw	r22, r28
    2f3a:	6f 5f       	subi	r22, 0xFF	; 255
    2f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3e:	c8 01       	movw	r24, r16
    2f40:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <fat_write_file>
    2f44:	0b 97       	sbiw	r24, 0x0b	; 11
    2f46:	79 f5       	brne	.+94     	; 0x2fa6 <main+0x354>
        {
            uart_puts_p(PSTR("error writing to file\n"));
            break;
        }
        fat_close_file(fd);
    2f48:	c8 01       	movw	r24, r16
    2f4a:	0e 94 66 0d 	call	0x1acc	; 0x1acc <fat_close_file>

		/* close directory */
		fat_close_dir(dd);
    2f4e:	c7 01       	movw	r24, r14
    2f50:	0e 94 b5 12 	call	0x256a	; 0x256a <fat_close_dir>

		/* close file system */
		fat_close(fs);
    2f54:	c6 01       	movw	r24, r12
    2f56:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <fat_close>

		/* close partition */
		partition_close(partition);
    2f5a:	c5 01       	movw	r24, r10
    2f5c:	0e 94 9c 18 	call	0x3138	; 0x3138 <partition_close>
		uart_puts_p(PSTR("done\n"));
    2f60:	81 ef       	ldi	r24, 0xF1	; 241
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
		while(1){
			continue;
		}
    2f68:	ff cf       	rjmp	.-2      	; 0x2f68 <main+0x316>
        	uart_puts_p(PSTR("opening filesystem failed\n"));
        }

        /* open root directory */
        struct fat_dir_entry_struct directory;
        fat_get_dir_entry_of_path(fs, "/", &directory);
    2f6a:	ae 01       	movw	r20, r28
    2f6c:	4e 5c       	subi	r20, 0xCE	; 206
    2f6e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f70:	6d e0       	ldi	r22, 0x0D	; 13
    2f72:	71 e0       	ldi	r23, 0x01	; 1
    2f74:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <fat_get_dir_entry_of_path>

        struct fat_dir_struct* dd = fat_open_dir(fs, &directory);
    2f78:	be 01       	movw	r22, r28
    2f7a:	6e 5c       	subi	r22, 0xCE	; 206
    2f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7e:	c6 01       	movw	r24, r12
    2f80:	0e 94 73 12 	call	0x24e6	; 0x24e6 <fat_open_dir>
    2f84:	7c 01       	movw	r14, r24
        if(!dd)
    2f86:	89 2b       	or	r24, r25
    2f88:	09 f0       	breq	.+2      	; 0x2f8c <main+0x33a>
    2f8a:	cd ce       	rjmp	.-614    	; 0x2d26 <main+0xd4>
        {
        	uart_puts_p(PSTR("opening root directory failed\n"));
    2f8c:	81 e4       	ldi	r24, 0x41	; 65
    2f8e:	91 e0       	ldi	r25, 0x01	; 1
    2f90:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
    2f94:	c8 ce       	rjmp	.-624    	; 0x2d26 <main+0xd4>
    2f96:	81 e4       	ldi	r24, 0x41	; 65
    2f98:	91 e0       	ldi	r25, 0x01	; 1
    2f9a:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>
    2f9e:	70 cf       	rjmp	.-288    	; 0x2e80 <main+0x22e>

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
        return 0;
    2fa0:	00 e0       	ldi	r16, 0x00	; 0
    2fa2:	10 e0       	ldi	r17, 0x00	; 0
    2fa4:	97 cf       	rjmp	.-210    	; 0x2ed4 <main+0x282>
        char testwrite[] = "Thisistext";
        //uart_puts(testwrite); uart_putc('\n');
        uart_puts_p(PSTR("writing happens now\n"));
        if(fat_write_file(fd, (uint8_t*) testwrite, (uint8_t)sizeof(testwrite)) != (uint8_t)sizeof(testwrite))
        {
            uart_puts_p(PSTR("error writing to file\n"));
    2fa6:	87 ef       	ldi	r24, 0xF7	; 247
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	0e 94 3e 20 	call	0x407c	; 0x407c <uart_puts_p>


	}

	return 0;
}
    2fae:	80 e0       	ldi	r24, 0x00	; 0
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	cc 58       	subi	r28, 0x8C	; 140
    2fb4:	df 4f       	sbci	r29, 0xFF	; 255
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	f8 94       	cli
    2fba:	de bf       	out	0x3e, r29	; 62
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	cd bf       	out	0x3d, r28	; 61
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	1f 91       	pop	r17
    2fc6:	0f 91       	pop	r16
    2fc8:	ff 90       	pop	r15
    2fca:	ef 90       	pop	r14
    2fcc:	df 90       	pop	r13
    2fce:	cf 90       	pop	r12
    2fd0:	bf 90       	pop	r11
    2fd2:	af 90       	pop	r10
    2fd4:	9f 90       	pop	r9
    2fd6:	08 95       	ret

00002fd8 <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    2fd8:	6f 92       	push	r6
    2fda:	7f 92       	push	r7
    2fdc:	8f 92       	push	r8
    2fde:	9f 92       	push	r9
    2fe0:	af 92       	push	r10
    2fe2:	bf 92       	push	r11
    2fe4:	cf 92       	push	r12
    2fe6:	df 92       	push	r13
    2fe8:	ef 92       	push	r14
    2fea:	ff 92       	push	r15
    2fec:	0f 93       	push	r16
    2fee:	1f 93       	push	r17
    2ff0:	cf 93       	push	r28
    2ff2:	df 93       	push	r29
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
    2ff8:	60 97       	sbiw	r28, 0x10	; 16
    2ffa:	0f b6       	in	r0, 0x3f	; 63
    2ffc:	f8 94       	cli
    2ffe:	de bf       	out	0x3e, r29	; 62
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	cd bf       	out	0x3d, r28	; 61
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    3004:	00 97       	sbiw	r24, 0x00	; 0
    3006:	71 f1       	breq	.+92     	; 0x3064 <partition_open+0x8c>
    3008:	61 15       	cp	r22, r1
    300a:	71 05       	cpc	r23, r1
    300c:	71 f1       	breq	.+92     	; 0x306a <partition_open+0x92>
    300e:	04 30       	cpi	r16, 0x04	; 4
    3010:	7c f5       	brge	.+94     	; 0x3070 <partition_open+0x98>
        return 0;

    if(index >= 0)
    3012:	00 23       	and	r16, r16
    3014:	0c f4       	brge	.+2      	; 0x3018 <partition_open+0x40>
    3016:	75 c0       	rjmp	.+234    	; 0x3102 <partition_open+0x12a>
    3018:	39 01       	movw	r6, r18
    301a:	4a 01       	movw	r8, r20
    301c:	5b 01       	movw	r10, r22
    301e:	6c 01       	movw	r12, r24
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    3020:	80 e1       	ldi	r24, 0x10	; 16
    3022:	08 02       	muls	r16, r24
    3024:	f0 01       	movw	r30, r0
    3026:	11 24       	eor	r1, r1
    3028:	e2 54       	subi	r30, 0x42	; 66
    302a:	fe 4f       	sbci	r31, 0xFE	; 254
    302c:	9f 2f       	mov	r25, r31
    302e:	99 0f       	add	r25, r25
    3030:	99 0b       	sbc	r25, r25
    3032:	68 94       	set
    3034:	ee 24       	eor	r14, r14
    3036:	e4 f8       	bld	r14, 4
    3038:	f1 2c       	mov	r15, r1
    303a:	8e 01       	movw	r16, r28
    303c:	0f 5f       	subi	r16, 0xFF	; 255
    303e:	1f 4f       	sbci	r17, 0xFF	; 255
    3040:	2e 2f       	mov	r18, r30
    3042:	3f 2f       	mov	r19, r31
    3044:	49 2f       	mov	r20, r25
    3046:	59 2f       	mov	r21, r25
    3048:	69 2f       	mov	r22, r25
    304a:	79 2f       	mov	r23, r25
    304c:	89 2f       	mov	r24, r25
    304e:	f6 01       	movw	r30, r12
    3050:	09 95       	icall
    3052:	88 23       	and	r24, r24
    3054:	81 f0       	breq	.+32     	; 0x3076 <partition_open+0x9e>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    3056:	8d 81       	ldd	r24, Y+5	; 0x05
    3058:	81 11       	cpse	r24, r1
    305a:	3a c0       	rjmp	.+116    	; 0x30d0 <partition_open+0xf8>
    305c:	0f c0       	rjmp	.+30     	; 0x307c <partition_open+0xa4>
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    305e:	8b e0       	ldi	r24, 0x0B	; 11
    3060:	92 e0       	ldi	r25, 0x02	; 2
    else
    {
        new_partition->type = 0xff;
    }

    return new_partition;
    3062:	55 c0       	rjmp	.+170    	; 0x310e <partition_open+0x136>
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
        return 0;
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	52 c0       	rjmp	.+164    	; 0x310e <partition_open+0x136>
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	4f c0       	rjmp	.+158    	; 0x310e <partition_open+0x136>
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	4c c0       	rjmp	.+152    	; 0x310e <partition_open+0x136>

    if(index >= 0)
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
            return 0;
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	49 c0       	rjmp	.+146    	; 0x310e <partition_open+0x136>

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
            return 0;
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	46 c0       	rjmp	.+140    	; 0x310e <partition_open+0x136>
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    3082:	0b e0       	ldi	r16, 0x0B	; 11
    3084:	12 e0       	ldi	r17, 0x02	; 2
    3086:	81 e1       	ldi	r24, 0x11	; 17
    3088:	d8 01       	movw	r26, r16
    308a:	1d 92       	st	X+, r1
    308c:	8a 95       	dec	r24
    308e:	e9 f7       	brne	.-6      	; 0x308a <partition_open+0xb2>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    3090:	f8 01       	movw	r30, r16
    3092:	d1 82       	std	Z+1, r13	; 0x01
    3094:	c0 82       	st	Z, r12
    new_partition->device_read_interval = device_read_interval;
    3096:	b3 82       	std	Z+3, r11	; 0x03
    3098:	a2 82       	std	Z+2, r10	; 0x02
    new_partition->device_write = device_write;
    309a:	95 82       	std	Z+5, r9	; 0x05
    309c:	84 82       	std	Z+4, r8	; 0x04
    new_partition->device_write_interval = device_write_interval;
    309e:	77 82       	std	Z+7, r7	; 0x07
    30a0:	66 82       	std	Z+6, r6	; 0x06

    if(index >= 0)
    {
        new_partition->type = buffer[4];
    30a2:	8d 81       	ldd	r24, Y+5	; 0x05
    30a4:	80 87       	std	Z+8, r24	; 0x08
        new_partition->offset = read32(&buffer[8]);
    30a6:	ce 01       	movw	r24, r28
    30a8:	09 96       	adiw	r24, 0x09	; 9
    30aa:	0e 94 0b 01 	call	0x216	; 0x216 <read32>
    30ae:	d8 01       	movw	r26, r16
    30b0:	19 96       	adiw	r26, 0x09	; 9
    30b2:	6d 93       	st	X+, r22
    30b4:	7d 93       	st	X+, r23
    30b6:	8d 93       	st	X+, r24
    30b8:	9c 93       	st	X, r25
    30ba:	1c 97       	sbiw	r26, 0x0c	; 12
        new_partition->length = read32(&buffer[12]);
    30bc:	ce 01       	movw	r24, r28
    30be:	0d 96       	adiw	r24, 0x0d	; 13
    30c0:	0e 94 0b 01 	call	0x216	; 0x216 <read32>
    30c4:	f8 01       	movw	r30, r16
    30c6:	65 87       	std	Z+13, r22	; 0x0d
    30c8:	76 87       	std	Z+14, r23	; 0x0e
    30ca:	87 87       	std	Z+15, r24	; 0x0f
    30cc:	90 8b       	std	Z+16, r25	; 0x10
    30ce:	c7 cf       	rjmp	.-114    	; 0x305e <partition_open+0x86>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    30d0:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <partition_handles+0x8>
    30d4:	88 23       	and	r24, r24
    30d6:	a9 f2       	breq	.-86     	; 0x3082 <partition_open+0xaa>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	18 c0       	rjmp	.+48     	; 0x310e <partition_open+0x136>
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    30de:	eb e0       	ldi	r30, 0x0B	; 11
    30e0:	f2 e0       	ldi	r31, 0x02	; 2
    30e2:	11 e1       	ldi	r17, 0x11	; 17
    30e4:	df 01       	movw	r26, r30
    30e6:	1d 92       	st	X+, r1
    30e8:	1a 95       	dec	r17
    30ea:	e9 f7       	brne	.-6      	; 0x30e6 <partition_open+0x10e>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    30ec:	91 83       	std	Z+1, r25	; 0x01
    30ee:	80 83       	st	Z, r24
    new_partition->device_read_interval = device_read_interval;
    30f0:	73 83       	std	Z+3, r23	; 0x03
    30f2:	62 83       	std	Z+2, r22	; 0x02
    new_partition->device_write = device_write;
    30f4:	55 83       	std	Z+5, r21	; 0x05
    30f6:	44 83       	std	Z+4, r20	; 0x04
    new_partition->device_write_interval = device_write_interval;
    30f8:	37 83       	std	Z+7, r19	; 0x07
    30fa:	26 83       	std	Z+6, r18	; 0x06
        new_partition->offset = read32(&buffer[8]);
        new_partition->length = read32(&buffer[12]);
    }
    else
    {
        new_partition->type = 0xff;
    30fc:	8f ef       	ldi	r24, 0xFF	; 255
    30fe:	80 87       	std	Z+8, r24	; 0x08
    3100:	ae cf       	rjmp	.-164    	; 0x305e <partition_open+0x86>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    3102:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <partition_handles+0x8>
    3106:	ee 23       	and	r30, r30
    3108:	51 f3       	breq	.-44     	; 0x30de <partition_open+0x106>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	90 e0       	ldi	r25, 0x00	; 0
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
    310e:	60 96       	adiw	r28, 0x10	; 16
    3110:	0f b6       	in	r0, 0x3f	; 63
    3112:	f8 94       	cli
    3114:	de bf       	out	0x3e, r29	; 62
    3116:	0f be       	out	0x3f, r0	; 63
    3118:	cd bf       	out	0x3d, r28	; 61
    311a:	df 91       	pop	r29
    311c:	cf 91       	pop	r28
    311e:	1f 91       	pop	r17
    3120:	0f 91       	pop	r16
    3122:	ff 90       	pop	r15
    3124:	ef 90       	pop	r14
    3126:	df 90       	pop	r13
    3128:	cf 90       	pop	r12
    312a:	bf 90       	pop	r11
    312c:	af 90       	pop	r10
    312e:	9f 90       	pop	r9
    3130:	8f 90       	pop	r8
    3132:	7f 90       	pop	r7
    3134:	6f 90       	pop	r6
    3136:	08 95       	ret

00003138 <partition_close>:
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
    3138:	00 97       	sbiw	r24, 0x00	; 0
    313a:	21 f0       	breq	.+8      	; 0x3144 <partition_close+0xc>

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
    313c:	fc 01       	movw	r30, r24
    313e:	10 86       	std	Z+8, r1	; 0x08
#endif

    return 1;
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	08 95       	ret
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
        return 0;
    3144:	80 e0       	ldi	r24, 0x00	; 0
#else
    partition->type = PARTITION_TYPE_FREE;
#endif

    return 1;
}
    3146:	08 95       	ret

00003148 <sd_raw_send_byte>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
    3148:	8e bd       	out	0x2e, r24	; 46
    314a:	0d b4       	in	r0, 0x2d	; 45
    314c:	07 fe       	sbrs	r0, 7
    314e:	fd cf       	rjmp	.-6      	; 0x314a <sd_raw_send_byte+0x2>
    3150:	8d b5       	in	r24, 0x2d	; 45
    3152:	8f 77       	andi	r24, 0x7F	; 127
    3154:	8d bd       	out	0x2d, r24	; 45
    3156:	08 95       	ret

00003158 <sd_raw_rec_byte>:
    3158:	8f ef       	ldi	r24, 0xFF	; 255
    315a:	8e bd       	out	0x2e, r24	; 46
    315c:	0d b4       	in	r0, 0x2d	; 45
    315e:	07 fe       	sbrs	r0, 7
    3160:	fd cf       	rjmp	.-6      	; 0x315c <sd_raw_rec_byte+0x4>
    3162:	8d b5       	in	r24, 0x2d	; 45
    3164:	8f 77       	andi	r24, 0x7F	; 127
    3166:	8d bd       	out	0x2d, r24	; 45
    3168:	8e b5       	in	r24, 0x2e	; 46
    316a:	08 95       	ret

0000316c <sd_raw_send_command>:
    316c:	ff 92       	push	r15
    316e:	0f 93       	push	r16
    3170:	1f 93       	push	r17
    3172:	cf 93       	push	r28
    3174:	df 93       	push	r29
    3176:	c8 2f       	mov	r28, r24
    3178:	d4 2f       	mov	r29, r20
    317a:	15 2f       	mov	r17, r21
    317c:	06 2f       	mov	r16, r22
    317e:	f7 2e       	mov	r15, r23
    3180:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
    3184:	8c 2f       	mov	r24, r28
    3186:	80 64       	ori	r24, 0x40	; 64
    3188:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_send_byte>
    318c:	8f 2d       	mov	r24, r15
    318e:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_send_byte>
    3192:	80 2f       	mov	r24, r16
    3194:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_send_byte>
    3198:	81 2f       	mov	r24, r17
    319a:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_send_byte>
    319e:	8d 2f       	mov	r24, r29
    31a0:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_send_byte>
    31a4:	cc 23       	and	r28, r28
    31a6:	19 f0       	breq	.+6      	; 0x31ae <sd_raw_send_command+0x42>
    31a8:	c8 30       	cpi	r28, 0x08	; 8
    31aa:	29 f0       	breq	.+10     	; 0x31b6 <sd_raw_send_command+0x4a>
    31ac:	08 c0       	rjmp	.+16     	; 0x31be <sd_raw_send_command+0x52>
    31ae:	85 e9       	ldi	r24, 0x95	; 149
    31b0:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_send_byte>
    31b4:	0f c0       	rjmp	.+30     	; 0x31d4 <sd_raw_send_command+0x68>
    31b6:	87 e8       	ldi	r24, 0x87	; 135
    31b8:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_send_byte>
    31bc:	0b c0       	rjmp	.+22     	; 0x31d4 <sd_raw_send_command+0x68>
    31be:	8f ef       	ldi	r24, 0xFF	; 255
    31c0:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_send_byte>
    31c4:	07 c0       	rjmp	.+14     	; 0x31d4 <sd_raw_send_command+0x68>
    31c6:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
    31ca:	8f 3f       	cpi	r24, 0xFF	; 255
    31cc:	29 f4       	brne	.+10     	; 0x31d8 <sd_raw_send_command+0x6c>
    31ce:	c1 50       	subi	r28, 0x01	; 1
    31d0:	d1 f7       	brne	.-12     	; 0x31c6 <sd_raw_send_command+0x5a>
    31d2:	02 c0       	rjmp	.+4      	; 0x31d8 <sd_raw_send_command+0x6c>
    31d4:	ca e0       	ldi	r28, 0x0A	; 10
    31d6:	f7 cf       	rjmp	.-18     	; 0x31c6 <sd_raw_send_command+0x5a>
    31d8:	df 91       	pop	r29
    31da:	cf 91       	pop	r28
    31dc:	1f 91       	pop	r17
    31de:	0f 91       	pop	r16
    31e0:	ff 90       	pop	r15
    31e2:	08 95       	ret

000031e4 <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
    31e4:	ef 92       	push	r14
    31e6:	ff 92       	push	r15
    31e8:	0f 93       	push	r16
    31ea:	1f 93       	push	r17
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    31ec:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <raw_block_written>
    31f0:	81 11       	cpse	r24, r1
    31f2:	1e c0       	rjmp	.+60     	; 0x3230 <sd_raw_sync+0x4c>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    31f4:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <raw_block_address>
    31f8:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <raw_block_address+0x1>
    31fc:	40 91 20 02 	lds	r20, 0x0220	; 0x800220 <raw_block_address+0x2>
    3200:	50 91 21 02 	lds	r21, 0x0221	; 0x800221 <raw_block_address+0x3>
    3204:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <raw_block_address+0x4>
    3208:	70 91 23 02 	lds	r23, 0x0223	; 0x800223 <raw_block_address+0x5>
    320c:	e1 2c       	mov	r14, r1
    320e:	68 94       	set
    3210:	ff 24       	eor	r15, r15
    3212:	f1 f8       	bld	r15, 1
    3214:	06 e2       	ldi	r16, 0x26	; 38
    3216:	12 e0       	ldi	r17, 0x02	; 2
    3218:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <raw_block_address+0x6>
    321c:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <raw_block_address+0x7>
    3220:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <sd_raw_write>
    3224:	88 23       	and	r24, r24
    3226:	29 f0       	breq	.+10     	; 0x3232 <sd_raw_sync+0x4e>
        return 0;
    raw_block_written = 1;
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <raw_block_written>
#endif
    return 1;
    322e:	01 c0       	rjmp	.+2      	; 0x3232 <sd_raw_sync+0x4e>
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
        return 1;
    3230:	81 e0       	ldi	r24, 0x01	; 1
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
        return 0;
    raw_block_written = 1;
#endif
    return 1;
}
    3232:	1f 91       	pop	r17
    3234:	0f 91       	pop	r16
    3236:	ff 90       	pop	r15
    3238:	ef 90       	pop	r14
    323a:	08 95       	ret

0000323c <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    323c:	2f 92       	push	r2
    323e:	3f 92       	push	r3
    3240:	4f 92       	push	r4
    3242:	5f 92       	push	r5
    3244:	6f 92       	push	r6
    3246:	7f 92       	push	r7
    3248:	8f 92       	push	r8
    324a:	9f 92       	push	r9
    324c:	af 92       	push	r10
    324e:	bf 92       	push	r11
    3250:	cf 92       	push	r12
    3252:	df 92       	push	r13
    3254:	ef 92       	push	r14
    3256:	ff 92       	push	r15
    3258:	0f 93       	push	r16
    325a:	1f 93       	push	r17
    325c:	cf 93       	push	r28
    325e:	df 93       	push	r29
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
    3264:	6a 97       	sbiw	r28, 0x1a	; 26
    3266:	0f b6       	in	r0, 0x3f	; 63
    3268:	f8 94       	cli
    326a:	de bf       	out	0x3e, r29	; 62
    326c:	0f be       	out	0x3f, r0	; 63
    326e:	cd bf       	out	0x3d, r28	; 61
    3270:	29 83       	std	Y+1, r18	; 0x01
    3272:	3a 83       	std	Y+2, r19	; 0x02
    3274:	4b 83       	std	Y+3, r20	; 0x03
    3276:	5c 83       	std	Y+4, r21	; 0x04
    3278:	6d 83       	std	Y+5, r22	; 0x05
    327a:	7e 83       	std	Y+6, r23	; 0x06
    327c:	8f 83       	std	Y+7, r24	; 0x07
    327e:	98 87       	std	Y+8, r25	; 0x08
    3280:	1c 8b       	std	Y+20, r17	; 0x14
    3282:	0b 8b       	std	Y+19, r16	; 0x13
    3284:	27 01       	movw	r4, r14
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    3286:	ef 28       	or	r14, r15
    3288:	09 f4       	brne	.+2      	; 0x328c <sd_raw_read+0x50>
    328a:	f8 c0       	rjmp	.+496    	; 0x347c <sd_raw_read+0x240>
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
        read_length = 512 - block_offset; /* read up to block border */
    328c:	61 2c       	mov	r6, r1
    328e:	68 94       	set
    3290:	77 24       	eor	r7, r7
    3292:	71 f8       	bld	r7, 1
    3294:	0f 2e       	mov	r0, r31
    3296:	f6 e2       	ldi	r31, 0x26	; 38
    3298:	2f 2e       	mov	r2, r31
    329a:	f4 e0       	ldi	r31, 0x04	; 4
    329c:	3f 2e       	mov	r3, r31
    329e:	f0 2d       	mov	r31, r0
    32a0:	7a 8e       	std	Y+26, r7	; 0x1a
    32a2:	69 8e       	std	Y+25, r6	; 0x19
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    32a4:	89 80       	ldd	r8, Y+1	; 0x01
    32a6:	9a 80       	ldd	r9, Y+2	; 0x02
    32a8:	21 e0       	ldi	r18, 0x01	; 1
    32aa:	92 22       	and	r9, r18
        block_address = offset - block_offset;
    32ac:	94 01       	movw	r18, r8
    32ae:	40 e0       	ldi	r20, 0x00	; 0
    32b0:	50 e0       	ldi	r21, 0x00	; 0
    32b2:	60 e0       	ldi	r22, 0x00	; 0
    32b4:	70 e0       	ldi	r23, 0x00	; 0
    32b6:	cb 01       	movw	r24, r22
    32b8:	89 86       	std	Y+9, r8	; 0x09
    32ba:	3a 87       	std	Y+10, r19	; 0x0a
    32bc:	4b 87       	std	Y+11, r20	; 0x0b
    32be:	5c 87       	std	Y+12, r21	; 0x0c
    32c0:	6d 87       	std	Y+13, r22	; 0x0d
    32c2:	7e 87       	std	Y+14, r23	; 0x0e
    32c4:	8f 87       	std	Y+15, r24	; 0x0f
    32c6:	98 8b       	std	Y+16, r25	; 0x10
    32c8:	29 81       	ldd	r18, Y+1	; 0x01
    32ca:	3a 81       	ldd	r19, Y+2	; 0x02
    32cc:	4b 81       	ldd	r20, Y+3	; 0x03
    32ce:	5c 81       	ldd	r21, Y+4	; 0x04
    32d0:	6d 81       	ldd	r22, Y+5	; 0x05
    32d2:	7e 81       	ldd	r23, Y+6	; 0x06
    32d4:	8f 81       	ldd	r24, Y+7	; 0x07
    32d6:	98 85       	ldd	r25, Y+8	; 0x08
    32d8:	a9 84       	ldd	r10, Y+9	; 0x09
    32da:	ba 84       	ldd	r11, Y+10	; 0x0a
    32dc:	c1 2c       	mov	r12, r1
    32de:	d1 2c       	mov	r13, r1
    32e0:	e1 2c       	mov	r14, r1
    32e2:	f1 2c       	mov	r15, r1
    32e4:	00 e0       	ldi	r16, 0x00	; 0
    32e6:	10 e0       	ldi	r17, 0x00	; 0
    32e8:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__subdi3>
    32ec:	29 8b       	std	Y+17, r18	; 0x11
    32ee:	3a 8b       	std	Y+18, r19	; 0x12
    32f0:	64 2e       	mov	r6, r20
    32f2:	75 2e       	mov	r7, r21
    32f4:	6d 8b       	std	Y+21, r22	; 0x15
    32f6:	7e 8b       	std	Y+22, r23	; 0x16
    32f8:	8f 8b       	std	Y+23, r24	; 0x17
    32fa:	98 8f       	std	Y+24, r25	; 0x18
    32fc:	49 8d       	ldd	r20, Y+25	; 0x19
    32fe:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3300:	48 19       	sub	r20, r8
    3302:	59 09       	sbc	r21, r9
    3304:	5a 87       	std	Y+10, r21	; 0x0a
    3306:	49 87       	std	Y+9, r20	; 0x09
    3308:	44 16       	cp	r4, r20
    330a:	55 06       	cpc	r5, r21
    330c:	10 f4       	brcc	.+4      	; 0x3312 <sd_raw_read+0xd6>
    330e:	5a 86       	std	Y+10, r5	; 0x0a
    3310:	49 86       	std	Y+9, r4	; 0x09
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    3312:	a0 90 1e 02 	lds	r10, 0x021E	; 0x80021e <raw_block_address>
    3316:	b0 90 1f 02 	lds	r11, 0x021F	; 0x80021f <raw_block_address+0x1>
    331a:	c0 90 20 02 	lds	r12, 0x0220	; 0x800220 <raw_block_address+0x2>
    331e:	d0 90 21 02 	lds	r13, 0x0221	; 0x800221 <raw_block_address+0x3>
    3322:	e0 90 22 02 	lds	r14, 0x0222	; 0x800222 <raw_block_address+0x4>
    3326:	f0 90 23 02 	lds	r15, 0x0223	; 0x800223 <raw_block_address+0x5>
    332a:	00 91 24 02 	lds	r16, 0x0224	; 0x800224 <raw_block_address+0x6>
    332e:	10 91 25 02 	lds	r17, 0x0225	; 0x800225 <raw_block_address+0x7>
    3332:	29 89       	ldd	r18, Y+17	; 0x11
    3334:	3a 89       	ldd	r19, Y+18	; 0x12
    3336:	46 2d       	mov	r20, r6
    3338:	57 2d       	mov	r21, r7
    333a:	6d 89       	ldd	r22, Y+21	; 0x15
    333c:	7e 89       	ldd	r23, Y+22	; 0x16
    333e:	8f 89       	ldd	r24, Y+23	; 0x17
    3340:	98 8d       	ldd	r25, Y+24	; 0x18
    3342:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__cmpdi2>
    3346:	09 f4       	brne	.+2      	; 0x334a <sd_raw_read+0x10e>
    3348:	63 c0       	rjmp	.+198    	; 0x3410 <sd_raw_read+0x1d4>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    334a:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <sd_raw_sync>
    334e:	88 23       	and	r24, r24
    3350:	09 f4       	brne	.+2      	; 0x3354 <sd_raw_read+0x118>
    3352:	95 c0       	rjmp	.+298    	; 0x347e <sd_raw_read+0x242>
                return 0;
#endif

            /* address card */
            select_card();
    3354:	2a 98       	cbi	0x05, 2	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    3356:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <sd_raw_card_type>
    335a:	82 ff       	sbrs	r24, 2
    335c:	10 c0       	rjmp	.+32     	; 0x337e <sd_raw_read+0x142>
    335e:	29 89       	ldd	r18, Y+17	; 0x11
    3360:	3a 89       	ldd	r19, Y+18	; 0x12
    3362:	46 2d       	mov	r20, r6
    3364:	57 2d       	mov	r21, r7
    3366:	6d 89       	ldd	r22, Y+21	; 0x15
    3368:	7e 89       	ldd	r23, Y+22	; 0x16
    336a:	8f 89       	ldd	r24, Y+23	; 0x17
    336c:	98 8d       	ldd	r25, Y+24	; 0x18
    336e:	09 e0       	ldi	r16, 0x09	; 9
    3370:	0e 94 3f 21 	call	0x427e	; 0x427e <__lshrdi3>
    3374:	64 2f       	mov	r22, r20
    3376:	75 2f       	mov	r23, r21
    3378:	42 2f       	mov	r20, r18
    337a:	53 2f       	mov	r21, r19
    337c:	04 c0       	rjmp	.+8      	; 0x3386 <sd_raw_read+0x14a>
    337e:	49 89       	ldd	r20, Y+17	; 0x11
    3380:	5a 89       	ldd	r21, Y+18	; 0x12
    3382:	66 2d       	mov	r22, r6
    3384:	77 2d       	mov	r23, r7
    3386:	81 e1       	ldi	r24, 0x11	; 17
    3388:	0e 94 b6 18 	call	0x316c	; 0x316c <sd_raw_send_command>
    338c:	88 23       	and	r24, r24
    338e:	19 f0       	breq	.+6      	; 0x3396 <sd_raw_read+0x15a>
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
#endif
            {
                unselect_card();
    3390:	2a 9a       	sbi	0x05, 2	; 5
                return 0;
    3392:	80 e0       	ldi	r24, 0x00	; 0
    3394:	74 c0       	rjmp	.+232    	; 0x347e <sd_raw_read+0x242>
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    3396:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
    339a:	8e 3f       	cpi	r24, 0xFE	; 254
    339c:	e1 f7       	brne	.-8      	; 0x3396 <sd_raw_read+0x15a>
    339e:	06 e2       	ldi	r16, 0x26	; 38
    33a0:	12 e0       	ldi	r17, 0x02	; 2
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    33a2:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
    33a6:	f8 01       	movw	r30, r16
    33a8:	81 93       	st	Z+, r24
    33aa:	8f 01       	movw	r16, r30
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    33ac:	e2 15       	cp	r30, r2
    33ae:	f3 05       	cpc	r31, r3
    33b0:	c1 f7       	brne	.-16     	; 0x33a2 <sd_raw_read+0x166>
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;
    33b2:	f9 89       	ldd	r31, Y+17	; 0x11
    33b4:	f0 93 1e 02 	sts	0x021E, r31	; 0x80021e <raw_block_address>
    33b8:	2a 89       	ldd	r18, Y+18	; 0x12
    33ba:	20 93 1f 02 	sts	0x021F, r18	; 0x80021f <raw_block_address+0x1>
    33be:	60 92 20 02 	sts	0x0220, r6	; 0x800220 <raw_block_address+0x2>
    33c2:	70 92 21 02 	sts	0x0221, r7	; 0x800221 <raw_block_address+0x3>
    33c6:	3d 89       	ldd	r19, Y+21	; 0x15
    33c8:	30 93 22 02 	sts	0x0222, r19	; 0x800222 <raw_block_address+0x4>
    33cc:	4e 89       	ldd	r20, Y+22	; 0x16
    33ce:	40 93 23 02 	sts	0x0223, r20	; 0x800223 <raw_block_address+0x5>
    33d2:	5f 89       	ldd	r21, Y+23	; 0x17
    33d4:	50 93 24 02 	sts	0x0224, r21	; 0x800224 <raw_block_address+0x6>
    33d8:	68 8d       	ldd	r22, Y+24	; 0x18
    33da:	60 93 25 02 	sts	0x0225, r22	; 0x800225 <raw_block_address+0x7>

            memcpy(buffer, raw_block + block_offset, read_length);
    33de:	b4 01       	movw	r22, r8
    33e0:	6a 5d       	subi	r22, 0xDA	; 218
    33e2:	7d 4f       	sbci	r23, 0xFD	; 253
    33e4:	49 85       	ldd	r20, Y+9	; 0x09
    33e6:	5a 85       	ldd	r21, Y+10	; 0x0a
    33e8:	8b 89       	ldd	r24, Y+19	; 0x13
    33ea:	9c 89       	ldd	r25, Y+20	; 0x14
    33ec:	0e 94 8e 21 	call	0x431c	; 0x431c <memcpy>
            buffer += read_length;
    33f0:	8b 89       	ldd	r24, Y+19	; 0x13
    33f2:	9c 89       	ldd	r25, Y+20	; 0x14
    33f4:	e9 85       	ldd	r30, Y+9	; 0x09
    33f6:	fa 85       	ldd	r31, Y+10	; 0x0a
    33f8:	8e 0f       	add	r24, r30
    33fa:	9f 1f       	adc	r25, r31
    33fc:	9c 8b       	std	Y+20, r25	; 0x14
    33fe:	8b 8b       	std	Y+19, r24	; 0x13
#endif
            
            /* read crc16 */
            sd_raw_rec_byte();
    3400:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
            sd_raw_rec_byte();
    3404:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
            
            /* deaddress card */
            unselect_card();
    3408:	2a 9a       	sbi	0x05, 2	; 5

            /* let card some time to finish */
            sd_raw_rec_byte();
    340a:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
    340e:	11 c0       	rjmp	.+34     	; 0x3432 <sd_raw_read+0x1f6>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    3410:	b4 01       	movw	r22, r8
    3412:	6a 5d       	subi	r22, 0xDA	; 218
    3414:	7d 4f       	sbci	r23, 0xFD	; 253
    3416:	49 85       	ldd	r20, Y+9	; 0x09
    3418:	5a 85       	ldd	r21, Y+10	; 0x0a
    341a:	8b 89       	ldd	r24, Y+19	; 0x13
    341c:	9c 89       	ldd	r25, Y+20	; 0x14
    341e:	0e 94 8e 21 	call	0x431c	; 0x431c <memcpy>
            buffer += read_length;
    3422:	2b 89       	ldd	r18, Y+19	; 0x13
    3424:	3c 89       	ldd	r19, Y+20	; 0x14
    3426:	49 85       	ldd	r20, Y+9	; 0x09
    3428:	5a 85       	ldd	r21, Y+10	; 0x0a
    342a:	24 0f       	add	r18, r20
    342c:	35 1f       	adc	r19, r21
    342e:	3c 8b       	std	Y+20, r19	; 0x14
    3430:	2b 8b       	std	Y+19, r18	; 0x13
        }
#endif

        length -= read_length;
    3432:	69 85       	ldd	r22, Y+9	; 0x09
    3434:	7a 85       	ldd	r23, Y+10	; 0x0a
    3436:	46 1a       	sub	r4, r22
    3438:	57 0a       	sbc	r5, r23
        offset += read_length;
    343a:	4b 01       	movw	r8, r22
    343c:	26 2f       	mov	r18, r22
    343e:	39 2d       	mov	r19, r9
    3440:	40 e0       	ldi	r20, 0x00	; 0
    3442:	50 e0       	ldi	r21, 0x00	; 0
    3444:	60 e0       	ldi	r22, 0x00	; 0
    3446:	70 e0       	ldi	r23, 0x00	; 0
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	a9 80       	ldd	r10, Y+1	; 0x01
    344e:	ba 80       	ldd	r11, Y+2	; 0x02
    3450:	cb 80       	ldd	r12, Y+3	; 0x03
    3452:	dc 80       	ldd	r13, Y+4	; 0x04
    3454:	ed 80       	ldd	r14, Y+5	; 0x05
    3456:	fe 80       	ldd	r15, Y+6	; 0x06
    3458:	0f 81       	ldd	r16, Y+7	; 0x07
    345a:	18 85       	ldd	r17, Y+8	; 0x08
    345c:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
    3460:	29 83       	std	Y+1, r18	; 0x01
    3462:	3a 83       	std	Y+2, r19	; 0x02
    3464:	4b 83       	std	Y+3, r20	; 0x03
    3466:	5c 83       	std	Y+4, r21	; 0x04
    3468:	6d 83       	std	Y+5, r22	; 0x05
    346a:	7e 83       	std	Y+6, r23	; 0x06
    346c:	8f 83       	std	Y+7, r24	; 0x07
    346e:	98 87       	std	Y+8, r25	; 0x08
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    3470:	41 14       	cp	r4, r1
    3472:	51 04       	cpc	r5, r1
    3474:	09 f0       	breq	.+2      	; 0x3478 <sd_raw_read+0x23c>
    3476:	16 cf       	rjmp	.-468    	; 0x32a4 <sd_raw_read+0x68>

        length -= read_length;
        offset += read_length;
    }

    return 1;
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	01 c0       	rjmp	.+2      	; 0x347e <sd_raw_read+0x242>
    347c:	81 e0       	ldi	r24, 0x01	; 1
}
    347e:	6a 96       	adiw	r28, 0x1a	; 26
    3480:	0f b6       	in	r0, 0x3f	; 63
    3482:	f8 94       	cli
    3484:	de bf       	out	0x3e, r29	; 62
    3486:	0f be       	out	0x3f, r0	; 63
    3488:	cd bf       	out	0x3d, r28	; 61
    348a:	df 91       	pop	r29
    348c:	cf 91       	pop	r28
    348e:	1f 91       	pop	r17
    3490:	0f 91       	pop	r16
    3492:	ff 90       	pop	r15
    3494:	ef 90       	pop	r14
    3496:	df 90       	pop	r13
    3498:	cf 90       	pop	r12
    349a:	bf 90       	pop	r11
    349c:	af 90       	pop	r10
    349e:	9f 90       	pop	r9
    34a0:	8f 90       	pop	r8
    34a2:	7f 90       	pop	r7
    34a4:	6f 90       	pop	r6
    34a6:	5f 90       	pop	r5
    34a8:	4f 90       	pop	r4
    34aa:	3f 90       	pop	r3
    34ac:	2f 90       	pop	r2
    34ae:	08 95       	ret

000034b0 <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    34b0:	9f 92       	push	r9
    34b2:	af 92       	push	r10
    34b4:	bf 92       	push	r11
    34b6:	cf 92       	push	r12
    34b8:	df 92       	push	r13
    34ba:	ef 92       	push	r14
    34bc:	ff 92       	push	r15
    34be:	0f 93       	push	r16
    34c0:	1f 93       	push	r17
    34c2:	cf 93       	push	r28
    34c4:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    34c6:	23 9a       	sbi	0x04, 3	; 4
    configure_pin_sck();
    34c8:	25 9a       	sbi	0x04, 5	; 4
    configure_pin_ss();
    34ca:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_miso();
    34cc:	24 98       	cbi	0x04, 4	; 4

    unselect_card();
    34ce:	2a 9a       	sbi	0x05, 2	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    34d0:	83 e5       	ldi	r24, 0x53	; 83
    34d2:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    34d4:	8d b5       	in	r24, 0x2d	; 45
    34d6:	8e 7f       	andi	r24, 0xFE	; 254
    34d8:	8d bd       	out	0x2d, r24	; 45
	
    /* initialization procedure */
    sd_raw_card_type = 0;
    34da:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <sd_raw_card_type>
    34de:	1a e0       	ldi	r17, 0x0A	; 10

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    {
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    34e0:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
    34e4:	11 50       	subi	r17, 0x01	; 1
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    34e6:	e1 f7       	brne	.-8      	; 0x34e0 <sd_raw_init+0x30>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    34e8:	2a 98       	cbi	0x05, 2	; 5
    34ea:	c0 e0       	ldi	r28, 0x00	; 0
    34ec:	d2 e0       	ldi	r29, 0x02	; 2

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    34ee:	40 e0       	ldi	r20, 0x00	; 0
    34f0:	50 e0       	ldi	r21, 0x00	; 0
    34f2:	ba 01       	movw	r22, r20
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	0e 94 b6 18 	call	0x316c	; 0x316c <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
    34fa:	81 30       	cpi	r24, 0x01	; 1
    34fc:	29 f0       	breq	.+10     	; 0x3508 <sd_raw_init+0x58>
    34fe:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x1ff)
    3500:	b1 f7       	brne	.-20     	; 0x34ee <sd_raw_init+0x3e>
        {
            unselect_card();
    3502:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    3504:	01 2f       	mov	r16, r17
    3506:	c0 c0       	rjmp	.+384    	; 0x3688 <sd_raw_init+0x1d8>
        }
    }

#if SD_RAW_SDHC
    /* check for version of SD card specification */
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    3508:	4a ea       	ldi	r20, 0xAA	; 170
    350a:	51 e0       	ldi	r21, 0x01	; 1
    350c:	60 e0       	ldi	r22, 0x00	; 0
    350e:	70 e0       	ldi	r23, 0x00	; 0
    3510:	88 e0       	ldi	r24, 0x08	; 8
    3512:	0e 94 b6 18 	call	0x316c	; 0x316c <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
    3516:	c8 2f       	mov	r28, r24
    3518:	c4 70       	andi	r28, 0x04	; 4
    351a:	82 fd       	sbrc	r24, 2
    351c:	1d c0       	rjmp	.+58     	; 0x3558 <sd_raw_init+0xa8>
    {
        sd_raw_rec_byte();
    351e:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    3522:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
        if((sd_raw_rec_byte() & 0x01) == 0)
    3526:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
    352a:	08 2f       	mov	r16, r24
    352c:	01 70       	andi	r16, 0x01	; 1
    352e:	80 ff       	sbrs	r24, 0
    3530:	ab c0       	rjmp	.+342    	; 0x3688 <sd_raw_init+0x1d8>
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
    3532:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
    3536:	8a 3a       	cpi	r24, 0xAA	; 170
    3538:	09 f0       	breq	.+2      	; 0x353c <sd_raw_init+0x8c>
    353a:	a5 c0       	rjmp	.+330    	; 0x3686 <sd_raw_init+0x1d6>
            return 0; /* wrong test pattern */

        /* card conforms to SD 2 card specification */
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
    353c:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <sd_raw_card_type>
    3540:	82 60       	ori	r24, 0x02	; 2
    3542:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <sd_raw_card_type>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    3546:	c0 e0       	ldi	r28, 0x00	; 0
    3548:	d0 e8       	ldi	r29, 0x80	; 128
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
    354a:	91 2c       	mov	r9, r1
    354c:	a1 2c       	mov	r10, r1
    354e:	b1 2c       	mov	r11, r1
    3550:	68 94       	set
    3552:	cc 24       	eor	r12, r12
    3554:	c6 f8       	bld	r12, 6
    3556:	14 c0       	rjmp	.+40     	; 0x3580 <sd_raw_init+0xd0>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    3558:	40 e0       	ldi	r20, 0x00	; 0
    355a:	50 e0       	ldi	r21, 0x00	; 0
    355c:	ba 01       	movw	r22, r20
    355e:	87 e3       	ldi	r24, 0x37	; 55
    3560:	0e 94 b6 18 	call	0x316c	; 0x316c <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    3564:	40 e0       	ldi	r20, 0x00	; 0
    3566:	50 e0       	ldi	r21, 0x00	; 0
    3568:	ba 01       	movw	r22, r20
    356a:	89 e2       	ldi	r24, 0x29	; 41
    356c:	0e 94 b6 18 	call	0x316c	; 0x316c <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    3570:	82 fd       	sbrc	r24, 2
    3572:	e9 cf       	rjmp	.-46     	; 0x3546 <sd_raw_init+0x96>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    3574:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <sd_raw_card_type>
    3578:	81 60       	ori	r24, 0x01	; 1
    357a:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <sd_raw_card_type>
    357e:	e3 cf       	rjmp	.-58     	; 0x3546 <sd_raw_init+0x96>
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    3580:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <sd_raw_card_type>
    3584:	98 2f       	mov	r25, r24
    3586:	93 70       	andi	r25, 0x03	; 3
    3588:	c9 f0       	breq	.+50     	; 0x35bc <sd_raw_init+0x10c>
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    358a:	81 ff       	sbrs	r24, 1
    358c:	05 c0       	rjmp	.+10     	; 0x3598 <sd_raw_init+0xe8>
                arg = 0x40000000;
    358e:	d9 2c       	mov	r13, r9
    3590:	ea 2c       	mov	r14, r10
    3592:	fb 2c       	mov	r15, r11
    3594:	0c 2d       	mov	r16, r12
    3596:	04 c0       	rjmp	.+8      	; 0x35a0 <sd_raw_init+0xf0>
    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
        {
            uint32_t arg = 0;
    3598:	d1 2c       	mov	r13, r1
    359a:	e1 2c       	mov	r14, r1
    359c:	f1 2c       	mov	r15, r1
    359e:	00 e0       	ldi	r16, 0x00	; 0
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    35a0:	40 e0       	ldi	r20, 0x00	; 0
    35a2:	50 e0       	ldi	r21, 0x00	; 0
    35a4:	ba 01       	movw	r22, r20
    35a6:	87 e3       	ldi	r24, 0x37	; 55
    35a8:	0e 94 b6 18 	call	0x316c	; 0x316c <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    35ac:	4d 2d       	mov	r20, r13
    35ae:	5e 2d       	mov	r21, r14
    35b0:	6f 2d       	mov	r22, r15
    35b2:	70 2f       	mov	r23, r16
    35b4:	89 e2       	ldi	r24, 0x29	; 41
    35b6:	0e 94 b6 18 	call	0x316c	; 0x316c <sd_raw_send_command>
    35ba:	06 c0       	rjmp	.+12     	; 0x35c8 <sd_raw_init+0x118>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    35bc:	40 e0       	ldi	r20, 0x00	; 0
    35be:	50 e0       	ldi	r21, 0x00	; 0
    35c0:	ba 01       	movw	r22, r20
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	0e 94 b6 18 	call	0x316c	; 0x316c <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    35c8:	08 2f       	mov	r16, r24
    35ca:	01 70       	andi	r16, 0x01	; 1
    35cc:	80 ff       	sbrs	r24, 0
    35ce:	05 c0       	rjmp	.+10     	; 0x35da <sd_raw_init+0x12a>
    35d0:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x7fff)
    35d2:	b1 f6       	brne	.-84     	; 0x3580 <sd_raw_init+0xd0>
        {
            unselect_card();
    35d4:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    35d6:	01 2f       	mov	r16, r17
    35d8:	57 c0       	rjmp	.+174    	; 0x3688 <sd_raw_init+0x1d8>
        }
    }

#if SD_RAW_SDHC
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    35da:	c0 91 1c 02 	lds	r28, 0x021C	; 0x80021c <sd_raw_card_type>
    35de:	c1 ff       	sbrs	r28, 1
    35e0:	17 c0       	rjmp	.+46     	; 0x3610 <sd_raw_init+0x160>
    {
        if(sd_raw_send_command(CMD_READ_OCR, 0))
    35e2:	40 e0       	ldi	r20, 0x00	; 0
    35e4:	50 e0       	ldi	r21, 0x00	; 0
    35e6:	ba 01       	movw	r22, r20
    35e8:	8a e3       	ldi	r24, 0x3A	; 58
    35ea:	0e 94 b6 18 	call	0x316c	; 0x316c <sd_raw_send_command>
    35ee:	88 23       	and	r24, r24
    35f0:	11 f0       	breq	.+4      	; 0x35f6 <sd_raw_init+0x146>
        {
            unselect_card();
    35f2:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    35f4:	49 c0       	rjmp	.+146    	; 0x3688 <sd_raw_init+0x1d8>
        }

        if(sd_raw_rec_byte() & 0x40)
    35f6:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
    35fa:	86 ff       	sbrs	r24, 6
    35fc:	03 c0       	rjmp	.+6      	; 0x3604 <sd_raw_init+0x154>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
    35fe:	c4 60       	ori	r28, 0x04	; 4
    3600:	c0 93 1c 02 	sts	0x021C, r28	; 0x80021c <sd_raw_card_type>

        sd_raw_rec_byte();
    3604:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    3608:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    360c:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    3610:	40 e0       	ldi	r20, 0x00	; 0
    3612:	52 e0       	ldi	r21, 0x02	; 2
    3614:	60 e0       	ldi	r22, 0x00	; 0
    3616:	70 e0       	ldi	r23, 0x00	; 0
    3618:	80 e1       	ldi	r24, 0x10	; 16
    361a:	0e 94 b6 18 	call	0x316c	; 0x316c <sd_raw_send_command>
    361e:	88 23       	and	r24, r24
    3620:	11 f0       	breq	.+4      	; 0x3626 <sd_raw_init+0x176>
    {
        unselect_card();
    3622:	2a 9a       	sbi	0x05, 2	; 5
        return 0;
    3624:	31 c0       	rjmp	.+98     	; 0x3688 <sd_raw_init+0x1d8>
    }

    /* deaddress card */
    unselect_card();
    3626:	2a 9a       	sbi	0x05, 2	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    3628:	8c b5       	in	r24, 0x2c	; 44
    362a:	8c 7f       	andi	r24, 0xFC	; 252
    362c:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    362e:	8d b5       	in	r24, 0x2d	; 45
    3630:	81 60       	ori	r24, 0x01	; 1
    3632:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    3634:	8f ef       	ldi	r24, 0xFF	; 255
    3636:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <raw_block_address>
    363a:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <raw_block_address+0x1>
    363e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <raw_block_address+0x2>
    3642:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <raw_block_address+0x3>
    3646:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <raw_block_address+0x4>
    364a:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <raw_block_address+0x5>
    364e:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <raw_block_address+0x6>
    3652:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <raw_block_address+0x7>
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    3656:	81 e0       	ldi	r24, 0x01	; 1
    3658:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <raw_block_written>
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    365c:	e1 2c       	mov	r14, r1
    365e:	68 94       	set
    3660:	ff 24       	eor	r15, r15
    3662:	f1 f8       	bld	r15, 1
    3664:	06 e2       	ldi	r16, 0x26	; 38
    3666:	12 e0       	ldi	r17, 0x02	; 2
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	40 e0       	ldi	r20, 0x00	; 0
    366e:	50 e0       	ldi	r21, 0x00	; 0
    3670:	60 e0       	ldi	r22, 0x00	; 0
    3672:	70 e0       	ldi	r23, 0x00	; 0
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	0e 94 1e 19 	call	0x323c	; 0x323c <sd_raw_read>
    367c:	01 e0       	ldi	r16, 0x01	; 1
    367e:	81 11       	cpse	r24, r1
    3680:	03 c0       	rjmp	.+6      	; 0x3688 <sd_raw_init+0x1d8>
    3682:	00 e0       	ldi	r16, 0x00	; 0
    3684:	01 c0       	rjmp	.+2      	; 0x3688 <sd_raw_init+0x1d8>
        sd_raw_rec_byte();
        sd_raw_rec_byte();
        if((sd_raw_rec_byte() & 0x01) == 0)
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
            return 0; /* wrong test pattern */
    3686:	0c 2f       	mov	r16, r28
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
        return 0;
#endif

    return 1;
}
    3688:	80 2f       	mov	r24, r16
    368a:	df 91       	pop	r29
    368c:	cf 91       	pop	r28
    368e:	1f 91       	pop	r17
    3690:	0f 91       	pop	r16
    3692:	ff 90       	pop	r15
    3694:	ef 90       	pop	r14
    3696:	df 90       	pop	r13
    3698:	cf 90       	pop	r12
    369a:	bf 90       	pop	r11
    369c:	af 90       	pop	r10
    369e:	9f 90       	pop	r9
    36a0:	08 95       	ret

000036a2 <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    36a2:	2f 92       	push	r2
    36a4:	3f 92       	push	r3
    36a6:	4f 92       	push	r4
    36a8:	5f 92       	push	r5
    36aa:	6f 92       	push	r6
    36ac:	7f 92       	push	r7
    36ae:	8f 92       	push	r8
    36b0:	9f 92       	push	r9
    36b2:	af 92       	push	r10
    36b4:	bf 92       	push	r11
    36b6:	cf 92       	push	r12
    36b8:	df 92       	push	r13
    36ba:	ef 92       	push	r14
    36bc:	ff 92       	push	r15
    36be:	0f 93       	push	r16
    36c0:	1f 93       	push	r17
    36c2:	cf 93       	push	r28
    36c4:	df 93       	push	r29
    36c6:	cd b7       	in	r28, 0x3d	; 61
    36c8:	de b7       	in	r29, 0x3e	; 62
    36ca:	64 97       	sbiw	r28, 0x14	; 20
    36cc:	0f b6       	in	r0, 0x3f	; 63
    36ce:	f8 94       	cli
    36d0:	de bf       	out	0x3e, r29	; 62
    36d2:	0f be       	out	0x3f, r0	; 63
    36d4:	cd bf       	out	0x3d, r28	; 61
    36d6:	2f 87       	std	Y+15, r18	; 0x0f
    36d8:	38 8b       	std	Y+16, r19	; 0x10
    36da:	49 8b       	std	Y+17, r20	; 0x11
    36dc:	5a 8b       	std	Y+18, r21	; 0x12
    36de:	36 2e       	mov	r3, r22
    36e0:	27 2e       	mov	r2, r23
    36e2:	8b 8b       	std	Y+19, r24	; 0x13
    36e4:	9c 8b       	std	Y+20, r25	; 0x14
    36e6:	1a 83       	std	Y+2, r17	; 0x02
    36e8:	09 83       	std	Y+1, r16	; 0x01
    36ea:	37 01       	movw	r6, r14
    36ec:	26 01       	movw	r4, r12
    36ee:	bc 86       	std	Y+12, r11	; 0x0c
    36f0:	ab 86       	std	Y+11, r10	; 0x0b
    if(!buffer || interval == 0 || length < interval || !callback)
    36f2:	01 2b       	or	r16, r17
    36f4:	09 f4       	brne	.+2      	; 0x36f8 <sd_raw_read_interval+0x56>
    36f6:	53 c0       	rjmp	.+166    	; 0x379e <sd_raw_read_interval+0xfc>
    36f8:	e1 14       	cp	r14, r1
    36fa:	f1 04       	cpc	r15, r1
    36fc:	09 f4       	brne	.+2      	; 0x3700 <sd_raw_read_interval+0x5e>
    36fe:	51 c0       	rjmp	.+162    	; 0x37a2 <sd_raw_read_interval+0x100>
    3700:	ce 14       	cp	r12, r14
    3702:	df 04       	cpc	r13, r15
    3704:	08 f4       	brcc	.+2      	; 0x3708 <sd_raw_read_interval+0x66>
    3706:	4f c0       	rjmp	.+158    	; 0x37a6 <sd_raw_read_interval+0x104>
    3708:	ab 28       	or	r10, r11
    370a:	09 f4       	brne	.+2      	; 0x370e <sd_raw_read_interval+0x6c>
    370c:	4e c0       	rjmp	.+156    	; 0x37aa <sd_raw_read_interval+0x108>
         */
        if(!sd_raw_read(offset, buffer, interval))
            return 0;
        if(!callback(buffer, offset, p))
            break;
        offset += interval;
    370e:	97 01       	movw	r18, r14
    3710:	eb 82       	std	Y+3, r14	; 0x03
    3712:	3c 83       	std	Y+4, r19	; 0x04
    3714:	9e 86       	std	Y+14, r9	; 0x0e
    3716:	8d 86       	std	Y+13, r8	; 0x0d
    3718:	af 84       	ldd	r10, Y+15	; 0x0f
    371a:	b8 88       	ldd	r11, Y+16	; 0x10
    371c:	c9 88       	ldd	r12, Y+17	; 0x11
    371e:	da 88       	ldd	r13, Y+18	; 0x12
    3720:	9b 88       	ldd	r9, Y+19	; 0x13
    3722:	8c 88       	ldd	r8, Y+20	; 0x14
    while(length >= interval)
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    3724:	73 01       	movw	r14, r6
    3726:	09 81       	ldd	r16, Y+1	; 0x01
    3728:	1a 81       	ldd	r17, Y+2	; 0x02
    372a:	2a 2d       	mov	r18, r10
    372c:	3b 2d       	mov	r19, r11
    372e:	4c 2d       	mov	r20, r12
    3730:	5d 2d       	mov	r21, r13
    3732:	63 2d       	mov	r22, r3
    3734:	72 2d       	mov	r23, r2
    3736:	89 2d       	mov	r24, r9
    3738:	98 2d       	mov	r25, r8
    373a:	0e 94 1e 19 	call	0x323c	; 0x323c <sd_raw_read>
    373e:	88 23       	and	r24, r24
    3740:	b9 f1       	breq	.+110    	; 0x37b0 <sd_raw_read_interval+0x10e>
            return 0;
        if(!callback(buffer, offset, p))
    3742:	ed 84       	ldd	r14, Y+13	; 0x0d
    3744:	fe 84       	ldd	r15, Y+14	; 0x0e
    3746:	0a 2d       	mov	r16, r10
    3748:	1b 2d       	mov	r17, r11
    374a:	2c 2d       	mov	r18, r12
    374c:	3d 2d       	mov	r19, r13
    374e:	43 2d       	mov	r20, r3
    3750:	52 2d       	mov	r21, r2
    3752:	69 2d       	mov	r22, r9
    3754:	78 2d       	mov	r23, r8
    3756:	89 81       	ldd	r24, Y+1	; 0x01
    3758:	9a 81       	ldd	r25, Y+2	; 0x02
    375a:	eb 85       	ldd	r30, Y+11	; 0x0b
    375c:	fc 85       	ldd	r31, Y+12	; 0x0c
    375e:	09 95       	icall
    3760:	88 23       	and	r24, r24
    3762:	29 f1       	breq	.+74     	; 0x37ae <sd_raw_read_interval+0x10c>
    3764:	2b 81       	ldd	r18, Y+3	; 0x03
    3766:	3c 81       	ldd	r19, Y+4	; 0x04
    3768:	40 e0       	ldi	r20, 0x00	; 0
    376a:	50 e0       	ldi	r21, 0x00	; 0
    376c:	60 e0       	ldi	r22, 0x00	; 0
    376e:	70 e0       	ldi	r23, 0x00	; 0
    3770:	80 e0       	ldi	r24, 0x00	; 0
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	e3 2c       	mov	r14, r3
    3776:	f2 2c       	mov	r15, r2
    3778:	09 2d       	mov	r16, r9
    377a:	18 2d       	mov	r17, r8
    377c:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
    3780:	a2 2e       	mov	r10, r18
    3782:	b3 2e       	mov	r11, r19
    3784:	c4 2e       	mov	r12, r20
    3786:	d5 2e       	mov	r13, r21
    3788:	36 2e       	mov	r3, r22
    378a:	27 2e       	mov	r2, r23
    378c:	98 2e       	mov	r9, r24
    378e:	89 2e       	mov	r8, r25
            break;
        offset += interval;
        length -= interval;
    3790:	46 18       	sub	r4, r6
    3792:	57 08       	sbc	r5, r7
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    3794:	46 14       	cp	r4, r6
    3796:	57 04       	cpc	r5, r7
    3798:	28 f6       	brcc	.-118    	; 0x3724 <sd_raw_read_interval+0x82>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	09 c0       	rjmp	.+18     	; 0x37b0 <sd_raw_read_interval+0x10e>
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	07 c0       	rjmp	.+14     	; 0x37b0 <sd_raw_read_interval+0x10e>
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	05 c0       	rjmp	.+10     	; 0x37b0 <sd_raw_read_interval+0x10e>
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	03 c0       	rjmp	.+6      	; 0x37b0 <sd_raw_read_interval+0x10e>
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	01 c0       	rjmp	.+2      	; 0x37b0 <sd_raw_read_interval+0x10e>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    37ae:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    37b0:	64 96       	adiw	r28, 0x14	; 20
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	f8 94       	cli
    37b6:	de bf       	out	0x3e, r29	; 62
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	cd bf       	out	0x3d, r28	; 61
    37bc:	df 91       	pop	r29
    37be:	cf 91       	pop	r28
    37c0:	1f 91       	pop	r17
    37c2:	0f 91       	pop	r16
    37c4:	ff 90       	pop	r15
    37c6:	ef 90       	pop	r14
    37c8:	df 90       	pop	r13
    37ca:	cf 90       	pop	r12
    37cc:	bf 90       	pop	r11
    37ce:	af 90       	pop	r10
    37d0:	9f 90       	pop	r9
    37d2:	8f 90       	pop	r8
    37d4:	7f 90       	pop	r7
    37d6:	6f 90       	pop	r6
    37d8:	5f 90       	pop	r5
    37da:	4f 90       	pop	r4
    37dc:	3f 90       	pop	r3
    37de:	2f 90       	pop	r2
    37e0:	08 95       	ret

000037e2 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    37e2:	2f 92       	push	r2
    37e4:	3f 92       	push	r3
    37e6:	4f 92       	push	r4
    37e8:	5f 92       	push	r5
    37ea:	6f 92       	push	r6
    37ec:	7f 92       	push	r7
    37ee:	8f 92       	push	r8
    37f0:	9f 92       	push	r9
    37f2:	af 92       	push	r10
    37f4:	bf 92       	push	r11
    37f6:	cf 92       	push	r12
    37f8:	df 92       	push	r13
    37fa:	ef 92       	push	r14
    37fc:	ff 92       	push	r15
    37fe:	0f 93       	push	r16
    3800:	1f 93       	push	r17
    3802:	cf 93       	push	r28
    3804:	df 93       	push	r29
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62
    380a:	69 97       	sbiw	r28, 0x19	; 25
    380c:	0f b6       	in	r0, 0x3f	; 63
    380e:	f8 94       	cli
    3810:	de bf       	out	0x3e, r29	; 62
    3812:	0f be       	out	0x3f, r0	; 63
    3814:	cd bf       	out	0x3d, r28	; 61
    3816:	29 83       	std	Y+1, r18	; 0x01
    3818:	3a 83       	std	Y+2, r19	; 0x02
    381a:	4b 83       	std	Y+3, r20	; 0x03
    381c:	5c 83       	std	Y+4, r21	; 0x04
    381e:	6d 83       	std	Y+5, r22	; 0x05
    3820:	7e 83       	std	Y+6, r23	; 0x06
    3822:	8f 83       	std	Y+7, r24	; 0x07
    3824:	98 87       	std	Y+8, r25	; 0x08
    3826:	38 01       	movw	r6, r16
    3828:	27 01       	movw	r4, r14
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    382a:	ef 28       	or	r14, r15
    382c:	09 f4       	brne	.+2      	; 0x3830 <sd_raw_write+0x4e>
    382e:	07 c1       	rjmp	.+526    	; 0x3a3e <sd_raw_write+0x25c>
    3830:	0f 2e       	mov	r0, r31
    3832:	f6 e2       	ldi	r31, 0x26	; 38
    3834:	2f 2e       	mov	r2, r31
    3836:	f4 e0       	ldi	r31, 0x04	; 4
    3838:	3f 2e       	mov	r3, r31
    383a:	f0 2d       	mov	r31, r0
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    383c:	29 81       	ldd	r18, Y+1	; 0x01
    383e:	3a 81       	ldd	r19, Y+2	; 0x02
    3840:	31 70       	andi	r19, 0x01	; 1
    3842:	39 8f       	std	Y+25, r19	; 0x19
    3844:	28 8f       	std	Y+24, r18	; 0x18
        block_address = offset - block_offset;
    3846:	40 e0       	ldi	r20, 0x00	; 0
    3848:	50 e0       	ldi	r21, 0x00	; 0
    384a:	60 e0       	ldi	r22, 0x00	; 0
    384c:	70 e0       	ldi	r23, 0x00	; 0
    384e:	cb 01       	movw	r24, r22
    3850:	29 87       	std	Y+9, r18	; 0x09
    3852:	3a 87       	std	Y+10, r19	; 0x0a
    3854:	4b 87       	std	Y+11, r20	; 0x0b
    3856:	5c 87       	std	Y+12, r21	; 0x0c
    3858:	6d 87       	std	Y+13, r22	; 0x0d
    385a:	7e 87       	std	Y+14, r23	; 0x0e
    385c:	8f 87       	std	Y+15, r24	; 0x0f
    385e:	98 8b       	std	Y+16, r25	; 0x10
    3860:	29 81       	ldd	r18, Y+1	; 0x01
    3862:	3a 81       	ldd	r19, Y+2	; 0x02
    3864:	4b 81       	ldd	r20, Y+3	; 0x03
    3866:	5c 81       	ldd	r21, Y+4	; 0x04
    3868:	6d 81       	ldd	r22, Y+5	; 0x05
    386a:	7e 81       	ldd	r23, Y+6	; 0x06
    386c:	8f 81       	ldd	r24, Y+7	; 0x07
    386e:	98 85       	ldd	r25, Y+8	; 0x08
    3870:	a9 84       	ldd	r10, Y+9	; 0x09
    3872:	ba 84       	ldd	r11, Y+10	; 0x0a
    3874:	c1 2c       	mov	r12, r1
    3876:	d1 2c       	mov	r13, r1
    3878:	e1 2c       	mov	r14, r1
    387a:	f1 2c       	mov	r15, r1
    387c:	00 e0       	ldi	r16, 0x00	; 0
    387e:	10 e0       	ldi	r17, 0x00	; 0
    3880:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__subdi3>
    3884:	29 87       	std	Y+9, r18	; 0x09
    3886:	39 8b       	std	Y+17, r19	; 0x11
    3888:	4a 8b       	std	Y+18, r20	; 0x12
    388a:	5b 8b       	std	Y+19, r21	; 0x13
    388c:	6c 8b       	std	Y+20, r22	; 0x14
    388e:	7d 8b       	std	Y+21, r23	; 0x15
    3890:	8e 8b       	std	Y+22, r24	; 0x16
    3892:	9f 8b       	std	Y+23, r25	; 0x17
    3894:	81 2c       	mov	r8, r1
    3896:	68 94       	set
    3898:	99 24       	eor	r9, r9
    389a:	91 f8       	bld	r9, 1
    389c:	68 8d       	ldd	r22, Y+24	; 0x18
    389e:	79 8d       	ldd	r23, Y+25	; 0x19
    38a0:	86 1a       	sub	r8, r22
    38a2:	97 0a       	sbc	r9, r23
    38a4:	48 14       	cp	r4, r8
    38a6:	59 04       	cpc	r5, r9
    38a8:	08 f4       	brcc	.+2      	; 0x38ac <sd_raw_write+0xca>
    38aa:	42 01       	movw	r8, r4
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    38ac:	a0 90 1e 02 	lds	r10, 0x021E	; 0x80021e <raw_block_address>
    38b0:	b0 90 1f 02 	lds	r11, 0x021F	; 0x80021f <raw_block_address+0x1>
    38b4:	c0 90 20 02 	lds	r12, 0x0220	; 0x800220 <raw_block_address+0x2>
    38b8:	d0 90 21 02 	lds	r13, 0x0221	; 0x800221 <raw_block_address+0x3>
    38bc:	e0 90 22 02 	lds	r14, 0x0222	; 0x800222 <raw_block_address+0x4>
    38c0:	f0 90 23 02 	lds	r15, 0x0223	; 0x800223 <raw_block_address+0x5>
    38c4:	00 91 24 02 	lds	r16, 0x0224	; 0x800224 <raw_block_address+0x6>
    38c8:	10 91 25 02 	lds	r17, 0x0225	; 0x800225 <raw_block_address+0x7>
    38cc:	29 85       	ldd	r18, Y+9	; 0x09
    38ce:	39 89       	ldd	r19, Y+17	; 0x11
    38d0:	4a 89       	ldd	r20, Y+18	; 0x12
    38d2:	5b 89       	ldd	r21, Y+19	; 0x13
    38d4:	6c 89       	ldd	r22, Y+20	; 0x14
    38d6:	7d 89       	ldd	r23, Y+21	; 0x15
    38d8:	8e 89       	ldd	r24, Y+22	; 0x16
    38da:	9f 89       	ldd	r25, Y+23	; 0x17
    38dc:	0e 94 79 21 	call	0x42f2	; 0x42f2 <__cmpdi2>
    38e0:	c1 f1       	breq	.+112    	; 0x3952 <sd_raw_write+0x170>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    38e2:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <sd_raw_sync>
    38e6:	88 23       	and	r24, r24
    38e8:	09 f4       	brne	.+2      	; 0x38ec <sd_raw_write+0x10a>
    38ea:	ac c0       	rjmp	.+344    	; 0x3a44 <sd_raw_write+0x262>
                return 0;
#endif

            if(block_offset || write_length < 512)
    38ec:	88 8d       	ldd	r24, Y+24	; 0x18
    38ee:	99 8d       	ldd	r25, Y+25	; 0x19
    38f0:	89 2b       	or	r24, r25
    38f2:	21 f4       	brne	.+8      	; 0x38fc <sd_raw_write+0x11a>
    38f4:	81 14       	cp	r8, r1
    38f6:	92 e0       	ldi	r25, 0x02	; 2
    38f8:	99 06       	cpc	r9, r25
    38fa:	98 f4       	brcc	.+38     	; 0x3922 <sd_raw_write+0x140>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    38fc:	e1 2c       	mov	r14, r1
    38fe:	68 94       	set
    3900:	ff 24       	eor	r15, r15
    3902:	f1 f8       	bld	r15, 1
    3904:	06 e2       	ldi	r16, 0x26	; 38
    3906:	12 e0       	ldi	r17, 0x02	; 2
    3908:	29 85       	ldd	r18, Y+9	; 0x09
    390a:	39 89       	ldd	r19, Y+17	; 0x11
    390c:	4a 89       	ldd	r20, Y+18	; 0x12
    390e:	5b 89       	ldd	r21, Y+19	; 0x13
    3910:	6c 89       	ldd	r22, Y+20	; 0x14
    3912:	7d 89       	ldd	r23, Y+21	; 0x15
    3914:	8e 89       	ldd	r24, Y+22	; 0x16
    3916:	9f 89       	ldd	r25, Y+23	; 0x17
    3918:	0e 94 1e 19 	call	0x323c	; 0x323c <sd_raw_read>
    391c:	88 23       	and	r24, r24
    391e:	09 f4       	brne	.+2      	; 0x3922 <sd_raw_write+0x140>
    3920:	91 c0       	rjmp	.+290    	; 0x3a44 <sd_raw_write+0x262>
                    return 0;
            }
            raw_block_address = block_address;
    3922:	e9 85       	ldd	r30, Y+9	; 0x09
    3924:	e0 93 1e 02 	sts	0x021E, r30	; 0x80021e <raw_block_address>
    3928:	f9 89       	ldd	r31, Y+17	; 0x11
    392a:	f0 93 1f 02 	sts	0x021F, r31	; 0x80021f <raw_block_address+0x1>
    392e:	2a 89       	ldd	r18, Y+18	; 0x12
    3930:	20 93 20 02 	sts	0x0220, r18	; 0x800220 <raw_block_address+0x2>
    3934:	3b 89       	ldd	r19, Y+19	; 0x13
    3936:	30 93 21 02 	sts	0x0221, r19	; 0x800221 <raw_block_address+0x3>
    393a:	4c 89       	ldd	r20, Y+20	; 0x14
    393c:	40 93 22 02 	sts	0x0222, r20	; 0x800222 <raw_block_address+0x4>
    3940:	5d 89       	ldd	r21, Y+21	; 0x15
    3942:	50 93 23 02 	sts	0x0223, r21	; 0x800223 <raw_block_address+0x5>
    3946:	6e 89       	ldd	r22, Y+22	; 0x16
    3948:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <raw_block_address+0x6>
    394c:	7f 89       	ldd	r23, Y+23	; 0x17
    394e:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <raw_block_address+0x7>
        }

        if(buffer != raw_block)
    3952:	86 e2       	ldi	r24, 0x26	; 38
    3954:	68 16       	cp	r6, r24
    3956:	82 e0       	ldi	r24, 0x02	; 2
    3958:	78 06       	cpc	r7, r24
    395a:	71 f0       	breq	.+28     	; 0x3978 <sd_raw_write+0x196>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    395c:	a4 01       	movw	r20, r8
    395e:	b3 01       	movw	r22, r6
    3960:	88 8d       	ldd	r24, Y+24	; 0x18
    3962:	99 8d       	ldd	r25, Y+25	; 0x19
    3964:	8a 5d       	subi	r24, 0xDA	; 218
    3966:	9d 4f       	sbci	r25, 0xFD	; 253
    3968:	0e 94 8e 21 	call	0x431c	; 0x431c <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    396c:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <raw_block_written>

            if(length == write_length)
    3970:	48 14       	cp	r4, r8
    3972:	59 04       	cpc	r5, r9
    3974:	09 f4       	brne	.+2      	; 0x3978 <sd_raw_write+0x196>
    3976:	65 c0       	rjmp	.+202    	; 0x3a42 <sd_raw_write+0x260>
                return 1;
#endif
        }

        /* address card */
        select_card();
    3978:	2a 98       	cbi	0x05, 2	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    397a:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <sd_raw_card_type>
    397e:	82 ff       	sbrs	r24, 2
    3980:	10 c0       	rjmp	.+32     	; 0x39a2 <sd_raw_write+0x1c0>
    3982:	29 85       	ldd	r18, Y+9	; 0x09
    3984:	39 89       	ldd	r19, Y+17	; 0x11
    3986:	4a 89       	ldd	r20, Y+18	; 0x12
    3988:	5b 89       	ldd	r21, Y+19	; 0x13
    398a:	6c 89       	ldd	r22, Y+20	; 0x14
    398c:	7d 89       	ldd	r23, Y+21	; 0x15
    398e:	8e 89       	ldd	r24, Y+22	; 0x16
    3990:	9f 89       	ldd	r25, Y+23	; 0x17
    3992:	09 e0       	ldi	r16, 0x09	; 9
    3994:	0e 94 3f 21 	call	0x427e	; 0x427e <__lshrdi3>
    3998:	64 2f       	mov	r22, r20
    399a:	75 2f       	mov	r23, r21
    399c:	42 2f       	mov	r20, r18
    399e:	53 2f       	mov	r21, r19
    39a0:	04 c0       	rjmp	.+8      	; 0x39aa <sd_raw_write+0x1c8>
    39a2:	49 85       	ldd	r20, Y+9	; 0x09
    39a4:	59 89       	ldd	r21, Y+17	; 0x11
    39a6:	6a 89       	ldd	r22, Y+18	; 0x12
    39a8:	7b 89       	ldd	r23, Y+19	; 0x13
    39aa:	88 e1       	ldi	r24, 0x18	; 24
    39ac:	0e 94 b6 18 	call	0x316c	; 0x316c <sd_raw_send_command>
    39b0:	88 23       	and	r24, r24
    39b2:	19 f0       	breq	.+6      	; 0x39ba <sd_raw_write+0x1d8>
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
#endif
        {
            unselect_card();
    39b4:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    39b6:	80 e0       	ldi	r24, 0x00	; 0
    39b8:	45 c0       	rjmp	.+138    	; 0x3a44 <sd_raw_write+0x262>
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);
    39ba:	8e ef       	ldi	r24, 0xFE	; 254
    39bc:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_send_byte>
    39c0:	06 e2       	ldi	r16, 0x26	; 38
    39c2:	12 e0       	ldi	r17, 0x02	; 2

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    39c4:	f8 01       	movw	r30, r16
    39c6:	81 91       	ld	r24, Z+
    39c8:	8f 01       	movw	r16, r30
    39ca:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_send_byte>
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    39ce:	02 15       	cp	r16, r2
    39d0:	13 05       	cpc	r17, r3
    39d2:	c1 f7       	brne	.-16     	; 0x39c4 <sd_raw_write+0x1e2>
            sd_raw_send_byte(*cache++);

        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
    39d4:	8f ef       	ldi	r24, 0xFF	; 255
    39d6:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_send_byte>
        sd_raw_send_byte(0xff);
    39da:	8f ef       	ldi	r24, 0xFF	; 255
    39dc:	0e 94 a4 18 	call	0x3148	; 0x3148 <sd_raw_send_byte>

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    39e0:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
    39e4:	8f 3f       	cpi	r24, 0xFF	; 255
    39e6:	e1 f7       	brne	.-8      	; 0x39e0 <sd_raw_write+0x1fe>
        sd_raw_rec_byte();
    39e8:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>

        /* deaddress card */
        unselect_card();
    39ec:	2a 9a       	sbi	0x05, 2	; 5

        buffer += write_length;
    39ee:	68 0c       	add	r6, r8
    39f0:	79 1c       	adc	r7, r9
        offset += write_length;
    39f2:	54 01       	movw	r10, r8
    39f4:	28 2d       	mov	r18, r8
    39f6:	3b 2d       	mov	r19, r11
    39f8:	40 e0       	ldi	r20, 0x00	; 0
    39fa:	50 e0       	ldi	r21, 0x00	; 0
    39fc:	60 e0       	ldi	r22, 0x00	; 0
    39fe:	70 e0       	ldi	r23, 0x00	; 0
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	a9 80       	ldd	r10, Y+1	; 0x01
    3a06:	ba 80       	ldd	r11, Y+2	; 0x02
    3a08:	cb 80       	ldd	r12, Y+3	; 0x03
    3a0a:	dc 80       	ldd	r13, Y+4	; 0x04
    3a0c:	ed 80       	ldd	r14, Y+5	; 0x05
    3a0e:	fe 80       	ldd	r15, Y+6	; 0x06
    3a10:	0f 81       	ldd	r16, Y+7	; 0x07
    3a12:	18 85       	ldd	r17, Y+8	; 0x08
    3a14:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
    3a18:	29 83       	std	Y+1, r18	; 0x01
    3a1a:	3a 83       	std	Y+2, r19	; 0x02
    3a1c:	4b 83       	std	Y+3, r20	; 0x03
    3a1e:	5c 83       	std	Y+4, r21	; 0x04
    3a20:	6d 83       	std	Y+5, r22	; 0x05
    3a22:	7e 83       	std	Y+6, r23	; 0x06
    3a24:	8f 83       	std	Y+7, r24	; 0x07
    3a26:	98 87       	std	Y+8, r25	; 0x08
        length -= write_length;
    3a28:	48 18       	sub	r4, r8
    3a2a:	59 08       	sbc	r5, r9

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    3a2c:	f1 e0       	ldi	r31, 0x01	; 1
    3a2e:	f0 93 1d 02 	sts	0x021D, r31	; 0x80021d <raw_block_written>
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    3a32:	41 14       	cp	r4, r1
    3a34:	51 04       	cpc	r5, r1
    3a36:	09 f0       	breq	.+2      	; 0x3a3a <sd_raw_write+0x258>
    3a38:	01 cf       	rjmp	.-510    	; 0x383c <sd_raw_write+0x5a>
#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
#endif
    }

    return 1;
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	03 c0       	rjmp	.+6      	; 0x3a44 <sd_raw_write+0x262>
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	01 c0       	rjmp	.+2      	; 0x3a44 <sd_raw_write+0x262>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;

            if(length == write_length)
                return 1;
    3a42:	81 e0       	ldi	r24, 0x01	; 1
        raw_block_written = 1;
#endif
    }

    return 1;
}
    3a44:	69 96       	adiw	r28, 0x19	; 25
    3a46:	0f b6       	in	r0, 0x3f	; 63
    3a48:	f8 94       	cli
    3a4a:	de bf       	out	0x3e, r29	; 62
    3a4c:	0f be       	out	0x3f, r0	; 63
    3a4e:	cd bf       	out	0x3d, r28	; 61
    3a50:	df 91       	pop	r29
    3a52:	cf 91       	pop	r28
    3a54:	1f 91       	pop	r17
    3a56:	0f 91       	pop	r16
    3a58:	ff 90       	pop	r15
    3a5a:	ef 90       	pop	r14
    3a5c:	df 90       	pop	r13
    3a5e:	cf 90       	pop	r12
    3a60:	bf 90       	pop	r11
    3a62:	af 90       	pop	r10
    3a64:	9f 90       	pop	r9
    3a66:	8f 90       	pop	r8
    3a68:	7f 90       	pop	r7
    3a6a:	6f 90       	pop	r6
    3a6c:	5f 90       	pop	r5
    3a6e:	4f 90       	pop	r4
    3a70:	3f 90       	pop	r3
    3a72:	2f 90       	pop	r2
    3a74:	08 95       	ret

00003a76 <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    3a76:	2f 92       	push	r2
    3a78:	3f 92       	push	r3
    3a7a:	4f 92       	push	r4
    3a7c:	5f 92       	push	r5
    3a7e:	6f 92       	push	r6
    3a80:	7f 92       	push	r7
    3a82:	8f 92       	push	r8
    3a84:	9f 92       	push	r9
    3a86:	af 92       	push	r10
    3a88:	bf 92       	push	r11
    3a8a:	cf 92       	push	r12
    3a8c:	df 92       	push	r13
    3a8e:	ef 92       	push	r14
    3a90:	ff 92       	push	r15
    3a92:	0f 93       	push	r16
    3a94:	1f 93       	push	r17
    3a96:	cf 93       	push	r28
    3a98:	df 93       	push	r29
    3a9a:	cd b7       	in	r28, 0x3d	; 61
    3a9c:	de b7       	in	r29, 0x3e	; 62
    3a9e:	28 97       	sbiw	r28, 0x08	; 8
    3aa0:	0f b6       	in	r0, 0x3f	; 63
    3aa2:	f8 94       	cli
    3aa4:	de bf       	out	0x3e, r29	; 62
    3aa6:	0f be       	out	0x3f, r0	; 63
    3aa8:	cd bf       	out	0x3d, r28	; 61
    3aaa:	56 2e       	mov	r5, r22
    3aac:	47 2e       	mov	r4, r23
    3aae:	1a 83       	std	Y+2, r17	; 0x02
    3ab0:	09 83       	std	Y+1, r16	; 0x01
    3ab2:	dc 82       	std	Y+4, r13	; 0x04
    3ab4:	cb 82       	std	Y+3, r12	; 0x03
    3ab6:	be 82       	std	Y+6, r11	; 0x06
    3ab8:	ad 82       	std	Y+5, r10	; 0x05
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    3aba:	01 2b       	or	r16, r17
    3abc:	09 f4       	brne	.+2      	; 0x3ac0 <sd_raw_write_interval+0x4a>
    3abe:	48 c0       	rjmp	.+144    	; 0x3b50 <sd_raw_write_interval+0xda>
    3ac0:	cd 28       	or	r12, r13
    3ac2:	09 f4       	brne	.+2      	; 0x3ac6 <sd_raw_write_interval+0x50>
    3ac4:	47 c0       	rjmp	.+142    	; 0x3b54 <sd_raw_write_interval+0xde>
    3ac6:	f8 86       	std	Y+8, r15	; 0x08
    3ac8:	ef 82       	std	Y+7, r14	; 0x07
    3aca:	a2 2e       	mov	r10, r18
    3acc:	b3 2e       	mov	r11, r19
    3ace:	c4 2e       	mov	r12, r20
    3ad0:	d5 2e       	mov	r13, r21
    3ad2:	98 2e       	mov	r9, r24
    3ad4:	89 2e       	mov	r8, r25
    3ad6:	17 01       	movw	r2, r14
    3ad8:	32 c0       	rjmp	.+100    	; 0x3b3e <sd_raw_write_interval+0xc8>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
    3ada:	8f 81       	ldd	r24, Y+7	; 0x07
    3adc:	98 85       	ldd	r25, Y+8	; 0x08
    3ade:	86 15       	cp	r24, r6
    3ae0:	97 05       	cpc	r25, r7
    3ae2:	d0 f1       	brcs	.+116    	; 0x3b58 <sd_raw_write_interval+0xe2>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    3ae4:	73 01       	movw	r14, r6
    3ae6:	09 81       	ldd	r16, Y+1	; 0x01
    3ae8:	1a 81       	ldd	r17, Y+2	; 0x02
    3aea:	2a 2d       	mov	r18, r10
    3aec:	3b 2d       	mov	r19, r11
    3aee:	4c 2d       	mov	r20, r12
    3af0:	5d 2d       	mov	r21, r13
    3af2:	65 2d       	mov	r22, r5
    3af4:	74 2d       	mov	r23, r4
    3af6:	89 2d       	mov	r24, r9
    3af8:	98 2d       	mov	r25, r8
    3afa:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <sd_raw_write>
    3afe:	88 23       	and	r24, r24
    3b00:	09 f4       	brne	.+2      	; 0x3b04 <sd_raw_write_interval+0x8e>
    3b02:	58 c0       	rjmp	.+176    	; 0x3bb4 <sd_raw_write_interval+0x13e>
            return 0;

        offset += bytes_to_write;
    3b04:	a3 01       	movw	r20, r6
    3b06:	26 2d       	mov	r18, r6
    3b08:	35 2f       	mov	r19, r21
    3b0a:	40 e0       	ldi	r20, 0x00	; 0
    3b0c:	50 e0       	ldi	r21, 0x00	; 0
    3b0e:	60 e0       	ldi	r22, 0x00	; 0
    3b10:	70 e0       	ldi	r23, 0x00	; 0
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	e5 2c       	mov	r14, r5
    3b18:	f4 2c       	mov	r15, r4
    3b1a:	09 2d       	mov	r16, r9
    3b1c:	18 2d       	mov	r17, r8
    3b1e:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__adddi3>
    3b22:	a2 2e       	mov	r10, r18
    3b24:	b3 2e       	mov	r11, r19
    3b26:	c4 2e       	mov	r12, r20
    3b28:	d5 2e       	mov	r13, r21
    3b2a:	56 2e       	mov	r5, r22
    3b2c:	47 2e       	mov	r4, r23
    3b2e:	98 2e       	mov	r9, r24
    3b30:	89 2e       	mov	r8, r25
        length -= bytes_to_write;
    3b32:	ef 81       	ldd	r30, Y+7	; 0x07
    3b34:	f8 85       	ldd	r31, Y+8	; 0x08
    3b36:	e6 19       	sub	r30, r6
    3b38:	f7 09       	sbc	r31, r7
    3b3a:	f8 87       	std	Y+8, r31	; 0x08
    3b3c:	ef 83       	std	Y+7, r30	; 0x07

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    3b3e:	21 14       	cp	r2, r1
    3b40:	31 04       	cpc	r3, r1
    3b42:	21 f1       	breq	.+72     	; 0x3b8c <sd_raw_write_interval+0x116>
    3b44:	8f 81       	ldd	r24, Y+7	; 0x07
    3b46:	98 85       	ldd	r25, Y+8	; 0x08
    3b48:	89 2b       	or	r24, r25
    3b4a:	61 f4       	brne	.+24     	; 0x3b64 <sd_raw_write_interval+0xee>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	32 c0       	rjmp	.+100    	; 0x3bb4 <sd_raw_write_interval+0x13e>
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
        return 0;
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	30 c0       	rjmp	.+96     	; 0x3bb4 <sd_raw_write_interval+0x13e>
    3b54:	80 e0       	ldi	r24, 0x00	; 0
    3b56:	2e c0       	rjmp	.+92     	; 0x3bb4 <sd_raw_write_interval+0x13e>
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
            return 0;
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	2c c0       	rjmp	.+88     	; 0x3bb4 <sd_raw_write_interval+0x13e>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	2a c0       	rjmp	.+84     	; 0x3bb4 <sd_raw_write_interval+0x13e>
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	28 c0       	rjmp	.+80     	; 0x3bb4 <sd_raw_write_interval+0x13e>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    3b64:	ed 80       	ldd	r14, Y+5	; 0x05
    3b66:	fe 80       	ldd	r15, Y+6	; 0x06
    3b68:	0a 2d       	mov	r16, r10
    3b6a:	1b 2d       	mov	r17, r11
    3b6c:	2c 2d       	mov	r18, r12
    3b6e:	3d 2d       	mov	r19, r13
    3b70:	45 2d       	mov	r20, r5
    3b72:	54 2d       	mov	r21, r4
    3b74:	69 2d       	mov	r22, r9
    3b76:	78 2d       	mov	r23, r8
    3b78:	89 81       	ldd	r24, Y+1	; 0x01
    3b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b7c:	eb 81       	ldd	r30, Y+3	; 0x03
    3b7e:	fc 81       	ldd	r31, Y+4	; 0x04
    3b80:	09 95       	icall
    3b82:	3c 01       	movw	r6, r24
        if(!bytes_to_write)
    3b84:	89 2b       	or	r24, r25
    3b86:	09 f0       	breq	.+2      	; 0x3b8a <sd_raw_write_interval+0x114>
    3b88:	a8 cf       	rjmp	.-176    	; 0x3ada <sd_raw_write_interval+0x64>
    3b8a:	e8 cf       	rjmp	.-48     	; 0x3b5c <sd_raw_write_interval+0xe6>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    3b8c:	ed 80       	ldd	r14, Y+5	; 0x05
    3b8e:	fe 80       	ldd	r15, Y+6	; 0x06
    3b90:	0a 2d       	mov	r16, r10
    3b92:	1b 2d       	mov	r17, r11
    3b94:	2c 2d       	mov	r18, r12
    3b96:	3d 2d       	mov	r19, r13
    3b98:	45 2d       	mov	r20, r5
    3b9a:	54 2d       	mov	r21, r4
    3b9c:	69 2d       	mov	r22, r9
    3b9e:	78 2d       	mov	r23, r8
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba4:	eb 81       	ldd	r30, Y+3	; 0x03
    3ba6:	fc 81       	ldd	r31, Y+4	; 0x04
    3ba8:	09 95       	icall
    3baa:	3c 01       	movw	r6, r24
        if(!bytes_to_write)
    3bac:	89 2b       	or	r24, r25
    3bae:	09 f0       	breq	.+2      	; 0x3bb2 <sd_raw_write_interval+0x13c>
    3bb0:	99 cf       	rjmp	.-206    	; 0x3ae4 <sd_raw_write_interval+0x6e>
    3bb2:	d6 cf       	rjmp	.-84     	; 0x3b60 <sd_raw_write_interval+0xea>
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    3bb4:	28 96       	adiw	r28, 0x08	; 8
    3bb6:	0f b6       	in	r0, 0x3f	; 63
    3bb8:	f8 94       	cli
    3bba:	de bf       	out	0x3e, r29	; 62
    3bbc:	0f be       	out	0x3f, r0	; 63
    3bbe:	cd bf       	out	0x3d, r28	; 61
    3bc0:	df 91       	pop	r29
    3bc2:	cf 91       	pop	r28
    3bc4:	1f 91       	pop	r17
    3bc6:	0f 91       	pop	r16
    3bc8:	ff 90       	pop	r15
    3bca:	ef 90       	pop	r14
    3bcc:	df 90       	pop	r13
    3bce:	cf 90       	pop	r12
    3bd0:	bf 90       	pop	r11
    3bd2:	af 90       	pop	r10
    3bd4:	9f 90       	pop	r9
    3bd6:	8f 90       	pop	r8
    3bd8:	7f 90       	pop	r7
    3bda:	6f 90       	pop	r6
    3bdc:	5f 90       	pop	r5
    3bde:	4f 90       	pop	r4
    3be0:	3f 90       	pop	r3
    3be2:	2f 90       	pop	r2
    3be4:	08 95       	ret

00003be6 <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    3be6:	9f 92       	push	r9
    3be8:	af 92       	push	r10
    3bea:	bf 92       	push	r11
    3bec:	cf 92       	push	r12
    3bee:	df 92       	push	r13
    3bf0:	ef 92       	push	r14
    3bf2:	ff 92       	push	r15
    3bf4:	0f 93       	push	r16
    3bf6:	1f 93       	push	r17
    3bf8:	cf 93       	push	r28
    3bfa:	df 93       	push	r29
    if(!info || !sd_raw_available())
    3bfc:	00 97       	sbiw	r24, 0x00	; 0
    3bfe:	09 f4       	brne	.+2      	; 0x3c02 <sd_raw_get_info+0x1c>
    3c00:	24 c1       	rjmp	.+584    	; 0x3e4a <sd_raw_get_info+0x264>
    3c02:	7c 01       	movw	r14, r24
        return 0;

    memset(info, 0, sizeof(*info));
    3c04:	8d e1       	ldi	r24, 0x1D	; 29
    3c06:	f7 01       	movw	r30, r14
    3c08:	11 92       	st	Z+, r1
    3c0a:	8a 95       	dec	r24
    3c0c:	e9 f7       	brne	.-6      	; 0x3c08 <sd_raw_get_info+0x22>

    select_card();
    3c0e:	2a 98       	cbi	0x05, 2	; 5

    /* read cid register */
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    3c10:	40 e0       	ldi	r20, 0x00	; 0
    3c12:	50 e0       	ldi	r21, 0x00	; 0
    3c14:	ba 01       	movw	r22, r20
    3c16:	8a e0       	ldi	r24, 0x0A	; 10
    3c18:	0e 94 b6 18 	call	0x316c	; 0x316c <sd_raw_send_command>
    3c1c:	c8 2e       	mov	r12, r24
    3c1e:	88 23       	and	r24, r24
    3c20:	19 f0       	breq	.+6      	; 0x3c28 <sd_raw_get_info+0x42>
    {
        unselect_card();
    3c22:	2a 9a       	sbi	0x05, 2	; 5
        return 0;
    3c24:	c1 2c       	mov	r12, r1
    3c26:	12 c1       	rjmp	.+548    	; 0x3e4c <sd_raw_get_info+0x266>
    }
    while(sd_raw_rec_byte() != 0xfe);
    3c28:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
    3c2c:	8e 3f       	cpi	r24, 0xFE	; 254
    3c2e:	e1 f7       	brne	.-8      	; 0x3c28 <sd_raw_get_info+0x42>
    3c30:	e7 01       	movw	r28, r14
    3c32:	21 96       	adiw	r28, 0x01	; 1
    3c34:	00 e6       	ldi	r16, 0x60	; 96
    3c36:	10 e0       	ldi	r17, 0x00	; 0
    3c38:	dd 24       	eor	r13, r13
    3c3a:	d3 94       	inc	r13
    3c3c:	04 c0       	rjmp	.+8      	; 0x3c46 <sd_raw_get_info+0x60>
    3c3e:	d3 94       	inc	r13
    3c40:	08 50       	subi	r16, 0x08	; 8
    3c42:	11 09       	sbc	r17, r1
    3c44:	21 96       	adiw	r28, 0x01	; 1
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();
    3c46:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
    3c4a:	ef ef       	ldi	r30, 0xFF	; 255
    3c4c:	ed 0d       	add	r30, r13

        switch(i)
    3c4e:	4e 2f       	mov	r20, r30
    3c50:	50 e0       	ldi	r21, 0x00	; 0
    3c52:	4f 30       	cpi	r20, 0x0F	; 15
    3c54:	51 05       	cpc	r21, r1
    3c56:	c8 f5       	brcc	.+114    	; 0x3cca <sd_raw_get_info+0xe4>
    3c58:	fa 01       	movw	r30, r20
    3c5a:	ec 5c       	subi	r30, 0xCC	; 204
    3c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5e:	0c 94 ab 20 	jmp	0x4156	; 0x4156 <__tablejump2__>
        {
            case 0:
                info->manufacturer = b;
    3c62:	f7 01       	movw	r30, r14
    3c64:	80 83       	st	Z, r24
                break;
    3c66:	eb cf       	rjmp	.-42     	; 0x3c3e <sd_raw_get_info+0x58>
    3c68:	fe 01       	movw	r30, r28
    3c6a:	31 97       	sbiw	r30, 0x01	; 1
            case 1:
            case 2:
                info->oem[i - 1] = b;
    3c6c:	80 83       	st	Z, r24
                break;
    3c6e:	2d c0       	rjmp	.+90     	; 0x3cca <sd_raw_get_info+0xe4>
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
    3c70:	88 83       	st	Y, r24
                break;
    3c72:	2b c0       	rjmp	.+86     	; 0x3cca <sd_raw_get_info+0xe4>
            case 8:
                info->revision = b;
    3c74:	f7 01       	movw	r30, r14
    3c76:	82 87       	std	Z+10, r24	; 0x0a
                break;
    3c78:	e2 cf       	rjmp	.-60     	; 0x3c3e <sd_raw_get_info+0x58>
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (uint32_t) b << ((12 - i) * 8);
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	a0 e0       	ldi	r26, 0x00	; 0
    3c7e:	b0 e0       	ldi	r27, 0x00	; 0
    3c80:	00 2e       	mov	r0, r16
    3c82:	04 c0       	rjmp	.+8      	; 0x3c8c <sd_raw_get_info+0xa6>
    3c84:	88 0f       	add	r24, r24
    3c86:	99 1f       	adc	r25, r25
    3c88:	aa 1f       	adc	r26, r26
    3c8a:	bb 1f       	adc	r27, r27
    3c8c:	0a 94       	dec	r0
    3c8e:	d2 f7       	brpl	.-12     	; 0x3c84 <sd_raw_get_info+0x9e>
    3c90:	f7 01       	movw	r30, r14
    3c92:	43 85       	ldd	r20, Z+11	; 0x0b
    3c94:	54 85       	ldd	r21, Z+12	; 0x0c
    3c96:	65 85       	ldd	r22, Z+13	; 0x0d
    3c98:	76 85       	ldd	r23, Z+14	; 0x0e
    3c9a:	84 2b       	or	r24, r20
    3c9c:	95 2b       	or	r25, r21
    3c9e:	a6 2b       	or	r26, r22
    3ca0:	b7 2b       	or	r27, r23
    3ca2:	83 87       	std	Z+11, r24	; 0x0b
    3ca4:	94 87       	std	Z+12, r25	; 0x0c
    3ca6:	a5 87       	std	Z+13, r26	; 0x0d
    3ca8:	b6 87       	std	Z+14, r27	; 0x0e
                break;
    3caa:	0f c0       	rjmp	.+30     	; 0x3cca <sd_raw_get_info+0xe4>
            case 13:
                info->manufacturing_year = b << 4;
    3cac:	82 95       	swap	r24
    3cae:	80 7f       	andi	r24, 0xF0	; 240
    3cb0:	f7 01       	movw	r30, r14
    3cb2:	87 87       	std	Z+15, r24	; 0x0f
                break;
    3cb4:	c4 cf       	rjmp	.-120    	; 0x3c3e <sd_raw_get_info+0x58>
            case 14:
                info->manufacturing_year |= b >> 4;
    3cb6:	98 2f       	mov	r25, r24
    3cb8:	92 95       	swap	r25
    3cba:	9f 70       	andi	r25, 0x0F	; 15
    3cbc:	f7 01       	movw	r30, r14
    3cbe:	27 85       	ldd	r18, Z+15	; 0x0f
    3cc0:	92 2b       	or	r25, r18
    3cc2:	97 87       	std	Z+15, r25	; 0x0f
                info->manufacturing_month = b & 0x0f;
    3cc4:	8f 70       	andi	r24, 0x0F	; 15
    3cc6:	80 8b       	std	Z+16, r24	; 0x10
                break;
    3cc8:	ba cf       	rjmp	.-140    	; 0x3c3e <sd_raw_get_info+0x58>
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    3cca:	f1 e1       	ldi	r31, 0x11	; 17
    3ccc:	fd 15       	cp	r31, r13
    3cce:	08 f0       	brcs	.+2      	; 0x3cd2 <sd_raw_get_info+0xec>
    3cd0:	b6 cf       	rjmp	.-148    	; 0x3c3e <sd_raw_get_info+0x58>
    uint16_t csd_c_size = 0;
#else
    uint32_t csd_c_size = 0;
#endif
    uint8_t csd_structure = 0;
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    3cd2:	40 e0       	ldi	r20, 0x00	; 0
    3cd4:	50 e0       	ldi	r21, 0x00	; 0
    3cd6:	ba 01       	movw	r22, r20
    3cd8:	89 e0       	ldi	r24, 0x09	; 9
    3cda:	0e 94 b6 18 	call	0x316c	; 0x316c <sd_raw_send_command>
    3cde:	c8 2f       	mov	r28, r24
    3ce0:	88 23       	and	r24, r24
    3ce2:	11 f0       	breq	.+4      	; 0x3ce8 <sd_raw_get_info+0x102>
    {
        unselect_card();
    3ce4:	2a 9a       	sbi	0x05, 2	; 5
        return 0;
    3ce6:	b2 c0       	rjmp	.+356    	; 0x3e4c <sd_raw_get_info+0x266>
    }
    while(sd_raw_rec_byte() != 0xfe);
    3ce8:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>
    3cec:	8e 3f       	cpi	r24, 0xFE	; 254
    3cee:	e1 f7       	brne	.-8      	; 0x3ce8 <sd_raw_get_info+0x102>
    3cf0:	d1 e0       	ldi	r29, 0x01	; 1
    3cf2:	10 e0       	ldi	r17, 0x00	; 0
    3cf4:	c1 2c       	mov	r12, r1
    3cf6:	d1 2c       	mov	r13, r1
    3cf8:	b1 2c       	mov	r11, r1
    3cfa:	a1 2c       	mov	r10, r1
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
    3cfc:	99 24       	eor	r9, r9
    3cfe:	93 94       	inc	r9
    3d00:	02 c0       	rjmp	.+4      	; 0x3d06 <sd_raw_get_info+0x120>
    3d02:	cf 5f       	subi	r28, 0xFF	; 255
    3d04:	df 5f       	subi	r29, 0xFF	; 255
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();
    3d06:	0e 94 ac 18 	call	0x3158	; 0x3158 <sd_raw_rec_byte>

        if(i == 0)
    3d0a:	c1 11       	cpse	r28, r1
    3d0c:	06 c0       	rjmp	.+12     	; 0x3d1a <sd_raw_get_info+0x134>
        {
            csd_structure = b >> 6;
    3d0e:	18 2f       	mov	r17, r24
    3d10:	12 95       	swap	r17
    3d12:	16 95       	lsr	r17
    3d14:	16 95       	lsr	r17
    3d16:	13 70       	andi	r17, 0x03	; 3
    3d18:	f4 cf       	rjmp	.-24     	; 0x3d02 <sd_raw_get_info+0x11c>
        }
        else if(i == 14)
    3d1a:	ce 30       	cpi	r28, 0x0E	; 14
    3d1c:	b1 f4       	brne	.+44     	; 0x3d4a <sd_raw_get_info+0x164>
        {
            if(b & 0x40)
    3d1e:	86 ff       	sbrs	r24, 6
    3d20:	02 c0       	rjmp	.+4      	; 0x3d26 <sd_raw_get_info+0x140>
                info->flag_copy = 1;
    3d22:	f7 01       	movw	r30, r14
    3d24:	91 8e       	std	Z+25, r9	; 0x19
            if(b & 0x20)
    3d26:	85 ff       	sbrs	r24, 5
    3d28:	02 c0       	rjmp	.+4      	; 0x3d2e <sd_raw_get_info+0x148>
                info->flag_write_protect = 1;
    3d2a:	f7 01       	movw	r30, r14
    3d2c:	92 8e       	std	Z+26, r9	; 0x1a
            if(b & 0x10)
    3d2e:	84 ff       	sbrs	r24, 4
    3d30:	02 c0       	rjmp	.+4      	; 0x3d36 <sd_raw_get_info+0x150>
                info->flag_write_protect_temp = 1;
    3d32:	f7 01       	movw	r30, r14
    3d34:	93 8e       	std	Z+27, r9	; 0x1b
            info->format = (b & 0x0c) >> 2;
    3d36:	48 2f       	mov	r20, r24
    3d38:	4c 70       	andi	r20, 0x0C	; 12
    3d3a:	50 e0       	ldi	r21, 0x00	; 0
    3d3c:	55 95       	asr	r21
    3d3e:	47 95       	ror	r20
    3d40:	55 95       	asr	r21
    3d42:	47 95       	ror	r20
    3d44:	f7 01       	movw	r30, r14
    3d46:	44 8f       	std	Z+28, r20	; 0x1c
    3d48:	dc cf       	rjmp	.-72     	; 0x3d02 <sd_raw_get_info+0x11c>
        }
        else
        {
#if SD_RAW_SDHC
            if(csd_structure == 0x01)
    3d4a:	11 30       	cpi	r17, 0x01	; 1
    3d4c:	39 f5       	brne	.+78     	; 0x3d9c <sd_raw_get_info+0x1b6>
            {
                switch(i)
    3d4e:	c7 30       	cpi	r28, 0x07	; 7
    3d50:	21 f0       	breq	.+8      	; 0x3d5a <sd_raw_get_info+0x174>
    3d52:	40 f0       	brcs	.+16     	; 0x3d64 <sd_raw_get_info+0x17e>
    3d54:	ca 30       	cpi	r28, 0x0A	; 10
    3d56:	10 f0       	brcs	.+4      	; 0x3d5c <sd_raw_get_info+0x176>
    3d58:	05 c0       	rjmp	.+10     	; 0x3d64 <sd_raw_get_info+0x17e>
                {
                    case 7:
                        b &= 0x3f;
    3d5a:	8f 73       	andi	r24, 0x3F	; 63
                    case 8:
                    case 9:
                        csd_c_size <<= 8;
    3d5c:	3c 2d       	mov	r19, r12
    3d5e:	22 27       	eor	r18, r18
                        csd_c_size |= b;
    3d60:	69 01       	movw	r12, r18
    3d62:	c8 2a       	or	r12, r24
                        break;
                }
                if(i == 9)
    3d64:	c9 30       	cpi	r28, 0x09	; 9
    3d66:	09 f0       	breq	.+2      	; 0x3d6a <sd_raw_get_info+0x184>
    3d68:	69 c0       	rjmp	.+210    	; 0x3e3c <sd_raw_get_info+0x256>
                {
                    ++csd_c_size;
    3d6a:	ff ef       	ldi	r31, 0xFF	; 255
    3d6c:	cf 1a       	sub	r12, r31
    3d6e:	df 0a       	sbc	r13, r31
                    info->capacity = (offset_t) csd_c_size * 512 * 1024;
    3d70:	a6 01       	movw	r20, r12
    3d72:	2c 2d       	mov	r18, r12
    3d74:	35 2f       	mov	r19, r21
    3d76:	40 e0       	ldi	r20, 0x00	; 0
    3d78:	50 e0       	ldi	r21, 0x00	; 0
    3d7a:	60 e0       	ldi	r22, 0x00	; 0
    3d7c:	70 e0       	ldi	r23, 0x00	; 0
    3d7e:	80 e0       	ldi	r24, 0x00	; 0
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	03 e1       	ldi	r16, 0x13	; 19
    3d84:	0e 94 24 21 	call	0x4248	; 0x4248 <__ashldi3>
    3d88:	f7 01       	movw	r30, r14
    3d8a:	21 8b       	std	Z+17, r18	; 0x11
    3d8c:	32 8b       	std	Z+18, r19	; 0x12
    3d8e:	43 8b       	std	Z+19, r20	; 0x13
    3d90:	54 8b       	std	Z+20, r21	; 0x14
    3d92:	65 8b       	std	Z+21, r22	; 0x15
    3d94:	76 8b       	std	Z+22, r23	; 0x16
    3d96:	87 8b       	std	Z+23, r24	; 0x17
    3d98:	90 8f       	std	Z+24, r25	; 0x18
    3d9a:	b3 cf       	rjmp	.-154    	; 0x3d02 <sd_raw_get_info+0x11c>
                }
            }
            else if(csd_structure == 0x00)
    3d9c:	11 11       	cpse	r17, r1
    3d9e:	4e c0       	rjmp	.+156    	; 0x3e3c <sd_raw_get_info+0x256>
#endif
            {
                switch(i)
    3da0:	c7 30       	cpi	r28, 0x07	; 7
    3da2:	a9 f0       	breq	.+42     	; 0x3dce <sd_raw_get_info+0x1e8>
    3da4:	28 f4       	brcc	.+10     	; 0x3db0 <sd_raw_get_info+0x1ca>
    3da6:	c5 30       	cpi	r28, 0x05	; 5
    3da8:	49 f0       	breq	.+18     	; 0x3dbc <sd_raw_get_info+0x1d6>
    3daa:	c6 30       	cpi	r28, 0x06	; 6
    3dac:	51 f0       	breq	.+20     	; 0x3dc2 <sd_raw_get_info+0x1dc>
    3dae:	46 c0       	rjmp	.+140    	; 0x3e3c <sd_raw_get_info+0x256>
    3db0:	c9 30       	cpi	r28, 0x09	; 9
    3db2:	01 f1       	breq	.+64     	; 0x3df4 <sd_raw_get_info+0x20e>
    3db4:	a0 f0       	brcs	.+40     	; 0x3dde <sd_raw_get_info+0x1f8>
    3db6:	ca 30       	cpi	r28, 0x0A	; 10
    3db8:	09 f1       	breq	.+66     	; 0x3dfc <sd_raw_get_info+0x216>
    3dba:	40 c0       	rjmp	.+128    	; 0x3e3c <sd_raw_get_info+0x256>
                {
                    case 5:
                        csd_read_bl_len = b & 0x0f;
    3dbc:	8f 70       	andi	r24, 0x0F	; 15
    3dbe:	a8 2e       	mov	r10, r24
                        break;
    3dc0:	a0 cf       	rjmp	.-192    	; 0x3d02 <sd_raw_get_info+0x11c>
                    case 6:
                        csd_c_size = b & 0x03;
    3dc2:	83 70       	andi	r24, 0x03	; 3
    3dc4:	28 2f       	mov	r18, r24
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
                        csd_c_size <<= 8;
    3dc8:	d2 2e       	mov	r13, r18
    3dca:	cc 24       	eor	r12, r12
                        break;
    3dcc:	9a cf       	rjmp	.-204    	; 0x3d02 <sd_raw_get_info+0x11c>
                    case 7:
                        csd_c_size |= b;
    3dce:	96 01       	movw	r18, r12
    3dd0:	28 2b       	or	r18, r24
                        csd_c_size <<= 2;
    3dd2:	69 01       	movw	r12, r18
    3dd4:	cc 0c       	add	r12, r12
    3dd6:	dd 1c       	adc	r13, r13
    3dd8:	cc 0c       	add	r12, r12
    3dda:	dd 1c       	adc	r13, r13
                        break;
    3ddc:	92 cf       	rjmp	.-220    	; 0x3d02 <sd_raw_get_info+0x11c>
                    case 8:
                        csd_c_size |= b >> 6;
    3dde:	82 95       	swap	r24
    3de0:	86 95       	lsr	r24
    3de2:	86 95       	lsr	r24
    3de4:	83 70       	andi	r24, 0x03	; 3
    3de6:	96 01       	movw	r18, r12
    3de8:	28 2b       	or	r18, r24
                        ++csd_c_size;
    3dea:	69 01       	movw	r12, r18
    3dec:	ff ef       	ldi	r31, 0xFF	; 255
    3dee:	cf 1a       	sub	r12, r31
    3df0:	df 0a       	sbc	r13, r31
                        break;
    3df2:	87 cf       	rjmp	.-242    	; 0x3d02 <sd_raw_get_info+0x11c>
                    case 9:
                        csd_c_size_mult = b & 0x03;
    3df4:	83 70       	andi	r24, 0x03	; 3
                        csd_c_size_mult <<= 1;
    3df6:	b8 2e       	mov	r11, r24
    3df8:	bb 0c       	add	r11, r11
                        break;
    3dfa:	83 cf       	rjmp	.-250    	; 0x3d02 <sd_raw_get_info+0x11c>
                    case 10:
                        csd_c_size_mult |= b >> 7;
    3dfc:	88 1f       	adc	r24, r24
    3dfe:	88 27       	eor	r24, r24
    3e00:	88 1f       	adc	r24, r24
    3e02:	b8 2a       	or	r11, r24

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
    3e04:	c6 01       	movw	r24, r12
    3e06:	a0 e0       	ldi	r26, 0x00	; 0
    3e08:	b0 e0       	ldi	r27, 0x00	; 0
    3e0a:	6a 2d       	mov	r22, r10
    3e0c:	70 e0       	ldi	r23, 0x00	; 0
    3e0e:	6b 0d       	add	r22, r11
    3e10:	71 1d       	adc	r23, r1
    3e12:	6e 5f       	subi	r22, 0xFE	; 254
    3e14:	7f 4f       	sbci	r23, 0xFF	; 255
    3e16:	04 c0       	rjmp	.+8      	; 0x3e20 <sd_raw_get_info+0x23a>
    3e18:	88 0f       	add	r24, r24
    3e1a:	99 1f       	adc	r25, r25
    3e1c:	aa 1f       	adc	r26, r26
    3e1e:	bb 1f       	adc	r27, r27
    3e20:	6a 95       	dec	r22
    3e22:	d2 f7       	brpl	.-12     	; 0x3e18 <sd_raw_get_info+0x232>
    3e24:	9c 01       	movw	r18, r24
    3e26:	ad 01       	movw	r20, r26
    3e28:	f7 01       	movw	r30, r14
    3e2a:	21 8b       	std	Z+17, r18	; 0x11
    3e2c:	32 8b       	std	Z+18, r19	; 0x12
    3e2e:	43 8b       	std	Z+19, r20	; 0x13
    3e30:	54 8b       	std	Z+20, r21	; 0x14
    3e32:	15 8a       	std	Z+21, r1	; 0x15
    3e34:	16 8a       	std	Z+22, r1	; 0x16
    3e36:	17 8a       	std	Z+23, r1	; 0x17
    3e38:	10 8e       	std	Z+24, r1	; 0x18
                        break;
    3e3a:	63 cf       	rjmp	.-314    	; 0x3d02 <sd_raw_get_info+0x11c>
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    3e3c:	d2 31       	cpi	r29, 0x12	; 18
    3e3e:	08 f4       	brcc	.+2      	; 0x3e42 <sd_raw_get_info+0x25c>
    3e40:	60 cf       	rjmp	.-320    	; 0x3d02 <sd_raw_get_info+0x11c>
                }
            }
        }
    }

    unselect_card();
    3e42:	2a 9a       	sbi	0x05, 2	; 5

    return 1;
    3e44:	cc 24       	eor	r12, r12
    3e46:	c3 94       	inc	r12
    3e48:	01 c0       	rjmp	.+2      	; 0x3e4c <sd_raw_get_info+0x266>
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    if(!info || !sd_raw_available())
        return 0;
    3e4a:	c1 2c       	mov	r12, r1
    }

    unselect_card();

    return 1;
}
    3e4c:	8c 2d       	mov	r24, r12
    3e4e:	df 91       	pop	r29
    3e50:	cf 91       	pop	r28
    3e52:	1f 91       	pop	r17
    3e54:	0f 91       	pop	r16
    3e56:	ff 90       	pop	r15
    3e58:	ef 90       	pop	r14
    3e5a:	df 90       	pop	r13
    3e5c:	cf 90       	pop	r12
    3e5e:	bf 90       	pop	r11
    3e60:	af 90       	pop	r10
    3e62:	9f 90       	pop	r9
    3e64:	08 95       	ret

00003e66 <uart_init>:
    uint8_t b = UDR;
    if(b == '\r')
        b = '\n';

    return b;
}
    3e66:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    3e6a:	87 e6       	ldi	r24, 0x67	; 103
    3e6c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    3e70:	86 e0       	ldi	r24, 0x06	; 6
    3e72:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    3e76:	88 e9       	ldi	r24, 0x98	; 152
    3e78:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    3e7c:	08 95       	ret

00003e7e <uart_putc>:
    3e7e:	cf 93       	push	r28
    3e80:	c8 2f       	mov	r28, r24
    3e82:	8a 30       	cpi	r24, 0x0A	; 10
    3e84:	19 f4       	brne	.+6      	; 0x3e8c <uart_putc+0xe>
    3e86:	8d e0       	ldi	r24, 0x0D	; 13
    3e88:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    3e8c:	e0 ec       	ldi	r30, 0xC0	; 192
    3e8e:	f0 e0       	ldi	r31, 0x00	; 0
    3e90:	90 81       	ld	r25, Z
    3e92:	95 ff       	sbrs	r25, 5
    3e94:	fd cf       	rjmp	.-6      	; 0x3e90 <uart_putc+0x12>
    3e96:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    3e9a:	cf 91       	pop	r28
    3e9c:	08 95       	ret

00003e9e <uart_putc_hex>:
    3e9e:	cf 93       	push	r28
    3ea0:	c8 2f       	mov	r28, r24
    3ea2:	82 95       	swap	r24
    3ea4:	8f 70       	andi	r24, 0x0F	; 15
    3ea6:	8a 30       	cpi	r24, 0x0A	; 10
    3ea8:	20 f4       	brcc	.+8      	; 0x3eb2 <uart_putc_hex+0x14>
    3eaa:	80 5d       	subi	r24, 0xD0	; 208
    3eac:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    3eb0:	03 c0       	rjmp	.+6      	; 0x3eb8 <uart_putc_hex+0x1a>
    3eb2:	89 5a       	subi	r24, 0xA9	; 169
    3eb4:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    3eb8:	8c 2f       	mov	r24, r28
    3eba:	8f 70       	andi	r24, 0x0F	; 15
    3ebc:	28 2f       	mov	r18, r24
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	2a 30       	cpi	r18, 0x0A	; 10
    3ec2:	31 05       	cpc	r19, r1
    3ec4:	24 f4       	brge	.+8      	; 0x3ece <uart_putc_hex+0x30>
    3ec6:	80 5d       	subi	r24, 0xD0	; 208
    3ec8:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    3ecc:	03 c0       	rjmp	.+6      	; 0x3ed4 <uart_putc_hex+0x36>
    3ece:	89 5a       	subi	r24, 0xA9	; 169
    3ed0:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    3ed4:	cf 91       	pop	r28
    3ed6:	08 95       	ret

00003ed8 <uart_putw_hex>:
    3ed8:	cf 93       	push	r28
    3eda:	c8 2f       	mov	r28, r24
    3edc:	89 2f       	mov	r24, r25
    3ede:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <uart_putc_hex>
    3ee2:	8c 2f       	mov	r24, r28
    3ee4:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <uart_putc_hex>
    3ee8:	cf 91       	pop	r28
    3eea:	08 95       	ret

00003eec <uart_putdw_hex>:
    3eec:	cf 92       	push	r12
    3eee:	df 92       	push	r13
    3ef0:	ef 92       	push	r14
    3ef2:	ff 92       	push	r15
    3ef4:	6b 01       	movw	r12, r22
    3ef6:	7c 01       	movw	r14, r24
    3ef8:	c7 01       	movw	r24, r14
    3efa:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <uart_putw_hex>
    3efe:	c6 01       	movw	r24, r12
    3f00:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <uart_putw_hex>
    3f04:	ff 90       	pop	r15
    3f06:	ef 90       	pop	r14
    3f08:	df 90       	pop	r13
    3f0a:	cf 90       	pop	r12
    3f0c:	08 95       	ret

00003f0e <uart_putw_dec>:
    3f0e:	cf 92       	push	r12
    3f10:	df 92       	push	r13
    3f12:	ef 92       	push	r14
    3f14:	ff 92       	push	r15
    3f16:	0f 93       	push	r16
    3f18:	1f 93       	push	r17
    3f1a:	cf 93       	push	r28
    3f1c:	df 93       	push	r29
    3f1e:	6c 01       	movw	r12, r24
    3f20:	0f 2e       	mov	r0, r31
    3f22:	f5 e0       	ldi	r31, 0x05	; 5
    3f24:	ef 2e       	mov	r14, r31
    3f26:	f1 2c       	mov	r15, r1
    3f28:	f0 2d       	mov	r31, r0
    3f2a:	40 e0       	ldi	r20, 0x00	; 0
    3f2c:	c0 e1       	ldi	r28, 0x10	; 16
    3f2e:	d7 e2       	ldi	r29, 0x27	; 39
    3f30:	01 e0       	ldi	r16, 0x01	; 1
    3f32:	c6 01       	movw	r24, r12
    3f34:	be 01       	movw	r22, r28
    3f36:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__udivmodhi4>
    3f3a:	16 2f       	mov	r17, r22
    3f3c:	61 11       	cpse	r22, r1
    3f3e:	05 c0       	rjmp	.+10     	; 0x3f4a <uart_putw_dec+0x3c>
    3f40:	41 11       	cpse	r20, r1
    3f42:	03 c0       	rjmp	.+6      	; 0x3f4a <uart_putw_dec+0x3c>
    3f44:	c1 30       	cpi	r28, 0x01	; 1
    3f46:	d1 05       	cpc	r29, r1
    3f48:	29 f4       	brne	.+10     	; 0x3f54 <uart_putw_dec+0x46>
    3f4a:	80 e3       	ldi	r24, 0x30	; 48
    3f4c:	81 0f       	add	r24, r17
    3f4e:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    3f52:	40 2f       	mov	r20, r16
    3f54:	1c 9f       	mul	r17, r28
    3f56:	c0 01       	movw	r24, r0
    3f58:	1d 9f       	mul	r17, r29
    3f5a:	90 0d       	add	r25, r0
    3f5c:	11 24       	eor	r1, r1
    3f5e:	c8 1a       	sub	r12, r24
    3f60:	d9 0a       	sbc	r13, r25
    3f62:	9e 01       	movw	r18, r28
    3f64:	ad ec       	ldi	r26, 0xCD	; 205
    3f66:	bc ec       	ldi	r27, 0xCC	; 204
    3f68:	0e 94 b1 20 	call	0x4162	; 0x4162 <__umulhisi3>
    3f6c:	ec 01       	movw	r28, r24
    3f6e:	d6 95       	lsr	r29
    3f70:	c7 95       	ror	r28
    3f72:	d6 95       	lsr	r29
    3f74:	c7 95       	ror	r28
    3f76:	d6 95       	lsr	r29
    3f78:	c7 95       	ror	r28
    3f7a:	81 e0       	ldi	r24, 0x01	; 1
    3f7c:	e8 1a       	sub	r14, r24
    3f7e:	f1 08       	sbc	r15, r1
    3f80:	c1 f6       	brne	.-80     	; 0x3f32 <uart_putw_dec+0x24>
    3f82:	df 91       	pop	r29
    3f84:	cf 91       	pop	r28
    3f86:	1f 91       	pop	r17
    3f88:	0f 91       	pop	r16
    3f8a:	ff 90       	pop	r15
    3f8c:	ef 90       	pop	r14
    3f8e:	df 90       	pop	r13
    3f90:	cf 90       	pop	r12
    3f92:	08 95       	ret

00003f94 <uart_putdw_dec>:
    3f94:	3f 92       	push	r3
    3f96:	4f 92       	push	r4
    3f98:	5f 92       	push	r5
    3f9a:	6f 92       	push	r6
    3f9c:	7f 92       	push	r7
    3f9e:	8f 92       	push	r8
    3fa0:	9f 92       	push	r9
    3fa2:	af 92       	push	r10
    3fa4:	bf 92       	push	r11
    3fa6:	cf 92       	push	r12
    3fa8:	df 92       	push	r13
    3faa:	ef 92       	push	r14
    3fac:	ff 92       	push	r15
    3fae:	0f 93       	push	r16
    3fb0:	1f 93       	push	r17
    3fb2:	cf 93       	push	r28
    3fb4:	df 93       	push	r29
    3fb6:	4b 01       	movw	r8, r22
    3fb8:	5c 01       	movw	r10, r24
    3fba:	0a e0       	ldi	r16, 0x0A	; 10
    3fbc:	10 e0       	ldi	r17, 0x00	; 0
    3fbe:	d0 e0       	ldi	r29, 0x00	; 0
    3fc0:	0f 2e       	mov	r0, r31
    3fc2:	c1 2c       	mov	r12, r1
    3fc4:	fa ec       	ldi	r31, 0xCA	; 202
    3fc6:	df 2e       	mov	r13, r31
    3fc8:	fa e9       	ldi	r31, 0x9A	; 154
    3fca:	ef 2e       	mov	r14, r31
    3fcc:	fb e3       	ldi	r31, 0x3B	; 59
    3fce:	ff 2e       	mov	r15, r31
    3fd0:	f0 2d       	mov	r31, r0
    3fd2:	33 24       	eor	r3, r3
    3fd4:	33 94       	inc	r3
    3fd6:	0f 2e       	mov	r0, r31
    3fd8:	fa e0       	ldi	r31, 0x0A	; 10
    3fda:	4f 2e       	mov	r4, r31
    3fdc:	51 2c       	mov	r5, r1
    3fde:	61 2c       	mov	r6, r1
    3fe0:	71 2c       	mov	r7, r1
    3fe2:	f0 2d       	mov	r31, r0
    3fe4:	c5 01       	movw	r24, r10
    3fe6:	b4 01       	movw	r22, r8
    3fe8:	a7 01       	movw	r20, r14
    3fea:	96 01       	movw	r18, r12
    3fec:	0e 94 89 20 	call	0x4112	; 0x4112 <__udivmodsi4>
    3ff0:	c2 2f       	mov	r28, r18
    3ff2:	21 11       	cpse	r18, r1
    3ff4:	08 c0       	rjmp	.+16     	; 0x4006 <uart_putdw_dec+0x72>
    3ff6:	d1 11       	cpse	r29, r1
    3ff8:	06 c0       	rjmp	.+12     	; 0x4006 <uart_putdw_dec+0x72>
    3ffa:	81 e0       	ldi	r24, 0x01	; 1
    3ffc:	c8 16       	cp	r12, r24
    3ffe:	d1 04       	cpc	r13, r1
    4000:	e1 04       	cpc	r14, r1
    4002:	f1 04       	cpc	r15, r1
    4004:	29 f4       	brne	.+10     	; 0x4010 <uart_putdw_dec+0x7c>
    4006:	80 e3       	ldi	r24, 0x30	; 48
    4008:	8c 0f       	add	r24, r28
    400a:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    400e:	d3 2d       	mov	r29, r3
    4010:	ac 2f       	mov	r26, r28
    4012:	b0 e0       	ldi	r27, 0x00	; 0
    4014:	a7 01       	movw	r20, r14
    4016:	96 01       	movw	r18, r12
    4018:	0e 94 c0 20 	call	0x4180	; 0x4180 <__muluhisi3>
    401c:	86 1a       	sub	r8, r22
    401e:	97 0a       	sbc	r9, r23
    4020:	a8 0a       	sbc	r10, r24
    4022:	b9 0a       	sbc	r11, r25
    4024:	c7 01       	movw	r24, r14
    4026:	b6 01       	movw	r22, r12
    4028:	a3 01       	movw	r20, r6
    402a:	92 01       	movw	r18, r4
    402c:	0e 94 89 20 	call	0x4112	; 0x4112 <__udivmodsi4>
    4030:	69 01       	movw	r12, r18
    4032:	7a 01       	movw	r14, r20
    4034:	01 50       	subi	r16, 0x01	; 1
    4036:	11 09       	sbc	r17, r1
    4038:	a9 f6       	brne	.-86     	; 0x3fe4 <uart_putdw_dec+0x50>
    403a:	df 91       	pop	r29
    403c:	cf 91       	pop	r28
    403e:	1f 91       	pop	r17
    4040:	0f 91       	pop	r16
    4042:	ff 90       	pop	r15
    4044:	ef 90       	pop	r14
    4046:	df 90       	pop	r13
    4048:	cf 90       	pop	r12
    404a:	bf 90       	pop	r11
    404c:	af 90       	pop	r10
    404e:	9f 90       	pop	r9
    4050:	8f 90       	pop	r8
    4052:	7f 90       	pop	r7
    4054:	6f 90       	pop	r6
    4056:	5f 90       	pop	r5
    4058:	4f 90       	pop	r4
    405a:	3f 90       	pop	r3
    405c:	08 95       	ret

0000405e <uart_puts>:
    405e:	cf 93       	push	r28
    4060:	df 93       	push	r29
    4062:	ec 01       	movw	r28, r24
    4064:	88 81       	ld	r24, Y
    4066:	88 23       	and	r24, r24
    4068:	31 f0       	breq	.+12     	; 0x4076 <uart_puts+0x18>
    406a:	21 96       	adiw	r28, 0x01	; 1
    406c:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    4070:	89 91       	ld	r24, Y+
    4072:	81 11       	cpse	r24, r1
    4074:	fb cf       	rjmp	.-10     	; 0x406c <uart_puts+0xe>
    4076:	df 91       	pop	r29
    4078:	cf 91       	pop	r28
    407a:	08 95       	ret

0000407c <uart_puts_p>:
    407c:	cf 93       	push	r28
    407e:	df 93       	push	r29
    4080:	ec 01       	movw	r28, r24
    4082:	21 96       	adiw	r28, 0x01	; 1
    4084:	fc 01       	movw	r30, r24
    4086:	84 91       	lpm	r24, Z
    4088:	88 23       	and	r24, r24
    408a:	39 f0       	breq	.+14     	; 0x409a <uart_puts_p+0x1e>
    408c:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <uart_putc>
    4090:	fe 01       	movw	r30, r28
    4092:	84 91       	lpm	r24, Z
    4094:	21 96       	adiw	r28, 0x01	; 1
    4096:	81 11       	cpse	r24, r1
    4098:	f9 cf       	rjmp	.-14     	; 0x408c <uart_puts_p+0x10>
    409a:	df 91       	pop	r29
    409c:	cf 91       	pop	r28
    409e:	08 95       	ret

000040a0 <__vector_18>:

EMPTY_INTERRUPT(USART_RXC_vect)
    40a0:	18 95       	reti

000040a2 <__mulsi3>:
    40a2:	db 01       	movw	r26, r22
    40a4:	8f 93       	push	r24
    40a6:	9f 93       	push	r25
    40a8:	0e 94 c0 20 	call	0x4180	; 0x4180 <__muluhisi3>
    40ac:	bf 91       	pop	r27
    40ae:	af 91       	pop	r26
    40b0:	a2 9f       	mul	r26, r18
    40b2:	80 0d       	add	r24, r0
    40b4:	91 1d       	adc	r25, r1
    40b6:	a3 9f       	mul	r26, r19
    40b8:	90 0d       	add	r25, r0
    40ba:	b2 9f       	mul	r27, r18
    40bc:	90 0d       	add	r25, r0
    40be:	11 24       	eor	r1, r1
    40c0:	08 95       	ret

000040c2 <__udivmodhi4>:
    40c2:	aa 1b       	sub	r26, r26
    40c4:	bb 1b       	sub	r27, r27
    40c6:	51 e1       	ldi	r21, 0x11	; 17
    40c8:	07 c0       	rjmp	.+14     	; 0x40d8 <__udivmodhi4_ep>

000040ca <__udivmodhi4_loop>:
    40ca:	aa 1f       	adc	r26, r26
    40cc:	bb 1f       	adc	r27, r27
    40ce:	a6 17       	cp	r26, r22
    40d0:	b7 07       	cpc	r27, r23
    40d2:	10 f0       	brcs	.+4      	; 0x40d8 <__udivmodhi4_ep>
    40d4:	a6 1b       	sub	r26, r22
    40d6:	b7 0b       	sbc	r27, r23

000040d8 <__udivmodhi4_ep>:
    40d8:	88 1f       	adc	r24, r24
    40da:	99 1f       	adc	r25, r25
    40dc:	5a 95       	dec	r21
    40de:	a9 f7       	brne	.-22     	; 0x40ca <__udivmodhi4_loop>
    40e0:	80 95       	com	r24
    40e2:	90 95       	com	r25
    40e4:	bc 01       	movw	r22, r24
    40e6:	cd 01       	movw	r24, r26
    40e8:	08 95       	ret

000040ea <__divmodhi4>:
    40ea:	97 fb       	bst	r25, 7
    40ec:	07 2e       	mov	r0, r23
    40ee:	16 f4       	brtc	.+4      	; 0x40f4 <__divmodhi4+0xa>
    40f0:	00 94       	com	r0
    40f2:	07 d0       	rcall	.+14     	; 0x4102 <__divmodhi4_neg1>
    40f4:	77 fd       	sbrc	r23, 7
    40f6:	09 d0       	rcall	.+18     	; 0x410a <__divmodhi4_neg2>
    40f8:	0e 94 61 20 	call	0x40c2	; 0x40c2 <__udivmodhi4>
    40fc:	07 fc       	sbrc	r0, 7
    40fe:	05 d0       	rcall	.+10     	; 0x410a <__divmodhi4_neg2>
    4100:	3e f4       	brtc	.+14     	; 0x4110 <__divmodhi4_exit>

00004102 <__divmodhi4_neg1>:
    4102:	90 95       	com	r25
    4104:	81 95       	neg	r24
    4106:	9f 4f       	sbci	r25, 0xFF	; 255
    4108:	08 95       	ret

0000410a <__divmodhi4_neg2>:
    410a:	70 95       	com	r23
    410c:	61 95       	neg	r22
    410e:	7f 4f       	sbci	r23, 0xFF	; 255

00004110 <__divmodhi4_exit>:
    4110:	08 95       	ret

00004112 <__udivmodsi4>:
    4112:	a1 e2       	ldi	r26, 0x21	; 33
    4114:	1a 2e       	mov	r1, r26
    4116:	aa 1b       	sub	r26, r26
    4118:	bb 1b       	sub	r27, r27
    411a:	fd 01       	movw	r30, r26
    411c:	0d c0       	rjmp	.+26     	; 0x4138 <__udivmodsi4_ep>

0000411e <__udivmodsi4_loop>:
    411e:	aa 1f       	adc	r26, r26
    4120:	bb 1f       	adc	r27, r27
    4122:	ee 1f       	adc	r30, r30
    4124:	ff 1f       	adc	r31, r31
    4126:	a2 17       	cp	r26, r18
    4128:	b3 07       	cpc	r27, r19
    412a:	e4 07       	cpc	r30, r20
    412c:	f5 07       	cpc	r31, r21
    412e:	20 f0       	brcs	.+8      	; 0x4138 <__udivmodsi4_ep>
    4130:	a2 1b       	sub	r26, r18
    4132:	b3 0b       	sbc	r27, r19
    4134:	e4 0b       	sbc	r30, r20
    4136:	f5 0b       	sbc	r31, r21

00004138 <__udivmodsi4_ep>:
    4138:	66 1f       	adc	r22, r22
    413a:	77 1f       	adc	r23, r23
    413c:	88 1f       	adc	r24, r24
    413e:	99 1f       	adc	r25, r25
    4140:	1a 94       	dec	r1
    4142:	69 f7       	brne	.-38     	; 0x411e <__udivmodsi4_loop>
    4144:	60 95       	com	r22
    4146:	70 95       	com	r23
    4148:	80 95       	com	r24
    414a:	90 95       	com	r25
    414c:	9b 01       	movw	r18, r22
    414e:	ac 01       	movw	r20, r24
    4150:	bd 01       	movw	r22, r26
    4152:	cf 01       	movw	r24, r30
    4154:	08 95       	ret

00004156 <__tablejump2__>:
    4156:	ee 0f       	add	r30, r30
    4158:	ff 1f       	adc	r31, r31
    415a:	05 90       	lpm	r0, Z+
    415c:	f4 91       	lpm	r31, Z
    415e:	e0 2d       	mov	r30, r0
    4160:	09 94       	ijmp

00004162 <__umulhisi3>:
    4162:	a2 9f       	mul	r26, r18
    4164:	b0 01       	movw	r22, r0
    4166:	b3 9f       	mul	r27, r19
    4168:	c0 01       	movw	r24, r0
    416a:	a3 9f       	mul	r26, r19
    416c:	70 0d       	add	r23, r0
    416e:	81 1d       	adc	r24, r1
    4170:	11 24       	eor	r1, r1
    4172:	91 1d       	adc	r25, r1
    4174:	b2 9f       	mul	r27, r18
    4176:	70 0d       	add	r23, r0
    4178:	81 1d       	adc	r24, r1
    417a:	11 24       	eor	r1, r1
    417c:	91 1d       	adc	r25, r1
    417e:	08 95       	ret

00004180 <__muluhisi3>:
    4180:	0e 94 b1 20 	call	0x4162	; 0x4162 <__umulhisi3>
    4184:	a5 9f       	mul	r26, r21
    4186:	90 0d       	add	r25, r0
    4188:	b4 9f       	mul	r27, r20
    418a:	90 0d       	add	r25, r0
    418c:	a4 9f       	mul	r26, r20
    418e:	80 0d       	add	r24, r0
    4190:	91 1d       	adc	r25, r1
    4192:	11 24       	eor	r1, r1
    4194:	08 95       	ret

00004196 <__muldi3>:
    4196:	df 93       	push	r29
    4198:	cf 93       	push	r28
    419a:	1f 93       	push	r17
    419c:	0f 93       	push	r16
    419e:	9a 9d       	mul	r25, r10
    41a0:	f0 2d       	mov	r31, r0
    41a2:	21 9f       	mul	r18, r17
    41a4:	f0 0d       	add	r31, r0
    41a6:	8b 9d       	mul	r24, r11
    41a8:	f0 0d       	add	r31, r0
    41aa:	8a 9d       	mul	r24, r10
    41ac:	e0 2d       	mov	r30, r0
    41ae:	f1 0d       	add	r31, r1
    41b0:	03 9f       	mul	r16, r19
    41b2:	f0 0d       	add	r31, r0
    41b4:	02 9f       	mul	r16, r18
    41b6:	e0 0d       	add	r30, r0
    41b8:	f1 1d       	adc	r31, r1
    41ba:	4e 9d       	mul	r20, r14
    41bc:	e0 0d       	add	r30, r0
    41be:	f1 1d       	adc	r31, r1
    41c0:	5e 9d       	mul	r21, r14
    41c2:	f0 0d       	add	r31, r0
    41c4:	4f 9d       	mul	r20, r15
    41c6:	f0 0d       	add	r31, r0
    41c8:	7f 93       	push	r23
    41ca:	6f 93       	push	r22
    41cc:	bf 92       	push	r11
    41ce:	af 92       	push	r10
    41d0:	5f 93       	push	r21
    41d2:	4f 93       	push	r20
    41d4:	d5 01       	movw	r26, r10
    41d6:	0e 94 b1 20 	call	0x4162	; 0x4162 <__umulhisi3>
    41da:	8b 01       	movw	r16, r22
    41dc:	ac 01       	movw	r20, r24
    41de:	d7 01       	movw	r26, r14
    41e0:	0e 94 b1 20 	call	0x4162	; 0x4162 <__umulhisi3>
    41e4:	eb 01       	movw	r28, r22
    41e6:	e8 0f       	add	r30, r24
    41e8:	f9 1f       	adc	r31, r25
    41ea:	d6 01       	movw	r26, r12
    41ec:	0e 94 1b 21 	call	0x4236	; 0x4236 <__muldi3_6>
    41f0:	2f 91       	pop	r18
    41f2:	3f 91       	pop	r19
    41f4:	d6 01       	movw	r26, r12
    41f6:	0e 94 b1 20 	call	0x4162	; 0x4162 <__umulhisi3>
    41fa:	c6 0f       	add	r28, r22
    41fc:	d7 1f       	adc	r29, r23
    41fe:	e8 1f       	adc	r30, r24
    4200:	f9 1f       	adc	r31, r25
    4202:	af 91       	pop	r26
    4204:	bf 91       	pop	r27
    4206:	0e 94 1b 21 	call	0x4236	; 0x4236 <__muldi3_6>
    420a:	2f 91       	pop	r18
    420c:	3f 91       	pop	r19
    420e:	0e 94 b1 20 	call	0x4162	; 0x4162 <__umulhisi3>
    4212:	c6 0f       	add	r28, r22
    4214:	d7 1f       	adc	r29, r23
    4216:	e8 1f       	adc	r30, r24
    4218:	f9 1f       	adc	r31, r25
    421a:	d6 01       	movw	r26, r12
    421c:	0e 94 b1 20 	call	0x4162	; 0x4162 <__umulhisi3>
    4220:	e6 0f       	add	r30, r22
    4222:	f7 1f       	adc	r31, r23
    4224:	98 01       	movw	r18, r16
    4226:	be 01       	movw	r22, r28
    4228:	cf 01       	movw	r24, r30
    422a:	11 24       	eor	r1, r1
    422c:	0f 91       	pop	r16
    422e:	1f 91       	pop	r17
    4230:	cf 91       	pop	r28
    4232:	df 91       	pop	r29
    4234:	08 95       	ret

00004236 <__muldi3_6>:
    4236:	0e 94 b1 20 	call	0x4162	; 0x4162 <__umulhisi3>
    423a:	46 0f       	add	r20, r22
    423c:	57 1f       	adc	r21, r23
    423e:	c8 1f       	adc	r28, r24
    4240:	d9 1f       	adc	r29, r25
    4242:	08 f4       	brcc	.+2      	; 0x4246 <__muldi3_6+0x10>
    4244:	31 96       	adiw	r30, 0x01	; 1
    4246:	08 95       	ret

00004248 <__ashldi3>:
    4248:	0f 93       	push	r16
    424a:	08 30       	cpi	r16, 0x08	; 8
    424c:	90 f0       	brcs	.+36     	; 0x4272 <__ashldi3+0x2a>
    424e:	98 2f       	mov	r25, r24
    4250:	87 2f       	mov	r24, r23
    4252:	76 2f       	mov	r23, r22
    4254:	65 2f       	mov	r22, r21
    4256:	54 2f       	mov	r21, r20
    4258:	43 2f       	mov	r20, r19
    425a:	32 2f       	mov	r19, r18
    425c:	22 27       	eor	r18, r18
    425e:	08 50       	subi	r16, 0x08	; 8
    4260:	f4 cf       	rjmp	.-24     	; 0x424a <__ashldi3+0x2>
    4262:	22 0f       	add	r18, r18
    4264:	33 1f       	adc	r19, r19
    4266:	44 1f       	adc	r20, r20
    4268:	55 1f       	adc	r21, r21
    426a:	66 1f       	adc	r22, r22
    426c:	77 1f       	adc	r23, r23
    426e:	88 1f       	adc	r24, r24
    4270:	99 1f       	adc	r25, r25
    4272:	0a 95       	dec	r16
    4274:	b2 f7       	brpl	.-20     	; 0x4262 <__ashldi3+0x1a>
    4276:	0f 91       	pop	r16
    4278:	08 95       	ret

0000427a <__ashrdi3>:
    427a:	97 fb       	bst	r25, 7
    427c:	10 f8       	bld	r1, 0

0000427e <__lshrdi3>:
    427e:	16 94       	lsr	r1
    4280:	00 08       	sbc	r0, r0
    4282:	0f 93       	push	r16
    4284:	08 30       	cpi	r16, 0x08	; 8
    4286:	98 f0       	brcs	.+38     	; 0x42ae <__lshrdi3+0x30>
    4288:	08 50       	subi	r16, 0x08	; 8
    428a:	23 2f       	mov	r18, r19
    428c:	34 2f       	mov	r19, r20
    428e:	45 2f       	mov	r20, r21
    4290:	56 2f       	mov	r21, r22
    4292:	67 2f       	mov	r22, r23
    4294:	78 2f       	mov	r23, r24
    4296:	89 2f       	mov	r24, r25
    4298:	90 2d       	mov	r25, r0
    429a:	f4 cf       	rjmp	.-24     	; 0x4284 <__lshrdi3+0x6>
    429c:	05 94       	asr	r0
    429e:	97 95       	ror	r25
    42a0:	87 95       	ror	r24
    42a2:	77 95       	ror	r23
    42a4:	67 95       	ror	r22
    42a6:	57 95       	ror	r21
    42a8:	47 95       	ror	r20
    42aa:	37 95       	ror	r19
    42ac:	27 95       	ror	r18
    42ae:	0a 95       	dec	r16
    42b0:	aa f7       	brpl	.-22     	; 0x429c <__lshrdi3+0x1e>
    42b2:	0f 91       	pop	r16
    42b4:	08 95       	ret

000042b6 <__adddi3>:
    42b6:	2a 0d       	add	r18, r10
    42b8:	3b 1d       	adc	r19, r11
    42ba:	4c 1d       	adc	r20, r12
    42bc:	5d 1d       	adc	r21, r13
    42be:	6e 1d       	adc	r22, r14
    42c0:	7f 1d       	adc	r23, r15
    42c2:	80 1f       	adc	r24, r16
    42c4:	91 1f       	adc	r25, r17
    42c6:	08 95       	ret

000042c8 <__adddi3_s8>:
    42c8:	00 24       	eor	r0, r0
    42ca:	a7 fd       	sbrc	r26, 7
    42cc:	00 94       	com	r0
    42ce:	2a 0f       	add	r18, r26
    42d0:	30 1d       	adc	r19, r0
    42d2:	40 1d       	adc	r20, r0
    42d4:	50 1d       	adc	r21, r0
    42d6:	60 1d       	adc	r22, r0
    42d8:	70 1d       	adc	r23, r0
    42da:	80 1d       	adc	r24, r0
    42dc:	90 1d       	adc	r25, r0
    42de:	08 95       	ret

000042e0 <__subdi3>:
    42e0:	2a 19       	sub	r18, r10
    42e2:	3b 09       	sbc	r19, r11
    42e4:	4c 09       	sbc	r20, r12
    42e6:	5d 09       	sbc	r21, r13
    42e8:	6e 09       	sbc	r22, r14
    42ea:	7f 09       	sbc	r23, r15
    42ec:	80 0b       	sbc	r24, r16
    42ee:	91 0b       	sbc	r25, r17
    42f0:	08 95       	ret

000042f2 <__cmpdi2>:
    42f2:	2a 15       	cp	r18, r10
    42f4:	3b 05       	cpc	r19, r11
    42f6:	4c 05       	cpc	r20, r12
    42f8:	5d 05       	cpc	r21, r13
    42fa:	6e 05       	cpc	r22, r14
    42fc:	7f 05       	cpc	r23, r15
    42fe:	80 07       	cpc	r24, r16
    4300:	91 07       	cpc	r25, r17
    4302:	08 95       	ret

00004304 <__cmpdi2_s8>:
    4304:	00 24       	eor	r0, r0
    4306:	a7 fd       	sbrc	r26, 7
    4308:	00 94       	com	r0
    430a:	2a 17       	cp	r18, r26
    430c:	30 05       	cpc	r19, r0
    430e:	40 05       	cpc	r20, r0
    4310:	50 05       	cpc	r21, r0
    4312:	60 05       	cpc	r22, r0
    4314:	70 05       	cpc	r23, r0
    4316:	80 05       	cpc	r24, r0
    4318:	90 05       	cpc	r25, r0
    431a:	08 95       	ret

0000431c <memcpy>:
    431c:	fb 01       	movw	r30, r22
    431e:	dc 01       	movw	r26, r24
    4320:	02 c0       	rjmp	.+4      	; 0x4326 <memcpy+0xa>
    4322:	01 90       	ld	r0, Z+
    4324:	0d 92       	st	X+, r0
    4326:	41 50       	subi	r20, 0x01	; 1
    4328:	50 40       	sbci	r21, 0x00	; 0
    432a:	d8 f7       	brcc	.-10     	; 0x4322 <memcpy+0x6>
    432c:	08 95       	ret

0000432e <memset>:
    432e:	dc 01       	movw	r26, r24
    4330:	01 c0       	rjmp	.+2      	; 0x4334 <memset+0x6>
    4332:	6d 93       	st	X+, r22
    4334:	41 50       	subi	r20, 0x01	; 1
    4336:	50 40       	sbci	r21, 0x00	; 0
    4338:	e0 f7       	brcc	.-8      	; 0x4332 <memset+0x4>
    433a:	08 95       	ret

0000433c <strchr>:
    433c:	fc 01       	movw	r30, r24
    433e:	81 91       	ld	r24, Z+
    4340:	86 17       	cp	r24, r22
    4342:	21 f0       	breq	.+8      	; 0x434c <strchr+0x10>
    4344:	88 23       	and	r24, r24
    4346:	d9 f7       	brne	.-10     	; 0x433e <strchr+0x2>
    4348:	99 27       	eor	r25, r25
    434a:	08 95       	ret
    434c:	31 97       	sbiw	r30, 0x01	; 1
    434e:	cf 01       	movw	r24, r30
    4350:	08 95       	ret

00004352 <strcmp>:
    4352:	fb 01       	movw	r30, r22
    4354:	dc 01       	movw	r26, r24
    4356:	8d 91       	ld	r24, X+
    4358:	01 90       	ld	r0, Z+
    435a:	80 19       	sub	r24, r0
    435c:	01 10       	cpse	r0, r1
    435e:	d9 f3       	breq	.-10     	; 0x4356 <strcmp+0x4>
    4360:	99 0b       	sbc	r25, r25
    4362:	08 95       	ret

00004364 <strncmp>:
    4364:	fb 01       	movw	r30, r22
    4366:	dc 01       	movw	r26, r24
    4368:	41 50       	subi	r20, 0x01	; 1
    436a:	50 40       	sbci	r21, 0x00	; 0
    436c:	30 f0       	brcs	.+12     	; 0x437a <strncmp+0x16>
    436e:	8d 91       	ld	r24, X+
    4370:	01 90       	ld	r0, Z+
    4372:	80 19       	sub	r24, r0
    4374:	19 f4       	brne	.+6      	; 0x437c <strncmp+0x18>
    4376:	00 20       	and	r0, r0
    4378:	b9 f7       	brne	.-18     	; 0x4368 <strncmp+0x4>
    437a:	88 1b       	sub	r24, r24
    437c:	99 0b       	sbc	r25, r25
    437e:	08 95       	ret

00004380 <strrchr>:
    4380:	fc 01       	movw	r30, r24
    4382:	81 e0       	ldi	r24, 0x01	; 1
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	01 90       	ld	r0, Z+
    4388:	06 16       	cp	r0, r22
    438a:	09 f4       	brne	.+2      	; 0x438e <strrchr+0xe>
    438c:	cf 01       	movw	r24, r30
    438e:	00 20       	and	r0, r0
    4390:	d1 f7       	brne	.-12     	; 0x4386 <strrchr+0x6>
    4392:	01 97       	sbiw	r24, 0x01	; 1
    4394:	08 95       	ret

00004396 <_exit>:
    4396:	f8 94       	cli

00004398 <__stop_program>:
    4398:	ff cf       	rjmp	.-2      	; 0x4398 <__stop_program>
